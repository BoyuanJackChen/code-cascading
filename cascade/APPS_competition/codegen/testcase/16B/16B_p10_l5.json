[
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 3'\n) == '5'\nassert solution(\n    '8'\n    '( 2 ( 2 1 ) ) 3'\n) == '9'\nassert solution(\n    '4'\n    '( 12 3 )'\n) == '36'\nassert solution(\n    '6'\n    '( ( 2 3 ) )'\n) == '5'\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\nassert solution(\"( ( 12 3 ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(r'4\\n( 2 ( 2 1 ) ) 3\\n') == '9'\nassert solution(r'8\\n( 2 ( 2 1 ) ) 3\\n') == '9'\nassert solution(r'6\\n( ( 2 3 ) )\\n') == '5'\nassert solution(r'6\\n( ( 2 3 ) )\\n') == '5'\nassert solution(r'6\\n( ( 2 3 ) )\\n') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n( ( 2 3 ) )\") == \"5\"\n\"\"\""
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n( 12 3 )') == '9'\nassert solution('8\\n( 2 ( 2 1 ) ) 3') == '9'\nassert solution('6\\n( 2 ) ( 3 )') == '5'\nassert solution('6\\n( ( 2 3 ) )') == '5'\n\"\"\"\nfrom itertools import zip_longest\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 2 3 )\") == \"5\"\nassert solution(\"( 2 ( ( 2 3 ) ) )\") == \"5\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"981\") == \"2\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010\") == 0\nassert solution(\"11110\") == 1\nassert solution(\"0\") == 0\nassert solution(\"11110\") == 1\nassert solution(\"009990001\") == 3\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n\nprint('All tests passed.')"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('00') == '0'\nassert solution('0') == '0'\nassert solution('00') == '0'\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n\"\"\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\nassert solution(\"610\") == 4\n\n\"\"\"\n\nimport math\nimport sys\n\nclass palindrome:\n    def __init__(self,input: str):\n        self.input = input\n        self.palindrome = self.getPalindrome()\n\n    def getPalindrome(self):\n        if len(self.input) <= 1:\n            return self.input\n\n        self.reversed = self.input[::-1]\n        return self.input if self.input == self.reversed else None\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\nassert solution(\"610\") == 4\nassert solution(\"981\") == 2\n\nprint('All tests passed.')\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2017 11 0\\n2018 1 1000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2018 1 0\") == \"tampered odometer\"\nassert solution(\"2017 11 0\\n2018 1 42000\") == \"insufficient service\"\nassert solution(\"2017 11 0\\n2018 1 42000\") == \"tampered odometer\"\nassert solution(\"2017 11 0\\n2018 1 42000\") == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2017 11 0\\n2018 1 1000') =='seems legit'\nassert solution('2017 11 0\\n2018 1 10000') == 'tampered odometer'\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\n\"\"\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017 11 0\\n2017 2 12000\\n2018 1 42000\\n2018 2 42001\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2017 2 12000\\n2018 1 42000\\n2018 2 42001\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2017 2 12000\\n2018 1 42000\\n2018 2 42001\") == \"seems legit\"\n\nprint(\"Successfully solved!\")\n'''\n\nfrom dataclasses import dataclass"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('2017 11 0\\n2018 1 1000\\n') == 'tampered odometer'\nassert solution('2013 1 0\\n2013 2 0\\n') =='seems legit'\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2017\\n2017\\n2018\\n2018') =='seems legit'\nassert solution('2013\\n2013\\n2013\\n2013') =='seems legit'\nassert solution('2013\\n2013\\n2013\\n2014') == 'tampered odometer'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\nassert solution(\"2017 1 0\\n2017 2 0\") == \"insufficient service\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        print(self.servicelist())\n        return \n        \n    def servicelist(self) -> list:\n        service = []\n        for i in range(int(stdin)):\n            (year, month, odometer) = stdin.split()\n            (y, m, o) = (int(year), int(month), int(odometer))\n            service.append((y, m, o))\n        return service\n    \n    def servicecount(self, servicelist: list) -> dict:\n        service = {}\n        for i in range(1, len(servicelist)):\n            prev = servicelist[i-1]\n            curr = servicelist[i]\n            (y, m, o) = (prev[0], prev[1], prev[2])\n            (y2, m2, o2) = (curr[0], curr[1], curr[2])\n            if (y, m) == (y2, m2):\n                continue\n            elif (y, m) == (y2, m2 - 1):\n                if o2 >= o + 30000:\n                    continue\n                else:\n                    service[(y, m)] = service.get((y, m), 0) + 1\n            elif (y, m) == (y2 - 1, m2):\n                if o2 > o + 12:\n                    continue\n                else:\n                    service[(y, m)] = service.get((y, m), 0) + 1\n            elif (y, m) == (y2, m2):\n                service[(y, m)] = service.get((y, m), 0) + 1\n            else:\n                service[(y, m)] = service.get((y, m), 0) + 1\n        return service\n    \n    def check(self, servicecount: dict) -> bool:\n        for i in range(1, len(servicecount)):\n            (y, m) = list(servicecount.keys())[i]\n            (y2, m2) = list(servicecount.keys())[i-1]\n            (y3, m3) = list(servicecount.keys())[i+1]\n            if (servicecount[(y, m)] >= 3) and (servicecount[(y2, m2)] >= 2) and (servicecount[(y3, m3)] >= 2):\n                return True\n            else:\n                return False\n        \n        \n    def main(self) -> None:\n        servicelist = self.servicelist()\n        servicecount = self.servicecount(servicelist)\n        if self.check(servicecount):\n            print(\"tampered odometer\")\n        elif not self.check(servicecount):\n            print(\"seems legit\")\n        return\n        \n    def test(self) -> None:\n        assert self.solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\n        assert self.solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\n        "
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\") == \"tampered odometer\"\nassert solution(\"3\\n2017 11 0\\n2018 1 1000\") == \"insufficient service\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n2017 4 0\n2017 8 12000\n2018 8 42000\"\"\") == \"seems legit\"\nassert solution(\"\"\"3\n2017 11 0\n2018 1 1000\"\"\") == \"tampered odometer\"\nassert solution(\"\"\"2\n2013 1 0\n2013 2 0\"\"\") == \"insufficient service\"\nassert solution(\"\"\"2\n2010 1 0\n2010 2 0\"\"\") == \"insufficient service\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n\") == \"seems legit\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\\n\") == \"tampered odometer\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == '1'\nassert solution(\"2\\n3\\n4\\n\") == '2'\nassert solution(\"4\\n1\\n2\\n3\\n\") == '3'\nassert solution(\"4\\n1\\n2\\n3\\n\") == '2'\nassert solution(\"5\\n2\\n4\\n3\\n\") == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\n\nIn the above example, there are 2 edges between vertex 0 and vertex 1. This is a part of the problem description. Because of this, vertex 0 and vertex 1 must be colored with different colors.\n\nIn the above example, there are 4 edges between vertex 0 and vertex 1. This is a part of the problem description. Because of this, vertex 0 and vertex 1 are colored with two different colors.\n\nIn the above example, there are 3 edges between vertex 0 and vertex 1. This is a part of the problem description. Because of this, vertex 0 and vertex 1 are colored with the same color.\n\nIn the above example, there are 3 edges between vertex 0 and vertex 1. This is a part of the problem description. Because of this, vertex 0 and vertex 1 are colored with the same color.\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\nassert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '2'\n\"\"\"\n\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4') == '2'\nassert solution('4\\n1 2\\n0 2 3\\n0 1\\n1') == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n''') == '2'\nassert solution('''\n5\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n''') == '2'\nassert solution('''\n4\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n''') == '4'\nassert solution('''\n7\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n''') == '3'\nassert solution('''\n8\n0 1 1\n2 3 3\n2 4 4\n0 5 5\n6 7 7\n6 8 8\n0 6 6\n''') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == '3'\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == '2'\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == '2'\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n0 2 3\\n0 1\") == \"3\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\") == \"2\"\nassert solution(\"5\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"4\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nBLUE 1 4000\\nRED 4002 10000\") == \"IMPOSSIBLE\"\nassert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\n\"\"\"\nimport collections\nimport copy\nimport itertools\nimport functools\nimport operator\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\\n\") == \"3\"\nassert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\\n\") == \"2\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\nRED 5001 10000\nBLUE 1 5000\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000') == 'IMPOSSIBLE'\nassert solution('2\\nBLUE 1 4000\\nRED 4002 10000') == 'IMPOSSIBLE'\nprint('Test pass.')"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\nassert solution(\"2\\nRED 5001 10000\") == \"1\"\nassert solution(\"3\\nBLUE 1 6000\\nORANGE 4000 8000\") == \"2\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('PRIM') == 5\nassert solution('BABBABABBABBA') == 6\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import groupby\n\nimport pytest\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\n\"\"\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('GGGGGGGGG') == 1\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6\nassert solution('CCCCCCCCCCC') == 1\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"POPPOP\") == 'POPPOP'\nassert solution(\"ABABABAB\") == 'AB(A)A'\nassert solution(\"BABBABABBAB\") == 'AB(BA)A'\nassert solution(\"CABBADABB\") == 'AB(BADAB)A'\nassert solution(\"ABABABAB\") == 'AB(ABABA)A'\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AAAAA\") == 1\nassert solution(\"AAAABB\") == 1\nassert solution(\"AAAAAB\") == 2\nassert solution(\"AAAAAA\") == 2\nassert solution(\"A\") == 1\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('GGGGGGGGG') == 1\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'PRATTATTATTIC'\n) == 6\nassert solution(\n    'GGGGGGGGG'\n) == 1\nassert solution(\n    'PRIME'\n) == 5\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('GGGGGGGGG') == 1\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == '0'\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == '1'\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == '0'\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == '0'\n\n'''\nclass DNA_Edit:\n    def __init__(self, program, is_reversed=False):\n        self.program = program.replace('\\n', '')\n        self.program = program.replace(' ', '')\n        self.is_reversed = is_reversed\n        self.translate_program = self.translate_program()\n\n    def translate_program(self):\n        pass\n\nclass DNA_Del(DNA_Edit):\n    def translate_program(self):\n        if self.is_reversed:\n            self.program = self.program[::-1]\n            self.program = list(self.program)\n            for i in range(0, len(self.program)):\n                if self.program[i] == 'D':\n                    self.program[i] = 'I'\n        else:\n            self.program = self.program.replace('D', 'I')\n            self.program = list(self.program)\n            for i in range(0, len(self.program)):\n                if self.program[i] == 'D':\n                    self.program[i] = 'I'\n\nclass DNA_Ins(DNA_Edit):\n    def translate_program(self):\n        if self.is_reversed:\n            self.program = self.program[::-1]\n            self.program = list(self.program)\n            for i in range(0, len(self.program)):\n                if self.program[i] == 'I':\n                    self.program[i] = 'D'\n        else:\n            self.program = self.program.replace('I', 'D')\n            self.program = list(self.program)\n            for i in range(0, len(self.program)):\n                if self.program[i] == 'I':\n                    self.program[i] = 'D'\n\nclass DNA_Edit_Checker:\n    def __init__(self, first, second, is_reversed=False):\n        self.first = first\n        self.second = second\n        self.is_reversed = is_reversed\n        self.first_translate = self.translate_program(self.first)\n        self.second_translate = self.translate_program(self.second)\n\n    def translate_program(self, program):\n        program = program.replace('\\n', '')\n        program = program.replace(' ', '')\n        if self.is_reversed:\n            program = program[::-1]\n            program = list(program)\n            for i in range(0, len(program)):\n                if program[i] == 'D':\n                    program[i] = 'I'\n        else:\n            program = program.replace('D', 'I')\n            program = list(program)\n            for i in range(0, len(program)):\n                if program[i] == 'D':\n                    program[i] = 'I'\n        return program\n\n    def is_identical(self):\n        return self.first_translate == self.second_translate\n\n\ndna_edit_checker = DNA_Edit_Checker('D 1\\nD 2\\nE\\nD 3\\nD 1\\nE', 'D 2\\nD 1\\nE\\nD 1\\nD 2\\nE')\ndna_edit_checker.is_identical()\n\n'''"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('D 1\\nD 2\\nE\\nD 3\\nD 1\\nE') == '0'\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE') == '1'\nassert solution('I 1 X\\nD 1\\nE\\nE') == '0'\nassert solution('I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE') == '0'\nassert solution('I 14 A\\nI 15 B\\nE') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 2\") == \"0\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 3\") == \"0\"\nassert solution(\"D 1\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"D 1 D 2 E D 3 D 1 E\") == \"0\"\nassert solution(\"I 1 X D 1 E\") == \"0\"\nassert solution(\"I 14 B I 14 A E E\") == \"0\"\nassert solution(\"D 2 D 1 E D 1 D 2 E\") == \"1\"\nassert solution(\"D 1 D 2 E D 3 D 1 E\") == \"1\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"D 1\\nD 2\\nE\") == \"0\"\n\nassert solution(\"D 1\\nD 2\\nD 1\\nE\") == \"1\"\n\nassert solution(\"D 2\\nD 1\\nE\") == \"1\"\n\nassert solution(\"D 1\\nD 2\\nD 1\\nE\") == \"0\"\n\nassert solution(\"I 14 B\\nI 14 A\\nE\") == \"0\""
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"D 1\\nD 2\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\") == \"0\"\nassert solution(\"I 14 A\\nI 15 B\\nE\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 2\") == \"0\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 3\") == \"0\"\nassert solution(\"D 1\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 2\") == \"1\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 3\") == \"1\"\nassert solution(\"D 1\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE') == '0'\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE') == '1'\nassert solution('I 1 X\\nD 1\\nE\\nE') == '0'\nassert solution('I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE') == '0'\nassert solution('D 1\\nD 2\\nE') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\n\"\"\"\n\nimport unittest\nimport re\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 1 0 0 0\") == '300'\nassert solution(\"5 0 1 0 1 0\") == '1900'\nassert solution(\"6 0 1 1 0 0\") == '2300'\nassert solution(\"10 399 0 0 0 0\") == '399'\nprint('All tests passed.')\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\nassert solution(\"10 0 399 0 0 0\") == \"399\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\"\n\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\n\n\"\"\""
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n\nprint(\"All tests passed.\")\n\"\"\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\"\n\nimport io"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\nprint(solution(\"4 0 1 0 0 0\"))\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 0 1 0 0 0\"\"\") == \"300\"\nassert solution(\"\"\"5 0 1 0 1 0\"\"\") == \"1900\"\nassert solution(\"\"\"6 0 1 1 0 0\"\"\") == \"2300\"\nassert solution(\"\"\"10 399 0 0 0 0\"\"\") == \"399\"\n\n\"\"\"\n\nDay 3, 2020\n\n\n\nJohan has currently the following fruit trees planted in his farm:\n\napple, pear, cherry, lemon, orange, grape\n\nToday, the season has started, and there is no more food in the fruit farm. Johan has planted all his fruits again, but the season has already started. He still has to sell them.\n\nHowever, the fruit prices have changed. Instead of the current fruits, the vendor now has the following fruits:\n\napple, pineapple, pears, peaches, bananas, mango, oranges, melons\n\nJohan decides to not use the current fruits anymore and only plant the new ones.\n\nThe price per unit of the fruit tree is $100$. For each different fruit, the vendor sells the same, but for different prices.\n\nJohan wants to stay in his current farm, but it is very expensive. He has decided to buy a new, bigger farm to expand his fruit farm.\n\nA fruit farm is a room in the house, where fruits are sold. The price per unit of the fruit farm is a factor of the price of the house. The price of the house is calculated as follows:\n\nprice of the house = $A$ + ($B$ * number of fruit farms in the house) + ($C$ * number of fruit trees planted)\n\nJohan has to pay $D$ to purchase a new fruit farm and plant the same number of fruit trees in it that he has in his current fruit farm. The vendor sells fruits for the same price as in his current fruit farm.\n\nJohan is very busy today, so he can only buy one new fruit farm. The cost of this new fruit farm is $E$.\n\nHow much money does he have after planting the new fruit farm and selling the remaining fruits?\n\n-----Input-----\nThe input consists of a single line containing six integers $A$, $B$, $C$, $D$, $E$ and $F$ (all integers), where:\n\n- $A$ is the price of the house\n- $B$ is the price of the fruit farm\n- $C$ is the price of a fruit tree planted in the current fruit farm\n- $D$ is the price of a fruit tree planted in the new fruit farm\n- $E$ is the cost of purchasing a new fruit farm\n- $F$ is the number of fruits in the new fruit farm\n\nThe house has no fruit farms and the number of fruits in the new fruit farm is the same as in the current fruit farm.\n\n-----Output-----\nOutput a single integer: the maximum amount of money Johan can earn.\n\n-----Examples-----\nSample Input 1:\n4 100 1 1 0 0\nSample Output 1:\n450\n\nSample Input 2:\n4 99 1 1 0 0\nSample Output 2:\n451\n\nSample Input 3:\n4 5 1 1 0 0\nSample Output 3:\n449\n\nSample Input 4:\n4 5 1 1 1 0\nSample Output 4:\n453\n\nSample Input 5:\n4 50 1 1 1 1\nSample Output 5:\n450\n\nSample Input 6:\n4 50 1 1 1 1\nSample Output 6:\n450\n\nSample Input 7:\n4 50 1 1 1 1\nSample Output 7:\n450\n\nSample Input 8:\n4 50 1 1 1 1\nSample Output 8:\n450\n\nSample Input 9:\n4 50 1 1 1 1\nSample Output 9:\n450\n\nSample Input 10:\n4 50 1 1 1 1\nSample Output 10:\n450\n\nSample Input 11:\n4 50 1 1 1 1\nSample Output 11:\n450\n\nSample Input 12:\n4 50 1 1 1 1\nSample Output 12:\n450\n\nSample Input 13:\n4 50 1 1 1 1\nSample Output 13:\n450\n\nSample Input 14:\n4 50 1 1 1 1\nSample Output 14:\n450\n\nSample Input 15:\n4 50 1 1 1 1\nSample Output 15:\n450\n\nSample Input 16:\n4 50 1 1 1 1\nSample Output 16:\n450\n\nSample Input 17:\n4 50 1 1 1 1\nSample Output 17:\n450\n\nSample Input 18:\n4 50 1 1 1 1\nSample Output 18:\n450\n\nSample Input 19:\n4 50 1 1 1 1\nSample Output 19:\n450\n\nSample Input 20:\n4 50 1 1 1 1\nSample Output 20:\n450\n\nSample Input 21:\n4 50 1 1 1 1\nSample Output 21:\n450\n\nSample Input 22:\n4 50 1 1 1 1\nSample Output 22:\n450\n\nSample Input 23:\n4 50 1 1 1 1\nSample Output 23:\n450\n\nSample Input 24:\n4 50 1 1 1 1\nSample Output 24:\n450\n\nSample Input 25:\n4 50 1 1 1 1\nSample Output 25:\n450\n\nSample Input 26:\n4 50 1 1 1 1\nSample Output 26:\n450\n\nSample Input 27:\n4 50 1 1 1 1\nSample Output 27:\n450\n\nSample Input 28:\n4 50 1 1 1 1\nSample Output 28:\n450\n\nSample Input 29:\n4 50 1 1 1 1\nSample Output 29:\n450\n\nSample Input 30:\n4 50 1 1 1 1\nSample Output 30:\n450\n\nSample Input 31:\n4 50 1 1 1 1\nSample Output 31:\n450\n\nSample Input 32:\n4 50 1 1 1 1\nSample Output 32:\n450\n\nSample Input 33:\n4 50 1 1 1 1\nSample Output 33:\n450\n\nSample Input 34:\n4 50 1 1 1 1\nSample Output 34:\n450\n\nSample Input 35:\n4 50 1 1 1 1\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == \"2\"\nassert solution(\"2 10\\n1 5\\n4 1\") == \"2\"\nassert solution(\"2 10\\n1 5\\n4 1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == answer\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10\\n1 12\\n1 13') == 2\nassert solution('2 10\\n1 5\\n1 12\\n1 13') == 2\nassert solution('2 10\\n1 5\\n4 1\\n1 12\\n1 13') == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n1 12') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == 2\nassert solution('2 10\\n1 12\\n1 13') == 2\nassert solution('2 10\\n1 12\\n1 4') == 2\nassert solution('2 10\\n4 1\\n1 5') == 2\nassert solution('2 10\\n4 1\\n1 5') == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10\\n1 12\\n1 13') == '2'\n\"\"\""
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == \"2\"\nassert solution(\"2 10\\n4 1\\n4 1\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10\\n1 12\\n1 13') == 2\nassert solution('2 10\\n1 5\\n1 12\\n1 13') == 2\nassert solution('2 10\\n1 5\\n4 1\\n1 12\\n1 13') == 2\nassert solution('2 10\\n1 5\\n4 1\\n4 1') == 2\nassert solution('2 10\\n1 5\\n4 1\\n4 1') == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10\\n1 12\\n1 13') == '2'\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\\n\") == \"28.970562748\"\n\"\"\"\nfrom typing import List, Dict, Any\n\nimport numpy as np\n\nENERGY_POSITIVE = 1\nENERGY_NEGATIVE = -1\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '32'\n\n\"\"\"\n\nfrom typing import List, Tuple, Dict\nimport math\n\nINT_MIN = -20000\nINT_MAX = 20000\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == '28'\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == '28.970562748'\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\\n') == '28.970562748'\nassert solution('4\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n') == '32'\n\"\"\"\n\nn = int(stdin.readline().strip())\nres = set()\nfor _ in range(n):\n    l, t, e = map(int, stdin.readline().split())\n    if e > 0:\n        res.add(l + t)\n    elif e < 0:\n        res.add(l - t)\nprint('POSSIBLE' if res else 'IMPOSSIBLE')\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == '28'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3') == '28.970562748'\nassert solution('8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '32'\n\n\"\"\"\n\nwith open(\"input.txt\") as file:\n    lines = file.read().splitlines()\n\noutput = ''\n\nfor line in lines:\n    line = line.split()\n    x, y = int(line[0]), int(line[1])\n    e = int(line[2])\n    output += str(abs(x - y) * e) + '\\n'\n\nprint(output.strip())\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '28.970562748'\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('5\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3') == '28.970562748'\n'''"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == '28'\n\"\"\"\n\nimport sys\n\nassert sys.version_info >= (3, 7)\n\ni = 0\nx = []\ny = []\nfor line in sys.stdin:\n    x.append(int(line.split()[0]))\n    y.append(int(line.split()[1]))\n    i = i + 1"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == '28'\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == '28.970562748'\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == '32'\n\n-----Notes-----\n\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom math import sqrt"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '28.970562748'\n\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3 4') == '-1'\nassert solution('1\\n3 5 2') == '-1'\nassert solution('1\\n2 5 5') == '2'\nassert solution('2\\n5 5 1') == '-1'\nassert solution('3\\n5 5 2') == '2'\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3') == '3'\nassert solution('3\\n5 2 7 10\\n7 4 4 10') == '1'\nassert solution('3\\n2 1 6 5\\n2 5 5 4') == '1'\nassert solution('2\\n-1 -2 -1 -1\\n-1 2 -1 -1') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(Solution().solution(stdin)))\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\n\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\") == \"1\"\n\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == \"1\"\n\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n1 3 9 5\n2 2 6 8\n4 8 9 3\"\"\") == \"3\"\nassert solution(\"\"\"3\n5 2 7 10\n7 4 4 10\n2 4 10 8\"\"\") == \"1\"\nassert solution(\"\"\"3\n2 1 6 5\n2 5 5 4\n5 1 7 7\"\"\") == \"1\"\nassert solution(\"\"\"2\n-1 -2 -1 -1\n-1 2 -1 -1\"\"\") == \"1\"\nassert solution(\"\"\"3\n5 2 7 10\n7 4 4 10\n2 4 10 8\"\"\") == \"1\"\n\n\"\"\"\nnumber of points = (n-1)(n-2)/2\n\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\nx0, y0, x1, y1\n1 3 9 5\n2 2 6 8\n4 8 9 3\n5 1 7 7\n\n3 points\n(1, 3)\n(1, 3)\n(3, 9)\n(3, 9)\n\n2 points\n(1, 3)\n(5, 2)\n(5, 2)\n(2, 6)\n(2, 6)\n\n1 point\n(1, 3)\n(5, 2)\n(2, 6)\n(2, 6)\n\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3') == '3'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == 3\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\") == 1\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == 1\nassert solution(\"3\\n1 1 1 1\\n2 2 2 2\") == -1"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n') == 3\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n') == 1\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n') == 1\nassert solution('3\\n2 1 6 5\\n2 5 5 4\\n5 1 7 7\\n') == -1"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\") == \"1\"\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == 3\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\") == 1\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == 1\nassert solution(\"3\\n-1 -2 -1 -1\\n2 5 -1 -1\") == -1\n\n\"\"\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == 10\nassert solution('5') == 5\nassert solution('55') == 55\nassert solution('101') == -1\nassert solution('1234321') == 94708\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == 10\n\n\"\"\"\n\nn = int(input())\ncount = 0\nnum = 1\nwhile num <= n:\n    list = [int(i) for i in str(num)]\n    for i in range(len(list)-1):\n        if list[i] <= list[i+1]:\n            count += 1\n    if count == len(list)-1:\n        count = 0\n        num += 1\n    else:\n        count = 0\n        break\nprint(num)\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\nprint('All tests passed.')\n\n\"\"\"\n\n\"\"\"\n\u7b2c\u4e09\u8f6e\n\n\u7ec3\u4e602\n\n\u95ee\u9898\uff1a\n\nGiven a positive integer, if it is a hill number, print the number of positive hill numbers less than or equal to it. If it is not a hill number, print -1.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will consist of a single integer $n$ ($1 \\le n \\le 10^{18}$).\n\n-----Output-----\nOutput a single line with a single integer. If the input is a hill number, then output the number of hill numbers less than or equal to it. If the input is not a hill number, then output -1.\n\n-----Examples-----\nSample Input 1:\n10\nSample Output 1:\n10\n\nSample Input 2:\n55\nSample Output 2:\n55\n\nSample Input 3:\n101\nSample Output 3:\n-1\n\nSample Input 4:\n1234321\nSample Output 4:\n94708\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123) == 1\nassert solution(1234321) == 94708\nassert solution(5) == 1\nassert solution(123123123) == 9\nassert solution(13) == 2\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"122323\") == \"94708\"\nassert solution(\"1234321\") == \"94708\"\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"5\") == \"5\"\nassert solution(\"111\") == \"3\"\nassert solution(\"1234321\") == \"94708\"\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == 10\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 10\nassert solution('55') == 55\nassert solution('101') == -1\nassert solution('1234321') == 94708\n\"\"\"\nimport math\nimport sys\n\nfrom typing import List"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 10\nassert solution('12223') == 12223\nassert solution('33322111') == 33322111\nassert solution('1232321') == -1\nassert solution('1232221') == -1\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\nassert solution(\"1 2 0 0 6\") == 0\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\""
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 0 0 5\") == \"6\"\nassert solution(\"2 1 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\nassert solution(\"1 2 0 0 6\") == 0\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 6\nassert solution(1) == 2\nassert solution(2) == 2\nassert solution(5) == 16\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''0.5 -5.301 3.098''') == '-1.26167861 3.88425357'\nassert solution('''0.5 8 8''') == '9.21068947 2.56226688'\nassert solution('''1 8 8''') == '6.22375968 -0.31921472'\nassert solution('''0.5 -8 8''') == '-4.36385220 9.46891588'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8.8 8') == '9.21068947 2.56226688'\nassert solution('1 8.8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0.5 -5.301 3.098''') == '''-1.26167861 3.88425357'''\nassert solution('''0.5 8 8''') == '''9.21068947 2.56226688'''\nassert solution('''1 8 8''') == '''6.22375968 -0.31921472'''\nassert solution('''0.5 -8 8''') == '''-4.36385220 9.46891588'''\nprint('all tests passed')\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nprint('Passed!')\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n'''\n\nfrom math import sqrt, atan, pi\n\nstdin = input()\nb, tx, ty = list(map(float, stdin.split()))\n\nr_b, phi_b = b, 2 * pi\nx_b, y_b = tx, ty\n\nwhile True:\n    r_n = r_b\n    phi_n = phi_b\n    x_n = x_b\n    y_n = y_b\n    r_b = r_n + phi_n\n    x_b = r_n * cos(phi_n)\n    y_b = r_n * sin(phi_n)\n    phi_b = phi_n + pi / 2\n    if sqrt(x_b**2 + y_b**2) > 2 * pi * b:\n        break\n\nr_1, r_2 = sqrt(x_b**2 + y_b**2), sqrt(tx**2 + ty**2)\n\nwhile True:\n    if r_1 > 10**-3 and r_2 > 10**-3:\n        r_2 = sqrt((x_b - tx)**2 + (y_b - ty)**2)\n        x_2 = tx - (r_1 - r_2) * cos(atan((y_b - ty) / (x_b - tx)))\n        y_2 = ty - (r_1 - r_2) * sin(atan((y_b - ty) / (x_b - tx)))\n        if (x_2 - x_b)**2 + (y_2 - y_b)**2 <= (tx - x_b)**2 + (ty - y_b)**2:\n            break\n    else:\n        break\n\nprint(x_2, y_2)"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\nassert solution('0.5 -8 8') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == '-1.26167861 3.88425357'\nassert solution(\"0.5 8 8\") == '9.21068947 2.56226688'\nassert solution(\"1 8 8\") == '6.22375968 -0.31921472'\nassert solution(\"0.5 -8 8\") == '-4.36385220 9.46891588'\n\n\"\"\""
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\") == \"2\\n4\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\\n4\"\n\nprint('Success')"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\\n1\\n2\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\\n1\\n1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\\n1\\n1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\\n1\\n1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\\n1\\n1\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 1') == '1'\nassert solution('2 2\\n1 2') == '1'\nassert solution('3 3\\n1 2\\n2 3\\n3 1') == '2'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1') == '2'\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1\\n2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\\n1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\\n1\\n1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\\n4\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\\n4\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\\n4\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\\n4\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4') == '2\\n4\\n5'\n\"\"\"\n\nfrom typing import List, Dict\n\nclass Solution:\n    def solution(self, input_str: str) -> str:\n        n, m = map(int, input_str.split())\n        adj: Dict[int, List[int]] = {i: [] for i in range(1, n + 1)}\n        for _ in range(m):\n            u, v = map(int, input().split())\n            adj[u].append(v)\n            adj[v].append(u)\n        count = 0\n        for u in adj.keys():\n            if len(adj[u]) < 2:\n                continue\n            for v in adj[u]:\n                if len(adj[v]) < 2:\n                    continue\n                if v in adj[u]:\n                    count += 1\n        if count < n * (n - 1) // 2:\n            return count\n        return n * (n - 1) // 2 - count\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"1\"\nassert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n\") == \"2\\n4\\n5\"\n\n\"\"\""
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 2\n2 3\n3 1''') == '''1\n1\n1\n'''\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1''') == '''2\n2\n2\n2\n'''\nassert solution('''4 5\n1 2\n1 3\n3 2\n2 4\n3 4''') == '''0\n1\n0\n1\n'''\nassert solution('''4 5\n1 2\n1 3\n2 3\n3 4\n4 1''') == '''0\n1\n0\n1\n'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\nprint(\"Passed!\")\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\") == \"1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"infinity\"\nassert solution(\"4 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\") == \"infinity\"\n\"\"\"\n\nimport heapq\nimport itertools\nimport math\n\n\nclass Edge:\n    def __init__(self, start, end, weight):\n        self.start = start\n        self.end = end\n        self.weight = weight\n\n    def __lt__(self, other):\n        return self.weight < other.weight\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\n\"\"\"\n\nimport sys\nimport queue\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\n\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\n\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\n\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\n\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\") == \"infinity\"\n\nprint(\"All test cases passed.\")\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\n\"\"\"\nimport collections\n\nfrom day_20 import parse"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\"\"\") == \"11\"\nassert solution(\"\"\"5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\"\"\") == \"infinity\"\nassert solution(\"\"\"2 1 0 1\n0 1 2\"\"\") == \"2\"\nassert solution(\"\"\"3 3 1 2\n0 1 1\n1 0 1\n1 2 1\"\"\") == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"infinity\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 0 1\\n2 0 1\\n3 0 1\\n2 4 1\") == \"infinity\"\n\n\"\"\"\n\nfrom typing import List, Dict\nfrom collections import defaultdict, Counter\nimport heapq\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        ball_count, tube_count, s, t = [int(x) for x in stdin.split()]\n        weights = Counter([(ball, tube) for ball, tube in\n            [tuple(map(int, line.split())) for line in stdin.splitlines()[tube_count:]]])\n        \n        weights_heap: List[int] = []\n        for ball in range(ball_count):\n            for tube in range(ball + 1, ball_count):\n                if ball!= t and tube!= t:\n                    heapq.heappush(weights_heap, -weights[(ball, tube)])\n        \n        ball = s\n        if ball == t:\n            return 0\n        time = 0\n        while ball!= t:\n            while ball!= t:\n                if ball!= t and weights[(ball, ball + 1)]!= 0:\n                    heapq.heappush(weights_heap, -weights[(ball, ball + 1)])\n                ball = (ball + 1) % ball_count\n                time += 1\n            if len(weights_heap) == 0:\n                return \"infinity\"\n            ball = ball_count + heapq.heappop(weights_heap)\n            if ball!= t:\n                heapq.heappush(weights_heap, -weights[(ball, ball + 1)])\n        return time\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\\n\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\\n\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\\n\") == \"2\"\n\n\"\"\"\n\n\nimport sys\nimport itertools"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\n\"\"\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"infinity\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\") == \"infinity\"\n\"\"\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == '6'\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == '0'\nassert solution('3 2 2 3\\n1 1\\n2 2 3') == '18'\nassert solution('3 1 2 3\\n2 1 2') == '0'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import lru_cache\nfrom itertools import product"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == \"0\"\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == \"18\"\nassert solution(\"3 1 2 3\\n2 1 2\") == \"0\"\nassert solution(\"4 2 2 4\\n2 1 2\") == \"8\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == \"0\"\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == \"18\"\n\"\"\"\n\nn, *colors = [int(line) for line in stdin.split()]\n\nk, *unused = [int(c) for c in stdin.splitlines()[1].split()]\n\nl, *sequence = [int(s) for s in stdin.splitlines()[2].split()]\n\nallowed = set()\nfor i in range(1, n + 1):\n    if colors[i - 1]!= 0:\n        for j in range(1, colors[i - 1] + 1):\n            allowed.add((i, j))"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\\n\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\\n\") == \"0\"\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\\n\") == \"18\"\n\"\"\""
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\\n\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\\n\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\\n\") == 18\n\"\"\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == 6\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == 0\nassert solution('3 1 2 3\\n2 1 2\\n0') == 12\n\"\"\"\nfrom collections import Counter, defaultdict\nfrom fractions import Fraction\n\n\nclass Solution:\n    def solve(self, num_colors, color_freq, cannot_be_next):\n        cannot_be_next = set(cannot_be_next)\n        cannot_be_next = set(cannot_be_next) | {c for c, v in color_freq.items() if v == 0}\n        ans = defaultdict(int)\n        ans[()] = 1\n        for c in cannot_be_next:\n            for prefix in ans:\n                ans[prefix + (c,)] = 0\n\n        for c in cannot_be_next:\n            for prefix in ans:\n                ans[prefix + (c,)] = 0\n\n        for c in cannot_be_next:\n            for prefix in ans:\n                if c < prefix[-1]:\n                    ans[prefix + (c,)] = 0\n\n        for i in range(2, num_colors + 1):\n            for prefix in ans:\n                if i < prefix[-1]:\n                    ans[prefix + (i,)] = 0\n\n        res = 0\n        for prefix in ans:\n            res += ans[prefix]\n\n        return Fraction(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\\n1 1\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == \"0\"\nassert solution(\"3 1 2 3\\n2 1 2\\n0\") == \"18\"\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def solve(self, balls: str, favorite: str, condition: str) -> int:\n        # First convert each string into a list of integers\n        nums = [int(ball) for ball in balls.split()]\n        nums_favorite = [int(ball) for ball in favorite.split()]\n        nums_condition = [int(ball) for ball in condition.split()]\n\n        # Second, find out how many of each color\n        nums_counter = Counter(nums)\n        nums_counter_favorite = Counter(nums_favorite)\n        nums_counter_condition = Counter(nums_condition)\n\n        # Third, find out how many of each color can be placed\n        nums_counter_color_1 = nums_counter.copy()\n        nums_counter_color_1[0] = 0\n        nums_counter_color_1 = list(nums_counter_color_1.items())\n        nums_counter_color_1.sort(key=lambda t: t[0])\n\n        nums_counter_color_2 = nums_counter.copy()\n        nums_counter_color_2[0] = 0\n        nums_counter_color_2 = list(nums_counter_color_2.items())\n        nums_counter_color_2.sort(key=lambda t: t[0], reverse=True)\n\n        # Fourth, find out the number of arrangements that satisfies the requirement\n        # Condition: at most k of a certain color can be next to each other.\n        nums_counter_condition_color = nums_counter_condition.copy()\n        nums_counter_condition_color[0] = 0\n        nums_counter_condition_color = list(nums_counter_condition_color.items())\n        nums_counter_condition_color.sort(key=lambda t: t[0], reverse=True)\n        nums_counter_condition_color = dict(nums_counter_condition_color)\n\n        # Get the number of arrangements that can be formed\n        # in the case of condition\n        nums_counter_color = nums_counter.copy()\n        nums_counter_color[0] = 0\n        nums_counter_color = list(nums_counter_color.items())\n        nums_counter_color.sort(key=lambda t: t[0])\n        nums_counter_color = dict(nums_counter_color)\n\n        # Get the number of arrangements that can be formed\n        # in the case of favorite\n        nums_counter_color_favorite = nums_counter_favorite.copy()\n        nums_counter_color_favorite[0] = 0\n        nums_counter_color_favorite = list(nums_counter_color_favorite.items())\n        nums_counter_color_favorite.sort(key=lambda t: t[0])\n        nums_counter_color_favorite = dict(nums_counter_color_favorite)\n\n        # Get the number of arrangements that can be formed\n        # in the case of condition\n        nums_counter_condition_favorite = nums_counter_condition_color.copy()\n        nums_counter_condition_favorite[0] = 0\n        nums_counter_condition_favorite = list(nums_counter_condition_favorite.items())\n        nums_counter_condition_favorite.sort(key=lambda t: t[0])\n        nums_counter_condition_favorite = dict(nums_counter_condition_favorite)\n\n        # Get the number of arrangements that can be formed\n        # in the case of condition\n        nums_counter_color_condition = nums_counter_condition_color.copy()\n        nums_counter_color_condition[0] = 0\n        nums_counter_color_condition = list(nums_counter_color_condition.items())\n        nums_counter_color_condition.sort(key=lambda t: t[0])\n        nums_counter_color_condition = dict(nums_counter_color_condition)\n\n        # Get the number of arrangements that can be formed\n        # in the case of condition\n        nums_counter_color_favorite_condition = nums_counter_condition_favorite.copy()\n        nums_counter_color_favorite_condition[0] = 0\n        nums_counter_color_favorite_condition = list(nums_counter_color_favorite_condition.items())\n        nums_counter_color_favorite_condition.sort(key=lambda t: t[0])\n        nums_counter_color_favorite_condition = dict(nums_counter_color_favorite_condition)\n\n        # Get the number of arrangements that can be formed\n        # in the case of condition\n        nums_counter_color_condition_favorite = nums_counter_condition_color.copy()\n        nums_counter_color_condition_favorite[0] = 0\n        nums_counter_color_condition_favorite = list(nums_counter_color_condition_favorite.items())\n        nums_counter_color_condition_favorite.sort(key=lambda t: t[0])\n        nums_counter"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == \"0\"\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == 18"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\") == 6\nassert solution(\"3 3 1 1\") == 0\nassert solution(\"3 2 2 3\") == 18\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000000 1\") == '468559'\nassert solution(\"1000000 5\") == '49401'\nassert solution(\"1000000 16\") == '20'\nassert solution(\"9000000000000000000 62\") == '1'\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '0'\nassert solution('0 0') == '1'\nassert solution('1 2 2') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 2\") == \"4\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"1 10\") == \"0\""
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10000000 5') == '49401'\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(sum(map(lambda i: 2 ** b in str(i), range(a))))\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1000000 1\n''') == '468559'\nassert solution('''1000000 5\n''') == '49401'\nassert solution('''1000000 16\n''') == '20'\nassert solution('''9000000000000000000 62\n''') == '1'\nassert solution('''9000000000000000000 62\n''') == '1'\n\nimport sys\nimport itertools"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 9\\n5 4 1') == '1'\nassert solution('4 13\\n2 2 2 2') == '3'\nassert solution('18 90\\n1 2 3 4 5 6 1 2 3 4 5 6') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 9\\n5 4 1') == '1'\nassert solution('4 13\\n2 2 2 2') == '3'\nassert solution('18 90\\n1 2 3 4 5 6 1 2 3 4 5 6') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 9\\n5 4 1\") == '1'\nassert solution(\"4 13\\n2 2 2 2\") == '3'\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == '12'\n\n\"\"\""
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\n\nfrom math import sqrt\n\nclass Solution:\n    def func(self, dice_cnt: int, sum_to_find: int, nums: list) -> int:\n        nums.sort()\n\n        max_prob = 0\n        for i in range(1, dice_cnt + 1):\n            prob = self.get_prob(sum_to_find, nums, i)\n            if prob > max_prob:\n                max_prob = prob\n        return max_prob\n\n    def get_prob(self, target_sum: int, nums: list, dice_cnt: int) -> int:\n        dices = self.create_dices(nums, dice_cnt)\n        return self.get_prob_helper(dices, target_sum)\n\n    def create_dices(self, nums: list, dice_cnt: int) -> dict:\n        dices = {}\n        for i in range(len(nums)):\n            dices[nums[i]] = dices.get(nums[i], 0) + 1\n\n        for num, count in dices.items():\n            if count == 1:\n                del dices[num]\n            elif count > 1:\n                dices[num] = count % 6\n\n        return dices\n\n    def get_prob_helper(self, dices: dict, target_sum: int) -> int:\n        total_prob = 1\n        for num, count in dices.items():\n            total_prob *= self.get_prob_helper_helper(num, target_sum) ** count\n\n        return total_prob\n\n    def get_prob_helper_helper(self, num: int, target_sum: int) -> int:\n        if num > target_sum:\n            return 0\n\n        if num == target_sum:\n            return 1\n\n        if num < target_sum:\n            return 0\n\n        if num * 6 == target_sum:\n            return 1\n\n        if (target_sum - num) * 6 == num:\n            return 1\n\n        return 0"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\n-----Solution-----\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 9\n5 4 1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n4 13\n2 2 2 2\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n\"\"\"\n) == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4 7 8') == '3'\nassert solution('2\\n2 4') == '3'\nassert solution('1\\n1') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 4 5 8\") == \"5\"\n\"\"\"\n\n\"\"\"\nYou are given an array a containing n integers, a0, a1,..., an\u22121, which you must modify to form a new array b. For each element bi, you have to replace it by the product of bi and the maximum element of the original array.\n\nInput Format:\nThe first line contains n, the number of elements in the array a.\nThe second line contains n space-separated integers a0, a1,..., an\u22121.\nOutput Format:\nPrint n space-separated integers. The i^th element should be bi, where bi is the product of ai and the maximum element of a.\n\nSample Input 1:\n5\n2 3 4 5 1\nSample Output 1:\n24 3 5 5 2\n\"\"\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n4 7 8') == '3'\nassert solution('1\\n1') == '0'\nassert solution('2\\n4 7 8\\n') == '5'\nassert solution('3\\n2 3 4 5 8') == '5'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"3\\n4 7 8\") == \"3\"\nassert solution(\"5\\n2 3 4 5 8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1 1\") == \"0\"\nassert solution(\"3\\n1 1 2\") == \"2\"\nassert solution(\"4\\n1 1 2 3\") == \"2\"\nassert solution(\"5\\n1 1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n2\\n2\\n2\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n6\\n6\\n6\\n6\\n6\\n7\\n7\\n7\\n7\\n7\\n8\\n8\\n8\\n8\\n8\\n9\\n9\\n9\\n9\\n9\\n10\\n10\\n10\\n10\\n10\\n11\\n11\\n11\\n11\\n11\\n12\\n12\\n12\\n12\\n12\\n13\\n13\\n13\\n13\\n13\\n14\\n14\\n14\\n14\\n14\\n\") == \"0\"\n\n\"\"\"\n\nfrom functools import reduce\nfrom collections import Counter\nfrom math import sqrt, ceil\nfrom operator import mul\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n') == '0'\nassert solution('3\\n4 7 8\\n') == '3'\nassert solution('5\\n2 3 4 5 8\\n') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == '0'\nassert solution(\"5\\n2 3 4 5 8\\n\") == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n') == '0'\nassert solution('2\\n3\\n4\\n') == '3'\nassert solution('3\\n4\\n7\\n8\\n') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n') == '0'\nassert solution('2\\n1\\n') == '1'\nassert solution('3\\n1\\n') == '1'\nassert solution('4\\n1\\n') == '1'\nassert solution('5\\n1\\n') == '1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9') == '9'\nassert solution('912') == '912'\nassert solution('91234') == '91234'\nassert solution('91234') == '91234'\nassert solution('91234') == '91234'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9') == '8'\nassert solution('1234') == '12345'\nassert solution('99') == '-1'\nassert solution('999') == '9'\nassert solution('12345') == '111111'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == '4'\nassert solution(\"149\") == '17'\nassert solution(\"123476544\") == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n\nprint('Success')"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == '1234'\nassert solution('12345') == '11112'\nassert solution('123456') == '11112'\nassert solution('1234567') == '11112'\nassert solution('12345678') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234') == '11112'\nassert solution('12345') == '12345'\nassert solution('1234') == '11112'\nassert solution('123456') == '123456'\nassert solution('1234567') == '1234567'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == 4\nassert solution(\"149\") == 17\nassert solution(\"123476544\") == 11112\n\"\"\"\n\nn = input()"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"12\") == \"2\"\nassert solution(\"1123\") == \"5\"\nassert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\nccc\\naca') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\ncab\\ncca\\ncca\\ncca\\ncca\\ncca\\ncca\\ncca') == 'AMBIGUOUS'\nassert solution('f 2\\ndea\\ncfb') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(['d', 'e', 'a', 'c']) == 'adcb'\nassert solution(['c', 'b', 'a']) == 'ambiguous'\nassert solution(['d', 'e', 'a', 'c']) == 'adcb'\nassert solution(['a', 'c', 'b', 'd']) == 'adcb'\n\nassert solution(['c', 'b', 'a']) == 'ambiguous'\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\naca\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"c 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"IMPOSSIBLE\"\nassert solution(\"c 4\\ndea\\ncfb\\n\") == \"AMBIGUOUS\"\n\n\"\"\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\n\"\"\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca''') == 'adcb'\nassert solution('''f 2\ndea\ncfb''') == 'AMBIGUOUS'\nassert solution('''c 4\nabc\nbca\ncab\naca''') == 'IMPOSSIBLE'\n\n'''\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\naca\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"AMBIGUOUS\"\n\"\"\""
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"d 4\\ncab\\nccc\\nbadca\") == \"adcb\"\n\"\"\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"d 3\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"c 3\\nabc\\nbca\\nccc\\naca\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"AMBIGUOUS\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\"\"\"\n\nn, a, b, c = [int(x) for x in input().split()]\nx = n * (n + 1) / 2"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3 3\") == 9\nassert solution(\"10 20 0 0\") == 10\nassert solution(\"100 20 543 12\") == 164\n\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(r\"2 3 3 3\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\n\"\"\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\nprint(\"tests passed\")\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 3 3') == '9'\n\"\"\"\n\nn, a, b, c = map(int, input().split())\n\nprint(min((a // 2 + a % 2) * n, a * n))\nprint(min((b // 2 + b % 2) * n, b * n))\nprint(min((c // 2 + c % 2) * n, c * n))\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\nassert solution(str(sample_input_3)) == str(sample_output_3)\n\"\"\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3 3\") == 9\nassert solution(\"10 20 0 0\") == 10\nassert solution(\"100 20 543 12\") == 164\n\"\"\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'no'\nassert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0') == 'yes'\nassert solution('4 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'yes'\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'no'\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'yes'\nassert solution('1 2\\n2 1\\n0 0\\n0 0\\n') == 'yes'\nassert solution('1 2\\n2 1\\n0 0\\n0 0\\n') == 'yes'"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\") == \"yes\"\nassert solution(\"3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    4 2 3\n    0 1\n    1 0\n    -1 0\n    0 -1\n    -1 1 0\n    2 1 0\n    \"\"\"\n) == \"yes\"\nassert solution(\n    \"\"\"\n    4 3 3\n    2 1\n    0 0\n    -1 -2\n    1 1 -2\n    3 6 12\n    \"\"\"\n) == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 1, 1) == \"yes\"\nassert solution(2, 1, 1) == \"yes\"\nassert solution(2, 1, 1) == \"yes\"\nassert solution(2, 1, 1) == \"yes\"\nassert solution(2, 1, 1) == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'yes'\n\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'yes'\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'yes'\nassert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'yes'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n\") == \"yes\"\n\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\") == \"yes\"\n\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\") == \"yes\"\n\nassert solution(\"4 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\") == \"yes\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == 1\nassert solution(\"652526\") == 4\n\"\"\"\n\nimport math"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"652526\") == 4\nassert solution(\"12121131221\") == 7\nassert solution(\"123456789\") == 1"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12121131221') == '7'\nassert solution('652526') == '4'\nassert solution('123456789') == '1'\n\"\"\"\n\nfrom itertools import groupby"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"652526\") == 4\nassert solution(\"12121131221\") == 7\nassert solution(\"123456789\") == 1"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"652526\") == 4\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nfrom itertools import groupby"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12121131221') == '7'\nassert solution('123456789') == '1'"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(652526) == 4\nassert solution(12121131221) == 7\nassert solution(123456789) == 1\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12121131221') == '7'\n\"\"\"\n\ns = stdin.strip()\n\ni, j = 0, len(s) - 1\nwhile i <= j:\n    if s[i] == s[j]:\n        j -= 1\n    else:\n        break\n    i += 1\nprint(i)\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == '0'\nassert solution(\"4 4\") == '24'\nassert solution(\"6 8\") == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\nassert solution('''6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n\nprint(solution(input()))"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\") == \"800\"\nprint('Passed!')\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven the following graph:\n\nGraph has nodes\nEdge 1 is connected to nodes 3 and 4\nEdge 2 is connected to nodes 1 and 3\nEdge 3 is connected to nodes 2 and 4\nEdge 4 is connected to nodes 4 and 2\nThere are 4 paths between nodes 1 and 4, including the loopback path, which always goes back to 1 and 2.\n\nDetermine the number of loops in the graph. The graph is connected, so each node has at least one loop.\n\n-----Input-----\nThere will be two test cases. The first test case is a graph with two edges: Edge 1 is connected to nodes 3 and 4. Edge 2 is connected to nodes 1 and 3. There are 2 paths between nodes 1 and 4, including the loopback path, which always goes back to 1 and 2. The second test case is a graph with three edges: Edge 1 is connected to nodes 3 and 4. Edge 2 is connected to nodes 1 and 3. Edge 3 is connected to nodes 2 and 4. There are 3 paths between nodes 1 and 4, including the loopback path, which always goes back to 1 and 2.\n\n-----Output-----\nOutput a single integer, indicating the number of loops in the graph.\n\n-----Examples-----\nSample Input 1:\n2\nEdge 1 is connected to nodes 3 and 4\nEdge 2 is connected to nodes 1 and 3\nSample Output 1:\n2\n\nSample Input 2:\n3\nEdge 1 is connected to nodes 3 and 4\nEdge 2 is connected to nodes 1 and 3\nEdge 3 is connected to nodes 2 and 4\nSample Output 2:\n3\n\nSample Input 3:\nEdge 1 is connected to nodes 3 and 4\nEdge 2 is connected to nodes 1 and 3\nEdge 3 is connected to nodes 2 and 4\nEdge 4 is connected to nodes 4 and 2\nSample Output 3:\n4"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3') == '0'\nassert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4') == '24'\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\nassert solution('''6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\nassert solution('''6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\"\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split()]\n\ng = [int(x) for x in stdin.readline().split()]\ng.insert(0, 0)\ng.insert(1, 0)\n\nroads = [tuple(int(x) for x in stdin.readline().split()) for _ in range(m)]\nroads.insert(0, (1, 0))\nroads.insert(1, (1, 0))\n\ndp = [0] * (n + 1)\n\nfor a, b in roads:\n    dp[a] = max(dp[a], dp[b] + g[a])\n    dp[b] = max(dp[b], dp[a] + g[b])\n\nprint(max(dp))\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3\\n') == '0'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\ngraph = dict()\nfor i in range(n):\n    graph[i+1] = set()\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    graph[a].add(b)\n    graph[b].add(a)\n\nc = set()\nc.add(1)\ng = set()\ng.add(2)\nfor _ in range(n-2):\n    g.clear()\n    for e in c:\n        g.update(graph[e])\n    c.clear()\n    for e in g:\n        if e!= 1:\n            c.add(e)\nprint(sum([int(stdin.readline()) for _ in range(n)]))"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\") == \"1 2 3 4\"\n\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3\\n') == '-1'"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 3 2 4\n''') == '1 4'\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3\\n') == '-1'\n\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3') == '-1'\nassert solution('7\\n1 2 3 4 5 6 7') == '1 2 3 4 5 6 7'"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3') == '-1'"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\") == \"1 2 3 4\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3') == '-1'\nassert solution('4\\n1 4 2 3') == '-1'\nassert solution('4\\n4 3 2 1') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\") == \"-1\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == '8'\nassert solution('3 3\\n...\\n.#.\\n...') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n.\\n..\\n...\\n\") == \"1\"\nassert solution(\"5 7\\n.###\\n.##.\\n.#.##\\n###.##\\n.##.##\\n..##.\\n\") == \"11\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".#####.\\n##.##.\\n###.###\\n.###.##\\n##.#.##\\n###.###\\n.#####.\") == 5\nassert solution(\".#####.\\n###.###\\n.#####.\") == 5\n\nassert solution(\"###.###\\n#####.##\\n#.##.##\\n#####.##\\n#.##.##\\n#.##.##\\n###.###\\n#####.##\\n#.##.##\\n###.###\\n\") == 8\n\nassert solution(\"###.###\\n###.###\\n#.###.#\\n#.###.#\\n###.###\\n###.###\\n#.#.#.#\\n#.#.#.#\\n###.###\\n###.###\\n\") == 8\n\nassert solution(\"###.###\\n###.###\\n#.#.###\\n#.###.#\\n###.###\\n###.###\\n#.#.#.#\\n#.###.#\\n###.###\\n###.###\\n\") == 8"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3 3\n...\n.#.\n...\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 6\n.#####\n#####.\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n\"\"\") == 8\n\nassert solution(\n\"\"\"\n3 3\n...\n.#.\n...\n\"\"\") == 1\n\nassert solution(\n\"\"\"\n2 6\n.#####\n#####.\n\"\"\") == 5\n\n\"\"\"\n\n\nGiven the height and width of the mark, find the minimum number of nubs that could have made the mark. A nub is a symbol that covers a paper cell with the \u2018#\u2019 symbol.\n\n-----Input-----\nThe first line of input contains an integer $n$ denoting the height of the mark (1 \\le n \\le 500).\n\nThe second line of input contains an integer $m$ denoting the width of the mark (1 \\le m \\le 500).\n\nThe third line of input contains a string of $n$ characters representing the mark, where the character \u2018#\u2019 denotes a black cell, and the character \u2018.\u2019 denotes a white cell.\n\n-----Output-----\nThe output should contain a single integer indicating the minimum number of nubs of a bureaucrat\u2019s stamp that could have possibly made the mark by stamping exactly twice.\n\n-----Examples-----\nInput:\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\nOutput:\n8\nInput:\n3 3\n...\n.#.\n...\nOutput:\n1\n\nInput:\n2 6\n.#####\n#####.\nOutput:\n5\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint(stdin, expected)\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 6\\n###\\n####\\n###\\n##\\n#\\n') == '1'\nassert solution('5 8\\n#######\\n###\\n####\\n###\\n#\\n') == '8'\nassert solution('2 5\\n.#\\n.\\n') == '1'\n\"\"\""
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == '8'\nassert solution('3 3\\n...\\n.#.\\n...') == '1'\nassert solution('2 6\\n.#####\\n#####.\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == 8\n\"\"\""
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == \"8\"\nassert solution(\"3 3\\n...\\n.#.\\n...\\n\") == \"1\"\nassert solution(\"2 6\\n.#####\\n#####.\\n\") == \"5\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"-1\"\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"4\\n2 6 1 9 7 5 5 7 1 2 3 3\"\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == '6'\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == '13'\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\\n\") == '-1'\nprint(\"It is time for 'em to get on with their lives.\")\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '-1'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '-1'\n\n----Problem-----\n\nThe Tower of Hanoi is a mathematical puzzle where we have three rods and n disks, each a different size, and we need to move the disks from the first to the last rod, obeying the following simple rules:\n\n1) Only one disk can be moved at a time.\n2) Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.\n3) No larger disk may be placed on top of a smaller disk.\n\nGiven n, how many moves are needed to move all disks from the first rod to the last rod?\n\n-----Solution------\nthe recurrences for the problem\nIf we have only one disk, we can move it to the last rod in one move.\nIf we have two disks, we can move the largest disk to the last rod in one move and the smallest disk to the middle rod in one move.\nIf we have three disks, we can move the largest disk to the middle rod in one move, the second largest disk to the last rod in one move, and the smallest disk to the first rod in one move.\nIf we have n disks, we can move the nth disk to the last rod in one move, and all the n - 1 disks to the middle rod in one move.\nIn general, we can move the nth disk to the n - 1 rod from the n - 2 rod.\n\nThe initial state is 3 disks of size 1, 2 and 3.\n\nGiven n, how many moves are needed to move all disks to the last rod?\n\nThe recurrences are given by\n\nT(n) = 2 * T(n - 1) + 1           if n >= 1\nT(n) = T(n - 2) + 2 * T(n - 3) + 1 if n == 0\n\nSo, the base cases are\n\nT(0) = 1\nT(1) = 1\nT(2) = 3\n\nLet us try to expand the recurrence.\n\nT(n) = 2 * T(n - 1) + 1           if n >= 1\nT(n) = T(n - 2) + 2 * T(n - 3) + 1 if n == 0\n\nT(n) is now the summation from 1 to n of the function T(i) where i is the number of disks in the tower and T(i) is the number of moves required to move from the first rod to the n - i rod.\n\nT(n) is now the summation from 1 to n of the function T(i) * i, where i is the number of disks in the tower and T(i) is the number of moves required to move from the first rod to the n - i rod.\n\nFinally, we get the formula:\n\nT(n) = n(n - 1) / 2\n\nSo, if we set n to be the number of disks, the number of moves needed is the number of disks multiplied by the number of disks minus the number of disks.\n\nSo, for instance, if there are three disks, the number of moves needed is three multiplied by three minus three, which is six.\n\nThe base cases are:\n\nT(0) = 0\nT(1) = 1\nT(2) = 3\n\nSo, the answer is:\n\nn(n - 1) / 2 = n(n - 1) / 2 = (n + 1) * n / 2 - n = (n + 1) * n / 2 - 1 = n^2 + n - 1\n\nSo, to solve the problem, we simply loop over the number of disks, and for each one, we get the number of moves needed.\n\nimport math"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1''') == '6'\nassert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1''') == '19 12 2 18 5 5'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3''') == '13 4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('''3 2 2\n1 2\n2 1\n1 2\n''') == '-1'\nassert solution('''3 2 2\n1 2\n2 1\n1 2\n''') == '4 2 6 1 9 7 5 5 7 1 2 3 3'\n\nprint(solution(stdin))"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"-1\"\nassert solution(\"4 4 4\\n3 1 1\\n3 2 3\\n4 3 3\\n2 4 4\") == \"17\\n7 8 5 4 11 5 5 7 1 2 3 4 4\"\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"4\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"-1\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"1\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 2 2\\n1 2\\n2 1\\n1 2') == '-1'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 3 3\\n1 3 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '-1'\nassert solution('3 2 2\\n1 2\\n2 1\\n1 2\\n3 1\\n3 2\\n1 1\\n3 2') == '-1'\nprint('Success')"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n') == '5 1', 'wrong result'\nassert solution('5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n') == '1 5', 'wrong result'\nassert solution('4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n') == '3 2', 'wrong result'\n\"\"\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n\") == \"1 5\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n\") == \"3 2\""
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"1 5\"\nassert solution(\"5\\n2\\n3\\n4\\n5\\n1\\n3\\n4\\n5\\n0\\n1\\n2\\n3\\n4\") == \"3 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('test_input.txt').read()) == open('test_output.txt').read()\nprint(solution(open('input.txt').read()))\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4') == '5 1'\n\n\"\"\"\n\nfrom collections import deque, defaultdict\nfrom math import ceil, sqrt, log\nfrom sys import stdin\nimport string\nimport time\nimport itertools\nimport gc\nimport resource\nimport numpy as np"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n') == '5 1'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"1 5\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n4\") == \"3 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n') == '5 1'\nassert solution('5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n') == '1 5'\nassert solution('5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n') == '3 2'\n\n\"\"\"\n\nimport sys\nfrom tools import timing"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"1 5\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n\") == \"3 2\""
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n3\n3\n3\n3\n1\n2\n3\n4''') == '5 1'\nassert solution('''5\n4\n3\n2\n1\n0\n1\n2\n3\n4''') == '1 5'\nassert solution('''4\n1\n5\n3\n6\n1\n2\n3\n''') == '3 2'\nassert solution('''8\n6\n3\n5\n4\n4\n5\n2\n7\n''') == '5 3'\nassert solution('''9\n6\n3\n7\n5\n8\n4\n1\n2\n3\n4\n5\n6\n7\n8\n''') == '8 1'\n\nprint('Success')"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"5\\n3 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\n\nassert solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1') == '5'\n\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 2\nassert int(sys.argv[1]) <= 10**5"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"6\"\n\n-----Explanation-----\nIn the first example, there is only one valid set of nodes: {3, 4}.\nIn the second example, there are five valid sets: {1, 4}, {2, 4}, {3, 4}, {1, 5}, {2, 5}.\nIn the third example, there are six valid sets: {1, 4}, {2, 4}, {3, 4}, {1, 5}, {2, 5}, {3, 5}.\nIn the fourth example, there are seven valid sets: {1, 4}, {2, 4}, {3, 4}, {1, 5}, {2, 5}, {3, 5}, {1, 6}.\nIn the fifth example, there are eight valid sets: {1, 4}, {2, 4}, {3, 4}, {1, 5}, {2, 5}, {3, 5}, {1, 6}, {2, 6}.\n\"\"\"\n\nclass Node:\n    def __init__(self, value, parent = None, children = []):\n        self.value = value\n        self.parent = parent\n        self.children = children\n    def __str__(self):\n        return str(self.value) + \" (\" + str(self.parent) + \")\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\nassert solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1') == '5'\n\nprint(solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4'))\n\nprint(solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4'))\n\nprint(solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1'))\n\n-----Explanation-----\nThe largest number of nodes that can be added to a valid heap is the maximum of the following:\n\nCase 1: No nodes are added.\n\nCase 2: 1 node is added.\n\nCase 3: 1 node is added.\n\nCase 4: 1 node is added.\n\nCase 5: 2 nodes are added.\n\nSince Case 2 has the greatest number of nodes, the answer is 2.\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n\"\"\") == 1\n\nassert solution(\n\"\"\"\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n\"\"\") == 5\n\nassert solution(\n\"\"\"\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n\"\"\") == 5\n\nassert solution(\"\"\"\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n\"\"\") == 5\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\n\nassert solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1') == '5'\n\nassert solution('4\\n3 0\\n1 1\\n2 1\\n3 1\\n0 4') == '5'\n\nprint('Success')\n\n'''\n3\n1 2\n2 1\n3 1\n4 1\n2\n0 2\n1 1\n1 2\n\n3\n1 2\n2 1\n3 1\n0 4\n2\n0 1\n1 1\n1 2\n\n4\n1 1\n2 1\n3 1\n4 1\n0 2\n1 1\n1 2\n\n3\n1 1\n2 1\n3 1\n0 4\n\n3\n3 0\n2 1\n1 1\n0 4\n\n3\n3 0\n2 1\n1 1\n0 4\n\n4\n3 0\n2 1\n1 1\n0 4\n3\n1 1\n2 1\n\n5\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n\n5\n3 0\n1 1\n2 1\n3 1\n4 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n5\n3 0\n1 1\n2 1\n3 1\n4 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n0 4\n\n6\n3 0\n1 1\n2 1\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4''') == 1\n\nassert solution('''6\n4 0\n3 1\n2 2\n1 3\n0 4\n5 1''') == 5\n\nprint(solution(input()))\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\n\nprint(solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\"))\nprint(solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\"))"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == '4\\n3\\n4\\n5\\n6\\n'\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == '5\\n1\\n2\\n3\\n6\\n7\\n'"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\\n8\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\\n8\"\nassert solution(\"5\\n1 2 1\\n2 3 1\\n3 4 3\\n4 5 3\\n5 6 2\\n6 7 2\\n7 8 1\") == \"1\\n3\\n4\\n5\\n6\\n7\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\\n8\"\nassert solution(\"5\\n1 2 1\\n2 3 1\\n3 4 3\\n4 5 3\\n5 6 2\\n6 7 2\\n7 8 1\") == \"1\\n3\\n4\\n5\\n6\\n7\"\n\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 3 1\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\"\nassert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"0\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\""
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n3\\n4\\n5\\n6\\n7\\n\"\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\\n\") == \"0\\n1\\n2\\n3\\n6\\n7\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\"\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\") == \"0\\n1\\n2\\n3\\n6\\n7\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2''') == '4\\n3\\n4\\n5\\n6\\n'\n\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1''') == '0\\n1\\n2\\n3\\n6\\n7\\n'\n\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2''') == '5\\n1\\n2\\n3\\n6\\n7\\n'\n\nprint('Success')\n\n'''\n\nimport sys\nimport itertools"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n3\\n4\\n5\\n6\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\nassert solution(\"8\\n1 2 1\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n3 8 2\\n4 6 3\\n4 8 1\\n5 9 2\\n\") == \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n\"\nassert solution(\"8\\n1 2 1\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n3 8 2\\n4 6 3\\n4 8 1\\n5 9 2\\n\") == \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n\"\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n3 8 2\\n4 6 3\\n4 8 1\\n5 9 2\\n\") == \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n\"\"\") == '4\\n3\\n4\\n5\\n6\\n'\n\nassert solution(\"\"\"8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n\"\"\") == '0\\n'\n\nassert solution(\"\"\"8\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n\"\"\") == '5\\n1\\n2\\n3\\n6\\n7\\n'\n\nassert solution(\"\"\"9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n\"\"\") == '5\\n1\\n2\\n3\\n6\\n7\\n'\n\nassert solution(\"\"\"4\n1 3 2\n2 4 3\n2 3 3\n4 1 3\n\"\"\") == '0\\n'"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nV1 V1 V2\") == \"6\"\nassert solution(\"1 2\\nV1 V2 V1 E\") == \"6\"\nassert solution(\"1 2\\nV1 V2 V1 V2 E\") == \"6\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"6\"\n\n\"\"\"\nfor numBanks, numVariables in (1, 2), (2, 1), (1, 1):\n    banks = {str(num): 0 for num in range(numBanks)}\n    for line in stdin.splitlines():\n        command = line.split()\n        if command[0] == \"R\":\n            numRepetitions = int(command[1])\n            if numRepetitions > 10**6:\n                raise ValueError(\"Repetitions > 10**6\")\n            for _ in range(numRepetitions):\n                execute(banks, numVariables)\n        else:\n            assert command[0] == \"V\"\n            execute(banks, numVariables)\n    print(len(banks))\n\"\"\"\n\nimport timeit\nfrom itertools import product"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\nV1 V2 V1 V1 V2\") == '6'\n\"\"\"\n\n\"\"\"\nInput:\n2 2\nV1 V2 V1 V1 V2\nR10 V1 V2 E\n\nOutput:\n10\n\"\"\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n1 2\nR10 V1 V2 V1 E\n\"\"\") == \"30\"\n\n\"\"\"\n1,2\nV1 V2 V1 V1 V2\n\n1,2\nV1 V2 V1 E\n\n0,0\nR10 V1 V2 V1 E\n\n1,2\nR10 V1 V2 V1 E\n\n1,0\nR10 V1 V2 V1 E\n\n0,0\nR10 V1 V2 V1 E\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\nassert solution('1 2\\nR10 V1 V2 V1 E') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\"\n\nb, s = [int(x) for x in stdin.split(' ')]\n\nprogram = stdin.split('\\n')[1]\n\nall_locations = [0] * (b * s)\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"2 1\\nV1 V2 V1 V1 V2\") == \"6\"\n\"\"\"\n\n\nfrom collections import deque\nfrom itertools import permutations\nfrom math import factorial\nfrom sys import stdin\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\nprint(solution(\"10 24\"))\nprint(solution(\"10 11\"))\nprint(solution(\"9 216\"))\n\"\"\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\n\"\"\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\n\"\"\"\n\nimport sys\nfrom typing import Dict, Set, List, Optional, Tuple\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == ''\nassert solution('2 1\\n') == ''\nassert solution('3 1\\n') == 'impossible'\nassert solution('4 1\\n') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"9 216\") == \"546\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\"\"\"\n\nimport sys\nimport math\nimport statistics\n\nd, t, c, r = [int(i) for i in sys.stdin.readline().split()]\n\ns_cloud = []\ne_cloud = []\np_cloud = []\na_cloud = []\n\nfor i in range(c):\n    s, e, p, a = [float(j) for j in sys.stdin.readline().split()]\n    s_cloud.append(s)\n    e_cloud.append(e)\n    p_cloud.append(p)\n    a_cloud.append(a)\n\nr_s = []\nr_e = []\n\nfor j in range(r):\n    s, e = [int(i) for i in sys.stdin.readline().split()]\n    r_s.append(s)\n    r_e.append(e)"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 1 0\\n0 2 0.25 8\\n') == '2.0'\nassert solution('3 4 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10') == '466.662'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10') == '466.662'\nassert solution('3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2') == '10.00005'\n\n\"\"\"\n\n\"\"\"\n\u6709\u4e9b\u6578\u64da\u6703\u88ab\u6709\u4e9b\u4e0d\u540c\u7684\u6a94\u6848\u985e\u578b\u53bb\u7a0b\u5f0f\u78bc\u88e1\u9762\uff0c\u6c92\u6709\u63d0\u4f9b\u5176\u4ed6\u500b\u4eba\u53ef\u4ee5\u7a0b\u5f0f\u78bc\u88e1\u9762\u63d0\u4f9b\u7684\uff0c\u6240\u4ee5\u6211\u5011\u6703\u62ff\u4f86\u81ea\u5df1\u5beb\u4e00\u500b\u65b9\u4fbf\u8b80\u53d6\u4efb\u4f55\u6a94\u6848\u985e\u578b\n\"\"\"\nimport numpy as np\n\nwith open('test.txt', 'r') as f:\n    lines = f.readlines()\n\nd, t, c, r = [int(x) for x in lines[0].split()]\n\nclouds = []\nfor i in range(1, c+1):\n    start, end, prob, amt = [float(x) for x in lines[i].split()]\n    clouds.append((start, end, prob, amt))\n\nroofs = []\nfor i in range(c+1, c+r+1):\n    x, y = [int(x) for x in lines[i].split()]\n    roofs.append((x, y))"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\\n\") == \"466.662\"\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\\n\") == \"10.00005\"\nprint('Success')\n\n\"\"\"\n\nimport math\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2 1\\n0 2 0.25 8\\n1 2 0.66667 15\") == '2.0'\nassert solution(\"3 4 1 0\\n0 2 0.25 8\") == '2.0'\nassert solution(\"3 4 1 0\\n0 2 0.25 8\\n1 2 0.66667 15\") == '2.0'\nassert solution(\"3 4 1 0\\n0 2 0.25 8\\n1 2 0.66667 15\\n0 1 2.75\") == '2.75'\nassert solution(\"3 4 1 0\\n0 2 0.25 8\\n1 2 0.66667 15\\n0 1 2.75\\n0 1 3.25\") == '3.25'\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2 1\\n0 2 0.25 8\\n\") == \"10.00005\"\n\"\"\"\n\nd, t, c, r = list(map(int, input().split()))\n\nevents = []\nfor _ in range(c):\n    s, e, p, a = list(map(int, input().split()))\n    events.append((s, 1, a))\n    events.append((e, -1, a))\n\nevents.sort(key=lambda x: x[0])\n\nrain = 0\nt_so_far = 0\n\nfor e, v, a in events:\n    rain += v * a\n    t_so_far += v\n    if t_so_far >= t:\n        break\n\nprint(rain)"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10') == '466.662'\n\nassert solution('3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2') == '10.00005'\n\nassert solution('3 4 1 0\\n0 2 0.25 8') == '2.0'\n\nassert solution('3 4 0 0\\n0 2 0.25 8') == '2.0'\n\nassert solution('1 2 0.5 0\\n0 1 0.5 1') == '0.5000'"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == '466.662'\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == '10.00005'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == '10.00005'\n\"\"\"\n\nimport math\nimport sys\n\nN, T, C, R = list(map(int, sys.stdin.readline().split()))\nclouds = []\nfor _ in range(C):\n    s, e, p, a = list(map(int, sys.stdin.readline().split()))\n    clouds.append({\"start\": s, \"end\": e, \"p\": p, \"a\": a})\nroofs = []\nfor _ in range(R):\n    x, y = list(map(int, sys.stdin.readline().split()))\n    roofs.append({\"x\": x, \"y\": y})\n\nclouds.sort(key=lambda cloud: cloud[\"start\"])\ns, e = clouds[0][\"start\"], clouds[0][\"end\"]\n\ntotal_time = T\ntime_left = T\ntime_left_after_break = 0\ntime_left_for_roof = 0\nfor cloud in clouds[1:]:\n    if cloud[\"start\"] > time_left:\n        if time_left_after_break < time_left:\n            time_left_after_break = time_left\n        total_time += (cloud[\"start\"] - time_left) * time_left_for_roof\n        time_left = cloud[\"start\"]\n        time_left_for_roof = 0\n    if cloud[\"start\"] > e:\n        if cloud[\"end\"] < time_left:\n            if (cloud[\"end\"] - e) * time_left_for_roof > time_left_after_break:\n                time_left_after_break = (cloud[\"end\"] - e) * time_left_for_roof\n        else:\n            if time_left_for_roof < time_left:\n                time_left_for_roof = time_left\n        total_time += (cloud[\"start\"] - e) * time_left_for_roof\n        time_left = cloud[\"start\"]\n        e = cloud[\"end\"]\n    else:\n        if cloud[\"end\"] < time_left:\n            if (cloud[\"end\"] - e) * time_left_for_roof > time_left_after_break:\n                time_left_after_break = (cloud[\"end\"] - e) * time_left_for_roof\n        else:\n            if time_left_for_roof < time_left:\n                time_left_for_roof = time_left\n        total_time += (cloud[\"start\"] - cloud[\"end\"]) * time_left_for_roof\n        time_left = cloud[\"end\"]"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == \"10.000000000000000\"\n\"\"\""
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\nblue red 1.0\\nred pink 1.5') == '0.000000000000000'\nassert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9') == '10.000000000000000'\n\n\"\"\"\n\n\"\"\"\nTESTCASES\nTEST 1\nInput:\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n\nOutput:\n1.500000000000000\n\nTEST 2\nInput:\n2\nblue red 1.0\nred pink 1.5\n\nOutput:\n0.000000000000000\n\nTEST 3\nInput:\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n\nOutput:\n10.000000000000000\n\"\"\"\n\n\"\"\"\n\uc811\uadfc\ubc95:\n\uac01 \uc790\uc2dd\ub4e4\uc740 \ub9ce\uc740 \ub9db\uc744 \ub0b4\ub294 \uc790\uc2dd\ub4e4\uacfc \uc801\uc740 \ub9db\uc744 \ub0b4\ub294 \uc790\uc2dd\ub4e4\uc758 \ub9db\uc744 \ube44\uad50\ud560 \ub54c \ub9e4\uc6b0 \uc911\uc694\ud55c \ub0b4\uc6a9\uc774\ub77c\uace0 \uc0dd\uac01\ud55c\ub2e4.\n\uac01 \uc790\uc2dd\ub4e4\uc740 \ub9e4\uc6b0 \uc911\uc694\ud55c \ub0b4\uc6a9\uc774 \uc788\ub294\ub370, \ubaa8\ub4e0 \uc790\uc2dd\ub4e4\uc740 \ubb34\uc5c7\uc774 \uc88b\uc740\uc9c0\ub97c \uc54c \uc218 \uc788\uc9c0\ub9cc, \uc774\uc81c\ubd80\ud130\ub294 \uadf8\uac83\uc744 \uacc4\uc18d \uc0dd\uac01\ud558\uac8c \ub41c\ub2e4.\n\n\uc989, \ub098\ub294 \ub9cc\uc57d \uc790\uc2dd\ub4e4\uc774 \ub9ce\uc740 \ub9db\uc744 \ub0b4\ub294 \uc790\uc2dd\ub4e4\uacfc \uc801\uc740 \ub9db\uc744 \ub0b4\ub294 \uc790\uc2dd\ub4e4\uc758 \ub9db\uc744 \ube44\uad50\ud558\ub824\uace0 \ud558\ub294\ub370,\n\uc790\uc2dd\ub4e4\uc774 \ub9ce\uc740 \ub9db\uc744 \ub0b4\ub294 \uc790\uc2dd\ub4e4\uc758 \ub9db\uc774\ub77c\uba74, \uadf8 \uc790\uc2dd\ub4e4\uc740 \ub0b4 \uc790\uc2dd\ub4e4\uc774 \uc88b\uc740 \ub9db\uc744 \ub9ce\uc774 \uba39\uc744 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud55c\ub2e4.\n\n\ubb34\uc5c7\uc774 \uc88b\uc740\uc9c0\ub294 \uc54c \uc218 \uc5c6\uc73c\ub098, \uac01 \uc790\uc2dd\ub4e4\uc740 \ub9e4\uc6b0 \uc911\uc694\ud55c \ub0b4\uc6a9\uc774 \uc788\uc5b4 \uc774\ub97c \uc54c\uc544\ub0b4\ub294 \uc5ed\ud560\uc774 \ub2f4\ub2f9\ud55c\ub2e4.\n\uc6b0\uc120, \uc0c1\ub300\uc5d0\uac8c \uc804\ud600 \uc544\ubb34\uac83\ub3c4 \uc804\ud574\uc8fc\uc9c0 \uc54a\ub294 \uac83\uc740 \uc88b\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \uac01 \uc790\uc2dd\ub4e4\uc740 \ub2e4\ub978 \uc790\uc2dd\ub4e4\uc5d0\uac8c \uc544\ubb34\uac83\ub3c4 \uc804\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \ud6a8\uacfc\uc801\uc774\ub2e4.\n\uc774\ub807\uac8c \ud558\uba74, \uac01 \uc790\uc2dd\ub4e4\uc740 \uc774\ub97c \uc5b4\ub5a4 \ud615\ud0dc\ub85c \ub9cc\ub4e4\uace0, \uc0c1\ub300\ub4e4\uc740 \uc774\ub97c \uc774\uc6a9\ud558\uc5ec \uc5b4\ub5a4 \uacb0\uacfc\uac00 \ub098\uc62c \uc218 \uc788\ub294\uc9c0 \uc54c \uc218 \uc788\uc5b4,\n\uadf8 \uc0c1\ub300\ub4e4\uc774 \uc5b4\ub5a4 \uacb0\uacfc\ub97c \uc5bb\uc5b4\ub0bc \uc218 \uc788\ub294\uc9c0 \ubaa8\ub978\ub2e4\uba74, \uadf8 \uc0c1\ub300\ub4e4\uc774 \uc544\ubb34\uac83\ub3c4 \uc804\ud558\uc9c0 \uc54a\uace0 \ub0b4\uac00 \uc5b4\ub5a4 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub294\uc9c0 \uc54c \uc218 \uc788\uc73c\ubbc0\ub85c, \uc774\uc5d0 \ub300\ud55c \ucc28\uc774\ub97c \uc0dd\uac01\ud574\ubcf4\uba74 \uc774\ub97c \uc801\uc740 \ub2e8\uc704\ub85c \uc811\uadfc\ud560 \uc218 \uc788\ub2e4.\n\n\uadf8\ub7ec\ubbc0\ub85c, \uac01 \uc790\uc2dd\ub4e4\uc740 \uac01\uac01 \ub9cc\ub4e4 \uc218 \uc788\ub294"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\"\"\") == '1.5'\nassert solution(\"\"\"4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\"\"\") == '10.0'\n\"\"\"\nfrom random import randint, random"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0.0\"\nassert solution(\"1\\nblue orange 1.9\") == \"1.9\"\nassert solution(\"1\\nblue red 1.0\") == \"0.0\"\nassert solution(\"2\\nblue red 1.0\\nred orange 1.5\") == \"0.0\"\nassert solution(\"2\\nblue red 1.0\\nred orange 1.5\\nblue red 1.0\\nred orange 1.5\") == \"10.0\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == '1.500000000000000'\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == '0.000000000000000'\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == '10.000000000000000'\n\n\"\"\"\n\nimport sys\nimport math\n\ntest_data = [\n    # test_data_input_1,\n    \"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\",\n    \"2\\nblue red 1.0\\nred pink 1.5\",\n    \"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\",\n]\n\ntest_data_output_1 = \"1.500000000000000\"\ntest_data_output_2 = \"0.000000000000000\"\ntest_data_output_3 = \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nblue red 1.0\nred pink 1.5\nblue green 1.0\ngreen yellow 1.9''') == '10.000000000000000'\nassert solution('''3\nblue pink 1.0\nred pink 1.5\nblue green 1.0''') == '1.500000000000000'\nassert solution('''3\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9''') == '0.000000000000000'\nassert solution('''1\norange pink 1.9''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == \"10.000000000000000\"\n\"\"\"\n\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == \"10.000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5') == '0.000000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9') == '10.000000000000000'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n\nN = int(input())"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\n\"\"\"\nimport sys"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\"\"\"\n\ntest_input_1 = '6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n'\ntest_output_1 = '180'\n\ntest_input_2 = '3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\\n1 1\\n2 3\\n'\ntest_output_2 = '22'\n\ntest_input_3 = '3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n'\ntest_output_3 = '0'"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n3 1 2 3\\n2 1\\n1 1\\n1 2\\n1 2\\n1 3\") == \"180\"\nassert solution(\"3 2 2 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n1 1\\n1 2\\n1 2\\n1 3\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n1 1\\n1 2\\n1 2\\n1 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n\"\"\") == \"180\"\n\"\"\"\n    In this example, we have $6$ different ingredients, $r=6$, $s=1$, $m=1$, $d=1$, $n=0$. We have $2+3+1=6$ different dish types. In total, we can create $6!=720$ different dishes using our starter dishes $s=1$, main dishes $m=1$, and desserts $d=1$.\n    \n    If we only used two different brands of the same ingredient, then we could have made all $6!=720$ possible dishes from the $r=6$ different ingredients. But it is not possible to have all $6!=720$ dishes with two different brands of the same ingredient, so the maximum number of dish combinations is $6!=720-2*6!=720=360$.\n    \n    By the same logic, if we used three different brands of the same ingredient, we could make all $6!=720$ dish combinations from $r=6$ different ingredients. But it is not possible to have all $6!=720$ combinations with three different brands of the same ingredient, so the maximum number of dish combinations is $6!=720-3*6!=720-3*6!=720=180$.\n    \n    In total, the maximum number of dish combinations is $6!=720-2*6!+6!=720-2*6!+6!=720-2*6!+6!=720=180$.\n\n    In total, $6!=720$ dish combinations are possible.\n\"\"\"\nassert solution(\"\"\"6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n\"\"\") == \"too many\"\n\"\"\"\n    In this example, there are $6!=720$ different dish combinations, so there are more than $10^{18}$ possible dish combinations.\n\"\"\"\nassert solution(\"\"\"6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n\"\"\") == \"too many\"\n\"\"\"\n    In this example, we can make all $6!=720$ dish combinations.\n\"\"\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3''') == '22'\nassert solution('''3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1''') == '0'\n\n\"\"\"\n\nfrom collections import Counter\n\nR, S, M, D, N = map(int, stdin.readline().strip().split(' '))\ningredients = Counter(map(int, stdin.readline().strip().split(' ')))\ncounter = 0\nfor i in range(S + M + D):\n    for j in range(i + 1, S + M + D):\n        if j - i < N and Counter(map(int, stdin.readline().strip().split(' '))) == ingredients:\n            counter += 1\nprint(counter) if counter < 10**18 else print('too many')\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n\") == \"180\"\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\\n1 1\\n2 3\\n\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"0\"\nassert solution(\"5 1 1 1 1\\n2 3 2\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"too many\"\nassert solution(\"6 1 1 1 0\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"too many\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\") == \"22\"\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\") == \"0\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == \"180\"\nassert solution(\"3 2 2 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6') == '180'\nassert solution('3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3') == '22'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1') == '0'\n\n\"\"\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n\") == '180'\nassert solution(\"3 2 2 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == '22'\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == '0'\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == '0'\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == \"180\"\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\") == \"0\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nup 3\\n') == '20 20'\nassert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nr 7\\nd 2\\nl 4\\nup 3\\n') == '17 17'\nassert solution('3 3 2\\n...\\n.#.\\n...\\nup 2\\nr 2\\n') == '-1 -1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nup 3') == '20 20'\nassert solution('6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nup 3') == '17 17'\nassert solution('6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nup 3') == '17 17'\n\"\"\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 2\\nright 2\\n\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == \"-1 -1\"\n\nimport io"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\n\n\"\"\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == '17 17'\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == '17 17'\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == '17 17'\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == '17 17'\n\n----------------------\n\nimport sys"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 2\\nright 2\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\nassert solution(\"3 3 2\\n...\\n..#\\n...\\nup 2\\nright 2\") == \"0 0\"\nassert solution(\"6 8 5\\n....#..\\n.##....\\n#..##.#\\n#...#..\\n#....##\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\n\n\"\"\"\n\nh, w, n = [int(i) for i in input().split(' ')]\ntiles = []\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == \"17 17\""
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 2\\nright 2\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\n\nimport numpy as np"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 5 90 50\") == \"impossible\"\nassert solution(\"371 3 100 45\") == \"impossible\"\nassert solution(\"200 4100 4500\") == \"impossible\"\nassert solution(\"310 3 2 100 150\") == \"300\"\nassert solution(\"200 4 100 5\") == \"300\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == \"88\"\n\"\"\"\n\n\nfrom typing import List, Optional"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\nassert solution(\"310\\n2\\n2 20 35\\n2 88 200\") == \"88\"\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == \"88\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\"\"\"\n\nb = int(input())\nk = int(input())\n\narr = []\nfor _ in range(k):\n    arr.append([int(x) for x in input().split()])\n\nl = max([len(x) for x in arr])\n\nres = []\nfor _ in range(k):\n    if len(arr[_]) < l:\n        arr[_] = arr[_] + [0] * (l - len(arr[_]))\n    res.append(sum(arr[_]))\n\nres = min(res)\n\nprint(\"impossible\" if res < b else res)\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2 20 35\\n2 88 200\") == \"88\"\nassert solution(\"3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"2\\n2 20 35\\n2 88 200\") == \"88\"\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == \"88\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n20 35\\n2 88 200\") == \"88\"\nassert solution(\"3\\n2\\n40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"1\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"371\n3\n2 40 65\n2 100 150\n2 300 320\"\"\") == \"impossible\"\nassert solution(\"\"\"310\n3\n2 40 65\n2 100 150\n2 300 320\"\"\") == \"300\"\n\"\"\""
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'cannot fold'\nassert solution('...') == 'can fold'\nassert solution('##') == 'can fold'\nassert solution('..#') == 'cannot fold'\nassert solution('..##') == 'can fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"......\\n#.....\\n######\\n......\\n......\") == \"cannot fold\"\nassert solution(\"..##..\\n...#..\\n..##..\\n...#..\\n......\\n......\") == \"can fold\"\nassert solution(\"#..#..\\n######\\n....#.\\n...#..\\n#..#..\\n#..#..\") == \"cannot fold\"\n\"\"\"\n\n\nimport pytest\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"......\\n\"\n\"......\\n\"\n\"######\\n\"\n\"......\\n\"\n\"......\\n\"\n\"......\") == \"cannot fold\"\n\nassert solution(\"..##..\\n\"\n\"#...#..\\n\"\n\"..##..#\\n\"\n\"#....#.\\n\"\n\".#.#...\"\n\"#....#.\") == \"can fold\"\n\nassert solution(\"#..#.#\\n\"\n\".#..#.#\\n\"\n\".#..#.#\\n\"\n\".#..#.#\\n\"\n\"......\\n\"\n\"......\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"......\\n\"\n    \"......\\n\"\n    \"######\\n\"\n    \"......\\n\"\n    \"......\\n\"\n    \"......\") == \"cannot fold\"\n\nassert solution(\"......\\n\"\n    \"......\\n\"\n    \"######\\n\"\n    \"..##..\\n\"\n    \"..#..#\\n\"\n    \"......\") == \"can fold\"\n\nassert solution(\"......\\n\"\n    \"......\\n\"\n    \"..##..\\n\"\n    \"..#..#\\n\"\n    \"......\") == \"cannot fold\"\n\n\"\"\""
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"......\\n\"\n\"......\\n\"\n\"######\\n\"\n\"......\\n\"\n\"......\\n\") == \"cannot fold\"\nassert solution(\"..##..\\n\"\n\"...#..\\n\"\n\"..##..\\n\"\n\"...#..\\n\"\n\"......\\n\"\n\"......\") == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".#..##.###...#.##.#..#.#\") == \"can fold\"\nassert solution(\"####.###.#####.#..#.#..##\") == \"cannot fold\"\nassert solution(\".#....#####....#..#...###\") == \"cannot fold\"\nassert solution(\".#..#.##.###.##.#.##....\") == \"can fold\"\n\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom itertools import product\nfrom collections import defaultdict"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"..##.\\n##.##\\n##...\\n#####\\n##.##\\n##...\\n.###.\\n.###.\"):\n    'cannot fold'\nassert solution(\"##.##\\n##...\\n##...\\n#####\\n##.##\\n##...\\n.###.\\n.###.\"):\n    'can fold'\nassert solution(\"#####\\n#.##.\\n#.##.\\n#.##.\\n#.##.\\n#.##.\\n#.##.\"):\n    'cannot fold'\nassert solution(\"##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n#.##.\\n.##..\"):\n    'cannot fold'\n\n\"\"\"\n\nimport sys\nimport copy\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"......\") == \"can fold\"\nassert solution(\"#.....\") == \"cannot fold\"\nassert solution(\"..##..\") == \"can fold\"\nassert solution(\"...#..\") == \"cannot fold\"\nassert solution(\"..##..\") == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"......\\n\"\n    \"..##..\\n\"\n    \"...#..\\n\"\n    \"..##..\\n\"\n    \"...#..\\n\"\n    \"......\") == \"can fold\"\nassert solution(\"......\\n\"\n    \"......\\n\"\n    \"######\\n\"\n    \"......\\n\"\n    \"......\") == \"cannot fold\"\n\nassert solution(\"#..#.\\n\"\n    \".#..#.\\n\"\n    \".#...\\n\"\n    \"#...#\\n\"\n    \"......\") == \"can fold\"\nassert solution(\"#..##\\n\"\n    \"#..##\\n\"\n    \"##..#\\n\"\n    \"##..#\\n\"\n    \"#...#\\n\"\n    \"......\") == \"cannot fold\"\n\nassert solution(\"......\\n\"\n    \"......\\n\"\n    \"######\\n\"\n    \"......\\n\"\n    \"......\") == \"cannot fold\""
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == solution(sample_output_1)\nassert solution(sample_input_2) == solution(sample_output_2)\nassert solution(sample_input_3) == solution(sample_output_3)\n\nprint('Hooray!')\n\"\"\"\n\nimport sys\n\nsample_input_1 = \"\"\"\n......\n......\n######\n......\n......\n......\n\"\"\"\n\nsample_output_1 = \"\"\"\ncannot fold\n\"\"\"\n\nsample_input_2 = \"\"\"\n......\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nassert solution('a') == 'a'\nassert solution('bbb') == 'bbb'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcefgabc\") == 'abc'\nassert solution(\"abcbabcba\") == 'abcba'\nassert solution(\"aaaa\") == 'aaa'\nassert solution(\"abcdefghijklm\") == 'abcdefghijklm'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''abcefgabc''') == 'abc'\nassert solution('''abcbabcba''') == 'abcba'\nassert solution('''aaaa''') == 'aaa'\nassert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcefgabc') == 'abc', \"Not working with sample 1\"\nassert solution('abcbabcba') == 'abcba', \"Not working with sample 2\"\nassert solution('aaaa') == 'aaa', \"Not working with sample 3\"\nassert solution('a') == 'a', \"Not working with sample 4\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcde') == 'abcde'\nassert solution('abcdea') == 'abcde'\nassert solution('abcdeaabcdea') == 'abcdea'\nassert solution('abcdeaabcdeea') == 'abcdea'\nassert solution('aaaaaaaaaa') == 'aaaaaaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcefgabc\") == \"abc\", 'error 1'\nassert solution(\"abcbabcba\") == \"abcba\", 'error 2'\nassert solution(\"aaaa\") == \"aaa\", 'error 3'"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nassert solution('bcdefg') == 'bcdefg'\nprint('All tests passed!')\n\n----\n\nimport unittest"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\n    '5',\n    '1 4',\n    '2 5',\n    '3 6',\n    '4 7',\n    '5 8'\n])) == '4', 'Incorrect solution'\nprint('Ok!')\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4\\n2 5\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"4\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3\n1 4\n2 10\n0 15\n\"\"\") == \"6\"\n\n\"\"\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\nprint(solution(input()))\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 4\\n2 5') == '4'\nassert solution('1 4\\n2 10005') == '6'\nassert solution('2 10\\n0 15') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 4\n2 10005\n0 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n1 4\n2 10\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n1 4\n2 10\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3\n1 4\n2 10\n0 15\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 4\n2 10\n0 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n1 4\n2 10005\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1\n1 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n0\n1 4\n\"\"\") == \"0\""
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 4\\n2 5\") == '4'\nassert solution(\"3\\n1 4\\n2 10\\n0 15\") == '6'\n\"\"\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4\\n2 5') == '4'\n\nassert solution('4\\n1 4\\n2 10\\n0 15') == '6'\n\nassert solution('2\\n1 4\\n2 10005') == '6'\n\nassert solution('3\\n1 4\\n2 10\\n0 15') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 4\n2 10\n0 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3\n1 4\n2 10\n0 15\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 4\n2 10005\n0 15\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n0\n1 10\n2 10005\n0 15\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 3\nassert solution(7) == 2\nassert solution(7) == 2\nassert solution(1) == 1\nassert solution(2) == 0"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2\\n'\n\"\"\""
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == 2\n\"\"\""
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 4 4 8 12 24\\n7 7 7') == '2'\nassert solution('7 7 7\\n2 3 4 4 8 12 24') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\nassert solution('1 2 3 2 1\\n7 7 7') == '3'\n\n\"\"\""
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n\nassert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == '2'\nassert solution(\"3\\n7 7 7\") == '3'\nassert solution(\"5\\n1 2 3 2 1\") == '0'\n\"\"\"\nimport sys\n\n\"\"\"\n[Root] -> [Left] -> [Right]\n\nX -> 0 -> 1\nY -> 0 -> 2\n\nX -> 1 -> 3\nY -> 1 -> 4\n\nX -> 2 -> 5\nY -> 2 -> 6\n\n\"\"\""
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\nassert solution(\"1 2 1\\nGS\\n\") == 1\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == -1\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n\n\"\"\"\n\nclass Solution:\n    def __init__(self, n, m, k):\n        self.n = n\n        self.m = m\n        self.k = k\n        self.costs = {\n            \"S\": [1, 0, 0],\n            \"F\": [2, 1, 0],\n            \"M\": [3, 2, 1]\n        }\n        self.graph = {\n            \"S\": [],\n            \"F\": [],\n            \"M\": [],\n            \"G\": [],\n            \".\": [],\n            \"#\": []\n        }\n        self.distances = {\n            \"S\": 0,\n            \"F\": 0,\n            \"M\": 0,\n            \"G\": 0,\n            \".\": 0,\n            \"#\": 0\n        }\n        self.frontier = []\n        self.visited = []\n\n    def explore(self):\n        if self.distances[\"G\"] == 0:\n            return True\n        if self.frontier:\n            self.visited.append(self.frontier[0])\n            self.frontier.pop(0)\n            self.distances[\"G\"] -= 1\n            neighbors = [self.graph[self.visited[-1]][i] for i in range(len(self.graph[self.visited[-1]]))]\n            for neighbor in neighbors:\n                if neighbor == \"G\":\n                    self.distances[\"G\"] += 1\n                if neighbor not in self.visited:\n                    self.frontier.append(neighbor)\n            if self.explore():\n                return True\n        return False\n\n    def count_days(self):\n        self.frontier = [self.graph[\"S\"]]\n        self.visited = []\n        self.distances[\"S\"] = 0\n        while self.explore() == False:\n            if self.frontier:\n                self.visited.append(self.frontier[0])\n                self.frontier.pop(0)\n                self.distances[\"S\"] -= 1\n                neighbors = [self.graph[self.visited[-1]][i] for i in range(len(self.graph[self.visited[-1]]))]\n                for neighbor in neighbors:\n                    if neighbor == \"G\":\n                        self.distances[\"S\"] += 1\n                    if neighbor not in self.visited:\n                        self.frontier.append(neighbor)\n        return self.distances[\"S\"] // self.k"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\nassert solution(\"1 2 1\\nGS\\n\") == 1\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == -1\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.F.M') == \"S\"\nassert solution('M.F.M') == \"G\"\nassert solution('S.M.F') == \"S\"\n\n\"\"\"\n\nfrom collections import deque\nimport pdb\n\nclass Grid:\n    def __init__(self, grid):\n        self.grid = grid\n        self.nrows = len(grid)\n        self.ncols = len(grid[0])\n\n    def __str__(self):\n        s = ''\n        for row in self.grid:\n            s += ''.join(row) + '\\n'\n        return s\n\n    def get_neighbours(self, cell):\n        i, j = cell\n        neighbours = []\n        if i > 0:\n            neighbours.append((i-1, j))\n        if j > 0:\n            neighbours.append((i, j-1))\n        if i < self.nrows-1:\n            neighbours.append((i+1, j))\n        if j < self.ncols-1:\n            neighbours.append((i, j+1))\n        return neighbours\n\n    def get_neighbours_distance(self, cell, dist):\n        neighbours = self.get_neighbours(cell)\n        distances = []\n        for neighbour in neighbours:\n            i, j = neighbour\n            if self.grid[i][j] == '.':\n                distances.append((neighbour, dist+1))\n        return distances\n\n    def get_distance_to_goal(self, cell):\n        i, j = cell\n        dist = 0\n        while True:\n            neighbours = self.get_neighbours_distance(cell, dist)\n            if len(neighbours) == 0:\n                return dist\n            for neighbour in neighbours:\n                i, j = neighbour\n                if self.grid[i][j] == 'G':\n                    return dist\n            dist += 1\n\n    def shortest_path(self):\n        distance_to_goal = {}\n        for i in range(self.nrows):\n            for j in range(self.ncols):\n                if self.grid[i][j] in ['.', 'S']:\n                    distance_to_goal[(i,j)] = self.get_distance_to_goal((i,j))\n        return min(distance_to_goal.values())"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(Sample Input 1) == 1\n\"\"\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nS..\\n.#.\\n..G\\nDRRDD') == '1'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\nS#\\n.#\\n..\\nDRRDD') == '1'\nassert solution('3 7\\n.......\\n.G.#S.\\n.......\\nLDLDLLDR') == '1'\nassert solution('3 7\\n#..#S\\n.......\\nLDLDLLDR') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('DRRDD') == '1'\nassert solution('LDLDLLDR') == '2'\n\nprint(solution(stdin))"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == \"1\"\nassert solution(\"3 7\\n.......\\n.G.#.S.\\n.......\\nLDLDLLDR\") == \"1\"\nassert solution(\"3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR\") == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\nS..\n.#.\n..G\nDRRDD''') == '1'\nassert solution('''3 7\n.......\n.G.#.S.\n.......\nLDLDLLDR''') == '1'\nassert solution('''3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR''') == '2'\nassert solution('''3 7\nG..#.#\n.##..S\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"S..\\n.#.\\n..G\") == \"1\"\nassert solution(\"G..\\nS..\\n.#.\") == \"1\"\nassert solution(\"........\\nG.##S.\\n........\\nLDLDLLDR\") == \"2\""
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"DRRDD\") == \"1\"\nassert solution(\"LDLLDLDR\") == \"2\"\nassert solution(\"LDRDRRDD\") == \"3\"\nassert solution
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(Sample Input 1) == 1\nassert solution(Sample Input 2) == 1\nassert solution(Sample Input 3) == 2\n\"\"\""
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(S..\n) == 1\nassert solution(.......\n) == 1\nassert solution(G.#.S.\n) == 1\nassert solution(.......\nLDLDLLDR\n) == 2"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n111111 0 1000\\n999999 900 500\\n999 100 1') == '1000 200\\n'\nassert solution('5\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == 'uncertain\\n'\nassert solution('5\\n100 0 100\\n0 200 199') == 'impossible\\n'\n\nimport sys\nassert len(sys.argv) == 2\nassert eval(sys.argv[1]) == 3\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\n\"\"\"\n\nN = int(input())\nlst = []\nfor i in range(N):\n    lst.append(list(map(int, input().split())))\nlst.sort()\ndic = {}\nfor i in range(N):\n    dic[lst[i][2]] = lst[i]\nnum = [0] * N\nfor i in range(N):\n    num[i] = i + 1\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\"\"\"\n\n\n\"\"\"\nIf we were allowed to move from one point to another in an infinite grid, the question would be: how many different paths could we take before we hit a wall or reach the goal.\n\nWe can use a similar approach to that of the Tower of Hanoi puzzle, where we take the grid and divide it into three rings, moving disks from one ring to another until we get to the goal, while keeping track of the number of moves it takes to reach that goal.\n\nIn this case, we will have three rings to consider:\n\nthe two walls,\nthe goal.\n\nIn order to move a disk from a ring to another, we will need to take the disks on both rings, transfer them to the third ring, and then move them again from the third ring.\n\nIn order to keep track of the number of moves we have taken, we will use a function called count.\n\n\"\"\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == '1000200 799'\nassert solution(\"\"\"\n2\n100 0 101\n0 200 199\n\"\"\") == 'uncertain'\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == 'impossible'\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == 'impossible'\nassert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == '1000200 799'\n\n-----Problem-----"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\n\"\"\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\""
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\""
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799\\n'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain\\n'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible\\n'\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n4 7\n14 17\n9 8\n19 18''') == '1\\n2'\nassert solution('''2\n4 7\n14 17\n9 8\n19 18''') == '1\\n2'\n\nassert solution('''2\n4 8\n9 7\n14 18\n19 17''') =='syntax error'\nassert solution('''2\n4 7\n14 17\n9 8\n19 18''') == '1\\n2'\n\nassert solution('''2\n4 7\n9 7\n14 18\n19 17''') == '1\\n2'\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3\\n1 4') == '1 3 4'\nassert solution('4\\n1 4') == '2 3 1 4'\nassert solution('1\\n4') == '4 1'\nassert solution('4\\n4') == '1 1 4 4'\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '1 2'\nassert solution('1 2\\n2 3\\n3 4') == '2 1 4 3'\nassert solution('1 2\\n2 3\\n3 4\\n4 5') == '2 3 4 5 1'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '2 3 4 5 6 1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\\n\") == \"1\\n2\"\nassert solution(\"2\\n4 7\\n14 17\\n9 8\\n19 18\\n\") == \"syntax error\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\\n\") == \"syntax error\"\n\n-----Notes-----\nAssume that there are no overlapping rectangles.\n\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == '2\\n1\\n'\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == '1\\n2\\n'\nassert solution(\"2\\n4 8\\n9 7\\n14 19\\n18 17\") =='syntax error'\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 8\n9 7\n14 18\n19 17\n\"\"\") == \"1\\n2\"\n\nassert solution(\"\"\"\n2\n4 8\n9 7\n14 18\n19 17\n\"\"\") == \"1\\n2\"\n\nassert solution(\"\"\"\n2\n4 7\n14 17\n9 8\n19 18\n\"\"\") == \"syntax error\"\n\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\\n\") == \"2\\n1\\n\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\\n\") == \"1\\n2\\n\"\nassert solution(\"2\\n4 7\\n14 17\\n9 8\\n19 18\\n\") == \"1\\n2\\n\"\n\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4 7\\n14 17\\n9 8\\n19 18\") == \"2\\n1\\n\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"1\\n2\\n\"\nassert solution(\"2\\n4 7\\n14 18\\n9 8\\n19 17\") == \"syntax error\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"2\\n1\\n\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"1\\n2\\n\"\n\n-----Constraints-----\n$1 \\leq n \\leq 10^5$\n$1 \\leq r, c \\leq 10^9$\n$1 \\leq \\sum_{i=1}^n r_i \\leq 10^9$\n$1 \\leq \\sum_{i=1}^n c_i \\leq 10^9$\n\n\"\"\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"2\\n1\\n\"\nassert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"2\\n1\\n\"\n\nprint(solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\"))\nprint(solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\"))\n\"\"\"\n\nfrom sys import stdin\n\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('90 22 6 81 40 12 60 90') == '1'\nassert solution('85 55 99 51 136 _ 171') == '1'\nassert solution('160 _ 136 _ _ _ _ 170') == '8640'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1'\n\nassert solution('''85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n''') == '1'\n\nassert solution('''160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n''') == '8640'"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"85 55 _ 99 51 _ _ _ _ _\\n _ _ _ _ _ _ _ 85 63 153\") == \"8640\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n _ _ _ _ 120 _ _ 144 _ _\") == \"8640\"\nassert solution(\"90 22 _ 6 _ _ _ _ 81\\n _ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\n\n\"\"\"\n\nfrom typing import List, Dict, Any\n\nSolution = str\nRules = Dict[str, List[int]]\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"160\\n_ _ 136\\n_ _ _ _ _ 170\\n\") == \"8640\"\nassert solution(\"85 55\\n_ _ _ _ _\\n_ _ _ _ 85 63 153\\n\") == \"1\"\n\n-----Solution-----\n\nA solution is a set of solutions of the form a/b, where a is an integer and b is a fraction.\n\nTheorem:\n\nA set of solutions is a solution iff:\n* The only denominators in solutions are 1 and the value of b.\n* A solution is a solution iff its number of solutions, 1, is minimal.\n\nNow we can assume that:\n* Every integer is a solution.\n* Every fraction consists of the integers 1 and the value of a.\n* We need to find the minimal number of solutions.\n\nTherefore, we can only find the minimal number of solutions by checking the following:\n\n* If a is the last integer of a fraction, and a is not the only integer in the denominator, then we must remove it from the denominator.\n* If a is the only integer of a fraction, then we must remove it from the numerator.\n\nAnd each set of solutions must be a partition of the integer set {1, 2,..., a}. We can use the same set of partitions as in Question 1:\n\n1. Divide the integer set into the integer partitions (mixed) {(1, 1),..., (a, 0)} and {(0, a - 1)}\n2. If (mixed) is a set of solutions, then we can remove the integer a from (mixed) and have a new set of solutions. If this new set of solutions is a set of solutions, then we can remove the integer a from (mixed) and have a new set of solutions.\n\nThere is a lot of repeating code here, but it is short and easy to read.\n\nThe time complexity is O(m x n) where m is the number of integers in the list and n is the number of fractions.\n\nThe space complexity is O(m + n).\n\nThe solution has O(m x n) time complexity and O(m + n) space complexity.\n\nclass Solution:\n    def solve(self, n: int, d: List[int]) -> int:\n        ans, num, den = 0, 1, 1\n        for i in range(n):\n            if d[i] == 1:\n                num, den = self.helper(num, den, d[i])\n            else:\n                num, den = self.helper(num, den, d[i] * den)\n            ans += num\n        return ans % (10 ** 9 + 7)\n\n    def helper(self, n, d, d2):\n        n2, d2 = d2 // d, d2 % d\n        return n * n2, d * d2\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\nprint(solution(a))"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"_-90 -22 -_ 6 -_- _ _ _ 81\\n_-40 _ _ _ 12 60 -_ 90 _ _\\n_-5 _ _ _ _ _ _ 85 63 153\\n\") == \"1\\n\"\nassert solution(\"_-80 -60 -_ 6 -_- _ _ _ 81\\n_-40 _ _ _ 12 60 -_ 90 _ _\\n_-5 _ _ _ _ _ _ 85 63 153\\n\") == \"many\\n\"\nassert solution(\"_-90 -22 -_ 6 -_- _ _ _ 81\\n_-40 _ _ _ 12 60 -_ 90 _ _\\n_-5 _ _ _ _ _ _ 85 63 153\\n\") == \"1\\n\"\nassert solution(\"_-80 -60 -_ 6 -_- _ _ _ 81\\n_-40 _ _ _ 12 60 -_ 90 _ _\\n_-5 _ _ _ _ _ _ 85 63 153\\n\") == \"many\\n\"\nassert solution(\"_-90 -22 -_ 6 -_- _ _ _ 81\\n_-40 _ _ _ 12 60 -_ 90 _ _\\n_-5 _ _ _ _ _ _ 85 63 153\\n\") == \"1\\n\"\n\n\"\"\""
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n\") == '2'\nassert solution(\"2\\n1\\n\") == '2'\nassert solution(\"3\\n1\\n1\\n\") == '8'\nassert solution(\"10\\n1\\n2\\n2\\n1\\n\") == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == 2\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == \"2\"\nassert solution(\"5\\n1 2\\n1 5\\n3 1\\n4 3\\n\") == \"8\"\nassert solution(\"10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\\n\") == \"24\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"2\"\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == \"8\"\nassert solution(\"10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\") == \"24\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n1 3') == '2'\nassert solution('5\\n2 1\\n1 5\\n3 1\\n4 3') == '8'\n\"\"\"\n\nwith open('input.txt') as f:\n    n = int(f.readline().rstrip())\n    junctions = [int(f.readline().rstrip()) for i in range(n - 1)]\n    junctions.append(int(f.readline().rstrip()))\n    junctions = sorted(list(set(junctions)))\n\n    graph = {}\n    for u, v in zip(junctions, junctions[1:]):\n        if u!= v:\n            if u not in graph:\n                graph[u] = []\n            if v not in graph:\n                graph[v] = []\n            graph[u].append(v)\n            graph[v].append(u)\n\n    paths = [0] * (len(junctions) + 1)\n    paths[0] = 1\n    paths[-1] = 1\n    for u in junctions[:-1]:\n        if u not in graph:\n            continue\n        for v in graph[u]:\n            if v not in graph:\n                continue\n            if v!= junctions[junctions.index(u) + 1]:\n                paths[junctions.index(v)] += paths[junctions.index(u)]\n\n    print(paths[-2])\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == \"2\"\nassert solution(\"5\\n1 2\\n1 5\\n3 1\\n4 3\\n\") == \"8\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2\n1 3\n\"\"\") == '2'\nassert solution(\"\"\"\n5\n2 1\n1 5\n3 1\n4 3\n\"\"\") == '8'\nassert solution(\"\"\"\n5\n2 1\n1 5\n3 1\n4 3\n\"\"\") == '8'\nassert solution(\"\"\"\n10\n1 2\n2 3\n2 4\n1 5\n3 6\n2 7\n7 8\n5 9\n5 10\n\"\"\") == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 5\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == 2\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\\n\") == 8\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\n\nprint('Hooray!')"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'otto'\nassert solution('treetreetreetree') == '3'\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''''') == ''\nassert solution('secretmessage') =='sssss'\nassert solution('boot') == 't'\nassert solution('treetreetreetree') == 't'\nassert solution('wood') == 'o'\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'kot'\nassert solution('treetreetreetree') == '3'\nassert solution('wood') == '0'\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('treetreetreetree') == '3'\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\n\n\"\"\"\n\nimport sys\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"stdin, expected\", [\n    (\"secretmessage\", \"essa\"),\n    (\"treetreetreetree\", \"3\"),\n    (\"oranges\", \"0\"),\n])\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('secretmessage') == 'essa'\nassert solution('boot') == 'boot'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\n\nprint('All tests passed.')\n\n------Solution-----\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('secretmessage', 'boot') == 'essa'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\nfrom operator import itemgetter\nfrom typing import List, Tuple, Dict\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"<^>\") == 2\n\"\"\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n>^<^\") == \"2\"\nassert solution(\"4\\nv<^>\\n####\\n#.R#\\n#..#\") == \"4\"\nassert solution(\"4\\n<<<\\n####\\n#.R#\\n#..#\") == \"1\"\nprint('Success')"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"<^>\") == 2\nassert solution(\"v<^>\") == 4\nassert solution(\"<<<\") == 1\nassert solution(\"<<<v<<<v<<<v<<<v<<<v<<<\") == 1\nassert solution(\"v<<<v<<<v<<<v<<<v<<<\") == 1\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n>v<\\n####\\n#.R#\\n#..#\") == \"4\"\n\nassert solution(\"3\\n>v<\\n####\\n#.R#\\n#..#\") == \"1\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"^>v<\") == \"2\"\nassert solution(\"^v^v^v^v^v\") == \"1\"\nassert solution(\"^v^v^v^v^v\") == \"1\"\nassert solution(\"^v^v^v^v^v^v\") == \"1\"\n\n\"\"\"\n\nfrom typing import List\nfrom functools import lru_cache"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"v<^>\") == \"4\"\nassert solution(\"<<<\") == \"1\"\nassert solution(\"v<^>v<<^v<>\") == \"9\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nr = sys.stdin.readline()\n\nfield = [[\"#\" for _ in range(N)] for _ in range(N)]"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('<^>') == 1\nassert solution('>^<') == 2\nassert solution('^>v<') == 2\nassert solution('>v<^') == 2\nassert solution('<^v') == 1\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"<^>\") == \"1\"\nassert solution(\"^v<^\") == \"2\"\nassert solution(\"^>v<^\") == \"1\"\nassert solution(\"^<>^>v<>\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">^<^\") == \"2\"\nassert solution(\"v<^>\") == \"4\"\nassert solution(\"<<<\") == \"1\"\n\"\"\"\nimport sys\nimport functools\nimport collections"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">^<^\") == 2\nassert solution(\"v<^>\") == 4\nassert solution(\"<<<\") == 1\nassert solution(\">^<^>^<<^>\") == 1\nassert solution(\">^<^>v^<<^>\") == 2\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3 4 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\") == 6\nassert solution(\"2 0 0 20 10 3 0 10\\n10 1 0 2 5 2 2 7\") == 11\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\") == 6\nassert solution(\"2\\n7 0 0 20 10 3 0 10\\n10 1 0 2 5 2 2 7\") == 11\n\n\"\"\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == 3\nassert solution('3 4 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2') == 6\nassert solution('2 7 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2') == 11\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == '3'\nassert solution('3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1') == '6'\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\n\"\"\"\n\nn = int(input())\n\nl = [0] * n\n\nfor _ in range(n):\n    m, d, lx, rx, dh, ddx, dh2 = map(int, input().split())\n    h = dh + dh2\n    for i in range(m):\n        l[i] += (rx + ddx * i - lx) // h\n\nprint(sum(i >= 0 for i in l))\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 0 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\nassert solution(\"2\\n7 0 0 20 10 3 0 10\") == 11\n\"\"\""
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 0 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"2\\n7 0 0 20 10 3 0 10\\n10 1 0 2 5 2 2 7\") == 11\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\n\"\"\"\n\nfrom typing import List\n\nimport sys"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('1\\n2\\n3') == '1'\nassert solution('2\\n1\\n2') == '2'\nassert solution('2\\n1\\n3\\n4') == '1'\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\nassert solution('0.0 0.0 4.0 0.0') == '3.7320508076'\nassert solution('0.0 0.0 0.0 0.0') == '0.0'\nassert solution('0.0 0.0 0.0 0.0') == '0.0'\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\nassert solution('0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0') == '3.7320508076'\n\"\"\"\nimport math\n\nA = [float(i) for i in stdin.readline().split()]\nB = [float(i) for i in stdin.readline().split()]\nN = int(stdin.readline())\nC = []\nfor i in range(N):\n    C.append([float(i) for i in stdin.readline().split()])"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\nassert solution(\"0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0\") == \"3.7320508076\"\nassert solution(\"0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0\") == \"3.7320508076\"\nassert solution(\"0.0 0.0 4.0 0.0\\n1\") == \"4.0\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '163.5274740179'\nassert solution('0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0') == '3.7320508076'"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\n\"\"\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_data_01) == test_result_01\nassert solution(test_data_02) == test_result_02\nassert solution(test_data_03) == test_result_03\nassert solution(test_data_04) == test_result_04\n\"\"\"\n\n\nfrom math import hypot\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\n\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List, Tuple\n\nCoords = Tuple[float, float]\nConveys = List[List[float]]\nConveysSizes = List[Tuple[float, float]]\n\nMeterPerSecond = float"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\nassert solution('0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0') == '3.7320508076'\n\n'''\n\n\nimport math"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\n\nassert solution(\"9 8 1\") == \"canterlot\"\n\nassert solution(\"5 3 5\") == \"madam\"\n\nassert solution(\"1 1 1\") == IMPOSSIBLE\n\nassert solution(\"0 0 0\") == IMPOSSIBLE\n\"\"\"\n\nn, k, p = map(int, input().split())\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 1') == 'ab'\nassert solution('1 1 1') == 'a'\nassert solution('3 1 5') =='madam'\nassert solution('7 2 3') == 'cat'\nassert solution('5 1 5') == 'imposible'\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\nassert solution('10 6 1') == IMPOSSIBLE\nassert solution('10 6 3') == IMPOSSIBLE\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 5') =='madam'\nassert solution('9 8 1') == 'canterlot'\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\nassert solution(\"7 3 9\") == IMPOSSIBLE"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 5\") == \"madam\"\n\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == 'adam'\nassert solution(\"4 2 6\") =='madam'\nassert solution(\"6 2 1\") == 'rarity'\nassert solution(\"5 2 3\") == 'IMPOSSIBLE'\nassert solution(\"7 2 7\") == 'coconut'\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 5 3\n''') == 'rarity'\nassert solution('''9 8 1\n''') == 'canterlot'\nassert solution('''5 3 5\n''') =='madam'\nassert solution('''6 5 3\n''') == 'rarity'\nassert solution('''9 8 1\n''') == 'canterlot'\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest-\\nmotivation high\\nProgrammers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.'\n) == (\n    'Blue Ridge mountain road.\\n'\n    'Leaves, glowing in autumn sun,\\n'\n    'fall in Virginia.'\n)\nassert solution(\n    'Who would know if we had too few syllables?'\n) == (\n    'Who would know if we had too few syllables?'\n)"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \\\n    \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \\\n    \"Who would know if we had too few syllables?\"\n\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \\\n\"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \\\n\"Who would know if we had too few syllables?\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\nBlue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\n''') == '''\nBlue Ridge mountain road.\nLeaves, glowing in autumn sun,\nfall in Virginia.\n'''\nassert solution('''\nWho would know if we had too few syllables?\n''') == '''\nWho would know if we had too few syllables?\n'''\nassert solution('''\nInternational contest- motivation high Programmers have fun!\n''') == '''\nInternational contest- motivation high Programmers have fun!\n'''\nassert solution('''\nThis is a test string. Only one syllable is needed here.\n''') == '''\nThis is a test string. Only one syllable is needed here.\n'''\nassert solution('''\nAnother test. But with two syllables.\n''') == '''\nAnother test. But with two syllables.\n'''\n\nprint('Success')"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\n\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest-\\nmotivation high\\nProgrammers have fun!\"\n\nprint('Success')\n'''"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?\\n'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high\\nProgrammers have fun!.'\nassert solution('Short story.') == 'Short story.'\nassert solution('I think, therefore I am.') == 'I think, therefore I am.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\\n\"\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest\\n- motivation high\\nProgrammers have fun!\"\nassert solution(\"Frankly, my dear, I don't give a damn!   (I have a severe case of hypochondriasis.)\") == \"Frankly, my dear, I don't give a damn!   (I have a severe case of hypochondriasis.)\"\nassert solution(\"Mrs. Carter gave me a little bird of paradise and a mule of spain to be my bride.\") == \"Mrs. Carter gave me a little bird of paradise and a mule of spain to be my bride.\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemt\") == \"Thore is awesome\"\n\n\"\"\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 'ThoreH'\nassert solution(1) == 'Thore is awesome'\nassert solution(2) == 'Thore sucks'"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"Thore\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ThoreHusfeldt\") == \"ThoreHusfeldt\"\nassert solution(\"ThoreHusfeldter\") == \"ThoreHusfeldt\"\nassert solution(\"ThoreHusfeldtJ\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldtH\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldtJH\") == \"ThoreHusfeldt\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreTiemann\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\\nJohanSannemo\") == \"Thore sucks\"\n\"\"\"\n\n\"\"\"\nWe iterate over the input and check if the name has the best score.\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nThoreHusfeldt\\nJohanSannemo') == 'Thore is awesome'\nassert solution('2\\nThoreHusfeldt\\nThoreHusfeldt') == 'ThoreH'\nassert solution('2\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt') == 'Thore'\nassert solution('2\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt') == 'Thore'\nassert solution('2\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeld"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"Thore\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreHusfeldt\"\n\n\"\"\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(r'Sample Tests\\input2.txt').read()) == 'Thore is awesome'\n\"\"\""
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nThoreHusfeldt\\nJohanSannemo') == 'Thore is awesome'\nassert solution('2\\nThoreHusfeldt\\nThoreHusfeldt') == 'ThoreHusfeldt'\nassert solution('2\\nThoreHusfeldt\\nJohanSannemo') == 'Thore sucks'\nassert solution('2\\nThoreHusfeldt\\nToreHusfeldt') == 'ThoreHusfeldt'\n\nassert solution('2\\nThoreTiemann\\nThoreHusfeldt') == 'ThoreHusfeldt'\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreTiemann\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\""
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('L*R') == '25'\nassert solution('**') == '33'\n\"\"\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n\n\"\"\"\n\n\nfrom typing import Dict, List\n\n\nclass BinaryTreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def is_empty(self):\n        return self.root == None\n\n    def insert_left(self, val):\n        self.root.left = BinaryTreeNode(val)\n\n    def insert_right(self, val):\n        self.root.right = BinaryTreeNode(val)\n\n    def inorder_traversal(self):\n        if self.root == None:\n            return []\n        else:\n            return self.__inorder_traversal(self.root)\n\n    def __inorder_traversal(self, node: BinaryTreeNode) -> List:\n        if node == None:\n            return []\n        return self.__inorder_traversal(node.left) + [node.val] + self.__inorder_traversal(node.right)\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"P*P\") == 6\nassert solution(\"L*R\") == 25\nassert solution(\"**\") == 33\nassert solution(\"LRRP\") == 6\nassert solution(\"L*R*\") == 33\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"LP*R\") == \"6\"\nassert solution(\"L*R*R*P\") == \"33\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"R*L*R*P*L*P\") == \"5\"\nassert solution(\"R*L*R*L*P*L*P\") == \"12\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"L*R\") == 25\nassert solution(\"P*P\") == 6\nassert solution(\"**\") == 33\n\"\"\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LLLRRR\") == 11\nassert solution(\"LRRPLL\") == 13\nassert solution(\"LLRRRR\") == 8\nassert solution(\"RLRRLL\") == 19\n\"\"\"\n\nfrom collections import Counter, deque\nfrom functools import reduce\nfrom typing import List, Tuple"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('P*P') == 6\nassert solution('L*R') == 25\nassert solution('**') == 33\n\"\"\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\") == \"yes\"\nassert solution(\"3\\noskar not lukas\\noskar is poptart\\nlukas is smart\") == \"wait what?\"\nassert solution(\"1\\nmoo not foo\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('herp is derp') == 'yes'\nassert solution('derp is herp') == 'yes'\nassert solution('herp is herp') == 'yes'\nassert solution('derp is derp') == 'yes'\nassert solution('oskar not lukas') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\") == \"yes\"\nassert solution(\"3\\noskar not lukas\\noskar is poptart\\nlukas is smart\") == \"wait what?\"\nassert solution(\"1\\nmoo not foo\") == \"yes\"\nprint(solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\"))\nprint(solution(\"3\\noskar not lukas\\noskar is poptart\\nlukas is smart\"))\nprint(solution(\"1\\nmoo not foo\"))"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\nlukas is poptart\\nlukas is smart') == 'wait what?'\nassert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp') == 'yes'\nassert solution('1\\nmoo not foo') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\nherp is derp\nderp is herp\nherp is herp\nderp is derp''') == 'yes'\nassert solution('''3\noskar not lukas\noskar is poptart\nlukas is smart''') == 'wait what?'\nassert solution('''1\nmoo not foo''') == 'yes'\nprint(solution(input()))\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"herp is derp\") == \"yes\"\nassert solution(\"derp is herp\") == \"yes\"\nassert solution(\"herp is herp\") == \"yes\"\nassert solution(\"derp is derp\") == \"yes\"\nassert solution(\"moo is poptart\") == \"wait what?\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\nherp is derp\\nderp is herp') == 'yes'\nassert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp') == 'yes'\nassert solution('2\\nlukas is smart\\nlukas is poptart') == 'wait what?'\nassert solution('1\\nlukas is smart\\nlukas is poptart') == 'yes'\n\n\"\"\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\nherp is derp\\nderp is herp\") == \"yes\"\nassert solution(\"3\\nlukas is smart\\nlukas is lukas\") == \"yes\"\nassert solution(\"4\\nlukas is smart\\nlukas is lukas\\nlukas is lukas\") == \"wait what?\"\nassert solution(\"1\\nmoo not foo\") == \"yes\"\nassert solution(\"1\\nlukas not lukas\") == \"yes\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'yes'\nassert solution('derp is derp') == 'yes'\nassert solution('derp is not derp') == 'wait what?'\nassert solution('herp is herp') == 'yes'\nassert solution('herp is derp') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\"\"\") == \"yes\"\nassert solution(\"\"\"3\noskar not lukas\noskar is poptart\nlukas is smart\"\"\") == \"wait what?\"\nassert solution(\"\"\"1\nmoo not foo\"\"\") == \"yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\\n\") == \"impossible\"\nassert solution(\"4\\nAA\\nAB\\nAC\\nBA\\n\") == \"impossible\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nAACCMMAA') == '1 4'\nassert solution('3\\nACMA') == 'impossible'\n\"\"\""
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\n\"\"\"\nfrom typing import List, Dict\nimport collections\n\nnumber_of_fossils: int = int(input())\nfossils: List[str] = input().split()\n\nfossils_dict: Dict[str, int] = collections.Counter(fossils)\nfossils_dict_sorted: Dict[str, int] = collections.OrderedDict(sorted(fossils_dict.items()))\n\nfossils_list: List[str] = list(fossils_dict_sorted.keys())"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA''') == '''1 4\nMM\nA\nAA\nACA\nACMAA\n\n5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA'''\n\nassert solution('''3\nACMA\nACM\nACA\nAMA''') == '''impossible\n\n3\nACMA\nACM\nACA\nAMA'''\n\nassert solution('''1\nAM\nMA''') == '''impossible'''\n\nassert solution('''2\nAM\nMA''') == '''impossible'''\n\nassert solution('''3\nA\nM\nM''') == '''1 2\nM\nA\nM'''"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nACM\\nACM\\nACA\\nAMA\") == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\nassert solution(\"5\\nACM\\nACM\\nACA\\nAMA\") == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\nassert solution(\"1\\nACM\") == 'impossible'\nassert solution(\"4\\nA\\nA\\nA\\nA\") == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nAACCMMAA\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\") == \"impossible\"\n\"\"\"\n\nn = int(input())\ns = input()\n\nA = s.count('A')\nC = s.count('C')\nM = s.count('M')\n\nprint(A, C, M)\n\nfor i in range(n - 1):\n    print(s[i])\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nAC\\nMM\\nAC\\nAA\\nA\") == \"1 4\\nMM\\nA\\nAA\"\nassert solution(\"1\\nAM\\nMA\") == \"impossible\"\nassert solution(\"3\\nACM\\nACM\\nACA\\nAMA\") == \"impossible\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\nACMA\nACM\nACA\nAMA\n''') == 'impossible'\nassert solution('''1\nAM\nMA\n''') == 'impossible'\nassert solution('''2\nAC\nCA\n''') == '1 2'\nassert solution('''2\nAC\nAC\n''') == '1 1'\nassert solution('''3\nAC\nAC\nAC\n''') == '1 1'\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\\n\") == \"impossible\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == '124'\n\"\"\"\n\nfrom typing import List\n\nn, r, m = [int(x) for x in input().split(\" \")]\n\nTricks = []\nfor i in range(m):\n    t, p, d = [int(x) for x in input().split(\" \")]\n    Tricks.append([t, p, d])\n\nTricks.sort()"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 111 5\") == \"124\"\nassert solution(\"2 4 1\") == \"3\"\nassert solution(\"10 20 3\") == \"18.9029850746\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == '124'\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == '3'\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == '18.9029850746'\n\"\"\"\n\nimport re\nimport math"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2') == '124'\nassert solution('2 4 1\\n1 0.5 5\\n') == '3'\nassert solution('10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3') == '18.9029850746'\n\n----Test Case----\n2\n3 3 1\n1 0.5 0\n1 0.5 0\n1 0.5 0\n1 0.5 0\n\n\"\"\""
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n\n\"\"\"\n\nfrom math import inf\nfrom collections import deque"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n\") == \"2 1 2\\n\"\nassert solution(\"2 1\\n\") == \"1\\n\"\nassert solution(\"5 22\\n\") == \"4 3 4 2\\n\"\nassert solution(\"3 10\\n\") == \"2 2\\n\"\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n\") == \"2 1 2\"\nassert solution(\"2 1\\n\") == \"1\"\nassert solution(\"5 22\\n\") == \"4 3 4 2\"\n\"\"\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n') == '2 1 2\\n'\nassert solution('2 1\\n') == '1\\n'\nassert solution('5 22\\n') == '4 3 4 2\\n'\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\n\"\"\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n') == '2 1 2'\nassert solution('2 1\\n') == '1'\nassert solution('5 22\\n') == '4 3 4 2'\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 1 2\\nSample Input 1\\nSample Output 1\\nSample Input 2\\nSample Output 2\\nSample Input 3\\nSample Output 3\") == \"4 1 2\\n1\\n4 3 4 2\\n1\\n4 3 4 2\\n1\\n\"\nassert solution(\"5 22\\n4 3 4 2\\nSample Input 1\\nSample Output 1\\nSample Input 2\\nSample Output 2\\nSample Input 3\\nSample Output 3\") == \"4 1 2\\n1\\n4 3 4 2\\n1\\n4 3 4 2\\n1\\n\"\nassert solution(\"3 5\\n3 2 1\\nSample Input 1\\nSample Output 1\\nSample Input 2\\nSample Output 2\\nSample Input 3\\nSample Output 3\") == \"2 1 2\\n1\\n2 1 2\\n1\\n2 1 2\\n1\\n\"\nassert solution(\"3 5\\n2 3 1\\nSample Input 1\\nSample Output 1\\nSample Input 2\\nSample Output 2\\nSample Input 3\\nSample Output 3\") == \"2 1 2\\n1\\n2 1 2\\n1\\n2 1 2\\n1\\n\"\nassert solution(\"4 3\\n3 1 2\\nSample Input 1\\nSample Output 1\\nSample Input 2\\nSample Output 2\\nSample Input 3\\nSample Output 3\") == \"1\\n1\\n1\\n1\\n\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 1 2') == '2 1 2'\nassert solution('2 1\\n1') == '1'\nassert solution('5 22\\n4 3 4 2') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 3\\n') == '2 1 2'\nassert solution('2 1\\n') == '1'\nassert solution('5 22\\n') == '4 3 4 2'\nassert solution('3 2\\n') == '1 1 2'\n\n----"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n2 1 2') == '2 1 2'\nassert solution('2 1\\n1') == '1'\nassert solution('5 22\\n4 3 4 2') == '4 3 4 2'\n\"\"\"\n\nfrom itertools import permutations\nfrom math import ceil, log2\nfrom typing import Iterator, Tuple\n\nHATED = 5"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"2 1 2\"\nassert solution(\"2 1\\n1\") == \"1\"\nassert solution(\"5 22\\n4 3 4 2\") == \"4 3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n') == '2'\nassert solution('1\\n2\\n3\\n3\\n') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\\\n1 2\\\\n1 3\\\\n3 4\\\\n2 4\\\\n') == '2'\nassert solution('7 6\\\\n1 2\\\\n2 3\\\\n2 5\\\\n6 3\\\\n7 2\\\\n3 4\\\\n') == '2'\nassert solution('7 5\\\\n1 2\\\\n2 3\\\\n3 4\\\\n5 6\\\\n6 7\\\\n') == '0'\nassert solution('7 5\\\\n1 2\\\\n2 3\\\\n3 4\\\\n5 6\\\\n6 7\\\\n') == '0'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n3 4\\n2 4\\n') == '2'\n\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n') == '2'\n\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\n\n\n\nimport sys\nsys.stdin = open(\"input.txt\")\n\n\nN, M = [int(x) for x in input().split()]\nroads = [set() for _ in range(N + 1)]\nfor _ in range(M):\n    a, b = [int(x) for x in input().split()]\n    roads[a].add(b)\n    roads[b].add(a)\n\nres = 1\nfor road in roads:\n    if road:\n        res = max(res, len(road))\n\nprint(res)\n\n\n\nimport sys\nsys.stdin = open(\"input.txt\")\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\n\nassert solution('''\n7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '0'\n\nassert solution('''\n7 5\n1 2\n2 3\n3 4\n5 6\n6 7\n''') == '0'\n\nassert solution('''\n2 2\n1 2\n2 1\n''') == '1'\n\nassert solution('''\n4 4\n1 3\n2 4\n3 4\n2 3\n''') == '2'"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\"\nassert solution(\"1 2\\n2 3\") == \"1\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 2\\n2 3\\n3 4\") == '2'\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n\") == \"0\"\n\n\"\"\"\n\nimport math\nfrom collections import deque\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == 2\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == 2\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == 0\n\"\"\"\nimport math\nimport numpy as np\n\nn, m = map(int, stdin.readline().split())\n\nedges = np.zeros((n, n))\n\nfor i in range(m):\n    u, v = map(int, stdin.readline().split())\n    edges[u-1][v-1] = 1\n    edges[v-1][u-1] = 1"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 0\") == \"20.0\"\n\"\"\""
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.26445910\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n\n\nclass Minutiae:\n    def __init__(self, x: int, y: int, time: int):\n        self.x = x\n        self.y = y\n        self.time = time\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\n\"\"\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.0 1.0\") == \"3.14159265\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"20 0\"\n) == \"20.0\"\nassert solution(\n\"10 10\"\n) == \"3.14159265\"\nassert solution(\n\"0 20\"\n) == \"28.26445910\"\nassert solution(\n\"0 0\"\n) == \"0.0\"\n\"\"\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.00000000\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.26445910\"\n\n\"\"\"\n\nimport math\nimport sys\nimport numpy as np\nfrom math import hypot\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == '20.00000000'\nassert solution(\"-10 10\\n10.00 1.00\") == '3.14159265'\n\n\"\"\"\n\n\nimport math\nimport numpy as np\nfrom sys import stdin\nfrom functools import reduce"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.26445910\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\n\"\"\"\n\nimport math\n\nclass Flight:\n    def __init__(self, x, y, v, w):\n        self.x = x\n        self.y = y\n        self.v = v\n        self.w = w\n\n    def time(self, target):\n        # return math.ceil(math.sqrt((self.x - target[0])**2 + (self.y - target[1])**2) / self.v)\n        return math.ceil((((self.x - target[0]) ** 2 + (self.y - target[1]) ** 2) ** 0.5) / self.v)"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 100 120 50\") == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('100') == 100\n\n'''\n\nn = int(input())\nd = dict()\nm = 0\nfor i in range(n):\n    a,b = list(map(int,input().split()))\n    if a not in d:\n        d[a] = b\n    else:\n        d[a] += b\n    m = max(m,b)\nm += 1\ns = set()\n\nfor i in range(1,m+1):\n    for k in d:\n        if d[k] == i and k not in s:\n            s.add(k)\n\nfor i in sorted(s):\n    print(i,d[i])"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline().strip())\ndebt = []\nfor i in range(N):\n    A, B = map(int, sys.stdin.readline().strip().split())\n    debt.append((A, B))\ndebt = list(set(debt))\ndebt.sort()\n\namount = 0\nfor i in range(len(debt)):\n    A, B = debt[i][0], debt[i][1]\n    if B > amount:\n        amount = B\n    elif A > amount:\n        amount = amount + B\nprint(amount)\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3 120\\n2 80\\n3 50\\n2 80\") == \"150\"\n\"\"\"\n\nN = int(input())\n\ndebt_table = [list(map(int, input().split())) for _ in range(N)]\ndebt_table.sort(key=lambda x: x[0])\n\ntotal_debt = 0\ntable_len = len(debt_table)\nfor i in range(table_len):\n    debt = debt_table[i][1]\n    for j in range(i+1, table_len):\n        if debt_table[j][0] == debt_table[i][0]:\n            debt += debt_table[j][1]\n    total_debt += debt\nprint(total_debt)\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 100\\n1 100\\n4 70\\n3 70') == '170'\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\n\"\"\""
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3\\n2 120\\n3 50\\n2 80\") == \"150\"\n\nprint(\"Success!\")\n\n------END OF FILE------"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 100 2 3 100\") == \"170\"\nassert solution(\"3 120 2 80\") == \"150\"\n\"\"\""
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 100 2 1 100 4 70 3 70\") == \"170\"\nprint('The local tests are done.')"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == '2'\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n''') == '2'\nassert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n''') == '5'\nassert solution('''5 7\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 5\n4 6\n5 6\n''') == '6'\nassert solution('''9 12\n1 2\n1 3\n2 4\n2 5\n2 6\n3 7\n3 8\n3 9\n4 10\n4 11\n4 12\n5 7\n5 8\n5 9\n6 10\n6 11\n6 12\n7 8\n7 9\n8 10\n8 11\n8 12\n9 10\n9 11\n9 12\n10 11\n10 12\n11 12\n''') == '18'\nassert solution('''100 1\n1 2\n1 3\n2 4\n2 5\n2 6\n3 7\n3 8\n3 9\n4 10\n4 11\n4 12\n5 13\n5 14\n5 15\n6 16\n6 17\n6 18\n7 19\n7 20\n7 21\n8 22\n8 23\n8 24\n9 25\n9 26\n9 27\n10 28\n10 29\n10 30\n11 31\n11 32\n11 33\n12 34\n12 35\n12 36\n13 37\n13 38\n13 39\n14 40\n14 41\n14 42\n15 43\n15 44\n15 45\n16 46\n16 47\n16 48\n17 49\n17 50\n17 51\n18 52\n18 53\n18 54\n19 55\n19 56\n19 57\n20 58\n20 59\n20 60\n21 61\n21 62\n21 63\n22 64\n22 65\n22 66\n23 67\n23 68\n23 69\n24 70\n24 71\n24 72\n25 73\n25 74\n25 75\n26 76\n26 77\n26 78\n27 79\n27 80\n27 81\n28 82\n28 83\n28 84\n29 85\n29 86\n29 87\n30 88\n30 89\n30 90\n31 91\n31 92\n31 93\n32 94\n32 95\n32 96\n33 97\n33 98\n33 99\n34 100\n34 101\n34 102\n35 103\n35 104\n35 105\n36 106\n36 107\n36 108\n37 109\n37 110\n37 111\n38 112\n38 113\n38 114\n39 115\n39 116\n39 117\n40 118\n40 119\n40 120\n41 121\n41 122\n41 123\n42 124\n42 125\n42 126\n43 127\n43 128\n43 129\n44 130\n44 131\n44 132\n45 133\n45 134\n45 135\n46 136\n46 137\n46 138\n47 139\n47 140\n47 141\n48 142\n48 143\n48 144\n49 145\n49 146\n49 147\n50 148\n50 149\n50 150\n51 151\n51 152\n51 153\n52 154\n52 155\n52 156\n53 157\n53 158\n53 159\n54 160\n54 161\n54 162\n55 163\n55 164\n55 165\n56 166\n56 167\n56 168\n57 169\n57 170\n57 171\n58 172\n58 173\n58 174\n59 175\n59 176\n59 177\n60 178\n60 179\n60 180\n61 181\n61 182\n61 183\n62 184\n62 185\n62 186\n63 187\n63 188\n63 189\n64 190\n64 191\n64 192\n65 193\n65 194\n65 195\n66 196\n66 197\n66 198\n67 199\n67 200\n67 201\n68 202\n68 203\n68 204\n69 205\n69 206\n69 207\n70 208\n70 209\n70 210\n71 211\n71 212\n71 213\n72 214\n72 215\n72 216\n73 217\n73 218\n73 219\n74 220\n74 221\n74 222\n75 223\n75 224\n75 225\n76 226\n76 227\n76 228\n77 229\n77 230\n77 231\n78 232\n78 233\n78 234\n79 235\n79 236\n79 237\n80 238\n80 239\n80 240\n81 241\n81 242\n81 243\n82 244\n82 245\n82 246\n83 247\n83 248\n83 249\n84 250\n84 251\n84 252\n85 253\n85 254\n85 255\n86 256\n86 257\n86 258\n87 259\n87 260\n87 261\n88 262\n88 263\n88 264\n89 265\n89 266\n89 267\n90 268\n90 269\n90 270\n91 271\n91 272\n91 273\n92 274\n92 275\n92 276\n93 277\n93 278\n93 279\n94 280\n94 281\n94 282\n95 283\n95 284\n95 285\n96 286\n96 287\n96 288\n97 289\n97 290\n97 291\n98 292\n98 293\n98 294\n99 295\n99 296\n99 297\n100 298\n100 299\n100 300''') == '99'\n\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\nassert solution(\"1000 2\\n1 10\\n10 100\") == \"100\"\nassert solution(\"1000 3\\n1 10\\n10 100\\n100 1000\") == \"100\"\n\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\nimport typing\nimport math\nimport numpy as np\nimport re\nimport itertools"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == '2'\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == '5'\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == 5\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\n\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in input().split()]\n\nroads = [[int(x) for x in input().split()] for _ in range(m)]\n\nvisited = set()"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\nassert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n1 2') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('test_00.txt').read()) == \"2\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\") == \"0.0446429\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0') == '0.5'\n\"\"\""
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"0.0446429\"\n\"\"\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\n\nprint(solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0'), solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0'))\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == '0.5'\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == '0.0446429'\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"0.5\""
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2') == '0.0446429'\n\"\"\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\n\n\"\"\"\n\nimport sys\nimport math\nimport re\nfrom typing import List, Set, Dict\n\nDEBUG = False\ndata = sys.stdin.read().split('\\n')\n\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3\\n2 1 3') == 'IMPOSSIBLE'\nassert solution('1\\n2 1 2') == '2\\n1 5 1'\n\n----Solution----\n1. Input:\nn = int(stdin.readline())\ntape = [int(x) for x in stdin.readline().split()]\n\n2. Output:\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(sample_input_text) == expected_solution_text\nassert solution(open(os.path.join(TEST_DIRECTORY,'sample-input-1.txt')).read()) == \\\n    open(os.path.join(TEST_DIRECTORY,'sample-output-1.txt')).read()\n\n\"\"\"\n\nfrom typing import List\nimport os"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\nassert solution('7\\n2 2 4 2 4 2 2') == 'IMPOSSIBLE'\nassert solution('6\\n1 2 3 4 2 1') == '3\\n1 6 1'\nassert solution('5\\n1 2 3 2 1') == '3\\n1 5 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\\n2 5 2\\n3 4 3\"\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 2\\n\") == \"IMPOSSIBLE\"\nassert solution(\"4\\n1 2 1 2\\n3 4 3\\n\") == \"1 6 1\\n2 5 2\\n3 4 3\"\nassert solution(\"4\\n1 2 1 2\\n3 2 1 2\\n\") == \"3 4 3\\n1 6 1\\n2 5 2\"\nassert solution(\"3\\n1 2 3\\n\") == \"1 3 1\\n2 2 2\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"IMPOSSIBLE\"\n\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\nassert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\n\"\"\""
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n1 100\\n1 1\") == \"1 2 100\"\nassert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\") == \"10 20 28 27 30 40 50\"\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\") == \"1 2 100\"\nassert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\") == \"10 20 28 27 30 40 50\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\") == \"1 2 100\"\n\nassert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\") == \"10 20 28 27 30 40 50\"\n\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n5 10 20 30 40 50\") == '1 2 3 4 5 10 20 30 40 50'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2\n1 100\n1 1''') == '1 2 100'\nassert solution('''2\n5 10 20 30 40 50\n2 28 27''') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\\n\") == \"1 2 100\"\nassert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\"\n\"\"\"\n\nfrom collections import deque\nfrom math import inf\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5 10 20 30 40 50\") == \"10 20 28 27 30 40 50\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\n\nprint('Hooray!')\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 20 30 40 50\") == \"10 20 28 27 30 40 50\"\n\nassert solution(\"1 2\") == \"1 2\"\n\nassert solution(\"1 100\") == \"1 100\"\n\nassert solution(\"1 1\") == \"1 1\"\n\nassert solution(\"2 28 27\") == \"28 27 2 1\"\n\nprint(\"Success\")\n'''\n\n\nn = int(input())\ns = []\nfor i in range(n):\n    length = int(input())\n    values = list(map(int, input().split()))\n    s.append([length, values])\n\ns.sort(key=lambda x:x[0])\n\nlength = s[0][0]\nvalues = s[0][1]\n\nvalues.sort()\n\nfor i in range(length):\n    print(values[i], end=\" \")\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 2\n1 100\n1 1\"\"\") == \"1 2 100\"\nassert solution(\"\"\"3\n5 10 20 30 40 50\n2 28 27\"\"\") == \"10 20 28 27 30 40 50\"\n\n\"\"\"\nUne deuxi\u00e8me solution s'\u00e9crit comme suit:"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"3 2\") == \"5\"\n\ntry:\n    "
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0\\nAB 1 1\\nAC 2 1\\nBC 2 1\\nAB 2 2\\n') == '26'\n\"\"\"\n\nimport collections\nimport functools"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n0\\n') == '0'\nassert solution('\\n1\\n') == '1'\nassert solution('\\n1\\n0\\n') == '26'\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0\\nAA 1 1\\nBB 2 1\\nAB 2 1\\n') == '2600'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0') == '2600'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1') == '506'\n\nprint('Success')\n\n##########################################################################################################################################"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506'\n\"\"\"\n\nN = int(input())\nsolution_set = set()\nfor i in range(N):\n    solution = input().strip().split(\" \")\n    solution_set.add(solution[0])\n\nfor sol in solution_set:\n    print(sol)\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n\") == \"506\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\n\nassert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '506'\n\nassert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '506'\n\nassert solution('''0\nAB 1 1\nAC 1 1\nBC 2 1\n''') == '2600'\n\nassert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0\\nAB 1 1\\nAC 2 1\\nBC 2 1') == '506'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0\\nAB 1 1\") == \"2600\"\nassert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\n\n\"\"\"\n\nimport itertools\nfrom collections import Counter"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('()))') == 'impossible'\nassert solution(')))(') == 'impossible'\nassert solution('()))' ) == 'possible'\nassert solution('(()') == 'possible'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(')())') == 'possible'\nassert solution('()))') == 'impossible'\nassert solution(')))(') == 'possible'\nassert solution('()))()(') == 'possible'\nassert solution('()()()(') == 'possible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('()))') == \"possible\"\nassert solution(')))(') == \"impossible\"\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"()))(\") == \"possible\"\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\")()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\")))((\") == \"possible\"\nassert solution(\"(()))((\") == \"impossible\"\n\n-----Explanation-----\nThe second bracket in the input is (, so we could change the segment [3,4] to [3,3]. It's now valid.\nThe first bracket in the input is ), so we could change the segment [1,2] to [2,2]. It's now valid.\nThe third bracket is ), so we could change the segment [2,3] to [2,2] (and so on). It's now valid.\nThe second bracket in the input is ), so we cannot make the bracket sequence valid by inverting any segment.\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\")))(\") == \"impossible\"\nassert solution(\"(((\") == \"possible\"\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'impossible'\nassert solution('))(') == 'possible'\nassert solution('(())') == 'possible'\nassert solution('())(') == 'possible'\nassert solution('())') == 'possible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('()))') == 'impossible'\nassert solution('()()') == 'possible'\nassert solution('()()()') == 'possible'\nassert solution(')(())(') == 'impossible'\nassert solution('))((') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('()))') == 'impossible'\nassert solution('()))(') == 'possible'\nassert solution('((()))') == 'possible'\nassert solution('((()))()') == 'possible'\nassert solution('())') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\nassert solution(\"1 1\\n1 1\") == \"impossible\"\n\"\"\"\n\nimport time"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n-----Explanation-----\nFor the first input, the earliest train journey you could book, which is the one which is the shortest route between stations $1$ and $2$, is:\n\n1 -> 2 -> 3 -> 1\n\nIn order to book it, you would have to arrive before the end of the journey and depart after the start, but only after a delay of $1800$ seconds (and a further $1800$ seconds due to the scheduled departure delay). This will be in total $3 \\cdot 1800=5400$ seconds, or $30$ minutes, assuming that $1800$ seconds is equal to 30 minutes.\n\nIt is impossible to book a journey of that duration in the free market, so the answer is impossible.\n\nThe second input, however, is much more interesting. You can book any train journey you like, but it is impossible to earn a refund if you have to be able to reach your destination by a total of $30$ minutes (or $1800$ seconds).\n\n\"\"\"\n\nfrom typing import List\nfrom math import ceil\nfrom collections import defaultdict"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n\") == \"1800\\n\"\n\n\"\"\""
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\"\"\") == \"1800\"\nassert solution(\"\"\"2 2\n1 1800 3600 1800\n1 1900 3600 1600\"\"\") == \"impossible\"\n\n\"\"\"\nimport math\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n\") == \"1800\"\nassert solution(\"2 3\\n1 1800 3600 1800\\n1 1900 3600 1600\\n\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400') == '1800'\n\n\"\"\""
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2, 3, 1, 1800, 900, 1800) == 1800\nassert solution(2, 3, 1, 1800, 900, 1800)!= 1900\nassert solution(2, 2, 1, 1800, 3600, 1800) == impossible\nassert solution(2, 2, 1, 1800, 3600, 1800)!= 1800\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"A1-B1 A2-C2 B2-C1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == 'A1-C2 A3-B1 A2-B2 A4-C3 B3-C2 B1-C1 B4-A3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1 A3-B3'\nassert solution('1 1') == 'A1-A2'\n\"\"\"\n\nimport math\n\nstdin = input()\n\nn, m = list(map(int, stdin.split()))\n\nprint(*[f\"{'A'+str(i+1) if i<9 else 'B'+str(i+1)}\"+\"-\"+f\"{'A'+str(i+1) if i<9 else 'B'+str(i+1)}\" for i in range(n)], sep=\"\\n\")\nprint(*[f\"{'A'+str(i+1) if i<9 else 'B'+str(i+1)}\"+\"-\"+f\"{'A'+str(i+1) if i<9 else 'B'+str(i+1)}\" for i in range(n, n*m)], sep=\"\\n\")\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\n\"\"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"2 3\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\") == \"A1-B2 A2-C1 B1-C2\"\nassert solution(\"2 3\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\") == \"A1-C1 A2-B1 B2-C2\"\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------\nGiven an array of integers, replace every element with the greatest element among the elements to its right, and replace the last element with -1.\n\nAfter doing so, return the array.\n\nExample\n\nFor inputArray = [17, 18, 5, 4, 6, 1], the output should be\nreplaceElementsWithGreatestElementToRight(inputArray) = [-1, 18, 18, 18, 6, 6].\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer inputArray\n\nGuaranteed constraints:\n3 \u2264 inputArray.length \u2264 105,\n1 \u2264 inputArray[i] \u2264 109.\n\n[output] array.integer\n\nThe resulting array. Return -1 for the last element.\n\n[Python 3] Syntax Tips"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n\") == \"A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\n\"\nassert solution(\"2 3\\n\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n\"\n\nprint('Success')\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\n\nimport sys\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n') == 'A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\n'\nassert solution('2 3\\n') == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n'\nassert solution('2 3\\n') == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n'"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n\"\"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n\"\"\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '5'\nassert solution('1 2\\n3 2') == '6'\nassert solution('2 2\\n.') == '2'\nassert solution('2 2\\n..') == '6'\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX') == '9'\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\ndebug = False\ndata = sys.stdin.readlines()\nr, c = [int(n) for n in data[0].split()]\n\nmatrix = [list(line.strip()) for line in data[1:]]"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n..\\n..\\n\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX') == '9'\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('X') == 0\nassert solution('.') == 1\nassert solution('..') == 2\nassert solution('X.') == 0\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nassert solution('1 2') == '3'\nassert solution('3 2') == '4'\nassert solution('3 3') == '6'\nassert solution('3 3\\n.XX\\nXX.') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2\n..\n..\n''') == 7\nassert solution('''4 4\nX..\nX..\n..X\n..X\n''') == 9\n\nimport collections\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\n\"\"\""
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1 500\\n6 0 8 1 1\") == '100'\n\n\"\"\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\") == \"600\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1 500\") == \"100\"\nassert solution(\"2 0 2 1 100\") == \"100\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500') == '600'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\n\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List, NamedTuple\n\nclass TarotCard(NamedTuple):\n    r: int\n    c: int\n    a: int\n    b: int\n    price: int"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\") == \"600\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500''') == '600'\nassert solution('''2\n2 0 2 1 100\n6 0 8 1 1''') == '100'\n\"\"\"\n\n\nfrom heapq import heappop, heappush"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\") == \"600\"\n\"\"\"\n\n\nclass Tarot:\n    def __init__(self, r, c, a, b, price):\n        self.r = r\n        self.c = c\n        self.a = a\n        self.b = b\n        self.price = price\n\n    def __str__(self):\n        return f\"{self.r}, {self.c}, {self.a}, {self.b}, {self.price}\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('361') == 3\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('361') == 3\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\nassert solution(\"1110111\") == 3\nassert solution(\"111011\") == 0\nassert solution(\"111011011\") == 4\n\n\"\"\"\n\nfrom typing import Set\nimport functools\n\n\n@functools.lru_cache(maxsize=None)\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '0'\nassert solution('13') == '2'\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom collections import Counter\n\nsys.setrecursionlimit(100000)\n\nclass Node:\n    def __init__(self, char):\n        self.char = char\n        self.children = []\n        self.is_word = False\n        self.value = 0\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\n\nprint(solution(stdin))"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('361') == '3'\nassert solution('11') == '0'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('361') == 3\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('361') == '3'\nassert solution('11') == '0'\n\"\"\"\n\nimport collections\nimport functools\nimport itertools\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\n\nprint(solution(str(input())))"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('361') == '3'\nassert solution('11') == '0'\nprint('Success')\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 10) == 10\nassert solution(1, 3) == \"cancel road trip\"\n\"\"\"\n\nimport sys\nfrom functools import reduce\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n13 5\\n\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n11 5\\n\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == 10\n\"\"\"\nimport sys"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\nprint(\"test passed\")\n\n-----Solution-----\n\n-----\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == solution_1(test_input_1)\n\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n-----\n\"\"\"\nfrom typing import List, Tuple, Dict\n\n\nclass GasStation:\n    def __init__(self, dist: int, cost: int) -> None:\n        self.dist = dist\n        self.cost = cost\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'cancel road trip'\nassert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\nprint('Success')\n\n-----Problem-----\nDavid is playing a video game. In this game, there are N rooms, indexed 1 to N, arranged in a circle. \nYou are in room 1. There are also N portals, indexed 1 to N. Each portal connects a room to a portal with an index that is \ndifferent from the index of the room that it connects to.\n\nIn each move, David can walk to the room with a portal index i that is different from the portal index of the room that he is in currently. \nIn each move, David can walk to a room with index j if the j-th room is occupied and David can walk to a portal with index j if j is not occupied.\n\nDavid wants to reach the K-th room. There are N moves in total. Determine the minimum number of moves that David will need to reach the K-th room.\n\n-----Sample Input-----\n8\n1 5\n1 6\n2 7\n4 8\n2 6\n2 5\n5 1\n3 7\n6 1\n-----Sample Output-----\n4\n\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('./test_input.txt', 'r')) == '10'\n\"\"\"\n\nimport sys\n\nn, g = [int(x) for x in sys.stdin.readline().strip().split(' ')]\nfor i in range(n):\n    d, c = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    if g - d * c >= 0:\n        g -= d * c\n    else:\n        print('cancel road trip')\n        break\n\nprint(g)"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '''\n1 8 9 9 100 101 108 109 109\n'''\nprint(solution(stdin))\n\n----------------------------------------------------------------------\n\"\"\"\n    def solution(stdin):\n        jewels = {str(i): int(v) for i, v in enumerate(stdin.readline().strip().split(' '), 1)}\n        for size in range(2, int(stdin.readline()) + 1):\n            values = [0] * size\n            for j in range(size):\n                for i in range(1, len(jewels) + 1):\n                    if i in jewels:\n                        values[j] = max(values[j], values[j - 1] + jewels[i])\n            del jewels\n            jewels = {str(i): int(v) for i, v in enumerate(stdin.readline().strip().split(' '), 1)}\n            for i in range(len(jewels)):\n                values[-1] = max(values[-1], values[-2] + jewels[str(i)])\n            del jewels\n        return''.join(map(str, values))\n\n\n    assert solution('''\n    4 9\n    2 8\n    1 1\n    3 4\n    5 100\n    ''') == '''\n    1 8 9 9 100 101 108 109 109\n    '''\n    print(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == \"0 7 8 11 15 16 19\"\nprint(solution(input()))\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n2 3\\n2 5\\n2 8\\n2 9') == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == \"0 7 8 11 15 16 19\""
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 9\n2 8\n1 1\n3 4\n5 100''') == '1 8 9 9 100 101 108 109 109'\n\nprint(solution(stdin))"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == '1 8 9 9 100 101 108 109 109'\nassert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == '0 7 8 11 15 16 19'\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'\nprint('Passed!')\n\n\"\"\"\nimport sys\nimport numpy as np\nfrom typing import List\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == '0 7 8 11 15 16 19'\nprint(solution(input()))\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3') == 3\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"1 10 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"1 10 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"1 10 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import deque, defaultdict\nfrom enum import Enum\nfrom typing import Deque, Dict, List, NamedTuple, Set\n\n\nclass Direction(Enum):\n    UP = 0\n    LEFT = 1\n    DOWN = 2\n    RIGHT = 3\n\n\nclass Location(NamedTuple):\n    x: int\n    y: int\n\n\nclass Path(NamedTuple):\n    start: Location\n    end: Location\n    direction: Direction\n\n\nclass Graph:\n    def __init__(self, rows: int, cols: int):\n        self.graph: Dict[Location, Set[Location]] = defaultdict(set)\n        self.rows: int = rows\n        self.cols: int = cols\n        self.min_x: int = -rows\n        self.max_x: int = rows\n        self.min_y: int = -cols\n        self.max_y: int = cols\n\n    def add_edge(self, start: Location, end: Location, direction: Direction) -> None:\n        self.graph[start].add(Path(start, end, direction))\n        self.graph[end].add(Path(end, start, Direction.flip(direction)))\n\n    def get_path(self, start: Location, end: Location) -> Path:\n        queue: Deque[Location] = deque([start])\n        visited: Set[Location] = set()\n        while queue:\n            current = queue.popleft()\n            if current == end:\n                return current\n            visited.add(current)\n            for path in self.graph[current]:\n                if path.end not in visited:\n                    queue.append(path.end)\n\n    def find_path(self, start: Location, end: Location) -> Path:\n        \"\"\"\n        Try to find shortest path from start to end.\n        Breadth first search.\n        \"\"\"\n        queue: Deque[Location] = deque([start])\n        visited: Set[Location] = set()\n        while queue:\n            current = queue.popleft()\n            if current == end:\n                return current\n            visited.add(current)\n            for path in self.graph[current]:\n                if path.end not in visited:\n                    queue.append(path.end)\n\n    def is_valid_location(self, location: Location) -> bool:\n        return self.min_x <= location.x <= self.max_x and self.min_y <= location.y <= self.max_y\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0') == 1\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0') == 3\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"5\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"5\"\n\nprint('Success')"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10000\\n1\\n1\\n1\\n1\\n\") == \"4\\n4\\n2\\n2\\n0\\n\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\\n\") == \"2\\n0\\n0\\n2\\n0\\n0\\n\"\n\n---\n\nApproach:\n\nThe naive solution is trivial: we can calculate all the sums, and then search for the longest sequence with sum less than S. This solution is asymptotically O(2N) and can't be proved.\n\nOn the other hand, if we assume that the elements in the sequence are small integers, then the sum of all the elements is at most 2^S, so we can quickly calculate the sum of the first and the last K elements. Given this assumption, we can try to find the longest sequence of length K, where the sum of its first and last elements is less than S. We can try to extend this sequence by one more element, so long as the sum of the first and last K elements stays less than S.\n\n---\n\nConstraints:\n\n1 \u2264 N \u2264 100000\n1 \u2264 S \u2264 2 \u00b7 10^9\n1 \u2264 A[i] \u2264 10^9 for each valid i.\n\nO(N) time O(1) space"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2\\n0\\n0\\n2\\n0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2\\n0\\n0\\n2\\n0'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\""
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1\\n') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2\\n0\\n0\\n2\\n0'\nassert solution('5 1000000000\\n1\\n1\\n1\\n1\\n1\\n') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2\\n0\\n0\\n2\\n0'\n\n\"\"\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n10\\n1\\n9\\n') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 10000\n1\n1\n1\n1\n1''') == '''4\n4\n2\n2\n0\n'''\nassert solution('''5 9\n1\n1\n10\n1\n9''') == '''2\n0\n0\n2\n0\n'''\nassert solution('''5 10000\n1\n1\n1\n1\n1''') == '''4\n4\n2\n2\n0\n'''\n\nprint('Success')"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10000\\n1\\n1\\n1\\n1\\n') == '4\\n4\\n2\\n2\\n0'\nassert solution('4 9\\n1\\n1\\n10\\n1\\n9\\n') == '2\\n0\\n0\\n2\\n0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\ns, k = [int(x) for x in stdin.split()]\nl = [int(x) for x in stdin.split('\\n')[:-1]]\nans = [0] * len(l)\nfor i in range(len(l)):\n    l_sum = 0\n    for j in range(max(0, i - k), i + 1):\n        l_sum += l[j]\n    for j in range(i - k + 1, i + 1):\n        r_sum = 0\n        for r in range(i - k + 1, i + 1):\n            r_sum += l[r]\n        if l_sum < r_sum:\n            ans[i] = max(ans[i], i - j + 1)\n        elif r_sum < l_sum:\n            ans[i] = max(ans[i], i - j + 1)\nprint('\\n'.join(map(str, ans)))\n\n\"\"\"\nSolution 2\n\"\"\"\n\ns, k = [int(x) for x in stdin.split()]\nl = [int(x) for x in stdin.split('\\n')[:-1]]\nans = [0] * len(l)\nl_sum = 0\nfor i in range(len(l)):\n    if l_sum < 0:\n        l_sum = 0\n    l_sum += l[i]\n    if l_sum < k:\n        ans[i] = 0\n    else:\n        ans[i] = i + 1 - max(j for j in range(i - k + 1, i + 1) if l_sum >= k)\nprint('\\n'.join(map(str, ans)))"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"ak\") == \"DA\"\nassert solution(\"kav\") == \"DA\"\n\nprint(solution(\"ne\"))\nprint(solution(\"ak\"))\nprint(solution(\"kav\"))"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\nassert solution('mekava') == 'DA'\nassert solution('ekava') == 'DA'\nassert solution('aaaaa') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n\"\"\"\n\nn = int(input().strip())\ns = input().strip()"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n\n\"\"\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"ak\") == \"DA\"\nassert solution(\"n\") == \"n\"\nassert solution(\"kava\") == \"DA\"\n\n-----Problem-----\n\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'NE'\n\nassert solution('a') == 'DA'\nassert solution('aaaa') == 'DA'\nassert solution('aaaaa') == 'DA'\n\nassert solution('b') == 'NE'\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"ak\") == \"DA\"\nassert solution(\"kava\") == \"DA\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\nne\n''') == 'NE'\nassert solution('''4\nkava\n''') == 'DA'\nassert solution('''2\nne\n''') == 'NE'\nassert solution('''4\nnabek\n''') == 'Nabek'\nassert solution('''4\nabek\n''') == 'ABEK'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '0'\nassert solution('4\\n') == '0'\nassert solution('4 5 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n1 2 3 2\\n') == '2\\n0\\n2\\n1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2\\n0\\n2\\n1\\n\n\n\"\"\"\n\n\nfrom collections import defaultdict, deque\nfrom typing import Deque, List, Tuple\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\\n\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"0\\n0\\n3\\n2\\n\"\n\"\"\"\nimport sys\nimport math\nimport numpy as np\nfrom collections import Counter"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2\\n0\\n2\\n1\\n'\nassert solution('8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n') == '0\\n0\\n3\\n2\\n'\nassert solution('8 10 5\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n') == '0\\n0\\n3\\n2\\n'\nassert solution('8 10 5\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n') == '0\\n0\\n3\\n2\\n'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\\n\"\n\"\"\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1\\n'\n\n'''\n5 1 5\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\nSample Output 2:\n2\n'''\nassert solution('''5 1 5\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n''') == '2\\n'\n\nassert solution('''5 1 5\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n''') == '2\\n'\n\nassert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2\\n0\\n2\\n1\\n'\n\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '0\\n0\\n3\\n2\\n'"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n1 1 6\\n1 1 8\\n4 9\") == \"2\\n0\\n2\\n1\"\n\n\"\"\"\n\nimport collections\nimport functools\nimport math\nimport sys\n\nsys.setrecursionlimit(1000000)\nMOD = 998244353\nDEBUG = True\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2\\n0\\n2\\n1\\n'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2\\n0\\n2\\n1\\n'\nassert solution('8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n') == '0\\n0\\n3\\n2\\n'\n\"\"\""
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3') == '2'\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom heapq import heappop, heappush"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('1') == '1'\nassert solution('ab') == ''\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\\n\") == \"2\"\n\"\"\"\n\nimport math\nimport typing"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\\n') == 2\nassert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n') == 1\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport itertools\nfrom typing import NamedTuple, List, Set, Union, Iterator\n\nimport numpy as np\n\nNumber = Union[int, float]\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n\") == \"1\"\n\"\"\"\nimport sys\n\n\"\"\"\nThis solution is based on the observation that the optimal solution is\nbased on a greedy approach. A greedy approach to the problem is to look\nat each flight and decide which should be the first one that can be\nscheduled. Then repeat this process until all flights have been examined.\nHowever, this method can be brought to an optimal solution by taking into\naccount the fact that each flight can be scheduled only once.\n\nLet f(s, t) be the sum of the flight time from s to t. Let g(s, t) be the\nsum of the flight time from s to t, excluding flights from t to s.\n\nTo see the sum of the flight time from s to t, consider the following\nexamples:\n\n    f(1, 1) = 2, g(1, 1) = 1\n\n    f(1, 2) = 2, g(1, 2) = 2\n\n    f(2, 1) = 3, g(2, 1) = 3\n\n    f(2, 2) = 3, g(2, 2) = 3\n\n    f(1, 3) = 3, g(1, 3) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 3) = 3, g(3, 3) = 1\n\n    f(2, 3) = 4, g(2, 3) = 3\n\n    f(3, 2) = 4, g(3, 2) = 2\n\n    f(3, 3) = 4, g(3, 3) = 1\n\nThe flights are scheduled in the order: (2, 1) (2, 2) (3, 1) (3, 3) (3, 2).\nThe values of f(s, t) and g(s, t) are shown above.\n\nSo, we can see that g(s, t) is the sum of flight time from s to t, excluding\nthose flights that start at t and arrive at s. We can repeat this procedure\nto find the optimal schedule of flights. For example, starting with (2, 1),\nthe next flight to be scheduled is (2, 2), so the schedule becomes\n(2, 1) (2, 2) (3, 1). The values of f(s, t) and g(s, t) are shown below:\n\n    f(2, 1) = 2, g(2, 1) = 2\n\n    f(2, 2) = 3, g(2, 2) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 2) = 4, g(3, 2) = 1\n\nThe values of f(s, t) and g(s, t) are shown below:\n\n    f(2, 1) = 2, g(2, 1) = 2\n\n    f(2, 2) = 3, g(2, 2) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 2) = 4, g(3, 2) = 1\n\nThe values of f(s, t) and g(s, t) are shown below:\n\n    f(2, 1) = 2, g(2, 1) = 2\n\n    f(2, 2) = 3, g(2, 2) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 2) = 4, g(3, 2) = 1\n\nThe values of f(s, t) and g(s, t) are shown below:\n\n    f(2, 1) = 2, g(2, 1) = 2\n\n    f(2, 2) = 3, g(2, 2) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 2) = 4, g(3, 2) = 1\n\nThe values of f(s, t) and g(s, t) are shown below:\n\n    f(2, 1) = 2, g(2, 1) = 2\n\n    f(2, 2) = 3, g(2, 2) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 2) = 4, g(3, 2) = 1\n\nThe values of f(s, t) and g(s, t) are shown below:\n\n    f(2, 1) = 2, g(2, 1) = 2\n\n    f(2, 2) = 3, g(2, 2) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 2) = 4, g(3, 2) = 1\n\nThe values of f(s, t) and g(s, t) are shown below:\n\n    f(2, 1) = 2, g(2, 1) = 2\n\n    f(2, 2) = 3, g(2, 2) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 2) = 4, g(3, 2) = 1\n\nThe values of f(s, t) and g(s, t) are shown below:\n\n    f(2, 1) = 2, g(2, 1) = 2\n\n    f(2, 2) = 3, g(2, 2) = 2\n\n    f(3, 1) = 3, g(3, 1) = 2\n\n    f(3, 2) = 4, g(3, 2) = 1\n\nFrom this we can see that g(s, t) is the sum of the flight time from s to t\nin the order (2, 1) (2, 2) (3, 1) (3, 3) (3, 2).\n\nGiven a flight schedule of the form (s, t, f, g), the optimal schedule has the\nfollowing form:\n\n    (s, t, f, g)\n\nThe sum of f and g is the minimum sum that must be paid for the flights.\nThus, the objective function is:\n\n    min f + g\n\nTo maximize this objective function, we should choose the flights that start\nat s"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(example1) == 2\n\"\"\""
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3') == '2'\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"40.500000000\"\nassert solution(\"3 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"49.000000000\"\n\n\"\"\"\n\nimport math\n\nweight = int(stdin.readline().strip())\ndishes = [line.strip().split(\" \") for line in stdin]\n\ntastiness = 0\nprevious_tastiness = 0\n\nfor dish in dishes:\n    dish_type = dish[0]\n    if dish_type == \"D\":\n        weight_of_dish = int(dish[1])\n        initial_tastiness = int(dish[2])\n        decay_of_tastiness = int(dish[3])\n        tastiness += (weight_of_dish * initial_tastiness) - ((weight_of_dish - 1) * decay_of_tastiness)\n    elif dish_type == \"C\":\n        initial_tastiness = int(dish[1])\n        decay_of_tastiness = int(dish[2])\n        for i in range(weight):\n            tastiness += initial_tastiness - (i * decay_of_tastiness)\n    else:\n        raise Exception(\"Unknown dish type: {}\".format(dish_type))\n\nprint(math.floor(tastiness))"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"40.500000000\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 15\nD 4 10 1\nC 6 1\nC 9 3\"\"\") == \"49.0\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"2 15\nD 4 10 1\nC 6 1\nC 9 3\"\"\") == \"49.0\"\n\"\"\"\n\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\\n\") == \"40.5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\") == \"40.5\"\n\nassert solution(\"3 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"49.0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == '49.000000000'\n\nassert solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == 'impossible'\n\nassert solution('''2 15\nC 6 1\nD 4 10 1\nD 4 10 1''') == '40.500000000'\n\nassert solution('''2 15\nC 6 1\nD 4 10 1\nD 4 10 1''') == 'impossible'\n\nassert solution('''3 15\nC 6 1\nC 9 3\nD 4 10 1\nD 4 10 1\n''') == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\") == \"6.99999998\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n6\") == \"28.75\"\n\"\"\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 15\\n4 10 1\\n6 1\") == '40.500000000'\nassert solution(\"3 15\\n4 10 1\\n6 1\\n9 3\") == '49.000000000'\n\"\"\"\n\nd, w = map(int, stdin.readline().split())"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\") == \"40.500000000\"\n\"\"\"\n\nimport math\nimport sys\nimport numpy as np"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nSample Input 2:') == 'fail'\nassert solution('1\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\nassert solution('1\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nSample Input 2:') == 'fail'\nassert solution('1\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nSample Input 2:') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\nassert solution('9\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\nassert solution('9\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nn 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\nassert solution('9\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nn 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nk 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nl 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nl 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\n\\nb 1 6\\nc 2 1 5\\nd 1 9\\n\\ne 1 4\\nf 1 2\\n\\ng 2 6 8\\nh 0\\nj 1 7\\n\") == \"fail\"\nassert solution(\"10\\n\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\n\\ne 1 4\\nf 1 2\\n\\ng 2 6 8\\nh 0\\nj 1 7\\n\") == \"fail\"\n\n'''\n\nimport itertools as it"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\na\\n2\\n10\\n3\\n\\nb\\n1\\n6\\n\\nc\\n2\\n1\\n5\\n\\nd\\n1\\n9\\n\\ne\\n1\\n4\\n\\nf\\n1\\n2\\n\\ng\\n2\\n6\\n8\\n\\nh\\n0\\n\\ni\\n1\\n3\\n\\nj\\n1\\n7\") == \"5\\n4\\n9\\n3\\n1\\n10\\n7\\n6\\n2\"\nassert solution(\"10\\na\\n2\\n10\\n3\\n\\nb\\n1\\n6\\n\\nc\\n2\\n1\\n5\\n\\nd\\n1\\n9\\n\\ne\\n1\\n4\\n\\nf\\n1\\n2\\n\\ng\\n2\\n6\\n8\\n\\nh\\n0\\n\\ni\\n1\\n3\\n\\nj\\n1\\n7\") == \"fail\"\n\n'''"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'fail'\nassert solution('5\\na 1 2 3 4 5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == [1, 2, 1, 3, 1, 4, 1, 5, 1]\nassert solution('9\\na 1 2 3 4 5 6 7 8 9\\n1 2 3\\n2 3\\n1 4 5\\n5 6 7\\n3 7 8 9\\n4 8 9\\n8 9\\n') == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n-----Problem-----\nYou are planning the creation of a new programming language. The language is not only restricted to arithmetic operations (including fractions, if you are interested in them) but also supports additional functions. For this reason, you have decided to start the implementation of a new class, named Expression.\n\nThis class has two important features:\n\n    It has a constructor, which takes as an input an arbitrary number of arguments of type Expression. If the number of arguments is greater than zero, the first one is considered to be the result, and the remaining ones are considered to be arguments. Otherwise, the first argument is taken to be the result and there are no arguments.\n    If there are arguments, each one of them is multiplied by the result (i.e. we apply the multiplication operator).\n\nThe class also has a method named eval, which takes as an input an arbitrary number of arguments of type Expression. If the number of arguments is greater than zero, the first one is considered to be the result, and the remaining ones are considered to be arguments. Otherwise, the first argument is taken to be the result and there are no arguments.\n\nIf there are arguments, each one of them is added to the result.\n\nFor example, we can create an Expression object by writing anExpression = Expression(1, 2, 3). Then, we can invoke anExpression.eval(3, 4, 5) and get the output 6.\n\n-----Task-----\nGiven an arbitrary number of expressions, your task is to implement an Expression object which performs addition, subtraction, multiplication, division and modulo of expressions in the following manner:\n\nIf there are any addition operations, the result is the sum of the operands.\nIf there are any subtraction operations, the result is the difference of the operands.\nIf there are any multiplication operations, the result is the product of the operands.\nIf there are any division operations, the result is the quotient of the operands.\nIf there are any modulo operations, the result is the remainder of the division of the first operand by the second.\n\n-----Sample Input-----\na, b, c\nd\na + b + c\nd + a + b + c\na * b * c\nd / a / b / c\na % b % c\nd % a % b % c\n-----Sample Output-----\na + b + c + d\na + b + c + d\na * b * c * d\na + b + c + d\na * b * c * d\na % b % c % d\na + b + c + d\na * b * c * d\n\n-----Solution-----"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 1 6\\nb 2 10 3\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\n\n\"\"\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\n\n\"\"\"\n\nimport sys\nimport itertools\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, input_string: str):\n        self.n = int(input_string[0])\n        self.artist_set = set()\n        self.album_artist_map = {}\n        self.album_count_map = {}\n        self.album_song_map = {}\n\n        for line in input_string[1:]:\n            artist, album_count, song_list = line.split()\n            self.artist_set.add(artist)\n            self.album_count_map[artist] = int(album_count)\n            self.album_artist_map[artist] = set()\n            for song in song_list.split(' '):\n                self.album_artist_map[artist].add(song)\n                self.album_song_map[song] = artist\n                if song not in self.album_count_map:\n                    self.album_count_map[song] = 0\n                self.album_count_map[song] += 1\n\n    def get_top_songs(self, n):\n        \"\"\"\n        Given a number of top songs,\n        return a list of the top songs.\n        \"\"\"\n        sorted_song_list = sorted(self.album_count_map.items(), key=lambda x: x[1])\n        if len(sorted_song_list) < n:\n            return [song for artist, song in sorted_song_list]\n        else:\n            return [song for artist, song in sorted_song_list[-n:]]\n\n    def get_common_albums(self, song_list: List[str]) -> List[str]:\n        \"\"\"\n        Given a list of songs,\n        return the list of album names that the songs are featured in.\n        \"\"\"\n        album_list = set()\n        for song in song_list:\n            album_list |= self.album_artist_map[self.album_song_map[song]]\n        return list(album_list)\n\n    def get_song_list(self, common_album_list: List[str]) -> List[str]:\n        \"\"\"\n        Given a list of album names,\n        return the list of songs (with albums) that are in the albums.\n        \"\"\"\n        song_list = []\n        for album in common_album_list:\n            song_list.extend(list(self.album_artist_map[album]))\n        return song_list\n\n    def get_common_album_song_list(self, common_album_list: List[str]) -> List[str]:\n        \"\"\"\n        Given a list of album names,\n        return the list of songs (with albums) that are in the albums.\n        \"\"\"\n        return [song for album in common_album_list for song in self.album_artist_map[album]]\n\n    def get_song_order(self, common_album_list: List[str]) -> List[str]:\n        \"\"\"\n        Given a list of album names,\n        return the list of songs (with albums) that are in the albums,\n        in the order in which they should be played.\n        \"\"\"\n        common_album_song_list = self.get_common_album_song_list(common_album_list)\n        common_album_song_list.sort()\n        return common_album_song_list\n\n    def get_sorted_album_list(self, common_album_list: List[str]) -> List[str]:\n        \"\"\"\n        Given a list of album names,\n        return the list of albums in the order of increasing number of songs.\n        \"\"\"\n        return sorted(common_album_list, key=lambda album: len(self.album_artist_map[album]))\n\n    def get_song_count(self, common_album_list: List[str]) -> int:\n        \"\"\"\n        Given a list of album names,\n        return the number of songs in the list.\n        \"\"\"\n        return sum(self.album_count_map[album] for album in common_album_list)\n\n    def get_song_count_list(self, common_album_list: List[str]) -> List[int]:\n        \"\"\"\n        Given a list of album names,\n        return the number of songs in the list.\n        \"\"\"\n        return [self.album_count_map[album] for album in common_album_list]\n\n    def solution(self):\n        top_songs = self.get_top_songs(9)\n        common_albums = self.get_common_albums(top_songs)\n        song_list = self.get_song_list(common_albums)\n        common_album_list = self.get_common_albums(top_s"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\n\nprint(solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\"))"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00:00\") == \"0:0\"\nassert solution(\"01:01\") == \"0:0\"\nassert solution(\"02:02\") == \"0:0\"\n\nassert solution(\"00:08\") == \"0:9\"\nassert solution(\"00:09\") == \"0:0\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00:00\") == 3\n\"\"\""
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00:00') == '0:0'\nassert solution('01:01') == '0:1'\nassert solution('00:08') == '9:0'\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00:00\\n01:01') == '3\\n00:00\\n01:01\\n01:00'\nassert solution('00:08\\n00:00') == '3\\n00:08\\n00:09\\n00:00'\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00:08') == '3'\nassert solution('00:00') == '3'\nassert solution('00:08') == '3'\nassert solution('00:08') == '3'\nassert solution('01:01') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00:00\") == \"0:0\"\nassert solution(\"01:01\") == \"1:1\"\nassert solution(\"01:01\") == \"2:0\"\nassert solution(\"02:08\") == \"2:9\"\nassert solution(\"02:08\") == \"2:9\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00:08\") == \"00:09\"\nassert solution(\"00:00\") == \"00:01\"\n\"\"\""
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00:00\") == \"0:0\"\nassert solution(\"12:01\") == \"12:01\"\nassert solution(\"23:59\") == \"23:59\"\nassert solution(\"01:01\") == \"1:01\"\nassert solution(\"23:59\") == \"23:59\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''00:00\n01:01\n''') == '''3\n00:00\n01:00\n01:01\n'''\nassert solution('''00:08\n00:00\n''') == '''3\n00:08\n00:09\n00:00\n'''"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(()()))\") == \"4,4:4,4:4:4,4:4,4,4:4:4,4:4,8:8:\", 'error 1'\nassert solution(\"(()())\") == \"4,4:4,4:4:4,4:4,4,4:4:4,4:4,8:8:8,8:\", 'error 2'\nassert solution(\"(()())()\") == \"4,4:4,4:4:4,4:4,4,4:4:4,4:4,8:8:8,8:8,8:8,8:\", 'error 3'\nassert solution(\"(())()()()()()()()()()()()()()()()()()()())\") == \"4,4:4,4:4:4,4:4,4,4:4:4,4:4,8:8:8,8:8,8:8,8:8,8:8,8:8:8,8:8:8,8:8,8:8:8,8:8,8:8:8:8,8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()\") == \"4,4:\", \"Test 1 is failed\"\nassert solution(\"(())\") == \"4,8:8,8:\", \"Test 2 is failed\"\nassert solution(\"(((())\") == \"4,6:6,6:\", \"Test 3 is failed\"\nassert solution(\"(()))(\") == \"4,6:6,6:6,6:\", \"Test 4 is failed\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Tuple"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"((()))\") == \"4,4:4,4:4,4:4,4,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '(()()(()))'\n) == '4,4:4,8:8,8:4,8:4,8:8,8:8,8:8'\n\nassert solution(\n    '(()()(()()))'\n) == '4,4:4,8:8,8:4,8:4,8:8,8:8,8:8,8:8,8:8'\n\nassert solution(\n    '()()'\n) == '4,4:4,8:8,8:4,8:4,8:8,8:8'\n\nassert solution(\n    '(())()'\n) == '4,4:4,8:8,8:4,8:4,8:8,8:8'\n\nassert solution(\n    '()(())'\n) == '4,4:4,8:8,8:4,8:4,8:8,8:8'"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()\") == \"4,4:\", solution(\"()\")\nassert solution(\"(())\") == \"4,5,5:4,5:\", solution(\"(())\")\nassert solution(\"((()))\") == \"4,5,5:4,5:4,5:\", solution(\"((()))\")\nassert solution(\"(()(()))\") == \"4,5,5:4,5:4,5:4,5:4,5:\", solution(\"(()(()))\")\nassert solution(\"(()()(()()))\") == \"4,5,5:4,5:4,5:4,5:4,5:4,5:4,5:4,5:4,5:\", solution(\"(()()(()()))\")\n\n\"\"\"\n\nfrom typing import Tuple\nfrom collections import Counter\n\n\nclass Stack:\n    def __init__(self):\n        self._stack = []\n\n    def push(self, item):\n        self._stack.append(item)\n\n    def pop(self):\n        return self._stack.pop()\n\n    def peek(self):\n        return self._stack[-1]\n\n    def is_empty(self):\n        return len(self._stack) == 0\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('(())') == '4,8:8,8:', 'incorrect solution: (()'\nassert solution('())') == '4,8:8,8:', 'incorrect solution: (()'\nassert solution('()') == '4,4:', 'incorrect solution: (()'\n\nSample Input 1:\n(())\nSample Output 1:\n4,8:8,8:\nSample Input 2:\n()\nSample Output 2:\n4,4:\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\")(\") == \"4,4:\", \"Check your solution\"\nassert solution(\"(()\") == \"4,8:8,8:\", \"Check your solution\"\nassert solution(\"(())\") == \"4,4:4,8:8,8:\", \"Check your solution\"\nassert solution(\"(()))(()\") == \"4,4:4,8:8,8:8,8:\", \"Check your solution\"\nprint(\"Check your solution\")\n\n-----Hint-----\nIn order for the code to be correct, there will have to be two unique ways to represent the string in the new notation. You may use the language you would like, as long as the code is correct.\n\n-----BONUS-----\nThe string $s$ is guaranteed to be balanced. So, the number of left and right parentheses is the same.\n\nCan you use the alternate notation to determine the minimum number of brackets needed to represent this string?\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", f\"Expected `4,8:8,8:` but received `{solution('(())')}`\"\nassert solution(\"()\") == \"4,4:\", f\"Expected `4,4:` but received `{solution('()')}`\"\n\"\"\"\n\nimport re\nfrom typing import List\n\nclass Solution:\n    def new_notation(self, stdin: str) -> str:\n        if not stdin:\n            return \"\"\n\n        stdin = stdin.replace(\"()\", \"1,1:1,1:\")\n        stdin = stdin.replace(\"(\", \"1,\")\n        stdin = stdin.replace(\")\", \"1:\")\n        stdin = stdin.replace(\"[\", \"2,\")\n        stdin = stdin.replace(\"]\", \"2:\")\n        stdin = stdin.replace(\"{\", \"3,\")\n        stdin = stdin.replace(\"}\", \"3:\")\n\n        return stdin\n\n    def get_numbers(self, stdin: str) -> List[int]:\n        result = []\n        for m in re.finditer(r\"\\d+\", stdin):\n            result.append(int(m.group()))\n        return result\n\n    def get_bracket_notation(self, stdin: str) -> List[int]:\n        result = []\n        for m in re.finditer(r\"(\\d+),(\\d+):(\\d+),(\\d+)\", stdin):\n            result.append([int(m.group(1)), int(m.group(2))])\n        return result\n\n    def solution(self, stdin: str) -> str:\n        stdin = self.new_notation(stdin)\n        numbers = self.get_numbers(stdin)\n        bracket_notation = self.get_bracket_notation(stdin)\n\n        length = len(numbers)\n        brackets = {}\n        for i in range(length):\n            brackets[i] = bracket_notation[i]\n            brackets[bracket_notation[i][1]] = bracket_notation[i]\n\n        min_length = 2 ** 20\n        for i in range(length):\n            count = 0\n            for j in range(length):\n                if i == j:\n                    continue\n                if (bracket_notation[i][0] < bracket_notation[j][0] and bracket_notation[i][1] > bracket_notation[j][1]):\n                    count += 1\n            if count < min_length:\n                min_length = count\n\n        return \",\".join(str(num) for num in numbers[min_length:length])"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", \"Should be 4,8:8,8:\"\nassert solution(\"(()\") == \"4,8:8,8:\", \"Should be 4,8:8,8:\"\nassert solution(\"(()())\") == \"4,8:8,8:4,8:8,8:8:\", \"Should be 4,8:8,8:4,8:8,8:\"\nassert solution(\"(()()\") == \"4,8:8,8:4,8:8,8:8:\", \"Should be 4,8:8,8:4,8:8,8:\"\nassert solution(\"()()())\") == \"4,8:8,8:4,8:8,8:8:4,8:8,8:8:\", \"Should be 4,8:8,8:4,8:8,8:8:4,8:8,8:\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", 'Expected: 4,8:8,8:'\nassert solution(\"()\") == \"4,4:\", 'Expected: 4,4:'\nassert solution(\"(()(()))\") == \"4,8:8,8:\", 'Expected: 4,8:8,8:'\nassert solution(\"(((()(()))(((())())))(())())\") == \"4,12:12,12:12,12:12,12,12:12,12,12,12,12,12,12,12,12:12,12,12,12,12,12,12,12,12,12,12,12,12:12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12:12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12:12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12:12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12:12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12:12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\n\"\"\"\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Number:\n    num: int\n    num2: int"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\nprint(solution(\"1 1\\n26 02 03 03 2\"))"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 1\n26 02 03 03 1''') == '5'\nassert solution('''1 1\n26 02 03 03 2''') == '185'\n'''\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\n\"\"\"\n\nfrom collections import defaultdict\nfrom datetime import datetime, timedelta\nfrom typing import Callable\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\nassert solution('1 1\\n26 02 03 03 2') == '185'\nassert solution('1 1\\n26 02 03 03 3') == '-1'\nassert solution('1 1\\n26 02 03 03 4') == '-1'\nassert solution('1 1\\n26 02 03 04 5') == '-1'"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n3 4 1 2') == '2 3 4 1'\nassert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n\n\"\"\"\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n3 4 1 2') == '2 3 4 1'\nassert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n\"\"\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"Impossible\""
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\"\"\"\n\n\nimport sys\nimport functools\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n\nassert solution('7 10\\n5 3 1 2 4 6 7') == 'Impossible'\n\nassert solution('1 1\\n2') == 'Impossible'\n\nassert solution('1 10\\n1') == '1'"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n3 4 1 2') == '2 3 4 1'\n\"\"\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nfor i in range(n):\n    a[i] = [a[i], i + 1]\na.sort()"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\"\"\""
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n3 4 1 2') == '2 3 4 1'\nassert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n\"\"\"\n\nn, k = [int(x) for x in input().split(' ')]\na = [int(x) for x in input().split(' ')]"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1374 2') == '7413'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\nassert solution('9 10') == '90'\n\n\"\"\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\nprint('Success')\n'''\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\"\n\nfrom math import log10\n\nn, k = [int(_) for _ in input().split()]"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\n\"\"\"\n\nn, k = input().split()\nk = int(k)\n\nfor i in range(k):\n    print(str(int(n[:1] + n[2:])), end='')\n    n = n[1:] + n[:1]\nprint()\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    1374 2\n    \"\"\"\n) == \"7413\"\nassert solution(\n    \"\"\"\n    210 1\n    \"\"\"\n) == \"201\"\n\n\"\"\"\nMake the given number larger by swapping pairs of its digits.\n\nInput\nThe input has two lines. The first one is a positive integer $n$ ($1 \\leq n \\leq 10^{18}$) and the second line contains an integer $k$ ($1 \\leq k \\leq 10^{18}$).\n\nOutput\nWrite the largest number you can get after swapping pairs of its digits $k$ times.\n\nExample\nInput\n\n1374 2\nOutput\n\n7413\n\"\"\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\n\nn = str(n)\ncount = 0\nwhile k > 0:\n    max_index = 0\n    max_value = 0\n    for i in range(len(n) - 1):\n        if int(n[i]) > int(n[i + 1]):\n            max_index = i\n            max_value = int(n[i])\n            break\n    if max_index == 0:\n        break\n    n = n[:max_index] + str(max_value) + n[max_index + 1:]\n    count += 1\n    if n[0] == '0':\n        n = n[1:]\n\nprint(int(n))\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\"\n\nn, k = map(int, stdin.split(' '))\n\nn = str(n)\n\nout = []\n\nwhile len(n) > 1:\n    if k == 0:\n        out.append(n[0])\n        n = n[1:]\n    else:\n        a, b = n[:2]\n        n = n[2:]\n        n = a + b + n\n        k -= 1\n\nout.append(n)\n\nprint(int(''.join(out)))\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.666666666666667\"\n\"\"\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n0 0\n0 1\n1 1\n1 0''') == '0.666666666666667'\nassert solution('''3\n0 0\n1 1\n2 0''') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\") == \"0.733333333333333\"\nprint(\"You are correct!\")\n\n------ problem ------\n\n\u03a3\u03c5\u03bd\u03ac\u03c1\u03c4\u03b7\u03c3\u03b7 \u0395\u03c1\u03ce\u03c4\u03b7\u03c3\u03b7 1.\n\u03a3\u03c4\u03bf \u03b5\u03c0\u03af\u03c0\u03b5\u03b4\u03bf \u03c4\u03b7\u03c2 \u0395\u03be\u03ac\u03bc\u03b7\u03bd\u03b7\u03c2 \u03c0\u03bf\u03c5 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af \u03c4\u03bf \u03c0\u03b1\u03c1\u03b1\u03ba\u03ac\u03c4\u03c9 \u03c0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u03ba\u03b1\u03b9 \u03b3\u03b9\u03b1 \u03ba\u03ac\u03b8\u03b5 \u03b4\u03cd\u03bf \u03b4\u03cd\u03bf \u03b1\u03c1\u03b9\u03b8\u03bc\u03bf\u03cd\u03c2 x,y \u03bf\u03c0\u03bf\u03c5 x<y \u03ba\u03b1\u03b9 \u03c4\u03bf \u03bb\u03bf\u03b3\u03cc\u03c4\u03b5\u03c1\u03bf \u03b5\u03af\u03bd\u03b1\u03b9 x, \u03bf\u03c0\u03bf\u03c5 x>y. \u0397 \u03a3\u03c5\u03bd\u03ac\u03c1\u03c4\u03b7\u03c3\u03b7 \u03b4\u03af\u03bd\u03b5\u03b9 \u03c3\u03c5\u03bd\u03bf\u03bb\u03b9\u03ba\u03ad\u03c2 \u03c0\u03b5\u03c1\u03b9\u03c3\u03c3\u03cc\u03c4\u03b5\u03c1\u03b5\u03c2 \u03b1\u03c0\u03cc \u03c4\u03b1 \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1 \u03b5\u03bd\u03cc\u03c2 \u03c0\u03c1\u03ce\u03c4\u03bf\u03c5 \u03c0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03b5\u03b9 \u03c0\u03c1\u03cc\u03c4\u03b5\u03c1\u03b7 \u03bb\u03b1\u03bc\u03b2\u03ac\u03bd\u03bf\u03c5\u03c3\u03b1 \u03b5\u03c0\u03b9\u03c6\u03ac\u03bd\u03b5\u03b9\u03b1 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03b5\u03af \u03bc\u03b5 \u03ad\u03bd\u03b1 \u03cc\u03bd\u03bf\u03bc\u03b1.\n\u03a3\u03c5\u03bd\u03ac\u03c1\u03c4\u03b7\u03c3\u03b7 \u0395\u03c1\u03ce\u03c4\u03b7\u03c3\u03b7 2.\n\u03a3\u03c4\u03bf \u03b5\u03c0\u03af\u03c0\u03b5\u03b4\u03bf \u03c4\u03b7\u03c2 \u0395\u03be\u03ac\u03bc\u03b7\u03bd\u03b7\u03c2 \u03c0\u03bf\u03c5 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af \u03c4\u03bf \u03c0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u03c0\u03bf\u03c5 \u03c0\u03b1\u03c1\u03b1\u03bc\u03ad\u03c4\u03c1\u03b7\u03c3\u03b5 \u03b1\u03c0\u03cc \u03ba\u03ac\u03b8\u03b5 \u03b4\u03cd\u03bf \u03b4\u03cd\u03bf \u03b1\u03c1\u03b9\u03b8\u03bc\u03bf\u03cd\u03c2 x,y \u03bf\u03c0\u03bf\u03c5 x<y \u03ba\u03b1\u03b9 \u03c4\u03bf \u03bb\u03bf\u03b3\u03cc\u03c4\u03b5\u03c1\u03bf \u03b5\u03af\u03bd\u03b1\u03b9 x, \u03bf\u03c0\u03bf\u03c5 x>y. \u0397 \u03a3\u03c5\u03bd\u03ac\u03c1\u03c4\u03b7\u03c3\u03b7 \u03b4\u03af\u03bd\u03b5\u03b9 \u03c3\u03c5\u03bd\u03bf\u03bb\u03b9\u03ba\u03ad\u03c2 \u03c0\u03b5\u03c1\u03b9\u03c3\u03c3\u03cc\u03c4\u03b5\u03c1\u03b5\u03c2 \u03b1\u03c0\u03cc \u03c4\u03b1 \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1 \u03b5\u03bd\u03cc\u03c2 \u03c0\u03c1\u03ce\u03c4\u03bf\u03c5 \u03c0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03b5\u03b9 \u03bc\u03b9\u03b1 \u03bb\u03b1\u03bc\u03b2\u03ac\u03bd\u03bf\u03c5\u03c3\u03b1 \u03c0\u03b5\u03c1\u03b9\u03bf\u03c7\u03ae \u03c3\u03c5\u03bd\u03cc\u03bb\u03bf\u03c5\u03c2 \u03b4\u03b9\u03b1\u03b4\u03b9\u03ba\u03b1\u03c3\u03af\u03c9\u03bd \u03ba\u03b1\u03b9 \u03b8\u03b1 \u03bc\u03b5 \u03b1\u03c5\u03c4\u03ae \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03af\u03c3\u03b5\u03b9 \u03b8\u03c5\u03bc\u03bf\u03b8\u03b5\u03c1\u03b1\u03c0\u03b5\u03c5\u03c4\u03ae \u03c4\u03c9\u03bd \u03c3\u03c5\u03bd\u03cc\u03bb\u03c9\u03bd.\n\u03a3\u03c5\u03bd\u03ac\u03c1\u03c4\u03b7\u03c3\u03b7 \u0395\u03c1\u03ce\u03c4\u03b7\u03c3\u03b7 3.\n\u03a3\u03c4\u03bf \u03b5\u03c0\u03af\u03c0\u03b5\u03b4\u03bf \u03c4\u03b7\u03c2 \u0395\u03be\u03ac\u03bc\u03b7\u03bd\u03b7\u03c2 \u03c0\u03bf\u03c5 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af \u03c4\u03bf \u03c0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u03ba\u03b1\u03b9 \u03b3\u03b9\u03b1 \u03ba\u03ac\u03b8\u03b5 \u03b4\u03cd\u03bf \u03b4\u03cd\u03bf \u03b1\u03c1\u03b9\u03b8\u03bc\u03bf\u03cd\u03c2 x,y \u03bf\u03c0\u03bf\u03c5 x<y \u03ba\u03b1\u03b9 \u03c4\u03bf \u03bb\u03bf\u03b3\u03cc\u03c4\u03b5\u03c1\u03bf \u03b5\u03af\u03bd\u03b1\u03b9 x, \u03bf\u03c0\u03bf\u03c5 x>y. \u0397 \u03a3\u03c5\u03bd\u03ac\u03c1\u03c4\u03b7\u03c3\u03b7 \u03b4\u03af\u03bd\u03b5\u03b9 \u03c3\u03c5\u03bd\u03bf\u03bb\u03b9\u03ba\u03ad\u03c2 \u03c0\u03b5\u03c1\u03b9\u03c3\u03c3\u03cc\u03c4\u03b5\u03c1\u03b5\u03c2 \u03b1\u03c0\u03cc \u03c4\u03b1 \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1 \u03b5\u03bd\u03cc\u03c2 \u03c0\u03c1\u03ce\u03c4\u03bf\u03c5 \u03c0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03b5\u03b9 \u03c0\u03c1\u03cc\u03c4\u03b5\u03c1\u03b7 \u03bb\u03b1\u03bc\u03b2\u03ac\u03bd\u03bf\u03c5\u03c3\u03b1 \u03b5\u03c0\u03b9\u03c6\u03ac\u03bd\u03b5\u03b9\u03b1 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03b5\u03af \u03bc\u03b5 \u03ad\u03bd\u03b1 \u03cc\u03bd\u03bf\u03bc\u03b1.\n\n-----\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport sys\n\nfrom sympy import *\n\nsys.setrecursionlimit(1500)\n\nclass Graph:\n    def __init__(self,vertex_num):\n        self.V = vertex_num\n        self.graph = [[0 for column in range(vertex_num)]\n                      for row in range(vertex_num)]\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\") == '0.666666666666667'\nassert solution(\"3\\n0 0\\n1 1\\n2 0\\n\") == '0.733333333333333'\nassert solution(\"100000\\n1 0\\n1 1\\n1 1\\n1 1\\n1 0\\n1 1\\n1 1\\n1 1\\n1 1\\n1 0\\n\") == '0.8333333333333334'\n\nimport sys"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\") == \"0.666666666666667\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\\n\") == \"0.733333333333333\"\n\"\"\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0\\n') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0\\n') == '0.733333333333333'\n\n\"\"\"\n\nimport os\nimport sys\nimport io"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n0 0\n0 1\n1 1\n1 0''') == '0.666666666666667'\nassert solution('''4\n0 0\n1 1\n2 0''') == '0.733333333333333'\nassert solution('''3\n0 0\n1 1\n2 0''') == '0.733333333333333'\nassert solution('''3\n0 0\n1 1\n0 0''') == '0.733333333333333'\nassert solution('''3\n0 0\n0 0''') == '0.733333333333333'\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 0\\n1 1\\n0 0\\n1 1\\n1 0\\n1 1\") == \"0.733333333333333\"\n\"\"\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0\\n') == '0.666666666666667'\n\"\"\"\n\nimport unittest\n\n\nclass TestSum(unittest.TestCase):\n\n    def test_case_1(self):\n        n = 4\n        coordinates = [[0, 0], [0, 1], [1, 1], [1, 0]]\n        result = 0.7071067811865476\n        self.assertEqual(result, solution(n, coordinates))\n\n    def test_case_2(self):\n        n = 3\n        coordinates = [[0, 0], [1, 1], [2, 0]]\n        result = 0.7333333333333334\n        self.assertEqual(result, solution(n, coordinates))\n\n    def test_case_3(self):\n        n = 3\n        coordinates = [[0, 0], [1, 1], [2, 2]]\n        result = 0.7333333333333334\n        self.assertEqual(result, solution(n, coordinates))\n\n    def test_case_4(self):\n        n = 3\n        coordinates = [[0, 0], [0, 1], [1, 1]]\n        result = 0.7071067811865475\n        self.assertEqual(result, solution(n, coordinates))\n\n    def test_case_5(self):\n        n = 5\n        coordinates = [[0, 0], [1, 1], [2, 2], [0, 2], [2, 0], [0.5, 0.5]]\n        result = 0.865332611085718\n        self."
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('a') == 'a'\nassert solution('a1') == 'a1'\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'\n\n\"\"\"\n\nn, m, k = [int(n) for n in stdin.readline().split()]\ncost_n = [[int(n) for n in stdin.readline().split()] for i in range(n)]\ncost_m = [[int(m) for m in stdin.readline().split()] for i in range(m)]"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\n\nassert solution('''\n2 3 100\n10 1 10\n10 1 10\n''') == '21'\n\nassert solution('''\n2 3 100\n10 1 20\n10 1 20\n''') == '10'\n\nassert solution('''\n2 3 100\n5 5 100\n10 1 20\n10 1 20\n''') == '11'\n\nprint('Success')"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2 3 4\\n10 1 3\\n10 1 10\") == \"21\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\n\"\"\""
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'*2\nassert solution('aaaa') == 'a'*4\nassert solution('aaaaa') == 'a'*5\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\"\n\"\"\"\n\nn, m, k = map(int, stdin.readline().strip().split())\ncost = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\n\"\"\"\ndp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + cost[i][j] - cost[i][k] - cost[k][j])\n\"\"\"\ndp = [[0] * m for _ in range(n)]\ndp[0][0] = cost[0][0]\nfor i in range(1, n):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\nfor j in range(1, m):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\nfor i in range(1, n):\n    for j in range(1, m):\n        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + cost[i][j]\nprint(dp[-1][-1])\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == 9\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == 21\nassert solution(\"4 3 100\\n6 1 10\\n6 1 10\\n8 2 20\\n8 2 20\") == 21\n\n------Problem-----\nGiven a floor plan and a cost map, find the minimum cost to install routers so that every corridor has either a weak or conflicting signal, but not both.\n\nInput Format\nThe first line of the input has three integers N, M, and K, where N is the number of rows in the floor plan, M is the number of columns in the floor plan, and K is the number of cells on the floor plan with conflicting signals. The next N lines contain M space-separated integers each, representing the cost of installing a router at the corresponding row and column of the floor plan. The next K lines contain M space-separated integers each, representing the signal strength of each cell with a router.\n\nOutput Format\nPrint an integer, the minimum cost to install routers so that every corridor has either a weak or conflicting signal, but not both.\n\nSample Input 0\n4 3 3\n0 1 2\n0 2 3\n0 2 3\n0 2 3\n0 1 2\n1 1 3\n1 2 3\n2 2 3\n3 3 3\n3 1 2\n3 2 3\nSample Output 0\n13\n\nSample Input 1\n3 5 3\n1 0 1\n1 1 2\n2 1 1\n3 2 1\n2 0 1\n1 0 1\nSample Output 1\n11\n\nExplanation 1\nThere are three corridors.\nCorridor 1 is a corridor with no signal.\nCorridor 2 has a weak signal.\nCorridor 3 has a strong signal.\nThe cost of installing a router at each position on the floor plan is listed above.\nThe cost of installing the router in the middle of corridor 1 is $1$.\nThe cost of installing the router in the middle of corridor 2 is $2$.\nThe cost of installing the router in the middle of corridor 3 is $3$.\nThe total cost is $1 + 2 + 3 = 11$.\n\nExplanation 2\nThere are three corridors.\nCorridor 1 has a strong signal.\nCorridor 2 has a weak signal.\nCorridor 3 has a strong signal.\nThe cost of installing the router in each position on the floor plan is listed above.\nThe cost of installing the router in the middle of corridor 1 is $1$.\nThe cost of installing the router in the middle of corridor 2 is $2$.\nThe cost of installing the router in the middle of corridor 3 is $3$.\nThe total cost is $3 + 2 + 3 = 11$.\n\nSample Input 2\n3 5 2\n1 0 1\n1 1 1\n2 0 1\n2 1 1\n3 1 1\n3 2 1\nSample Output 2\n8\n\nExplanation 2\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a weak signal.\nThe cost of installing the router in each position on the floor plan is listed above.\nThe cost of installing the router in the middle of corridor 1 is $1$.\nThe cost of installing the router in the middle of corridor 2 is $2$.\nThe total cost is $2 + 1 = 3$.\n\nSample Input 3\n3 5 4\n1 0 1\n1 1 1\n2 0 1\n2 1 1\n3 0 1\n3 1 1\n2 2 1\n3 2 1\nSample Output 3\n12\n\nExplanation 3\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a strong signal.\nThe cost of installing the router in each position on the floor plan is listed above.\nThe cost of installing the router in the middle of corridor 1 is $1$.\nThe cost of installing the router in the middle of corridor 2 is $2$.\nThe cost of installing the router in the middle of corridor 3 is $3$.\nThe total cost is $1 + 2 + 3 = 6$.\n\n------Solution------\n\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a weak signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a weak signal.\n\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a weak signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a weak signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a weak signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a weak signal.\n\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a weak signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a weak signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a weak signal.\n\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a weak signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a weak signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a weak signal.\nCorridor 3 is a corridor with a strong signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a weak signal.\n\nCorridor 1 is a corridor with a weak signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a weak signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a weak signal.\n\nCorridor 1 is a corridor with a strong signal.\nCorridor 2 is a corridor with a strong signal.\nCorridor 3 is a corridor with a weak signal.\n\nCorridor 1 is a corridor with a strong signal.\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'\nassert solution('9 3 7 *\\n1 1 1 2\\n') == '8'\nassert solution('9 3 7 /\\n1 1 1 2\\n') == '2'\nassert solution('9 3 7 +\\n1 1 1 2\\n') == '3'\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\nassert solution(\"9 3 7 *\\n1 1 1 2\\n\") == \"18\"\nassert solution(\"9 3 7 /\\n1 1 1 2\\n\") == \"0.8333333333333334\"\nassert solution(\"9 3 7 /\\n1 1 1 2\\n\") == \"0.8333333333333334\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'\nassert solution('9 9 7 *\\n1 1 1 2\\n') == '1'\nassert solution('9 9 7 /\\n1 1 1 2\\n') == '1'\nassert solution('9 9 9 *\\n1 1 1 1\\n') == '0'\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 7 -\\n1 1 1 2\\n\") == \"2\"\n\"\"\"\n\nfrom typing import List\n\nN, M, T, O = input().split()\n\nn = int(N)\nm = int(M)\nt = int(T)\nop = O\n\nans = 0\n\nfor i in range(n):\n    row = input().split()\n    for j, c in enumerate(row):\n        row[j] = int(c)\n    row = sorted(row)\n    for j in range(m-1):\n        if row[j] == row[j+1]:\n            continue\n        if (row[j] + row[j+1]) == t:\n            ans += 1\n        if (row[j] - row[j+1]) == t:\n            ans += 1\n        if (row[j] * row[j+1]) == t:\n            ans += 1\n        if (row[j] / row[j+1]) == t:\n            ans += 1\n\nprint(ans)"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\nassert solution(\"9 2 6 *\\n1 1 1 2\\n\") == \"4\"\nassert solution(\"9 2 6 *\\n1 1 1 2\\n\") == \"4\"\nassert solution(\"9 2 6 *\\n1 1 1 2\\n\") == \"4\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == '3\\n4\\n3'\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == '2\\n3\\n2\\n1'\nassert solution(\"4 4\\n1 2 2\\n2 3 2\\n3 4 2\\n1 4 8\\n\") == '2\\n3\\n2\\n1'\n\"\"\"\n\n\"\"\"\nA road network in a country consists of $N$ cities and $M$ one-way roads. The cities are numbered $1$ through $N$. For each road we know the origin and destination cities, as well as its length.\n\nWe say that the road $F$ is a continuation of road $E$ if the destination city of road $E$ is the same as the origin city of road $F$. A path from city $A$ to city $B$ is a sequence of road such that origin of the first road is city $A$, each other road is a continuation of the one before it, and the destination of the last road is city $B$. The length of the path is the sum of lengths of all roads in it.\n\nA path from $A$ to $B$ is a shortest path if there is no other path from $A$ to $B$ that is shorter in length.\n\nYour task is to, for each road, output how many different shortest paths contain that road, modulo $1000000007$.\n\n-----Input-----\nThe first line contains two integers $N$ and $M$ (1 \\le N \\le 1500, 1 \\le M \\le 5000) \u2014 the number of cities and roads, respectively.\n\nEach of the following $M$ lines contains three positive integers $O$, $D$ and $L$ (1 \\le O, D, L \\le N, 0 \\le L \\le 100) \u2014 the origin city, destination city and length of a road, respectively. The numbers $O$ and $D$ will be different and $L$ will be at most $10000$.\n\n-----Output-----\nOutput $M$ integers each on its own line \u2014 for each road, the number of different shortest paths containing it, modulo $1000000007$. The order of these numbers should match the order of roads in the input.\n\n-----Examples-----\nSample Input 1:\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\nSample Output 1:\n3\n4\n3\n2\n\nSample Input 2:\n4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\nSample Output 2:\n2\n3\n2\n1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == '2 3\\n4\\n3'\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == '2 3\\n3\\n2'\n\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2 5\\n2 3 5\") == 3\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == 2\nassert solution(\"2 2\\n1 2 1\\n1 2 1\") == 2\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '2\\n3\\n2\\n1'\nassert solution('4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '2\\n3\\n2\\n1'\nassert solution('4 3\\n1 2 3\\n2 3 4\\n3 4 5\\n1 4 8\\n') == '2\\n3\\n1\\n1'\nassert solution('4 3\\n1 2 3\\n2 3 4\\n3 4 5\\n1 4 8\\n') == '2\\n3\\n1\\n1'\nassert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '3\\n2\\n1\\n1'\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == '3\\n4\\n3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == '3\\n4\\n3'\n\"\"\""
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '''3\n4\n3'''\nassert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '''2\n3\n2\n1'''\nprint('Success')"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '''3\n4\n3'''\n\nassert solution('''4 2\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '''2\n3\n2\n1'''\n\nassert solution('''5 2\n1 3 3\n1 4 1\n1 5 1\n1 2 1\n1 3 1''') == '''1\n1'''\n\nassert solution('''10 12\n1 5 2\n1 6 3\n1 7 4\n1 8 5\n1 9 6\n1 10 7\n1 11 8\n1 12 9\n2 10 4\n2 11 3\n2 12 1\n3 10 1\n3 11 1\n3 12 1\n4 9 1\n4 10 1\n4 11 1\n4 12 1\n5 8 1\n5 9 1\n5 10 1\n5 11 1\n6 7 1\n6 8 1\n6 9 1\n6 10 1\n6 11 1\n6 12 1\n7 9 1\n7 10 1\n7 11 1\n7 12 1\n8 9 1\n8 10 1\n8 11 1\n8 12 1\n9 10 1\n9 11 1\n9 12 1\n10 11 1\n10 12 1\n11 11 1\n11 12 1\n12 12 1''') == '''9\n9\n9\n9\n6\n8\n8\n9\n9\n9\n9\n9\n10\n10\n10\n10\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n10\n10\n10\n10\n9\n9\n9\n9\n9\n10\n9\n9\n9\n9\n10\n10\n10\n10\n10\n10\n10\n10\n10\n9\n9\n9\n9\n10\n9\n10\n10\n10\n10\n10\n10\n10\n10\n9\n9\n10\n9\n10\n10\n9\n9\n9\n10\n9\n9\n9\n9\n10\n9\n9\n9\n9\n9\n10\n9\n9\n10\n9\n9\n9\n9\n9\n10\n9\n9\n10\n9\n9\n9\n9\n9\n9\n9\n10\n10\n10\n10\n10\n9\n9\n10\n9\n10\n9\n9\n10\n10\n9\n10\n10\n9\n9\n9\n9\n10\n9\n9\n10\n9\n10\n10\n9\n9\n9\n9\n10\n9\n9\n9\n10\n9\n10\n9\n9\n9\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n9\n9\n9\n9\n9\n10\n10\n10\n10\n10\n9\n10\n9\n9\n9\n9\n9\n10\n9\n10\n9\n9\n9\n9\n9\n9\n10\n10\n9\n10\n10\n9\n9\n9\n9\n9\n9\n9\n10\n9\n10\n9\n10\n9\n9\n9\n9\n10\n9\n9\n9\n9\n10\n10\n10\n10\n10\n10\n9\n9\n10\n10\n10\n10\n10\n10\n9\n10\n10\n9\n9\n9\n9\n9\n10\n10\n9\n9\n10\n10\n10\n10\n10\n9\n10\n9\n10\n10\n10\n10\n9\n10\n9\n10\n9\n10\n10\n9\n10\n9\n10\n9\n9\n9\n10\n9\n10\n10\n10\n9\n10\n10\n9\n9\n9\n9\n9\n9\n9\n10\n9\n9\n9\n9\n9\n9\n10\n10\n9\n10\n9\n10\n10\n10\n10\n9\n10\n9\n9\n9\n9\n10\n9\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n9\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"3\\n4\\n3\\n2\\n1\"\n\n\"\"\"\nimport math\nfrom collections import defaultdict, deque\n\ninput_list = input().split(\"\\n\")\ngraph = defaultdict(lambda: [])\n\nfor line in input_list[:-1]:\n    values = line.split()\n    origin = int(values[0])\n    destination = int(values[1])\n    weight = int(values[2])\n    graph[origin].append(Edge(destination, weight))\n    graph[destination].append(Edge(origin, weight))\n\nfor key in graph:\n    graph[key].sort(key=lambda edge: edge.weight)\n\nstart = int(input_list[-1])\nend = int(input_list[0].split()[0])\n\nINF = 1e9\ndist = [INF] * len(graph)\ndist[start] = 0\nqueue = deque([start])\nwhile queue:\n    current = queue.popleft()\n    for edge in graph[current]:\n        if dist[edge.destination] > dist[current] + edge.weight:\n            dist[edge.destination] = dist[current] + edge.weight\n            queue.append(edge.destination)\n\nprint(dist[end] if dist[end]!= INF else -1)\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n2 1') == 6\nassert solution('3 4\\n2 3 1') == 24\n\"\"\""
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 1') == 6\nassert solution('3 4\\n2 3 1') == 24\n\n\"\"\""
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\"\"\"\nimport math"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nimport sys\nfrom operator import add\nfrom functools import reduce"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n2 1') == 6\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\ncolors = [0] + list(map(int, stdin.readline().split()))\ndp = [0]*(k+1)\ndp[0] = 1\nfor i in range(1, n+1):\n    dp_ = [0]*(k+1)\n    for j in range(k+1):\n        if colors[i] == j:\n            dp_[j] = dp[j]\n        else:\n            dp_[j] = dp[j] + dp[j-1]\n    dp = dp_\nprint(dp[-1])\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 1\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n2 1\") == 6\nassert solution(\"3 4\\n2 3 1\") == 24"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\") == 2\n\nassert solution(\"5\\n3 4 5 1 2\") == 1\n\nassert solution(\"5\\n4 5 1 2 3\") == 0\n\nassert solution(\"10\\n9 8 7 6 5 4 3 2 1\") == 12\n\nprint(\"All cases passed\")\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\n\nimport json\nfrom typing import Any, Dict, List, Tuple, Union, cast"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n\"\"\"\nfrom math import factorial as f\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\nimport random\nimport time"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == 2\nassert solution(\"5\\n3 4 5 1 2\") == 1\n\nimport sys\n\nfor line in sys.stdin:\n    print(solution(line.strip()))"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 3 1\\n2 1 2\\n1 1 1\\n') == '4'\n\"\"\"\n\n\"\"\"\nInput\n3 3\n1 4 10\n5 2 6\n11 1 3\nOutput\n9\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\n\nprint(solution(input()))\n\n'''\n\nfrom copy import deepcopy"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == 9\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\") == 4\nassert solution(\"4 4\\n1 2 3 4\\n5 2 6 7\\n9 8 10 1\\n2 3 4 5\") == 0\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == 9\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\") == 4\n\"\"\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"9\"\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport re\n\nrow_col = sys.stdin.readline().split()\nrow, col = map(int, row_col)\n\nmat = []\nfor line in sys.stdin:\n    mat.append(list(map(int, re.findall(r'\\d+', line))))\n\nmat = mat[1:]\n\nmax_cool = 0\nfor i in range(row):\n    for j in range(col):\n        cool = 0\n        for k in range(i, row):\n            for l in range(j, col):\n                cool += mat[k][l]\n                if cool > max_cool:\n                    max_cool = cool\n\nprint(max_cool)\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 3 1\\n2 1 2\\n1 1 1') == '4'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 3 1\n2 1 2\n1 1 1''') == '4'\nassert solution('''2 2\n1 2\n2 2''') == '0'\nassert solution('''2 2\n1 1\n1 1''') == '2'\nassert solution('''2 2\n2 1\n1 1''') == '0'\nassert solution('''2 2\n1 1\n1 1''') == '1'\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"9\"\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3') == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\n\"\"\""
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\n\"\"\"\n\nn = int(stdin.readline())\np_jokes = [0] * (n + 1)\nfor line in stdin:\n    line = line.split(' ')\n    p_jokes[int(line[0])] = int(line[1])\n\nparents = [[] for _ in range(n + 1)]\nfor line in stdin:\n    line = line.split(' ')\n    parents[int(line[1])].append(int(line[0]))\n\nres = set()\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == 6\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\njokes = [int(x) for x in sys.stdin.readline().strip().split(\" \")]\n\nans = set()\njokes.sort()\nfor i in range(N - 1):\n    if jokes[i] == jokes[i + 1]:\n        continue\n    if jokes[i + 1] - 1!= jokes[i]:\n        continue\n    ans.add(tuple(jokes[i : i + 2]))\n\nprint(len(ans))\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2 1 3 4\n1 2\n1 3\n3 4''') == '6'\nassert solution('''4\n3 4 5 6\n1 2\n1 3\n2 4''') == '3'\nassert solution('''4\n2 1 3 4\n3 1\n2 3\n4 1''') == '3'\nassert solution('''4\n1 2\n1 3\n2 3\n4 1''') == '2'\nassert solution('''4\n4 3 6 1\n1 2\n1 3\n2 4\n3 4''') == '1'\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\") == 3\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n3 4\") == \"6\"\nprint(solution(input()))\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\n\nprint(solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\"))"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == '6'\n\"\"\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 10\\n5 8') == '18\\n8'\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 10\") == \"18\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\") == \"265\"\n\"\"\"\n\nstdin = \"\"\"\n1\n1 10\n5 8\n\"\"\"\nstdin = stdin.splitlines()\n\nN = int(stdin[0])"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"4\\n6\\n8\\n10\\n\"\nassert solution(\"5 4\") == \"5\\n8\\n11\\n14\\n17\\n\"\nassert solution(\"5 10\") == \"5\\n7\\n9\\n11\\n13\\n15\\n17\\n19\\n21\\n23\\n25\\n27\\n29\\n31\\n33\\n35\\n37\\n39\\n41\\n43\\n45\\n47\\n49\\n51\\n53\\n55\\n57\\n59\\n61\\n63\\n65\\n67\\n69\\n71\\n73\\n75\\n77\\n79\\n81\\n83\\n85\\n87\\n89\\n91\\n93\\n95\\n97\\n99\\n\"\nassert solution(\"7 7\") == \"7\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n\"\nassert solution(\"1 100\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n\"\n\n\"\"\"\nfrom itertools import product\nfrom math import factorial as f"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18\\n8'\n\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265\\n25\\n10'\n\n\"\"\"\n\u0420\u0430\u0431\u043e\u0442\u0430 \u043d\u0430\u0434 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c \u043e\u043f\u0440\u043e\u0441\u0430 \u0410\u043d\u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0430\u0441\u044c. \u0423 \u0410\u043d\u0438 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0432\u0441\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u043d \u0432\u044b\u0431\u0440\u0430\u043b \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u0437\u0430\u0434\u0430\u043d\u0438\u0435.\n\u0412\u043e\u0442 \u0447\u0442\u043e \u043e\u043d \u0437\u0430\u043f\u0438\u0441\u0430\u043b:\n\n\u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u0432\u044b\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0445 A \u0438 B, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u0441\u0432\u044f\u0437\u044c \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u0441\u0445\u0435\u043c\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0443\u043c\u043c\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\n\nF(A) = A + 2\nF(B) = B + 2\nF(A, B) = F(A, A) + F(B, B)\nF(A, B) = 4 + 4\nF(A, B) = 4 + 4\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8\nF(A, B) = 8 + 8"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1 10\n5 8\n''') == '18\\n8'\nassert solution('''3\n17 144\n121 121\n89 98\n''') == '265\\n25\\n10'\n\n\"\"\""
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n1 10\n5 8''') == '18\\n8'\nassert solution('''3\n17 144\n121 121\n89 98''') == '265\\n25\\n10'\nassert solution('''4\n20 200\n140 140\n140 200\n200 200''') == '1\\n0\\n0\\n1'\n\n'''\n2\n1 10\n5 8\n\n3\n17 144\n121 121\n89 98\n\n4\n20 200\n140 140\n140 200\n200 200\n'''"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 10\\n5 8\\n\") == \"18\\n8\"\nprint(solution(\"3\\n17 144\\n121 121\\n89 98\\n\"))\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 10\") == \"18\\n8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin_1) == stdout_1\nassert solution(stdin_2) == stdout_2"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 10\\n5 8\\n\") == \"18\\n8\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\\n\") == \"265\\n25\\n10\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 3\n0 0\n1 1\n2 1\n1 0''') == '0.50000000'\nassert solution('''5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4''') == '12.50000000'\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.5'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.5'\n\"\"\"\n\n\nfrom typing import List, Tuple\n\nimport numpy as np\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == 0.5\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\n\"\"\"\n\nfrom fractions import Fraction\nfrom random import uniform"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.5\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.5\"\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n\") == \"0.50000000\"\n\"\"\"\n\nfrom fractions import Fraction\nfrom itertools import combinations"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.5\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.5\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.5'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.5'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().strip().split())\n\nxy = []\nfor _ in range(n):\n    x, y = map(float, sys.stdin.readline().strip().split())\n    xy.append((x, y))\n\nfrom scipy.spatial import ConvexHull\nhull = ConvexHull(xy)\nprint(sum(hull.area[hull.vertices[i : i + 3]] for i in range(k - 2)))\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == 0.5\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1''') == '2'\nassert solution('''4 0 4\n0 2\n0 1\n2 1\n2 3''') == '1'\nassert solution('''4 4 0\n0 1\n0 3\n3 2\n1''') == '3'\nassert solution('''4 4 4\n0 1\n0 3\n3 2\n1''') == '3'\nassert solution('''4 1 3\n0 1\n1 2\n2 3\n1''') == '2'\n\n'''\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n') == '2'\nassert solution('4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n') == '1'\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == '2'\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == '1'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4 1 3\n0 1\n1 2\n2 3\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"4 0 4\n0 2\n0 1\n2 1\n2 3\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\n-----Notes-----\n\nAccepted Answer:\nRuntime: 1568 ms, faster than 5.88% of Python3 online submissions for Minimum Number of Private Messages to Disrupt Communication.\nMemory Usage: 13.9 MB, less than 100.00% of Python3 online submissions for Minimum Number of Private Messages to Disrupt Communication.\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1') == 6\n\n-----Problem-----\nAmazon has decided to give away all of their new mobile phones to determine the largest possible money-making offer. Each mobile phone has a certain number of \u201cscore points\u201d associated with it. We all know that the more score points a phone has, the more expensive it is, but what is the maximum amount of money that we can offer Amazon for these phones if we want to maximise the number of score points we get for them?\n\nNote: The iPhone 12, and most of the other newer phones, have been given a score of $6$. This score is based on the fact that the iPhone 12 has the highest resolution, 2.2 megapixels, meaning it can achieve up to $4.5 billion in score points for a deal.\n\n-----Solution-----\n\n-----Tests-----\nimport sys\n\nimport unittest\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1\\n2 2 2') == 30\nassert solution('2 2 2\\n2 2 2') == 30\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1, 2, 1) == 6\nassert solution(2, 2, 2) == 30\n\"\"\"\nfrom typing import List, Tuple"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == 6\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1') == 6\nassert solution('2 2 2') == 30\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1') == '6'\n\nassert solution('2 2 2') == '30'\n\nprint('Success')\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 2\") == \"30\"\nassert solution(\"2 5 6\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 2 1''') == '6'\nassert solution('''2 2 2''') == '30'\n\"\"\""
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1\\n') == 6\n\"\"\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n1 9999999') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n1 9999999') == 'impossible'\n\nimport time\nimport random"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2020 2020\\n') == '2021 2020'\nassert solution('3\\n2020 2020 2020\\n') == '2021 2020 2020'\nassert solution('3\\n999999 2020 2020\\n') == '999991 2020 2020'\nassert solution('4\\n2020 2020 2020 2020\\n') == '2021 2020 2020 2020'\n\"\"\"\n\nn = int(stdin.readline())\n\nlis = [int(i) for i in stdin.readline().strip().split(' ')]"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2020 2020 2020\") == \"2021 2020 2020\"\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n1 9999999') == 'impossible'\nprint(\"Well done, sir!\")\n\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('123') == '123'\nassert solution('1234') == '1234'\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n999999 1') == 'impossible'\nprint('Success')\n\n\"\"\"\n\n\"\"\"\n----SOLUTION----\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n999999\\n888888') == 'impossible'\nprint('Success')\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('3\\n1 9999999') == 'impossible'\nassert solution('3\\n999999 999999') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('66 69') == 2\nassert solution('30 70') == 11\nassert solution('1 2') == 0\nassert solution('1 2 3') == 0\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('30 70') == 11\nassert solution('66 69') == 2\n\"\"\"\n\nl, r = [int(x) for x in stdin.split()]\ncount = 0\nfor i in range(l, r + 1):\n    num = str(i)\n    if '4' not in num and '6' * num.count('6') == num.count('8') * '8' == num.count('4') * '4':\n        count += 1\n\nprint(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 13') == '0'\nassert solution('12 3') == '0'\nassert solution('123 456 678') == '1'\nassert solution('77 7 777') == '1'\nassert solution('77 7 777 8 8 8') == '2'\n\"\"\"\n\nL, R = map(int, input().split())\n\ncounter = 0\nfor i in range(L, R + 1):\n    if '4' not in str(i) and ('6' in str(i) or '8' in str(i)):\n        counter += 1\nprint(counter)\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n30 70\n\"\"\") == \"\"\"11\"\"\"\n\nassert solution(\n\"\"\"\n66 69\n\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\n\"\"\"\n12 11\n\"\"\") == \"\"\"0\"\"\"\n\nassert solution(\n\"\"\"\n0 1\n\"\"\") == \"\"\"0\"\"\"\n\nassert solution(\n\"\"\"\n0 0\n\"\"\") == \"\"\"0\"\"\""
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n\"\"\"\n\nL, R = map(int, stdin.split())\n\nprint(L // 2 + R // 2 - (R % 2) - (L % 2))\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"30 70\") == 11\nassert solution(\"66 69\") == 2\n\"\"\"\n\nL, R = [int(x) for x in input().split()]"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">@<\") == \"begin repairs\"\nassert solution(\">>@<\") == \"begin repairs\"\nassert solution(\">>>>~\") == \"begin repairs\"\nassert solution(\">>@<~\") == \"begin repairs\"\nassert solution(\">>>>~<\") == \"begin repairs\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 0\\n>@\\n>~') == '2'\nassert solution('3 5 1\\n>>@<<\\n>~#~<') == '4'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 0\\n>>@<<\\n>~#~<') == '4'\nassert solution('3 5 1\\n>>@<<\\n>~#~<') == '4'\nassert solution('3 2 1\\n>>@<<\\n>~#~<') == '4'"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\"\nassert solution(\"2 4 3\") == \"begin repairs\"\nassert solution(\"1 1 0\") == \"begin repairs\"\nassert solution(\"5 5 1\") == \"2\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == 2\n\"\"\"\n\n\"\"\"\nOptimized Solution:\n\nclass Solution:\n    def riverSizes(self, matrix: List[List[int]]) -> List[int]:\n        \n        def dfs(i,j):\n            \n            if not (0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and matrix[i][j]):\n                return\n            \n            if (i,j) in seen:\n                return\n            \n            seen.add((i,j))\n            ans.append(1)\n            dfs(i+1, j)\n            dfs(i-1, j)\n            dfs(i, j+1)\n            dfs(i, j-1)\n            \n        ans = []\n        seen = set()\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if (i,j) not in seen and matrix[i][j] == 1:\n                    dfs(i,j)\n                    ans.append(ans[-1])\n                    seen = set()\n                    \n        return ans\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == 2\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 0\") == '2'\nassert solution(\"3 5 1\") == '4'\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\nassert solution(\"2 2 0\\n#@\\n~#\") == \"begin repairs\"\nassert solution(\"3 5 1\\n#@\\n>>@<<\\n#~#~<\") == \"begin repairs\"\n\n\"\"\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 0\\n>@\\n>~\\n') == '2'\nassert solution('3 5 1\\n>>@<<\\n>~#~<\\n>>>>~\\n') == '4'"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"156972=74\") == \"1569+7+2=74\"\nassert solution(\"46997=64\") == \"4699+6+4=64\"\nassert solution(\"542=6\") == \"542=6\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\"\"\""
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"143175=120\") == \"1431+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nprint('OK!')\n\nimport re"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nassert solution('369840=369840') == '369840=369840'\nassert solution('86500=8445') == '8+650+45=8445'\nassert solution('86500=8445') == '8+650+45=8445'\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nassert solution('10005=32') == '1+0+005=32'\nassert solution('100=3') == '1+0+0=3'\n\"\"\"\n\nimport sys\n\ninput_str = sys.stdin.readline()\nequation_str = input_str.split('=')[0].strip().replace('0', '')\nnum_str = input_str.split('=')[1].strip()\n\nleft_part = ''\nright_part = ''\n\nfor num in num_str:\n    if int(num) < int(left_part[-1]):\n        right_part = num + right_part\n    else:\n        left_part += num\n\nprint(f'{left_part}={right_part}')"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n\n\"\"\""
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"143175=120\") == \"1431+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n2') == '1 2'\nassert solution('1\\n2\\n3') == '1 2'\nassert solution('1\\n2\\n3\\n4') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 -1\"\n\"\"\"\nimport re\nfrom typing import Tuple, List, Match, Dict"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\n1\n2\n3\n4\n5\n6\n7\n1''') == '1 2'\nassert solution('''8\n4\n1\n2\n3\n4\n5\n6\n1''') == '-1'\nassert solution('''8\n2\n3\n4\n5\n6\n7\n8\n2''') == '-1'\n\nprint('Success')\n\n-----"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"1 2\"\nassert solution(\"3\\n1\\n2\\n3\\n2\\n3\\n3\\n3\\n3\\n3\\n3\") == \"1 2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"-1\"\nassert solution(\"6\\n1\\n2\\n3\\n4\\n5\\n6\") == \"1 5\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"-1\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n3\\n2') == '2'\nassert solution('1\\n2\\n3') == '2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == '1 2'\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == '1 2'\n\"\"\"\n\nfrom typing import List, Tuple\nfrom collections import Counter, OrderedDict\nfrom functools import lru_cache"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n2\\n3\") == \"1 4\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 7\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"1 4\"\nassert solution(\"4\\n1\\n2\\n3\") == \"1 3\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"1 2\"\nassert solution(\"8\\n7\\n1\\n2\\n3\\n4\\n5\\n6\\n1\") == \"1 2\"\n\"\"\"\n\nN = int(input())\nS = [int(input()) for _ in range(N)]\n\nseen = set()\nres = -1\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        if S[i] * S[j] not in seen:\n            seen.add(S[i] * S[j])\n        else:\n            res = S[i] * S[j]\n            break\n    if res!= -1:\n        break\n\nprint(res, res, sep=\" \")\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n\") == \"-1\"\nassert solution(\"8\\n5\\n4\\n3\\n2\\n1\\n6\\n7\\n8\\n1\\n\") == \"8 7\"\nassert solution(\"8\\n5\\n4\\n3\\n2\\n1\\n6\\n7\\n8\\n1\\n\") == \"8 6\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n3\\n2\\n4\\n5\\n6\\n7\\n1\") == '1 2'\nassert solution(\"8\\n1\\n3\\n2\\n4\\n5\\n6\\n7\\n1\") == '1 2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1101\") == 1\nassert solution(\"1111\") == 0\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11010') == 0\nassert solution('11011') == 1\nassert solution('11100') == 1\nassert solution('11101') == 2\nassert solution('11110') == 2\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1101\") == '1'\nassert solution(\"1\") == '0'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1011\") == \"3\"\nassert solution(\"101101\") == \"7\"\nassert solution(\"100101010\") == \"10\"\nassert solution(\"11011010110\") == \"20\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"110111010\") == \"5\"\nassert solution
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1101\") == 1\nassert solution
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1101') == 1\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1101\") == \"1\"\n\"\"\"\n\nimport collections\nimport itertools\nimport time\n\nfrom util import timing\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1101') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1110') == 0\nassert solution('1101') == 1\nassert solution('110111010') == 2\nassert solution('111011010') == 3\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 1, 3, 1) == 1\nassert solution(3, 3, 1, 3) == 2\nassert solution(3, 3, 1, 3) == 2\nassert solution(3, 3, 1, 3) == 2\nassert solution(3, 3, 1, 3) == 2\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\") == \"1\\n0\\n2\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\\n0\\n2\"\n\"\"\""
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"4 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"0\"\nassert solution(\"4 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\"\nassert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\") == \"2\"\nassert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\") == \"1\\n0\\n2\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\\n0\\n2\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n3 1 3 1\\n2 2 1\") == \"1\\n0\\n2\"\nassert solution(\"4 3\\n3 1 3 1\\n2 2 1\") == \"1\\n0\\n2\"\nassert solution(\"3 3\\n3 1 3 1\\n2 2 1\") == \"1\\n0\\n2\"\nassert solution(\"4 3\\n3 1 3 1\\n2 2 1\") == \"1\\n0\\n2\"\nassert solution(\"4 3\\n3 1 3 1\\n2 2 1\") == \"1\\n0\\n2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == '1\\n0\\n2'\nassert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == '1\\n0\\n2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\\n\") == \"1\\n0\\n2\\n\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n\") == \"3\\n0\\n2\\n\"\n\"\"\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 1 6 3 6\\n1 2\\n2 3\\n3 1') == '1'\nassert solution('3 3\\n3 1 3 1\\n2 2 1') == '0'\nassert solution('2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1') == '2'\n\nprint(solution(stdin))\n\nimport collections\nfrom typing import List, NamedTuple\n\n\nclass Cartesian(NamedTuple):\n    x: int\n    y: int\n\n    def __add__(self, other: 'Cartesian') -> 'Cartesian':\n        return self.__class__(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Cartesian') -> 'Cartesian':\n        return self.__class__(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other: int) -> 'Cartesian':\n        return self.__class__(self.x * other, self.y * other)\n\n    def __floordiv__(self, other: int) -> 'Cartesian':\n        return self.__class__(self.x // other, self.y // other)\n\n    def __neg__(self) -> 'Cartesian':\n        return self.__class__(-self.x, -self.y)\n\n    def __repr__(self) -> str:\n        return f'Cartesian({self.x}, {self.y})'\n\n\nclass Int(NamedTuple):\n    value: int\n    sign: int\n    sign_count: int\n\n    def __add__(self, other: 'Int') -> 'Int':\n        return Int(self.value + other.value, 1 if other.sign == 1 else self.sign, self.sign_count + other.sign_count)\n\n    def __sub__(self, other: 'Int') -> 'Int':\n        return Int(self.value - other.value, -1 if other.sign == 1 else self.sign, self.sign_count + other.sign_count)\n\n    def __mul__(self, other: int) -> 'Int':\n        return Int(self.value * other, self.sign * other, self.sign_count + other)\n\n    def __floordiv__(self, other: int) -> 'Int':\n        return Int(self.value // other, self.sign // other, self.sign_count + other)\n\n    def __neg__(self) -> 'Int':\n        return Int(-self.value, -self.sign, self.sign_count)\n\n    def __repr__(self) -> str:\n        return f'Int({self.value}, {self.sign}, {self.sign_count})'\n\n    @property\n    def is_positive(self) -> bool:\n        return self.sign == 1\n\n    @property\n    def is_negative(self) -> bool:\n        return self.sign == -1\n\n    @property\n    def is_zero(self) -> bool:\n        return self.value == 0\n\n\nclass City(NamedTuple):\n    number: int\n\n    def __add__(self, other: int) -> 'City':\n        return self.__class__(self.number + other)\n\n    def __repr__(self) -> str:\n        return f'City({self.number})'\n\n    def __str__(self) -> str:\n        return f'City({self.number})'\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"1\\n0\\n2\\n\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n\") == \"3\\n0\\n2\\n\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n\") == \"3\\n0\\n2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.6666666666666665'\n\nimport math\nimport itertools"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 1\\n1 2 3 4\"\n) == \"4.0\"\nassert solution(\n    \"4 2\\n2 4 3 4\"\n) == \"3.666666\"\nassert solution(\n    \"4 3\\n3 5 6 7 9\"\n) == \"4.666667\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1.500000'\nassert solution('1 2 3 4 5') == '1.666667'\nassert solution('1 2 3 4 5 6') == '1.666667'\nassert solution('1 2 3 4 5 6 7') == '1.666667'\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0', 'Wrong output'\nassert solution('4 2\\n2 4 3 4') == '3.666666', 'Wrong output'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(sum([a[i] for i in range(n - k + 1)]) / k)\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\n\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.6666666666666665'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n\"\"\"\n\nN, K = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nA = [0]\nfor i in range(N):\n    A.append(A[-1] + a[i])\n\nd = 0\nmax_a = -1\nfor i in range(N + 1):\n    for j in range(i, min(N + 1, i + K + 1)):\n        a = A[j + 1] - A[i]\n        d = max(d, a)\n        if a > max_a:\n            max_a = a\n\nprint('%.3f' % max_a)"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.6666666666666665\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == '0.750'\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == '0.625'\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\\n') == '0.750'\n\n-----Notes-----\nWe can start with a simple brute-force solution. We can iterate over the options for the minimum and maximum amounts of each color of sand and then compute the minimum difference possible for each option of the minimum and maximum amounts.\n\nAfter that, we can examine all the possible options for the maximum amount of sand in each section, and pick the minimum difference we can achieve from there.\n\nThe time complexity of this solution is O(N^4 * M^2), where N is the number of sections, and M is the number of colors.\n\nDo note that we are not actually going through every combination of values in our loop. We can try to do a binary search to find the min and max for each section, and that should take O(N * MlogM).\n\nAlso, note that we are iterating over all the sections, and within each section we are iterating over all possible combinations of colors to fill that section. For each section, the complexity is O(N * M).\n\nThe solution can also be written in O(N^3 * M) time and space, where the inner loops are one-dimensional. This can be solved using dynamic programming, and we will explore this solution in detail later.\n\nSo the solution is O(N^4 * M) time and O(N^3 * M) space.\n\nDo note that the optimization O(N^3 * M) is the same as the optimization O(N^2 * M) for the brute-force solution.\n\n-----Challenge-----\nCan you improve this solution to O(N^3) time and O(N^2) space?\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\\n\") == \"0.750\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\\n\") == \"0.625\"\n\"\"\"\n\nfrom collections import namedtuple\nimport sys\n\nPoint = namedtuple('Point', 'x y')\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == '0.750'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == '0.750'\nassert solution(\"4 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == '0.625'\n\"\"\"\n\nimport numpy as np\n\nn, m, w, h = (int(i) for i in input().split())\n\nv = np.array([float(i) for i in input().split()])\n\nx = np.array([float(i) for i in input().split()])\n\nmin_arr = np.array([[float(i) for i in input().split()] for j in range(n-1)])\nmax_arr = np.array([[float(i) for i in input().split()] for j in range(n-1)])\n\ndiff = np.zeros((n,m))\nfor i in range(n):\n    for j in range(m):\n        diff[i,j] = min_arr[i,j] * w\n        diff[i,j] += max_arr[i,j] * h\n\nprint(np.max(diff) - np.min(diff))"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0''') == '0.750'\nassert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0''') == '0.625'\n'''\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == \"0.625\"\n\"\"\"\n\nfrom collections import defaultdict\n\nINPUT_FILE = \"day_03/input.txt\""
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == \"0.625\"\n\"\"\"\n\nfrom __future__ import print_function\nimport sys\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == 2\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == 2\nassert solution('3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\\n') == 37"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3') == 2\nassert solution('3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0') == 37\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0 0 0 0 0 0 0 0 0') == '0'\nassert solution('0 0 0 0 0 0 1 0 0') == '0'\nassert solution('0 0 0 0 0 0 1 0 0') == '1'\nassert solution('0 0 0 0 0 0 1 0 0') == '2'\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3') == 2\n\"\"\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3') == '2'\nassert solution('3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0') == '37'\n\nprint(solution(stdin=input()))\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\\n16\"\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == '10\\n14\\n18\\n16'\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == '1\\n4\\n9\\n16'"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\") == '10\\n14\\n18\\n16'\n\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\"\nprint(\"Hooray!\")\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\\n16\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n\") == \"10\\n14\\n18\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n\") == \"1\\n4\\n9\\n16\"\n\"\"\"\n\nn, m = map(int, input().split())\ndials = input()\nfor _ in range(m):\n    a, b = map(int, input().split())\n    print(int(dials[a - 1]) + int(dials[b - 1]))\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '10\\n14\\n18'\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\"\n\"\"\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4') == '10\\n14\\n18'\n\"\"\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(    \"4 2 3\\n1 3\\n2 3\\n3 4\\n\"\n) == \"2\"\nassert solution(    \"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\"\n) == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\") == \"2\"\n\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\") == \"1\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '4 2 3\\n1 3\\n2 3\\n3 4\\n'\n) == '2'\nassert solution(\n    '5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n'\n) == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == 2\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4\\n') == '2'\n\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n') == '1'"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\nassert solution(\"5 3 4\\n1 3\\n2 3\\n3 4\\n\") == \"0\"\nassert solution(\"6 3 4\\n1 3\\n1 4\\n2 4\\n3 5\\n\") == \"0\"\nassert solution(\"7 3 4\\n1 3\\n2 4\\n3 5\\n4 6\\n\") == \"0\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"yes\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10000 0 10000 10000 0 10000') == 'yes'\nassert solution('9999 0 10000 0 0 1') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"10000 0 10000 10000 0 10000\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"no\"\nassert solution(\"9999 0 10000 0 0 1\\n10000 0 10000 0 0 1\\n0 0 0 1000 1000 0\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"yes\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"no\"\n\"\"\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0') == 'no'\nassert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0') == 'no'\nassert solution('1\\n9999 0 9999 0 0 1\\n10000 0 10000 0 0 1\\n2\\n9999 0 9998 0 0 1\\n9998 0 9999 0 0 1\\nSample Output 2:') == 'no'\nassert solution('1\\n9999 0 9999 0 0 1\\n10000 0 10000 0 0 1\\n2\\n9999 0 9998 0 0 1\\n9998 0 9999 0 0 1') == 'no'\nassert solution('1\\n9999 0 9999 0 0 1\\n10000 0 10000 0 0 1\\n2\\n9999 0 9998 0 0 1\\n9998 0 9999 0 0 1') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10000 0 10000 10000 0 10000\\n3') == 'no'\nassert solution('10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == 'no'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n\") == \"no\"\n\n\"\"\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == 'no'\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == 'no'\n\"\"\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('1 2\\n2 3\\n1 3\\n1 4\\n') == 'NO\\n'\nassert solution('3 2\\n1 3\\n2 4\\n1 2\\n') == 'NO\\n'\nassert solution('3 2\\n1 3\\n2 3\\n') == 'NO\\n'\n\"\"\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\"\n\"\"\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 1\") == \"YES\\n1 1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n1 4') == 'NO'\nassert solution('3 3\\n1 2\\n2 3\\n1 3') == 'YES\\n1 3\\n2 1\\n3 2'\n\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"NO\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == \"YES\\n1 4\\n2 3\\n3 1\"\n\"\"\""
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2\\n'\n\"\"\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\\n\"\n\nSample Input 3:\n4 3\n1 2\n1 3\n1 4\nSample Output 3:\nNO\n\nSample Input 4:\n4 3\n1 2\n1 3\n1 4\n2 4\nSample Output 4:\nNO\n\nSample Input 5:\n5 5\n1 2\n1 3\n1 4\n1 5\n1 6\n2 4\n3 4\n3 5\nSample Output 5:\nYES\n1 6\n2 3\n3 2\n4 1\n5 4\n\n\"\"\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2\\n'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'NO\\n'\nassert solution('10 10\\n1 10\\n10 1\\n10 10\\n2 10\\n10 2\\n10 10\\n5 10\\n10 5\\n5 5\\n5 10\\n') == 'YES\\n1 2\\n10 2\\n2 10\\n10 5\\n5 2\\n5 10\\n'\n\n\"\"\""
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n1 2\\n2 3') == 'YES\\n1 3\\n2 1\\n3 2'\n\nfrom functools import lru_cache\nimport sys"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2\\n'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'NO\\n'\nassert solution('1\\n') == 'NO\\n'\nassert solution('1\\n1\\n') == 'YES\\n1 1\\n'\nassert solution('1\\n2\\n') == 'NO\\n'\n\"\"\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\"\n\nSample Case:\n\nhttps://www.youtube.com/watch?v=ALCcNxHiN0M\n\nSample Input 2:\n6 6\n0 = 1\n1 = 2\n2 = 3\n3 = 4\n5 > 4\n0 = 5\n0 = 6\nSample Output 2:\ninconsistent\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\n\n\"\"\"\n\nimport re\nfrom typing import List, Union\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\nassert solution('2 2\\n0 = 1\\n1 = 1') == 'consistent'\nassert solution('5 5\\n0 > 1\\n1 > 2\\n2 > 3\\n3 > 4\\n4 = 5') == 'inconsistent'\nassert solution('2 2\\n0 = 1\\n1 = 1') == 'consistent'\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n0 1\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\"\n\"\"\"\n\nn, m = input().split()\n\nn, m = int(n), int(m)"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == 'inconsistent'\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == 'consistent'\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == 'inconsistent'\nassert solution(test_input_2) == 'consistent'"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n0 = 1\\n1 = 2') == 'inconsistent'\n\nassert solution('3 3\\n0 = 1\\n1 = 2\\n2 = 3') == 'consistent'\n\nassert solution('3 2\\n0 = 1\\n2 = 3') == 'inconsistent'\n\nassert solution('5 2\\n0 = 1\\n1 = 2\\n3 = 4\\n0 = 4') == 'inconsistent'\n\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 = 4') == 'consistent'"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\"\n\"\"\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\n\"\"\"\n\nimport numpy as np\n\nn = int(input())\ncoordinates = np.zeros((n, 3))\nfor i in range(n):\n    x, y, z = input().split()\n    coordinates[i] = np.array([int(x), int(y), int(z)])\n\nprint(np.max(np.linalg.norm(coordinates, axis=1)))\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\") == \"1.57079633\"\n\n-------\n>>> print(solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\"))\n1.57079633\n>>> print(solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n\"))\n41938.65135885\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\n\"\"\"\nimport math\nfrom functools import reduce"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\n\n\"\"\""
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == '1.57079633'\n\"\"\"\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\n\"\"\"\n\nfrom collections import Counter\n\nfrom decimal import Decimal"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n-1 0 0\\n2 0 1\\n1 -1 0\\n') == '0.785398163397448'\n\"\"\"\n\nimport math\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = [int(x) for x in INPUT_LINES[0].split(\" \")]\nX = INPUT_INT[0]"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 1\n1 1 2\n1 2 3\n2 2 2\n''') == '1.0\\n', 'Wrong answer'\n\nprint('Hooray!')\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nprint(\"Test pass.\")\n\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == 3\nassert solution('trutrutiktiktappop') == 4\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\", \"sabcabcfabc\") == 3\nassert solution(\"18\", \"trutrutiktiktappop\") == 4\n\"\"\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\", \"sabcabcfabc\") == 3\nassert solution(\"18\", \"trutrutiktiktappop\") == 4\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\nsabcabcfabc\") == \"3\"\nassert solution(\"18\\ntrutrutiktiktappop\") == \"4\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11','sabcabcfabc') == 3\nassert solution('18', 'trutrutiktiktappop') == 4\n\"\"\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11\\nsabcabcfabc') == '3'\nassert solution('18\\ntrutrutiktiktappop') == '4'\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\nsabcabcfabc\") == \"3\"\nassert solution(\"18\\ntrutrutiktiktappop\") == \"4\"\nassert solution(\"1\\nt\") == \"0\"\nassert solution(\"1\\nq\") == \"1\"\nassert solution(\"2\\nab\") == \"0\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom math import sqrt\nfrom typing import List, Tuple, Dict\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"3\"\nassert solution(\"sabcabcfabc\") == \"3\"\nassert solution(\"trutrutiktiktappop\") == \"4\"\n\nassert solution('11') == '3'\nassert solution('sabcabcfabc') == '3'\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n11\nsabcabcfabc\n''') == '3'\nassert solution('''\n18\ntrutrutiktiktappop\n''') == '4'\nassert solution('''\n7\nckvjxnkxmjkjszjf\n''') == '0'\n\nassert solution('''\n11\nsabcabcfabc\n''') == '3'\nassert solution('''\n18\ntrutrutiktiktappop\n''') == '4'\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\n\"\"\"\n\n\n\"\"\"\nsolution 1:\n\n\"\"\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 1') == 2\nassert solution('6\\n5 1 6 3 2 4') == 5\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == '2'\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == '5'\n\"\"\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n2 3 1') == 2\n\"\"\"\n\nn = int(stdin.readline().strip())\npositions = list(map(int, stdin.readline().strip().split()))\n\nfrom collections import defaultdict\npositions = defaultdict(int, enumerate(positions))"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == '2'\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == '5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\\n2 3 1\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 2 4') == '2'\nassert solution('10\\n8 5 4 7 3 9 6 10 2 1') == '8'\nassert solution('3\\n2 3 1') == '2'\n\n------Hint------\n1. Each shuffling of the deck can be written as a sequence of $n$ inversions. If we are given the permutation of the deck as $a_1, a_2, \\dotsc, a_n$, we want to find the number of inversions that occur during a shuffling.\n2. This can be done using the following algorithm:\n    - Find the index $i$ of the card that is not at its new location.\n    - Find the number of cards on the left of the card $i$ that are larger than $i$.\n    - Find the number of cards on the right of the card $i$ that are smaller than $i$.\n    - Return the sum of these three counts.\n3. To find the number of inversions in the entire deck, we need to find the number of inversions in each shuffling. For each shuffling, we will need to apply the algorithm to the permutation of the deck to find the number of inversions in the shuffling.\n4. To do the above, first determine the index $i$ of the card that is not at its new position. Then we can find the number of cards on the left and right of this card $i$ and use those to find the number of inversions. We can apply the same algorithm to the left and right permutations of the deck to compute the number of inversions in those permutations.\n5. If there are cards on the left and right of the card $i$, then there is one inversion for each of them.\n6. To determine the number of cards on the left of the card $i$, we can compute the number of cards smaller than $i$ on the left of the card $i$.\n7. To determine the number of cards on the right of the card $i$, we can compute the number of cards larger than $i$ on the right of the card $i$.\n8. Then we have one inversion for each of these three cases.\n\n\"\"\""
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\n\"\"\""
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n0 10\\n\") == 2\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom enum import Enum, unique\nfrom typing import List, Tuple\n\n\n@unique\nclass Charge(Enum):\n    START = \"start\"\n    STOP = \"stop\"\n\n\n@unique\nclass Event(Enum):\n    NOTE = \"note\"\n    SP_START = \"start\"\n    SP_END = \"stop\"\n\n\n@dataclass(frozen=True)\nclass EventRecord:\n    event_type: Event\n    time: int\n\n\n@dataclass(frozen=True)\nclass ChargeRecord:\n    charge: Charge\n    time: int\n\n\n@dataclass(frozen=True)\nclass DataPoint:\n    note: int\n    start_time: int\n    stop_time: int\n\n\n@dataclass(frozen=True)\nclass NoteDataPoint:\n    note: int\n    start_time: int\n    stop_time: int\n\n\n@dataclass(frozen=True)\nclass ChargeDataPoint:\n    charge: Charge\n    time: int\n\n\nclass Record:\n    def __init__(self, note: int, start_time: int, stop_time: int) -> None:\n        self.note = note\n        self.start_time = start_time\n        self.stop_time = stop_time\n\n    def __str__(self) -> str:\n        return f\"{self.note}, {self.start_time}, {self.stop_time}\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == '4'\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('5 1 5') == '11'\nassert solution('7 1 7') == '16'\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\nassert solution('6 1\\n0 10 20 26 40 50\\n0 40') == '9'\n\"\"\"\n\nfrom collections import deque\nfrom fractions import Fraction"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == 4\n\"\"\"\n\nnotes = [0]\nsp_phrases = []\nn, p = [int(s) for s in stdin.split()]\nfor _ in range(n):\n    start, end = [int(s) for s in stdin.split()]\n    notes.append(end)\n    sp_phrases.append((start, end))\n\nsp_phrases.sort()\n\nres = 0\nlast_sp_phrase_start = 0\n\nfor start, end in sp_phrases:\n    if start >= last_sp_phrase_start:\n        res += (end - start) // 1000 * 2\n        last_sp_phrase_start = end\n\nprint(res + notes[-1])\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\\n\") == '4'\nassert solution(\"6 1\\n0 10 20 26 40 50\\n0 40\\n\") == '9'\nassert solution(\"3 1\\n0 10 20\\n0 10\\n\") == '4'\nassert solution(\"6 1\\n0 10 20 26 40 50\\n0 40\\n\") == '9'\n\"\"\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]') == 'equal'\n\"\"\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\n-----Notes-----\n- This problem is a lot like List Composition, except the two list types are different.\n- Instead of a list of lists, we have a list of strings.\n\"\"\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]') == 'equal'\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\"\"\"\n\nimport collections\nimport random"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\n\"\"\"\n\nimport itertools\nfrom collections import Counter, defaultdict\nfrom typing import List\n\nfrom utils import read_input_as_int\n\nTEST_INPUT_FILE = 'test_input_part2.txt'\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\"\"\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == result\nprint(solution(stdin))\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"2 2\\n2 2\\n2 2 1 2\") == \"Oh no\"\n\n\"\"\"\nfrom __future__ import annotations\n\nimport sys\n\nfrom collections import defaultdict\n\nW, H = map(int, sys.stdin.readline().split())\nC = {(i, j) for i in range(1, W + 1) for j in range(1, H + 1)}\n\nenemy_dict = defaultdict(set)\nfor i in range(1, H + 1):\n    for j, e_i, b_i, a_i, h_i in map(int, sys.stdin.readline().split()):\n        enemy_dict[(i, j)].add((e_i, b_i, a_i, h_i))\n\npassage_dict = defaultdict(set)\nfor j in range(1, H + 1):\n    for i, e_i, b_i, a_i, h_i in map(int, sys.stdin.readline().split()):\n        passage_dict[(i, j)].add((e_i, b_i, a_i, h_i))\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 2\n3 2\n1 2 1 2\n2 3 1 2''') == 'Oh no'\n\nassert solution('''1 3\n3 2\n1 2 1 2\n2 3 1 2''') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n\"\"\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 2\n3 2\n1 2 1 2\n2 3 1 2''') == 'Oh no'\nassert solution('''1 3\n3 2\n1 2 1 2\n2 3 1 2''') == '1'\nassert solution('''1 3\n3 2\n1 2 1 2\n2 3 1 2''') == '2'\n\nprint('Success')\n'''\nGiven a cave system with n areas connected by m one-way passages, find the maximum health points Unnar can have if he has started in area 1, and wants to get to the last area. The cave is safe from enemies (thus the passages are safe too) and every passage contains an enemy, but the areas are safe.\n\nInput\nThe first line of the input contains two integers n and m where n is the number of areas and m is the number of passages. The next line contains n integers a_1, a_2,..., a_n where a_i is the attack point of the enemy in area i.\n\nOutput\nPrint a single integer, the maximum health points Unnar can have if he has started in area 1.\n\nConstraints\n1 \u2264 n, m \u2264 10^5\n1 \u2264 a_i \u2264 10^9\n1 \u2264 a_i + a_j \u2264 10^9 for all 1 \u2264 i < j \u2264 n\n\nExamples\nInput:\n4 3\n1 2 3 4\n\nOutput:\n7\n\nInput:\n4 1\n1 2 3 4\n\nOutput:\nOh no\n'''\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 1') == 'Oh no'\n\nimport sys; sys.setrecursionlimit(100000)\n\nn, m = map(int, input().split())\nedges = []\nfor _ in range(m):\n    edge = list(map(int, input().split()))\n    edges.append(edge)\n\nans = float('inf')\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '1 2\\n3 2\\n1 2 1 2\\n2 3 1 2'\n) == 'Oh no'\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\n\"\"\"\n\n\n\"\"\"\nSort out the enemies, and find the enemies that arent in the enemy list\nThen find the shortest path from unnar to the closest enemy that isnt in the enemy list\nTime: O(n)\nSpace: O(n)\n\"\"\""
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(None) == 'impossible'"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2''') == '3'\nassert solution('''5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1''') == 'impossible'\n'''\nhttps://www.algoexpert.io/questions/Minimum%20Number%20Of%20Lounges\n\nIf the flight paths are given as a sequence of numbers, each number represents the number of lounges that are required at that node. For example, the flight paths could be:\n\n1 2 3 4\n3 1 2 4\n1 3 1 2\n1 2 3 4\n3 4 3 1\n1 4 1 2\n1 3 2 4\n1 2 3 4\nGiven the above flight paths, the minimum number of lounges required to satisfy the demand is 3.\n'''\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\\\n1 2 2\\\\n2 3 1\\\\n3 4 1\\\\n4 1 2') == '3'\nassert solution('5 5\\\\n1 2 1\\\\n2 3 1\\\\n2 4 1\\\\n2 5 1\\\\n4 5 1') == 'impossible'\nassert solution('5 5\\\\n1 2 1\\\\n2 3 1\\\\n2 4 1\\\\n2 5 1\\\\n4 5 2') == 'impossible'\nassert solution('5 5\\\\n1 2 1\\\\n2 3 1\\\\n2 4 1\\\\n2 5 1\\\\n4 5 1') == '3'\nassert solution('5 5\\\\n1 2 1\\\\n2 3 1\\\\n2 4 1\\\\n2 5 1\\\\n4 5 2') == 'impossible'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2''') == '3'\n\nassert solution('''5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1''') == 'impossible'\n\nassert solution('''5 5\n1 2 1\n2 3 1\n3 4 1\n4 1 2\n4 5 1''') == 'impossible'\n\nassert solution('''5 5\n1 2 1\n2 3 1\n3 4 1\n4 1 2\n4 5 1''') == 'impossible'\n\nassert solution('''4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2''') == 'impossible'"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\n\na1, b1 = 1, 2\na2, b2 = 2, 3\n\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\nairports = []\nfor _ in range(m):\n    airports.append([int(x) for x in input().split()])\n\nans = []\n\nfor i in range(m):\n    if airports[i][2] == 0:\n        ans.append(airports[i][1])\n\nprint(\"{}\".format(len(set(ans))))"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('22') == '4'\nassert solution('1233') == '3'\nassert solution('1 22') == '3'\nassert solution('113322') == '3'\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 1 3\") == \"4\"\nassert solution(\"22\") == \"4\"\nassert solution(\"2222\") == \"4\"\nassert solution(\"22 222\") == \"4\"\nassert solution(\"2 2 2 2 3\") == \"3\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 1 1 3') == '2'\nassert solution('1\\n22') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('22') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 1 3') == 2\nassert solution('22') == 4\n\nprint(solution(input()))\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 1 1 1 3''') == '2'\nassert solution('''1\n22''') == '4'\nassert solution('''2\n1 1''') == '2'\nassert solution('''2\n2 2''') == '1'\nassert solution('''5\n2 1 1 1 3\n1 1 2 2 3\n1 1 2 2 2\n3 3 3 3 3\n1 1 2 3 3''') == '2'\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 1 1 1 3\n''') == '2'\nassert solution('''\n1\n22\n''') == '4'\nassert solution('''\n100\n
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 1 3') == 4\n\"\"\""
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 1 3\") == \"2\"\nassert solution(\"22\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1 1 3') == 2\nassert solution('22') == 4\n\"\"\"\n\nimport unittest\nfrom collections import deque\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 5') == '3'\nassert solution('4 1 2 3') == '2'\nassert solution('1 2 3 4') == '1'\nassert solution('2 3 4 5') == '1'\nassert solution('3 3 3') == '0'"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 5\\n\") == \"3\"\nassert solution(\"4 1 2 3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 1 5') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('7') == '7'\nassert solution('1 1 1 1 1 1 1') == '7'\nassert solution('1 1 2 1 3 3 4 1 1') == '7'\nassert solution('1 2 2 3 2 3 4 3 5 3 5') == '7'\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 5\\n\") == \"3\"\n\nassert solution(\"4 1 2 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3 1 5\n''') == '3'\nassert solution('''\n4\n1 2 3 4\n''') == '2'\nassert solution('''\n5\n1 2 3 4 5\n''') == '4'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '10'\nassert solution('''\n7\n3 2 5 1 4 7 8\n''') == '2'\n\nprint(solution(input()))\n\n----"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 5\\n') == '3'\nassert solution('4\\n1 2 3 4\\n') == '2'\n\"\"\"\n\nn = int(stdin.readline().strip())\nlst = list(map(int, stdin.readline().split()))\n\nresult = 0\nfor i in range(1, len(lst)):\n    if (lst[i] % 2!= 0) and (lst[i-1] % 2!= 0):\n        result += 1\nprint(result)"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 5\") == 3\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 5') == '3'\nassert solution('4 1 3 2') == '2'\nprint('Successfully passed all tests')\n\n-----Challenge-----\nImplement the game logic without using a loop.\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a+b-c\") == \" -d- \"\nassert solution(\"a-b+d-c\") == \"+ d -\"\nassert solution(\"ab-cd\") == \"+ d -\"\nassert solution(\"a+b-c\") == \" - d- \"\n\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"<empty>\"\nassert solution(\"a-b+d-c\") == \"- +d-\"\nassert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a+b-c\") == \"- +d-\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a+b-c) in [\"- +d-\", \"0 +e-\", \"0 -f-\"]\nassert solution(a-b+d-c) in [\"0 +e-\", \"0 -f-\"]\nassert solution(knuth-morris-pratt) in [\"<any>\", \"<empty>\"]\nassert solution(knuthmorrispratt) in [\"<any>\", \"<empty>\"]\nassert solution(a+b-c) == \"- +d-\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a+b-c) == -+d-\nassert solution(a-b+d-c) == +-d-\nassert solution(a+b-c) == -+d-\nassert solution(a-b+d-c) == +-d-\n\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a+b-c\") == '- +d-'\nassert solution(\"a-b+d-c\") == '- +d-'\nassert solution(\"a-b-c\") == '<any> <empty>'\nassert solution(\"a-b-c-d\") == '<any> <empty>'\nassert solution(\"a+b-c-d\") == '- +d-'\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\nassert solution(\"a-b-c\") == \"--\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a+b-c\") == \"-\" + \"d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\nassert solution(\"a+b-c\") == \"-\" + \"d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\nassert solution(\"a+b-c\") == \"-\" + \"d-\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a+b-c\") == \"-\" + \"d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a+b-c\") == \"-\" + \"d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\nassert solution(\"a+b-c\") == \"-\" + \"d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a+b-c\") == \"-\" + \"d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\n\"\"\""
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n'\nassert solution('3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n'\n\n\"\"\""
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\\n6\"\nassert solution(\"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\n\"\"\"\n\nclass Solution:\n    def __init__(self, input_):\n        self.input = input_\n        self.frogs, self.number_of_frogs = self.frogs_and_number_of_frogs()\n        self.frogs_x, self.frogs_y = self.frogs_x_and_frogs_y()\n        self.least_distance = self.least_distance_to_the_right_most()\n\n    def frogs_and_number_of_frogs(self):\n        frogs_str, number_of_frogs_str = self.input.split('\\n')\n        frogs = [int(frog) for frog in frogs_str.split()]\n        number_of_frogs = int(number_of_frogs_str)\n        return frogs, number_of_frogs\n\n    def frogs_x_and_frogs_y(self):\n        frogs_x, frogs_y = [], []\n        for index, frog in enumerate(self.frogs):\n            frogs_x.append(frog)\n            frogs_y.append(index)\n        return frogs_x, frogs_y\n\n    def least_distance_to_the_right_most(self):\n        least_distance = self.frogs[-1]\n        return least_distance\n\n    def calculate_distance(self, frog_x, frog_y):\n        distance = self.least_distance - frog_x\n        return distance\n\n    def calculate_new_frogs_x_y(self, frog_x, frog_y):\n        new_frogs_x, new_frogs_y = [], []\n        for i in range(len(self.frogs)):\n            if i!= frog_y:\n                new_frogs_x.append(self.frogs[i])\n                new_frogs_y.append(i)\n        return new_frogs_x, new_frogs_y\n\n    def calculate_jumps(self, new_frogs_x, new_frogs_y, new_frogs, distance):\n        jumps = 0\n        for i in range(len(new_frogs)):\n            if i == 0:\n                new_frogs_x[i] += distance\n            else:\n                new_frogs_x[i] += distance + 1\n            jumps += 1\n        return jumps\n\n    def calculate_and_find_min_jumps(self, new_frogs_x, new_frogs_y, new_frogs):\n        total_jumps = 0\n        for i in range(len(new_frogs_x)):\n            if i == 0:\n                new_frogs_x[i] += 1\n                total_jumps += 1\n            else:\n                new_frogs_x[i] += 1\n                total_jumps += 1\n        return total_jumps\n\n    def find_min_jumps(self, new_frogs_x, new_frogs_y, new_frogs):\n        total_jumps = self.calculate_and_find_min_jumps(new_frogs_x, new_frogs_y, new_frogs)\n        return total_jumps\n\n    def calculate_and_find_min_jumps_for_right_most_x(self, new_frogs_x, new_frogs_y, new_frogs, distance):\n        jumps = 0\n        for i in range(len(new_frogs_x)):\n            if i == 0:\n                new_frogs_x[i] += distance\n                jumps += 1\n            else:\n                new_frogs_x[i] += distance + 1\n                jumps += 1\n        return jumps\n\n    def find_min_jumps_for_right_most_x(self, new_frogs_x, new_frogs_y, new_frogs):\n        total_jumps = 0\n        for i in range(len(new_frogs_x)):\n            if i == 0:\n                new_frogs_x[i] += 1\n                total_jumps += 1\n            else:\n                new_frogs_x[i] += 1\n                total_jumps += 1\n        return total_jumps\n\n    def calculate_and_find_min_jumps"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0\\n1\\n3\\n2\\n3\\n5\\n3'\nassert solution('3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10'\n\n\"\"\""
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0\\n0') == '0'\nassert solution('0 0') == '0'\nassert solution('1 1') == '1'\nassert solution('1 1\\n0') == '1'\n\n'''\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    1 1\n    0\n    7\n    t 0\n    t 1\n    t 2\n    t 3\n    t 4\n    t 5\n    t 6\n    \"\"\"\n) == \"\"\"\n0\n1\n3\n2\n3\n5\n3\n\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n2\\n3\\nt1\\n5\\n3\\nt2\\n5\\n3\\n0\\n3\") == \"0\\n1\\n2\\n3\\n5\\n3\\n0\\n3\"\nassert solution(\"2 0\\n2\\n2\\n0\\n2\") == \"0\\n2\\n2\\n0\\n2\"\nassert solution(\"1 1\\n0\\n5\\nt1\\n5\\n3\\nt2\\n5\\n3\\n0\\n3\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\\n0\\n3\"\nassert solution(\"1 1\\n0\\n5\\nt1\\n5\\n3\\nt2\\n5\\n3\\n0\\n3\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\\n0\\n3\"\nassert solution(\"1 1\\n0\\n5\\nt1\\n5\\n3\\nt2\\n5\\n3\\n0\\n3\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\\n0\\n3\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n'\nassert solution('3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n'\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\"\nassert solution(\"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\nassert solution(\"3 1\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\nassert solution(\"3 2\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\nassert solution(\"3 3\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0'\nassert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '1'\nassert solution('1 1\\n0\\n7\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '3'\nassert solution('1 1\\n0\\n7\\nt 10\\nt 11\\nt 12\\nt 13\\nt 14\\nt 15') == '9'\nassert solution('1 1\\n0\\n7\\nt 10\\nt 11\\nt 12\\nt 13\\nt 14\\nt 15') == '9'\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6''') == '0\\n1\\n3\\n2\\n3\\n5\\n3'\nassert solution('''3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10''') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10'\n\n\"\"\"\nA recursive Python 3 program to find the minimum\nnumber of jumps to reach the final position\n\"\"\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\n\"\"\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2\\n4 6'\n\nassert solution('''\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '0'\n\nassert solution('''\n4 3\n1 2 1\n1 3 1\n1 4 1\n2 3 1\n3 4 1\n''') == '1'\n\nassert solution('''\n4 2\n1 2 1\n1 3 1\n1 4 1\n2 3 1\n3 4 1\n''') == '0'\n\nassert solution('''\n3 3\n1 2 1\n2 3 1\n3 1 1\n''') == '2'\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n\nassert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '2\\n4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '0\\n'\n\"\"\"\n\nfrom typing import Tuple\n\nfrom collections import defaultdict\n\nINF = float(\"inf\")\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\\n\"\nassert solution(\"1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n4 6 1\\n1 7 1\") == \"2\\n4 6\"\nassert solution(\"7 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n4 6 1\\n1 7 1\") == \"0\\n\"\n\n\"\"\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'\n\n----Problem-----\n\nGiven:\n\nA network with N switches\nCables between them, with lengths l_ij and weights w_ij\n\nWhat:\n\nThe minimum path lengths between each switch, and the number of switches that have no paths\n\nWhy:\n\nWe can solve this problem using a shortest path algorithm.\n\nHow:\n\nWe can build a graph that represents the network, and then use a shortest path algorithm to solve this problem.\n\nFind:\n\nA set of nodes U in the graph, such that it contains all switches, and no other node\nFind:\n\nThe number of nodes in the set U\n\nFind:\n\nThe minimum distance between every pair of nodes, and the number of such pairs\n\nAuxiliary:\n\nThe number of switches\n\n-----Notes-----\n\nAuxiliary and output:\n\nAn auxiliary file in.txt format contains information about the graph.\n\nAn output file in.txt format contains information about the solution.\n\nEach line of the.txt file is formatted as follows:\n\n<index of the node> <index of the node> <length between the two nodes> <weight between the two nodes>\n\nFor example:\n\n1 2 5 10\n\n-----Sample Output-----\n4\n0\n1 4 6\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"2\\n4 6\\n\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"0\\n\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '2\\n4 6\\n'\nprint('Test pass.')\n\n---"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"2\\n4 6\\n\"\nassert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"0\\n\"\nassert solution(\"6 7\\n1 2 2\\n1 3 1\\n2 4 1\\n3 5 2\\n2 6 1\\n1 5 3\\n4 5 3\\n1 6 4\\n\") == \"0\\n\"\nassert solution(\"5 7\\n1 2 2\\n1 3 1\\n2 4 1\\n3 5 2\\n2 6 1\\n1 5 3\\n4 5 3\\n1 6 4\\n\") == \"0\\n\"\nassert solution(\"7 8\\n1 2 2\\n1 3 1\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"0\\n\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(r'input.txt').read()) == open(r'output.txt').read()\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"4\\n5\\n6\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"1\\n2\\n3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '4\\n5\\n6\\n1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '1\\n2\\n3\\n1\\n2\\n3\\n4\\n5\\n6\\n'\nassert solution('1\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '4\\n5\\n6\\n1\\n2\\n3\\n'\nassert solution('1\\n1 1\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '1\\n2\\n3\\n4\\n5\\n6\\n'\nassert solution('2\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '1\\n2\\n3\\n4\\n5\\n6\\n'\nassert solution('2\\n1 1\\n2 1\\n2 2\\n2 3\\n1 2\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '1\\n2\\n3\\n4\\n5\\n6\\n'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1\\n2 1') == '4'\nassert solution('5\\n1 1\\n2 1') == '5'\nassert solution('6\\n1 1\\n2 1') == '6'\nassert solution('6\\n1 2\\n2 1') == '5'\nassert solution('6\\n2 2\\n2 1') == '5'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == \"4\\n5\\n6\\n1\\n2\\n3\""
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n4\\n5\\n6\") == \"4\\n5\\n6\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPC') == '3'\nassert solution('HPPPC') == '5'\nassert solution('CPCP') == '3'\n\n\"\"\"\n\nfrom typing import Dict, List, Set, Tuple\nfrom collections import deque\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"PPCCCC\") == 8\nassert solution(\"CCCCCC\") == 5\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPPPCCCC\") == 8\nassert solution(\"PP\") == 0\n\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('CCP') == 1\nassert solution('PPP') == 4\nassert solution('C') == 0\nassert solution('PP') == 2\nassert solution('PPP') == 6\n\"\"\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPCCCC\") == 8\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPPC\") == 3\nassert solution(\"C\") == 0\n\nprint(solution(\"CPCC\"))\nprint(solution(\"PPPC\"))\nprint(solution(\"C\"))\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPC\") == \"8\"\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str1) == expected_value\nassert solution(str2) == expected_value\n\n'''\n\nimport itertools"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"PPPC\") == \"8\"\nassert solution(\"CCCCP\") == \"3\"\nassert solution(\"C\") == \"0\"\nassert solution(\"P\") == \"1\"\n\nassert solution(\"PPP\") == \"3\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('PPP') == 1\nassert solution('C') == 0\nassert solution('PPPPP') == 4\nassert solution('PPCC') == 2\nassert solution('CCPP') == 3\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n3\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"1 2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n3\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == \"1 2 3\""
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"3\\n\"\nassert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n\") == \"2 3 1\\n\"\nassert solution(\"3 2 1\\n1 2\\n3 2\\n2\\n\") == \"2 1 3\\n\"\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n1 2\\n2 3\\n2\\n') == '1 2 3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n3\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == \"1 2 3\""
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\\n1 3\\n2 3\\n3\") == '3'\n\n\"\"\"\n\nfrom queue import Queue\n\nD, M, N = list(map(int, stdin.readline().strip().split()))\n\nimplications = []\nfor i in range(M):\n    implications.append(list(map(int, stdin.readline().strip().split())))\n\nevents = {}\n\nfor i in range(N):\n    events[i + 1] = set()\n\nfor i in range(M):\n    events[implications[i][0]].add(implications[i][1])\n    events[implications[i][1]].add(implications[i][0])\n\nq = Queue()\nq.put(1)\n\nknow_events = set()\n\nwhile not q.empty():\n    temp = set()\n    while not q.empty():\n        curr = q.get()\n        for event in events[curr]:\n            if event not in know_events:\n                temp.add(event)\n                know_events.add(event)\n                q.put(event)\n    q = Queue()\n    q.put(temp)\n\nprint(*sorted(list(know_events)))\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '3'\nassert solution('''3 2 1\n1 3\n2 3\n3\n1 2\n1 3\n2\n3''') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n1\") == \"3 1 2\"\n\"\"\"\n\nD, M, N = map(int, input().split())\ngraph = [[] for _ in range(D)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    graph[b - 1].append(a - 1)\n\nfor _ in range(N):\n    x = int(input()) - 1\n    res = []\n    q = [x]\n    while q:\n        nxt = []\n        for i in q:\n            res.append(i + 1)\n            for g in graph[i]:\n                nxt.append(g)\n        q = nxt\n    print(*res)\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 0 1 1 1') == 4\nassert solution('7 2\\n1 3 6 1 6 9 4 5') == 42\nassert solution('5 2\\n1 0 1 1 1') == 4\n\nimport random\n\nrandom.seed(1)"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\n\nassert solution('5 1\\n1 0 1 1 1') == '4'\n\nassert solution('4 5\\n3 4 2 1') == '60'\n\nassert solution('4 5\\n2 1 1 1') == '0'\n\nassert solution('4 5\\n0 1 1 1') == '0'\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nprint(solution(input()))\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('5 1\\n1 0 1 1 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\", \"2 4 2 3 4\") == \"39\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 4 2 3 4') == '39'\nassert solution('4 1\\n1 0 1 1 1') == '4'\nassert solution('10 3\\n2 4 2 3 4 5 6 7 8 9 10') == '254'\nassert solution('10 5\\n2 4 2 3 4 5 6 7 8 9 10') == '1005'\nassert solution('10 1\\n1 1') == '1'\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\n\n\"\"\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('5 1\\n1 0 1 1 1') == '4'\n\"\"\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3\n2 4 2 3 4''') == '39'\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\nxx.\\nxxx\\n...\\n\") == \"1 1 2\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\\n\") == \"1 1 2\\n2 4 3\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\nxx.\\nxxx\\n...\") == \"1 1 2\\n2 3 1\"\nassert solution(\"4 6\\nxx....\\nxxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\\n2 4 3\"\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\nxxx\\nxxx\\n...\\nxxx') == '1 1 2\\n2 3 1'\nassert solution('4 6\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx') == '1 1 2\\n2 4 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\nxx\nxxx\n...''') == '''1 1 2\n2 3 1'''\n\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx''') == '''1 1 2\n2 4 3'''\n\nassert solution('''10 10\nxx.xx.x\nxx...xx\n...xxx.x\n...xxxxx\nxxxxx.x\nxx.xx.x\nxxxx.xx\nxx...xx\nxxxxx.x\nxx.xx.x''') == '''6 6 4\n3 9 7\n5 8 3\n9 9 7'''\n\nassert solution('''4 6\nxxx\nxx.\nxxxx\nxxxx''') == '''1 2 1\n1 3 1\n2 1 2\n2 2 3'''\n\nassert solution('''4 6\nxxxx\nxxxx\nxxxx\nxxxx''') == '''1 1 2\n1 1 3\n1 1 4'''"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\nxx\\nxxx\\n...') == \"1 1 2\"\nassert solution('4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx') == \"1 1 2\\n2 4 3\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".x....x\") == \"1 1 2\"\nassert solution(\"....x\") == \"1 2 1\"\n\"\"\"\nimport numpy as np\nimport math\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nxx\\nxxx\\n...\") == \"1 1 2\\n2 3 1\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...\") == \"1 1 2\\n2 4 3\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nxx.\\nxxx\\n...\") == \"1 1 2\"\nassert solution(\"4 6\\nxx....\\nxxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nxxx\\n...\\n\") == \"1 1 2\\n2 3 1\"\nassert solution(\"4 6\\nxxx....\\nxx.xxx\\n...xxx\\n...xxx\\n\") == \"1 1 2\\n2 4 3\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\nxx\\nxxx\\n...') == '1 1 2'\nassert solution('4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx') == '1 1 2'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n0 0 0\\n0 1 0') == '2'\n\"\"\"\n\ninput()\nA, B = map(int, input().split())\n\nturns = dict()\n\nfor i in range(int(input())):\n    L, R, T = map(int, input().split())\n    if L not in turns:\n        turns[L] = dict()\n    if T == 1:\n        turns[L][R] = 1\n    if R not in turns:\n        turns[R] = dict()\n    if T == 1:\n        turns[R][L] = 1\n\ndone = {A, B}\ntodo = [A, B]\n\nwhile todo:\n    for i in range(len(todo)):\n        now = todo.pop(0)\n        if now in turns:\n            for j in turns[now]:\n                if j not in done:\n                    todo.append(j)\n                    done.add(j)"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\nassert solution(\"3 0 1\\n1 1 1\\n0 0 0\") == \"1\"\n\"\"\""
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1 2\n1 2 1\n0 2 0\n0 1 0''') == 'indistinguishable'\n\"\"\""
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\\n\") == \"indistinguishable\"\n\"\"\"\n\nA, B, n = list(map(int, input().split()))\nm = 0\n\nfor i in range(n):\n    a, b, t = list(map(int, input().split()))\n    if t:\n        m += (A - a) + (B - b)\n    else:\n        m += max(A - a, B - b)\n\nprint(m)"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == 'indistinguishable'\n\"\"\""
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == 'indistinguishable'\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == '0'\nassert solution(\"2 0 1\\n1 0 1\\n1 0 1\") == '0'\nassert solution(\"2 1 1\\n1 0 1\\n1 1 1\") == '0'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 0\\n1 1 1\\n0 0 0') == '0'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, a, b = [int(i) for i in stdin.split('\\n')[0].split()]\n        # print(n, a, b)\n        intersections = stdin.split('\\n')[1:]\n        # print(intersections)\n        if a > b:\n            a, b = b, a\n        print(a, b)\n        is_at_tower = False\n        count_of_turns = 0\n        for intersection in intersections:\n            left, right, is_tower = [int(i) for i in intersection.split()]\n            # print(left, right, is_tower)\n            if left == a and right == b:\n                continue\n            if is_tower and (left == b or right == a):\n                is_at_tower = True\n                break\n            elif not is_tower and (left == a or right == b):\n                is_at_tower = False\n                break\n            else:\n                count_of_turns += 1\n        print(count_of_turns)\n        return 'indistinguishable' if is_at_tower else str(count_of_turns)\n\n\nassert Solution().solution(stdin='3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == '0'\nassert Solution().solution(stdin='2 0 1\\n1 1 1\\n0 0 0') == '0'\nassert Solution().solution(stdin='3 0 2\\n1 1 1\\n0 0 0') == 'indistinguishable'\nassert Solution().solution(stdin='2 1 0\\n1 1 1\\n0 0 0') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1 2\n1 2 1\n0 2 0\n0 1 0''') == 'indistinguishable'\nassert solution('''5 5 6\n6 5 5\n1 1 1\n0 1 0\n0 0 0\n1 1 1''') == '0'\nassert solution('''5 5 4\n6 5 5\n1 1 1\n0 1 0\n0 0 0\n1 1 1''') == '2'\nassert solution('''10 10 10\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0''') == 'indistinguishable'\nassert solution('''5 5 4\n6 5 5\n1 1 1\n0 1 0\n0 0 0\n1 1 1\n1 1 1''') == '3'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1110\") == \"-1\"\nassert solution(\"1010\") == \"1110\"\nassert solution(\"1011\") == \"-1\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"001100\") == \"1100\"\nassert solution(\"011110\") == \"111110\"\nassert solution(\"101010\") == \"1110110\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('1001') == '0111'\nassert solution('1111') == '1110'\nassert solution('1110') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"1110\"\nassert solution(\"1100\") == \"1110\"\nassert solution(\"1110\") == \"1111\"\n\nassert solution(\"0111\") == \"1111\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n0110\n1001\n\"\"\") == \"\"\"\n1111\n0111\n1110\n1111\n\"\"\"[1:]\nassert solution(\n\"\"\"\n0\n1\n\"\"\") == \"\"\"\n-1\n\"\"\"[1:]\nassert solution(\n\"\"\"\n0110\n1001\n\"\"\") == \"\"\"\n1111\n0111\n1110\n1111\n\"\"\"[1:]\nassert solution(\n\"\"\"\n0\n1\n\"\"\") == \"\"\"\n-1\n\"\"\"[1:]\nassert solution(\n\"\"\"\n0110\n1001\n\"\"\") == \"\"\"\n1111\n0111\n1110\n1111\n\"\"\"[1:]\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1010\") == \"1110\"\nassert solution(\"1111\") == \"1111\"\nassert solution(\"0111\") == \"1110\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1110\") == \"1110\"\nassert solution(\"1111\") == \"1111\"\n\nassert solution(\"0111\") == \"1110\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('1010') == '1110'\nassert solution('1011') == '1111'\nassert solution('1100') == '1110'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0110\" + \"1001\") == \"1111\"\nassert solution(\"10010\" + \"01110\") == \"11110\"\nassert solution(\"10010\" + \"01110\") == \"11110\"\n\"\"\""
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0110') == '1111'\n\"\"\""
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n\"\"\"\n\nfrom typing import List\nimport sys\n\nsys.setrecursionlimit(100010)\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100010\") == \"+10\"\nassert solution(\"100010\") == \"+10\"\nassert solution(\"100010\") == \"+10\"\n\"\"\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\"\n\"\"\""
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '+1'\nassert solution('-1') == '-1'\nassert solution('2') == '+010'\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11010') == '0-0-0-0-0-1-0-0-0-0'\nassert solution('11011') == '0-0-0-0-0-0-0-0-0-1'\nassert solution('101010') == '0-0-0-0-0-0-0-1-0-0'\nassert solution('100100') == '0-0-0-0-0-0-1-0-0-0'\nassert solution('111111') == '0-0-0-0-0-0-0-0-0-0'\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101\") == \"11101\"\nassert solution(\"111111111111111111111111111111\") == \"+111111111111111111111111111111\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"+0000\"\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+0-0'\n\"\"\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\"\nassert solution(\"101010\") == \"+000-0\"\nassert solution(\"111011\") == \"+001-0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == expected_result\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_right\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\"\"\") == '9'\nprint(\"All tests passed.\")\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\") == \"9\"\n\n\"\"\"\n\nfrom typing import List\nfrom sys import stdin\nimport collections\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\nassert solution('2 1 1 1\\n2 2\\n1\\n1\\n1 2 1') == '2'\n\nassert solution('2 1 1 1\\n2 2\\n1\\n1\\n1 2 1') == '2'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\n\"\"\""
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\n\nassert solution('1\\n2') == ''\nassert solution('1 2\\n') == ''"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 7 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\nassert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"10\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\nassert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"10\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\"\nimport unittest"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == '2'\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == '7'\n\"\"\""
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\n\"\"\"\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split()]\nans = 0\nfor i in range(n-1):\n    ans += min(a[i], a[i+1])\n\nprint(ans)"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\nprint(\"Passed\")\n\n'''"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\n\"\"\"\nimport sys\nfrom itertools import groupby\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"D 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\n\nassert solution(\"D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\"\n\"\"\"\n\nn = int(stdin.readline())\n\nqueue = []\nprevious = None\n\nfor _ in range(n):\n    line = stdin.readline().split()\n\n    if line[0] == \"D\":\n        previous = [int(line[1]), int(line[2])]\n    elif line[0] == \"P\":\n        queue.append([previous, int(line[1])])"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == '3\\n1\\nNE'\n\n-----\nimport sys"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nD 2 2\\nD 1 3\\nP 1\\nP 3\\nP 2\\n\") == \"3\"\n\nassert solution(\"4\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"2\"\n\nassert solution(\"4\\nD 2 2\\nD 1 3\\nP 2\\nP 1\\nP 3\\n\") == \"1\"\n\nassert solution(\"5\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\nP 4\\n\") == \"NE\"\n\nassert solution(\"5\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\nP 1\\n\") == \"1\""
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nD 3 1\\nD 1 3') == '3'\nassert solution('6\\nD 1 1\\nD 2 4\\nD 3 8\\nD 1 1\\nD 3 8\\nP 4\\nD 6 2\\nP 1\\nP 2\\nP 3') == '3\\n1'\nassert solution('7\\nD 3 9\\nD 1 4\\nD 1 5\\nD 1 6\\nD 2 4\\nD 2 5\\nD 2 6\\nD 3 2\\nP 2\\nP 1\\nP 4\\nP 3') == '2\\n3\\n1'\nassert solution('8\\nD 1 1\\nD 2 4\\nD 3 8\\nD 1 1\\nD 2 4\\nD 3 8\\nD 1 1\\nD 2 4\\nD 3 8\\nP 1\\nP 2\\nP 4\\nP 3') == '2\\n3\\n1'\nassert solution('10\\nD 1 1\\nD 2 4\\nD 3 8\\nD 1 1\\nD 2 4\\nD 3 8\\nD 1 1\\nD 2 4\\nD 3 8\\nP 2\\nP 1\\nP 4\\nP 3') == '2\\n3\\n1'\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\n\nassert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"3\"\n\"\"\"\nSolution 2"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\\nNE\\nNE\"\n\nprint(solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\"))\n\"\"\"\n\nfrom typing import List, Dict, Set\n\nimport sys\nimport queue\n\nclass Solution:\n    def __init__(self, N: int):\n        self.n: int = N\n        self.graph: List[Set[int]] = [[] for _ in range(N)]\n        self.reverse_graph: List[Set[int]] = [[] for _ in range(N)]\n\n    def addEdge(self, i: int, j: int) -> None:\n        self.graph[i].append(j)\n        self.reverse_graph[j].append(i)\n\n    def removeEdge(self, i: int, j: int) -> None:\n        self.graph[i].remove(j)\n        self.reverse_graph[j].remove(i)\n\n    def connect(self, i: int, j: int) -> None:\n        self.removeEdge(i, j)\n        self.addEdge(i, j)\n\n    def ask(self, i: int) -> int:\n        return self.graph[i][0]\n\n    def connect_util(self, i: int, j: int) -> None:\n        self.connect(i, j)\n        self.connect(j, i)\n\n    def ask_util(self, i: int, j: int) -> None:\n        self.connect_util(i, j)\n        self.connect_util(j, i)\n\n    def ask_all(self, i: int) -> int:\n        return self.graph[i]\n\n    def run(self, stdin: List[str]) -> None:\n        for line in stdin:\n            if line.startswith('D'):\n                line = line.split(' ')\n                self.ask(int(line[1]))\n            elif line.startswith('P'):\n                line = line.split(' ')\n                self.ask_util(int(line[1]) - 1, int(line[2]) - 1)\n        for i in range(self.n):\n            print(self.ask(i))"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1\\n2\\n3\\n') == '1'\n\nassert solution('4 2\\n1\\n2\\n3\\n') == 'NE'\n\nassert solution('1 3\\n1\\n2\\n3\\n') == '2'\n\nassert solution('1 8\\n1\\n2\\n3\\n') == '3'\n\nassert solution('1 4\\n1\\n2\\n3\\n') == 'NE'"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"\"\"NE\nNE\nNE\n\"\"\"\nassert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"\"\"3\n1\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\\n1\"\nassert solution(\"8\\nD 3 1\\nD 1 2\\nD 1 3\\nP 4\\nD 2 2\\nD 1 4\\nD 3 4\\nD 4 5\\nD 1 5\\nP 2\\nD 3 3\\nD 2 3\\nD 2 4\\nP 4\\nD 5 3\\nD 1 2\\nD 5 5\\nD 4 4\\nD 5 4\\nP 2\\nD 2 2\\nD 4 4\\nD 1 1\\nP 2\\nD 3 3\\nD 2 4\\nD 4 5\\nD 5 3\\nD 5 5\\nP 4\") == \"1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"9\\nD 3 1\\nD 2 2\\nD 1 3\\nP 4\\nD 2 2\\nD 1 4\\nD 3 4\\nD 4 5\\nD 1 5\\nP 2\\nD 3 3\\nD 2 3\\nD 2 4\\nP 4\\nD 5 3\\nD 1 2\\nD 5 5\\nD 4 4\\nD 5 4\\nP 2\\nD 2 2\\nD 4 4\\nD 1 1\\nP 2\\nD 3 3\\nD 2 4\\nD 4 5\\nD 5 3\\nD 5 5\\nP 4\\nD 6 2\\nP 2\\nD 2 2\\nP 2\\nD 3 3\\nD 2 4\\nD 4 5\\nD 5 3\\nD 5 5\\nP 4\") == \"3\\n1\\n2\\n1\\n1\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example1) == expected1\nassert solution(example2) == expected2\nassert solution(example3) == expected3\nassert solution(example4) == expected4\nassert solution(example5) == expected5\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\nfrom math import ceil\n\nrows, cols, fish, seconds = map(int, stdin.readline().strip().split())\n\noriginal_row, original_col = map(int, stdin.readline().strip().split())\n\nmatrix = []\n\nfor _ in range(rows):\n    matrix.append(list(map(int, stdin.readline().strip().split())))\n\ntime = 0\nfish_count = 0\nrow = original_row\ncol = original_col\nwhile time < seconds:\n    matrix[row][col] -= 1\n\n    if matrix[row][col] == 0:\n        fish_count += 1\n        \n    if row > 0:\n        matrix[row][col] -= 1\n        if matrix[row][col] == 0:\n            fish_count += 1\n        row -= 1\n\n    if row < rows - 1:\n        matrix[row][col] -= 1\n        if matrix[row][col] == 0:\n            fish_count += 1\n        row += 1\n\n    if col > 0:\n        matrix[row][col] -= 1\n        if matrix[row][col] == 0:\n            fish_count += 1\n        col -= 1\n\n    if col < cols - 1:\n        matrix[row][col] -= 1\n        if matrix[row][col] == 0:\n            fish_count += 1\n        col += 1\n\n    time += 1\n\nprint(fish_count)\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2 1 10\n0 0\n1 4\n3 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\n\n\"\"\"\nSolution to problem:\n\nHow can we find the total number of fish in the lake after some number of time periods? \nWe are told that fish stays at a point for a certain amount of time. We are given the number of seconds fish stays at a point, and also the number of seconds we can catch fish. \nWe can find the maximum number of points we can catch fish, if we travel optimally to catch fish.\n\nFirst, we need to find how many points we can possibly go to. We can go to all points in the grid, and we can go to every point in the grid within the time period we have. \n\nThen, we will try to find how many points we can go to in each time period, given that we can go to every point in the grid in the time period we have. \n\nAt the start of the contest, we have 1 second of time. \n\nAfter the contest is over, the time period is 10^5 seconds. \n\nEach second, we go to all the points within the time period, and we can go to a point if we have the right time. \n\nSo, we can go to at most (10^5 - 1) points in the time period. \n\nAfterwards, we go to the points within the time period. We go to the points that are within the time period, but we cannot go to points that are not in the grid. \n\nThe number of points we can go to is equal to (10^5 - 1) + (r * c) points. \n\nAll points in the grid are within the time period. \n\nThen, we need to find the number of points we can go to in each time period. \n\nFor example, we can go to at most (10^5 - 1) + (r * c) points in the time period. \n\nThen we go to points that are within the time period. \n\nEach point is within the time period. \n\nSo, we can go to (10^5 - 1) + (r * c) points. \n\nSo, the total number of points we can go to is (10^5 - 1) + (r * c) points. \n\nThat is, the total number of points is equal to (10^5 - 1) + (r * c) points. \n\nFinally, the maximum number of points we can go to is (10^5 - 1) + (r * c). \n\nSo, the maximum number of points we can go to is equal to the maximum number of points we can go to in each time period, which is 10^5 - 1 + (r * c) points. \n\nSo, the maximum number of points we can go to is 10^5 - 1 + (r * c). \n\nSo, the maximum number of points we can go to is (10^5 - 1) + (r * c) points. \n\nFinally, we want to find the maximum number of points we can go to in the contest, so we can go to (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to is (10^5 - 1) + (r * c) points. \n\nThe maximum number of points we can go to is (10^5 - 1) + (r * c) points.\n\nHow can we find the maximum number of points we can go to in the contest? \n\nIt is simply (10^5 - 1) + (r * c) points, because we are going to go to (10^5 - 1) + (r * c) points during the contest. \n\nSo, the maximum number of points we can go to is (10^5 - 1) + (r * c) points.\n\nWhat are the maximum number of points we can go to in the contest if we have time to go to no more than 10^5 points? \n\nIt is simply (10^5 - 1) + (r * c) points, because we are going to go to (10^5 - 1) + (r * c) points during the contest.\n\nNow, if we have time to go to no more than 10^5 points, what are the maximum number of points we can go to in the contest? \n\nWe can go to 10^5 points in the contest, but it is not possible to go to more than 10^5 points in the contest. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points.\n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points.\n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest is (10^5 - 1) + (r * c) points. \n\nSo, the maximum number of points we can go to in the contest"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\nassert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2 2 1 10\n0 0\n1 4\n3 2\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\n\n\"\"\"\nimport sys\nimport math\n\n\"\"\"\n    if t < t_curr:\n        cnt += c - 1\n    else:\n        cnt += c\n    \n    if t_curr < t:\n        cnt += (math.floor(t / t_curr))\n\"\"\""
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\\n\") == \"2\"\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == \"5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2''') == '2'\nassert solution('''2 3 5 6\n1 1\n1 1 6\n1 2 2''') == '5'\n\"\"\"\n\na, b, k, l = map(int, stdin.readline().split())\nr, c = map(int, stdin.readline().split())\nx, y = map(int, stdin.readline().split())\nt = [[int(i) for i in stdin.readline().split()] for _ in range(r)]"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\\n\") == \"2\"\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n\") == \"5\"\n\"\"\"\n\nr, c, k, l = map(int, input().split())\nx, y = map(int, input().split())\n\np = [None] * r\nfor i in range(r):\n    p[i] = list(map(int, input().split()))\n\nans = 0\nfor x1 in range(r):\n    for y1 in range(c):\n        x2 = x1 + x\n        y2 = y1 + y\n        if x2 < r and y2 < c:\n            if p[x1][y1] - k <= p[x2][y2] <= p[x1][y1] + l:\n                ans += 1\nprint(ans)\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1.0 0.0 1.4') == '2.0000000000'\nassert solution('-1.0 0.0 -1.4') == '2.0000000000'\nassert solution('0.0 1.0 -0.2') == '2.0000000000'\nassert solution('1.4 1.0 0.0') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n\"\"\"\n\nfrom math import sqrt, ceil\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nprint('Test pass.')\n\n-----Problem-----\n\nA firefighter has to drill a hole in a wall using a drill bit. The drill bit can be tightened so that the end-of-the-bit point is at a certain distance from the wall.\n\nThe distance between the wall and the end-of-the-bit point can be calculated as follows.\n\n$$\\sqrt{(x_1-x_0)^2+(y_1-y_0)^2+(z_1-z_0)^2}$$\n\nThe distance is measured in the same units as the length of the drill bit, so if the drill bit is 4 inches long then it can drill a hole of a length of 8 inches from the wall.\n\nThe drill bit can only enter the wall with a single intersection, but it can enter the wall in multiple places. The firefighter cannot choose which point is the closest to the wall. He wants to choose a drill bit length such that, if he uses it, the drilling will not enter any part of the wall that he cannot reach otherwise.\n\nGiven the wall's coordinates $(x_0,y_0,z_0)$, the coordinates of the end-of-the-bit point $(x_1,y_1,z_1)$, and the length of the drill bit, what is the smallest possible length of the drill bit that allows him to drill the hole into the wall?\n\n-----Input-----\nThe first line of input contains three integers $N$, $x_0$, and $y_0$, representing the number of points, the initial point's coordinates, and the second point's coordinates, respectively.\n\nThis is followed by $N$ lines of input, each containing three real numbers $x_i$, $y_i$, and $z_i$, denoting the coordinates of a point on the wall.\n\nThe first point is the origin, and the second point is the point we want to drill through.\n\nThe last line of input contains three real numbers $x_0$, $y_0$, and $z_0$, representing the coordinates of the point where the drill bit first touches the wall.\n\n-----Output-----\nPrint the answer to the problem in the format:\n\n\"The smallest possible drill length is $d$\"\n\nwhere $d$ is the smallest length that allows the drill to enter the hole.\n\nThe answer is considered correct if the absolute or relative error is less than $10^{-4}$\n\n-----Examples-----\nSample Input 1:\n4\n0 0 0\n1 1 1\n0 2 0\n1 1 1\n0 0 0\n1 1 1\n2 0 0\n1 1 1\n0 2 0\n0 1 0\nSample Output 1:\n4.0\n\nSample Input 2:\n5\n1.1 1.1 0.0\n-0.9 -0.8 -0.3\n-0.9 -0.9 -0.3\n-0.8 -0.8 0.3\n-0.1 -0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n0.1 0.2 0.4\n0.0 0.2 0.4\n0.9 0.9 0.3\n0.8 0.8 0.3\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\"\"\"\n\nN = int(input())\ncoords = []\nfor _ in range(N):\n    coords.append([float(x) for x in input().split()])"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\nassert solution(\"5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\") == \"2.0000000000\""
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\nassert solution(\"5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\") == \"2.0000000000\""
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\n\"\"\""
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2.5 -2.1 0.0\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\n\"\"\""
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2''') == '2.0000000000'\nassert solution('''5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5''') == '2.0000000000'\n\nprint('Success')\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\nassert solution('1 100 15') == '19'\n\nprint(solution(stdin))"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 9 5\") == \"1\\n5\"\nassert solution(\"1 100 10\") == \"9\\n19\"\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 2 4\") == \"10\"\nassert solution(\"1 2 9\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 5') == '1'\nassert solution('1 100 10') == '9'\nassert solution('1 100 20') == '19'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 9 5') == '1\\n5'\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 9 5\") == \"1\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 1 1\") == \"0\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 9 5\\n') == '1\\n5\\n'\nassert solution('1 100 10\\n') == '9\\n19\\n'\n\"\"\""
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"4 4 2 4 4 1 4\"\nassert solution(\"3 5\\n1 2 3 3 1 3 2\") == \"7 5 1 5 2 1 4 3 5\"\n\"\"\""
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 4 4\") == \"7\"\nassert solution(\"4 5 2 1\") == \"4 4 2 4 4 1\"\nassert solution(\"6 8 5 1 7 4 7\") == \"7 7 5 7 4 7 4 1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 4 4\\n4 3 2 1') == '7\\n4 4 2 4 4 1 4'\nassert solution('1 1\\n1') == '1\\n1'\nassert solution('2 2\\n2') == '2\\n2'\n\"\"\""
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\n\nlist = list(map(int, input().split()))\n\nqueue = list[::-1]\n\nmin_inspection = N"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n1\\n1\\n') == '1\\n1\\n'\n\"\"\""
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 4 4') == '1 4 4 4'\nassert solution('4 3 2 1') == '4 3 2 1'\nassert solution('6 10 5 5 3 7 4 9') == '5 7 10 9 10 10 9 5'\n\"\"\"\n\nn, m = map(int, input().split())\nqueue = [int(x) for x in input().split()]\n\norder = [int(x) for x in input().split()]\n\nanswer = 0\nfor i in range(len(queue)):\n    queue.append(queue.pop(0))\n    answer += abs(order[i] - queue[i])\nprint(answer)\nfor i in range(len(order)):\n    order.append(order.pop(0))\n    print(order[i], end=' ')\n    answer += abs(order[i] - queue[i])\nprint()\nprint(answer)\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1\\n1\\n') == '1\\n1\\n'\nassert solution('4 5\\n4 1 2 4 4\\n4 3 2 1') == '7\\n4 4 2 4 4 1 4\\n'\n\"\"\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2\\n3 1\") == \"1 1\"\n\"\"\"\n\nimport sys\nimport math\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 1 2 4 4\n4 3 2 1\"\"\") == \"7\\n4 4 2 4 4 1 4\"\nprint(\"Success!\")\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1') == '1'\nassert solution('4 5\\n4 1 2 4 4\\n4 3 2 1') == '7'\n\"\"\""
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\nprint(solution(\"2 10 3 2\"))\nprint(solution(\"10 10 5 0\"))\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 10 3 2\n''') == '4'\nassert solution('''10 10 5 0\n''') == '10'\nprint('Passed')"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 3 2\\n') == '4'\nassert solution('10 10 5 0\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '0'\nassert solution('2 2 3 4') == '5'\n\"\"\"\n\nfrom collections import deque\n\nd, g, n, k = [int(x) for x in stdin.strip().split(' ')]\n\ngame_state = deque(['d' for i in range(d)])\ngladstone_state = deque(['g' for i in range(g)])\n\nfor i in range(n):\n    if i < k:\n        game_state.append('d')\n        gladstone_state.append('g')\n    else:\n        game_state.append('g')\n        gladstone_state.append('d')"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\nassert solution(\"10 10 5 10\") == \"10\"\nassert solution(\"100 1000 1 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 3 2\") == 4\nassert solution(\"10 10 5 0\") == 10\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 20\\n0123456789') == '10'\nassert solution('6 100 9294\\n23689') == '111'\n\"\"\"\n\nimport sys\n\nX, A, B = [int(x) for x in sys.stdin.readline().split()]\ndigits = set(sys.stdin.readline())\nans = 0"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 20\\n0123456789\") == \"10\"\nassert solution(\"6 100 9294\\n23689\") == \"111\"\n\"\"\""
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nprint(solution(\"2 1 20\"), 10)\nassert solution(\"6 100 9294\") == \"111\"\nprint(solution(\"6 100 9294\"), 111)"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 20\\n0123456789\") == \"10\"\nassert solution(\"6 100 9294\\n23689\") == \"111\"\nassert solution(\"5 100 10\\n23689\") == \"0\"\nassert solution(\"2 1 20\\n0123456789\\n0123456789\") == \"0\"\nassert solution(\"2 100 20\\n0123456789\\n23689\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\nprint(\"Passed\")\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n1') == '0'\nassert solution('1 1 9\\n23689') == '111'\nassert solution('2 1 9\\n23689') == '111'\nassert solution('1 1 9\\n23689') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 20\\n23689\") == \"10\"\nassert solution(\"6 100 9294\\n23689\") == \"111\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\nprint('All tests passed.')\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\nassert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\nassert solution('5 1\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\nassert solution('1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '0.500000 3.666667'\nassert solution('1 S 1\\n2 S 1') == '0.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\nprint('test passed')\n\"\"\"\nimport math\n\nstdin = input()\nn, t = stdin.split(' ')\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == '1.500000 2.666667'\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == '1.500000 3.666667'\n\"\"\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\n\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\n\"\"\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\n\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n\n\"\"\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\n\n-----Problem Description-----\nThe problem asks you to investigate the effect of an \"in-store customers first\" policy. Under this policy, technicians fill prescriptions in the order in which they are dropped off, but they will not start filling remote prescriptions as long as there are in-store prescriptions to be filled.\n\nThis problem asks you to write a program that computes the average completion time for in-store and remote customers under this policy!\n\nSample Input 1:\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\nSample Output 1:\n1.500000 2.666667\nSample Input 2:\n5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\nSample Output 2:\n1.500000 3.666667\n\n-----Solution------\n\"\"\"\n\nn,t=list(map(int,input().split()))\nans=0\nfor i in range(n):\n    a,b=list(map(int,input().split()))\n    if b==\"R\":\n        ans+=a\n    else:\n        ans+=a+0.5\nprint(ans/t)"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\""
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == '3'\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == '3'\n\"\"\"\n\n\"\"\"\ncols = int(stdin[0].split(\" \")[0])\nrows = int(stdin[0].split(\" \")[1])\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == 3\n\"\"\"\nimport sys\nimport math\nfrom collections import deque"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\n'''\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\\n\") == 3\n\"\"\""
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == 3\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\""
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n1 2\") == \"2 1\"\n\nassert solution(\"2 2\\n5 -1\\n1 2\") == \"3 1\"\n\nassert solution(\"2 2\\n5 -1\\n1 2\") == \"3 1\"\n\nassert solution(\"2 3\\n-3 1\\n3 4\") == \"1 4\"\n\nassert solution(\"2 3\\n-3 1\\n3 4\") == \"1 4\""
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\"\n) == '-3 -1\\n3 1'\nassert solution(\n    \"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\"\n) == '3 4\\n3 -1'\nassert solution(\n    \"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\"\n) == '-3 -1\\n3 1'\nassert solution(\n    \"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\"\n) == '-3 -1\\n3 1'\nassert solution(\n    \"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\"\n) == '-3 -1\\n3 1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n') == '-3 -1\\n3 1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n0\\n0\\n') == '1 0\\n0 1'\n\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == '-3 -1'\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n\") == '3 4'\n\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n') == '-3 -1\\n3 1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n') == '3 4\\n3 -1'\n\nprint(\"Hooray!\")\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n') == '-3 -1\\n3 1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n') == '3 4\\n3 -1'\nprint('Success')"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1 2\\n0 0\") == \"0 1\"\nassert solution(\"2\\n1 1\\n1 1\") == \"0 0\"\nassert solution(\"1\\n1 2\\n1 1\") == \"0 0\"\nassert solution(\"2\\n1 1\\n1 1\") == \"1 1\"\nassert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\") == \"0 0\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"3 -1\"\nassert solution(\n\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 4\"\nassert solution(\n\"7\\n-2 -7\\n-4 1\\n-5 1\\n0 -1\\n0 -3\\n2 7\") == \"3 4\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\n\"\"\"\n\nimport numpy as np\n\nstdin = \"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\"\n\nn, w, omega, v_0, theta, x_0 = [float(x) for x in stdin.split()]\n\nvertices = n + 1"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(sample_input_str_1) == sample_output_str_1\nassert solution(sample_input_str_2) == sample_output_str_2\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nprint(solution(input()))\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\n\"\"\""
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\\n') == '2 5.086781'\nassert solution('3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\\n') == '1 12.715255'"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 6 5 45 20\n0 0\n2 0\n1 1.5\n\"\"\") == \"2 5.086781\"\nassert solution(\"\"\"3 0.25 2 45 20\n0 0\n2 0\n1 1.5\n\"\"\") == \"1 12.715255\"\n\"\"\""
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(    '3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\\n') == '2 5.086781'\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\n\nprint(solution(stdin) == '8')\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 1, 7, 1) == 8\n\"\"\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n\"\"\") == \"1\"\nassert solution(\"\"\"4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n\"\"\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\""
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\"\n) == \"8\"\nassert solution(\n\"5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\"\n) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\"\nprint('Success')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == '1'\nassert solution('5\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1') == '8'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1 1\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\") == \"8\"\n\"\"\"\n\n\"\"\"\nThe problem is the same as problem #117, but the only difference is that instead of counting permutations of guards, we count permutations of trenches.\n\"\"\""
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n\n------------------\n\nimport sys\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n\"\"\"\n\nimport math\n\nn = int(stdin.readline())"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('5') == '2 1'\nassert solution('7') == '4 3'\n\"\"\""
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\nprint('Test pass.')\n\n-----Explanation-----\nFor the first example, we need $m=4$ and $k=3$ such that $n=4^2-3^2=7$. This means that we will need 2x2=4 tiles and 1x3=3 tiles. This is the cheapest option.\n\nFor the second example, we can't use a solution where $m=4$ and $k=3$, as we would then need $2x2=10$ tiles. This is too much. So we cannot use this solution.\n\"\"\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n') == '4 3'\nassert solution('10\\n') == 'impossible'\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2\\n4\\n1\\n4') == '109'\nassert solution('4\\n2\\n4\\n1\\n4') == '109'\nassert solution('4\\n3\\n2\\n1\\n4') == '121'\nassert solution('4\\n3\\n2\\n1\\n4') == '121'\n\"\"\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2\\n4\\n1\\n4') == '109'\n\"\"\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n4\\n1\\n4\") == \"109\"\nprint(solution(\"4\\n2\\n4\\n1\\n4\"))\n\n---\n## Solutions for correct practice"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == 16\nassert solution(4) == 109\nprint('The local tests are done. Click on \"Check\" to earn cool rewards!\"')\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1\\n3\\n') == '16'\n\"\"\""
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1\\n3') == '16'\n\"\"\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1\\n3') == '16'\n\"\"\""
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1\\n3') == '16'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n1') == '1'\nassert solution('2\\n1\\n1\\n1') == '1'\nassert solution('3\\n1\\n2\\n3') == '3'\nassert solution('4\\n1\\n2\\n3\\n4') == '10'\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n3\\n\") == \"16\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1\\n2 1\\n2 2\") == \"3\"\n\n-----Problem-----\n\nYou are given a string consisting of small English letters.\n\nIn one operation you can delete one of the characters in this string. You have to make the string beautiful. The string is considered beautiful if the number of distinct characters in the string is at least two.\n\nFor example, the string \"aabb\" is beautiful.\n\nYou are given a string s of size N, consisting of small English letters. You should perform q (1 \\leq q \\leq 10^{18}) operations on this string.\n\nAfter the q-th operation, you should obtain a string x. You have to find the minimal possible length of x while the string still remains beautiful.\n\nFor example, if s = \"aabb\", then the string obtained after the 1-st operation is \"b\" (length = 1), and after the 2-st operation is \"aa\" (length = 2), but after the 3-rd operation is \"aa\" (length = 2), so the string is still beautiful.\n\nInput\nThe first line contains two integers N and Q (1 \\leq N \\leq 10^{6}, 1 \\leq Q \\leq 10^{18}) \u2014 the length of the string and the number of operations.\n\nThe next line contains a string s of length N, consisting of small English letters.\n\nOutput\nPrint a single integer \u2014 the minimal possible length of the resulting string.\n\nExamples\nInput\nOutput\n3 4\naaabb\n5\naabb\n5\naabbcc\n1\naabbb\n7\naabbbcc\n1\nabccb\n4\nbbbccb\n1\nb\n3\naab\n3\naabbccc\n2\naabbccc\n2\naab\n5\naabbc\n4\nabccb\n5\naabbc\n\n-----Solution-----\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\"\n\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\n\nprint(\"The code ran Correctly\")\n\n\"\"\"\n\nclass Solution:\n    def num_of_purchases(self, stdin: str) -> str:\n        # Split the input into two variables, N and M. N is the number of children and M is the number of purchases.\n        N, M = [int(i) for i in stdin.split(' ')]\n\n        # Next, store the list of N integers in a list.\n        arr = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n        \n        # Initialize the counter to 0\n        count = 0\n\n        # Initialize the list of winning pairs.\n        winners = []\n\n        # Loop over the list of purchases.\n        for i in range(M):\n            # Split each purchase into two variables, a and b.\n            a, b = [int(i) for i in stdin.split('\\n')[i + 2].split(' ')]\n\n            # Initialize the counter of winners to 0\n            wins = 0\n\n            # If the counter is 0, then there are no winners.\n            if count == 0:\n                # We set the counters of a and b to i + 1.\n                a_counter = a\n                b_counter = b\n                count += 1\n            else:\n                # If the counter is not 0, then the a and b counters need to be decreased by one.\n                a_counter -= 1\n                b_counter -= 1\n\n                # If the a_counter is 0, then we have a winner.\n                if a_counter == 0:\n                    # We append the b_counter to the winners list.\n                    winners.append(b_counter)\n                    count += 1\n                else:\n                    # Otherwise, if the b_counter is 0, then we have a winner.\n                    if b_counter == 0:\n                        # We append the a_counter to the winners list.\n                        winners.append(a_counter)\n                        count += 1\n                    else:\n                        # If neither of the counters is 0, then we need to continue with the next purchase.\n                        continue\n\n        # Initialize the counter to 0\n        count = 0\n\n        # Initialize the list of winners to an empty list.\n        winners_list = []\n\n        # Loop over the winners list.\n        for i in winners:\n            # If the counter is 0, then there are no winners.\n            if count == 0:\n                # We set the counter to i + 1.\n                count = i + 1\n            else:\n                # If the counter is not 0, then the i counter needs to be decreased by one.\n                count -= 1\n\n                # If the count is 0, then we have a winner.\n                if count == 0:\n                    # We append the i to the winners_list.\n                    winners_list.append(i)\n                    count += 1\n                else:\n                    # If the count is not 0, then we need to continue with the next winner.\n                    continue\n\n        # Initialize the count to 0.\n        count = 0\n\n        # Initialize the list of winners to an empty list.\n        winners_list_2 = []\n\n        # Loop over the winners list.\n        for i in winners_list:\n            # If the count is 0, then there are no winners.\n            if count == 0:\n                # We set the count to i + 1.\n                count = i + 1\n            else:\n                # If the counter is not 0, then the i counter needs to be decreased by one.\n                count -= 1\n\n                # If the count is 0, then we have a winner.\n                if count == 0:\n                    # We append the i to the winners_list_2.\n                    winners_list_2.append(i)\n                    count += 1\n                else:\n                    # If the count is not 0, then we need to continue with the next winner.\n                    continue\n\n        # Initialize the list of winners to an empty list.\n        winners_list_3 = []\n\n        # Loop over the winners list_2.\n        for i in winners_list_2:\n            # If the count is 0, then there are no winners.\n            if count == 0:\n                # We set the count to i + 1.\n                count = i + 1\n            else:\n                # If the counter is not 0, then the i counter needs to be decreased by one.\n                count -= 1\n\n                # If the count is 0, then we have a winner.\n                if count == 0:\n                    # We append the i to the winners_list_3.\n                    winners_list_3.append(i)\n                    count += 1\n                else:\n                    # If the count is not 0, then we need to continue with the next winner.\n                    continue\n\n        # Initialize the list of winners to an empty list.\n        winners_list_4 = []\n\n        # Loop over the winners list_3.\n        for i in winners_list_3:\n            # If the count is 0, then there are no winners.\n            if count == 0:\n                # We set the count to i + 1.\n                count = i + 1\n            else:\n                # If the counter is not 0, then the i counter needs to be decreased by one.\n                count -= 1\n\n                # If the count is 0, then we have a winner.\n                if count == 0:\n                    # We append the i to the winners_list_4.\n                    winners_list_4.append(i)\n                    count += 1\n                else:\n                    # If the count is not 0, then we need to continue"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1 0\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\\n2 3 2\\n4 1 0\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1 0\\n2 3 2\\n4 1 0\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1 0\\n2 3 2\\n4 1 0\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\nassert solution(\"2 2\\n3 1\\n2 3\") == \"2\\n3 1 2\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\\n\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\nassert solution(\"2 2\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\\n\") == \"2\\n1 2 2\\n1 2 2\"\n\n-----Problem-----\nhttps://codeforces.com/problemset/problem/449/A\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\"\n\n-------\n\nSample Input 1:\n2 3\n5 1\n1 2\n1 2\n1 2\nSample Output 1:\n3\n1 2 1\n1 2 2\n1 2 2\n\nSample Input 2:\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Output 2:\n5\n1 3 1\n2 3 2\n4 1 0\n2 4 1\n3 1 0\n\nSample Input 3:\n2 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 3:\n5\n1 3 1\n2 3 2\n4 1 0\n2 4 1\n3 1 0\n\nSample Input 4:\n3 4\n5 4 2\n1 2\n1 2\n1 2\n1 2\nSample Output 4:\n4\n1 3 1\n1 3 2\n1 3 2\n1 4 0\n\nSample Input 5:\n3 4\n5 4 3\n1 2\n1 2\n1 2\n1 2\nSample Output 5:\n4\n1 3 1\n1 3 2\n1 3 2\n1 4 0\n\nSample Input 6:\n4 3\n5 4 3\n1 2\n1 2\n1 2\n1 2\nSample Output 6:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n3 1 0\n\nSample Input 7:\n4 3\n5 4 3\n1 2\n1 2\n1 2\n1 2\nSample Output 7:\n4\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n3 1 0\n\nSample Input 8:\n3 2\n4 1\n1 2\n1 2\nSample Output 8:\n3\n1 3 1\n1 3 2\n1 4 0\n\nSample Input 9:\n4 3\n4 5\n1 2\n1 2\n1 2\n1 2\nSample Output 9:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n3 1 0\n\nSample Input 10:\n3 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 10:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n3 1 0\n\nSample Input 11:\n3 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 11:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n3 1 0\n\nSample Input 12:\n3 3\n5 4\n1 2\n1 2\n1 2\n1 2\nSample Output 12:\n4\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 13:\n3 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 13:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n3 1 0\n\nSample Input 14:\n2 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 14:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 15:\n3 3\n4 4\n1 2\n1 2\n1 2\n1 2\nSample Output 15:\n4\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 16:\n2 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 16:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 17:\n3 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 17:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 18:\n2 3\n4 4\n1 2\n1 2\n1 2\n1 2\nSample Output 18:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 19:\n3 4\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 19:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 20:\n4 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 20:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 21:\n3 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 21:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 22:\n4 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 22:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 23:\n4 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 23:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 24:\n4 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 24:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 25:\n4 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 25:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 26:\n4 3\n5 5\n1 2\n1 2\n1 2\n1 2\nSample Output 26:\n5\n1 3 1\n1 3 2\n1 4 0\n2 3 2\n2 4 1\n\nSample Input 27:\n4 3\n5 5\n1 2\n1 2\n1"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\\n\"\n\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\\n\"\n\nassert solution(\"2 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\\n\"\n\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\\n\"\n\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\\n\"\n\n\"\"\""
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\"\n\nprint(solution(\"2 3 5 6\\n1 2\\n1 3\\n1 3\\n1 2\"))"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 2 1\\n5 3 1 1\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\"\nassert solution(\"1 1\\n1 1\\n1 1\\n1 1\\n\") == \"3\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\"\nassert solution(\"4 3 2 1\\n4 1\\n1 3\\n2 3\\n\") == \"4\\n1 3 1\\n2 3 2\\n4 1 0\\n1 3 0\\n2 3 0\"\nassert solution(\"3 3 2 1\\n3 1\\n1 3\\n\") == \"3\\n1 3 1\\n2 3 1\\n3 1 0\"\nassert solution(\"1 2\\n1 2\\n1 2\\n1 2\\n\") == \"1\\n1 2 1\\n1 2 1\\n1 2 1\\n1 2 1\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\\n1 2 1\\n1 2 2\"\nassert solution(\"2 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1 0\\n3 2 1\\n3 3 2\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\") == \"1 2\"\nassert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\") == \"impossible\"\n\n:param stdin: A String containing input to be parsed.\n:return: A String containing the solution to the problem.\n\"\"\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n2 1 1\\n1 2 2') == '2 1'\nassert solution('2 2\\n1 1 1\\n1 1 2') == 'impossible'\n\n'''\n\n'''\nThe Knapsack Problem\n\nGiven a knapsack with a certain weight capacity, what is the maximum value of the items that can be put in the knapsack without having exceeded the weight capacity?\n\nGiven a knapsack with capacity w and n items, the capacity of each item is wi, and the value of each item is vi. The maximum value is vmax. For example, if w = 6 and the items are (wi, vi), (3, 6), (4, 7), (2, 5) and (1, 4), then the maximum value is 7 because the third item is worth 7, and the second item is worth 6, and the first item is worth 4. If the first item is chosen, then there are 4 items that can be put into the knapsack without exceeding the weight capacity, but the fourth item can't be included because it would exceed the weight capacity.\n\nThe algorithm for solving the knapsack problem is greedy, meaning that we select the item that is worth the most and add it to the knapsack, and then remove it from the set of items and repeat.\n\nThis process is repeated until there are no more items to choose from.\n\nImplement the function knapsack(n, w) which, given n and w, returns the maximum value of the items that can be put into the knapsack without having exceeded the weight capacity.\n'''\n\n'''\nTry to reduce the maximum value\n\nGiven a knapsack with a certain weight capacity, what is the maximum value of the items that can be put in the knapsack without having exceeded the weight capacity?\n\nGiven a knapsack with capacity w and n items, the capacity of each item is wi, and the value of each item is vi. The maximum value is vmax. For example, if w = 6 and the items are (wi, vi), (3, 6), (4, 7), (2, 5) and (1, 4), then the maximum value is 7 because the third item is worth 7, and the second item is worth 6, and the first item is worth 4. If the first item is chosen, then there are 4 items that can be put into the knapsack without exceeding the weight capacity, but the fourth item can't be included because it would exceed the weight capacity.\n\nThe algorithm for solving the knapsack problem is greedy, meaning that we select the item that is worth the most and add it to the knapsack, and then remove it from the set of items and repeat.\n\nThis process is repeated until there are no more items to choose from.\n\nImplement the function knapsack(n, w) which, given n and w, returns the maximum value of the items that can be put into the knapsack without having exceeded the weight capacity.\n\npublic int knapsack(int n, int w) {\n    // Initialize matrix of zeroes.\n    int[][] dp = new int[n + 1][w + 1];\n    // Initialize first row and column with zeroes.\n    for (int i = 0; i <= w; i++) {\n        dp[0][i] = 0;\n    }\n    for (int i = 0; i <= n; i++) {\n        dp[i][0] = 0;\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= w; j++) {\n            int minValue = Math.min(dp[i - 1][j],\n                                    (dp[i - 1][j - wi[i - 1]] + vi[i - 1]));\n            dp[i][j] = minValue;\n        }\n    }\n    return dp[n][w];\n}\n'''\n\n'''\nReduce the maximum value by looping through all possible capacities\n\nGiven a knapsack with a certain weight capacity, what is the maximum value of the items that can be put in the knapsack without having exceeded the weight capacity?\n\nGiven a knapsack with capacity w and n items, the capacity of each item is wi, and the value of each item is vi. The maximum value is vmax. For example, if w = 6 and the items are (wi, vi), (3"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\\n') == '1 2'\nassert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\\n') == 'impossible'\n\nSample Case #1\nInput:\n5 3\n8 3\n0 1 1\n2 1 3\n0 3 2\n2 3 2\n3 0 1\nOutput:\n1 2 3\n\nSample Case #2\nInput:\n5 3\n5 3\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\nOutput:\nimpossible\n\nSample Case #3\nInput:\n5 3\n8 3\n0 1 1\n0 2 2\n2 1 3\n2 2 1\n3 2 3\n4 2 1\nOutput:\n1 2 3\n\"\"\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1') == '1 2'\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\") == \"impossible\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\\n') == '1 2'\nassert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\\n') == 'impossible'\nprint('Successfully passed all test cases')"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1 2'\nassert solution('3 2') == '1 2'\nassert solution('3 3') == 'impossible'\nassert solution('3 1') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\") == \"1 2\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('8 2') == '1 2 3 4 5 6 7'\nassert solution('8 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\\n5 2 3\\n6 2 1\\n7 2 3\\n8 2 1\\n9 2 3\\n10 2 1\\n') == '1 2'\nassert solution('8 2\\n1 1 1\\n2 2 1\\n2 2 1\\n3 2 3\\n4 2 1\\n5 2 3\\n6 2 1\\n7 2 3\\n8 2 1\\n9 2 3\\n10 2 1\\n') == '1 2'\n'''"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nassert solution('30') == '2020 1'\nassert solution('2') == '1 1'\nassert solution('3') == '2 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nassert solution('10^100') == '10^100 1'\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"5 2\"\n\n\"\"\"\n\nx = int(stdin.strip())"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nprint(solution('2020'))"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\""
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2020') == '2020 1'\nassert solution('10') == '5 2'\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5 2\"\nassert solution(\"2020\") == \"2020 1\""
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\ncookies\\nicecream\") == \"impossible\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"unique\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"ambiguous\"\nprint(\"Passed all tests\")\n\n-----Explanation-----\nThe above input represents the following scenario:\n\nYour sister went to the store with index 0, and bought the item chocolate, she went to the store with index 1, and bought the item cookies, and then she went to the store with index 2, and bought the item ice cream, her bag is now {chocolate, cookies, ice cream}.\n\nYou know that your sister will hold on to her beloved Fluffynose whenever possible, so the only time she could\u2019ve lost it is when she grabbed an item on her shopping list. So, all you have to do is figure out at what store she bought what, and then you\u2019ll reunite her with her counterpart in no time! However, you soon find out that this isn\u2019t quite as easy as you thought: she went to a lot of stores, and although she knows the names of the stores she visited and the order in which she visited them, she does not recall what she bought at each store (it could have been nothing!). It would take a lot of time to blindly search all the stores for all these items. As you have better things to do today, like solving programming problems, you want to spend as little time on this retrieval as possible. Therefore, you want to know exactly where she bought each item, so that you can retrace her steps as efficiently as possible.\n\nLet\u2019s start by looking at the inventory of the stores. The input represents $3$ supermarkets, so we have three stores. Initially, we don\u2019t know anything about the store, so we set the initial state to $-1$ for each store. In particular, if $S$ is an item that your sister bought, then $s_0 = -1$ and $s_1 = -1$ because we do not know if she bought it at the store with index 0 or not, and we do not know if she bought it at the store with index 1 or not.\n\nFor example, if the list of groceries is $1$ chocolate, $2$ ice cream and $3$ cookies, then we know that the first store, the one with index $0$, did not buy any groceries, and the second store, the one with index $1$, bought cookies. We do not know if she bought any other groceries, so we set $s_2 = -1$. Similarly, we set $s_3 = -1$.\n\nNext, we have to decide which stores she visited in the order in which she visited them.\n\n$1$) First, she visited the store with index $0$, so $s_0 = 0$.\n$2$) Then, she visited the store with index $1$, so $s_1 = 1$.\n$3$) Finally, she visited the store with index $2$, so $s_2 = 2$.\n$4$) Now, we know that she visited the stores with indices $0, 1, 2$.\n\nWe\u2019ve decided to number the stores starting at $0$, so we have $s_0 = 0$, $s_1 = 1$, and $s_2 = 2$.\n\nNow, we know that the grocery store with index $0$ did not buy any groceries, so we have $s_0 = -1$. Similarly, we have $s_1 = 1$ and $s_2 = 2$.\n\nAfter the first step, we know that the grocery store with index $2$ bought the item $1$; hence, we have $s_0 = -1$, $s_1 = 1$, and $s_2 = 2$.\n\nAfter the second step, we know that the grocery store with index $1$ bought the item $3$, so we have $s_0 = -1$, $s_1 = 1, and $s_2 = 2$.\n\nNext, we want to know where the items $0$ and $1$ are; so we set $s_0 = 0$ and $s_1 = 1$.\n\nAfter the third step, we know that the grocery store with index $2$ bought the item $0$, so we have $s_0 = 0$ and $s_1 = 1$.\n\nNow, we want to know where the item $2$ is; so we set $s_0 = 1$.\n\nAfter the fourth step, we know that the grocery store with index $1$ bought the item $1$, so we have $s_0 = 0$ and $s_1 = 1$.\n\nFinally, we want to know where the item $3$ is; so we set $s_0 = 1$.\n\nAt this point, we have found the path our little sister took to purchase her groceries, and we have the inventory of the stores. Now we just need to figure out how to assemble the items into the grocery list.\n\nWe can go through all the items in the grocery list, and remember which store each item is available at. Let\u2019s iterate through the items in"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies') == 'impossible'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'ambiguous'\n\"\"\""
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"unique\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"ambiguous\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\ncookies\\nicecream\") == \"unique\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"ambiguous\"\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'unique'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'ambiguous'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'impossible'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'impossible'\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('4\\n0 chocolate\\n1 icecream\\n2 cookies') == 'ambiguous'\nassert solution('3\\n0 chocolate\\n1 icecream\\n2 cookies') == 'unique'\n\n\"\"\"\n\n\nclass Dict:\n    def __init__(self, size):\n        self.size = size\n        self.dict = {}\n\n    def add(self, key):\n        self.dict[key] = len(self.dict)\n\n    def get_key(self, val):\n        for key in self.dict:\n            if self.dict[key] == val:\n                return key\n\n    def contains(self, key):\n        return key in self.dict\n\n\nclass Solution:\n    \"\"\"O(N * K * log(K)) / O(N * K)\"\"\"\n\n    def solution(self, stdin):\n        n = int(stdin)\n        d = Dict(n)\n        items = []\n        for i in range(n):\n            val = int(stdin)\n            item = stdin\n            items.append(item)\n            d.add(val)\n\n        #print(items)\n        #print(d.dict)\n\n        m = int(stdin)\n        for i in range(m):\n            val = int(stdin)\n            item = stdin\n\n            # check if item in items\n            if not d.contains(val):\n                return \"impossible\"\n\n            # remove item from items\n            items.remove(item)\n\n            # remove item from dict\n            key = d.get_key(val)\n            items.insert(key, item)\n\n            d.add(val)\n\n        # check if items are unique\n        if len(items) > 0:\n            return \"ambiguous\"\n        else:\n            return \"unique\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n\") == \"impossible\"\n\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n\") == \"ambiguous\"\n\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n\") == \"ambiguous\"\n\n-----Explanation-----\nIn the first example, the only way is to visit the 1st, 3rd and 2nd stores in the right order (chocolate, icecream, cookies) and then visit the last store (cookies) in the right order.\n\nIn the second example, the only way is to visit the 1st, 3rd and 2nd stores in the right order (chocolate, icecream, cookies) and then visit the 3rd and 2nd stores in the right order (chocolate, icecream) and then visit the last store (cookies).\n\nIn the third example, there are two ways to visit the stores in the right order: either you visit the 1st, 2nd and 3rd stores in the right order (chocolate, icecream, cookies) or you visit the 3rd, 2nd and 1st stores in the right order (cookies, icecream, chocolate).\n\n-----Bibliography-----\n\"\"\""
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\") == \"impossible\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"unique\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"ambiguous\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\") == \"impossible\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\") == \"ambiguous\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies''') == \"impossible\"\nassert solution('''3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies''') == \"unique\"\nassert solution('''3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies''') == \"ambiguous\"\n\"\"\"\n\nimport sys\nimport queue"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom itertools import combinations\nfrom math import ceil\nfrom typing import List\nfrom typing import Set\n\nimport pytest\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0 10') == '0'"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\""
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 10\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == out\nprint(solution(stdin))\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\""
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''............................................................\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................''') == '3 zoom out'\nprint('Test 1: pass')\n\nassert solution('''............................................................\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................''') == '3 zoom out'\nprint('Test 2: pass')\n\nassert solution('''............................................................\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................''') == '3 zoom out'\nprint('Test 3: pass')\n\nassert solution('''............................................................\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................''') == '3 zoom out'\nprint('Test 4: pass')\n\nassert solution('''............................................................\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................''') == '3 zoom out'\nprint('Test 5: pass')"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\n''') == '3 zoom out'\nassert solution('''\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\n''') == '2 pan'\n'''\n\nGiven a pair of images. The first image is the background, the second image is the foreground. Find the set of initial and final grips, and the number of touches. Each touch is defined as a connected set of pixels. The touch point is the position of a touch. The touch vector is defined as the vector from the grip point to the touch point. The set of all touches for each image is a gesture.\n\nFind the set of initial and final grips, and the number of touches. The first output is the number of touches, and the second output is the type of gesture (pan, zoom, or rotate). The output is a pair of grips and the number of touches. For pan, the two grips are the same, and the number of touches is 1. For zoom and rotate, the first and last touch are in the initial and final grips, and the number of touches is 2.\n\nThe pan distance is measured between the two grip points. The grip spread is the average distance between each touch point and the grip point. The zoom distance is the difference between the two grip spreads. The touch rotation is the signed angle (in $[-\\pi, \\pi ]$ radians) between the two touch vectors for corresponding touch points. The grip rotation is the average touch rotation. The rotation distance is the arc length of the grip rotation along a circle with radius equal the grip spread of the initial grip.\n\nGiven a pair of images. The first image is the background, the second image is the foreground. Find the set of initial and final grips, and the number of touches. Each touch is defined as a connected set of pixels. The touch point is the position of a touch. The touch vector is defined as the vector from the grip point to the touch point. The set of all touches for each image is a gesture.\n\nFind the set of initial and final grips, and the number of touches. The first output is the number of touches, and the second output is the type of gesture (pan, zoom, or rotate). The output is a pair of grips and the number of touches. For pan, the two grips are the same, and the number of touches is 1. For zoom and rotate, the first and last touch are in the initial and final grips, and the number of touches is 2.\n\nThe pan distance is measured between the two grip points. The grip spread is the average distance between each touch point and the grip point. The zoom distance is the difference between the two grip spreads. The touch rotation is the signed angle (in $[-\\pi, \\pi ]$ radians) between the two touch vectors for corresponding touch points. The grip rotation is the average touch rotation. The rotation distance is the arc length of the grip rotation along a circle with radius equal the grip spread of the initial grip.\n\n-----Input-----\nThe input consists of a pair of two strings, each of the format:\n\n\"X.............XXXX.............. X...........\"\n\n\"X.........................XXXXX X...........\"\n\nEach string contains two characters. The first character is the background image, the second character is the foreground image. The background image contains at least one touch, and the foreground image contains at least one touch. The number of touches is between 1 and 5.\n\n-----Output-----\nPrint the number of touches and the type of gesture (pan, zoom, or rotate) as well as the direction of the gesture for zoom or rotate. The direction for a zoom is in if the grip spread of the final grip is smaller than that of the initial grip, otherwise it is out. The direction of a rotate is either clockwise or counter-clockwise. All distance comparisons that affect the output will be robust against numerical error of $10^{-5}$.\n\n-----Examples-----\nSample Input 1:\n\n.X.....................X.....................\n\n.X.....................X.....................\n\nSample Output 1:\n\n2 pan\n\nSample Input 2:\n\nX...................X...................X\n\nX...................X...................X\n\nSample Output 2:\n\n2 zoom out\n\nSample Input 3:\n\nX...................X...................X\n\nX...................X...................X\n\nSample Output 3:\n\n3 rotate\n\nSample Input 4:\n\nX...................X...................X\n\nX...................X...................X\n\nSample Output 4:\n\n4 pan\n\nSample Input 5:\n\nX...................X...................X\n\nX...................X...................X\n\nSample Output 5:\n\n5 zoom\n\nSample Input 6:\n\nX.................X................."
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\"\"\") == \"3 zoom out\"\n\nassert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\"\"\") == \"1 pan\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('    \\n') == ''\nassert solution('....\\n') == ''\nassert solution('.... \\n') == ''\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n......................\n......................\n......................\n......................\n......................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n\"\"\") == '3 zoom out out'\nassert solution(\"\"\"\n......................\n......................\n......................\n......................\n......................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n........................\n\"\"\") == '1 pan'\n\n\"\"\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"............................................................\\\n............................................................\\\n....XXXX....................................................\\\n....XXXX..................................XXXX..............\\\n....XXXX...................................XXX..............\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\\\n............................................................\") == '3 zoom out'\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\n\"\"\") == '3 zoom out'\n\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\n\n\"\"\") == '1 pan'\n\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n.............................. X.....................XX......\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\n\"\"\") == '0 rotate'\n\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n.............................. X.....................XX......\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\n\"\"\") == '0 rotate'\n\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n.............................. X.....................XX......\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\n\"\"\") == '0 rotate'\n\n-----Explanation-----\nFor example, the first sample takes the two images as inputs, and the output is 1 pan because the pan gesture involves only one touch, the average position of which is at the center.\n\nFor the second sample, the input is the same, but the output is 3 zoom out because the average position of the third touch is outside the average position of the first touch.\n\nThe third sample is similar, but with a single rotation instead of a pan and zoom. The output is also 0 rotate because the touch locations are the same, so the input is the same as the output.\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x},{self.y})\"\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        return (self.x, self.y) == (other.x, other.y)\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\nclass Edge:\n    def __init__(self, point_a, point_b):\n        self.point_a = point_a\n        self.point_b = point_b\n\n    def __str__(self):\n        return f\"{self.point_a}-{self.point_b}\"\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        return self.point_a == other.point_a and self.point_b == other.point_b\n\n    def __hash__(self):\n        return hash((self.point_a, self.point_b))\n\nclass Connection:\n    def __init__(self, point_a, point_b, weight):\n        self.point_a = point_a\n        self.point_b = point_b\n        self.weight = weight\n\nclass Graph:\n    def __init__(self):\n        self.edges = set()\n        self.connections = defaultdict(set)\n\n    def add_edge(self, point_a, point_b, weight):\n        edge = Edge(point_a, point_b)\n        self.edges.add(edge)\n        self.connections[point_a].add(Connection(point_a, point_b, weight))\n        self.connections[point_b].add(Connection(point_b, point_a, weight))\n\n    def find_distance(self, point_a, point_b):\n        path = []\n        edges = set()\n        visited = set()\n\n        while point"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"............................................................\\n............................................................\\n..................................................XXXX..............\\n...........................................XXX..............\\n....................................XXXX........X..............\\n.........................................XX.........................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"1 pan\"\n\nassert solution(\"............................................................\\n............................................................\\n..................................................XXXX..............\\n...........................................XXX..............\\n....................................XXXX........X..............\\n.........................................XX.........................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"3 zoom out\"\n\"\"\"\n\nfrom collections import Counter, defaultdict\nimport numpy as np\nimport re\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"..............................\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\"\"\") == '3 zoom out'\n\"\"\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!\\n\") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!\\n\"\n\n\"\"\""
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \\n\") == \"\"\"       \n       \n       \n       \n       \n       \n       \n\"\"\"\n\nassert solution(\"7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\n\") == \"\"\"       \n       \n       \n       \n       \n       \n       \n\"\"\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 20\\napples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \"\nassert solution(\"7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\") == \"       \\n       \\n       \\n       \\n       \"\nassert solution(\"8 8\\n++++++++\\n+$+$+\\n+$+$+\\n+$+$+\\n+$+$+\\n+$+$+\\n++++++++\") == \"       \\n       \\n       \\n       \\n       \"\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \"\n\n\"\"\""
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \"\n\n\"\"\""
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\") == \"       \\n       \\n       \\n       \\n       \\n\"\n\nassert solution(\"8 20\\napples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \"\n\nassert solution(\"6 10\\n ++++++++\\n+ $  =  +\\n+ $  $ +\\n+  $  $ +\\n+  $  $ +\\n+  $  $ +\\n ++++++++\") == \" ++++++++\\n+ $  =  +\\n+ $  $ +\\n+  $  $ +\\n+  $  $ +\\n ++++++++\"\n\nassert solution(\"6 10\\n++++++++\\n+ $  =  +\\n+ $  $ +\\n+  $  $ +\\n+  $  $ +\\n+  $  $ +\\n ++++++++\") == \" +++++++++\\n+ $  =  +\\n+ $  $ +\\n+  $  $ +\\n+  $  $ +\\n ++++++++\"\n\nassert solution(\"6 10\\n++++++++\\n+ $  =  +\\n+ $  $ +\\n+  $  $ +\\n+  $  $ +\\n+  $  $ +\\n ++++++++\") == \" +++++++++\\n+ $  =  +\\n+ $  $ +\\n+  $  $ +\\n+  $  $ +\\n ++++++++\""
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \"\n\nprint(solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \"))"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \") == \"\"\" apples are great!  \n                    \n                    \n                    \n                    \n                    \n                    \n check out our      \n fresh apples!      \"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('apples are great!') == 'apples are great!'\nassert solution('++++++++') == ''\nassert solution('+ = +') == ''\nassert solution('+  =  +') == ''\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 20\\napples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!') == 'apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!'\nassert solution('7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == '       \\n       \\n       \\n       \\n       \\n       '\n\nassert solution('6 6\\n++++++++\\n+ > +\\n+ +++\\n+ = +\\n++++\\n++ > +\\n++++++++') == '       \\n       \\n       \\n       \\n       \\n       '\n\nassert solution('5 6\\n+++++\\n>  =\\n++++\\n>  =\\n++++\\n>  =\\n+++++') == '       \\n       \\n       \\n       \\n       \\n       '\n\nassert solution('5 5\\n++++++++\\n>  =\\n++++\\n>  =\\n++++\\n>  =\\n++++++++') == '       \\n       \\n       \\n       \\n       '"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HH\") == 2\nassert solution(\"H?\") == 1.5\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0.0'\nassert solution('H') == '1.0'\nassert solution('H?') == '0.5'\nassert solution('?H') == '2.0'\nassert solution('HTH') == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"HH\") == 2\nassert solution(\"H??\") == 1.5\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('HH') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"HH\") == 2\nassert solution(\"H?\") == 1.5\n\n\"\"\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H?\") == \"1.5\"\nassert solution(\"HTHTTH\") == \"3.0\"\n\"\"\"\n\nseq = input()"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('HH') == 2\nassert solution('H?') == 1.5\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\"\nimport sys\n\n\"\"\"\nComplexity:\nTime: O(n)\nSpace: O(n)\n\"\"\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H?\") == \"1.5\"\n\"\"\"\n\nimport re\nimport statistics\n\nH = 'H'\nT = 'T'\nH_H = 'HH'\nT_T = 'TT'\nT_H = 'TH'\nH_T = 'HT'\nH_T_H = 'HTH'\nT_T_T = 'TTT'\n\nINITIAL_STATE = {\n    H_H: 2.0,\n    T_T: 1.5,\n    T_H: 1.0,\n    H_T: 1.0,\n    H_T_H: 1.0,\n    T_T_T: 1.0,\n}\n\nCOIN_STRINGS = {\n    H: H_H,\n    T: T_T,\n}"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n\"\"\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0001\\n0001\\n0011\\n1110\") == \"1\\n0001\\n0001\\n0011\\n1111\"\n\"\"\""
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1111\\n1111\\n1111\\n1111') == '6\\n0011\\n0011\\n0111\\n1101'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\nassert solution(\"4\\n1100\\n1110\\n1110\\n1100\") == \"1\\n1110\\n1110\\n1110\\n1110\"\nassert solution(\"4\\n1101\\n1110\\n1110\\n1110\") == \"1\\n1100\\n1110\\n1110\\n1100\"\nassert solution(\"4\\n1110\\n1110\\n1100\\n1110\") == \"1\\n1100\\n1110\\n1110\\n1110\"\nassert solution(\"4\\n1101\\n1110\\n1100\\n1110\") == \"1\\n1100\\n1110\\n1110\\n1110\"\n\nprint(solution(\"4\\n1110\\n1110\\n1100\\n1110\"))\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1111\\n1111\\n1111\\n1111\\n') == '6\\n0011\\n0011\\n0111\\n1101\\n'\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1111\\n1111\\n1111\\n1111') == '6\\n0011\\n0011\\n0111\\n1101'\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0001\\n0001\\n0011\\n1110\") == \"1\\n0001\\n0001\\n0011\\n1111\""
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1111\n1111\n1111\n1111''') == '6\\n0011\\n0011\\n0111\\n1101'\nprint('Test passed')\n\n\"\"\""
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0001\\n0001\\n0011\\n1110\") == \"1\\n0001\\n0001\\n0011\\n1111\"\n\"\"\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n\"\n    \"1111\\n\"\n    \"1111\\n\"\n    \"1111\\n\"\n    \"1111\"\n) == \"6\\n\"\n\nassert solution(\n    \"4\\n\"\n    \"1111\\n\"\n    \"1111\\n\"\n    \"1111\\n\"\n    \"1111\"\n) == \"6\\n\"\n\nassert solution(\n    \"4\\n\"\n    \"1110\\n\"\n    \"1110\\n\"\n    \"1110\\n\"\n    \"1110\"\n) == \"6\\n\"\n\nassert solution(\n    \"4\\n\"\n    \"1100\\n\"\n    \"1100\\n\"\n    \"1100\\n\"\n    \"1100\"\n) == \"6\\n\"\n\nassert solution(\n    \"4\\n\"\n    \"1110\\n\"\n    \"1110\\n\"\n    \"1100\\n\"\n    \"1100\"\n) == \"6\\n\""
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'4\\n'\n'1111\\n'\n'1111\\n'\n'1111\\n'\n) == '6\\n'\nassert solution(\n'4\\n'\n'1111\\n'\n'1111\\n'\n'1111\\n'\n) == '6\\n'\nassert solution(\n'4\\n'\n'1111\\n'\n'1111\\n'\n'1111\\n'\n) == '6\\n'\nassert solution(\n'4\\n'\n'1111\\n'\n'1111\\n'\n'1111\\n'\n) == '6\\n'\nassert solution(\n'4\\n'\n'1111\\n'\n'1111\\n'\n'1111\\n'\n) == '6\\n'\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == 2\nassert solution(\"4\\nh 1 4 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == 4\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == 4\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == 4\n\n\"\"\"\nimport re\nimport itertools\n\nreg_split = re.compile(r\"^(\\w+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)$\")"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 4 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == 2\nassert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == 2\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == 4\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == 4\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == 4\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == '2'\nassert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == '4'\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == '4'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3') == '4'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == expected_result\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\n\n\"\"\"\nimport re\nimport sys"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n\"\"\") == \"4\"\n\nassert solution(\"\"\"3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n\"\"\") == \"4\"\n\nassert solution(\"\"\"2 2\n1 0 2\n3 0 4\n\"\"\") == \"1\""
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5''') == '2'\n\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8''') == '4'\n\n\"\"\""
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"4\"\n\nassert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\") == \"2\"\n\n\"\"\"\n\nfrom math import inf\nfrom typing import List\n\nclass Librarian:\n    def __init__(self, shelves: List[List[int]]) -> None:\n        self.shelves = shelves\n        self.book_count = len(shelves)\n        self.max_shelf_size = len(shelves[0])\n\n    def take_book_from(self, shelf: int, index: int) -> int:\n        if self.shelves[shelf][index]!= 0:\n            self.shelves[shelf][index] = 0\n            return 1\n        return 0\n\n    def put_book_on(self, shelf: int, index: int, book_id: int) -> int:\n        if self.shelves[shelf][index]!= 0:\n            return -1\n        self.shelves[shelf][index] = book_id\n        return 0\n\nclass LibrarianState:\n    def __init__(self, book_count: int, max_shelf_size: int, shelves: List[List[int]]) -> None:\n        self.book_count = book_count\n        self.max_shelf_size = max_shelf_size\n        self.shelves = shelves\n        self.librarian = Librarian(shelves)\n\n    def __str__(self) -> str:\n        return '\\n'.join(str(line) for line in self.shelves)\n\n    def is_valid(self) -> bool:\n        for shelf in self.shelves:\n            if 0 in shelf:\n                return False\n        return True\n\n    def get_neighbours(self) -> List['LibrarianState']:\n        neighbours = []\n        for shelf in range(self.book_count):\n            for index in range(self.max_shelf_size):\n                if self.librarian.take_book_from(shelf, index)!= -1:\n                    neighbour = LibrarianState(self.book_count, self.max_shelf_size, self.shelves)\n                    neighbour.librarian.put_book_on(shelf, index, self.shelves[shelf][index])\n                    neighbours.append(neighbour)\n        return neighbours"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == 2\nassert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == 2\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == 4\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == 4\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == 4\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\n\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\n\nassert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '-1'\n\nassert solution('''\n1 1\n1\n''') == '-1'\n\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\n\nprint('The code ran Correctly')\n\n--------\n7. \u041e\u0447\u0435\u043d\u044c \u0434\u043b\u0438\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043d\u0435 \u0442\u0430\u043a \u0443\u0436 \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u043c\u044b, \u0447\u0442\u043e \u043e\u043d\u0438 \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u0442\u0440\u043e\u0433\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u00ab\u043f\u0440\u0438\u043d\u044f\u0442\u044c\u00bb \u0438\u043b\u0438 \u00ab\u043f\u0435\u0440\u0435\u0441\u0434\u0430\u0442\u044c\u00bb.\n\n\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u041c\u0430\u0440\u0438\u044f \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u044f \u041f\u0435\u0442\u0440\u043e\u0432\u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b:\n\n\u0412 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u0432\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b. \u0412 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443; \u0432 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0443\u043c \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0442\u044b. \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0442\u044b, \u0442\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0439\u0442\u0438 \u0432 \u043a\u043e\u043c\u043d\u0430\u0442\u0443 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430.\n\u041f\u0440\u0438 \u0432\u0445\u043e\u0434\u0435 \u0432 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u044e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u043e\u043d \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442, \u0432 \u043a\u0430\u043a\u0443\u044e \u0438\u0437 \u0434\u0432\u0443\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 \u043e\u043d \u0441\u0435\u0439\u0447\u0430\u0441 \u0432\u0445\u043e\u0434\u0438\u0442. \u0415\u0441\u043b\u0438 \u0432 \u0441\u0432\u043e\u044e \u043a\u043e\u043c\u043d\u0430\u0442\u0443 \u0443\u0436\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442, \u0442\u043e \u043e\u043d \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442, \u0432 \u043a\u0430\u043a\u0443\u044e \u0438\u0437 \u0434\u0432\u0443\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 \u043e\u043d \u0441\u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0439\u0442\u0438 \u043f\u043e\u0434 \u0441\u0432\u043e\u0438\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c. \u0412\u044b\u0431\u043e\u0440 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u0430. \u0421\u0442\u0443\u0434\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0439\u0442\u0438 \u0432 \u043a\u043e\u043c\u043d\u0430\u0442\u0443 \u0441 \u043b\u044e\u0431\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0431\u0440\u0430\u043b \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0435.\n\u041f\u0440\u0438 \u0432\u044b\u0445\u043e\u0434\u0435 \u0441 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043c\u043d\u0430\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d \u0432\u0438\u0434\u0438\u0442 \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430.\n\n\u0414\u043b\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u041c\u0430\u0440\u0438\u044f \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u044f \u041f\u0435\u0442\u0440\u043e\u0432\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == \"2\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"4\"\n\"\"\"\nimport math"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == \"2\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"4\"\n\nprint(\"The code ran Correctly\")\n\n-----Explanation-----\nThe following code was used to solve the problem.\n\n\nimport sys"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == \"2\""
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 3 4 2\") == 2\nassert solution(\"1 2 3 3 4 5 5\") == 4\nassert solution(\"1 2 1 3 3 4 2\") == 4"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 3 3 4 2\") == \"2\"\nassert solution(\"8\\n1 2 1 3 1 3 1 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 3 1 2 1 3') == '4'\nassert solution('4\\n2 1 3 1 3') == '3'\nassert solution('5\\n1 2 3 3 4 2') == '2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 3 4 2') == '2'\nassert solution('1 2 1 3 1 3 1 2') == '4'\nassert solution('1 1 1 1 1 1 1 1 1') == '7'\nassert solution('2 2 2 2 2 2') == '1'\nassert solution('1 2 3 1 1 3 2 1 1 3') == '6'\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 3 4 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 3 4 2') == 2\nassert solution('1 2 1 3 1 3 1 2') == 4\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 3 4 2') == '2'\nassert solution('1 2 1 3 1 3 1 2') == '4'\n'''\n\nimport math"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == 2\nassert solution('8\\n1 2 1 3 1 3 1 2') == 4\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == '3'\nassert solution('2\\n1 1') == '1'\n\n-----\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == '2'\nassert solution('8\\n1 2 1 3 1 3 1 2') == '4'\n\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 2\\n2 2 2 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\\n0\"\nprint(\"Tests passed\")\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 2 1') == '4\\n2'"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\\n\") == \"4\\n0\\n\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque\n\nstdin = open(\"./input.txt\", \"r\")\ninput = stdin.readline\n\nN, K, P = list(map(int, input().split()))\nrows = [[0 for _ in range(N)] for _ in range(N)]\nrooks = []\n\nfor _ in range(K):\n    r, c, power = list(map(int, input().split()))\n    rows[r - 1][c - 1] = power\n    rooks.append((r - 1, c - 1, power))\n\nfor _ in range(P):\n    r1, c1, r2, c2 = list(map(int, input().split()))\n    rows[r1 - 1][c1 - 1] = 0\n    rows[r2 - 1][c2 - 1] = 0\n    rooks = list(filter(lambda x: x[0]!= r2 and x[1]!= c2, rooks))\n\nqueue = deque(rooks)\nattacked = 0\n\nwhile queue:\n    r, c, power = queue.popleft()\n\n    for i in range(-power, power + 1):\n        new_r = r + i\n        new_c = c + i\n        if 0 <= new_r < N and 0 <= new_c < N:\n            if rows[new_r][new_c]!= 0:\n                rows[new_r][new_c] ^= power\n                queue.append((new_r, new_c, power))\n\nfor row in rows:\n    for field in row:\n        if field > 0:\n            attacked += 1\n\nprint(attacked)\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\\n0\"\nassert solution(\"1 1 1\\n2 2 1\") == \"0\"\nassert solution(\"2 2 2\\n2 2 2\\n2 2 2\") == \"8\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1') == '4'\nassert solution('2 2 2\\n1 1 1\\n2 2 2 1') == '4'\nassert solution('2 2 2\\n2 2 2\\n1 1 1 2') == '0'\n\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\"\n\nassert solution(\"2 2 2\\n1 1 1\\n2 2 2\\n2 2 2 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\"\nassert solution(\"1 2 2\\n1 2 1\\n2 2 2 1\") == \"4\"\nassert solution(\"1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 1\") == \"8\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\") == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\") == \"4\\n0\"\n\n\"\"\"\n\nN, K, P = map(int, stdin.readline().split())\nboard = [[int(i) for i in stdin.readline().split()] for j in range(N)]\n\nxors = [[0] * N for i in range(N)]\n\nfor i in range(K):\n    r, c, v = map(int, stdin.readline().split())\n    xors[r - 1][c - 1] = v\n\nfor i in range(P):\n    r1, c1, r2, c2 = map(int, stdin.readline().split())\n    xors[r1 - 1][c1 - 1] ^= 1\n    xors[r2 - 1][c2 - 1] ^= 1\n\nfor i in range(N):\n    for j in range(N):\n        print(xors[i][j], end=\"\")\n    print()\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == 'impossible'\nassert solution('1 2') == 'impossible'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\"\"\""
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '1'\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\nassert solution('''\n4 3\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == '2'\nassert solution('''\n4 4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == '1'\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == 1\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 'impossible'\n\n---Problem: Shortest Valid Parentheses---\nWrite a program to find the minimum number of parentheses and their positions (in pairs) that will make the input string valid. The input will be a string containing only \u201c(\u201d and \u201c)\u201d. The parentheses are used to construct balanced expressions. You need to find the minimum number of parentheses (in any positions) and their positions (pairs) to make the input string valid.\n\nInput Format:\nInput contains a single string of parentheses only: \u201c(\u201c, \u201c)\u201d,\u201d{\u201c, \u201c}\u201d, and \u201c[\u201c, \u201c]\u201d.\n\nConstraints:\n1 <= len(s) <= 10^6\n\nOutput Format:\nPrint the minimum number of parentheses and their positions (in pairs) that will make the input string valid. If no such arrangement exists, print -1.\n\nSample Input 1:\n()\nSample Output 1:\n0\n\nSample Input 2:\n([])\nSample Output 2:\n0\n\nSample Input 3:\n([)]\nSample Output 3:\n-1\n\nSample Input 4:\n()[]{}\nSample Output 4:\n1\n\nSample Input 5:\n(()\nSample Output 5:\n2\n\nExplanation:\nThe string () can be written as ()(), so the answer is 1.\n\n---Problem: Distinct Numbers in String---\nWrite a program that, given an input string, prints the number of distinct characters in the input string.\n\nInput Format:\nThe first line of input contains T denoting the number of testcases. T testcases follow. Each testcase contains a single line of input containing the string.\n\nOutput Format:\nFor each testcase, in a new line, print the number of distinct characters present in the string.\n\nYour Task:\nSince this is a function problem, you don't need to take inputs. Just complete the provided function.\n\nConstraints:\n1 <= T <= 100\n\nExample:\nInput:\n2\ngeeksforgeeks\npracticegeeks\nOutput:\n5\n5\n\nExplanation:\nTestcase 1: In the given string, 'e', 'k','s', 'f', 'r', 'o', 'g' are present. So the number of distinct characters are 5.\nTestcase 2: In the given string, 'e', 'k','s', 'f', 'r', 'o', 'g' are present. So the number of distinct characters are 5.\n\n---Problem: Longest Substring Without Repeating Characters---\nGiven a string, find the length of the longest substring without repeating characters.\n\nInput Format:\nThe first and only line of input contains the string, s.\n\nOutput Format:\nPrint the length of the longest substring.\n\nSample Input 1:\nabcbacadefegdehijhklij\nSample Output 1:\n9\n\nSample Input 2:\naabccbb\nSample Output 2:\n3\n\nSample Input 3:\nabccde\nSample Output 3:\n2\n\n---Problem: Minimum Insertions to Balance a Parentheses String---\nGiven a parentheses string, compute the minimum number of insertions (as defined above) to balance the parentheses string. For simplicity, you can assume that the input string is always valid.\n\nInput Format:\nThe only line of the input contains the parentheses string s.\n\nOutput Format:\nPrint the minimum number of insertions needed to balance the input string.\n\nSample Input 1:\n()))((\nSample Output 1:\n2\n\nSample Input 2:\n()()\nSample Output 2:\n0\n\nSample Input 3:\n((()))\nSample Output 3:\n0\n\nSample Input 4:\n()()(((\nSample Output 4:\n1\n\n---Problem: Minimum Remove Operations to Make String Palindrome---\nGiven a string s, the task is to find the minimum number of characters to be removed such that the string becomes palindrome.\n\nInput Format:\nThe only line of input contains string s.\n\nOutput Format:\nPrint the minimum number of characters to be removed.\n\nSample Input 1:\nababa\nSample Output 1:\n2\n\nSample Input 2:\ncddpd\nSample Output 2:\n0\n\nSample Input 3:\ngeeksogeeks\nSample Output 3:\n3\n\n---Problem: Smallest String Containing Characters Frequent in String---\nGiven a string, find the minimum number of characters to be added to make the string a palindrome.\n\nInput Format:\nThe only line of input contains a string of lowercase alphabetic characters.\n\nOutput Format:\nPrint the minimum number of characters that need to be added to the string to make it a palindrome.\n\nSample Input 1:\naaabbbbb\nSample Output 1:\n1\n\nSample Input 2:\naaabbb\nSample Output 2:\n2\n\nSample Input 3:\naabbb\nSample Output 3:\n0\n\n---Problem: Longest Substring Without Repeating Characters---\nGiven a string, find the length of the longest substring without repeating characters.\n\nInput Format:\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 1\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 'impossible'\n\"\"\""
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"1\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"impossible\"\nprint('All tests passed.')"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"1\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"impossible\"\n\"\"\"\n\n\"\"\"\nBFS (or DFS) + memo\n\"\"\"\nimport copy"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35\\n18\\n3\"\nassert solution(\"11 3\\n3 7 10\\n3\\n0 10\\n2 6\\n7 7\") == \"8\\n2\\n1\"\nprint('The code is working properly')"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1') == '8'\n\nassert solution('5 1 10') == '15'\n\nassert solution('11 1 10') == '15'\n\nassert solution('7 11 1') == '15'\n\nassert solution('7 11 10') == '27'"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n') == '35\\n18\\n3'\nassert solution('20 10 3\\n3 7 10\\n3\\n0 10\\n2 6\\n7 7\\n') == '8\\n2\\n1'"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 3\\n 1 1 2 2\\n 3\\n 1 2\\n 2 3\") == \"2\\n3\\n7\"\n\nassert solution(\"6 8 10\\n 3 7 9\\n 4\\n 4 8\\n 4 9\\n 1 2\\n 5 6\\n 6 8\\n 5 7\") == \"1\\n3\\n5\\n7\"\n\nassert solution(\"10 10 10\\n 1 1 1\\n 3\\n 0 10\\n 2 2\\n 4 4\\n 4 4\\n 5 5\\n 5 5\\n 6 6\\n 6 6\\n 7 7\\n 7 7\\n 8 8\\n 8 8\\n 9 9\\n 9 9\\n 10\") == \"8\\n2\\n3\\n7\\n9\"\n\n\"\"\""
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35 18 3\"\nassert solution(\"10 6 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"8 2 1\"\n\n\"\"\"\n\nfrom typing import List\nfrom functools import reduce\nfrom math import gcd\nimport sys"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n') == '35\\n18\\n3'\n\nassert solution('11 3\\n3 7 10\\n3\\n0 10\\n2 6\\n7 7\\n') == '8\\n2\\n1'\n\nprint('Success')\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n\") == \"35\\n18\\n3\"\nassert solution(\"11 3\\n3 7 10\\n3\\n0 10\\n2 6\\n7 7\\n\") == \"8\\n2\\n1\"\nassert solution(\"11 2\\n1 1\\n3\\n0 10\\n2 6\\n7 7\\n\") == \"8\\n2\\n1\"\nassert solution(\"10 1\\n3\\n0 9\\n2 6\\n7 7\\n\") == \"18\\n3\"\nassert solution(\"10 3\\n1 2 3\\n3\\n0 9\\n2 6\\n7 7\\n\") == \"16\\n1\"\n\n\"\"\"\n\nN, K = [int(x) for x in input().split()]\nseq = [0] * N\nfor i in range(K):\n    X = [int(x) for x in input().split()]\n    for j in range(1, len(X)):\n        seq[X[j]-1] += X[0]\nfor i in range(Q):\n    L, R = [int(x) for x in input().split()]\n    print(sum(seq[L-1:R]))\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n\") == \"35\\n18\\n3\"\nassert solution(\"11 3\\n3 7 10\\n3\\n0 10\\n2 6\\n7 7\\n\") == \"8\\n2\\n1\"\n\n\"\"\""
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35\\n18\\n3\"\nassert solution(\"7 2\\n1 3 5 7 9 11\\n1\\n2 6\\n7 7\") == \"8\\n2\\n1\"\nassert solution(\"1 10\\n3 6\\n5 10\") == \"5\\n2\""
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\\n\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\\n\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6'\n\nimport sys\n\nassert solution(sys.stdin.read()) == sys.stdout.write()\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\n\n\"\"\"\n\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def __repr__(self):\n        return f\"Node({self.value})\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nc = 0\narr = [int(i) for i in stdin.readline().strip().split()]\narr = arr + [0]\nfor i in range(1, n + 1):\n    for j in range(i, n + 1):\n        if arr[j] <= arr[i]:\n            c += 1\n    print(c)\n    c = 0\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\\n\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\\n\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"0\\n1\\n2\\n3\\n4\\n5\\n\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"0\\n1\\n2\\n3\\n4\\n5\\n\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"0\\n1\\n2\\n3\\n4\\n5\\n\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6\\n'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6\\n'\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6\\n'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6\\n'\n\"\"\"\n\nimport sys\n\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n4\\n6\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\nnumber_of_nodes = int(sys.stdin.readline())\nnodes = list(map(int, sys.stdin.readline().split()))\n\nmax_node = max(nodes)\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n\") == '2 4 1 3'\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n\") == '4 3 1 2'\n\"\"\"\n\nfrom math import sqrt\nfrom functools import cmp_to_key"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == '2 4 1 3'\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == '4 3 1 2'\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == '4 3 1 2'\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == '4 3 1 2'\n\n\"\"\""
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\n\"\"\"\nfrom collections import defaultdict\nfrom math import hypot\nfrom typing import List\n\nfrom helpers.linked_list import LinkedList\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\n\"\"\""
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n\") == \"2 4 1 3\"\nprint(solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n\"))\n\"\"\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3') == '4 3 1 2'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\n\nassert solution(input_5) == output_5\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5''') == 'Theta wins'\nassert solution('''89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'\nassert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5''') == 'Theta wins'\nassert solution('''878724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'\n\n'''\n\n'''\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\""
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\""
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == 'Theta wins'\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == 'Theta wins'\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\""
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\"\nimport collections\nimport functools\nimport itertools\nfrom typing import List\n\n\nclass Deck:\n    def __init__(self, deck: str):\n        self.deck = deck\n        self.discards = ''\n        self.drawpile = ''\n\n    def draw(self) -> str:\n        while len(self.drawpile) < 52:\n            self.discards += self.deck\n        card = self.drawpile[0]\n        self.drawpile = self.drawpile[1:]\n        return card\n\n    def discard(self, card: str):\n        self.drawpile += card\n        self.discards += card\n\n    def discard_index(self, card: str) -> int:\n        return self.discards.find(card)\n\n    def draw_index(self, card: str) -> int:\n        return self.drawpile.find(card)\n\n    def draw_count(self, card: str) -> int:\n        return self.drawpile.count(card)\n\n    def discard_count(self, card: str) -> int:\n        return self.discards.count(card)\n\n    def is_discarded(self, card: str) -> bool:\n        return self.discards.find(card) >= 0\n\n    def is_in_drawpile(self, card: str) -> bool:\n        return self.drawpile.find(card) >= 0\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\""
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\"\n\nfrom typing import Dict, List\n\nfrom icontract import require\nfrom icontract import ensure\n\nfrom python_by_contract_corpus.common import Lines\n\nMAX_CARDS = 52"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\""
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('1 2\\n1 not fabulist 1 fabulist 2') == 'truther'\nassert solution('1 2\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n\"\"\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 2\n1 charlatan 1\n1 not charlatan 1''') == 'charlatan'\n\nassert solution('''1 2\n1 and fabulist 1 fabulist 2''') == 'fabulist'\n\nassert solution('''1 2\n1 truther 1 truther 2''') == 'truther'\n\nassert solution('''1 2\n1 truther 1 truther 2 and fabulist 1 fabulist 2''') == 'truther'\n\nassert solution('''1 2\n1 and fabulist 1 and fabulist 2''') == 'truther'"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n-----Test 1-----\n>>> for i, line in enumerate(stdin.splitlines()):\n...     print(solution(line))\n...\ncharlatan\n\n-----Test 2-----\n>>> for i, line in enumerate(stdin.splitlines()):\n...     print(solution(line))\n...\ncharlatan\n\n\"\"\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 and fabulist 1 fabulist 2\") == \"fabulist\"\n\nsolution(\"2 1\\n1 and fabulist 1 fabulist 2\") == \"fabulist\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 truther 1\\n1 not charlatan 1\\n1 xor fabulist 1 fabulist 2') == 'charlatan'\n\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 charlatan 1\\n1 not charlatan 1\") == \"charlatan\"\nassert solution(\"2 1\\n1 and fabulist 1 fabulist 2\") == \"fabulist\"\nassert solution(\"1 1\\n1 truther 1\") == \"truther\"\nassert solution(\"2 1\\n1 and fabulist 1 fabulist 2\") == \"fabulist\"\nassert solution(\"1 1\\n1 charlatan 1\") == \"charlatan\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1 charlatan 1\n1 not charlatan 1\n''') == 'charlatan'\n\nassert solution('''\n1 2\n1 truther 1\n1 not truther 1\n''') == 'truther'\n\nassert solution('''\n1 2\n1 charlatan 1\n1 and fabulist 1 fabulist 2\n''') == 'fabulist'\n'''\n-----Problem-----\nThe numbers $1$ to $N$ are the names of candidates in the debate. The names will appear only in the following order:\n1 2 3... N\nWhere:\n - $1$ is a truther\n - $2$ is a fabulist\n - $3$ is a charlatan\n - $N$ is the winner\n\nThe judges will go through the debate in order, speaking to each candidate independently.\n\nEach candidate knows the character type of all other candidates.\n\nFor example, if the character types are listed in the order:\n\ntruther\nfabulist\ncharlatan\nthen the judges will go through the debate as follows:\n\ntruther\u00a0<fabulist>\u00a0charlatan\nfabulist\u00a0<truther>\u00a0charlatan\ntruther\u00a0<charlatan>\u00a0charlatan\nfabulist\u00a0<charlatan>\u00a0charlatan\ncharlatan\u00a0<charlatan>\u00a0charlatan\ncharlatan\u00a0<fabulist>\u00a0fabulist\ncharlatan\u00a0<truther>\u00a0truther\ncharlatan\u00a0<fabulist>\u00a0fabulist\nfabulist\u00a0<charlatan>\u00a0charlatan\ntruther\u00a0<charlatan>\u00a0charlatan\ncharlatan\u00a0<truther>\u00a0truther\nfabulist\u00a0<charlatan>\u00a0charlatan\n\nSince the judge in position 2 is a truther and the judge in position 1 is a fabulist, the winner of this debate is the candidate whose character type is \"truther\".\n\nWrite 5 lines of code to test the correctness of solution:\n\n- Print character type of candidate 1.\n- Print character type of candidate 2.\n- Print character type of candidate 3.\n- Print character type of candidate 4.\n- Print character type of candidate 5.\n\n-----Solution-----\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 charlatan 1\\n1 not charlatan 1\") == \"charlatan\"\nassert solution(\"1 2\\n1 and fabulist 1 fabulist 2\") == \"fabulist\"\nassert solution(\"1 2\\n1 truther 1 truther 2\") == \"truther\"\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n1 charlatan 1\\n1 not charlatan 1\") == \"charlatan\"\nassert solution(\"2 1\\n1 and fabulist 1 fabulist 2\") == \"fabulist\"\nassert solution(\"1 7\\n1 truther 1\\n1 not truther 1\\n1 charlatan 1\\n1 and truther 1\\n1 xor truther 1\\n1 and fabulist 1\\n1 and charlatan 1\\n1 xor charlatan 1\\n1 and not truther 1\\n1 xor not truther 1\\n1 and fabulist 1\\n1 and charlatan 1\\n1 xor fabulist 1\\n1 and not truther 1\\n1 xor not truther 1\\n1 and fabulist 1\\n1 and charlatan 1\\n1 xor charlatan 1\\n1 and not truther 1\\n1 xor not truther 1\\n1 and fabulist 1\\n1 and charlatan 1\\n1 xor truther 1\\n1 and not truther 1\\n1 and fabulist 1\\n1 and charlatan 1\\n1 xor not truther 1\\n1 xor not truther 1\\n1 and fabulist 1\\n1 and charlatan 1\\n1 xor charlatan 1\\n1 and not truther 1\\n1 xor not truther 1\\n1 and fabulist 1\\n1 and charlatan 1\") == \"truther\"\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.sample_input_1) == solution.sample_output_1\nassert solution(solution.sample_input_2) == solution.sample_output_2\n\"\"\"\n\nclass Util:\n    def __init__(self):\n        self.cache = {}\n\n    def vprint(self, v):\n        if v:\n            print(v)\n\n    def clear(self):\n        self.cache.clear()\n\n    def prime_factors(self, n):\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def get_solution(self, n, k):\n        try:\n            return self.cache[n, k]\n        except:\n            self.cache[n, k] = self.prime_factors(n)[k]\n            return self.cache[n, k]\n\nutil = Util()\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == '4'\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\n\nprint(solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\"))\n\"\"\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == \"3\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('5\\n-1.00 -1.00\\n1.00 -1.00\\n0.00 1.00') == '3'\n\n'''\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n\"\"\") == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\nassert solution(\"5\\n-1.00 -1.00\\n1.50 -1.00\\n0.00 1.00\") == \"3\"\nprint(\"Passed all tests...!\")\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == '4'\n\"\"\"\nfrom typing import List\n\nfrom _2020.utils.io import stream_lines\n\n\nclass Point:\n    def __init__(self, x: float, y: float):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"({self.x}, {self.y})\"\n\n    def __eq__(self, o: object) -> bool:\n        return isinstance(o, Point) and o.x == self.x and o.y == self.y\n\n    def __hash__(self):\n        return hash(self.x)\n\n    def __add__(self, other: \"Point\") -> \"Point\":\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: \"Point\") -> \"Point\":\n        return Point(self.x - other.x, self.y - other.y)\n\n\nclass Polygon:\n    def __init__(self, points: List[Point]):\n        self.points = points\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.points})\"\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, Polygon) and self.points == other.points\n\n    def __hash__(self):\n        return hash(self.points)\n\n    def __iter__(self):\n        return iter(self.points)\n\n    def inside(self, point: Point) -> bool:\n        \"\"\"Check if point is inside polygon\"\"\"\n        points_iter = iter(self.points)\n        points_iter_len = len(self.points)\n        for _ in range(points_iter_len - 1):\n            prev_point = next(points_iter)\n            next_point = next(points_iter)\n            if prev_point.y <= point.y < next_point.y or next_point.y <= point.y < prev_point.y:\n                if (point.x - prev_point.x) * (point.y - next_point.y) == (next_point.x - prev_point.x) * (point.y - prev_point.y):\n                    return True\n        return False\n\n    def outside(self, point: Point) -> bool:\n        \"\"\"Check if point is outside polygon\"\"\"\n        return not self.inside(point)\n\n    def intersects(self, other: \"Polygon\") -> bool:\n        \"\"\"Check if polygon intersects with another polygon\"\"\"\n        for p1 in self:\n            for p2 in other:\n                if p1 == p2:\n                    return True\n                if Point(p1.x, p2.y) == Point(p2.x, p1.y):\n                    return True\n        return False\n\n    def contains(self, other: \"Polygon\") -> bool:\n        \"\"\"Check if polygon contains other polygon\"\"\"\n        if isinstance(other, Polygon):\n            for p1 in self:\n                for p2 in other:\n                    if p1 == p2:\n                        return True\n        else:\n            raise ValueError(f\"Expected {Polygon.__name__} object, but received {type(other).__name__}\")\n        return False\n\n\nclass Solution:\n    def get_points(self, point_iter: Iterator[str]) -> List[Point]:\n        points: List[Point] = []\n        for point in point_iter:\n            x, y = point.split()\n            points.append(Point(float(x), float(y)))\n        return points\n\n    def solve(self, stdin: str) -> str:\n        point_iter = stream_lines(stdin)\n        points = self.get_points(point_iter)\n        polygons: List[Polygon] = [Polygon(p) for p in self.get_all_polygons(points)]\n        return str(len([p for p in polygons if p.inside(points[0])]))\n\n    def get_all_polygons(self, points: List[Point]) -> List[Polygon]:\n        polygons = []\n        for i, p0 in enumerate(points):\n            for j, p1 in enumerate(points[i + 1:]):\n                points_iter = iter(points)\n                points_iter_len = len(points)\n                for k, p2 in enumerate(points_iter):\n                    points_iter_len -= 1\n                    p3 = next(points_iter)\n                    polygons.append(Polygon([p0, p1, p2, p3]))\n        return polygons\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\n\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'\n\nimport math"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 2\\nR..\\n.X.\\n100 100 7 100 8\\n\") == \"16\"\nassert solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\\n\") == \"10\"\n\n\"\"\"\n\nimport sys\n\nimport math\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1\\nX..\\n.?\\n10 1000 1\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"16\"\nassert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"16\"\n\"\"\""
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"16\"\nassert solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\") == \"10\"\nassert solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5 2\\nR.R?.\\n.X...\\n100 100 7 100 8\") == \"16\"\nassert solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\") == \"10\"\n\nprint(solution(\"2 5 2\\nR.R?.\\n.X...\\n100 100 7 100 8\"))\nprint(solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\"))\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1\\nX..\\n.?\\n10 1000 1') == '10'\nprint(solution('2 5 2\\nR..?\\n.X...\\n100 100 7 100 8\\n'))\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == 16\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\\n\") == \"16\"\nassert solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\\n\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 2\\nR..?\\n.X...\\n100 100 7 100 8\") == \"16\"\nprint(solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\"))\nprint(solution(\"3 4 4\\nL..R..\\nR..L..\\nL..L..\\n.R..R.\"))\n\n\"\"\"\nfrom itertools import product"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"16\"\n\"\"\"\n\nimport math\nimport typing"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\") == '1.414'\nassert solution(\"6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\") == '5.657'\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\nx = []\ny = []\nfor _ in range(n):\n    tmp = [int(x) for x in input().split()]\n    x.append(tmp[0])\n    y.append(tmp[1])"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n0 4 4\\n1 5 1\\n2 6 1\\n') == '1.414'\nassert solution('6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\\n') == '5.657'\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\\n\") == \"5.657\"\nprint('Test pass.')"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\\n\") == \"1.414\"\nassert solution(\"6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\\n\") == \"5.657\"\n\nprint(solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\\n\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n0 4 4\\n1 5 1\\n2 6 1\\n') == '1.414'\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\") == \"1.414\"\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n0 1 2\\n1 1 4\") == '1.414'\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1') == '1.414'\nassert solution('6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10') == '5.657'\n\"\"\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 11\") == \"5.657\"\n\"\"\"\nfrom decimal import Decimal, getcontext\nimport math\nimport sys"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\") == '1.414'\nassert solution(\"6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\") == '5.657'\n\"\"\"\n\nfrom fractions import gcd\nfrom math import sqrt\n\nfrom utils.decorators import timeit\nfrom utils.numbers import is_power, prime_factors\n\n@timeit\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 1 1 1\\n\") == \"1.0\"\nassert solution(\"3 1 1 1\\n\") == \"0.433\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add\n\nstdin = [line.rstrip().split() for line in open(\"test_files/Y11R5P1/A.in\")]\nn, *lengths = stdin[0]\nn = int(n)\nlengths = [int(x) for x in lengths]"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 1 1 1\\n3 1 1 1') == '1.0'\nassert solution('3 1 1 1\\n1 1 1') == '0.433'\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 1 1 1\\n') == '1.0'\nassert solution('3 1 1 1\\n') == '0.433'\nassert solution('11 1 1 1 1\\n') == '11.0'\nassert solution('12 1 1 1 1\\n') == '12.0'\nassert solution('13 1 1 1 1\\n') == '13.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 1 1 1\\n') == '1.0'\nassert solution('3 1 1 1\\n') == '0.433'\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 1 1 1 1\n''') == '1.0'\nassert solution('''3 1 1 1\n''') == '0.433'\n\"\"\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 1 1 1\\\\n3 1 1 1') == '1.0'\nassert solution('4 1 1 1\\\\n3 1 1 1') == '0.433'\nassert solution('4 1 1 1\\\\n1') == '0.0'\nassert solution('0\\\\n1') == '0.0'\n\"\"\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 1 1 1\\n') == '1.0'\nassert solution('3 1 1 1\\n') == '0.433'\n\"\"\""
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5''') == '5'\nassert solution('''8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15''') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\"\n\"\"\"\n\nN, K = map(int, input().split())\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\""
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n\") == \"36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\"\n\nprint(\"Success\")\n\n'''\n    https://www.youtube.com/watch?v=WW-9o-e_Wvk\n    https://www.youtube.com/watch?v=4sibvEIYzfM\n'''\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\"\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"36\"\nassert solution(\"4 10\", \"5 10\") == \"36\"\n\"\"\""
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\\n\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n\") == \"36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\\n\"\n\"\"\"\n\nN, K = map(int, input().split())\n\nplants = []\nfor i in range(N):\n    x, y, f = map(int, input().split())\n    plants.append([x, y, f])\n\ndist = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    for j in range(i, N):\n        if i == j:\n            dist[i][j] = 0\n            continue\n        x1, y1, f1 = plants[i]\n        x2, y2, f2 = plants[j]\n        if x1 > x2 and y1 == y2:\n            dist[i][j] = dist[j][i] = abs(x1 - x2)\n        elif y1 > y2 and x1 == x2:\n            dist[i][j] = dist[j][i] = abs(y1 - y2)\n        else:\n            dist[i][j] = dist[j][i] = 100001\n\ndp = [[-1 for i in range(K + 1)] for j in range(N)]\ndp[0][0] = 0\n\nfor i in range(N):\n    for j in range(K + 1):\n        if dp[i][j]!= -1:\n            for k in range(i, N):\n                if dp[k][j] == -1:\n                    dp[k][j] = dp[i][j]\n                elif j < K:\n                    dp[k][j + 1] = min(dp[k][j + 1], dp[k][j] + dist[k][k])\n\nfor i in range(N):\n    print(dp[i][K])"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n\"\"\") == '5'\n\nassert solution(\n\"\"\"\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n\"\"\") == '36'\n\n\"\"\"\n\nI tried to solve this problem by brute force. I went through all possible combinations of plants and their neighbours and selected the one that increases the energy the most. This works fine for small values of $N$ and $K$, but obviously isn't the most efficient way to do it. The process becomes exponentially slower and exponentially slower for larger values of $N$ and $K$. I could have done this in a different way, but I decided not to.\n\"\"\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\""
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\nprint(solution(a))\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2 1\\n2 1') == '0'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3') == '3'\n\nprint('Test finished.')\n\n----\n\nPlease add your code below. Feel free to add functions, classes, and other\nmodules as needed.\n\"\"\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3') == '3'\nassert solution('4 4\\n2 1 4\\n2 4\\n1 3\\n1 4\\n') == '4'"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\n\nn, m = [int(i) for i in stdin.readline().split()]\n\nperm = [int(i) for i in stdin.readline().split()]\n\nedges = []\n\nfor _ in range(m):\n    a, b = [int(i) for i in stdin.readline().split()]\n    edges.append((a, b))"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n2 1\\n1 2') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3') == '3'\nassert solution('3 4\\n1 2 3\\n2 4\\n1 3') == '3'\nassert solution('2 5\\n1 2\\n2 5\\n1 3\\n1 4') == '3'\nassert solution('3 2\\n1 2\\n2 3\\n1 3') == '3'\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n3 6\") == \"5\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n3 6\") == \"5\"\nassert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n3 6\") == \"5\"\n\"\"\"\nimport sys\nimport random\nimport time"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n'''\n\nfrom functools import lru_cache"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n\") == \"5\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n\"\"\") == -1\n\nassert solution(\"\"\"6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n\"\"\") == 5\n\"\"\"\nfrom collections import defaultdict\nclass Solution:\n    def minCost(self, stdin):\n        n, m = map(int, stdin.readline().split())\n        adj = defaultdict(list)\n        for _ in range(m):\n            u, v = map(int, stdin.readline().split())\n            adj[u].append(v)\n            adj[v].append(u)\n        queue = [1]\n        seen = {1}\n        cost = 0\n        while queue:\n            next_queue = []\n            for node in queue:\n                for child in adj[node]:\n                    if child not in seen:\n                        next_queue.append(child)\n                        seen.add(child)\n                        cost += 1\n            queue = next_queue\n        if len(seen)!= n:\n            return -1\n        return cost\n\n\nsolution = Solution()\nassert solution(\"\"\"5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n\"\"\") == -1\n\nassert solution(\"\"\"6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n\"\"\") == 5\n\"\"\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == -1\n\"\"\"\n\n\"\"\"\n1583\ubc88 \uc774\ubd84 \uadf8\ub798\ud504\n\n\ubb38\uc81c:\n- \uc8fc\uc5b4\uc9c4 \uadf8\ub798\ud504\uc5d0\uc11c \ud2b9\uc815 \ud558\ub098\uc758 \uc815\uc810\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc838 \uc788\ub294 \uc815\uc810\uc758 \uac1c\uc218\ub97c \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub77c\n\n\uc608\uc81c:\n- \uc8fc\uc5b4\uc9c4 \uadf8\ub798\ud504\uc5d0\uc11c 1\ubc88 \uc815\uc810\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uc815\uc810\uc774 4\ubc88 \uc815\uc810\uc774\ub77c\uace0 \ud560 \ub54c, 4\ubc88 \uc815\uc810\uc740 \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uc815\uc810\uc774\ub2e4.\n\n\uc811\uadfc \ubc29\ubc95:\n- \uac01 \uc815\uc810\uc744 \uc2dc\uc791\uc810\uc73c\ub85c \ud558\ub294 \uc774\ubd84 \uadf8\ub798\ud504\ub97c \ub9cc\ub4e0\ub2e4\n- \ud574\ub2f9 \uc774\ubd84 \uadf8\ub798\ud504\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uc815\uc810\uc744 \uad6c\ud55c\ub2e4.\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\") == -1\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(0)) ==???\nprint(solution(open(0, 'r')))\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == -1\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == -1\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == 5\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\") == \"7\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\") == \"12\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\") == \"23\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\") == \"32\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\n\"\"\""
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\") == \"4.00\"\n\"\"\"\n\nfrom itertools import combinations\nfrom math import sqrt\n\nstdin = open('./test_cases/S16A065.in', 'r').read()"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == b\nprint(solution(a))\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n0 0\\n10 0\") == \"10.00\"\nassert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"9.00\"\nassert solution(\"6 2\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\") == \"9.00\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0') == '9.00'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == '4.00'\n\"\"\"\n\nimport itertools\nimport re\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\nassert solution(\"6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\") == \"9.00\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\\n\"\n    \"PAINT 2 0 0 3 3\\n\"\n    \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n\"\nassert solution(\"3 3 4\\n\"\n    \"PAINT 3 0 0 1 1\\n\"\n    \"SAVE\\n\"\n    \"PAINT 2 1 1 2 2\\n\"\n    \"LOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\\n\"\nprint('All tests passed.')\n\n------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nprint('All tests passed.')\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\") == \"3 1 1\\n1 3 1\\n1 1 1\"\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n\"\n                \"PAINT 2 0 0 3 3\\n\"\n                \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n\"\"\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n\"\n                \"PAINT 2 0 0 3 3\\n\"\n                \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\nassert solution(\"3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '''2 1 2 3\n1 2 1 2\n2 1 2 3\n1 2 1 2'''\n\nassert solution('''4 3 2\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '''3 1 1\n1 3 1\n1 1 1'''\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2'\nassert solution('3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\\n') == '3 1 1\\n1 3 1\\n1 1 1'\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 3\n''') == '1 4 2 3'\nassert solution('''5 1\n''') == '-1'\n\"\"\"\n\n\"\"\"\nSolution 1\n\nclass Solution:\n    def __init__(self, N: int, K: int):\n        self.N = N\n        self.K = K\n\n    def longestMonotonicSubsequence(self, nums):\n        nums = self.reorder(nums)\n        return self.longestMonotonicSubsequence2(nums, 0, len(nums) - 1)\n\n    def longestMonotonicSubsequence2(self, nums, start, end):\n        if end - start < self.K:\n            return []\n        if start == end:\n            return [nums[start]]\n\n        if nums[start] == nums[end]:\n            return self.longestMonotonicSubsequence2(nums, start + 1, end - 1)\n\n        left = self.longestMonotonicSubsequence2(nums, start, (start + end) // 2)\n        right = self.longestMonotonicSubsequence2(nums, (start + end) // 2 + 1, end)\n\n        result = self.merge(left, right)\n        return result\n\n    def reorder(self, nums):\n        result = []\n        for num in nums:\n            if len(result) == 0 or result[-1] <= num:\n                result.append(num)\n            else:\n                idx = self.find_insert_position(result, num)\n                result = result[:idx] + [num] + result[idx:]\n\n        return result\n\n    def find_insert_position(self, nums, num):\n        left = 0\n        right = len(nums)\n\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] <= num:\n                left = mid + 1\n            else:\n                right = mid\n\n        return left\n\n    def merge(self, left, right):\n        result = []\n\n        while len(left)!= 0 and len(right)!= 0:\n            if left[0] <= right[0]:\n                result.append(left.pop(0))\n            else:\n                result.append(right.pop(0))\n\n        result += left\n        result += right\n\n        return result\n\n\nsolution = Solution(int(stdin.readline().split()[0]), int(stdin.readline().split()[0]))\nprint(solution.longestMonotonicSubsequence(list(map(int, stdin.readline().split()))))\n\"\"\"\n\n\"\"\"\nSolution 2\n\nimport bisect\n\nclass Solution:\n    def __init__(self, N: int, K: int):\n        self.N = N\n        self.K = K\n\n    def longestMonotonicSubsequence(self, nums):\n        if not nums:\n            return []\n\n        result = []\n        max_ascending = 0\n        max_descending = 0\n\n        for num in nums:\n            if num > nums[-1]:\n                max_descending = max(max_descending, len(result))\n                result.append(num)\n            elif num < nums[-1]:\n                max_ascending = max(max_ascending, len(result))\n                result.append(num)\n            else:\n                idx = bisect.bisect_left(result, num)\n                result[idx] = num\n\n        return max(max_ascending, max_descending, self.K)\n\nsolution = Solution(int(stdin.readline().split()[0]), int(stdin.readline().split()[0]))\nprint(solution.longestMonotonicSubsequence(list(map(int, stdin.readline().split()))))\n\"\"\"\n\n\"\"\"\nSolution 3\n\nclass Solution:\n    def __init__(self, N: int, K: int):\n        self.N = N\n        self.K = K\n\n    def longestMonotonicSubsequence(self, nums):\n        nums = sorted(nums)\n        left = 0\n        right = len(nums) - 1\n\n        result = []\n\n        while left < right:\n            if nums[left] <= nums[right]:\n                result.append(nums[right])\n                right -= 1\n            else:\n                result.append(nums[left])\n                left += 1\n\n        if len(result) < self.K:\n            return []\n\n        return result\n\nsolution = Solution(int(stdin.readline().split()[0]), int(stdin.readline().split()[0]))\nprint(solution.longestMonotonicSubsequence(list(map(int, stdin.readline().split()))))\n\"\"\"\n\n\"\"\"\nSolution 4\n\nclass Solution:\n    def __init__(self, N: int, K: int):\n        self.N = N\n        self.K = K\n\n    def longestMonotonicSubsequence(self, nums):\n        nums = sorted(nums)\n        left = 0\n        right = len(nums) - 1\n\n        result = []\n\n        while left <= right:\n            if len(result) >= self.K:\n                return result\n\n            if nums[left] <= nums[right]:\n                result.append(nums[right])\n                right -= 1\n            else:\n                result.append(nums[left])\n                left += 1\n\n        return result\n\nsolution = Solution(int(stdin.readline().split()[0]), int(stdin.readline().split()[0]))\nprint(solution.longestMonotonicSubsequence(list(map(int, stdin.readline().split()))))\n\"\"\"\n\n\nclass Solution:\n    def __init__(self, N: int, K: int):\n        self.N = N\n        self.K = K\n\n    def longestMonotonicSubsequence(self, nums):\n        nums = sorted(nums)\n        left = 0\n        right = len(nums) - 1\n\n        result = []\n\n        while left <= right:\n            if len(result) >= self.K:\n                return result\n\n            if nums[left] <= nums[right]:\n                result.append(nums[right])\n                right -= 1\n            else:\n                result.append(nums[left])\n                left += 1\n\n        return result\n\n\nsolution = Solution(int(input()), int(input()))\nprint(solution.longestMonotonicSubsequence(list(map(int, input().split()))))\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"1 4 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\"\nassert solution(\"5 2\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"1 4 2 3\"\nassert solution(\"5 1\\n2 5 4 5 3\") == \"-1\"\nassert solution(\"5 4\\n2 4 4 2 4\") == \"2 4 4 2 4\"\nassert solution(\"5 6\\n2 5 4 5 3\") == \"2 5 4 5 3\"\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\"\nassert solution(\"7 4\") == \"7 5 8 6 9\"\n\"\"\""
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\nassert solution(input()) == output()\nassert solution(input()) == output()\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 4 2 3\") == \"1 4 2 3\"\nassert solution(\"5 1\\n-1\") == \"-1\"\n\n\"\"\"\nimport itertools\nimport collections\nimport typing\nimport typing as t\n\nN, K = [int(n) for n in stdin.readline().split()]\nnums = [int(stdin.readline()) for _ in range(N)]\n\nnums.reverse()\n\ni = 0\nj = 0\n\nstart = []\n\ntemp = nums[0]\nstart.append(temp)\n\nmax_len = 0\n\nresult = []"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 4 2 3\") == \"1 4 2 3\"\nassert solution(\"4 5\\n1 4 2 3 5\") == \"-1\"\nassert solution(\"5 1\\n1 4 2 3 5\") == \"-1\"\n\n\"\"\"\n\nimport unittest\nimport itertools\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 4 2 3') == '1 4 2 3'\nassert solution('5 1\\n1 4 2 3 5') == '-1'\nassert solution('5 5\\n1 4 2 3 5') == '1 4 2 3 5'\nassert solution('5 7\\n1 4 2 3 5 6 7') == '1 4 2 3 5 6 7'\nassert solution('8 7\\n1 2 3 4 5 6 7 8') == '1 2 3 4 5 6 7 8'\n\"\"\"\n\nn, m = input().split(' ')\nn = int(n)\nm = int(m)"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\") == '1'\n\"\"\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\") == \"1\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Dict, List\n\nclass Point:\n    \"\"\"\n    Represents a point in the coordinate plane.\n\n    Attributes\n    ----------\n    x : int\n        The x coordinate of the point.\n    y : int\n        The y coordinate of the point.\n    \"\"\"\n\n    def __init__(self, x: int, y: int) -> None:\n        \"\"\"\n        Initializes a Point with given x and y coordinates.\n\n        Parameters\n        ----------\n        x : int\n            The x coordinate of the point.\n        y : int\n            The y coordinate of the point.\n        \"\"\"\n\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return f\"({self.x}, {self.y})\"\n\n    def __add__(self, other: Point) -> Point:\n        \"\"\"\n        Adds two points.\n\n        Parameters\n        ----------\n        other : Point\n            The other point to add.\n\n        Returns\n        -------\n        Point\n            A Point representing the result of adding two points.\n\n        Raises\n        ------\n        ValueError\n            Raises a ValueError if the two points being added are not on the same plane.\n        \"\"\"\n\n        if self.x == other.x and self.y == other.y:\n            return Point(self.x, self.y)\n\n        if self.x == other.x and self.y!= other.y:\n            return Point(self.x, other.y)\n\n        if self.x!= other.x and self.y == other.y:\n            return Point(other.x, self.y)\n\n        raise ValueError(\"Points not on the same plane.\")\n\n    def __eq__(self, other: Point) -> bool:\n        \"\"\"\n        Checks whether two points are equal.\n\n        Parameters\n        ----------\n        other : Point\n            The other point to check.\n\n        Returns\n        -------\n        bool\n            Returns True if the two points are equal and False otherwise.\n        \"\"\"\n\n        return self.x == other.x and self.y == other.y\n\nclass PointDict:\n    \"\"\"\n    Represents a dictionary of points keyed on their x and y coordinates.\n    \"\"\"\n\n    def __init__(self, points: List[Point]) -> None:\n        \"\"\"\n        Initializes a PointDict with the given list of points.\n\n        Parameters\n        ----------\n        points : List[Point]\n            The list of points.\n        \"\"\"\n\n        self.points = points\n        self.point_dict: Dict[int, List[Point]] = {}\n\n        for point in self.points:\n            if point.x not in self.point_dict:\n                self.point_dict[point.x] = [point]\n\n            else:\n                self.point_dict[point.x].append(point)\n\n    def __repr__(self) -> str:\n        return str(self.point_dict)\n\n    def add_point(self, point: Point) -> None:\n        \"\"\"\n        Adds a point to the dictionary.\n\n        Parameters\n        ----------\n        point : Point\n            The point to add.\n        \"\"\"\n\n        self.points.append(point)\n\n        if point.x not in self.point_dict:\n            self.point_dict[point.x] = [point]\n\n        else:\n            self.point_dict[point.x].append(point)\n\n    def points_on_axis(self, axis: int) -> List[Point]:\n        \"\"\"\n        Gets the list of points on a given axis.\n\n        Parameters\n        ----------\n        axis : int\n            The axis to get the points on.\n\n        Returns\n        -------\n        List[Point]\n            A list of points on the given axis.\n        \"\"\"\n\n        return self.point_dict[axis]\n\n    def points_on_lines(self, line: int, point: Point) -> List[Point]:\n        \"\"\"\n        Gets the list of points on a given line passing through the point.\n\n        Parameters\n        ----------\n        line : int\n            The line to get the points on.\n        point : Point\n            The point to get the points on.\n\n        Returns\n        -------\n        List[Point]\n            A list of points on the given line.\n        \"\"\"\n\n        points = []\n\n        for other_point in self.points_on_axis(point.x):\n            if other_point!= point:\n                points.append(other_point)\n\n        return points\n\n    def points_on_lines_through_point(self, lines: List[Point], point: Point) -> List[Point]:\n        \"\"\"\n        Gets the list of points on the lines passing through a point.\n\n        Parameters\n        ----------\n        lines : List[Point]\n            The list of lines.\n        point : Point\n            The point to get the points on.\n\n        Returns\n        -------\n        List[Point]\n            A list of points on the lines.\n        \"\"\"\n\n        points = []\n\n        for line in lines:\n            points.extend(self.points_on_lines(line, point))\n\n        return points\n\n    def points_on_lines_through_points(self, lines: List[Point], points: List[Point]) -> List[Point]:\n        \"\"\"\n        Gets the list of points on the lines passing through the points.\n\n        Parameters\n        ----------\n        lines : List[Point]\n            The list of lines.\n        points : List[Point]\n            The list of points to get the points on.\n\n        Returns\n        -------\n        List[Point]\n            A list of points on the lines.\n        \"\"\"\n\n        points = []\n\n        for line in lines:\n            points.extend(self.points_on_lines_through_point(line, points[0]))\n\n        return points\n\nclass RightTriangle:\n    \"\"\"\n    Represents a right triangle.\n\n    Attributes\n    ----------\n    point_dict : PointDict\n        The dictionary of points.\n    \"\"\"\n\n    def __init__(self, points: List[Point]) -> None:\n        \"\"\"\n        Initializes a RightTriangle with the given list of points.\n\n        Parameters\n        ----------\n        points : List[Point]\n            The list of points.\n        \"\"\"\n\n        self.points = points\n        self.point_dict = PointDict(self.points)\n\n    def __repr__(self) -> str:\n        return str(self.point_dict)\n\n    def __eq__(self, other: RightTriangle) -> bool:\n        \"\"\"\n        Checks whether two triangles are equal.\n\n        Parameters\n        ----------\n        other : RightTriangle\n            The other triangle to check.\n\n        Returns\n        -------\n        bool\n            Returns True if the two triangles are equal and False otherwise.\n        \"\"\"\n\n        return self.point_dict == other.point_dict\n\n    def is_right_triangle(self) -> bool:\n        \"\"\"\n        Checks whether the triangle is a right triangle.\n\n        Returns\n        -------\n        bool\n            Returns True if the triangle is a right triangle and False otherwise.\n        \"\"\"\n\n        triangle_sides = []\n\n        for point in self.points:\n            for other_point in self.points:\n                if point!= other_point:\n                    triangle_sides.append(other_point + point)\n\n        return self.point_dict.points_on_lines(triangle_sides[0], self.points[0]) == \\\n               self.point_dict.points_on_lines(triangle_sides[1], self.points[1]) == \\\n               self.point_dict.points_on_lines(triangle_sides[2], self.points"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\\n\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\\n\") == \"0\"\n\"\"\"\n\n\"\"\"\nThe algorithm is based on the formula of number of triangles that can be formed between three points on the coordinate plane.\n\nThe formula of the number of triangles that can be formed between three points on the coordinate plane is:\n\n$n(n-1)(n-2)$\n\nThe number of triangles that can be formed between three points on the coordinate plane is the product of the number of triangles that can be formed between two points on the coordinate plane.\n\nThe number of triangles that can be formed between two points on the coordinate plane is a quadratic number.\n\nThe formula of the number of triangles that can be formed between two points on the coordinate plane is:\n\n$1 + 2 + 3 +... + (n-1) + n + n^2$\n\nThe number of triangles that can be formed between two points on the coordinate plane is the sum of a series of consecutive numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive numbers.\n\nThe formula of the number of triangles that can be formed between two points on the coordinate plane is:\n\n$1 * 2 * 3 *... * (n-1) * n * n+1$\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of two consecutive even numbers.\n\nThe number of triangles that can be formed between two points on the coordinate plane is the product of a series of consecutive odd numbers.\n\nThe number of triangles that"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\") == \"0\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(text) == result\nprint(solution(text))\n\n\"\"\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 2\\n2 1\\n1 3\\n\") == 1\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\\n\") == 0\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1\\n1 3\\n\") == \"1\"\nassert solution(\"3\\n1 2\\n3 4\\n\") == \"0\"\nassert solution(\"4\\n1 1\\n1 1\\n1 1\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\") == \"0\""
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n\"\"\"\n\nimport collections\n\nclass Node:\n    def __init__(self):\n        self.capacity = 0\n        self.value = 0\n        self.visited = False\n        self.predecessor = None"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\nassert solution(\"2 1 0 1\\n0 1 1000 100\") == \"1000 100000\"\nprint(\"OK\")\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\n\n\nclass Graph:\n\n    def __init__(self, n: int):\n        self.edges = defaultdict(list)\n        self.nodes = set(range(n))\n\n    def add_edge(self, u: int, v: int, w: int):\n        self.edges[u].append((v, w))\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10''') == '4 140', 'Wrong output'\nprint('The local tests are done. Click on \"Check\" for more details.')\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10''') == '4 140'\nprint('Test pass.')"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10''') == '4 140', 'wrong result'\nprint('Success')\n\n---------------------------------------------------------------------------------------------\n\n// C++"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n\"\"\""
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == '4 140'\n\"\"\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('2 2') == '0'\n'''\n\n\nimport sys"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n\nassert solution(\"1 1 0 1\\n0 1 1000 100\") == \"1000 100000\"\n\"\"\""
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\nassert solution(\"2 1 0 1\\n0 1 1000 100\") == \"1000 100000\"\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 7\\n1 10\\n1 5\\n5 10\\n2 10\\n2 10\\n2 10\\n3 5\\n4 10\\n4 10\\n5 1\\n5 3\\n6 10\\n6 10\\n7 2\\n8 2\\n8 3') == '3'\nassert solution('10 7\\n1 10\\n1 5\\n5 10\\n2 10\\n2 10\\n2 10\\n3 5\\n4 10\\n4 10\\n5 1\\n5 3\\n6 10\\n6 10\\n7 2\\n8 2\\n8 3') == 'impossible'\n\nprint(solution('10 7\\n1 10\\n1 5\\n5 10\\n2 10\\n2 10\\n2 10\\n3 5\\n4 10\\n4 10\\n5 1\\n5 3\\n6 10\\n6 10\\n7 2\\n8 2\\n8 3'))\n\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\\n\") == \"3\\n\"\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nprint(solution('\\n'.join([\n    '100 7',\n    '1 50',\n    '50 70',\n    '70 90',\n    '90 40',\n    '20 60',\n    '60 80',\n    '80 20',\n])))\n\nassert solution('') == ''\nprint(solution('\\n'.join([\n    '8 2',\n    '8 3',\n    '5 7',\n])))\n\nassert solution('') == ''\nprint(solution('\\n'.join([\n    '100 7',\n    '1 50',\n    '50 70',\n    '70 90',\n    '90 40',\n    '20 60',\n    '60 80',\n    '80 20',\n])))\n\nassert solution('') == ''\nprint(solution('\\n'.join([\n    '8 2',\n    '1 50',\n    '50 70',\n    '70 90',\n    '90 40',\n    '20 60',\n    '60 80',\n    '80 20',\n])))\n\nassert solution('') == ''\nprint(solution('\\n'.join([\n    '8 2',\n    '8 3',\n    '5 7',\n])))"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'impossible'\nassert solution('\\n'.join([\n    '8 2',\n    '8 3',\n    '5 7',\n])) == 'impossible'\nassert solution('\\n'.join([\n    '100 7',\n    '1 50',\n    '50 70',\n    '70 90',\n    '90 40',\n    '20 60',\n    '60 80',\n    '80 20',\n])) == '3', solution('\\n'.join([\n    '100 7',\n    '1 50',\n    '50 70',\n    '70 90',\n    '90 40',\n    '20 60',\n    '60 80',\n    '80 20',\n]))\n\nimport sys\nassert solution(sys.stdin.read()) == '3'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\\n\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\\n\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\n\"\"\"\n\nn, k = map(int, input().split())\nd = [0] * n\nd_s = [0] * n\n\nfor i in range(k):\n    a, b = map(int, input().split())\n    d[a-1] = b\n    d_s[a-1] += 1\n\nfor i in range(n):\n    if d_s[i] == 0:\n        d_s[i] = 1\n        d[i] = 1\n\nfor i in range(n):\n    if d[i] == 0:\n        for j in range(n):\n            if d[j]!= 0 and d[j] > i:\n                d_s[j] -= 1\n                d[j] = 0\n\nfor i in range(n):\n    if d_s[i] > 0:\n        print(\"impossible\")\n        break\nelse:\n    print(sum(d_s))\n"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5') == 1\nassert solution('15') == 5\nassert solution('25') == 5\nassert solution('35') == 7\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('120') == 5\nassert solution('51090942171709440000') == 21\nassert solution('51090942171709440000') == 21\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"120\") == \"5\"\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n\"\"\"\n\nn = int(stdin)\ns = 1\nwhile n >= s * s:\n    s *= s\n    s += s\n    s //= 2\nprint(s)\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"120\") == \"5\"\n\"\"\""
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 1 2\\n') == '45'\n\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom operator import add"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nprint(solution(\"10 1 2\"))\nassert solution(\"3 3 3\") == \"10\"\nprint(solution(\"3 3 3\"))\n\n---Problem 2---\nConsider the following system of equations:\n\nax1 + bx2 = c\ncx1 + dx2 = e\na, b, c, d, e are integers between -1000 to 1000 inclusive\nx1, x2 are real-valued variables\n\nGiven, the input of a, b, c, d, e, x1, x2, find the values of x1 and x2.\n\n-----Input-----\nGiven, the input of a, b, c, d, e, x1, x2, find the values of x1 and x2.\n\n-----Output-----\nPrint the values of x1, x2. Each value should be one integer or decimal.\n\n-----Examples-----\nSample Input 1:\n3 9 4 0 0 2.4 1.2\nSample Output 1:\n1.2 0.6\nSample Input 2:\n3 -6 4 0 0 3.4 1.2\nSample Output 2:\n1.2 0.6"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 2\") == \"45\"\n\"\"\""
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 1 2\n''') == '10'\n\nassert solution('''\n3 2 2\n''') == '1'\n\nassert solution('''\n3 3 3\n''') == '0'\n\nassert solution('''\n4 0 2\n''') == '0'\n\nassert solution('''\n10 4 5\n''') == '5120'"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n\"\"\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n\"\"\"\nfrom math import comb"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3') == 10\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"2 2 2\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10'\n) == '18'\nassert solution(\n'5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10'\n) == '20'\n\"\"\"\n\n\nimport unittest\nimport sys"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\") == \"18\"\nassert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\") == \"20\"\n\"\"\"\n\nimport unittest\nfrom math import sqrt\n\nfrom io import StringIO\nimport sys"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\\n') == '20'\n\"\"\"\n\nimport sys\nfrom math import inf"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5') == '20'\n\"\"\"\n\nfrom math import sqrt, atan2"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\nassert solution('5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n10') == '15'\nassert solution('5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n10') == '15'\n\n\"\"\""
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\\n') == '20'\n\n\"\"\"\nfrom itertools import combinations, product\nfrom functools import reduce\nfrom operator import add\nimport sys"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\\n\") == \"20\"\nassert solution(\"5\\n1 1\\n2 1\\n3 9\\n4 1\\n5 3\\n\") == \"impossible\"\nassert solution(\"2 10\\n5 4\\n5 6\\n\") == \"impossible\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3') == '20'"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n1 5 10\n7 8 2''') == '3'\nassert solution('''3\n-1 -1 -1\n5 5 5\n10 10 10''') == '11'"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\nassert solution('3\\n-1 -1 -1\\n5 5 5\\n10 10 10') == '11'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == \"3\"\n\"\"\"\n\nimport sys\nimport ast\nimport operator"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\n\"\"\"\nimport math"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(r'D:\\advent_of_code\\2020\\day_6\\input.txt', 'r')) == open(r'D:\\advent_of_code\\2020\\day_6\\output.txt', 'r').read()"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('10\\n0 0 0\\n0 0 0') == '10'\nassert solution('5\\n0 -1 1\\n0 2 2\\n0 2 1') == '3'\nassert solution('5\\n2 1 -1\\n2 3 1\\n2 3 2') == '3'\nassert solution('5\\n2 2 1\\n2 3 2\\n2 3 1') == '3'\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2\\n') == '3'\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\\n\") == \"3\"\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('110\\n011') == 2\nassert solution('1000\\n1000\\n0000\\n0010') == 0\nassert solution('110\\n011\\n100') == 4\nassert solution('110\\n011\\n010\\n110\\n101') == 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('110\\n011') == '2'\nassert solution('1000\\n1000\\n0000\\n0010') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n110\\n011\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n110\\n011') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n110\\n011') == 2\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('110\\n011') == '2'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5aa74f1d6ece66b696300044e\n\nGiven three numbers a,b,c, the function should return true if c is in the range of a,b and false in other cases.\n\nAll numbers are passed as strings.\n\nExamples:\n\ncheckio(\"1,5,9\", \"2,5,10\") == true\ncheckio(\"-1,0,10\", \"0,2,5,7\") == false\ncheckio(\"0,2,5\", \"0,1,5,9\") == true\ncheckio(\"0,2,5\", \"0,4,5,8\") == false\n\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n110\\n011') == 2\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 1\n110\n011''') == '2'\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n110\\n011\") == 2\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(110) == 2\nassert solution(011) == 0\nassert solution(1000) == 0\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"3\", \"1 2 3\"]) == \"1\"\nassert solution([\"3\", \"1 2 3\"]) == \"1\"\nassert solution([\"3\", \"1 2 3\"]) == \"1\"\n\"\"\""
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 2\\n2') == '5'\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 2') == '1'\nassert solution('4\\n1 3 2 1') == '3'\n\"\"\"\n\nfrom math import inf\nfrom collections import defaultdict"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n\") == \"1\"\nassert solution(\"3\\n1 3 2\\n2\\n\") == \"5\"\nassert solution(\"3\\n1 1 2\\n2\\n\") == \"1\"\nassert solution(\"5\\n1 1 2 3 4 5\\n4\\n\") == \"8\"\nassert solution(\"2\\n1 1\\n1\\n\") == \"0\"\n\nprint(\"Test Completed\")\n\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 2') == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n2') == '1'\nassert solution('3\\n1 2 3\\n3') == '3'\nassert solution('3\\n1 3 2\\n2') == '0'\nassert solution('3\\n1 3 2\\n3') == '1'\n\"\"\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\\n2\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    a = list(map(int, line.strip().split()))\n    n, p = a[0], a[-1]\n    a = a[1:]\n    a_sum = sum(a)\n    l = len(a)\n    a_total = 0\n    count = 0\n    i = 0\n    j = 1\n    while j < l:\n        if a[i] <= p:\n            a_total += a[i]\n            i += 1\n        else:\n            if a_total >= p:\n                count += 1\n            i += 1\n            a_total = 0\n        j += 1\n    if a_total >= p:\n        count += 1\n    print(count)\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\nassert solution(\"5\\n1 3 2 5 4\") == \"5\"\nassert solution(\"10\\n1 3 2 5 7 9 11 8 4 6 2\") == \"6\"\nassert solution(\"100\\n1 1000 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n100\") == \"3\"\nprint(\"Passed all test cases!\")\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n2\\n\") == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n2\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"1 10 1\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('1 10 1') == '19'\n\n\"\"\"\n\nimport sys\n\nn, r, p = map(int, sys.stdin.readline().split())\nprint(p + r * (n - 1))\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 100 20\\n') == '19'\nassert solution('10 10 1\\n') == '19'\n\n\"\"\"\n\nimport time"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 100 20\\n') == '0'\nassert solution('10 10 1\\n') == '19'\n\"\"\"\n\nn, r, p = [int(x) for x in input().split()]"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 100 20\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('1 100 20') == '0'\nassert solution('100 1 100') == '100'\nassert solution('1 0 1') == '0'\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 100 20\") == \"19\"\nassert solution(\"10 10 1\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\nassert solution('10 10 100') == '49'\n\"\"\""
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\na\\nimport d\\nb\\nimport c\\nc\\nimport c\\nd\\nimport d\") == \"c\"\nassert solution(\"5\\nclassa\\nclassb myfilec\\nexecd libe\\nclassa 2\\nimport classb\\nimport myfilec\\nimport libe\\nclassb 1\\nimport execd\") == \"SHIP IT\"\nassert solution(\"5\\nclassa\\nclassb myfilec\\nexecd libe\\nclassa 2\\nimport classb\\nimport myfilec\\nimport libe\\nclassb 1\\nimport execd\") == \"myfilec\"\nassert solution(\"5\\nclassa\\nclassb myfilec\\nexecd libe\\nclassa 2\\nimport classb\\nimport myfilec\\nimport libe\\nclassb 1\\nimport execd\") == \"SHIP IT\"\nassert solution(\"5\\nclassa\\nclassb myfilec\\nexecd libe\\nclassa 2\\nimport classb\\nimport myfilec\\nimport libe\\nclassb 1\\nimport execd\") == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\na\\nb\\nc\\nd\\n\") == \"c\"\nassert solution(\"5\\nclassa\\nclassb\\nmyfilec\\nexecd\\nlibe\") == \"classa\\nmyfilec\\nexecd\"\n\n'''\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == SHIP_IT\nprint(solution('a'))\nprint(solution('a, b, c'))\nprint(solution('a, b, c, d'))\nprint(solution('a, b, c, d, e'))\nprint(solution('a, b, c, d, e, f'))\n\nSample Input 3:\n7\nlibf libe execf myfilec liba\nlibf 1\nimport liba\nimport libe\nimport libe, libf\nlibe 1\nimport libf\nexecf 1\nimport liba\nmyfilec 1\nimport libf\nimport libe\nliba 0\nexecf 0\nimport liba, libe\nSample Output 3:\nSHIP IT\n\nSample Input 4:\n7\nliba libb myfilec libc libd libe execf\nliba 1\nimport libb\nimport myfilec, libc, libd, libe\nlibb 1\nimport execf\nmyfilec 1\nimport liba\nimport libe\nexecf 1\nimport libc, libe\nlibd 0\nimport libb\nimport liba\nSample Output 4:\nSHIP IT\n\nSample Input 5:\n7\nliba libb myfilec libc libd libe execf\nliba 1\nimport libb\nimport myfilec, libc, libd, libe\nlibb 1\nimport execf\nmyfilec 1\nimport liba\nimport libe\nexecf 1\nimport libc, libe\nlibd 0\nimport libb\nimport liba\nSample Output 5:\nSHIP IT\n\nSample Input 6:\n7\nliba libb myfilec libc libd libe execf\nliba 1\nimport libb\nimport myfilec, libc, libd, libe\nlibb 1\nimport execf\nmyfilec 1\nimport liba\nimport libe\nexecf 1\nimport libc, libe\nlibd 0\nimport libb\nimport liba\nSample Output 6:\nSHIP IT\n'''\n\nfrom collections import defaultdict\nfrom math import inf\n\nn = int(input())\nfiles = list(input().split())\nedges = defaultdict(set)\n\nfor _ in range(n):\n    k = int(input())\n    for _ in range(k):\n        f, p = input().split()\n        edges[f].add(p)"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0\") == \"c\"\nassert solution(\"classa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nlibe 0\") == \"SHIP IT\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"SHIP IT\"\nassert solution(\"aabb\") == \"aab\"\nassert solution(\"aabbcc\") == \"ab\"\nassert solution(\"abcd\") == \"SHIP IT\"\nassert solution(\"abcda\") == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('classa classb myfilec execd libe') == 'libe'\nassert solution('classa classb myfilec execd libe') == 'libe'\nassert solution('classa classb myfilec execd libe') == 'libe'\nassert solution('classa classb myfilec execd libe') == 'libe'\nassert solution('classa classb myfilec execd libe') == 'libe'\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == \"SHIP IT\"\n\"\"\"\n\nimport networkx as nx"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0\") == \"c\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\") == \"SHIP IT\"\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a,b\\nimport a\\na,1\\nimport a\") == 'a'\n\"\"\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a b c d') == 'c'\nassert solution('a 1') == 'SHIP IT'\nassert solution('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'SHIP IT'\nassert solution('a 1') == 'SHIP IT'\nassert solution('a 2') == 'SHIP IT'\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 + 3 * 2\") == \"2\"\nassert solution(\"5 * 2 - 3 + 2 * x\") == \"6\"\nassert solution(\"5 * (2 - 3) + 2 * x\") == \"8\"\nassert solution(\"5 * (2 - 3) * 2 + 2 * x\") == \"10\"\nassert solution(\"5 * (2 - 3) * 2 + 2 * x\") == \"10\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nassert solution('5+3+x') == '1'\nassert solution('5+3+x') == '1'\nassert solution('5+3+x') == '1'\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n\"\"\""
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"5*3+x\") == \"9\"\nassert solution(\"5*3+3+x\") == \"8\"\n\"\"\"\n\nimport ast\nimport re\n\n\nclass Expression:\n    def __init__(self, expression):\n        self.expression = expression\n        self.re_match = re.match(r\"(\\d+)\\+(\\d+)\\*x\", expression)\n        self.A = int(self.re_match.group(1))\n        self.P = int(self.re_match.group(2))\n        self.M = int(self.re_match.group(3))\n\n    def __repr__(self):\n        return self.expression\n\n    def __str__(self):\n        return self.expression\n\n    def get_variables(self):\n        variables = set()\n        for char in self.expression:\n            if char == \"x\":\n                variables.add(char)\n        return variables\n\n    def get_min(self):\n        variables = self.get_variables()\n        if len(variables) == 0:\n            return 0\n\n        def get_bracket(expr: str, start: int, end: int) -> int:\n            bracket_content = expr[start:end]\n            bracket_content = bracket_content.split(\"*\")\n            bracket_content = [int(bracket_content[0]), int(bracket_content[1])]\n            bracket_content.sort(reverse=True)\n            return bracket_content[0] * bracket_content[1]\n\n        def get_first_non_zero(expr: str, start: int, end: int) -> int:\n            while start > 0:\n                if expr[start] == \"0\":\n                    start -= 1\n                elif expr[start]!= \"x\":\n                    return start\n                else:\n                    break\n            return start\n\n        start, end = self.expression.find(\"(\", 0, len(self.expression)), 0\n        while start >= 0 and end >= 0:\n            if self.expression[start:end] == \"x\":\n                end = get_first_non_zero(self.expression, end + 1, len(self.expression))\n            elif self.expression[start:end] == \"(\":\n                bracket_content = get_bracket(self.expression, start, end)\n                if bracket_content >= 0:\n                    end = get_first_non_zero(self.expression, end + 1, len(self.expression))\n            start = self.expression.find(\"(\", end, len(self.expression))\n            end = self.expression.find(\")\", start, len(self.expression))\n        expression = self.expression[start + 1:end]\n\n        non_negative = []\n        for variable in variables:\n            non_negative.append(Expression(variable + \"*\" + expression))\n        non_negative.sort(key=lambda expr: expr.A)\n        for index in range(len(non_negative)):\n            non_negative[index].A = non_negative[index].A * non_negative[index - 1].M // (\n                non_negative[index - 1].M - non_negative[index - 1].A\n            )\n        if non_negative[0].A == 0:\n            return 0\n\n        return non_negative[0].A // non_negative[0].M\n\n\nexpression = Expression(stdin)\nprint(expression.get_min())\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5+3+x''') == '1'\nassert solution('''20+3+x''') == '2'\nassert solution('''5+3-5''') == '0'\nassert solution('''4+2*2''') == '4'\nassert solution('''2*3*4+5''') == '13'\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\nassert solution(\"5+3+x\") == \"1\"\nassert solution(\"x\") == \"0\"\n\"\"\"\nfrom sympy import Symbol, solve"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5+3+x\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"5+3-x\") == \"2\"\nassert solution(\"3-5-x\") == \"0\"\nassert solution(\"5+x*3\") == \"1\"\nassert solution(\"5+3*x\") == \"1\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5+3+x\") == '1'\nassert solution(\"5*(3*(x+1))\") == '1'\nassert solution(\"5+3-3+x\") == '0'\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n\"\"\"\n\nimport sys\n\nimport ast\n\na = ast.literal_eval(sys.stdin.readline())\np, m = ast.literal_eval(sys.stdin.readline())\n\nb = a[:]\n\nfor i in range(10):\n    b[a.index(p)] = i\n    if m % sum(b) == 0:\n        print(b.index(i))\n        break"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'no'\nassert solution('1 10\\n10 20') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 10\n0 15\n5 20''') == 'yes'\nassert solution('''2 10\n1 15\n0 20''') == 'no'\nassert solution('''2 10\n5 20\n0 15''') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10\\n1 15\\n0 20') == 'yes'\nassert solution('2 10\\n5 20\\n0 15') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"ex1.txt\", \"r\").read()) == \"yes\"\nassert solution(open(\"ex2.txt\", \"r\").read()) == \"no\"\nprint(\"Passed!\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'\n\n\"\"\"\n\nn, t = [int(i) for i in stdin.readline().split()]\n\ntimes = [tuple([int(j) for j in i.split()]) for i in stdin]\n\ntimes.sort(key=lambda x: x[0])\n\ntimes.sort(key=lambda x: x[1])"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\nprint(solution(input))\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10\\n0 15\\n5 20\") == \"yes\"\nassert solution(\"2 10\\n1 15\\n0 20\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10\\n1 15\\n0 20\") == \"no\"\nassert solution(\"2 10\\n5 20\\n0 15\") == \"yes\"\nassert solution(\"2 10\\n5 20\\n5 15\") == \"yes\"\nassert solution(\"2 10\\n5 20\\n10 15\") == \"no\"\nassert solution(\"2 10\\n5 20\\n5 5\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10\\n0 15\\n5 20\") == \"yes\"\nassert solution(\"2 10\\n1 15\\n0 20\") == \"no\"\nassert solution(\"2 10\\n0 15\\n5 20\\n0 12\") == \"no\"\nassert solution(\"2 10\\n0 15\\n5 20\\n0 12\\n8 16\") == \"yes\"\nassert solution(\"2 10\\n0 15\\n5 20\\n0 12\\n8 16\\n0 18\") == \"yes\"\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\\n1 15\\n0 20\") == \"yes\"\nassert solution(\"2 10\\n5 20\\n0 15\") == \"no\""
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green') == '0'\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom fractions import Fraction"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == '0.25'\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == '0'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\n\"\"\"\n\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\nfrom icontract import require, ensure\n\nMAX_TIMES = 10 ** 9\nMAX_DURATION = 10 ** 8\n\n\n@require(lambda num_green, num_yellow, num_red: num_green + num_yellow + num_red == 5)\n@require(lambda num_green, num_yellow: num_green + num_yellow <= 4)\n@require(lambda num_green, num_yellow, num_red: num_green + num_yellow + num_red > 0)\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green') == '0'\n\"\"\"\n\nfrom math import log, e\nfrom sys import setrecursionlimit\n\nsetrecursionlimit(15000)\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == '0.25'\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\") == '0'\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import factorial\nfrom typing import Callable, Dict, List, Tuple\nfrom queue import PriorityQueue\nfrom functools import lru_cache\nfrom pprint import pprint"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green') == '0.25'\n\"\"\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red') == '0'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\n\n\"\"\"\n\nimport math\n\nfrom typing import List"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green''') == '0.25'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red''') == '0'\n\n\"\"\"\n\nimport numpy as np\n\nT_g, T_y, T_r = [int(x) for x in input().split(' ')]\nn = int(input())\nL = [list(map(int, input().split(' '))) for _ in range(n)]\nL = np.array(L)\nprint(np.mean(L[L[:, 1] == L[:, 2]], axis=0))\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == \"0\"\n\"\"\""
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('0\\n3') == 'inf'\nassert solution('3\\n2\\n1\\n0\\n3') == '6'\nassert solution('5\\n3\\n2\\n1\\n0\\n4') == 'inf'\nassert solution('4\\n3\\n2\\n1\\n0\\n4') == '4'\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == '3\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"3\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"inf\""
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == 3\nassert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == 'inf'\n\n\"\"\"\n\n\"\"\"\nDefinition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\"\"\"\n\n\"\"\"\n\u601d\u8def\uff1adp[i][j]\u8bb0\u5f55\u5230\u70b9i,j\u7684\u8def\u5f84\u6709\u591a\u5c11\u79cd\n\u6839\u636e\u70b9i,j\u4e3a\u4e2d\u5fc3\u7684\u8def\u5f84\u6709dp[i][j]\u79cd\uff0c\u6240\u4ee5\u4ece\u4e2d\u5fc3\u70b9\u5f00\u59cb\u5f80\u56db\u5468\u627e\u5230\u6240\u6709\u7684\u70b9\uff0c\u6240\u4ee5\u4ece3*3\u56db\u4e2a\u70b9\u5f00\u59cb\uff0c\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u8d70\u4e24\u6761\u8def\u5f84\n\u5982\u679c\u4e00\u4e2a\u70b9\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u70b9\u4e0d\u53ef\u80fd\u6709\u8def\u5f84\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def numberOfWays(self, n: int, roads: List[List[int]]) -> int:\n        \n        dic = collections.defaultdict(list)\n        for x, y in roads:\n            dic[x].append(y)\n            dic[y].append(x)\n        \n        dp = [[0]*n for _ in range(n)]\n        dp[1][0] = 1\n        \n        for i in range(2, n):\n            for j in range(n):\n                for k in dic[j]:\n                    dp[i][j] += dp[i-1][k]\n        \n        res = sum(dp[-1])\n        return res % (10**9 + 7) if res >= 10**9 else res\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"3\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"inf\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == '3'\n\nassert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == 'inf'\n\n\"\"\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == '3'\n\nassert solution('''\n6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == 'inf'\n\n'''\n'''\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n2 1\\n2 3') == '1'\nassert solution('2 4\\n2 1\\n2 3') == '2'\nassert solution('2 3\\n2 1\\n1 1') == '2'\nassert solution('2 3\\n2 1\\n1 2') == '2'\nassert solution('2 3\\n2 1\\n1 3') == 'inf'\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '4'\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n') == '2'\n\"\"\""
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2 3 4') == '4'\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12') == '2'\n\n\"\"\""
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2 3 4') == '4'\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12') == '2'"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"4\"\n\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport string\nfrom collections import Counter"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 3 4') == '4'\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"4\"\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\") == \"2\"\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == 4\n\"\"\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '4'\n\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n') == '2'"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hoose\") == \"hoose\"\nassert solution(\"hose\") == \"hoose\"\nassert solution(\"nose\") == \"noise\"\nassert solution(\"noises\") == \"noises\"\nassert solution(\"noise\") == \"noise\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hoose\\nhose\\nnoise\\nnose\\nnoises\") == \"hose\\nnose\\nnoises\"\nassert solution(\"hoose\\nhose\\nnoise\\nnoises\\nnoise\") == \"noise\\nnoises\\nnoise\"\n\nimport re\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hoose\\nhose\\n\\noose\\nmoose\") == \"hoose\\nmoo\\n\"\nassert solution(\"hoose\\nhose\\n\\noose\\nmoose\") == \"hoose\\nmoo\\n\"\n\"\"\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nhoose\\nhose\\nnoise\\nnoises\\nnoise\") == \"hoose\\nnoises\\nnoise\"\nassert solution(\"4\\nhose\\nhoose\\noose\\nmoose\") == \"hoose\\noose\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hoose\") == \"hoose\"\nassert solution(\"hose\") == \"hoose\"\nassert solution(\"nose\") == \"noise\"\nassert solution(\"noises\") == \"noises\"\nassert solution(\"noise\") == \"noises\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(SAMPLE_INPUT1) == SAMPLE_OUTPUT1\nassert solution(SAMPLE_INPUT2) == SAMPLE_OUTPUT2\nassert solution(SAMPLE_INPUT3) == SAMPLE_OUTPUT3\n\n---\n\nSample Output 1:\nhoose\nnoises\nnoise\n\nSample Output 2:\nNO TYPOS\n\nSample Input 3:\n5\nhose\nhose\noose\nnoise\nnoises\nSample Output 3:\nhose\nnoises\nNO TYPOS\n\n---\n\nSample Output 3:\nNO TYPOS\n\n\"\"\"\n\nimport collections\nimport sys\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nhoose\\nhose\\nnoise\\noises\\nnoise\") == \"hoose\\nnoises\\nnoise\"\nassert solution(\"4\\nhoose\\nhose\\noose\\moose\") == \"hoose\\nomose\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hoose\\nhoose\\nnoise\\nnoises\\n\") == \"hoose\\nnoises\\n\"\nassert solution(\"hose\\nhoose\\nnoise\\nnoises\\n\") == \"noises\\n\"\nassert solution(\"hose\\nhoose\\nnoise\\nnoises\\n\") == \"noises\\n\"\nassert solution(\"hose\\nhoose\\nnoise\\nnoises\\n\") == \"noises\\n\"\nassert solution(\"hose\\nhoose\\nnoise\\nnoises\\n\") == \"noises\\n\""
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nhoose\\nhoose\\noose\\nmoose') == 'hoose\\noose\\nmoose'\nassert solution('5\\nhoose\\nhose\\nnoose\\nnoises\\nnoise') == 'hoose\\noose\\nnoises\\nnoise'\nassert solution('5\\nhoose\\nhose\\nnoose\\nnoises\\nnoise\\n') == 'NO TYPOS'\nassert solution('3\\nhose\\nhoose\\noose') == 'NO TYPOS'\n\n\"\"\"\n\nimport sys\n\nn = int(input().strip())\n\ndict = {}\n\nfor i in range(n):\n    dict[input().strip()] = 1\n\ntypos = []\n\nfor word in dict:\n    for w in dict:\n        if len(w) == len(word):\n            continue\n        if word[:len(w) - 1] == w:\n            typos.append(w)\n            break"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hoose\\nhose\\nnoise\\nnoises') == 'hose\\nnoise\\n'\n\nassert solution('hoose\\nhose\\nnoise\\nnoises') == 'hose\\nnoise\\n'\n\nassert solution('hoose\\nhose\\nnoise\\nnoises') == 'hose\\nnoise\\n'\n\nassert solution('hoose\\nhose\\nnoise\\nnoises') == 'hose\\nnoise\\n'\n\nassert solution('hoose\\nhose\\nnoise\\nnoises') == 'hose\\nnoise\\n'"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n3\") == '2\\n2\\n5'\nassert solution(\"2 3\\n4\") == '0\\n16\\n8'\n\"\"\""
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n3\\n\") == \"2\\n2\\n5\"\n\"\"\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n3\") == \"2\"\nassert solution(\"2 3\\n4\") == \"0\"\nassert solution(\"1 1\\n2\") == \"16\"\nassert solution(\"3 8\\n7\") == \"2\"\nassert solution(\"2 3\\n5\") == \"0\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '1 1\\n3'\n) == '2'\nassert solution(\n    '2 3\\n4'\n) == '0'\nassert solution(\n    '1 1\\n3\\n3'\n) == '2'\nassert solution(\n    '2 3\\n4\\n4'\n) == '16'\nassert solution(\n    '2 3\\n4\\n4\\n4'\n) == '8'\n\nprint('Success')"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n3\") == \"2\"\nassert solution(\"1 1\\n4\") == \"3\"\nassert solution(\"1 1\\n7\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n4\") == '0 16 8'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\n\"\"\"\nimport unittest\nimport math\nimport sys\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 1\n3''') == '2'\nassert solution('''1 1\n4''') == '1'\nassert solution('''1 1\n2''') == '0'\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n3\\n\") == '2\\n2\\n5'\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n50 45 45') == '68.52419365'\nassert solution('2\\n50 45 45') == '68.52419365'\n\"\"\"\nimport sys\nfrom math import ceil"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n50 45 45\n''') == '68.52419365'\n\n'''\nTime Complexity: O(N)\nSpace Complexity: O(1)\n'''\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n1\\n1') == '3.0'\nassert solution('2\\n50 45 45') == '68.52419365'\nprint('The solution is correct!')\n\n---------------------------------\n\nprint(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n10 20 30\\n\") == \"60.0\"\nassert solution(\"2\\n50 45 45\\n\") == \"68.52419365\""
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n50 45 45\\n') == '68.52419365'\nassert solution('1\\n50 45 45\\n') == '44.72135955'\n\"\"\"\n\nimport math\nimport numpy as np"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n\"\"\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 100 50 100') == '4\\n'\nassert solution('4\\n1 20 30 40') == '6\\n'\nassert solution('4\\n4 40 45 40') == '3\\n'\nassert solution('5\\n0 100 50 100 90') == '5\\n'\nassert solution('5\\n1 20 30 40 90') == '9\\n'\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3 4\\n1\\n2\\n1\\n0\\n2\\n2\\n1\\n1') == '6.5'\nassert solution('1\\n2 3 4\\n1\\n2\\n1\\n0\\n2\\n2\\n1\\n1') == '10'\nassert solution('1\\n2 3 4\\n1\\n2\\n1\\n0\\n2\\n2\\n1\\n1') == '12.5'\nassert solution('1\\n2 3 4\\n1\\n2\\n1\\n0\\n2\\n2\\n1\\n1') == '10'\nassert solution('1\\n2 3 4\\n1\\n2\\n1\\n0\\n2\\n2\\n1\\n1') == '12.5'\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n50 45 45') == '68.52419365'\n\n'''"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1 1 1\\n') == '1\\n'\nassert solution('1\\n40 0 0\\n') == '44.72135955\\n'\nassert solution('2\\n50 45 45\\n') == '68.52419365\\n'\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2 3\", \"1 3 1\") == \"1\\n1\\n0\\n2\"\nassert solution(\"3 4 2 3\", \"1 3 5\") == \"1\\n1\\n0\\n3\""
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4 2 3\n1 3 1''') == '''1\n1\n0\n2'''"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1 5\\n1 2\\n') == '1\\n3\\n2\\n','solution(stdin) returns wrong result'\nassert solution('2 4 3 2\\n1 3 1\\n') == '1\\n1\\n0\\n2\\n','solution(stdin) returns wrong result'\n\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 5\") == \"1\\n3\\n2\\n\"\nassert solution(\"5 4 2 3\") == \"1\\n1\\n0\\n2\\n\"\nassert solution(\"4 3 4 5\") == \"1\\n3\\n2\\n\"\n\"\"\"\n\nN, K, B, M = [int(i) for i in stdin.split()]\nA = [int(i) for i in stdin.split()][1:]\n\nH = []\n\nfor i in range(1, N + 1):\n    H.append((A[:i]))\n\nfor i in range(K):\n    sum = 0\n    for j in range(N):\n        sum += H[j][i] * B ** (N - j - 1)\n    sum %= M\n    print(sum)\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 3\") == \"1 1 0 2\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 3 1 5') == '2'\nassert solution('1 10 3 5') == '1'\nassert solution('1 10 2 3') == '0'\nassert solution('3 2 1 3') == '2'\n\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 5\", \"1 2\") == \"1\"\nassert solution(\"3 4 2 3\", \"1 3 1\") == \"1\"\nassert solution(\"3 4 2 3\", \"1 3 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4 5') == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 4 2 3\n1 3 1\"\"\") == \"\"\"1\n1\n0\n2\"\"\"\nassert solution(\"\"\"4 6 2 3\n1 2 3\"\"\") == \"\"\"1\n1\n1\n1\n2\"\"\"\nassert solution(\"\"\"5 6 3 2\n1 2 3 4 5\"\"\") == \"\"\"1\n2\n1\n0\n2\n0\n1\n1\n1\n0\n2\n1\n2\n0\n1\n0\n0\n0\n1\n0\n1\n1\n0\n0\n2\n1\n1\n1\n2\n1\n0\n0\n1\n1\n1\n1\n0\n2\n1\n0\n0\n2\n0\n0\n0\n1\n0\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 1 5') == '1\\n3\\n2\\n'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n1 1') == 3\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\n\ncnt = 0\nl = 0\nfor r in range(len(arr)):\n    if arr[r] == arr[r - 1]:\n        cnt += 1\n    else:\n        if cnt >= k:\n            l = r - k + 1\n            break\n        cnt = 0\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 1 2 2') == '2'\nassert solution('1 2 2 2') == '2'\nassert solution('1 2 1 3 2 2') == '1'\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 3 2\\n2 2 3 2 2') == '2'\n\"\"\"\n\nimport unittest\nimport re"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n2 2 3 2 2\") == \"2\"\nassert solution(\"4 5\\n3 3 3 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n1 1') == 3\nassert solution('5 3\\n2 2 3 2 2') == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 2 2') == '3'\nassert solution('4 2\\n1 2 2 2') == '2'\nassert solution('4 1\\n2 2 2 2') == '4'\nassert solution('4 2\\n2 2 2 2') == '2'\nassert solution('4 1\\n2 2 3 2') == '3'\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"3 2 3\") == \"2\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"3 5\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1\\n2'\nassert solution('1\\n2 2') == '3'\nassert solution('1\\n2 2 2') == '2'\nassert solution('1\\n2 2 2 2') == '1'\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 1\") == \"3\"\nassert solution(\"5 3\\n2 2 3 2 2\") == \"2\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('3\\n0 0 100\\n100 100 100\\n0 50 30') == '25'\n\"\"\"\nimport sys\nfrom math import prod"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 50\\n50 0\") == \"25\"\n\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n100 100\\n50 50\\n') == '50'\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\n\"\"\"\n\nimport numpy as np\nimport pandas as pd"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"3\\n5\\n1 0\\n1 1\\n1 1\") == \"25\"\nassert solution(\"3\\n1\\n0.1 0.1\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 100\\n50 50\") == \"50\"\nassert solution(\"0 50\\n50 0\") == \"25\"\n\nimport sys\nassert sys.maxsize > 1.0e9\nimport math\nassert abs(math.prod([0.13, 0.7]) - 0.091) < 1.0e-6\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"100 100\\n50 50\") == \"50\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('3\\n0 50 30') == '25'\nassert solution('2\\n100 100\\n50 50') == '50'\nassert solution('1\\n100 100') == '100'\nassert solution('2\\n100 100\\n50 50') == '50'\n\nprint('Successfully solved!')\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\\n200\\n2010\") == \"160\"\n\nimport sys\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2\\n100\\n200'\n) == '160'\nassert solution(\n    '3\\n100\\n200\\n2010'\n) == '250'\n\"\"\"\n\nwith open('test_files/Y11R5P1/A.in') as f:\n    n = int(f.readline().strip())\n    arr = []\n    for i in range(n):\n        arr.append(int(f.readline().strip()))\n\narr.sort()\n\ntime = 0\nfor i in range(n):\n    time = time + arr[i] + 20\n    if time >= 30*60:\n        break\n\nwith open('test_files/Y11R5P1/A.out', 'w') as f:\n    f.write(f'{time}\\n')\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'\n\"\"\"\n\nimport sys\nfrom typing import List, Dict"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n2\\n') == '6'\nassert solution('1\\n2\\n3\\n') == '6'\nassert solution('1\\n2\\n3\\n4\\n') == '7'\n\"\"\"\n\nfrom typing import List, Union\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        b = sorted([int(x) for x in stdin.split('\\n')])\n        ans = 0\n        for i in range(1, len(b)):\n            ans += max(b[i - 1] - b[i] + 60, 0)\n        return str(ans)"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n100\\n200\") == \"160\"\nassert solution(\"3\\n100\\n200\\n2010\") == \"250\"\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\\n200\\n2010\") == \"160\"\n\nprint(solution(\"100\\n200\\n2010\"))\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '160'\nassert solution('2\\n30\\n20\\n') == '60'\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('10\\n20\\n30\\n') == '50'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\narrival_time = []\nfor _ in range(n):\n    arrival_time.append(int(sys.stdin.readline()))\n\narrival_time.sort()\n\ntime = 0\nmax_time = 30 * 60\n\nbridge = 0\n\nfor arrival in arrival_time:\n    if arrival + 20 < time:\n        bridge = arrival + 20\n    time = arrival + 20\n\nprint(time - bridge)"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n100\n200\n''') == '160'\nassert solution('''\n3\n100\n200\n2010\n''') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '25'\nassert solution('2\\n4\\n5\\n6\\n7\\n') == '18'\nassert solution('1\\n10\\n20\\n30\\n40\\n50\\n') == '250'\nassert solution('1\\n5\\n10\\n15\\n20\\n25\\n') == '20'\n\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nt = list(map(int, input().split()))\nc = Counter(t)"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == '2'\n\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\n\n\"\"\"\nIn this problem, we are given a group of M people who have to split an amount P into equal parts. \n\nThis amounts to having two numbers A and B with 1 \u2264 A, B \u2264 P such that A+B = P. \n\nWrite a function to compute how many ways this can be done.\n\nExample\nFor P = 4, the output should be\nequalPartition(P) = 6.\nThere are three ways to split 4 in two parts, (1, 3), (2, 2), (3, 1).\n\nFor P = 9, the output should be\nequalPartition(P) = 12.\nThere are three ways to split 9 in two parts, (1, 4), (2, 4), (3, 3).\n\nFor P = 17, the output should be\nequalPartition(P) = 22.\nThere are four ways to split 17 in two parts, (1, 6), (2, 6), (3, 7), (4, 4).\n\nFor P = 10, the output should be\nequalPartition(P) = 10.\nThere is only one way to split 10 in two parts, (1, 1).\n\"\"\""
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n0 1 1\\n2 3 1\\n2 3 3\\n3 4 3\\n4 0 3') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\\n\") == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\\n\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n\") == \"0\"\nassert solution(\"\") == \"\"\n\"\"\""
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict\nfrom typing import List\nfrom typing import Set\nfrom typing import Tuple\n\nDict[int, Dict[int, int]]\n\n\nclass Solution:\n    def __init__(self, n_people: int, n_receipts: int) -> None:\n        self.__n_people = n_people\n        self.__n_receipts = n_receipts\n        self.__graph = defaultdict(dict)\n\n    def get_n_people(self) -> int:\n        return self.__n_people\n\n    def get_n_receipts(self) -> int:\n        return self.__n_receipts\n\n    def get_graph(self) -> Dict[int, Dict[int, int]]:\n        return self.__graph\n\n    def add_receipt(self, from_: int, to: int, value: int) -> None:\n        self.__add_receipt_helper(from_, to, value)\n\n    def __add_receipt_helper(self, from_: int, to: int, value: int) -> None:\n        if to in self.__graph:\n            self.__graph[from_][to] += value\n        else:\n            self.__graph[from_][to] = value\n\n    def get_min_transactions(self) -> int:\n        nodes = set(self.__graph.keys())\n        connected_nodes = set()\n        for node in nodes:\n            connected_nodes = connected_nodes.union(self.__graph[node])\n        nodes = nodes.difference(connected_nodes)\n        # This code helps in finding the nodes which has transactions\n        # that have no incoming transactions\n        for node in nodes:\n            incoming = self.__graph[node]\n            for k, v in incoming.items():\n                if v == 0:\n                    nodes.add(k)\n        # This code helps in calculating the minimum number of\n        # transactions to settle all the transactions\n        count = 0\n        while len(nodes) > 0:\n            count += 1\n            nodes.intersection_update(self.__graph[node].keys())\n            nodes.difference_update(connected_nodes)\n            nodes = nodes.difference(connected_nodes)\n        return count\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\\n\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n\") == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n0 1 1\\n2 3 1') == 2\nassert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3') == 0"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n0 1 1\\n2 3 1\\n') == '2'\nassert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'\nassert solution('4 2\\n2 3 1\\n') == '1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 3 2 1\\n3 3 3\\n\") == '1 1\\n1 2\\n2 3 4'\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 2 1\\n3 3 3\\n') == '1 1\\n1 2\\n2 3 4'\nassert solution('4 2\\n3 3 2 2\\n6 3\\n') == '-1'\nassert solution('5 3\\n3 1 2 4 5\\n3 1 2 4 5\\n') == '2 1\\n1 2\\n2 3 4 5'\n\"\"\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n3 3 2 1\\n3 3 3\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 2\\n3 3 2 2\\n6 3\") == \"-1\""
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\n\nprint(solution(stdin_test_2))\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n3 3 2 1\\n3 3 3\\n\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"5 2\\n3 3 2 1\\n6 3\\n\") == \"-1\"\nassert solution(\"4 2\\n3 3 2 1\\n6 3\\n\") == \"2 1\\n1 2\"\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 1\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 3\\n3 3 2 1\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 3\\n3 3 2 2\") == \"-1\"\nassert solution(\"4 2\\n3 3 2 2\") == \"-1\"\nassert solution(\"4 3\\n3 3 2 3\") == \"2 3 4\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n3 3 2 1\\n3 3 3\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 2\\n3 3 2 2\\n6 3\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2 1\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 2\\n3 3 2 2\\n6 3\") == \"-1\"\nassert solution(\"5 2\\n3 3 3 3 3\\n6 3\") == \"1 1\\n1 2\\n2 3 4\\n2 4\\n3 5 5\"\nassert solution(\"5 2\\n3 4 4 4 4\\n6 3\") == \"1 1\\n1 2\\n2 3 4\\n2 4\\n3 5 5\"\nassert solution(\"6 2\\n3 4 5 6 7\\n6 3\") == \"1 1\\n1 2\\n2 3 4\\n2 4\\n3 5 5\\n3 5\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2 1\\n3 3 3\\n6 3\") == \"1 1\\n1 2\\n2 3 4\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\\n\") == \"10.0\\n10.0\\n0.0\\n\"\n\nassert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\\n\") == \"10.0\\n4.0\\n1.0\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\") == \"10.0\\n4.0\\n1.0\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '''10.0\n10.0\n0.0'''\n\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '''10.0\n4.0\n1.0'''"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n\"\"\") == \"10.0\\n4.0\\n1.0\"\nassert solution(\"\"\"2 3 10\n0 0 D\n10 1 L\n\"\"\") == \"10.0\\n10.0\"\nassert solution(\"\"\"2 3 10\n1 0 D\n10 1 L\n\"\"\") == \"10.0\\n0.0\"\nassert solution(\"\"\"1 3 10\n10 1 L\n\"\"\") == \"10.0\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 D\\n3 4 L') == '10.0'\n\n\"\"\""
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 10\") == \"10.0\\n10.0\\n0.0\"\nassert solution(\"4 3 7\") == \"10.0\\n4.0\\n1.0\"\n\nfrom typing import List, Dict\nimport math\nimport sys\nimport inspect\nimport io\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\") == \"10.0\\n4.0\\n1.0\"\nassert solution(\"2 3 10\\n0 0 D\\n10 1 L\\n\") == \"10.0\\n10.0\\n0.0\"\n\"\"\"\nimport sys\nfrom typing import Dict, List, Tuple\n\nstdin = sys.stdin\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\") == \"10.0\\n10.0\\n0.0\"\n\"\"\""
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 10\\n0 0 D\\n10 1 L\\n') == '10.0\\n10.0\\n0.0\\n'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Impossible'\nassert solution('a') == 'a'\nassert solution('a b c') == 'a b c'\nassert solution('a b b c') == 'a b b c'\nassert solution('a b b c d') == 'a b b c d'\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == \"we will avenge our dead parrot arr\"\nassert solution('wl jkd') == \"Impossible\"\nassert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == \"we will avenge our dead parrot arr\"\nassert solution('wl jkd') == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\nprint(\"All tests passed.\")\n\n-----Problem-----\nYou\u2019ve discovered a pirate who hides treasure in a treasure map, but now you\u2019re worried about security.\n\nA pirate has hidden a treasure map inside a book. All pirate map pieces are encrypted with a cipher that you don\u2019t know. However, you do have a list of all possible English words.\n\nYour mission is to decrypt all of the pirate map pieces. If you can do this, you will save the pirate\u2019s life, you will save the man, and you will obtain great wealth.\n\nHowever, this pirate is a very stubborn guy. You know that the map pieces are encrypted with a cipher that consists of a fixed length substring of the English alphabet. The cipher only has letters and doesn\u2019t have any numbers. Still, the pirate is very superstitious and believes in the power of all things.\n\nFor example, suppose the substring is \u201clunch\u201d.\n\nAfter the pirate encrypts the first word, it is \u201clunchlunchlunchlunch\u201d. The length of the cipher is 3 + 3 + 3 = 9. So, all of the possible English words would have 9 letters.\n\nNow, suppose the substring is \u201cpython\u201d.\n\nAll of the possible words would have 8 letters. The first four letters of the cipher, \u201cpyth\u201d, are shared by all of the words. If the pirate encrypts the second word, it is \u201cpythonspythonpython\u201d. The length of the cipher is 4 + 4 + 4 = 12. All of the possible words would have 12 letters.\n\nGiven the encrypted text and the substring, return all of the possible English words that the pirate might have encrypted.\n\n-----Solution-----\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\nprint(\"Passed all tests.\")\n\"\"\""
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\nprint(\"It is all good. Let's check it now\")\n\"\"\""
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == \"68.3\"\n\n\"\"\""
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == \"68.3\"\nassert solution(\"Hamburg Bremen\\n1\\nHamburg Bremen 15 68 10 5\\n\") == \"IMPOSSIBLE\"\nassert solution(\"Hamburg Bremen\\n1\\nAmsterdam Rotterdam 10 22 5 10\\n\") == \"22.7\"\nassert solution(\"Hamburg Bremen\\n2\\nAmsterdam Rotterdam 10 22 5 10\\nRotterdam Bremen 15 68 10 5\\n\") == \"22.7\"\nassert solution(\"Hamburg Bremen\\n2\\nRotterdam Bremen 15 68 10 5\\nAmsterdam Rotterdam 10 22 5 10\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == \"68.3\"\nassert solution(\"Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120') == '68.3'\nassert solution('Hamburg Bremen\\n1\\nHamburg Bremen 15 68 10 5') == 'IMPOSSIBLE'\n\"\"\"\nimport collections\n\nclass Place:\n    def __init__(self, name):\n        self.name = name\n        self.connections = set()\n        self.delay = collections.defaultdict(int)\n\n    def __repr__(self):\n        return f\"<Place: {self.name}, connections: {self.connections}>\""
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == \"68.3\"\nassert solution(\"Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom collections import namedtuple\n\nPoint = namedtuple(\"Point\", [\"origin\", \"destination\", \"standard_journey_time\", \"delay_probability\", \"delay_duration_range\"])\n\n\"\"\"\nSample Input 1:\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\nSample Output 1:\n68.3\n\nSample Input 2:\nAmsterdam Rotterdam\n1\nAmsterdam Rotterdam 10 22 5 10\nSample Output 2:\nIMPOSSIBLE\n\"\"\""
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open('test_input.txt').read()) == open('test_output.txt').read()\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == '68.3'\nassert solution(\"Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10\") == 'IMPOSSIBLE'\nassert solution(\"Hamburg Bremen\\n2\\nHamburg Bremen 45 38 55 25\\nBremen Hamburg 10 174 10 160\") == '179.4'\n\"\"\"\n\nfrom collections import defaultdict\nimport heapq\nimport math\nimport random"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution_1_tests.get(1)) == solution_1_tests.get(1)\nassert solution(solution_1_tests.get(2)) == solution_1_tests.get(2)\n\nprint(solution(stdin))\n\n\"\"\"\nimport math"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == solution(sample_input_2) == solution(sample_input_3)\nprint('Hooray!')\n\n-----Notes-----\nMost of the languages have a built-in BigInt type, or a BigInteger type in Java, C#, Ruby, PHP, etc.\nIn Haskell, you can use BigUInt.\nIn Kotlin, you can use BigIntLiteral.\nIn Nim, you can use BigInt.\nIn JavaScript, you can use BigInt.\nIn JavaScript, BigInts are 64 bits wide.\nIn JavaScript, you can multiply BigInts by a BigInt.\n\n\"\"\"\n\nimport math\n\nstdin = open(0).read().split('\\n')\n\norigin, destination = stdin[0].split(' ')\n\nn = int(stdin[1])\n\nconnections = []\n\nfor i in range(n):\n    connections.append(stdin[i+2].split(' '))\n    connections[i][0] = connections[i][0].lower()\n    connections[i][1] = connections[i][1].lower()\n\nconnections.sort()"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == \"68.3\"\nassert solution(\"Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom collections import deque\nimport re\nimport sys\nimport unittest\n\nclass Solution:\n    def solve(self, stdin):\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().solve(\n            \"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == \"68.3\"\n        assert Solution().solve(\n            \"Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\") == 3\n\"\"\"\n\nfrom typing import List, Tuple, Dict\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\\n\") == 3\nassert solution(\"2\\n*.*\\n...\\n*.*\\n\") == 4"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == '3'\nassert solution('2\\n.*\\n.*') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == 3\n\"\"\"\n\n\"\"\"\n\u5b8c\u5168\u77e5\u9053\u9898\u76ee\u7684\u610f\u601d\uff0c\u4e0d\u8fc7\u6211\u611f\u89c9\u8fd9\u4e2a\u89e3\u6cd5\u6bd4\u8f83\u4e11\u964b\n\"\"\""
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\\n\") == 3\nassert solution(\"2\\n*.*\\n...\\n*.*\\n\") == 4\n\"\"\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n.|.\n*.*\n\"\"\"\n) == \"4\"\nassert solution(\"\"\"\n3\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n\"\"\"\n) == \"3\"\nassert solution(\"\"\"\n4\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n\"\"\"\n) == \"5\"\nprint(\"Well done!\")\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n.*\\n.*\") == \"3\"\nassert solution(\"2\\n..\\n*\") == \"1\"\nassert solution(\"2\\n.*\\n.*\") == \"3\"\nassert solution(\"2\\n..\\n|\") == \"0\"\nassert solution(\"2\\n-*\\n.*\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == '3'\nassert solution('2\\n*.*\\n...\\n*.*') == '4'\nprint('Success')\n\nInput:\n5\n.*.*\n..*\n*.*\n.*.*\n..*\n\nOutput:\n0\n\nInput:\n6\n.*.*\n*..*\n.*.*\n..*\n.|.\n*.*\n\nOutput:\n1\n\nInput:\n5\n.*.*\n..*\n.*.*\n.*.*\n*..*\n\nOutput:\n2\n\"\"\""
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == '3'\nassert solution('2\\n*.*\\n...\\n*.*') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12210020') == '4'\nassert solution('1111') == 'impossible'\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n12210020') == '4'\n\"\"\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12210020\") == \"4\"\nassert solution(\"1111\") == \"impossible\"\n\nprint(solution(\"12210020\"))\nprint(solution(\"1111\"))\n\n\"\"\""
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12210020') == '4'\nassert solution('1111') == 'impossible'\nassert solution('123123') == 'impossible'\nassert solution('2211') == '2'\n\"\"\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12210020\") == 4\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n12210020\") == \"4\"\nassert solution(\"4\\n1111\") == \"impossible\"\nassert solution(\"10\\n01010\") == \"impossible\"\nassert solution(\"12\\n1212\") == \"impossible\"\nassert solution(\"4\\n11110\") == \"impossible\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12210020\") == '4'\nassert solution(\"1111\") == 'impossible'\nassert solution(\"122100201\") == 'impossible'\nassert solution(\"12210020\") == '4'\nassert solution(\"12210020\") == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12210020') == '4'\nassert solution('1111') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12210020\") == \"4\"\nassert solution(\"1111\") == \"impossible\"\nprint('Success')\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12210020') == 4\n\"\"\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n\") == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten.\""
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"0.00 1000.00 800.00\"\n\"\"\""
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n500 500 499\\n0 0 999\\n1000 1000 200') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n'\nassert solution('4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300') == 'Bill will be bitten.\\n'"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten.\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\nsnakes = []\nfor _ in range(n):\n    snakes.append(list(map(int, sys.stdin.readline().strip().split())))"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \\\n    \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \\\n    \"Bill will be bitten.\"\n\n\"\"\""
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n500 500 499\n0 0 999\n1000 1000 200\n''') == '''Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n500 500 499\n0 0 999\n1000 1000 200\n''') == '''\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n'''\nassert solution('''\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\n''') == '''\nBill will be bitten.\n'''\nprint(solution(input()))"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n500 500 499\\n0 0 999\\n1000 1000 200') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3') == 'xxoooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3') == 'xxxxxxxx'"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3') == 'xxxxxxxx'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n++xx+x++\") == \"++xx+o++\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n+++++\") == \"+++++o\"\nassert solution(\"8 3\\nxxxxxxx\") == \"xxxxxxxo\"\nassert solution(\"8 3\\nxxxxxxx\\nxxxxxxx\\nxxxxxxx\") == \"xxxxxxxooo\"\nassert solution(\"8 3\\nxxxxxxx\\nxxxxxxx\\nxxxxxxx\\nxxxxxxx\") == \"xxxxxxxooo\"\nassert solution(\"8 3\\nxxxxxxx\\nxxxxxxx\\nxxxxxxx\\nxxxxxxx\\nxxxxxxx\") == \"xxxxxxxooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\nxxxxxxxx') == 'xxoooooo'"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8 3\n+++++''') == '++++o'\nassert solution('''8 3\nxxxxx+xxxx''') == 'xxxxxoooxxxxx'\n\"\"\""
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8 3\n++xx+x++''') == '''++xx+o++'''\nassert solution('''8 3\nxxxxxxxx''') == '''xxoooooo'''\n\n\"\"\""
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n+++++x+') == '++++xoo'\nassert solution('8 3\\nxxxxxx') == 'xxxxoo'\nassert solution('8 3\\nx+xxxx') == 'xooooo'\n\n\"\"\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Lost is Close to Lose\") == \"close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he\\n\""
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"The fox said, 'When?'\\n'Not till 12 o'clock', replied the hen.\\n'That clock is stopped, it will never strike.' he said.\") == \"clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\ntill: will\\nwhen: hen\\nwill: till\"\nassert solution(\"The fox said, \\\"When?\\\"\\n'Not till 12 o'clock', replied the hen.\\n'That clock is stopped, it will never strike.' he said.\") == \"clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\ntill: will\\nwhen: hen\\nwill: till\"\nassert solution(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\") == \"lorem: ipsum dole\\nmass: comtempor incididunt\\nnulla: aliquip\\nnulla: eu\\nminim veniam: quis\\nnostrud: exercitation\\nnostrud: ut\\nlaborum: elit\\nnulla: eu\\nnulla: eu\\nnulla: eu\\nnulla: consectetur\\nadipiscing: elit\\nadipiscing: elit\\nduis: aliquip\\ntempor: incididunt\\naliquip: ex\\nminim: veniam\\nnulla: nulla\\nnulla: non\\nproident: sint\\nnulla: et\\nnulla: duis\\nnulla: aliqua\\nullamco: laborum\\nnulla: nulla\\nnulla: non\\nproident: nulla\\nnulla: eu\\nnulla: nulla\\nnulla: eu\\nnulla: nulla\\nnulla: non\\nnulla: nulla\\nnulla: proident\\nullamco: nulla\\nnulla: nulla\\nnulla: eu\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla: nulla\\nnulla:"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '***'\nassert solution('The fox said, \"When?\"\\n\"Not till 12 o\\'clock\", replied the hen.\\n\"That clock is stopped, it will never strike.\", he said.') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\nwill: till\\nwhen: hen\\nclock: oclock\\nwill: till\\nhe: hen\\nwhen: hen'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Lost is Close to Lose\") == 'close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he\\n'\n\nassert solution(\"The fox said, \\\"When?\\\"\") == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\ntill: will\\nwhen: hen\\nwill: till\\n'\n\n\"\"\"\nimport re\nfrom string import punctuation\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Lost is Close to Lose\") == \"\"\"close: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\"\"\"\n\nassert solution(\"The fox said, \\\"When?\\\"\") == \"\"\"clock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n\"\"\"\n\n\"\"\"\nSample Output\n\nSample Input\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\n\nSample Output\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n\n\"\"\"\n\n\"\"\"\n6:30\n\"\"\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\nWhen the fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n'''\n) == \\\n'''\nclose: lose\nthe: he\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n'''\n\nassert solution(\n'''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n'''\n) == \\\n'''\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n'''\n\nassert solution(\n'''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n'''\n) == \\\n'''\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n'''\n\nassert solution(\n'''\nWhen the fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n'''\n) == \\\n'''\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n'''\n\nassert solution(\n'''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n'''\n) == \\\n'''\nThe fox said: When?\n\"Not till 12 o'clock\"\n\"That clock is stopped, it will never strike.\"\n\"fox\"\n\"The fox said, \"\n\"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n'''"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == ans\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Lost is Close to Lose\") == \"close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he\"\nassert solution(\"The fox said, \\\"When?\\\"\") == \"clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\\n    pass\\n\\ndef solution(stdin: str) -> str:\\n    pass\"\n\"\"\""
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n\"\"\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(Sample_Input_1) == Sample_Output_1\nassert solution(Sample_Input_2) == Sample_Output_2\n\"\"\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\n\n\"\"\"\n\nimport sys\nimport unittest\n\nfrom unittest.mock import patch\nfrom collections import deque\n\n\nclass TestSolution(unittest.TestCase):\n\n    @patch('sys.stdin', deque(list(map(int, '10\\n1 2 7 3 8 9 4 5 10 6'.split('\\n')))))\n    def test_first_example(self):\n        self.assertEqual(solution(), '1')\n\n    @patch('sys.stdin', deque(list(map(int, '10\\n3 8 1 9 4 5 2 7 10 6'.split('\\n')))))\n    def test_second_example(self):\n        self.assertEqual(solution(), '2')\n"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\n\"\"\"\nimport collections"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\n\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\n\"\"\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('10\\n10 9 8 7 6 5 4 3 2 1') == '2'\n\n-----------\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert Solution().solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1'\nassert Solution().solution('10\\n10 9 8 7 6 5 4 3 2 1') == '2'"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\") == \"1\"\n\"\"\"\n\n\nimport unittest\nfrom typing import List, Dict, Tuple"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\n\"\"\"\n\n\"\"\"\nProblem Statement\nA deck of cards can be shuffled by splitting it into two equal-sized stacks, interleaving the top card of the cards in each stack, and then flipping over the top card of each stack.\n\nFor example, a standard deck of cards has 52 cards, so it is possible to split the deck into two equal-sized stacks by stacking the cards in one stack in the order 1, 2, 3,..., 12, 13, 14,..., and then stacking the cards in the other stack in the order 13, 14, 15,..., 22, 23, 24,..., 36. When cards are interleaved in this order, each card is in both stacks, and the two stacks are indistinguishable.\n\nRecall that two stacks of cards are indistinguishable if and only if there is some arrangement of interleaving the stacks such that the cards in each stack are indistinguishable.\n\nSuppose that a deck of cards can be split into two independent stacks of cards. Each of the two stacks is indistinguishable from the other.\n\nGiven a deck of cards, what is the smallest number of interleavings that would make the two stacks indistinguishable?\n\n-----Input-----\nEach input will consist of a single test case. Each test case will begin with one line containing an integer $n$ ($1 \\le n \\le 1000000$) indicating the number of cards in the deck. On the next line will be $n$ unique integers $c$ ($1 \\le c \\le n$), with a single space between them, indicating an ordering of the cards. The values $c$ are guaranteed to be a permutation of the numbers $1 \\ldots n$.\n\n-----Output-----\nOutput a single line with a single integer indicating the minimum number of interleavings that could possibly make the two stacks indistinguishable.\n\n-----Examples-----\nSample Input 1:\n10\n1 2 7 3 8 9 4 5 10 6\nSample Output 1:\n1\n\nSample Input 2:\n10\n3 8 1 9 4 5 2 7 10 6\nSample Output 2:\n2\n\"\"\"\n\nimport itertools\nimport math"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\nfrom collections import defaultdict\nimport heapq"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n\"\"\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n\"\"\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0.142857 6') == '1/7'\n\"\"\"\n\nimport re\nfrom fractions import Fraction"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0.142857 6\n''') == '1/7'\n\"\"\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n\"\"\"\nfrom fractions import Fraction"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('0.142857 6')!= '1/5'\nassert solution('1.6 1')!= '5/3'\nassert solution('0.142857 6')!= '1/7'\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\n\"\"\"\n\nimport re\n\nn, d = [int(s) for s in stdin.split(' ')]\ns = str(n) + '.' + str(d)\nn = int(n)\nd = int(d)\nl = len(s) - 1"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n\"\"\"\n\nimport re\n\nregex_pattern = r\"^[0-9]{1,3}[\\.]{1}[0-9]{1,11} [0-9]{1,2}$\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n0 0 0\\n') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'\n\nprint(solution(stdin.read()))\n\n\"\"\"\n\nimport itertools\nimport math"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n0 0 0\\n0 0 1\") == '6'\nassert solution(\"2\\n0 0 0\\n0 0 1\") == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n0 0 0\\n\") == \"6\""
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0 0\\n0 0 1\") == 6\nassert solution(\"5\\n0 0 0\\n0 0 1\\n0 1 1\\n0 0 2\") == 10\nassert solution(\"7\\n0 0 0\\n0 0 1\\n1 0 1\\n0 0 2\\n1 1 1\\n0 2 1\") == 13\nassert solution(\"3\\n0 0 0\\n0 0 1\") == 10\n\"\"\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\n0 0 0\n''') == '6'\n\nassert solution('''2\n0 0 0\n0 0 1\n''') == '10'\n\nassert solution('''5\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n''') == '5'\n\nassert solution('''10\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n0 0 5\n0 0 6\n0 0 7\n0 0 8\n0 0 9\n0 0 10\n''') == '11'\n\nprint('Success')\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0 0\\n0 0 1') == '10'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0 0 0\\n\") == \"6\"\nassert solution(\"2\\n0 0 0\\n0 0 1\\n\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0 0 0\") == \"6\"\nassert solution(\"2\\n0 0 0\\n0 0 1\") == \"10\"\n\nprint(\"Passed!\")"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0 0 0\") == \"6\"\nassert solution(\"2\\n0 0 0\\n0 0 1\") == \"10\"\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0 0 0\\n0 0 1\") == \"6\"\nassert solution(\"2\\n0 0 0\\n0 0 1\") == \"10\"\n\"\"\""
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\\n\") == \"1\"\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n\") == \"1\"\n\n\"\"\"\n\nimport math\n\n\"\"\"\nn = 3\na = [-1, 2, -1]\na = [2, 2]\na = [1, -1, 1]\n\"\"\"\n\nclass Solution:\n    def solution(self, n: str, a: str):\n        n = int(n)\n        a = [int(x) for x in a.split('\\n') if x!= '']\n        a = [a[i:i+n] for i in range(0, len(a), n)]\n\n        print(a)\n\n        def isValid(row):\n            for i in range(n):\n                for j in range(i+1, n):\n                    # print(f'i={i}, j={j}, i-j={i-j}')\n                    if abs(a[row][i] - a[row][j]) == row - j:\n                        return False\n            return True\n\n        def isValid2(row):\n            n = len(a[row])\n            for i in range(n):\n                for j in range(i+1, n):\n                    print(f'i={i}, j={j}, i-j={i-j}')\n                    if abs(a[row][i] - a[row][j]) == row - j:\n                        # print('True')\n                        return True\n            # print('False')\n            return False\n\n        # print(isValid(1))\n\n        res = 0\n        for row in range(len(a)):\n            if isValid(row):\n                res += 1\n        # print(res)\n        # print(isValid2(3))\n        return res\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\\n\") == \"1\"\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n-1 2 -1\n2 2\n1 -1 1\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n1\n-1\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n2\n-1 1\n2 2\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n3\n-1 2 -1\n2 2\n1 -1 1\n\"\"\") == \"2\""
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == 1\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\") == 1\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n1 2\\n1 1\") == \"1\"\nassert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == '1'\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\") == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 1 -1 -1\\n1 1\") == \"1\"\nassert solution(\"3\\n0 1 -1 -1\\n1 1 -1 0\\n1 1 -1 -1\") == \"1\"\nassert solution(\"4\\n0 1 1 1 1\\n1 1 0 -1 1\\n1 1 1 -1 1\\n1 1 1 1 1\") == \"2\"\nassert solution(\"5\\n0 1 1 1 1 1\\n1 1 0 1 1 1\\n1 1 1 1 1 0\\n1 1 1 1 1 0\\n1 1 1 1 1 0\") == \"4\"\nassert solution(\"6\\n0 1 1 1 1 1 1\\n1 1 0 1 1 1 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"8\"\n\"\"\""
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n-1 2 -1\\n2 2\\n1 -1 1') == '1'\nassert solution('7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2') == '1'\n\n'''\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n-1 2 -1\\n2 2\\n1 -1 1') == '1'\nassert solution('7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1') == '1'\n\n-----------------\n\"\"\""
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\nprint('Test pass.')"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1111\") == 1\nassert solution(\"1101\") == 3\nassert solution(\"1110\") == 3\n\"\"\"\nimport sys"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100') == 1\nassert solution('1111') == 1\nassert solution('101') == 2\n"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1111') == 1\nassert solution('1001') == 3\n\"\"\"\n\nclass Solution:\n    def num_rep(self, n: str) -> int:\n        res = 0\n        n = n[::-1]\n        for i in range(len(n)):\n            if n[i] == '2':\n                res += (2 ** i)\n        return res % 1000000009\n\nassert Solution().num_rep('1111') == 1\nassert Solution().num_rep('1001') == 3"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1111\") == 1\nassert solution(\"1001\") == 3\n"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1001\") == 3\nassert solution(\"1111\") == 1\n\"\"\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1101') == '2'\nassert solution('11101') == '4'\n\"\"\"\n\nfrom itertools import product\nfrom functools import reduce\n\nbin_rep = stdin[0]"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1001') == 3\nassert solution('1111') == 1\nprint('test passed')"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11111\") == \"1\"\nassert solution(\"111111\") == \"1\"\nassert solution(\"101010\") == \"2\"\nassert solution(\"111000\") == \"2\"\nassert solution(\"11101\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 1''') == 'LLL'\nassert solution('''5\n1 2 2 1 2''') == 'LLRLR'"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 1\") == \"LLL\"\nassert solution(\"5\\n1 2 2 1 2\") == \"LLRLR\"\n\"\"\"\n\n\"\"\"\nOptimal Solution: O(log(N)) time and space\n\nAlgorithm:\n\nWe can solve this problem with a breadth first search. We iterate through the list of all possible combinations for the number of wizards n, and then we use a breadth first search to identify the lowest lexicographical order of the possible combinations.\n\nLet p be the permutation that we want to determine the most optimal.\n\nFirst, we need to know how many wizards are in the optimal permutation. If n is even, then we can always find the least lexicographical permutation with n/2 wizards and the remaining ones will be put in between them. In the case n is odd, we can always find a least lexicographical permutation with (n + 1)/2 wizards and the remaining ones will be put between them.\n\nIn order to determine this, we start with the empty permutation, and add the first element of the permutation to it. We know that the first element will be either a counterclockwise move or a clockwise move. If the first element is a clockwise move, then the remaining elements of the permutation are counterclockwise moves. Otherwise, the remaining elements are clockwise moves. We keep checking until we have filled the number of wizards.\n\nAfter the initial call, we have n = n - 2. We then call the function for n/2 (using the initial permutation and the remaining clockwise and counterclockwise moves), and we then call the function again for (n - 2)/2 (using the initial permutation, the remaining clockwise and counterclockwise moves and the elements between them), and so on.\n\nThe recursive calls return a list of all possible permutations, in the order of decreasing lexicographical order. We return the lexicographically smallest permutation.\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations, groupby\n\nclass Solution:\n    def optimal_dance(self, n: int, p: [int]) -> str:\n        # This is a breadth-first search\n        # We iterate through all possible combinations for the number of wizards, n, and then we use a breadth first search to identify the lowest lexicographical order of the possible combinations.\n        combinations = []\n        for perm in permutations([i + 1 for i in range(n)]):\n            for moves in (clockwise, counterclockwise):\n                combination = []\n                for p_i in perm:\n                    combination.append(moves[p_i - 1])\n                combinations.append(''.join(combination))\n        return min(combinations)"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 1\") == \"LLL\"\nassert solution(\"5\\n1 2 2 1 2\") == \"LLRLR\"\n\"\"\""
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\\n\") == \"LLL\"\nassert solution(\"1 1 2\\n\") == \"LLR\"\n\"\"\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 1\\n\") == \"LLL\"\n\n\"\"\"\n\n\"\"\"\nTesting a failed solution...\n\n======= 1 failed, 1 passed, 1 warning in 0.00s ====\n\n\"\"\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n1 1\n\"\"\") == \"LLL\"\n\nassert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"LLL\"\n\nassert solution(\"\"\"\n5\n1 2 2 1 2\n\"\"\") == \"LLRLR\"\n\nassert solution(\"\"\"\n5\n1 2 2 1 2\n\"\"\") == \"LLRLR\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"\""
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 1 1\nSample Output 2:\nLLL\n''') == 'LLL'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1\\n\") == \"LLL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1\n1 1 1''') == 'LLL'\nassert solution('''3\n2 2 2 2''') == 'LLR'\nassert solution('''5\n4 3 2 5 1''') == 'LLLR'\nassert solution('''8\n3 3 4 2 1 5 6 4''') == 'LLRLRRLLLRRLLRRLLRRLLLL'\nassert solution('''5\n3 3 4 2 1''') == 'LLLLLL'\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 1\") == \"LLL\"\nassert solution(\"5\\n1 2 2 1 2\") == \"LLL\"\nassert solution(\"5\\n1 2 2 1\") == \"LRL\"\n\"\"\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000\") == '49000000000070'\nassert solution(\"6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\") == '25000000000021'\n\n\"\"\"\n\n\"\"\"\n\u8fd9\u9898\u76ee\u662f\u8003\u5bdf\u80fd\u591f\u62b5\u6d88\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u8fd9\u4e00\u79cd\u65b9\u6cd5\u662f\uff0c\u628a\u6bcf\u4e2a\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u52a0\u8d77\u6765\uff0c\u52a0\u8d77\u6765\u7684\u503c\u662f\u62b5\u6d88\u7684\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u4e00\u4e2a\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff0c\u4e3a\u4e86\u9632\u6b62\u6700\u540e\u4e00\u4e2a\u62b5\u6d88\u7684\u503c\u91cd\u590d\uff0c\u628a\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u53d6\u6a21\uff0c\u8d77\u5230\u6570\u7ec4\u957f\u5ea6\u7684\u6548\u5e94\uff0c\u4f7f\u5f97\u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u503c\u4e3a0\u7684\u90a3\u4e00\u4f4d\u5373\u53ef\u3002\n\"\"\"\nimport collections\nimport math\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, M, alpha = stdin.split()\n        N, M, alpha = int(N), int(M), int(alpha)\n\n        roads = collections.defaultdict(list)\n        for i in range(1, M + 1):\n            u, v, c = stdin.split()\n            u, v, c = int(u), int(v), int(c)\n            roads[u].append([v, c])\n            roads[v].append([u, c])\n\n        road_max = [0] * (N + 1)\n        for i in roads:\n            road_max[i] = max([j[1] for j in roads[i]])\n\n        road_max = [x % M for x in road_max]\n\n        road_max = [alpha] + road_max\n        ans = 0\n        for i in range(len(road_max) - 1):\n            ans += road_max[i] * road_max[i + 1]\n        if ans % M!= 0:\n            return 'Poor girl'\n        else:\n            ans = ans // M\n            return str(ans)\n\nsolution = Solution().solution\nassert solution(\"7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000\") == '49000000000070'\nassert solution(\"6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\") == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000') == '49000000000070'\n\"\"\"\n\nN, M, K, alpha = [int(i) for i in stdin.split()]\n\nE = 0"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\n\"\"\""
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\nassert solution(\"5 6 7\") == \"Poor girl\"\n\"\"\"\n\nN, M, alpha = map(int, input().split())\n\nE = alpha*M\n\nM_l = []\nfor _ in range(M):\n    u, v, c = map(int, input().split())\n    M_l.append(c)\n\nfor i in range(M):\n    if M_l[i] == max(M_l):\n        E += (M_l[i]**2)\n        M_l[i] = 0\n    else:\n        E += (M_l[i]**2)\n        M_l[i] = 0"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\nprint('Test pass.')"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000') == '49000000000070'\nassert solution('6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000') == '25000000000021'"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000''') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\nassert solution(\"3 2 3\") == \"Poor girl\"\n\"\"\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000''') == '49000000000070'\nassert solution('''6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000''') == '25000000000021'\nassert solution('''2 5 2\n2 3 1\n2 1 3\n1 2 3''') == 'Poor girl'\nassert solution('''5 5 3\n1 2 1000000\n2 3 1000000\n3 4 3000000\n4 5 3000000\n5 1 3000000\n1 2 3000000''') == '0'\nassert solution('''5 5 3\n1 2 1000000\n2 3 1000000\n3 4 3000000\n4 5 3000000\n5 1 3000000\n1 2 3000000''') == '0'\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\n\"\"\""
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == '2\\n2\\n0\\n1\\n2\\n2\\n3'\n\"\"\"\n\n\"\"\"\nThe task seems pretty simple, but I was looking forward for someone to explain the solution. I will summarize the steps:\n\nThe first step is to create a graph and fill it with nodes and edges. Since the input is in the form of a matrix, the graph will be represented as a dict. For example, the graph for the given 4 4 matrix would look like this:\n\n{0: {1: 10, 2: 15},\n 1: {0: 10, 2: 14},\n 2: {0: 15, 1: 14},\n 3: {3: 7}}\nThis graph will be represented as a dict of dicts. The dict of dicts is a nested dict, where the root is a node, the value is a dict with the children as key-value pairs.\n\nThe input for the example above would look like this:\n\n4 4\n0 1\n1 0\n2 3\n3 2\nSo the graph for the matrix above would look like this:\n\n0: {1: 10, 2: 15},\n1: {0: 10, 2: 14},\n2: {0: 15, 1: 14},\n3: {3: 7}}\n\nThen we can easily compute the route length of each node by simply using the dict value for the key. For example, if the route between 0 and 1 is 10 meters, then the value for key 0 would be {1: 10}. If the route between 1 and 2 is 14 meters, then the value for key 1 would be {2: 14}.\n\nThe second step is to get the node list from the matrix, and the edges list from the graph.\n\nThe third step is to create a function called find_best_route. This function should take two parameters. The first parameter should be the node list, and the second parameter should be the graph. The function should return a list of the best routes based on distance traveled.\n\nThe best route is the one that goes from 0 to 3, and then from 3 to 0. This is because the route 0 to 1 is shorter than the route 1 to 0. The first element in the returned list should be the shortest route.\n\nIn the example, the best route would be to go from 0 to 3 and then from 3 to 0, so the list would look like this:\n\n[0, 3, 3, 0]\n\nOnce the best route is calculated, we can simply iterate through the list and print the output by going from element to element.\n\nThe graph for the matrix above would look like this:\n\n0: {1: 10, 2: 15},\n1: {0: 10, 2: 14},\n2: {0: 15, 1: 14},\n3: {3: 7}}\n\nThen the matrix would look like this:\n\n0 1\n1 0\n2 3\n3 2\nSo we can print it in the format we desire by printing it from 0 to 3, then 3 to 0.\n\nThe final step is to implement the function. We will start by creating the function and defining all the parameters of the function. Then we will fill the function with the logic of the algorithm.\n\nThe function should take two parameters. The first one is the matrix. The second one is the graph."
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 2') == '2\\n2\\n0\\n1\\n2\\n2\\n3'\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 2') == '2\\n2\\n0\\n1\\n2\\n2\\n3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Yeah!'\nassert solution('1\\n2\\n2') == '2\\n2\\n2\\n1'\nassert solution('1\\n2\\n2\\n2') == '2\\n2\\n2\\n1'\nassert solution('1\\n2\\n1\\n2\\n2\\n2') == '2\\n2\\n1\\n2\\n2\\n2\\n1'\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 3') == '2\\n2\\n0\\n1\\n2\\n2\\n3\\n'\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\\n\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\\n\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\\n\") == \"Yeah!\\n\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\\n\") == \"Yeah!\\n\"\nassert solution(\"1 1\\n0 1\\n\") == \"Yeah!\\n\"\nassert solution(\"1 1\\n0 1\\n\") == \"Yeah!\\n\"\n\n\"\"\"\n\n\"\"\"\n\nSolution:\n\n\"\"\""
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('1\\n1\\n') == '1\\n1\\n1\\n1\\n1\\n1\\n'\nassert solution('1\\n1\\n2\\n2\\n') == '1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n'\nassert solution('1\\n1\\n2\\n2\\n3\\n3\\n') == '1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"Yeah!\"\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == '2\\n2\\n0\\n1\\n2\\n2\\n3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 2\") == \"POSSIBLE\\n1 3\"\nassert solution(\"2\\n1 2\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1 2''') == 'POSSIBLE'\nassert solution('''2\n1 2''') == 'IMPOSSIBLE'\n'''"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 2\\n\") == \"POSSIBLE\\n1 3\\n2 3\"\nassert solution(\"3\\n1 2 2\\n\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 2\\n\") == \"POSSIBLE\\n1 3\\n2 3\"\nassert solution(\"2\\n1 2\\n\") == \"IMPOSSIBLE\"\n\n\"\"\"\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 2\") == \"POSSIBLE\"\nassert solution(\"2\\n1 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 2\\n\") == \"POSSIBLE\\n1 3\\n2 3\"\nassert solution(\"3\\n1 1 2\\n2 2 1\\n\") == \"POSSIBLE\\n1 3\\n2 3\"\nassert solution(\"3\\n1 1 2\\n2 2 1\\n3 2 1\\n\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1 2') == 'POSSIBLE'\nassert solution('2\\n1 2') == 'IMPOSSIBLE'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ntree = {}\n\nfor _ in range(n):\n    val = list(map(int, sys.stdin.readline().split()))\n    for i in range(1, val[0] + 1):\n        if i in tree:\n            tree[i].append(val[1])\n        else:\n            tree[i] = [val[1]]"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 2\") == \"POSSIBLE\\n1 3\\n2 3\"\nassert solution(\"3\\n2 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"2\\n1 2\") == \"IMPOSSIBLE\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\\n\") == \"POSSIBLE\\n1 3\\n2 3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 2\") == \"POSSIBLE\\n1 3\"\n\nimport sys\n\nassert solution(sys.stdin.read()) == sys.stdout.read()"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''0 0 0\n1 0 0\n0 1 0\n0 0 1''') == '0.5 0.5 0.5'\n\n'''\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n'''\nassert solution('''0 0 0\n1 0 0\n0 1 0\n0 0 1''') == '0.0 0.0 -0.0'\n\n'''\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n'''\nassert solution('''-1 0 0\n1 0 0\n0 1 0\n0 0 1''') == '0.0 0.0 -0.0'\n\n'''\n-1 0 0\n-1 0 0\n0 1 0\n0 0 1\n'''\nassert solution('''-1 0 0\n-1 0 0\n0 1 0\n0 0 1''') == '0.0 0.0 -0.0'\n\n'''\n-1 -1 -1\n-1 -1 0\n-1 0 0\n0 0 0\n'''\nassert solution('''-1 -1 -1\n-1 -1 0\n-1 0 0\n0 0 0''') == '0.0 0.0 -0.0'\n\n'''\n-1 1 -1\n-1 1 0\n-1 0 0\n0 0 0\n'''\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\nassert solution(\"1 1 1\\n0 1 1\\n0 0 1\\n1 1 1\") == \"1.0 1.0 1.0\"\nassert solution(\"-1 -1 -1\\n1 1 1\\n0 1 1\\n0 0 1\") == \"0.0 0.0 0.0\"\nassert solution(\"1 -1 1\\n-1 1 1\\n0 1 1\\n0 0 1\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\n\n\"\"\""
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\nassert solution('1 1 1\\n2 2 2\\n3 3 3\\n4 4 4') == '0.0 0.0 0.0'\n\"\"\"\n\nimport math\n\nnums = input().split()\nfor i in range(4):\n    nums[i] = int(nums[i])\n\nx1, y1, z1 = nums[0], nums[1], nums[2]\nx2, y2, z2 = nums[3], nums[4], nums[5]\nx3, y3, z3 = nums[6], nums[7], nums[8]\n\nv1 = [x1, y1, z1]\nv2 = [x2, y2, z2]\nv3 = [x3, y3, z3]\n\nn = 0\nfor i in range(3):\n    for j in range(3):\n        for k in range(3):\n            if i!= j and j!= k and k!= i:\n                n += 1\n\na = (v1[0] * (v2[1] * v3[2] - v2[2] * v3[1]) - v1[1] * (v2[0] * v3[2] - v2[2] * v3[0]) + v1[2] * (v2[0] * v3[1] - v2[1] * v3[0]))\nb = (v1[0] * (v2[2] * v3[1] - v2[1] * v3[2]) - v1[1] * (v2[0] * v3[2] - v2[2] * v3[0]) + v1[2] * (v2[0] * v3[1] - v2[1] * v3[0]))\nc = (v1[0] * (v2[1] * v3[2] - v2[2] * v3[1]) - v1[1] * (v2[0] * v3[2] - v2[2] * v3[0]) + v1[2] * (v2[0] * v3[1] - v2[1] * v3[0]))\n\nc_root = math.sqrt(c)\nx = -a / (2 * c_root)\ny = -b / (2 * c_root)\nz = -c / (2 * c_root)\n\nx = round(x, 4)\ny = round(y, 4)\nz = round(z, 4)\n\nprint(x, y, z)"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\nassert solution(\"0 -1 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 -0.5 0.0\"\nassert solution(\"-1 0 0\\n0 0 0\\n0 1 0\\n0 0 1\") == \"0.0 -0.5 0.0\"\nassert solution(\"-1 0 0\\n0 0 0\\n0 1 0\\n0 0 1\") == \"0.0 -0.5 0.0\"\n\n-----Explanation-----\nSample Input 1:\nIn this case, the points are coplanar and all lie on the same plane. So the output is the centre of that plane, which is (0, 0, 0).\n\nSample Input 2:\nIn this case, the points are coplanar and all lie on the same plane. So the output is the centre of that plane, which is (0, 0, 0).\n\n-----Constraints-----\nAll input is guaranteed to be valid.\n-----Test Cases-----\nThe input is guaranteed to be a valid test case.\n\"\"\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\nassert solution(\"0 1 0\\n-1 0 0\\n1 0 0\\n0 0 1\") == \"0.0 0.0 0.0\"\nassert solution(\"0 -1 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 0.0\"\nassert solution(\"1 0 1\\n1 0 1\\n1 1 1\\n1 0 1\") == \"0.0 0.0 0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\nassert solution('-1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '0.0 0.0 0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n\"\"\"\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == '0.5 0.5 0.5'\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == '0.0 0.0 -0.0'\nassert solution(\"0 -1 0\\n1 0 0\\n0 1 0\\n0 0 1\") == '0.0 -0.5 0.0'\nassert solution(\"0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\") == '0.0 0.0 0.0'\nassert solution(\"0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\") == '0.0 0.0 0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\"\"\"\n\nimport math\n\nx0, y0, z0 = map(float, input().split())\nx1, y1, z1 = map(float, input().split())\nx2, y2, z2 = map(float, input().split())\nx3, y3, z3 = map(float, input().split())\n\nX = [[x0, y0, z0],\n     [x1, y1, z1],\n     [x2, y2, z2],\n     [x3, y3, z3]]\n\nS = 0\nfor i in range(4):\n    S += (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0)\n\nfor i in range(4):\n    S += (x1 - x0) * (y3 - y0) - (x3 - x0) * (y1 - y0)\n\nfor i in range(4):\n    S += (x2 - x0) * (y3 - y0) - (x3 - x0) * (y2 - y0)\n\nd = 1.0 / 3 * S"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n3 2 2\"\n\"\"\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n3 6 2 3 2 2 2 1 5 6') == '2\\n3 2 2 1 5'\n\"\"\"\n\nN = int(input())\nnums = list(map(int, input().split()))\ntime = 0\nout = []\nwhile len(nums) > 0:\n    ind = 0\n    for i in range(1, N):\n        if nums[i] > nums[ind]:\n            ind = i\n    out.append(nums.pop(ind))\n    time += 1\nprint(time)\nprint(' '.join(map(str, out)))"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 1 2 4 3') == '3 1 2'\nprint(solution(stdin))\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n3 2 2\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n3 2 2\"\nassert solution(\"100\\n17 17 17\") == \"0\\n17 17 17\"\nassert solution(\"100\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n3 2 2\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr_sort = sorted(arr)\ni, j = 0, n - 1\nres = []\n\nwhile i < j:\n    if arr_sort[i] < arr_sort[j]:\n        res.append(arr_sort[i])\n        i += 1\n    else:\n        res.append(arr_sort[j])\n        j -= 1\nres.append(arr_sort[j])\n\nfor i in range(n):\n    print(res[i])\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n3 2 2\\n6 6\"\n\n---------------------------------------------------------------------------------------------------------------------------------------\n\nIn this problem, we consider the following rules:\n\n1. Each candidate knows their own value, $v_i$, and its index, $i$, in the queue.\n2. As the interview begins, candidates are initially in the queue in the order of their perceived value, $v_1,... v_N$.\n3. On each minute, the current candidate knows the values of the candidates behind them and ahead of them, $v_{i-1}$, $v_{i+1}$, and, $v_i$, respectively.\n4. The candidate who is behind them in the queue looks at the resum\u00e9 of the candidate ahead of them, $v_{i+1}$, to determine whether they should leave the queue.\n5. The candidate who is ahead of them in the queue looks at the resum\u00e9 of the candidate behind them, $v_{i-1}$, to determine whether they should leave the queue.\n6. The candidate who is currently in the queue looks at the resum\u00e9 of the candidates ahead of them and behind them, $v_{i+1}$, $v_{i-1}$, to determine whether they should leave the queue.\n7. The candidate who is currently in the queue does not leave the queue unless they know that they will not be selected in the interview. Otherwise, they leave the queue in the same order that they were in the queue.\n\nWrite a function to find the number of minutes that pass until each candidate leaves the queue. It is guaranteed that each candidate will leave the queue before all other candidates.\n\n-----\n\nSample Input:\n5\n2 5 7 1 2\nSample Output:\n5\n4\n3\n2\n1\n0\n\n-----\n\nSolution:\n\nimport unittest\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, values: List[int]) -> int:\n        \"\"\"\n        Time complexity: O(N)\n        Space complexity: O(1)\n        \"\"\"\n        values = sorted(values)\n        queue = []\n        queue.append(values[0])\n        for i in range(1, len(values)):\n            if i % 2 == 0:\n                left_val = queue.pop()\n                if values[i] >= left_val:\n                    queue.append(left_val)\n                    queue.append(values[i])\n                else:\n                    queue.append(left_val)\n            else:\n                right_val = queue.pop(0)\n                if values[i] >= right_val:\n                    queue.insert(0, right_val)\n                    queue.insert(0, values[i])\n                else:\n                    queue.insert(0, right_val)\n        return len(queue)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(\n            self.solution.solution([2, 5, 7, 1, 2]),\n            5,\n        )\n        self.assertEqual(\n            self.solution.solution([2, 5, 7, 1, 2]),\n            5,\n        )\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n17 17 17\") == '0\\n17 17 17'\nassert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == '2\\n3 2 2 1 5\\n3 2 2'\nassert solution(\"20\\n
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n3 2 2\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"5\\n5 5 5 5\") == \"0\\n5 5 5 5\"\nassert solution(\"10\\n1 5 5 5 5 5 5 5 5 5\") == \"0\\n1 5 5 5 5 5 5 5 5 5\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"0\\n1 2 3 4 5 6 7 8 9 10\"\n\nprint(solution(\"10\\n1 2 3 4 5 6 7 8 9 10\"))\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10\n3 6 2 3 2 2 2 1 5 6''') == '2\n\nassert solution('''3\n17 17 17''') == '0\\n17 17 17'\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '10\\n1 1 1 1 1 1 1 1 1 1'\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '0\\n1 1 1 1 1 1 1 1 1 1'\n\nassert solution('''10\n3 6 2 3 2 2 2 1 5 6''') == '2\\n3 2 2 1 5'"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n') == 'IMPOSSIBLE'\n\"\"\"\nimport sys\nimport random\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Car:\n    def __init__(self, point):\n        self.position = point\n        self.speed = 0\n\n\nclass Highway:\n    def __init__(self, point, max_speed):\n        self.point_from = point\n        self.point_to = None\n        self.max_speed = max_speed\n\n\nclass Intersection:\n    def __init__(self, num, exit):\n        self.num = num\n        self.connected_highways = []\n        self.exits = exit\n        self.car = None\n\n\nclass Map:\n    def __init__(self, stdin):\n        self.num_intersections = int(stdin[0])\n        self.num_highways = int(stdin[1])\n        self.num_car_highways = int(stdin[2])\n        self.num_exit_highways = int(stdin[3])\n        self.points = {}\n        self.highways = {}\n        self.cars = []\n        self.exits = []\n        self.distances = [[0 for _ in range(self.num_intersections)] for _ in range(self.num_intersections)]\n        self.queue = []\n        self.end = None\n\n    def read_stdin(self):\n        for i in range(self.num_intersections):\n            x, y = map(float, stdin[i + 4].split())\n            self.points[i + 1] = Point(x, y)\n        for i in range(self.num_highways):\n            x, y, speed = map(int, stdin[i + self.num_intersections + 4].split())\n            self.highways[i + 1] = Highway(Point(x, y), speed)\n        for i in range(self.num_car_highways):\n            x, y = map(int, stdin[i + self.num_intersections + self.num_highways + 4].split())\n            self.cars.append(Car(Point(x, y)))\n        for i in range(self.num_exit_highways):\n            x, y = map(int, stdin[i + self.num_intersections + self.num_highways + self.num_car_highways + 4].split())\n            self.exits.append(Intersection(i + 1, y))\n        x, y = map(int, stdin[self.num_intersections + self.num_highways + self.num_car_highways + self.num_exit_highways + 6].split())\n        self.end = Intersection(x, y)\n\n    def find_path(self):\n        self.read_stdin()\n        for i in self.exits:\n            for j in self.highways.values():\n                if j.point_from.x == i.num:\n                    i.connected_highways.append(j.num)\n                    self.distances[j.point_from.x - 1][i.num - 1] = 100\n        for i in self.exits:\n            for j in i.connected_highways:\n                self.distances[i.num - 1][j - 1] = self.distances[j - 1][i.num - 1] = abs(self.points[i.num].x - self.points[j].x)\n        for i in range(self.num_intersections):\n            for j in range(self.num_intersections):\n                if self.distances[i][j] == 0:\n                    for k in self.highways.values():\n                        if k.point_from.x == i + 1 and k.point_to.x == j + 1:\n                            self.distances[i][j] = self.distances[j][i] = abs(self.points[k.point_to.x].y - self.points[k.point_from.x].y)\n                            self.queue.append([i, j])\n\n    def bfs(self):\n        while self.queue:\n            start, end = self.queue.pop(0)\n            for i in self.exits:\n                if i.num == end:\n                    for j in self.highways.values():\n                        if j.point_from.x == i.num and j.point_to.x == end:\n                            self.distances[j.point_from.x - 1][j.point_to.x - 1] = self.distances[j.point_to.x - 1][j.point_from.x - 1] = abs(self.points[j.point_to.x].y - self.points[j.point_from.x].y)\n                            self.queue.append([j.point_from.x, j.point_to.x])\n                            break\n        self.distances[self.end"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n-----Solution-----\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import lru_cache"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\""
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n') == '74.6666666667'\n\"\"\"\n\nfrom collections import defaultdict\nimport math\n\nlines = stdin.split('\\n')\nm, n, e = map(int, lines[0].split())\nroads = defaultdict(list)\nfor i in range(1, len(lines)):\n    a, b, l = map(int, lines[i].split())\n    roads[a].append((b, l))\n    roads[b].append((a, l))\nexits = list(map(int, lines[-1].split()))\n\nmin_speed = float('inf')\nfor exit_id in exits:\n    def get_min_speed(start_point, next_point, path_length):\n        if path_length <= min_speed:\n            return\n        if start_point == next_point:\n            min_speed = min(min_speed, path_length)\n            return\n        for road_id, road_length in roads[start_point]:\n            if road_id == next_point:\n                get_min_speed(road_id, next_point, road_length)\n            else:\n                get_min_speed(road_id, next_point, road_length + path_length)\n    get_min_speed(exits[0], exits[1], 0)"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys\n\nclass Car(object):\n    def __init__(self, city, path):\n        self.city = city\n        self.path = path"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\"\n\"\"\"\n\n\"\"\"\nThe script prints an output to the console:\nThe program must read the number of intersection points, the number of roads in the city and the number of exits,\nthen it must read the number of lines describing the roads and then for each of these lines a number must be read.\nThe roads must be described as a pair of integers, that is, they must be valid intersections, which are pair of numbers in the range from 1 to the number of intersections.\nThey must also have a length, which is given in the following line (integers with the range from 1 to 100).\nNext follows a number of integers, that is, a set of integers in the range from 1 to the number of intersections,\nwhich indicates which roads start and end at these intersections.\nThen a number is given, that is, an integer in the range from 1 to the number of intersections,\nwhich indicates which of the intersections is the one where the police car will start.\nThe program must then print to the console the minimum speed needed to escape or \"IMPOSSIBLE\" if it is not possible.\n\n-----Input-----\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n-----Output-----\nIMPOSSIBLE\n\n-----Input-----\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n4 4 1\n2 3 2\n3 1 2\n3 4 4\n4 1 4\n4 3 4\n-----Output-----\nIMPOSSIBLE\n\"\"\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n') == '74.6'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == 'IMPOSSIBLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == \"1\\n2\\n1\\n2\\n2\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\") == \"1 2 1 2 1 1 2\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\") == \"0\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n4 1\") == \"1 2 1 2 1 1 2\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n4 1\") == \"2 1 2 1 1 2 2\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n4 1\") == \"2 1 2 1 1 2 2\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n') == '1\\n2\\n1\\n2\\n2\\n1\\n'\nassert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '0\\n0\\n0\\n0\\n0\\n0\\n0\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == \"1\\n2\\n1\\n2\\n2\\n1\\n\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n3 2\\n3 1\") == \"1\\n2\\n1\\n2\\n2\\n1\"\nprint(\"Solution test passed\\n\")\n\nassert solution(\"6 4\\n4 3\\n3 2\\n2 1\\n1 1\\n1 4\\n4 5\\n5 6\\n6 4\") == \"0\"\nprint(\"Solution test passed\\n\")\n\nassert solution(\"5 2\\n1 2\\n2 3\\n3 1\\n3 4\\n3 5\") == \"1\\n2\\n2\\n2\\n2\\n1\"\nprint(\"Solution test passed\\n\")\n\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"0\"\nprint(\"Solution test passed\\n\")\n\nassert solution(\"3 2\\n1 2\\n2 3\\n3 1\") == \"1\\n2\\n1\\n2\\n2\\n1\"\nprint(\"Solution test passed\\n\")"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == '1\\n2\\n1\\n2\\n2'\n\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == '0\\n0\\n0\\n0\\n0'\n\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == '0\\n0\\n0\\n0\\n0'\n\nassert solution(\"7 8\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n7 5\\n7 6\") == '0\\n0\\n0\\n0\\n0'\n\nassert solution(\"7 8\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n7 5\\n7 6\\n8 1\\n8 2\\n8 3\") == '0\\n0\\n0\\n0\\n0'"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 3') == ''\nassert solution('1 2\\n2 3') == '1'\nassert solution('1 2\\n2 3\\n2 4') == '1'\nassert solution('1 2\\n2 3\\n3 4') == '1'\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2\\n2 3\") == \"1\\n2\\n1\\n2\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '1\\n2\\n1\\n2\\n2\\n1\\n0'\nassert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '0\\n0\\n1\\n2\\n1\\n0\\n0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\") == \"0\""
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10 2\\n0\\n15\\n30\\n45') == '5'\n\nprint(solution('4 10 2\\n0\\n15\\n30\\n45'))\n"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45''') == '5'\n\nassert solution('''4 10 3\n0\n15\n30\n45''') == '5'\n\nassert solution('''4 10 3\n0\n15\n30\n45''') == '5'\n\nassert solution('''2 10 3\n15\n0\n45\n''') == '10'\n\nassert solution('''2 10 3\n15\n0\n45\n''') == '10'"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 2\\n0\\n15\\n30\\n45\") == \"10\"\n\nassert solution(\"4 10 3\\n0\\n15\\n30\\n45\") == \"5\"\n\nassert solution(\"4 10 2\\n0\\n15\\n30\\n45\") == \"10\"\n\nassert solution(\"4 10 2\\n0\\n15\\n30\\n45\\n60\") == \"10\"\n\nassert solution(\"4 10 2\\n0\\n15\\n30\\n45\\n60\\n90\") == \"5\""
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10 3\\n0\\n15\\n30\\n45\") == \"5\"\nprint(solution(\"4 10 3\\n0\\n15\\n30\\n45\"))\n"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10 2\\n0\\n15\\n30\\n45') == '5'\nassert solution('4 10 3\\n0\\n15\\n30\\n45') == '10'\nassert solution('4 10 3\\n0\\n5\\n10\\n15\\n30\\n45') == '15'\n\"\"\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 2\\n0\\n15\\n30\\n45\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10 2\\n0\\n15\\n30\\n45\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10 2\\n0\\n15\\n30\\n45') == '10'\n\"\"\""
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 2\\n0\\n15\\n30\\n45\") == 10\nassert solution(\"4 10 3\\n0\\n15\\n30\\n45\") == 5\n\"\"\"\n\nimport sys\nimport json\n\nclass Solution:\n\n    def __init__(self):\n        self.result = 0\n\n    def solution(self, filepath: str) -> str:\n\n        with open(filepath, 'r') as file:\n            data = file.read()\n\n        file.close()\n        sys.stdin = data\n        solution = Solution()\n        self.result = solution.solution()\n        return self.result"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('./sample/input.txt').read()) == open('./sample/expected.txt').read()\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == '1'\n\"\"\"\n\nn, m = input().split()\nn, m = int(n), int(m)\na = list()\nfor i in range(m):\n    a.append(list(map(int, input().split())))\n\nresult = list()\nrank = list()\nfor i in range(1, n):\n    for j in range(m):\n        if a[j][0] <= a[j][i]:\n            a[j][1] += 1\n        elif a[j][0] > a[j][i]:\n            rank.append(i)\n            break\n    if len(rank) == m:\n        result.append(max(rank))\n        rank = list()\n        a[j][1] = 1\n\nprint(max(result))\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\\n\") == \"1\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\na = [0] + a\nb = [0] + b\na.sort()\nb.sort(reverse=True)\nc = 0\nfor i in range(1, m + 1):\n    c = c + a[i]\n    if b[i] <= c:\n        break\nprint(i)\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n25 25\\n\") == \"1\"\nassert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('0 10 20 30 40 50') == '2'\nassert solution('0 10 20 30 40 50 61') == '3'\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nassert solution('8 9') == '1'\nassert solution('11 5') == '2'\nassert solution('2 1') == '2'\nassert solution('4 3') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == '2'\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\\n\") == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == '2'\nassert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == '1'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = [line.strip() for line in open(sys.argv[1]).readlines()]\nn, m = list(map(int, lines[0].split()))\n\nstdout = sys.stdout\nsys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1)\n\nfor i in range(m):\n    points = list(map(int, lines[i+1].split()))\n    max_points = max(points)\n    for j in range(len(points)):\n        if points[j] == max_points:\n            points[j] += 1\n            break\n    print(max(map(lambda x: len(str(x)), points)))\n\nsys.stdout.flush()\nsys.stdout.close()\nsys.stdout = stdout\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\nprint(solution(\"4 2\\n50 50 75\\n25 25 25\\n\"))\n\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\\n\") == \"1\"\nprint(solution(\"5 2\\n50 50 50 50\\n25 25 25 25\\n\"))\n\nassert solution(\"5 2\\n50 50 50 50\\n50 50 50 50\\n\") == \"2\"\nprint(solution(\"5 2\\n50 50 50 50\\n50 50 50 50\\n\"))\n\nassert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\nprint(solution(\"4 2\\n50 50 75\\n25 25 25\\n\"))\n\nassert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\nprint(solution(\"4 2\\n50 50 75\\n25 25 25\\n\"))"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\\n\") == 2\nassert solution(\"4 4\\nX..\\n.X.\\nL.X\\n..L\\n\") == 1\nassert solution(\"4 4\\nLXX\\n.X..\\n....\\n.L..\\n\") == 1\nassert solution(\"4 4\\n.XXL\\n.X..\\n....\\n.L..\\n\") == 1\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == 0\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n.XLX\\n.X..\\n...L\\n.X..') == 2\n\nprint(solution(stdin.read()))\n-----\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n..X\\n....\\n.L.\\n..X\") == 1\nassert solution(\"4 4\\n.X.\\n....\\n.L.\\n..X\") == 2\n\"\"\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\\n\") == '1'\nassert solution(\"4 4\\n.LX.\\n.X..\\n...L\\n.X..\\n\") == '2'\n\"\"\"\n\nrows, cols = (int(x) for x in input().split())"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n.XLX\\n.X..\\n...L\\n.X..\") == 2\n\"\"\""
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\\n\") == \"1\"\nassert solution(\"4 4\\n.XLX\\n.X..\\n...L\\n.X..\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n.XLX\n.X..\n...L\n.X..''') == 2\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".XLX\\n.X..\\n...L\\n.X..\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n.XLX\\n.X..\\n...L\\n.X..\") == 2\nprint(solution(\"4 4\\n.XLX\\n.X..\\n...L\\n.X..\"))\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n.XLX\\n.X..\\n...L\\n.X..\") == 2\n\nassert solution(\"4 4\\n.XLX\\n.X..\\n...L\\n.X..\\nX..X\") == 3\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\"\"\""
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"detention\"\n\"\"\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"detention\"\n\"\"\""
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\"\"\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\\n2\\n2 0 1\\n2 2 3\"\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict\n\nsys.stdin = open(\"problem037.txt\")\n\nN, p, q = map(int, input().split())\n\nfriends = defaultdict(list)\n\nfor i in range(N):\n    m = int(input())\n    for _ in range(m):\n        friends[i].append(int(input()))\n\npeople = set(range(N))\n\nfriends_counter = Counter()\nfor k, v in friends.items():\n    friends_counter += Counter(v)\n\ngroup = 0\nwhile people:\n    group += 1\n    in_group = set()\n    others = set()\n    for i in people:\n        friends_num = friends_counter[i]\n        if friends_num < p or friends_num > q + 1:\n            others.add(i)\n        elif friends_num == p + 1:\n            others.add(i)\n            in_group.add(i)\n        else:\n            in_group.add(i)\n\n    for i in in_group:\n        people.remove(i)\n    for i in others:\n        friends_counter.pop(i)\n    if people:\n        for i in in_group:\n            friends_counter[i] -= 1\n        for i in others:\n            friends_counter[i] -= 1\n\n\nprint(\"detention\" if people else \"home\")\nprint(group)\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\nassert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\"\"\""
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\n\"\"\""
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\nassert solution('abccb') == 'abccb'\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-1\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n\"\"\""
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"zzzz\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"zzzz\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-1\"\nassert solution(\"bacdba\") == \"babdcba\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"abcdba\") == \"abdcba\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s=\"tralalal\") == \"allatral\"\nassert solution(s=\"zzzz\") == -1\nassert solution(s=\"zzzz\") == \"zzzz\"\nassert solution(s=\"zzzz\") == \"zzzz\"\nassert solution(s=\"tralalal\") == \"allatral\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"6\\n3 2 1 6 4 5\") == \"8\""
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"6\\n3 2 1 6 4 5\") == \"8\"\nassert solution(\"4\\n1 2 3 4\") == \"0\""
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5\\n5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5\\n3 2 1 6 4 5\") == \"8\"\nassert solution(\"6\\n3 2 1 6 4 5\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\n\"\"\"\n\nn = int(input())\narr = [int(s) for s in input().split(' ')]\n\nmed = (n + 1) // 2\n\nscary = 0\nleft = 0\n\nfor i in range(med):\n    scary += arr[i] < arr[i + 1]\n    left += arr[i] < arr[i + 1]\n\nscary += arr[med] < arr[med + 1]\nleft += arr[med] < arr[med + 1]\n\nprint(left + scary)\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\nassert solution('3\\n2 1 6 4') == '0'\n\nimport unittest\nimport sys\nimport io\nimport tempfile\nimport numpy as np\nimport numpy.testing\nimport random\nimport time\nimport statistics"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\n\n----"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"6\\n3 2 1 6 4 5\") == \"8\"\n\nprint(solution(\"5\\n1 2 3 4 5\"))\nprint(solution(\"6\\n3 2 1 6 4 5\"))\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\nassert solution(\"1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'\nassert solution('10000') == '2'\n\"\"\""
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n\"\"\""
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''47''') == 1\n\n'''\n![(2w-1)^2 + (2h-1)^2 = (w+h-3)^2](../images/pack_one.png)\n\n![2*(2h-1)+(2w-1) = (w+h-3)](../images/pack_two.png)\n\nw, h = map(int, stdin.split())\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'\n\"\"\""
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20''') == '0'\nassert solution('''4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20''') == '1'\nassert solution('''4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20''') == '1'\nassert solution('''4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20''') == '1'\nassert solution('''4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n0 1 30\n1 2 30\n0 3 30\n3 2 30\n2 0 20''') == '0'\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\"\n\"\"\""
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '0\\n1 1 5'\nassert solution('2 2\\n0 1 20\\n1 0 5') == '1\\n0 1 15'\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == '0'\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\"\nassert solution(\"4 2\\n0 1 20\\n1 0 5\") == \"1\"\nassert solution(\"4 2\\n0 1 10\\n0 0 10\") == \"0\"\nassert solution(\"6 5\\n0 1 5\\n1 0 10\\n0 2 10\\n2 0 10\\n1 3 10\\n3 0 10\") == \"0\"\nassert solution(\"6 6\\n0 0 1\\n0 1 10\\n1 0 10\\n0 2 10\\n2 0 10\\n1 3 10\\n3 0 10\\n1 1 10\\n3 1 10\\n2 2 10\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\n    def DFSUtil(self, v, visited):\n        visited.add(v)\n        for neighbor in self.graph[v]:\n            if neighbor not in visited:\n                self.DFSUtil(neighbor, visited)\n\n    def DFS(self):\n        visited = set()\n        for vertex in self.graph:\n            if vertex not in visited:\n                self.DFSUtil(vertex, visited)\n\n\nclass Solution:\n    def solve(self, edges, n):\n        graph = Graph()\n\n        for u, v, w in edges:\n            graph.addEdge(u, v)\n            graph.addEdge(v, u)\n\n        graph.DFS()\n\n        return [u for u in graph.graph if len(graph.graph[u]) % 2 == 1]\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '0'\nassert solution('2 2\\n0 1 20\\n1 0 5') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\\n1 1 5\\n\"\nassert solution(\"2 2\\n0 1 20\\n1 0 5\") == \"1\\n0 1 15\\n\"\n\"\"\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == '0'\n\nprint(solution(stdin))\n\n'''\n\nfrom itertools import combinations, chain\nfrom collections import defaultdict\nfrom functools import reduce"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == '0'\nassert solution(\"0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == '1'\nassert solution(\"0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == '1'\n\"\"\"\n\nimport unittest\nimport sys\nimport collections"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2\\n') == ''\nassert solution('2\\n1\\n') == ''\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5') == '5'\nassert solution('4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4') == '1'\n\n\"\"\"\n\nimport math\nimport sys\nsys.setrecursionlimit(1 << 20)\nINF = float('inf')\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n') == '1'\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = [int(x) for x in stdin.split()]\n        h = [int(x) for x in stdin.split('\\n')[:-1]]\n        r = [tuple(int(x) for x in line.split()) for line in sys.stdin.read().split('\\n')[:-1]]\n        h.append(0)\n        r.append((n, 0))\n        l = len(r)\n        dp = [[0 for _ in range(l)] for _ in range(l)]\n        for i, j in combinations(range(l), 2):\n            dp[i][j] = dp[j][i] = max(dp[i][j], h[j] - h[i], h[i] - h[j], r[i][0] + r[j][1] - r[i][1] - r[j][0])\n\n        visited = [False for _ in range(l)]\n        result = 0\n        current = l - 1\n        visited[current] = True\n        while not all(visited):\n            i = current\n            j = -1\n            while not visited[i]:\n                j = i\n                i = r[i][1]\n            while not visited[i]:\n                j = i\n                i = r[i][0]\n            result += dp[i][j]\n            current = i\n            visited[current] = True\n\n        return str(result)\n\nassert Solution().solution('4 3\\n1 2\\n2 3\\n3 4\\n') == '1'\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n') == '1'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1500)\n\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\") == '1'\nassert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"5\"\nassert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom collections import deque\nfrom itertools import combinations, permutations\nfrom functools import lru_cache\nfrom math import factorial\n\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                             os.path.pardir))\nfrom multiset import Multiset\n\nstart_time = time.time()\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"5\"\n\"\"\"\n\nimport sys\n\nfibs = {1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13, 8: 21, 9: 34, 10: 55}\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\\n\") == \"5\"\nassert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n\") == \"1\""
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"5\"\nassert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\") == \"1\"\n\"\"\"\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        houses, roads = map(int, input.split())\n        heights = list(map(int, input.split()))\n        graph = {i: {} for i in range(1, houses+1)}\n        for house in range(1, houses+1):\n            for road in range(1, roads+1):\n                if house!= roads and heights[house-1] > heights[road-1]:\n                    if roads not in graph[house]:\n                        graph[house][roads] = 1\n                    else:\n                        graph[house][roads] += 1\n                    if road not in graph[roads]:\n                        graph[roads][house] = 1\n                    else:\n                        graph[roads][house] += 1\n        if houses == roads:\n            return str(heights.index(1))\n        visited = set()\n        stack = [houses]\n        while stack:\n            current = stack.pop()\n            if current not in visited:\n                visited.add(current)\n                for neighbor in graph[current]:\n                    if neighbor not in visited:\n                        stack.append(neighbor)\n        return str(len(visited)-1)\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\\n\") == \"5\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('020302') == 7\nassert solution('1311') == 24\n\"\"\""
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('020302') == 7\nassert solution('1311') == 24\n\"\"\""
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('020302') == 7\nassert solution('1311') == 24\n\"\"\""
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"020302\") == \"7\"\nassert solution(\"1311\") == \"24\"\n\"\"\""
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution( \"203022\" ) == 6\nassert solution( \"10011\" ) == 2\nassert solution( \"0111\" ) == 2\nassert solution( \"0\" ) == 0\nassert solution( \"200100\" ) == 4\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('020302') == 7\nassert solution('1311') == 24\n\"\"\""
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"020302\") == \"7\"\nassert solution(\"1311\") == \"24\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('11') == '11'\nassert solution('10111') == '11'\nassert solution('1111') == '11'\nassert solution('10001') == '1'\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"020302\") == 7\nassert solution(\"1311\") == 24"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.#.##.\\n###########.###...#.\\n\") == \"1 15 5 15\"\n\n\"\"\""
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.\\n###########.###...#.\\nSample Output 2:1 15 5 15\") == \"1 15 5 15\"\n\"\"\"\n\n\"\"\"\nGiven:\n2 2\n.##\n..#\nOutput:\n0 2\n\"\"\"\n\n\"\"\"\nGiven:\n3 4\n#####\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########') == '3 1 3 10'\n\nassert solution('5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.\\n###########.###...#.\\nSample Output 2:') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\\n\") == \"3 1 3 10\"\n\"\"\""
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.\\n###########.###...#.\\n\") == \"1 15 5 15\"\n\n\"\"\"\n\n\n\"\"\"\n[Ideas]\n1. for 1st line, find the row number\n2. for 2nd line, find the col number\n\ncorner points of the rectangle\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.#.##.\\n###########.###...#.\\n\") == \"1 15 5 15\"\n\nSample Input 3:\n8 10\n....#######\n.....#....\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\"\"\"\n\nimport math\n\ninput_p = input()\n\np = float(input_p.split(\" \")[0])\nn = int(input_p.split(\" \")[1])\n\ncurrent = 100\n\nfor _ in range(n):\n    current *= (1 - p)\n\nprint(current)"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\n\"\"\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50 0.125\") == '16.339203308'\nassert solution(\"201 1.000\") == '5.000000000'\n\"\"\"\n\nimport math\n\nn, p = [float(e) for e in input().split(' ')]\n\np = p * 100\n\nans = 0\n\nwhile p < 1:\n    ans += p\n    p = math.ceil(p * n)\n\nprint(ans)\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('50 0.125\\n201 1.000') == '16.339203308'\n\"\"\"\n\nfrom math import log10\nimport numpy as np\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''50 0.125''') == '16.339203308'\nassert solution('''201 1.000''') == '5.000000000'\n\"\"\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\n\"\"\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('50 0.125') == '16.3391'\nassert solution('201 1.000') == '5.000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n\"\"\"\n\nimport math\nimport sys\nfrom typing import Dict, List, Optional, Set, Tuple\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\n\"\"\"\n\nimport math\nimport decimal\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n0.5 1\\n0.4 1\") == \"3\""
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0.5 1\\n0.4 1\") == 3\n\"\"\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n0.5 1\\n1 0\") == \"3\"\nassert solution(\"2 3\\n0.5 1\\n1 0\") == \"3\"\n\"\"\""
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n0.5 1\\n0.6 0\") == \"3\"\nassert solution(\"4 3\\n0.4 1\\n0.3 1\\n0.5 1\\n0.1 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n0.4 1\\n0.1 1\") == \"3\"\n\n\"\"\"\n\nimport numpy as np\nfrom decimal import Decimal"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n0.5 1\\n0.4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n0.5 1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n0.5 1\\n\") == \"2\"\nassert solution(\"4 3\\n1 11\\n0.4 1\\n\") == \"3\"\n\"\"\"\n\na, b = map(int, input().split())\nvotes = [tuple(map(float, input().split())) for _ in range(a - 1)]\n\ncnt = 0\nfor p, b in votes:\n    cnt += b if p >= 0.5 else 0\n\nprint(int(cnt))\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n0.4 1\\n0.5 1\") == \"2\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n0.5 1\\n') == '2'\nassert solution('4 3\\n1 11\\n0.4 1\\n') == '3'"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3') == '-1'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 1\\n3 2\\n10 0\") == \"10.5\"\nassert solution(\"3\\n2 1\\n4 0\\n0 3\") == \"-1\"\nassert solution(\"3\\n4 3\\n4 0\\n0 3\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n7 1\n3 2\n10 0''') == '10.5'\n\nassert solution('''3\n2 1\n4 0\n0 3''') == '-1'\n\nassert solution('''1\n2 1\n2 0\n0 1''') == '1'\n\nassert solution('''5\n10 10\n2 2\n0 1\n0 0\n2 0''') == '1'\n\nassert solution('''2\n5 10\n0 1\n0 0\n1 1\n2 5\n''') == '1'"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 1\\n3 2\\n10 0\") == \"10.5\"\nassert solution(\"3\\n2 1\\n4 0\\n0 3\") == \"-1\"\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 1\\n3 2\\n10 0\") == \"10.5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n7 1\n3 2\n10 0''') == '10.5'\nassert solution('''3\n2 1\n4 0\n0 3''') == '-1'\nassert solution('''4\n7 2\n5 1\n2 0\n0 1''') == '7.0'\nassert solution('''5\n9 1\n0 1\n9 2\n4 1\n1 2\n1 1\n0 2\n2 2\n1 0\n0 1\n1 3\n9 2\n3 2\n0 2\n1 1\n8 0\n0 3\n0 1\n4 0\n2 2\n5 1\n1 2\n0 1\n0 1\n2 2\n9 1\n9 2\n4 1\n1 2\n0 1\n0 3\n2 2\n9 1\n0 1\n0 2\n1 1\n8 1\n9 1\n0 1\n0 1\n0 1\n0 1\n0 2\n2 1\n9 1\n0 2\n1 1\n8 0\n4 0\n0 3\n0 1\n0 1\n5 1\n0 1\n0 1\n0 2\n0 1\n8 0\n2 2\n9 1\n0 1\n0 3\n9 1\n0 2\n0 1\n0 1\n5 1\n0 1\n0 1\n0 2\n2 2\n0 1\n0 1\n0 1\n8 0\n0 2\n0 2\n0 1\n5 1\n9 1\n0 2\n0 1\n0 3\n0 1\n2 1\n9 1\n0 1\n0 1\n1 2\n9 2\n0 1\n0 3\n1 3\n2 2\n9 2\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n8 0\n5 1\n0 1\n2 2\n0 1\n9 1\n0 1\n0 1\n0 1\n0 1\n0 2\n1 2\n0 2\n0 1\n0 2\n0 2\n8 0\n5 1\n9 2\n2 1\n0 1\n0 1\n0 3\n0 1\n2 2\n0 1\n0 2\n0 1\n0 1\n0 2\n0 1\n0 1\n0 1\n0 2\n0 1\n0 2\n0 2\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n9 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 2\n0 1\n0 1\n0 2\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n9 1\n2 2\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n9 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n9 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5 2\\n7 0\\n\") == \"10.5\"\nprint(\"OK\")\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1\\n3 2\\n10 0\") == \"10.5\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0\\n') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3\\n') == '-1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ntotal = 0\nfor i in range(n):\n    total += a[i] * b[i]\n\nprint(-1 if total == 0 else total)\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == '2'\nprint(solution(\"2 0.5\\n2 0.51\\n1 0.49\"))\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == '2'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49\\n') == '2'\nprint('Test passed')\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 0.5') == '1'\n'''\n\nimport sys\nfrom math import sqrt\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\""
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('4 0.99\\n4 0.01\\n3 0.99\\n3 0.01') == '0'\nassert solution('4 0.99\\n4 0.01\\n3 0.01\\n3 0.99') == '2'\n\"\"\""
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\n\"\"\"\n\nimport sys\nfrom itertools import combinations\nfrom math import ceil"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n') == 'yes'\nassert solution('4 5 3\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'no'\n\nimport unittest\nclass TestDay9(unittest.TestCase):\n\n    def test_part1_ex1(self):\n        pass\n        \n    def test_part1_ex2(self):\n        pass\n        \n    def test_part1_ex3(self):\n        pass\n\n    def test_part1_ex4(self):\n        pass\n\n    def test_part1_ex5(self):\n        pass\n\n    def test_part2_ex1(self):\n        pass\n\n    def test_part2_ex2(self):\n        pass\n\n    def test_part2_ex3(self):\n        pass\n\n    def test_part2_ex4(self):\n        pass\n\n    def test_part2_ex5(self):\n        pass"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\"\n) == \"yes\"\n\nassert solution(\n    \"5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n\"\n) == \"yes\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Dict\n\nfrom.dijkstra import dijkstra\n"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n') == 'yes'\nassert solution('5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'yes'\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\") == 'yes'\nassert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\") == 'no'\nassert solution(\"6 6 5\\n1 1 2 2 2 2\\n0 1\\n0 2\\n1 3\\n2 4\\n2 5\\n\") == 'yes'\nassert solution(\"6 6 5\\n1 1 2 2 2 2\\n0 1\\n0 2\\n1 3\\n2 4\\n2 5\\n\") == 'no'\nassert solution(\"10 4 2\\n3 3 4 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n2 4\\n3 4\\n4 5\\n\") == 'yes'\n"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\") == 'yes'\nassert solution(\"5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n\") == 'yes'\n\"\"\""
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n2 2\\n3 4\") == \"yes\"\n\n\"\"\"\n\nfrom sys import stdin\n\nN, M, K = list(map(int, stdin.readline().split()))\nconnections = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\") == \"yes\"\n\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\nconnections = list(map(int, input().split()))"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3') == 'yes'\nassert solution('4 5 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2') == 'yes'\nassert solution('5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2') == 'no'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\") == \"yes\"\nassert solution(\"5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n\") == \"yes\"\n\n\"\"\"\n\nimport sys\nimport re\n\nstdin = sys.stdin.read()\n\nn, m, k = [int(i) for i in re.findall(r'\\d+', stdin)]\nconnections = sorted([[int(i) for i in re.findall(r'\\d+', line)] for line in stdin.split('\\n')[1:n+1]])"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\") == \"yes\"\nassert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\") == \"no\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n5\\n5\\n') == '2\\n1\\n2\\n'\nassert solution('4\\n20\\n15\\n17\\n14\\n') == '5\\n8\\n2\\n7\\n'\nassert solution('3\\n1\\n2\\n') == '0\\n1\\n2\\n'\nassert solution('5\\n20\\n15\\n17\\n14\\n') == '8\\n2\\n7\\n'\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\\n\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\\n8\\n2\\n7\\n\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n5\n5\n5''') == '''2\n1\n2\n'''\n\nassert solution('''4\n20\n15\n17\n14''') == '''5\n8\n2\n7\n'''\n\nassert solution('''5\n7\n4\n4\n6\n4\n''') == '''2\n1\n2\n'''\n\nassert solution('''8\n36\n17\n30\n2\n44\n45\n23\n14\n26\n''') == '''5\n8\n2\n7\n'''\n\nassert solution('''4\n1\n1\n1\n1\n''') == '''1\n1\n1\n'''"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\\n\"\n\"\"\""
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n20\\n15\\n17\\n14\") == '2\\n1\\n2\\n7'\nassert solution(\"3\\n5\\n5\\n5\") == '1\\n2\\n3'\nassert solution(\"4\\n20\\n15\\n17\\n14\") == '5\\n8\\n2\\n7'\n\nassert solution(\"5\\n5\\n5\\n5\") == '1\\n2\\n3\\n4'\nassert solution(\"5\\n15\\n17\\n14\\n20\") == '5\\n8\\n2\\n7'"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n5\\n5\\n') == '2\\n1\\n2\\n'\n\"\"\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == '2'\n\"\"\"\n\n\"\"\"\nimport io\nimport sys\nsys.stdin = io.StringIO(\"\"\"3\n5\n5\n5\n\"\"\")\n\"\"\"\n\nN = int(input())\n\nfor i in range(N):\n    n = int(input())\n    print(n - 1)"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n5\\n5\\n5\\n') == '2\\n1\\n2\\n'\nassert solution('4\\n20\\n15\\n17\\n14\\n') == '5\\n8\\n2\\n7\\n'\nassert solution('3\\n5\\n7\\n5\\n') == '2\\n1\\n2\\n'\n\n\"\"\""
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n5\\n5\\n\") == '2\\n1\\n2\\n'\nassert solution(\"4\\n20\\n15\\n17\\n14\\n\") == '5\\n8\\n2\\n7\\n'\n\"\"\"\n\nn = int(input())\n\nring = []\n\nfor _ in range(n):\n    ring.append(int(input()))"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\np^ main.py\\n^ -n 10\\n\") == \"python main.py -n 10\"\nassert solution(\"5\\np^ main.py\\n^ -n 10\\n\") == \"python main.py -n 10\"\n\nimport re\nfrom collections import Counter"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\npython\\n^\\n^\\npython\\njava\\n^\\n^\\n^') == 'python\\npython main.py\\npython main.py -n 10'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('python\\n main.py\\n ^\\n^^^\\n^^^') == 'python\\n python main.py\\n python main.py'\nassert solution('python\\n java\\n ^\\n^^^\\n^^^') == 'python\\n java\\n java\\n python'\nassert solution('python\\n main.py\\n ^\\n^^^\\n^^^') == 'python\\n main.py\\n main.py'\nassert solution('python\\n java\\n ^\\n^^^\\n^^^') == 'python\\n java\\n java\\n python'\nassert solution('python\\n main.py\\n ^\\n^^^\\n^^^') == 'python\\n main.py\\n main.py\\n python'\n\n\"\"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\npython\\np^ main.py\\n^ -n 10\") == \"python\\npython main.py\\npython main.py -n 10\"\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\") == \"python\\njava\\njava\\npython\\njava\"\n\"\"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\npython\\n p^ main.py\\n^ -n 10\\n\") == \"python\\n python main.py\\n python main.py -n 10\\n\"\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\\n\") == \"python\\njava\\njava\\npython\\njava\\n\"\n\"\"\"\nimport re\nfrom typing import Optional, Tuple, List\nfrom itertools import accumulate"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\npython\\n p^ main.py\\n^ -n 10\") == \"python\\npython main.py\\npython main.py -n 10\"\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\") == \"python\\njava\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\njava\\njava\\njava\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\npython\\"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1\npython\njava\n^\n^^^\n^^^\"\"\") == \"\"\"python\npython\npython main.py\npython main.py -n 10\n\"\"\"\nassert solution(\"\"\"2\npython\njava\n^\n^^^\n^^^\"\"\") == \"\"\"python\njava\njava\npython\njava\npython main.py\npython main.py -n 10\n\"\"\"\nassert solution(\"\"\"3\npython\njava\n^\n^^^\n^^^\"\"\") == \"\"\"python\njava\njava\npython\npython main.py\npython main.py -n 10\n\"\"\"\nassert solution(\"\"\"4\npython\njava\n^\n^^^\n^^^\"\"\") == \"\"\"python\njava\njava\npython\npython main.py\npython main.py -n 10\n\"\"\"\nassert solution(\"\"\"5\npython\njava\n^\n^^^\n^^^\"\"\") == \"\"\"python\njava\njava\npython\npython main.py\npython main.py -n 10\n\"\"\"\n\"\"\"\nInput:\n4\npython\njava\n^\n^^^\n^^^\n\nOutput:\npython\npython\npython\npython\npython main.py\npython main.py -n 10\n\"\"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\npython\\n^\\n^^^\\n^^^\") == \"python\"\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\") == \"java\"\n\"\"\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\nprint(\"Success\")\n\nSOLUTION:"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\n\"\"\"\nimport sys\nimport random\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne', 5) == 'this sentence makes perfect sense'\nassert solution('hitehre', 2) == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\nassert solution('hello') == 'ambiguous'\n\"\"\""
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\n\"\"\""
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\n\"\"\""
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\nfor i in range(int(stdin)):\n    print(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('3 2') == '64'\nassert solution('4 2') == '256'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2') == 4\nassert solution('2 2') == 16\n\"\"\"\n\nfrom itertools import product\nfrom collections import Counter\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 16\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n2 2\") == 16\nassert solution(\"3 3\\n3 3\") == 36\nassert solution(\"2 2\\n2 2\") == 4\nassert solution(\"1 1\\n1 1\") == 1\n\"\"\""
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 2\n''') == 4\nassert solution('''1 2\n''') == 16\n'''"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 2') == 16\nprint(solution(input()))\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n\") == 4\n\"\"\"\n\nn, m = input().split()\n\nn = int(n)\nm = int(m)\n\nnums = []\nfor _ in range(n):\n    nums.append(m)\n\nans = 0\nfor i in range(n - 1):\n    if i % 2 == 0:\n        for j in range(m - 1):\n            ans += 1\n    else:\n        for j in range(m - 1):\n            ans += 2\n        for j in range(m - 1):\n            ans += 1\n\nprint(ans % 1000000007)"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 2') == 16\nassert solution('2 2\\n2 2') == 16\n\"\"\""
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n\"\"\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n2 2') == '16'\nprint(solution('1 2\\n2 2'))\n\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcbab\") == 2"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcbab', 2, 'cb') == 2\nassert solution('abcbab', 2, 'cb') == 2\nassert solution('abcbab', 2, 'cb') == 2\nassert solution('abcbab', 2, 'cb') == 2\nassert solution('abcbab', 2, 'cb') == 2\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcbab', 2, 'cb', 'cbab') == 2\nassert solution('abcbab', 2, 'cb', 'cbab') == 2\nassert solution('abcbab', 2, 'cb', 'cbab') == 2\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcbab\") == 2\nassert solution(\"abcbab\") == 2\n\nassert solution(\"abcbab\") == 2\nassert solution(\"abcbab\") == 2\n\nassert solution(\"abcbab\") == 2\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\nabcbab\\n2\\ncb\\ncbab') == 2\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcbab\") == 2\nassert solution(\"cbab\") == 4\n\nprint(solution(stdin))"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcbab\") == 2\n\"\"\""
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n\"\"\"\n\nfrom typing import Dict, List, Set\n\nfrom collections import defaultdict"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcbab\") == 2\n\n\"\"\"\n\nn = int(input())\ns = input()\nm = int(input())\n\nans = 0\n\nfor i in range(m):\n    l = int(input())\n    for j in range(n - l + 1):\n        t = s[j:j+l]\n        if t == t[::-1]:\n            ans += 1\n\nprint(ans)"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\n\nfrom decimal import *\nimport math\n\ngetcontext().prec = 10"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"110 10\\n80 10\\n80 0\\n110 0\") == \"6\\n85\\n90\\n95\\n100\\n105\"\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\") == \"4\\n17.071067\\n20\\n22.928932\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == \"6\\n85\\n90\\n95\\n100\\n105\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('50\\n4\\n110 10\\n80 10\\n80 0\\n110 0') == '6\\n85\\n90\\n95\\n100\\n105'\nassert solution('24\\n3\\n10 10\\n30 10\\n20 20') == '4\\n17.071067\\n20\\n22.928932'\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100\\n4\\n110 10\\n80 10\\n80 0\\n110 0') == '6\\n85\\n90\\n95\\n100\\n105'\n\nassert solution('14\\n4\\n110 10\\n80 10\\n80 0\\n110 0') == '4\\n17.071067\\n20\\n22.928932\\n24'\n\"\"\"\nimport sys"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50\\n4\\n110 10\\n80 10\\n80 0\\n110 0') == '6\\n85\\n90\\n95\\n100\\n105'\n\n\"\"\""
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6\\n85\\n90\\n95\\n100\\n105'\n\nassert solution('''\n24\n3\n10 10\n30 10\n20 20\n''') == '4\\n17.071067\\n20\\n22.928932'\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == '6\\n85\\n90\\n95\\n100\\n105'\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\") == '4\\n17.071067\\n20\\n22.928932'\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\nassert solution('10 10') == 'no'\n\"\"\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\nassert solution('1000 11') == 'no'\nassert solution('1000 7') == 'no'\n\n\"\"\""
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"10 11 12\") == \"no\"\nassert solution(\"10 7 8\") == \"no\"\nassert solution(\"10 7 9\") == \"no\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 11\\n') == 'yes'\nassert solution('10 7\\n') == 'yes'\nassert solution('1 1\\n') == 'no'\nassert solution('2 17\\n') == 'no'\nassert solution('2 7\\n') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\n\n\"\"\""
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n\") == \"yes\"\nassert solution(\"10 7\\n\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 11\\n\") == \"yes\"\nassert solution(\"10 7\\n\") == \"yes\"\nassert solution(\"11 7\\n\") == \"no\"\n\"\"\""
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_result, \"Assert failed\"\n\"\"\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == \"3\\n1 6\\n2 5\\n3 4\\n\"\nassert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\\n\") == \"3\\n10 60\\n30 50\\n30 40\\n\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == 3\nassert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == 3"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(samples.input_1) == samples.output_1\nassert solution(samples.input_2) == samples.output_2"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == \"3\\n1 6\\n2 5\"\n\"\"\""
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\\n\") == \"3\\n1 6\\n2 5\\n3 4\\n\"\nassert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\\n\") == \"3\\n10 60\\n30 50\\n30 40\\n\"\n\n\"\"\"\nimport sys\nfrom typing import List, Tuple"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3 4\\n2 5\\n1 6\\n') == '3\\n1 6\\n2 5\\n3 4'\n\"\"\""
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 4\\n2 5\\n1 6\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n1 6\\n2 5\\n3 4'\nassert solution('3\\n4 4\\n1 6\\n2 5') == '2\\n1 6\\n2 5'\nassert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n10 60\\n30 50\\n30 40'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n3 4\n2 5\n1 6''') == '3\\n1 6\\n2 5\\n3 4'\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3\\n10 60\\n30 50\\n30 40'\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3\\n10 60\\n30 50\\n30 40'\nassert solution('''5\n3 4\n2 5\n1 6''') == '3\\n1 6\\n2 5\\n3 4'\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3\\n10 60\\n30 50\\n30 40'\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == \"3\\n1 6\\n2 5\"\nassert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == \"3\\n10 60\\n30 50\\n30 40\"\n\"\"\"\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == \"3\\n10 60\\n30 50\\n30 40\"\nassert solution(\"6\\n3 4\\n2 5\\n1 6\") == \"3\\n1 6\\n2 5\"\n\"\"\"\n\nnumber_of_intervals = int(stdin.readline())\nintervals = {}\nfor i in range(number_of_intervals):\n    interval = stdin.readline().split(\" \")\n    interval_length = int(interval[1]) - int(interval[0])\n    interval_hash = hash(str(interval))\n    if interval_hash in intervals.keys():\n        intervals[interval_hash].append(interval_length)\n    else:\n        intervals[interval_hash] = [interval_length]\n\nlongest_interval_number = max([len(interval) for interval in intervals.values()])\nprint(longest_interval_number)\nfor interval in intervals.values():\n    if len(interval) == longest_interval_number:\n        for i in interval:\n            print(i, end=\" \")"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\n\n\"\"\"\nGiven a list of card types and the number of types of envelopes you can buy, what is the smallest amount of wasted paper you can achieve?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of the input will consist of two space-separated integers $n$ and $k$ ($1 \\le n,k \\le 15$), where $n$ is the number of different types of cards, and $k$ is the maximum number of types of envelopes you can order. Each of the following $n$ lines will consist of three integers, describing a type of card. The integers are $w$, $h$ and $q$ ($1 \\le w,h,q \\le 10000$), where $w$ is the width of the cards of this type, $h$ is the height of the cards, and $q$ is the quantity of cards of this type.\n\n-----Output-----\nOutput a single integer, representing the smallest possible total amount of wasted paper.\n\n-----Examples-----\nSample Input 1:\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\nSample Output 1:\n5836\n\nSample Input 2:\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\nSample Output 2:\n1828\n\"\"\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\"\"\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 1828\n\"\"\"\n\nimport sys\nimport itertools\nfrom math import gcd\nfrom collections import defaultdict"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == 5836\nassert solution('10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == 1828\n\"\"\""
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\ncases = int(sys.argv[1])\n\nfor case_i in range(cases):\n    n, k = map(int, input().split())\n    cards = []\n    for _ in range(n):\n        w, h, q = map(int, input().split())\n        cards.append((w, h, q))\n\n    cards.sort(key=lambda card: card[2])\n\n    areas = []\n    for i in range(n):\n        w, h, q = cards[i]\n        area = w * h\n        if i < n - 1:\n            for j in range(i + 1, n):\n                if cards[j][2] > cards[i][2]:\n                    break\n                else:\n                    area += cards[j][2]\n        areas.append(area)\n\n    k_cards = cards[:k]\n    print(sum(max(areas[:k]) - card[2] for card in k_cards))\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\n-----------------------\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\"\"\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == 5836\n\"\"\"\nimport os\nimport io\nimport unittest\n\n\nclass TestDay3(unittest.TestCase):\n    def test_sample_1(self):\n        self.assertEqual(\n            solution(\n                stdin=io.StringIO('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16')),\n            5836)\n\n    def test_sample_2(self):\n        self.assertEqual(\n            solution(\n                stdin=io.StringIO('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16')),\n            1828)\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == '5836'\n\"\"\"\n\nimport sys\nfrom math import gcd\nfrom collections import defaultdict"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n7 3 0 0\\n5 1 0 0\\n8 0 0 0') == '7'\nassert solution('3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200') == 'impossible'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\nassert solution(\"3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200\") == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 2401 3299 0\n6 2401 2399 0\n2 750 750 99''') == '50'\nassert solution('''7 100 200 200\n8 100 300 200\n9 100 400 200''') == 'impossible'\nassert solution('''7 100 200 200\n8 100 300 200\n9 100 400 200\n7 10000 100000 100\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(text) == answer\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n\"\"\"\n) == '50'\nassert solution(\n\"\"\"\n7 100 200 200\n8 100 300 200\n9 100 400 200\n\"\"\"\n) == 'impossible'\nassert solution(\n\"\"\"\n2 50 50 100\n2 50 50 100\n2 50 50 100\n\"\"\"\n) == 'impossible'\nassert solution(\n\"\"\"\n7 100 200 200\n8 100 300 200\n9 100 400 200\n\"\"\"\n) == '10'\nassert solution(\n\"\"\"\n7 100 200 200\n8 100 300 200\n9 100 400 200\n\"\"\"\n) == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('7 100 200 200\\n8 100 300 200\\n9 100 400 200') == '50'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n7 100 200\\n8 100 300 200\") == \"impossible\"\nassert solution(\"3\\n7 100 200\\n8 100 300 200\\n9 100 400 200\") == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\n\n\"\"\"\nimport sys\nfrom typing import List, Tuple"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\nassert solution(\"7 100 200 200\\n8 100 300 200\\n9 100 400 200\") == \"impossible\""
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\nassert solution('4') == '0 0 0 0 1'\nassert solution('0.5') == '0 1 0 0 0'\n\nprint(solution(stdin))"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\n\"\"\"\nimport numpy as np\nimport sys\n\np = sys.stdin.readline()\np = np.float64(p)\n\nones = 0\ntwos = 0\nthrees = 0\nfours = 0\nfives = 0\nfor line in sys.stdin:\n    value = line.split()\n    value = np.float64(value)\n    ones = ones + 1 if value[0] == p else ones\n    twos = twos + 1 if value[1] == p else twos\n    threes = threes + 1 if value[2] == p else threes\n    fours = fours + 1 if value[3] == p else fours\n    fives = fives + 1 if value[4] == p else fives\nprint(ones, twos, threes, fours, fives)\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4.5') == '0 0 0 1 1'\nassert solution('5.0') == '0 0 0 0 1'\n\"\"\"\nimport math\n\nP = input()\n\nt = int(P)\n\nprint('0', '0', '0', '1', '1')\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\"\"\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4.5''') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\n\"\"\"\n\nimport sys\n\nP = float(sys.stdin.readline())\nnumbers = [1, 2, 3, 4, 5]\n\nprint(sum(sum(numbers) for numbers in map(lambda n: [n, n, n, n, n], numbers)) == P)\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5.0\") == '0 0 0 0 1'\nassert solution(\"4.5\") == '0 0 0 1 1'\n\"\"\""
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\"\"\"\n\np = float(input())\n\ncount_1 = 0\ncount_2 = 0\ncount_3 = 0\ncount_4 = 0\ncount_5 = 0\n\nwhile p > 0:\n    if p >= 5:\n        count_5 += 1\n        p -= 5\n    elif p >= 4:\n        count_4 += 1\n        p -= 4\n    elif p >= 3:\n        count_3 += 1\n        p -= 3\n    elif p >= 2:\n        count_2 += 1\n        p -= 2\n    elif p >= 1:\n        count_1 += 1\n        p -= 1\n\nprint(count_1, count_2, count_3, count_4, count_5)"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\nprint(\"Success\")\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'\n\"\"\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 2 1\\n1 5 6 8 9\\n') == '6'\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\", \"First\"\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == \"3\", \"Second\"\nprint('The local tests are done. Click on \"Check\" for more details about in-depth tests')"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\n\"\"\"\n\nn, d, m = [int(n) for n in input().split()]\narray = [int(n) for n in input().split()]\n\nlast = array[0]\nmax_length = 0\ncurrent_length = 0\nfor i in range(1, n):\n    if (abs(array[i] - last) <= m) or (abs(array[i] - last) <= d):\n        current_length += 1\n    else:\n        max_length = max(max_length, current_length)\n        current_length = 1\n    last = array[i]\nmax_length = max(max_length, current_length)\nprint(max_length)\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\n\"\"\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == \"3\"\n\"\"\"\n\nfrom collections import deque\nimport sys\n\nD, M, N = map(int, sys.stdin.readline().split())\narray = [int(c) for c in sys.stdin.readline().split()]\n\nvisited = set()\ncount = 0\nmax_count = 0\n\nfor i in range(N):\n    if (i, array[i]) not in visited:\n        count += 1\n        visited.add((i, array[i]))\n        queue = deque([(i, array[i])])\n\n        while queue:\n            p, num = queue.popleft()\n            if num - D > 0:\n                queue.append((p + 1, num - D))\n            if num + D < 100001:\n                queue.append((p + 1, num + D))\n            for j in range(p + 1, len(array)):\n                if (j, array[j]) not in visited and abs(num - array[j]) <= M:\n                    visited.add((j, array[j]))\n                    queue.append((j, array[j]))\n        if count > max_count:\n            max_count = count\n\nprint(max_count)\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == '8'\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == '3'\n\"\"\"\n\nimport sys\n\nn, d, m = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n2 3 4 1') == 3\nassert solution('6 3\\n2 2 2 4 4 4') == 4\nassert solution('6 3\\n3 3 3 3 3 3') == 3\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 2\n2 3 4 1''') == 3\n\"\"\"\nimport re\nimport functools\nfrom typing import List\n\nRE_NUM_STR = re.compile('-?[1-9][0-9]*')"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\nassert solution(\"6 3\\n2 2 2 4 4 4\") == \"4\"\n\nprint(solution(\"6 3\\n2 2 2 4 4 4\"))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 2\n2 3 4 1''') == '3'\nassert solution('''6 3\n2 2 2 4 4 4''') == '4'\n\nassert solution('''8 2\n0 2 3 0 4 0 2 3''') == '0'\nassert solution('''10 3\n0 4 3 0 3 1 2 0 0''') == '1'\n\nassert solution('''8 2\n0 2 3 0 4 0 2 3''') == '0'\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\nassert solution(\"6 3\\n2 2 2 4 4 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\nassert solution(\"6 3\\n2 2 2 4 4 4\") == \"4\"\nassert solution(\"7 4\\n2 2 2 4 4 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().strip().split())\narr = list(map(int, sys.stdin.readline().strip().split()))\nA = {i: (i-1) % N for i in range(N)}\nA[N] = -1\n\ncur = 0\nfor i in range(N):\n    cur = (cur | arr[i]) % K\n    A[i % N] = cur\n\nprint(max(A.values()))\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == 3\nassert solution(\"6 3\\n2 2 2 4 4 4\") == 4\nassert solution(\"6 3\\n4 4 4 4 4\") == 4\nassert solution(\"6 3\\n2 4 2 4\") == 4\nassert solution(\"6 3\\n4 4 4 6\") == 6\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n2 3 4 1') == '3'\nassert solution('6 3\\n2 2 4 4 4') == '4'\nassert solution('8 2\\n1 2 3 4 5 6 7 8') == '7'\nassert solution('8 1\\n1 2 3 4 5 6 7 8') == '1'\n\"\"\""
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1.732050 8.062278e-2 8.062278e-2\") == \"1.732050808\"\n\"\"\"\nimport sys\nimport math\n\na, b, c = map(float, sys.stdin.readline().split())\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1.732050807568877') == '1.732050807568877'\n\"\"\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1, 1, 1.732050807568877) == \"1.732050808\"\nassert solution(1, 1, 3.0) == \"-1\"\nassert solution(0, 1, 1.732050807568877) == \"-1\"\n\nSample Input 3:\n0.01 0.01 0.01\nSample Output 3:\n0.1333\n\"\"\"\n\nfrom math import acos, sqrt"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1.732050808\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"-1\""
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1.732050808') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\nassert solution('1 1 1.73205081') == '1.73205081'\nassert solution('1 1 3.0001') == '-1'\n\nprint(solution('1 1 1.732050808'))\nprint(solution('1 1 3.0'))\nprint(solution('1 1 1.73205081'))\nprint(solution('1 1 3.0001'))\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\nassert solution('1 1 2.0') == '-1'\nassert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 2.5') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\""
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 1 1.732050\n''') == '1.732050808'\nassert solution('''1 1 3.0\n''') == '-1'\nassert solution('''0 0 0.1111\n''') == '0.1111'\nassert solution('''1 1 1.732050\n''') == '1.732050808'\nassert solution('''1 1 3.0\n''') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.49999999875\"\nassert solution(\"2\\n0 100 10\\n0 -100 100\\n.80\") == \"9.999999999002\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 4 2\\n.75') == '2.49999999875'\nassert solution('3\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999002'\nassert solution('3\\n-3 -2 1\\n.75') == '0.9999999999999998'\n\"\"\""
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.4999999987500003\"\n\"\"\""
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.4999999987500003\"\n\"\"\"\nfrom itertools import zip_longest"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.4999999987500003\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n1\\n.75\") == \"2.49999999875\"\n\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == '2.4999999987500003'\n\"\"\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.4999999987500003\"\n\"\"\"\n\n\nimport math\nimport numpy as np"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.4999999987500003\"\n\n\"\"\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\") == \"3\\n2\\n1\\n0\"\n\"\"\""
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1\\n') == '3'\nassert solution('1 1 5 1 2\\n') == '0'\nassert solution('2 1 6\\n') == '0'\nassert solution('1 1 5 1 2\\n2 1 6') == '3'\nassert solution('2 1 6\\n2 1 6') == '0'\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\\n1 1 1\\n2 1 2\\n2 2 2\\n2 3 3\\n2 4 4\") == \"3\"\nassert solution(\"2 4 5\\n1 1 1\\n2 1 2\\n2 2 2\\n2 3 3\\n2 4 4\") == \"2\"\nassert solution(\"1 1 7 1 2\\n2 1 6\\n2 2 6\\n2 3 6\\n2 4 6\") == \"0\"\nassert solution(\"1 1 1 1 2\\n2 1 2\") == \"1\"\nassert solution(\"1 3 3 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 1\\n2 3\\n2 4') == '1'\nassert solution('5 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n2 2') == '0'\nassert solution('4 4\\n1 1\\n2 2\\n3 3\\n2 2') == '0'\nassert solution('6 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n2 2') == '0'\nassert solution('6 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n2 2\\n2 3') == '1'\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\") == \"3\\n2\\n1\\n0\"\nassert solution(\"6 3\\n2 1 6\\n1 1 5 1 2\\n2 1 6\") == \"0\\n3\"\n\"\"\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\") == \"3\"\nassert solution(\"6 5\\n1 1 6 1 2\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n2 5 5\") == \"3\"\n\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 3\n2 1 6\n1 1 5 1 2\n2 1 6''') == '0'\n\nassert solution('''6 3\n2 1 6\n1 1 5 1 2''') == '3'\n\nassert solution('''6 3\n2 1 6\n1 1 5 1 2''') == '2'\n\nassert solution('''4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4''') == '3'\n\nassert solution('''4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4''') == '2'"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"3\"\n\nassert solution(\"1 2 3 4 5 6 7 8\") == \"2\"\n\nassert solution
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"6 3\\n\"\n\"2 1 6\\n\"\n\"1 1 5 1 2\\n\"\n\"2 1 6\"\n) == 3\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n''') == '0\\n3\\n'\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3\\n2\\n1\\n0\\n'\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\nassert solution('1 7 1000000009') == '2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n\"\"\"\n\nimport math\nimport numpy as np\nimport scipy.special\nimport sys"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 7 1000000007') == '1'\n\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n\"\"\"\n\nfrom euler_python.utils import eulerlib\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 7 1000000007') == '1'\n\"\"\"\n\nimport sys\n\nn, k, p = sys.stdin.readline().strip().split()\nn, k, p = int(n), int(k), int(p)\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 7 1000000007') == 1\nassert solution('3 2 1000000007') == 4\n\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\nassert solution(\"2 5 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\nassert solution('3 5 1000000007') == '7'"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"2 7 1000000007\") == \"0\"\nassert solution(\"3 2 1000000007\") == \"4\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n11\") == \"8\"\nassert solution(\"3 5\\n9\") == \"7\"\nassert solution(\"3 5\\n5\") == \"3\"\nassert solution(\"3 5\\n10\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10\\n6') == '5'\nassert solution('3 5\\n11') == '8'\nprint('Success')\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 10\n6''') == '5'\nprint(solution(stdin_lines))\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n11') == 8\n\"\"\"\n\nfrom math import ceil\n\nnum_rows, num_cols = [int(x) for x in stdin.split()]\nnum_cubes = int(stdin.split()[1])"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 5\n11''') == '8'\nassert solution('''10 10\n6''') == '5'\nassert solution('''10 10\n1''') == '0'\n'''\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10\\n6\\n\") == \"5\"\nassert solution(\"3 5\\n11\\n\") == \"8\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n11') == '8'\nprint(solution(stdin))\n\n---\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n11') == '8'\n\"\"\"\n\nR, C = map(int, input().split())\nK = int(input())\n\ngrey_count = 0\nfor r in range(R):\n    for c in range(C):\n        if bin(r).count('1') + bin(c).count('1') >= K:\n            grey_count += 1\nprint(grey_count)\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10\\n6\") == \"5\"\nassert solution(\"3 5\\n11\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3 5\n11\n''') == '8'\n\nassert solution('''\n10 10\n6\n''') == '5'\n\nassert solution('''\n10 10\n0\n''') == '0'\n\nassert solution('''\n10 10\n6\n''') == '5'\n\nassert solution('''\n10 10\n1\n''') == '1'"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 2\\n1 2 1\\n3 2 1') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 2\\n1 2 1\\n3 2 1\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"3\""
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 2 1\\n0 1 1\\n0 3 1\\n0 2 1') == '2'\n'''\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nN, M, C = list(map(int, input[0].split()))\nclients = list(map(int, input[1].split()))\n\npaths = dict()\n\nfor line in input[2:]:\n    u, v, w = list(map(int, line.split()))\n    if u not in paths:\n        paths[u] = dict()\n    if v not in paths:\n        paths[v] = dict()\n    paths[u][v] = w\n    paths[v][u] = w\n\nprint(paths)\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 3\\n0 2 1\\n1 2 1\\n0 3 1\\n0 1 1\\n3 2 1') == '2'\n\"\"\"\nimport sys\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 2\\n1 2 1\\n3 2 1\\n\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"3\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 2\\n1 2 1\\n3 2 1') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\n\"\"\"\n\nN, M, C = list(map(int, input().split()))\n\njunction = [i for i in range(N)]\nstreet_list = []\nfor i in range(M):\n    U, V, W = list(map(int, input().split()))\n    street_list.append([U, V, W])\n    if U not in junction:\n        junction.append(U)\n    if V not in junction:\n        junction.append(V)"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\n\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\n\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\n\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\n\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 1\n10\n10\n1 10\n1 10\n1 10\n\"\"\") == '3'\n\n\"\"\"\n<\ubb38\uc81c> \ud30c\uc774\uc36c\uc73c\ub85c \ud480\uc5b4\uc11c \ub0b4\uac00 \uad6c\ud55c \uac83\n\uccab \ubc88\uc9f8 \ubc29\ubc95 : sys.stdin.readlines()\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac1c\ud589\ubb38\uc790\ub97c \uc81c\uac70\ud558\uc5ec \ucf54\ub4dc\ub97c \uc9dc\ub294 \uac83\n\ub450 \ubc88\uc9f8 \ubc29\ubc95 : \ud30c\uc774\uc36c\uc758 builtins \ubaa8\ub4c8\uc758 readlines()\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac1c\ud589\ubb38\uc790\ub97c \uc81c\uac70\ud558\uc5ec \ucf54\ub4dc\ub97c \uc9dc\ub294 \uac83\n\"\"\"\nimport sys\nfrom builtins import input\n\nsys.stdin = open(\"input.txt\", \"r\")\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\\n') == '3'\nassert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120') == 3"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\\n\") == 3\nassert solution(\"3 1\\n10\\n10\\n1 10\\n1 10\\n1 10\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\\n') == '3'\n\"\"\""
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\") == 3\nassert solution(\"2 3\\n5\\n1 5\\n1 5\\n1 5\") == 1\nassert solution(\"4 1\\n2\\n3\\n4\\n5\\n1 10\\n1 10\\n1 10\\n1 10\") == 5\n\"\"\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\") == 3\nassert solution(\"3 1\\n10\\n10\\n1 10\\n1 10\\n1 10\") == 3\n\"\"\""
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120') == 3\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1_000_000)\n\nN, M = map(int, input().split())\n\nP = list(map(int, input().split()))\nR = list(map(int, input().split()))\n\nfor _ in range(N):\n    C, T = map(int, input().split())\n    if C == P[T - 1]:\n        print(0)\n        exit(0)\n\nmem = {}"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\\n') == '3'\nassert solution('1\\n10\\n10\\n1 10\\n1 10\\n1 10\\n') == '1'\nassert solution('4 1\\n10\\n10\\n1 10\\n1 10\\n1 10\\n') == '1'\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\nassert solution('''5\n1 2 3 4 5\n''') == '1'\nassert solution('''2\n1 2\n3 4''') == '1'\n\nprint(solution(input()))"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 3\") == \"2\""
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '1'\nassert solution('3\\n') == '5'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 1\n\n\"\"\""
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2''') == '''1'''\nassert solution('''3''') == '''5'''\n\n\"\"\"\nimport math"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n\"\"\""
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"3\") == 5\n\"\"\"\n\nimport sys\nimport math\n\nN = int(sys.stdin.readline().strip())"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n0 11 9\\n1 0 10\\n0 0 0\\n') == '2'\n\"\"\"\n\nimport random\nimport math"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == \"2\"\nassert solution(\"4 3\\n0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0\") == \"-1\""
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0') == '2'\nassert solution('0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0') == '-1'\nassert solution('0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0') == '-1'\n\"\"\"\n\n\nfrom collections import defaultdict, deque\nfrom sys import stdin\n"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == \"2\"\n\"\"\"\n\nfrom math import sqrt\n\nn, l = [int(x) for x in input().split()]\n\nconnections = [None] * n\n\nfor i in range(n):\n    connections[i] = [int(x) for x in input().split()]\n\nconnections = [[y for y in x] for x in connections]\n\nc = [0] * n\n\nc[0] = 1\n\nwhile True:\n    c_new = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if connections[i][j] and c[i] and c[j] and i!= j:\n                c_new[j] += 1\n\n    if all([x == 0 for x in c_new]):\n        break\n\n    c = c_new\n\ntarget = float(\"inf\")\n\nfor i in range(n):\n    if c[i] >= l:\n        t = connections[i].count(1)\n        if t < target:\n            target = t"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    3 1\n    0 11 9\n    1 0 10\n    0 0 0\n    \"\"\"\n) == '2'\n\nassert solution(\n    \"\"\"\n    4 3\n    0 1 0 19\n    0 0 2 0\n    0 5 0 3\n    0 0 0 0\n    \"\"\"\n) == '-1'\n\n\"\"\"\n\n[\ucc45 \uc608\uc81c 7.1]\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == '2'\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\\n\") == \"2\"\nassert solution(\"4 3\\n0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0\\n\") == \"2\"\nassert solution(\"10 3\\n1 1 1 1 1 1 1 1 1 1\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n\") == \"8\"\nassert solution(\"6 2\\n1 1 1 1 1 1 1 1 1\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n\") == \"-1\"\nassert solution(\"6 3\\n1 1 1 1 1 1 1 1 1\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n\") == \"4\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\\n\") == \"2\"\n\nassert solution(\"4 3\\n0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0\\n\") == \"-1\"\n\nassert solution(\"10 5\\n0 2 0 3 1 6 1 2 0 1\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\")\nassert solution(\"10 5\\n0 2 0 3 1 6 1 2 0 1\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\")\nassert solution(\"10 5\\n0 2 0 3 1 6 1 2 0 1\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == '2'\n\nassert solution(\"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == '-1'\n\n\"\"\"\nSample Input 1:\n3 1\n0 11 9\n1 0 10\n0 0 0\nSample Output 1:\n2\n\nSample Input 2:\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\nSample Output 2:\n-1\n\"\"\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nassert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nassert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nassert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nassert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == output\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport networkx as nx"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(example_1) == example_2\nassert solution(example_3) == example_4\nassert solution(example_5) == example_6\nassert solution(example_7) == example_8\nassert solution(example_9) == example_10\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\"\nassert solution(\"2 1 0 1\\n0 1 100000\") == \"2 100000 1\\n0 1 100000\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import islice\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\n\n\"\"\"\n\n\"\"\"\nSOLUTION:\n\nAn input line like '1 2 0' means that there is an edge between vertex 1 and 2 with capacity 0.\nThe output should begin with the three integers 'n', 'f' and'm' -\n'n' is the number of nodes, 'f' is the size of a maximum flow, and'm' is the number of edges used in the solution.\nThe graph can be represented in the following way:\n1) The first line of the input contains the integers 'n', 'f', and'm' - number of nodes, flow capacity and number of edges.\n2) The second line contains'm' integers (numbers of edges) 'u', 'v', and 'c' separated by single spaces - from 'u' to 'v' there is an edge with capacity 'c'.\n3) Each of the next'm' lines contains three integers 'u', 'v', and 'c' separated by single spaces,\n    indicating that there is an edge from 'u' to 'v' with capacity 'c'.\nThe remaining lines contain three integers 'u', 'v' and 'x' separated by single spaces,\nmeaning that 'x' units of capacity are transported from vertex 'u' to vertex 'v'.\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append((v, w))\n        self.graph[v].append((u, w))\n\n    def bfs(self, source, sink, flow):\n        queue = [(source, [])]\n        while queue:\n            node, path = queue.pop(0)\n            for neighbour, capacity in self.graph[node]:\n                if neighbour == sink and capacity > flow:\n                    return (path, flow)\n                elif capacity > flow:\n                    queue.append((neighbour, path + [neighbour]))\n        return (None, 0)\n\n    def get_max_flow(self, source, sink):\n        flow = 0\n        while True:\n            path, current_flow = self.bfs(source, sink, 10 ** 8)\n            if path is None:\n                return flow\n            for node in path:\n                for neighbour, capacity in self.graph[node]:\n                    if neighbour == sink:\n                        self.graph[node][neighbour] -= capacity\n                    elif neighbour == source:\n                        self.graph[node][neighbour] += capacity\n            flow += current_flow"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\\n\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nprint(\"OK\")\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nassert solution(\"2 1 0 1\\n0 1 100000\") == \"2 100000 1\\n0 1 100000\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import islice\n\nclass Node:\n    def __init__(self, k, v=0):\n        self.key = k\n        self.value = v\n        self.links = {}\n        self.visited = False\n        self.parent = None\n\n    def __repr__(self):\n        return str(self.key)\n\nclass Graph:\n    def __init__(self, n):\n        self.nodes = {i: Node(i) for i in range(n)}\n        self.links = defaultdict(list)\n\n    def add_edge(self, u, v, c):\n        self.nodes[u].links[v] = c\n        self.nodes[v].links[u] = c\n        self.links[u].append(v)\n        self.links[v].append(u)\n\n    def build_tree(self, source, sink, flow):\n        def bfs(source, sink):\n            queue = [(source, None, None)]\n            self.nodes[source].visited = True\n            while queue:\n                cur, parent, cur_flow = queue.pop(0)\n                if cur == sink:\n                    return cur_flow\n                for n in self.nodes[cur].links.keys():\n                    if self.nodes[n].visited:\n                        continue\n                    self.nodes[n].visited = True\n                    self.nodes[n].parent = cur\n                    if parent:\n                        self.links[parent].remove(n)\n                        self.links[n].append(parent)\n                    queue.append((n, cur, min(cur_flow, self.nodes[cur].links[n])))\n            return 0\n\n        def dfs(source, sink, flow):\n            while source!= sink:\n                cur_flow = min(flow, self.nodes[source].links[sink])\n                self.nodes[source].links[sink] -= cur_flow\n                self.nodes[sink].links[source] -= cur_flow\n                flow -= cur_flow\n                source = self.nodes[source].parent\n                sink = self.nodes[sink].parent\n\n        while flow > 0:\n            res = bfs(source, sink)\n            if res == 0:\n                return False\n            dfs(source, sink, res)\n        return True\n\n    def max_flow(self, source, sink):\n        flow = 0\n        while True:\n            if self.build_tree(source, sink, 10**9):\n                flow += 1\n            else:\n                return flow"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\n\"\"\"\n\n\"\"\"\nGiven an array of integers, calculate the fractions of its elements that are positive, negative, and are zeros. Print the decimal value of each fraction on a new line.\n\nNote: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to  are acceptable.\n\nFor example, given the array  there are  elements, two positive, two negative and one zero. Their ratios would be,  and. It should be printed as\n\n0.400000\n0.400000\n0.200000\nFunction Description\n\nComplete the plusMinus function in the editor below. It should print out the ratio of positive, negative and zero items in the array, each on a separate line rounded to six decimals.\n\nplusMinus has the following parameter(s):\n\narr: an array of integers\nInput Format\n\nThe first line contains an integer,, the size of the array.\nThe second line contains  space-separated integers that describe.\n\nConstraints\n\n\n\nOutput Format\n\nYou must print the following  lines:\n\nA decimal representing of the fraction of positive numbers in the array compared to its size.\nA decimal representing of the fraction of negative numbers in the array compared to its size.\nA decimal representing of the fraction of zeros in the array compared to its size.\nSample Input\n\n6\n-4 3 -9 0 4 1\nSample Output\n\n0.500000\n0.333333\n0.166667\nExplanation\n\nThere are  positive numbers,  negative numbers, and  zero in the array.\nThe proportions of occurrence are positive:, negative:  and zeros:.\n\"\"\"\n\n\"\"\"\nGiven an array of numbers and an integer k, return which k numbers in the array are closest to all the numbers in the array multiplied by -1. \nReturn the numbers in the same order as they appear in the array. \nIf there are multiple solutions, return the numerically smallest one.\n\nFor example, given array = [2, 4, 7] and k = 2, return [2, 4]. \n[-2, -4, -7] and [-2, -4] are also valid solutions.\n\nFor example, given [3, -1, -5, 1, 10] and k = 4, return [3, 1, 10, 1].\n\"\"\"\n\n\"\"\"\nGiven two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\nYou may assume nums1 and nums2 cannot be both empty.\n\nExample 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\nExample 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n\"\"\"\n\n\"\"\"\nGiven an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.\n\nExample 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExample 2:\n\nInput: nums = []\nOutput: []\nExample 3:\n\nInput: nums = [0]\nOutput: []\n\"\"\"\n\n\"\"\"\nGiven an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\nExample 1:\n\nGiven array nums = [-1, 2, 1, -4], and target = 1.\n\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\"\"\"\n\n\"\"\"\nGiven a non-empty array of digits representing a non-negative integer, increment one to the integer.\n\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\n\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\n\nExample 1:\n\nInput: [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nExample 2:\n\nInput: [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\n\"\"\"\n\n\"\"\"\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nExamples:\n\ns = \"leetcode\"\nreturn 0.\n\ns = \"loveleetcode\",\nreturn 2.\nNote: You may assume the string contains only lowercase English letters.\n\"\"\"\n\n\"\"\"\nGiven a string s, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nExamples:\n\ns = \"leetcode\"\nreturn 0.\n\ns = \"loveleetcode\",\nreturn 2.\nNote: You may assume the string contains only lowercase English letters.\n\"\"\"\n\n\"\"\"\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nExamples:\n\ns = \"leetcode\"\nreturn 0.\n\ns = \"loveleetcode\",\nreturn 2.\nNote: You may assume the string contains only lowercase English letters.\n\"\"\"\n\n\"\"\"\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nExamples:\n\ns = \"leetcode\"\nreturn 0.\n\ns = \"loveleetcode\",\nreturn 2.\nNote: You may assume the string contains only lowercase English letters.\n\"\"\"\n\n\"\"\"\nGiven an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.\n\nThe function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.\n\nNote:\n\nYour returned answers (both index1"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'\nassert solution('2 1 0 1\\n0 1 100000') == '2 100000 1\\n0 1 100000'\nassert solution('1 1 0 1\\n0 1 1') == '1 1 0 1'\nassert solution('1 1 0 1\\n0 1 1\\n0 1 1') == '1 1 0 1'\nassert solution('4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'\n\"\"\""
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nassert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\n\n-----Notes-----\nIt is guaranteed that the game will be over.\n\"\"\""
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nprint(\"Test success\")\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\n\"\"\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3\nSMS\nMMS\n''') == '3 5'\nassert solution('''3 3\n.M..\n..M.\nM..S\n''') == '0 2'\nassert solution('''1 1\nM\n''') == '0 0'\nassert solution('''2 2\nS..\n..S\n''') == '2 0'\nassert solution('''3 3\n...\n...\n...\n''') == '0 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('M') == 'M'\nassert solution('M..') == 'M'\nassert solution('S..') == 'M'\nassert solution('S.M') == 'M'\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"M.S\\nS.M\") == \"3 5\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nprint(solution(\"2 3\\nSMS\\nMMS\"), \"3 5\")"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nprint(\"Test 1 OK\")\n\nassert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\nprint(\"Test 2 OK\")\n\nassert solution(\"2 3\\nM..\\nS.M\") == \"2 0\"\nprint(\"Test 3 OK\")\n\nassert solution(\"1 1\\nM\") == \"0 0\"\nprint(\"Test 4 OK\")\n\nassert solution(\"2 2\\nS.M\\nM.S\") == \"0 2\"\nprint(\"Test 5 OK\")"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nprint(\"Test finished.\")\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n2 B\\n1 G\\n3 E\\n3 S\\n0 B\\n1 B\\n1 G\\n3 E\\n3 S\\n0 B\\n1 G\\n1 E\\n3 E\\n3 S\\n0 B\\n1 G\\n1 E\\n3 E\\n3 S\\n0 B\\n1 G\\n1 E\\n3 E\\n3 S\\n0 B\\n1 G\\n1 E\\n3 E\\n3 S\\n0 B\\n1 G\\n1 E\\n3 E\\n3 S\\n0 B\\n1 G\\n1 E\\n3 E\\n3 S\\n0 B\\n1 G\\n1"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a') == '2'\nassert solution('13\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a') == '1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\n\") == \"3 c\\n6 c\"\nassert solution(\"5\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\\n\") == \"1\\n6 b\"\n\n\"\"\"\n\nfrom typing import List, Optional, Dict\n\nfrom termcolor import colored\n\nfrom aoc import utils\n"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\n') == '1\\n6 b'\nassert solution('4\\n0 S\\n1 S\\n1 G a\\n3 E a\\n3 S\\n4 E a\\n4 S\\n') == '1\\n6 c'\nassert solution('6\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\n') == '1\\n6 b'\n\nassert solution('13\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 T a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 T b\\n1 T a\") == \"3 c\\n6 c\"\nassert solution(\"0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 T b\\n1 T a\") == \"1\\n6 b\"\n\n\"\"\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 a\\n0 1\\n1 1\\n1 E a\\n2 2\\n2 2\\n2 T a\\n2 E b\\n0 2\\n0 B\\n1 B\\n3 E a\\n3 E b\\n4 E b\\n5 T a\\n5 E a\\n5 G a\\n6 E b\\n6 G b\\n6 G b\\n7 S') == '1\\n3 c\\n5 b'\nassert solution('5 1 E a\\n3 1 E a\\n5 1 E b\\n4 1 E b\\n5 1 S\\n0 1\\n0 E\\n1 E\\n1 E\\n1 G\\n1 T\\n2 T\\n2 T"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\") == \"2\\n3 c\\n6 c\"\nprint(solution(\"3\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\"))\n"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a') == '2\\n3 c\\n6 c'\nassert solution('6\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a') == '1\\n6 b'\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\"\"\") == \"2\\n3 c\\n6 c\"\n\nassert solution(\"\"\"6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\"\"\") == \"1\\n6 b\"\n\nprint('Success')"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 B\\n1 T a\\n2 B\\n1 T a\\n2 B\\n1 E a\\n2 S\\n2 E a\\n5 S\\n5 G a\\n2 G b\\n3 E b\\n3 T a\\n2 B\\n2 B\\n5 B\\n1 T a\\n2 B\\n4 G a\\n2 E b\\n5 E b\\n5 E a\\n5 S\\n3 G a\\n2 S\\n4 T a\\n5 S\\n5 G a\\n2 G b\\n5 T a\\n3 G a\\n2 B\\n4 G a\\n3 E b\\n5 E b\\n5 E a\\n5"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '1'\nassert solution('3 9') == '3'\nassert solution('11 55') == '23'\nassert solution('1 23') == '5'\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n\"\"\"\n\nA, B = map(int, input().split())\n\ntotal = 0\n\nfor a in range(A, B+1):\n    for b in range(a, B+1):\n        total += abs(a-b)\n        if a < 10 and b < 10:\n            total %= 1000000007\n        elif a >= 10 and b >= 10:\n            total %= 1000000007\n        else:\n            total %= 1000000007\n\nprint(total)\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\nprint('All tests passed.')\n\nimport unittest\nfrom unittest.mock import patch\nimport io\nimport sys\n\nclass TestSolution(unittest.TestCase):\n    def test_sample_input_1(self):\n        with patch('sys.stdin', io.StringIO(\"1 5\\n\")) as stdin:\n            with patch('sys.stdout', new = io.StringIO()) as stdout:\n                solution()\n                self.assertEqual(stdout.getvalue(), \"40\\n\")\n\n    def test_sample_input_2(self):\n        with patch('sys.stdin', io.StringIO(\"288 291\\n\")) as stdin:\n            with patch('sys.stdout', new = io.StringIO()) as stdout:\n                solution()\n                self.assertEqual(stdout.getvalue(), \"76\\n\")"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5') == 40\nassert solution('288 291') == 76\nprint('Test pass.')"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n\"\"\"\n\nfrom typing import List\nimport collections"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"40\"\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n\n\"\"\"\n\n\"\"\"\nimport itertools\n\nA, B = map(int, stdin.readline().split())"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5') == 40\n\"\"\""
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT') == 'COG'\nassert solution('2\\nCAT\\nDOG') == '0'\nassert solution('2\\nCAT\\nDOG\\nCOT') == '0'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'COG'\nassert solution('2\\nCAT\\nDOG\\nCOT\\nCAM') == 'CAM'\n\n------Notes------\nYou can change the word ladder that you use to solve this problem. This is fine, as long as your solution still works for the given test cases.\n\nIf you want to use other words, just change the input variable as shown above.\n\nThe numbers for this problem are small enough that you can write out the dictionary in the test case.\n\nThe words that are in your dictionary are small enough that you can copy them into a separate text file and load them into your program.\n\"\"\""
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nCAT\\nDOG\\nCOT\\n\") == \"COG\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"0\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"0\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT') == 'COG'\nassert solution('2\\nCAT\\nDOG') == '0'\nassert solution('2\\nCAT\\nDOG\\nCOT') == '0'\nassert solution('2\\nCAT\\nDOG\\nCOT\\nCAR') == 'COG'\nassert solution('2\\nCAT\\nDOG\\nCOT\\nCAR\\nWAR') == 'COG'\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COG\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3\\nCAT\\nDOG\\nCOT\"\n) == \"COG\"\nassert solution(\n\"2\\nCAT\\nDOG\"\n) == \"0\"\nassert solution(\n\"2\\nCAT\\nDOG\"\n) == \"0\"\nassert solution(\n\"2\\nCAT\\nDOG\"\n) == \"0\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\nCAT\nDOG\nCOT\n\"\"\") == \"COG\"\nassert solution(\"\"\"2\nCAT\nDOG\n\"\"\") == \"0\"\nassert solution(\"\"\"2\nCAT\nDOG\n\"\"\") == \"0\"\n\nassert solution(\"\"\"3\nCAT\nDOG\nCOT\n\"\"\") == \"COG\"\n\nassert solution(\"\"\"2\nCAT\nDOG\n\"\"\") == \"0\""
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT') == 'COG'\nassert solution('2\\nCAT\\nDOG') == '0'\nassert solution('2\\nCAT\\nDOG\\nCOT') == 'CAT'\nassert solution('3\\nCAT\\nDOG\\nCOT\\nWAS') == 'CAT'\n\n\"\"\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT') == 'COG'\n\"\"\"\nimport sys\nimport string"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\nCAT\nDOG\nCOT''') == 'COG'\n\nassert solution('''2\nCAT\nDOG''') == 0\n\nassert solution('''2\nCAT\nDOG''') == 0\n\nassert solution('''3\nCAT\nDOG\nCOT''') == 'COG'\n\nassert solution('''2\nCAT\nDOG''') == 0"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CAT\\nDOG\\nCOT\") == \"COG\\n3\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import *\n\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.edges = defaultdict(list)\n        self.distances = {}\n\n    def add_edge(self, s, d, w):\n        self.edges[s].append([d, w])\n        self.edges[d].append([s, w])\n\n    def dijkstra(self, s):\n        q, seen, mins = [(0, s, ())], set(), {s: 0}\n        while q:\n            (cost, v1, path) = heappop(q)\n            if v1 not in seen:\n                seen.add(v1)\n                path = (v1, path)\n                if v1 == self.V:\n                    return cost, path\n                for c, v2 in self.edges[v1]:\n                    if v2 in seen:\n                        continue\n                    prev = mins.get(v2, None)\n                    next = cost + c\n                    if prev is None or next < prev:\n                        mins[v2] = next\n                        heappush(q, (next, v2, path))\n"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\nassert solution('1 1') == '1'\nassert solution('10 10') == '1'\n\n\"\"\"\n\nimport collections\nimport functools\nimport itertools"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1\\n4 3') == '9'\n\n\"\"\""
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1\\n\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n\nprint('Hooray!')\n"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 1\\n4 3') == '9'"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 1\\n') == '9'\nassert solution('4 3\\n') == '6'\n\"\"\"\n\nN, C = map(int, input().split())\n"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n\"\"\"\nimport math\nimport numpy as np"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '6'\nassert solution('10 1') == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.V.') == 2\nassert solution('V.VV') == 0\nassert solution('V.VVV') == 1\nassert solution('..#..') == 2\nassert solution('...V') == 0\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"VVhV\\nV.VV\") == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\V./') == 3\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\\\V/.') == 3\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\nV...\\nH...V\") == -1\nassert solution(\"2 5\\nV...\\nH...V\") == 3\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\") == 3\nassert solution(\"2 5\\nV...\\nH...V\") == -1\nassert solution(\"2 5\\n#V.V\\nV...\\nV...\\n#V.V\") == 3\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\\n\") == 3\n\"\"\""
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n./.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./') == 3\nassert solution('2 5\\nV...\\nH...V') == -1\nassert solution('3 3\\n#.\\n.#\\n.#') == 0\nassert solution('4 6\\n.#..\\n..VV\\n#.#.\\n#.#.') == -1\n\nimport sys"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n./V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\\n') == '3'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\\n') == '3'\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''n fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog''') == 'The quick brown fox jumps over the lazy dog.'\n\nassert solution('''abcdefg\nefghijk\nefghijx\nabcdefg''') == 'AMBIGUOUS'\n\nprint(solution(input()))\n\nassert solution('''n fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog''') == 'The quick brown fox jumps over the lazy dog.'\n\nassert solution('''cdefghi\nefghijk\nefghijx\nabcdefg''') == 'AMBIGUOUS'\n\nassert solution('''abcdefg\nefghijk\nefghijx\nabcdefg''') == 'AMBIGUOUS'"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('ab\\nbc\\n') == 'bc'\nassert solution('ab\\nbc\\ncd\\nef\\ng') == 'cd\\nef'\n\nprint(solution(stdin))\n\nNote\n\nPrinting a string is guaranteed to produce a string that contains all printable ASCII characters, i.e., ASCII values $32 \\ldots 126$.\n\nAs an exercise, you may want to write a function that reads a file containing the stdin string and returns a string with the contents of the file in the same order.\n\"\"\""
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('n fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\\n rown fox\\n mps over the l\\nthe lazy dog') == \"The quick brown fox jumps over the lazy dog.\"\nassert solution('n fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\\n rown fox\\n mps over the l\\nthe lazy dog') == \"The quick brown fox jumps over the lazy dog.\"\nassert solution('n fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\\n rown fox\\n mps over the l\\nthe lazy dog') == \"The quick brown fox jumps over the lazy dog.\"\nassert solution('n fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\\n rown fox\\n mps over the l\\nthe lazy dog') == \"The quick brown fox jumps over the lazy dog.\"\nassert solution('n fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\\n rown fox\\n mps over the l\\nthe lazy dog') == \"The quick brown fox jumps over the lazy dog.\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"n fox jumps ove\\n uick brown f\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"efghijk\\nefghijx\") == \"AMBIGUOUS\"\nassert solution(\"cdefghi\\nefghijk\\nefghijx\\nabcdefg\") == \"AMBIGUOUS\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('n fox jumps ove\\n uick brown f\\n The quick b\\n y dog.\\n rown fox\\n mps over the l\\n the lazy dog') == 'The quick brown fox jumps over the lazy dog.'\n\nassert solution('cdefghi\\nefghijk\\nefghijx\\nabcdefg') == 'AMBIGUOUS'\n\"\"\""
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(TEST_CASE) == EXPECTED_TEST_CASE\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('n fox jumps ove\\n uick brown f\\n The quick b\\n y dog.\\n rown fox\\n mps over the l\\n the lazy dog') == 'The quick brown fox jumps over the lazy dog.'\nassert solution('cdefghi\\nefghijk\\nefghijx\\nabcdefg') == 'AMBIGUOUS'"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('n fox jumps ove\\n uick brown f\\n The quick b\\n y dog.\\n rown fox\\n mps over the l\\n the lazy dog') == 'The quick brown fox jumps over the lazy dog'\n\"\"\"\n\nimport math\nimport sys\nimport string"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\ncedefghi\\nefghijk\\nefghijx\\nabcdefg') == 'AMBIGUOUS'\nassert solution('7\\nn fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\\nrown fox\\n mps over the l\\nthe lazy dog') == 'The quick brown fox jumps over the lazy dog'\nassert solution('7\\nn fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\\nrown fox\\n mps over the l\\nthe lazy dog') == 'The quick brown fox jumps over the lazy dog'\n'''"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('test1') == 'The quick brown fox jumps over the lazy dog.'\nassert solution('test2') == 'AMBIGUOUS'\nassert solution('test3') == 'AMBIGUOUS'\nassert solution('test4') == 'AMBIGUOUS'\nassert solution('test5') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\\n\") == \"0-0\"\n\n\"\"\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == '0-0+'\n\"\"\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0-0-0-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\") == \"0-0\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1') == '0-0-'\nassert solution('3 2\\n1 2 1\\n-2 0 2') == '0-0'\nassert solution('1 1\\n-1 0 1') == '0-0'\nassert solution('1 1\\n1 1 1') == 'impossible'\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0\"\nassert solution(\"5 6\\n1 2 1\\n-2 0 2\\n\") == \"impossible\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0-0\"\n\"\"\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\\n-2 0 2\") == \"0+-\"\nassert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\") == \"0-0-0-0-0-\"\nassert solution(\"7 8\\n0 1 1\\n0 1 2\\n0 1 3\\n0 1 4\\n0 1 5\\n0 1 6\\n0 1 7\\n0 1 8\") == \"0-0-0-0-0-0-0-0-0-0-0-0-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0-0\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\") == \"0-0\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\\n0 1 4\\n2 5 1\") == \"impossible\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\\n0 1 4\\n2 5 1\\n0 2 4\") == \"0-0-0\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-\\n0+\\n0-\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\") == \"0+\\n0-\\n0+\"\n\n-----Notes-----\nThe input is correct, but may be too large for the online judge. It is best to try this problem without submitting.\n\"\"\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 1\\n2 1\\n1\\n1\\n1\\n2') == '6'\nassert solution('3 2\\n1 1\\n2 1\\n2\\n1\\n1\\n2') == '5'\nassert solution('3 2\\n1 1\\n2 1\\n2\\n1\\n1\\n2') == '4'\nassert solution('3 2\\n1 1\\n2 1\\n2\\n1\\n1\\n2') == '3'\n\nprint(solution(input()))\n\nimport unittest\nimport random\nimport time\n\nclass TestProblem(unittest.TestCase):\n    def test_problem(self):\n        pass"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 2\n1 1\n2 3\n2\n1 2 2\n2 2 2\"\"\") == \"4\\n4\"\nprint(solution(\"\"\"2 2\n1 1\n2 3\n2\n1 2 2\n2 2 2\"\"\"))\nassert solution(\"\"\"2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2\"\"\") == \"4\\n4\"\nprint(solution(\"\"\"2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2\"\"\"))\nassert solution(\"\"\"4 3\n1 1\n1 1\n1 1\n1\n1 1 1\n1 1 1\n1 1 1\n2 2 2\n1 2 2\n2 2 2\n2 2 2\"\"\") == \"8\\n8\\n8\\n8\"\nprint(solution(\"\"\"4 3\n1 1\n1 1\n1 1\n1\n1 1 1\n1 1 1\n1 1 1\n2 2 2\n1 2 2\n2 2 2\n2 2 2\"\"\"))\nassert solution(\"\"\"6 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2 2\n1 2 2\n2 2 2\n2 2 2\n2 2 2\"\"\") == \"12\\n12\\n12\\n12\"\nassert solution(\"\"\"1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\"\"\") == \"12\\n12\\n12\\n12\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 1\\n2 3\\n2\\n1 2 2\\n2 2 2') == '4\\n4'\n\"\"\"\n\nimport sys\nfrom math import gcd\n\nn, c = [int(i) for i in sys.stdin.readline().strip().split()]\np_a = [int(i) for i in sys.stdin.readline().strip().split()]\np_b = [int(i) for i in sys.stdin.readline().strip().split()]\nq = int(sys.stdin.readline().strip())\n\np_a_set = set(p_a)\np_b_set = set(p_b)\n\ncomb_a = 1\ncomb_b = 1\ncomb = 1\nfor i in range(1, n+1):\n    comb_a *= i\n    comb_b *= i\n    comb = (comb_a * comb_b) % 1007\n\nfor _ in range(q):\n    p, a, b = [int(i) for i in sys.stdin.readline().strip().split()]\n    common = p_a_set.intersection(p_b_set)\n    if common:\n        if len(common) < c:\n            print(comb)\n            continue\n    if p in p_a_set:\n        if a > 1:\n            print(comb)\n            continue\n        else:\n            print(comb // (comb_a*(a*b) % 1007))\n    elif p in p_b_set:\n        if b > 1:\n            print(comb)\n            continue\n        else:\n            print(comb // (comb_b*(a*b) % 1007))\n    else:\n        print(comb)"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 1\\n2 3\\n2\\n1 2 2\\n2 2 2') == '4\\n4'\nassert solution('2 2\\n1 2\\n2 3\\n2\\n1 2 2\\n2 2 2') == '4\\n4'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 1\\n2 3\\n2\\n1 1 1') == '4'\nassert solution('2 2\\n1 2\\n2 3\\n2\\n1 1 1') == '3'\n\"\"\""
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 2\\n2 3\\n2\\n1 2 2\\n2 2 2') == '4'\n\"\"\"\n\nN, C = [int(x) for x in input().split()]\n\na = [int(x) for x in input().split()]\n\nb = [int(x) for x in input().split()]\n\nQ = int(input())\n\nfor _ in range(Q):\n    P, A, B = [int(x) for x in input().split()]\n\n    a[P - 1] = min(A, a[P - 1])\n    b[P - 1] = min(B, b[P - 1])\n\np = 1\nfor i in range(N):\n    p *= a[i] + b[i]\n    p %= 1000000007\n\nprint(p)\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('4 2\\n1 2\\n2 3\\n2\\n1 2 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n2 3\\n2\\n1 2 2\\n2 2 2\") == \"4\\n4\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 2\\n2 3\\n2\\n1 2 2\\n2 2 2') == '4\\n4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n2 3\\n2\\n1 2 2\\n2 2 2\") == \"4\\n4\"\n\"\"\""
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB''') == 'YES'\nassert solution('''3 4\nWWRR\nWRRR\nWRRR''') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB') == 'YES'\nassert solution('3 4\\nWWRR\\nWRRR\\nWRRR') == 'NO'"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB') == 'YES'\n\"\"\"\nimport collections\nimport itertools\nimport math"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB') == 'YES'\nassert solution('3 4\\nWWRR\\nWRRR\\nWRRR') == 'NO'\n\nfrom TestCodewar import Test\ntest = Test()\n\ntest.it(\"Simple Tests\")\ntest.assert_equals(solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\"), \"YES\")\ntest.assert_equals(solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\"), \"NO\")\n\ntest.it(\"Basic Tests\")\ntest.assert_equals(solution(\"1 1\\nR\"), \"YES\")\ntest."
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n\nprint(solution(stdin))\n\nimport stdin\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB') == 'YES'\nassert solution('3 4\\nWWRR\\nWRRR\\nWRRR') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 5\\n1\\n2\\n3\\n3\\n2\\n1\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3') == '1'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\n\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == '3'\nassert solution(\"6 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == '3'\n\"\"\"\n\nimport sys\nimport ast\n\ntry:\n    _, K, S = ast.literal_eval(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    if K > len(arr):\n        raise Exception(\"The array is not sufficient for this change.\")\n    prefix = [0]\n    for n in arr:\n        prefix.append(prefix[-1] + n)\n    ans = float('inf')\n    for i in range(K, len(arr) + 1):\n        for j in range(i - K, len(arr) - K + 1):\n            s = S\n            for k in range(i):\n                s = prefix[j + k + 1] - prefix[j + k]\n                if s <= 0:\n                    break\n            if s == 0:\n                ans = min(ans, i - j)\n                break\n            for k in range(j, j + K):\n                s -= prefix[k + 1] - prefix[k]\n                if s <= 0:\n                    break\n            if s == 0:\n                ans = min(ans, i - j)\n                break\n    if ans!= float('inf'):\n        print(ans)\n    else:\n        print('-1')\n\nexcept Exception as e:\n    print(e)\n    sys.exit(1)"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\nassert solution(\"6 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\n\nprint(solution(\"6 3 5\\n1\\n2\\n3\\n3\\n2\\n1\"))\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '1'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\n\"\"\"\n\nimport sys\nimport random\n\nfrom array import array"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '1'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\n\"\"\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3\\n3\\n2\\n1\\n') == '3'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\nassert solution(\"5 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\nassert solution(\"5 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Set\nfrom collections import Counter, defaultdict\nfrom math import inf\nfrom itertools import product, chain, combinations\nfrom functools import reduce"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"1\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\nassert solution(\"6 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == \"3 2\"\nassert solution(\"5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\") == \"12 3\"\n\"\"\"\n\nfrom itertools import combinations_with_replacement"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '0 1'\nassert solution('4') == '0 1 2 3'\nassert solution('0 0') == '0 1'\nassert solution('5') == '0 1 2 3 4'\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == \"3 2\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == \"3 2\"\nassert solution(\"5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\") == \"12 3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\\n\") == \"3 2\"\nassert solution(\"5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\\n\") == \"12 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2\\n1 2\\n3 3\\n7 5\\n9 5\") == \"12 3\"\nprint(\"OK\")\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n'''\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"3 2\"\n\"\"\"\n\nn = int(stdin.readline())\nd = [int(x) for x in stdin.readline().split()]\n\nd = list(zip(d, [i+1 for i in range(n)]))\nd.sort()\nx = 1\nans = [d[0][0], 1]\nfor i in range(n-1):\n    x = max(d[i+1][0] - d[i][0], x)\n    ans[1] = max(x, ans[1])\nprint(*ans)\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 2\\n1 2\\n3 3') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'\nprint('tests passed')\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '\\n'\nassert solution('1 1') == '1 1\\n'\nassert solution('0 2') == '0 2\\n'\nassert solution('0 1\\n1 2\\n2 3') == '0 1\\n1 2\\n2 3\\n'\nassert solution('0 1\\n1 2\\n3 3\\n4 5\\n') == '0 1\\n1 2\\n3 3\\n4 5\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\\n0\\n0\\n3\\n\") == \"100\\n000\\n01\\n01\\n01\"\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\\n\") == \"0000\\n1001\\n0010\\n101\\n010\\n000\\n100\\n010\"\n\n\"\"\""
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"2\\n\"\n    \"1\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"3\\n\") == \"100\\n000\\n01\\n01\\n01\"\n\nassert solution(\n    \"3\\n\"\n    \"0\\n\"\n    \"1 1\\n\"\n    \"1\\n\"\n    \"1 1\\n\"\n    \"1\") == \"0000\\n1001\\n0010\\n101\\n010\\n000\\n100\"\n\nassert solution(\n    \"6\\n\"\n    \"0\\n\"\n    \"3 2\\n\"\n    \"3 2\\n\"\n    \"3 2\\n\"\n    \"3 2\\n\"\n    \"3 2\\n\") == \"101110\\n101110\\n101110\\n111010\\n111010\\n111010\"\n\n-----Problem-----\nWe define a Bar Code as a code that contains all the letters of the English alphabet, and the empty string. A Bar Code is consistent if it is unique, and it has no two adjacent symbols of the same orientation that are touching, unless they are touching by a border. We define the Border of a symbol as the set of all points on the symbol that are not touching the symbol's interior. A symbol is consistent if it is of the form p q r s, where p, q, r, and s are distinct strings of equal length, and the Border of p is a subset of the Border of q and the Border of r is a subset of the Border of s.\n\nFor example, the Bar Code {aa, ab, aa, bb} is consistent, as the Border of aa is a subset of the Border of ab, and the Border of ab is a subset of the Border of bb. The Bar Code {ab, ac, aa, bb} is consistent, as the Border of ab is a subset of the Border of ac, and the Border of ac is a subset of the Border of aa.\n\nThe Bar Code {aa, ab, ac, aa, bb} is not consistent, as the border of aa contains the border of ab.\n\nYou have a list of Bar Codes, and you want to know if they are all consistent. Given a list of Bar Codes, list, print \"Consistent\" if all Bar Codes in list are consistent, and \"Not consistent\" otherwise.\n\n-----Constraints-----\n1 <= length of list <= 1000\n0 <= length of each string in list <= 20\n\n\"\"\""
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1101010\"\nassert solution(\"2\") == \"100\"\nassert solution(\"1\") == \"1\"\n\"\"\"\nfrom typing import List\n\nimport itertools"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0\\n1 1\\n1\\n1 1\") == \"100\\n010\\n101\\n010\\n100\\n010\\n101\\n010\\n100\"\nassert solution(\"4\\n0\\n1 1\\n2\\n1 1\") == \"1000\\n10010\\n10110\\n10010\\n10110\\n10010\\n10110\\n10010\\n10110\"\nassert solution(\"7\\n0\\n1 1\\n1\\n1 1\\n2\\n1 1\\n1\\n
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\") == \"100\\n010\\n101\\n010\\n100\\n010\\n101\"\nassert solution(\"4\\n0\\n1 1\\n1\\n1 1\\n1\\n1\") == \"1110\\n1010\\n1010\\n1110\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n0\\n1\\n0\\n1\\n0\\n
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"100\"\nassert solution(\"2\") == \"010\"\nassert solution(\"2\") == \"010\"\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0\\n1 1\\n1\\n1 1\") == \"100\\n010\\n101\"\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\") == \"100\\n010\\n101\"\nassert solution(\"3\\n1\\n1 1\\n1\\n1 1\") == \"100\\n010\\n101\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1\\n0\\n0\\n3') == '100\\n000\\n01\\n01\\n01'\nassert solution('3\\n0\\n1 1\\n1\\n1 1\\n1') == '0000\\n1001\\n0010\\n101\\n010\\n000\\n100\\n010'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\") == \"100\\n000\\n01\\n01\\n01\\n0\\n1\\n010\\n101\\n\"\nassert solution(\"2\\n0\\n3\\n1\\n1\") == \"100\\n010\\n1\\n\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(solution(str(input())))\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == 2\n\n\"\"\"\n\nfrom typing import List, Union\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 3') == 2\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == \"2\"\nassert solution(\"4 1\\n1 3\\n4 6\\n7 8\\n2 5\") == \"3\"\n\nSolution:\n* Read input\n* Slice each line into the 2 numbers\n* Calculate max(y - x) for each line\n* Sum the results"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 3') == '2'\nassert solution('4 1\\n1 3\\n4 6\\n7 8\\n2 5') == '3'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 3') == '2'\n\nassert solution('4 1\\n1 3\\n4 6\\n7 8\\n2 5') == '3'\n\n\"\"\""
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 3') == '2'\nassert solution('4 1\\n1 3\\n4 6\\n7 8\\n2 5') == '3'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == 2\n\"\"\"\n\n\"\"\"\n    The idea is to count the max number of finished tv shows, and add it to the current shows.\n\"\"\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.0'\n\nassert abs(solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') - 126.86989765) < 10 ** -6\n\nassert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == 'Impossible'\n\nassert abs(solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') - (126.86989765 + 2*math.pi)) < 10 ** -6\n\nassert abs(solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') - (126.86989765 + 6.283185307179586)) < 10 ** -6\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"126.86989765\"\nassert solution(\"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"Impossible\"\n\"\"\"\n\nimport sys\nimport math\n\nsys.stdin = open('test_files/Y13R5P1/A.in')"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == '90.0'\nassert solution(\"5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '126.86989765'\nprint('Passed!')"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"90.0\"\nassert solution(\"4 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"126.86989765\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom typing import NamedTuple\n\nsys.setrecursionlimit(1000000)\n\n\nclass Junction(NamedTuple):\n    index: int\n    x: int\n    y: int\n\n    def __str__(self):\n        return f\"{self.index}: ({self.x}, {self.y})\"\n\n    def __repr__(self):\n        return str(self)\n\n\nclass Road(NamedTuple):\n    source: Junction\n    destination: Junction\n    dual: bool\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\\n1\\n1\\n100\\n0\\n0\") == \"Impossible\"\nassert solution(\"2\\n2\\n1\\n1\\n100\\n0\\n0\") == \"180.0\"\nassert solution(\"2\\n3\\n1\\n1\\n100\\n0\\n0\") == \"90.0\"\nassert solution(\"2\\n3\\n2\\n1\\n100\\n0\\n0\") == \"100.0\"\nassert solution(\"2\\n2\\n2\\n1\\n100\\n0\\n0\") == \"100.0\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\n\"\"\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"126.86989765\"\nprint(solution(input()))\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\"\"\"\n\nfrom math import prod\n\nfrom typing import List\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7') == '0'\nassert solution('8') == '1'\nassert solution('9') == '2'\nassert solution('10') == '3'\nassert solution('11') == '4'\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('37') == '4\\n8 29\\n9 28\\n11 26\\n15 22'\nassert solution('30014') == '7\\n85 29929\\n88 29926\\n785 29229\\n788 29226\\n7785 22229\\n7788 22226\\n7789 22225'\n\n\"\"\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\n\"\"\""
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\n\"\"\"\n\nn = int(stdin.readline())\n\nnum = ''\nfor i in range(1, n + 1):\n    num += str(i)\n\nnums = list(set(num))\n\nanswer = 0\nfor n in nums:\n    if int(n) > n:\n        nums.remove(n)\n    if int(n) < int(n[::-1]):\n        nums.remove(n)\n\nnums.sort(reverse=True)\n\nfor i in range(len(nums)):\n    if int(nums[i]) < n:\n        answer += int(nums[i])\n        if int(nums[i]) < n - 1:\n            print(int(nums[i]) + 1, end=' ')\n        else:\n            print(int(nums[i]), end=' ')\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\n\"\"\"\n\nimport itertools\n\nPRICE = set(range(1, 10001))\n\nprint(len(list(itertools.combinations(PRICE, 3))))"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"37\") == \"4\\n8 29\\n9 28\\n11 26\\n15 22\"\nassert solution(\"30014\") == \"7\\n85 29929\\n88 29926\\n785 29229\\n788 29226\\n7785 22229\\n7788 22226\\n7789 22225\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('37') == '4\\n8 29\\n9 28\\n11 26\\n15 22'\n\n\"\"\"\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('37') == '4\\n8 29\\n9 28\\n11 26\\n15 22'\nassert solution('30014') == '7\\n85 29929\\n88 29926\\n785 29229\\n788 29226\\n7785 22229\\n7788 22226\\n7789 22225'"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"37\") == \"4\\n8 29\\n9 28\\n11 26\\n15 22\"\n\"\"\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nn, d, r = [int(i) for i in stdin.readline().split()]\ncounts = [0] * n\nfor i in range(d):\n    counts = [counts[j] + 1 if counts[j] < r else counts[j] for j in range(n)]\nprint(sum(counts) / r)\n\"\"\"\n\n\"\"\"\nSolution:\nn, d, r = [int(i) for i in input().split()]\ncounts = [0] * n\nfor i in range(d):\n    counts = [counts[j] + 1 if counts[j] < r else counts[j] for j in range(n)]\nprint(sum(counts) / r)\n\"\"\""
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1\\n\") == \"3.5\"\nassert solution(\"3 3 2\\n\") == \"4.9\"\n\"\"\"\n\nimport sys\nimport math\n\nn, d, r = map(int, sys.stdin.readline().split())\n\nd1 = d // n\ns = sum([math.ceil(x / d1) for x in range(1, n + 1)])\ns -= (d // n)\ns = math.floor(s * (r / n))\nprint(s)"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n\"\"\"\n\n\"\"\"\nTook me around 2 hours and 20 minutes to solve this one. I think it's pretty straightforward. I had trouble getting my head around the maths initially, so I had to look up on wikipedia for some mathematical tricks.\n\nMy strategy for this one is to calculate the expected value of the greatest number of gems. Then I will try to generate a random number of 1-6 and check the expected value against it. If the difference is greater than 10^-6, then it means that the numbers don't match. If the difference is less than 10^-6, then the numbers should be close to each other.\n\"\"\"\n\nimport random\n\nn, d, r = list(map(int, stdin.split()))\n\nmax_sum = 0\n\nfor i in range(d):\n    values = []\n    for j in range(n):\n        values.append(random.randint(1, 6))\n    values.sort(reverse=True)\n    value = 0\n    for value in values[0:r]:\n        value += value\n    if value > max_sum:\n        max_sum = value\n\nprint(max_sum / n)\n\n\"\"\"\n2 3 1\n7.000000000000\n\"\"\"\n\n\"\"\"\nAfter solving it, I realized that the expected value is given by the formula \\sum_{i=1}^r \\frac{i^n}{n!}.\n\nThe formula also allows for integer division, which means that after generating a random number in the range [1, 6], I would end up with a random integer, say x, where 1 < x <= 6. This means that the number of the ith person holding a certain number of gems will be \\frac{i^n}{n!} times the number of the ith person holding a random number between 1 and 6.\n\nI think I might have coded something up that would have worked. But then I also found a different problem with the same problem set that was close to mine, so I decided to use it as a test. The test was to calculate the expected value of the greatest number of gems among the people holding less than 4 gems.\n\nFor this problem, I found the formula for the expected value of the greatest number of gems among the people holding less than 4 gems is \\frac{n(n-1)}{6} + \\frac{n(n-1)(n-2)}{6^2} + \\frac{n(n-1)(n-2)(n-3)}{6^3} + \\dots + \\frac{n(n-1)(n-2)(n-3)(n-4)}{6^n}.\n\nIt would be hard to calculate the first n(n-1) values, so I decided to generate a random number between 0 and 6 and calculate the expected value of the number of gems each person held. Then I did the same thing as the original problem, but calculating the expected value of the number of gems each person held for numbers of gems between 4 and n.\n\nThe last step was to add all the expected values together, then divide the sum by the total number of people.\n\nThe formula for calculating the expected value of the greatest number of gems among the people holding less than n gems is \\frac{n(n-1)}{6} + \\frac{n(n-1)(n-2)}{6^2} + \\frac{n(n-1)(n-2)(n-3)}{6^3} + \\dots + \\frac{n(n-1)(n-2)(n-3)(n-4)}{6^n}.\n\"\"\"\n\nn = 4\nsum = 0\n\nfor i in range(1, n + 1):\n    sum += (i ** n) / (n * 5)\n\nprint(sum)\n\n\"\"\"\n5.000000000000\n\"\"\"\n\nn = 4\nsum = 0\n\nfor i in range(1, n + 1):\n    sum += (i ** n) / (n * 5)\n\nprint(sum)\n\n\"\"\"\nAfter testing this out, I realized that if I use the formula for expected value of the greatest number of gems among the people holding less than n gems, and if I don't divide the sum by the number of people, then I can end up with an answer that is way higher than the answer to the original problem set.\n\nThis problem was solved using a similar method to the previous problem set, but I was able to make the formula a bit more general. I included a test case of n = 4 in the test set and the answer I got was too large for the code to work.\n\"\"\"\n\nn = 4\nsum = 0\n\nfor i in range(1, n + 1):\n    sum += (i ** n) / (n * 5)\n\nprint(sum / n)\n\n\"\"\"\n3.250000000000\n\"\"\"\n\nn = 4\nsum = 0\n\nfor i in range(1, n + 1):\n    sum += (i ** n) / (n * 5)\n\nprint(sum / n)\n\n\"\"\"\nThe answer to the problem set was accurate. I will now write a program to test all possible n values and see how accurate the answer is.\n\nA good way to test this is to compare the answer to the actual value of the greatest number of gems each person held.\n\"\"\"\n\nn = 4\nans = 0\n\nfor i in range(1, n + 1):\n    ans += (i ** n) / (n * 5)\n\nprint(ans)\n\n\"\"\"\nThe program works perfectly.\n\"\"\"\n\nn = 4\nans = 0\n\nfor i in range(1, n + 1):\n    ans += (i ** n) / (n * 5)\n\nprint(ans / n)\n\n\"\"\"\nn = 1\nans = 3.5\n\nn = 2\nans = 4.9\n\nn = 3\nans = 7.6\n\nn = 4\nans = 3.25\n\nn = 5\nans = 3.25\n\"\"\"\n\nn = 4\nans = 3.25\n\nfor i in range(5, n + 1):\n    ans = (ans * n) / (n * 5)\n    print(ans)\n\n\"\"\"\nn = 1\nans = 3.5\n\nn = 2\nans = 4.9\n\nn = 3\nans = 7.6\n\nn = 4\nans = 3.25"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1') == 3.5\nassert solution('3 3 2') == 4.9\n\n-----Problem-----\nIn this problem, we want to find the expected value of the number of the largest number of gems held by the $r$ people with the largest numbers of gems.\n\nGiven that the values of the $r$ people are independent of the order in which they are listed, the expected value of this quantity is the average over all possible values of $r$.\n\nThe calculation is straightforward. Consider the following distribution $x_1, x_2, \\dots, x_n$ of $n$ positive random variables. The expectation of the largest number of those random variables is given by\n\n$$\nE(r) = \\frac{n}{r} \\sum_{i=1}^r x_i\n$$\n\nFrom this, we can calculate the expected value of the largest number of gems held by the top $r$ people with the largest numbers of gems, for example:\n\n$$\nE(r) = \\frac{n}{r} \\left( \\frac{r}{n} \\right)^{r} = \\frac{r}{n} \\left( \\frac{n}{r} \\right)^{r-1}\n$$\n\nNow, we know that the value of the largest number of gems held by the top $r$ people with the largest numbers of gems is given by\n\n$$\nr_k = \\frac{r}{n} \\left( \\frac{n}{r} \\right)^{r-k}\n$$\n\nWe can verify this by calculating the expected number of the largest number of gems held by the top $r$ people with the largest numbers of gems after $d$ nights, for different values of $d$ and $r$.\n\n$$\nE(r, d) = \\frac{r}{n} \\left( \\frac{n}{r} \\right)^{r-1} \\sum_{k=1}^{d} \\frac{r_k}{d}\n$$\n\nThis equation is well-known and its solution is\n\n$$\nE(r, d) = d \\left( \\frac{n}{r} \\right)^{r-1}\n$$\n\nIn terms of the general solution, we have\n\n$$\nE(r, d) = d \\left( \\frac{n}{r} \\right)^{r-1} \\left( 1 - \\frac{r}{n} \\right)\n$$\n\nThe values of $r$ and $d$ are not important, but we want to keep the form of the general solution from above. The expressions for the $r$ and $d$ can be significantly simplified if we replace $r$ by $\\frac{n}{2}$, $d$ by $\\frac{n}{4}$, and $n$ by $\\frac{2}{3}$. For example, we have\n\n$$\nE(r, d) = d \\left( \\frac{2}{3} \\right)^{r-1} \\left( 1 - \\frac{2}{3} \\right)\n$$\n\nSince $E(r, d)$ is a polynomial in $r$ and $d$, it has infinitely many solutions. To solve this problem, we will consider only the real solution set of $E(r, d) = 0$. The real solution set of $E(r, d) = 0$ can be found by finding the solutions of the equation\n\n$$\n\\left( \\frac{2}{3} \\right)^{r-1} \\left( 1 - \\frac{2}{3} \\right) = 0\n$$\n\nwhich is equivalent to finding the real roots of the polynomial\n\n$$\n\\left( \\frac{1}{3} \\right)^r = \\left( \\frac{1}{3} \\right)^d \\left( 1 - \\frac{1}{3} \\right)\n$$\n\nNote that since $E(r, d)$ is a polynomial in $r$ and $d$, we can compute the solutions to $E(r, d) = 0$ for any values of $r$ and $d$ using the Vieta's formulas.\n\nSince $r$ is not large enough to approximate $n$, it is not possible to find the real solution set of $E(r, d) = 0$. To approximate the solution, we will use the algorithm from the project to find the value of $r$ that will give us the smallest approximation error.\n\n-----Solution-----"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3 1''') == '''3.5'''\nassert solution('''3 3 2''') == '''4.9'''"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1\\n') == '3.5'\n\n\"\"\"\n\nimport sys\nimport math\n\nassert sys.argv[1:] == ['3', '3', '2']\n\nn, d, r = map(int, sys.argv[1:])\n\nprint(sum([a / (n - d + 1) for a in range(1, r + 1)]) / r)\n\n\"\"\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3 1''') == '''3.5'''\nassert solution('''3 3 2''') == '''4.9'''\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 1 5\") == 19\nassert solution(\"12 12 1 12\") == 4\n\"\"\"\n\nfrom collections import defaultdict\n\nnums = list(map(int, stdin.split()))\nnums[1] += 1\n\nnums = nums[1:]\n\nd = defaultdict(int)\n\nfor n in nums:\n    d[n] += 1\n\nn = nums[0]\n\nfor k in d:\n    if n % k == 0:\n        print(d[n] * d[k])\n        break\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n\"\"\""
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 1 5') == '19'\n\nassert solution('12 12 1 12') == '4'\n\"\"\"\n\na, b, c, d = map(int, input().split())\n\ncount = 0\nfor i in range(a, b + 1):\n    for j in range(c, d + 1):\n        if gcd(i, j) == 1:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 1 5\") == 19\n\"\"\"\n\na, b, c, d = map(int, stdin.split())\nprint(b - a + 1 * (d - c + 1))\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 1 5\") == 19\nassert solution(\"12 12 1 12\") == 4\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\nassert solution(\"10 10 10 10\") == \"0\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 1 5\") == 19\nassert solution(\"12 12 1 12\") == 4\n\"\"\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 1 5\") == 19"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\nassert solution('7 7 1 7') == '5'\n\"\"\""
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">1 5\") == \"4\"\nassert solution(\">1 12\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\nassert solution('1 10000') == '9'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == '4'\nassert solution(\"1 12\") == '4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"4\"\nassert solution(\"1 12\") == \"4\""
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\nassert solution('2 1') == '1'\nassert solution('3 10') == '4'\nassert solution('3 7') == '7'\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n\"\"\"\n\nA1, m = map(int, stdin.split())\nA = [1]\ni = 1\nwhile m not in A and m > max(A):\n    A.append(A1 + i)\n    i += 1\nprint(i - A.index(max(A)) if m in A else i)\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n\"\"\"\n\nimport sys\n\nr, m = map(int, sys.stdin.readline().split())\n\ncurr = r\ni = 0\n\nwhile True:\n    d = 1\n    while curr + d <= m:\n        d += 1\n\n    i += 1\n    if d == 1:\n        break\n    curr = curr + d\n\nprint(i)\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nassert solution(\"coocar\") == \"3\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('car') == 1\nassert solution('cocar') == 2\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\nassert solution('car') == '1'\nassert solution('cocar') == '2'\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"car\") == 1\nassert solution(\"cocar\") == 2\nassert solution(\"coocar\") == 3\nassert solution(\"codecar\") == 3\nassert solution(\"codecar\") == 3\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nassert solution(\"cocco\") == \"1\"\nassert solution(\"coce\") == \"3\"\nassert solution(\"coa\") == \"4\"\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"car\") == 1\nassert solution(\"cocar\") == 2\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\nfrom itertools import chain"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('car') == 1\nassert solution('cocar') == 2\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"car\") == 1\nassert solution(\"cocar\") == 2\nassert solution(\"cocaror\") == 2\nassert solution(\"cocar\") == 2\nassert solution(\"cocaror\") == 2"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(r\"D:\\Code\\GitHub\\AlgoRepo\\MyAlgorithms\\tests\\test_1_input.txt\", 'r').read()) == \"0\"\nassert solution(open(r\"D:\\Code\\GitHub\\AlgoRepo\\MyAlgorithms\\tests\\test_2_input.txt\", 'r').read()) == \"0\"\nassert solution(open(r\"D:\\Code\\GitHub\\AlgoRepo\\MyAlgorithms\\tests\\test_3_input.txt\", 'r').read()) == \"0\"\nassert solution(open(r\"D:\\Code\\GitHub\\AlgoRepo\\MyAlgorithms\\tests\\test_4_input.txt\", 'r').read()) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 2 0 1\\n') == '8'\n\"\"\"\nimport unittest"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 2 0 1\\n') == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 2 0 1') == '8'\n\n\"\"\""
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\") == \"0\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n0 2 0 1\n''') == '8'\n\nassert solution('''5\n1000000 1 1 1 1\n''') == '0'\n\n\"\"\"\n- \u0412\u043e \u0432\u0441\u0435\u043c \u043a\u043e\u0434\u0435 \u044f \u043d\u0435 \u0441\u043c\u043e\u0433 \u043f\u043e\u043d\u044f\u0442\u044c, \u0432 \u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u043d\u0443\u0436\u043d\u043e \u0434\u0435\u043b\u0438\u0442\u044c, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043f\u044b\u0442\u0430\u043b\u0441\u044f \u0432\u0437\u044f\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043b \u0441\u0443\u043c\u043c\u0443 \u0438 \u0434\u0435\u043b\u0438\u043c \u0432\u0441\u0435 \u0435\u0449\u0451 \u043d\u0430 2.\n- \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0434\u0435\u043b\u0430\u043b \u043f\u043e\u0438\u0441\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0439\u0434\u0451\u0442 \u043d\u0443\u0436\u043d\u044b\u0439 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043b \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u0441\u0443\u043c\u043c\u0443.\n\"\"\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 2 0 1') == '8'\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\n\"\"\"\n\nclass Solution:\n    def solve(self, n: int, coins: List[int]) -> int:\n        # O(nk) time, O(n) space\n        k = len(coins)\n        dp = [[0] * (1 << k) for _ in range(n)]\n        dp[0][0] = 1\n\n        for mask in range(1 << k):\n            total = 0\n            for i in range(k):\n                if mask & (1 << i):\n                    total += coins[i]\n            for i in range(n):\n                if dp[i][mask] and total <= i:\n                    dp[i + 1][mask | (1 << i)] = 1\n\n        return sum(dp[n]) % (10**9 + 7)"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'ababac'\nassert solution('2 3') == 'ababac'\nassert solution('2 3') == 'ababac'\nassert solution('2 3') == 'ababac'\nassert solution('2 3') == 'ababac'\n\n-----Explanation-----\nIn the sample input for the first example, there are 2 strings in the alphabetically sorted list of all $2$-incremental, double free strings:\n\nababac\n\nababac\n\nababac\n\nababac\n\nThe second string is double free because it has one of the same characters at least twice in the string.\n\nIn the sample input for the second example, there are 2 strings in the alphabetically sorted list of all $3$-incremental, double free strings:\n\nababac\n\nababac\n\nHowever, none of them are double free since they all have different characters at least three times:\n\naba\n\naab\n\naab\n\naab\n\nabba\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab\n\nabab"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 651') == '-1'\nassert solution('2 650') == 'zyz'\n\"\"\""
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 651\") == \"-1\"\nassert solution(\"2 650\") == \"zyz\"\n\"\"\""
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 651\") == \"-1\"\nassert solution(\"2 650\") == \"zyz\"\n\"\"\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 650') == 'zyz'\n\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"a\"\n\"\"\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 650\") == 'zyz'\nassert solution(\"2 651\") == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'zyz'\nassert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\nassert solution('2 652') == '-1'\nassert solution('2 653') == '-1'\nassert solution('2 654') == '-1'\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(output())\nprint(solution(str(input())))\n\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\nassert solution(\"10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\\n\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0\\n2\\n0\\n4\\n0') == '3'\n\"\"\""
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n\nfrom collections import Counter\nimport itertools\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n2\\n1\\n1\\n1\") == 1\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0''') == '4'\n\nassert solution('''10\n6 1 1\n0 2 0\n2 1 1\n6 1 1\n8 2 0\n4 4 0\n4 0 0\n2 3 1\n6 1 0\n6 3 1''') == '8'\n\nassert solution('''25\n5 2312 0\n6 2525 2\n7 2429 1\n10 4619 0\n11 3435 1\n12 3255 0\n16 6656 0\n19 6367 0\n22 6572 0\n23 6603 0\n24 6605 0\n26 6617 0\n27 6619 0\n28 6621 0\n29 6623 0\n30 6625 0\n31 6627 0\n32 6629 0\n33 6671 0\n34 6673 0\n35 6679 0\n36 6683 0\n37 6689 0\n38 6691 0\n39 6693 0\n40 6695 0\n41 6697 0\n42 6703 0\n43 6709 0\n44 6711 0\n45 6713 0\n46 6715 0\n47 6717 0\n48 6719 0\n49 6721 0\n50 6723 0\n51 6725 0\n52 6727 0\n53 6729 0\n54 6731 0\n55 6733 0\n56 6735 0\n57 6737 0\n58 6739 0\n59 6741 0\n60 6743 0\n61 6745 0\n62 6747 0\n63 6759 0\n64 6761 0\n65 6763 0\n66 6765 0\n68 6767 0\n69 6769 0\n70 6771 0\n71 6773 0\n72 6775 0\n73 6777 0\n74 6779 0\n75 6781 0\n76 6783 0\n77 6785 0\n78 6787 0\n79 6799 0\n80 6800 0\n81 6803 0\n82 6806 0\n83 6809 0\n84 6811 0\n85 6813 0\n86 6815 0\n87 6817 0\n88 6819 0\n89 6821 0\n90 6823 0\n91 6825 0\n92 6827 0\n93 6829 0\n94 6831 0\n95 6833 0\n96 6835 0\n97 6837 0\n98 6839 0\n99 6841 0\n100 6843 0\n101 6845 0\n102 6847 0\n103 6849 0\n104 6851 0\n105 6853 0\n106 6855 0\n107 6857 0\n108 6859 0\n109 6861 0\n110 6863 0\n111 6865 0\n112 6867 0\n113 6869 0\n114 6871 0\n115 6873 0\n116 6875 0\n117 6877 0\n118 6879 0\n119 6881 0\n120 6883 0\n121 6885 0\n122 6887 0\n123 6899 0\n124 6901 0\n125 6903 0\n126 6905 0\n127 6907 0\n128 6909 0\n129 6911 0\n130 6913 0\n131 6915 0\n132 6917 0\n133 6919 0\n134 6921 0\n135 6923 0\n136 6925 0\n137 6927 0\n138 6929 0\n139 6931 0\n140 6933 0\n141 6935 0\n142 6937 0\n143 6939 0\n144 6941 0\n145 6943 0\n146 6945 0\n147 6947 0\n148 6949 0\n149 6951 0\n150 6953 0\n151 6955 0\n152 6957 0\n153 6959 0\n154 6961 0\n155 6963 0\n156 6965 0\n157 6967 0\n158 6969 0\n159 6971 0\n160 6973 0\n161 6975 0\n162 6977 0\n163 6979 0\n164 6981 0\n165 6983 0\n166 6985 0\n167 6987 0\n168 6989 0\n169 6991 0\n170 6993 0\n171 6995 0\n172 6997 0\n173 6999 0\n174 7000 0\n175 7003 0\n176 7005 0\n177 7007 0\n178 7009 0\n179 7011 0\n180 7013 0\n181 7015 0\n182 7017 0\n183 7029 0\n184 7031 0\n185 7033 0\n186 7035 0\n187 7037 0\n188 7039 0\n189 7041 0\n190 7043 0\n191 7045 0\n192 7047 0\n193 7049 0\n194 7051 0\n195 7053 0\n196 7055 0\n197 7057 0\n198 7059 0\n199 7061 0\n200 7063 0\n201 7065 0\n202 7067 0\n203 7069 0\n204 7071 0\n205 7073 0\n206 7075 0\n207 7077 0\n208 7079 0\n209 7081 0\n210 7083 0\n211 7085 0\n212 7087 0\n213 7089 0\n214 7091 0\n215 7093 0\n216 7095 0\n217 7097 0\n218 7099 0\n219 7101 0\n220 7103 0\n221 7105 0\n222 7107 0\n223 7109 0\n224 7111 0\n225 7113 0\n226 7115 0\n227 7117 0\n228 7119 0\n229 7121 0\n230 7123 0\n231 7125 0\n232 7127 0\n233 7129 0\n234 7131 0\n235 7133 0\n236 7135 0\n237 7137 0\n238 7139 0\n239 7141 0\n240 7143 0\n241 7145 0\n242 7147 0\n243 7149 0\n244 7151 0\n245 7153 0\n246 7155 0\n247 7157 0\n248 7159 0\n249 7161 0\n250 7163 0\n251 7165 0\n252 7167 0\n253 7169 0\n254 7171 0\n255 7173 0\n256 7175 0\n257 7177 0\n258 7179 0\n259 7181 0\n260"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\nassert solution(\"10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\\n\") == \"8\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '4'\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 3\\n3 4 5 7\\n1 2 10') == '0'\nassert solution('3 5 2\\n1 4 7 9 11\\n2 3') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\") == \"0\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\") == \"0\"\nassert solution(\"3 5 2\\n1 4 7 9 11\\n2 3\") == \"2\"\n\"\"\"\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 3\\n3 4 5 7\\n1 2 10') == '0'\n\"\"\""
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 3\\n3 4 5 7\\n1 2 10\\n') == '0'\nassert solution('3 5 2\\n1 4 7 9 11\\n2 3\\n') == '2'"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\") == \"0\"\nassert solution(\"3 5 2\\n1 4 7 9 11\\n2 3\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3 4 5\\n1 2 3\") == \"2\"\n\n\"\"\"\n\nimport math\n\nstdin = open(\"./input.txt\").read()\nlines = stdin.splitlines()\nN, E, D = list(map(int, lines[0].split()))\nnums = list(map(int, lines[1].split()))\nd = list(map(int, lines[2].split()))"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '-1'\nassert solution('5 2 4') == '2'\nassert solution('3 2 4') == '-1'\nassert solution('3 1 2') == '0'\nassert solution('3 1 1') == '-1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\") == '0'\nassert solution(\"3 5 2\\n1 4 7 9 11\\n2 3\") == '2'\n\"\"\"\n\nwith open(\"input.txt\", \"r\") as f:\n    _input = f.readlines()"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 4 3\n3 4 5 7\n1 2 10''') == '0'\nassert solution('''3 5 2\n1 4 7 9 11\n2 3''') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\") == \"0\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n3 2') == '1\\n-2 -1'\nassert solution('1 2\\n3 4') == '3\\n-1 1'\n\n\"\"\"\n\nimport sys\n\ninput_list = [int(x) for x in sys.stdin.read().split()]\na, b = input_list[0], input_list[1]\n\nprint(a/(a+b))\nprint(b/(a+b))\n\nfor i in range(a):\n    print(-(i+2), (i+1))\nfor i in range(b):\n    print(-(i+2), (i+1))\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n3 2') == '1'\nassert solution('1 2\\n3 4') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"3\"\nassert solution(\"1 2\\n2 4\") == \"3\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(r\"1 2\\n3 4\") == \"3\"\nassert solution(r\"1 2\\n5 6\") == \"3\"\nassert solution(r\"1 2\\n7 8\") == \"2\""
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n3 2\\n') == '1\\n-2\\n-1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 3\n3 2\"\"\") == \"\"\"1\n-2 -1\"\"\"\nassert solution(\"\"\"1 2\n3 4\"\"\") == \"\"\"3\n-1 1\"\"\"\n\nassert solution(\"\"\"1 1\n4 2\"\"\") == \"\"\"3\n-1 1\"\"\"\nassert solution(\"\"\"2 2\n3 4\"\"\") == \"\"\"0\n1 1\"\"\"\n\nassert solution(\"\"\"1 2\n1 1\"\"\") == \"\"\"2\n0 1\"\"\""
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\\n-2 -1\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"3\"\nassert solution(\"2 3\\n1 1\") == \"3\"\nassert solution(\"1 2\\n3 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"3\"\n\"\"\"\nimport sys\nfrom collections import Counter\nfrom math import ceil\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINE = INPUT_LINES[1]\nINPUT_DIGITS = list(map(int, INPUT_LINE.split()))\nBOXES_NUMBER = INPUT_DIGITS[0]\nBOX_RATIO = INPUT_DIGITS[1]\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3 4') == '3'\nassert solution('1 2\\n2 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\"\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.adjacent = defaultdict(list)\n\n    def connect(self, a, b):\n        self.adjacent[a].append(b)\n        self.adjacent[b].append(a)\n\n    def connected(self, a, b):\n        return a in self.adjacent[b]\n\n    def get_neighbors(self, a):\n        return self.adjacent[a]\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\\n\") == \"4\\n\"\n\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\\n\") == \"24\\n\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '1'\n\nSample Input 1:\n3\nIVO\nJASNA\nJOSIPA\nSample Output 1:\n4\n\nSample Input 2:\n5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\nSample Output 2:\n24\n\nSample Input 1:\n3\nIVO\nJASNA\nJOSIPA\nSample Output 1:\n4\n\nSample Input 2:\n5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\nSample Output 2:\n24\n\nSample Input 1:\n3\nIVO\nJASNA\nJOSIPA\nSample Output 1:\n4\n\nSample Input 2:\n5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\nSample Output 2:\n24\n\n-----Problem-----\nhttps://uva.onlinejudge.org/external/101/10134.pdf\n\n-----Solution-----\n\n-----Tests-----\n\nTime limit: 12 sec. Memory limit: 512 MB.\nExpected Output:\n4\n\n-----Explanation-----\n\nMARTA\nJASNA\nJOSIPA\nMARICA\n\nOne valid ordering is:\nMARICA\nMARTINA\nJOSIPA\nMARTA\nJASNA\nMARA\nMATO\nIVO\n\n4 valid orderings.\n\n-----Comments-----\n\n'''\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\n\"\"\""
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\"\n\"\"\"\n\nfrom itertools import combinations_with_replacement\n\nn = int(input())\nnames = sorted(input() for _ in range(n))\n\nans = 0\nfor comb in combinations_with_replacement(names, 2):\n    if comb[0][0] == comb[1][0]:\n        continue\n    ans += 1\n\nprint(ans % 1000000007)"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\nIVO\nJASNA\nJOSIPA''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '24'\n\n\"\"\"\n\nimport time\nimport random\n\nstart = time.time()\n\nn = int(input())\nnames = []\nfor i in range(n):\n    names.append(input())\n\nnames.sort()\n\ncnt = 0\n\nwhile names:\n    if len(names) == 1:\n        break\n    name = names.pop(0)\n    while names:\n        next_name = names.pop(0)\n        if name[0] == next_name[0]:\n            cnt += 1\n            break\nprint(cnt)\n\nprint(time.time() - start)\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nIVO\\nJASNA\\nJOSIPA') == 4\n\"\"\""
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\\n\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\\n\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n') == '3'\nassert solution('3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n') == '39'"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n\") == \"3\"\nassert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n\") == \"39\"\n\n\"\"\"\n\nfrom typing import NamedTuple, List\n\n\nclass Positions(NamedTuple):\n    value: int\n    vend: int\n    market_price: int\n    quantity: int\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\"\nassert solution(\"3\\n3 1 2 3\\n4 2 5 6\\n5 6 7 8\") == \"39\""
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\"\nassert solution(\"3\\n2 2 3 8\\n3 1 5 6\\n1 9 4 7\") == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1') == '3', 'incorrect result'\nassert solution('3\\n2 2 3 8\\n3 1 5 6\\n1 9 4 7') == '39', 'incorrect result'\n\"\"\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1') == '3'\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\"\nassert solution(\"3\\n2 3 4 1\\n3 1 5 6\\n1 9 4 7\") == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n\") == \"3\"\nassert solution(\"3\\n1 2 3 8\\n3 1 5 6\\n1 9 4 7\\n\") == \"39\"\n\"\"\""
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1') == 3\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\"\"\") == \"\"\"5.2696518641\"\"\"\nprint(solution(\"\"\"2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\"\"\"))"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == \"5.2696518641\"\n\"\"\"\nimport math"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2\\n5 8 4 -2 0 0 -3 2 0 0 3') == '5.2696518641'\nassert solution('1\\n8 9 3 -14 -14 14 -14 0 20') == '9'\n'''"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1') == '5.2696518641'\nprint('Success')\n\"\"\""
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == \"5.2696518641\"\n\n\"\"\"\n\n\"\"\"\nSolution:\n\nFor each line of the input, perform the following steps:\n- Calculate the bounding box of the contour.\n- Check if the bounding box intersects with the target box.\n- Find the distance from the surface to the line.\n\nTime complexity: O(n * m) where n is the number of lines in the input, and m is the number of vertices in the polygon.\nSpace complexity: O(1).\n\n\"\"\"\n\nfrom math import atan, atan2, inf\nfrom typing import List, Tuple\n\nfrom icontract import require, ensure\n\n\n@require(lambda height: height >= 0)\n@require(lambda width: width >= 0)\n@require(lambda points: len(points) > 0)\n@require(lambda points: points[0]!= points[-1])\n@require(lambda points: all(x0 <= x1 and y0 <= y1 for x0, y0, x1, y1 in points))\n@ensure(lambda result: 0.0 <= result <= inf)\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\n\"\"\""
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\\n') == '5.2696518641'\nprint(solution(stdin))\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == \"5.2696518641\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\\n\") == \"5.2696518641\"\nassert solution(\"1\\n8 9 3 -14 -14 14 -14 0 20\\n\") == \"9\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1\\n2 0 2\\n3 1 1') == '1\\n8\\n4'\nassert solution('4 1 1\\n5 2 3\\n5 0 3') == '6\\n4\\n24'\n\"\"\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n1 1 1\n2 0 2\n3 1 1\n\"\"\"\n) == '1\\n8\\n4\\n'\n\nassert solution(\n\"\"\"\n3\n1 1 1\n2 0 2\n3 1 1\n\"\"\"\n) == '-1\\n'\n\nassert solution(\n\"\"\"\n3\n1 1 1\n2 0 2\n3 1 1\n\"\"\"\n) == '-1\\n'\n\nassert solution(\n\"\"\"\n3\n4 1 1\n5 2 3\n5 0 3\n\"\"\"\n) == '6\\n4\\n24\\n'\n\nassert solution(\n\"\"\"\n3\n4 1 1\n5 2 3\n5 0 3\n\"\"\"\n) == '6\\n4\\n24\\n'"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1\\n2 0 2\\n3 1 1\\n') == '1\\n8\\n4\\n'\nassert solution('4 1 1\\n5 2 3\\n5 0 3\\n') == '6\\n4\\n24\\n'\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 1\\n2 0 2\\n3 1 1\\n') == '1'\nassert solution('3\\n1 1 1\\n2 0 2\\n3 1 1\\n') == '8'\nassert solution('3\\n4 1 1\\n5 2 3\\n5 0 3\\n') == '6'\n\nprint('Hooray!')\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 1\\n2 0 2\\n3 1 1\") == \"1\"\nassert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0\\n4\\n2\") == \"2\"\nassert solution(\"3\\n2\\n2\\n5\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1\\n2 0 2\\n3 1 1') == '1'\nassert solution('3 1 1\\n5 2 3\\n5 0 3') == '6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\\n2 0 2\\n3 1 1\") == '1'\n\nassert solution(\"4 1 1\\n5 2 3\\n5 0 3\") == '6'\n\nassert solution(\"1 1 1\\n3 1 1\") == '1'\n\nassert solution(\"1 1 1\\n3 1 1\") == '-1'\n\nassert solution(\"1 1 1\\n2 0 2\\n3 1 1\") == '1'"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"4 1 1\") == \"6\"\nassert solution(\"5 2 3\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('1 3') == '3'\nassert solution('1 3 2') == '6'\nassert solution('1 3 2 4') == '24'\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"3\"\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n\"\"\"\n\nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\nassert solution('6 4') == '24'\nassert solution('10 100') == '5160'\nassert solution('100 100') == '5160'\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_output(input()))\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n\"\"\""
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 3\\n2 5\\n4 6\\n5 3\\n3 1\\n') == '16'\nassert solution('4 6\\n1 3\\n2 5\\n4 6\\n5 3\\n3 1\\n') == '12'\nassert solution('4 7\\n1 3\\n2 5\\n4 6\\n5 3\\n3 1\\n') == '24'\n\n'''\n\nimport sys"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\nassert solution('3 1') == '0'\nassert solution('100 1') == '0'\n\n\"\"\"\n\nimport unittest\nimport math\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n\"\"\""
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n6 6') == '240'\n\nprint(solution(stdin=input()))\n\n-------------------------"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\nassert solution('QWER+QWER=QWER') == 'impossible'\n\nprint('Success')\n\n-----Notes-----\n\n------Hints------\n\n------Bugs------\n\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\nassert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\nassert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\nassert solution('HE+SEES+TO+SEE=ADARSH') == '1234+5678+9012+1314=123415678'\nassert solution('DOCKER+CLUB=DOCKER+CLUB') == '1111+2222+3333+4444=11111111'\nassert solution('AABAA=ABABA') == '11110+2121+1212+2211=112211111'\n"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'\n\nprint(solution(input()))\n\n'''\n\n\nfrom functools import reduce"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\n\n\n'''"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == solution(s)[::-1]"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 2 3\") == 14\n\"\"\""
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"14\"\nassert solution(\"5\\n1 1 2 1 1\") == \"1\"\nassert solution(\"5\\n1 1 1 2 1\") == \"0\"\nassert solution(\"5\\n5 4 3 2 1\") == \"9\"\n\"\"\""
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 2 3\\n') == '14'\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 2 3\\n') == 14\nprint(solution(stdin=input()))"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 1\\n\") == 14\nassert solution(\"5\\n1 1 2 1 1\\n\") == 1\nassert solution(\"8\\n9 9 9 9 9 9 9 9\\n\") == 0\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 3\") == 14\nassert solution(\"5\\n1 1 2 1 1\") == 1"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 2 3\") == \"14\"\nassert solution(\"5\\n1 1 2 1 1\") == \"1\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\nassert solution('9\\n0 0 1 1 0 1 1 1 1') == '6'\nassert solution('7\\n1 1 1 1 1 1 1 1') == '0'\nassert solution('5\\n0 1 2 3 1') == '6'\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 2 3\\n') == '14'\nassert solution('5\\n1 1 2 1 1\\n') == '1'\nassert solution('5\\n1 5 2 5 3\\n') == '4'\n\n---Problem---\nOn a large ship, the captain has a list of crew members. For each member, he knows their name and age.\n\nThe captain has a list of all the crew members who are older than or equal to the age of the captain (the captain is always the last person in the list).\n\nAt the beginning of each day, all the older members are removed from the list.\n\nGiven the names of the remaining members in order, print the name of the captain on a new line.\n\n---Solution---"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 3\") == \"14\"\nassert solution(\"5\\n1 1 2 1 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n\") == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\n\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\") == 88\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == -1\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 0 7 8\n7 0 0 10''') == '88'\nassert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == '-1'"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n') == 88\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == '88'\n\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == '-1'\n\n\"\"\"\n\nimport math\nimport random\nimport string\nimport re"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n') == '88'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n') == '-1'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n') == '-1'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n') == '-1'"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == '88'\n\nprint(solution(stdin.read()))"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"0.000\"\nassert solution(\"2\\n1 99999\\n99999 99999\") == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1\\n99999 99999\") == \"9999700002.0\"\nassert solution(\"2\\n1 10\\n99999 99999\") == \"9999700002.0\"\nassert solution(\"2\\n1 99999\\n99999 99999\") == \"9999700002.0\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 0\\n3 10\\n4 10\\n5 2') == '0'\nassert solution('4\\n1 10\\n3 10\\n4 2\\n5 2') == '4'\nassert solution('4\\n2 10\\n3 10\\n4 1\\n5 1') == '1'\nassert solution('4\\n1 99999\\n3 99999\\n4 99999\\n5 2') == '9999699992'\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"0.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 1\\n99999 99999\") == \"9999700002.0\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1\\n2 3\\n4 2') == '99991.000'\nassert solution('7\\n4 1\\n5 2\\n2 1\\n3 3\\n4 3\\n6 2') == '99991.000'\n\"\"\"\n\nn = int(input())\narray = []\nfor i in range(n):\n    t, v = list(map(int, input().split()))\n    array.append((t, v))\n\narray.sort(key=lambda x: (x[0], x[1]))\n\nlength = 0\nprev_t, prev_v = array[0]\nfor t, v in array:\n    if t - prev_t < prev_v:\n        length += (t - prev_t) * prev_v\n    else:\n        length += (t - prev_t) * v\n        prev_t, prev_v = t, v\nprint(length)"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n1 99999\n99999 99999\"\"\") == '9999700002.000'\n\n\"\"\"\nimport math"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2\n1 99999\n99999 99999''') == '9999700002.0'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == '0.000'\nassert solution('2 1\\n99999 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"0.0\"\nassert solution(\"2\\n999999 99999\\n99999 99999\") == \"9999700002.0\""
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\n\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == 'Infinity'\n\n'''\n10 7 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n'''\n\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\n\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == 'Infinity'\n\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 3 6 5 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4') == '3'\nassert solution('3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2') == 'Infinity'"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\") == \"3\"\nassert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\") == \"Impossible\"\n\nSample Input 3:\n8 7 1 2\n1 2 4\n1 3 2\n2 3 3\n2 4 1\n2 5 1\n3 6 1\n3 7 1\n3 8 1\n4 8 1\n4 9 1\n5 10 1\n5 11 1\n5 12 1\n5\n1 2 2 1 3 4\nSample Output 3:\n3\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n\"\"\") == \"Infinity\"\n\nassert solution(\"\"\"\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n\"\"\") == \"3\""
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\") == \"3\"\nassert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\") == \"Infinity\"\n\"\"\""
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\n\") == \"Infinity\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n\") == \"3\"\nassert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\n\") == \"Infinity\""
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n') == '3', 'Not correct'\n\nimport numpy as np\n\nstdin = '6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n'"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 1\\n1\\n\") == \"000\\n001\\n011\\n010\\n110\\n111\\n101\\n100\"\nassert solution(\n\"3 4\\n1 3 4\\n\") == \"impossible\"\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n6\\n1\") == \"impossible\"\nassert solution(\"3 1\\n1\") == \"000\\n001\\n011\\n010\\n110\\n111\\n101\\n100\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(0, [1]) == ''\nassert solution(1, [1]) == '0'\nassert solution(1, [2]) == '0 1'\nassert solution(2, [1]) == '00 1'\nassert solution(2, [2]) == '00 01 10 11'\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1\") == \"000\\n001\\n011\\n010\\n110\\n111\\n101\\n100\"\n\nassert solution(\"4 1\\n1\") == \"impossible\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 1\n6\n1\n''') == '''impossible'''\nassert solution('''3 1\n1\n''') == '''000\n001\n011\n010\n110\n111\n101\n100'''\nprint('Passed!')"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"impossible\"\nassert solution(\"3 1\") == \"011\"\nassert solution(\"5 1\") == \"impossible\"\nassert solution(\"3 4\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '6 1\\n6'\n) == 'impossible'\n\nassert solution(\n    '3 1\\n1'\n) == '000\\n001\\n011\\n010\\n110\\n111\\n101\\n100'\n\"\"\"\nimport sys"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\n6\") == \"impossible\"\nassert solution(\"3 1\\n1\") == \"000\\n001\\n011\\n010\\n110\\n111\\n101\\n100\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('10') == 'impossible'\nassert solution('6 1\\n6\\n1') == '100'\nassert solution('3 1\\n1\\n3') == '111\\n010\\n101'\nassert solution('3 1\\n1\\n2') == '110\\n010\\n011'\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n99\") == 1\nassert solution(\"90\\n10\") == 10\n\"\"\""
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n99\") == \"1\"\nassert solution(\"90\\n10\") == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\", \"99\") == \"1\"\nassert solution(\"90\", \"10\") == \"10\"\n\"\"\"\n\nstdin = input()\na = int(stdin[:stdin.index(\" \")])\nb = int(stdin[stdin.index(\" \") + 1:])\n\nprint(min(1, abs(a - b) - 1))\n"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n99\") == \"1\"\nassert solution(\"90\\n10\") == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n99\") == 1\nassert solution(\"90\\n10\") == 10\n\nprint(solution(\"10\\n99\"))\nprint(solution(\"90\\n10\"))\n\n'''\n"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n99\") == \"1\"\nassert solution(\"90\\n10\") == \"10\"\n\"\"\"\n\nstdin = input()\nstdout = solution(stdin)\nprint(stdout)"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n99\") == 1\nassert solution(\"90\\n10\") == 10"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n99\") == \"1\"\nassert solution(\"90\\n10\") == \"10\"\nassert solution(\"1000\\n10000\") == \"10\""
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n99\") == '1'\nassert solution(\"90\\n10\") == '10'\n\"\"\""
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123) == 3\nassert solution(984) == 2\nassert solution(1) == 0\nassert solution(9) == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 3\\n4 1 10\\n2 7 3\") == \"2\"\n\nprint(solution(input()))\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '1\\n2\\n3\\n4\\n5\\n6\\n7'"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 3\\n4 1 10\\n2 7 3') == '2'\n\nassert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6') == '1'\n\nassert solution('3\\n2 3 3\\n4 1 10\\n2 7 3') == '2'\n\nassert solution('4\\n2 3 3 3\\n5 8 7 10\\n4 1 2 6') == '1'\n\nassert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6') == '2'"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 6\") == \"1\"\nassert solution(\"5 8 7 10\") == \"1\"\nassert solution(\"3 1 3 3\") == \"2\"\nassert solution(\"3 1 3 3\") == \"2\"\nassert solution(\"4 1 3 3\") == \"2\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\\n4 1 10\\n2 7 3\") == \"2\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6') == '1'\nassert solution('4\\n1 2 3 4\\n5 8 7 10\\n4 1 2 6') == '2'"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 3\\n4 1 10') == '2'\nassert solution('3\\n1 3 3\\n5 8 7 10') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 3 3\") == 2\nassert solution(\"4 1 10\") == 1\nassert solution(\"5 8 7 10\") == 1\nassert solution(\"4 1 2 6\") == 1\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split(\" \")))\nP = list(map(int, input().split(\" \")))\nV = list(map(int, input().split(\" \")))\n\nres = 0\ncur_max = 0\nfor i in range(N):\n    if V[A[i] - 1] > cur_max:\n        res += 1\n        cur_max = V[A[i] - 1]\n    else:\n        cur_max = V[A[i] - 1]\n\nprint(res)\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 6\") == \"1\"\nassert solution(\"5 8 7 10\") == \"1\"\nassert solution(\"3 1 3 3\") == \"2\"\nassert solution(\"3 1 3 3\") == \"2\"\n\"\"\"\n\n\nfrom collections import Counter\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('beginning') == '5'\nassert solution('velvet') == '7'\n\n------Solution------\nfor _ in range(int(stdin.readline().strip())):\n    n, q = [int(x) for x in stdin.readline().strip().split(' ')]\n    s = stdin.readline().strip()\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.readline().strip().split(' ')]\n        s = s[:l-1] + s[l-1:r] + s[r:]\n        n = len(s)\n        print(sum(1 for i in range(n) for j in range(i+1, n) if s[i] == s[j] and s[i:j+1] in ['', 'a', 'e', 'i', 'o', 'u']))\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"beginning\") == 5\nassert solution(\"velvet\") == 7\n\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"beginning\") == \"5\"\nassert solution(\"velvet\") == \"7\"\n\nprint('\\u2713', 'tests passed')\n\n\"\"\""
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"acac\") == \"acac\"\nassert solution(\"xxcc\") == \"xxcc\"\nassert solution(\"xxca\") == \"acxc\"\nassert solution(\"xyza\") == \"xyza\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"beginning\") == \"5\"\nassert solution(\"1 5\") == \"11\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        n, q = [int(x) for x in stdin.readline().split()]\n        s = stdin.readline().strip()\n        for i in range(q):\n            l, r = [int(x) for x in stdin.readline().split()]\n            n_pal = 0\n            for i in range(l, r+1):\n                if i == 0 or i == r:\n                    n_pal += 1\n                else:\n                    if s[i-1] == s[i] and s[i-1] == s[r]:\n                        n_pal += 1\n                    elif s[i-1] == s[i] and s[i]!= s[r]:\n                        n_pal += 1\n                    elif s[i-1]!= s[i] and s[i] == s[r]:\n                        n_pal += 1\n            print(n_pal)"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('beginning') == 5\n\"\"\""
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"1\"\nassert solution(\"aaaaa\") == \"0\"\nassert solution(\"ababbba\") == \"4\"\nassert solution(\"ababab\") == \"8\"\nassert solution(\"ababaa\") == \"0\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('beginning') == '8'\nassert solution('velvet') == '7'\nprint(solution('beginning'))\nprint(solution('velvet'))\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"beginning\") == \"g\"\nassert solution(\"level\") == \"l\"\nassert solution(\"madam\") == \"m\"\nassert solution(\"label\") == \"l\"\nassert solution(\"maxim\") == \"m\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"beginning\") == \"1\"\nassert solution(\"12345\") == \"5\"\nassert solution(\"abcdcba\") == \"2\"\nassert solution(\"kitten\") == \"4\"\nassert solution(\"awkward\") == \"7\"\n\"\"\"\n\nn, q = map(int, input().split())\ns = input()"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 23\\n2 17\") == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n3 1\\n2 2\\n1 1') == '2'\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 4\") == \"3\"\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\n\ndetectors = [0] * (N+1)\nfor i in range(N):\n    P, C = map(int, stdin.readline().split())\n    detectors[P] += C\n\ncalls = 0\nfor i in range(1, M+1):\n    calls += detectors[i]\n\nprint(calls)\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n3 1\\n2 2\\n1 1') == 2\n\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == \"2\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 3\\n') == 2\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nm = {}\nfor i in range(N):\n    a, b = map(int, sys.stdin.readline().split())\n    m[a] = b"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 23\\n2 17\") == \"23\"\nassert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == \"2\""
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 5\\n0 1\\n1 3\\n0 1\\n3 3') == '1'\nassert solution('4 4\\n1 3\\n1 3\\n0 1\\n0 1') == '2'\nassert solution('4 6\\n1 1\\n2 2\\n1 1\\n1 1\\n1 1') == '4'\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == \"2\"\nassert solution(\"2 3\\n1 23\\n2 17\") == \"23\"\n\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4\n3 1\n2 2\n1 1''') == '2'\nassert solution('''2 3\n1 23\n2 17''') == '23'\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == \"0.0000000000\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == \"0.0000000000\"\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n\") == \"9.476048311178\"\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.cornFields = 0\n\n    def isPolygonNonIntersecting(self, pointList):\n        for i in range(0, len(pointList)):\n            point = pointList[i]\n            if (i == 0):\n                prevPoint = pointList[-1]\n            else:\n                prevPoint = pointList[i - 1]\n            if (i == len(pointList) - 1):\n                nextPoint = pointList[0]\n            else:\n                nextPoint = pointList[i + 1]\n            if (point[0] == prevPoint[0] and point[1] == prevPoint[1]) or (point[0] == nextPoint[0] and point[1] == nextPoint[1]):\n                return False\n            if (point[0] == prevPoint[0] and point[1] == nextPoint[1]) or (point[0] == nextPoint[0] and point[1] == prevPoint[1]):\n                return False\n        return True\n\n    def isPolygonCollinear(self, pointList):\n        for i in range(0, len(pointList)):\n            point = pointList[i]\n            if (i == 0):\n                prevPoint = pointList[-1]\n            else:\n                prevPoint = pointList[i - 1]\n            if (i == len(pointList) - 1):\n                nextPoint = pointList[0]\n            else:\n                nextPoint = pointList[i + 1]\n            if ((point[0] - prevPoint[0]) * (nextPoint[1] - point[1]) == (nextPoint[0] - point[0]) * (point[1] - prevPoint[1])):\n                return False\n        return True\n\n    def solution(self, stdin):\n        if (self.isPolygonNonIntersecting(stdin) and self.isPolygonCollinear(stdin)):\n            pointList = []\n            for point in stdin:\n                pointList.append(list(map(float, point.split())))\n            pointList.append(pointList[0])\n            cornFields = 0\n            for i in range(1, len(pointList) - 1):\n                p1 = pointList[i - 1]\n                p2 = pointList[i]\n                p3 = pointList[i + 1]\n                h = abs(p1[1] - p3[1])\n                a = abs(p2[0] - p1[0])\n                b = abs(p2[0] - p3[0])\n                if (h * a == b * a):\n                    cornFields += 1\n                else:\n                    cornFields += a * b\n            self.cornFields = cornFields\n        return self.cornFields\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == \"0.0000000000\"\n\n\"\"\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0 0\\n') == '0.0'\nassert solution('0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n') == '0.0'\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == \"0.0\"\n\n\"\"\"\nimport math\n\nclass Line:\n    def __init__(self, x1, y1, x2, y2):\n        self.x1, self.y1, self.x2, self.y2 = x1, y1, x2, y2\n    \n    def __str__(self):\n        return f'Line: ({self.x1}, {self.y1}) to ({self.x2}, {self.y2})'\n\n    @staticmethod\n    def from_two_points(x1, y1, x2, y2):\n        return Line(x1, y1, x2, y2)\n\nclass Point:\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n    \n    def __str__(self):\n        return f'({self.x}, {self.y})'\n\n    @staticmethod\n    def from_line(x1, y1, x2, y2):\n        return Point(x1, y1)\n\nclass Can:\n    def __init__(self, x1, y1, x2, y2):\n        self.p1 = Point.from_line(x1, y1, x2, y2)\n        self.p2 = Point.from_line(x2, y2, x1, y1)\n\n    def __str__(self):\n        return f'Can: ({self.p1.x}, {self.p1.y}) to ({self.p2.x}, {self.p2.y})'"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\") == '0.0'\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\") == '9.476048311178'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == \"0.0000000000\"\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n\") == \"9.47604831117\"\n\n\"\"\"\n\n\n\n\"\"\"\nGiven a list of lists of strings, compute a list of lists with the strings\nsorted lexicographically. Use the standard library `sorted()` function and\n`key=` to specify a function to generate the sorting key for each string.\n\"\"\"\nfrom typing import List, Union\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3''') == '0.0000000000'\nassert solution('''6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0''') == '9.476048311178'\n\n\"\"\"\n\nimport math\nfrom typing import List, Dict, Tuple, Set, Optional"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\nassert solution('6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0') == '9.476048311178'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == \"0.0000000000\"\n\n\"\"\"\n\nfrom typing import List\nfrom math import inf"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0000000000\"\n\"\"\""
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0'\n\"\"\"\n\n\n\"\"\"\nSolution 2\n\"\"\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0000000000\"\n\"\"\""
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 8.0\n\"\"\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0\"\nassert solution(\"5\\n0.2 0\\n0 -0.2\\n0.0 0\\n-0.2 0\") == \"0.0200000000\"\nassert solution(\"5\\n0.2 0\\n0 -0.2\\n0.0 0\\n-0.2 0\") == \"0.0200000000\"\n\"\"\""
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n\") == \"8.0\"\n\"\"\"\n\n\nfrom fractions import Fraction"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n2 0\n1 1\n0 2\n-2 0\n0 -2''') == '8.0000000000'\nassert solution('''5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20''') == '0.0200000000'"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9') == 2\n\"\"\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''9 4 3\n1 1 9 9 1 6 6 39 9\n''') == 2\n\"\"\"\nimport itertools"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3\\n1 1 9 9 1 6 6 39 9') == '2'\nassert solution('5 3 2\\n1 1 1 1 1 2 2 2 2 2') == '2'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9') == 2\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom typing import List, Tuple, Callable, Any\n\nfrom icontract import require, ensure\n\nEQUAL_TO_ZERO = 0.0\n\n\nclass RangeOfSegments:\n    \"\"\"Represent a range of segments.\"\"\"\n\n    def __init__(self, min_segment: float, max_segment: float) -> None:\n        self.min_segment = min_segment\n        self.max_segment = max_segment\n\n    def __repr__(self) -> str:\n        return f'RangeOfSegments({self.min_segment}, {self.max_segment})'\n\n    @staticmethod\n    def from_segments(segments: List[float]) -> RangeOfSegments:\n        \"\"\"Represent a range of segments.\"\"\"\n        return RangeOfSegments(min_segment=min(segments), max_segment=max(segments))\n\n\nclass RangeOfTeams:\n    \"\"\"Represent a range of teams.\"\"\"\n\n    def __init__(self, min_segment: float, max_segment: float) -> None:\n        self.min_segment = min_segment\n        self.max_segment = max_segment\n\n    def __repr__(self) -> str:\n        return f'RangeOfTeams({self.min_segment}, {self.max_segment})'\n\n    @staticmethod\n    def from_segments(segments: List[float]) -> RangeOfTeams:\n        \"\"\"Represent a range of teams.\"\"\"\n        return RangeOfTeams(\n            min_segment=min(segments),\n            max_segment=max(segments),\n        )\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 3\\n1 1 9 9 1 6 6 39 9\") == 2\n\"\"\"\n\nN, K, C = [int(i) for i in stdin.readline().split()]\n\nteams = [int(i) for i in stdin.readline().split()]\n\ndic = {}\nfor i in teams:\n    dic[i] = dic.get(i,0)+1\n\nflag = 0\nfor i in dic:\n    if dic[i] < K:\n        flag = 1\n        break\n\nprint(flag)"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.test_cases[0]) == solution(solution.test_cases[0])\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9') == 2\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 4 3\\n1 1 9 9 1 6 6 39 9\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9') == 2\nassert solution('10 2 2\\n1 1 1 1 1 2 2 2 2 2') == 2"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9') == 2\nprint(solution(stdin))\n\n-----Explanation-----\nSample Input 1:\n9 4 3\n1 1 9 9 1 6 6 39 9\nThe best strategy is to sell only to the team 1 and 2.\n\nSample Input 2:\n10 2 2\n1 1 1 1 1 2 2 2 2 2\nThe best strategy is to sell only to the team 1 and 2.\n\"\"\""
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 2\\n1 2 3') == '3.666666667'\nassert solution('4 11 4\\n10 10 10 10') == '20.000000000'\n\"\"\"\n\n\"\"\"\nThe group size of group of size k arrives in a random order, so it can happen that for the same hour, k groups arrive, each of size k, without the groups of size k-1, k-2,... being there yet.\n\"\"\"\n\nimport numpy as np\n\nN, G, T = [int(i) for i in input().split()]\nC = np.array([int(j) for j in input().split()])\n\noccupancy = G*np.min(C)\n\nfor t in range(T):\n    arrivals = np.array([int(i) for i in input().split()])\n    occupancy += np.sum(arrivals*C)\n    occupancy -= np.sum(arrivals*(C-1))\n\nprint(occupancy)"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\\n1 2 3\") == \"3.666666667\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 2\\n1 2 3\\n') == '3.666666667'\nassert abs(solution('4 11 4\\n10 10 10 10\\n') - 20) <= 10 ** (-6)\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\\n1 2 3\\n\") == \"3.666666667\"\nassert solution(\"4 11 4\\n10 10 10 10\\n\") == \"20.000000000\"\n\"\"\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 2\\n1 2 3') == '3.666666667'\nassert solution('4 11 4\\n10 10 10 10') == '20.000000000'\n\"\"\"\n\nimport sys\n\nN, G, T = tuple(map(int, sys.stdin.readline().split()))\nC = list(map(int, sys.stdin.readline().split()))\n\nE = [0] * (T + 1)\n\nfor t in range(T + 1):\n    E[t] = E[t - 1]\n    for c in C:\n        E[t] += E[t - c] / c\n\nprint(E[T])\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open('./sample-input.txt', 'r').read()) == '7.0'\nassert solution(open('./input.txt', 'r').read()) == '2.833333333'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3 2\n1 2 3''') == '3.666666667'\nassert solution('''4 11 4\n10 10 10 10''') == '20.000000000'\n\n\"\"\"\n\nimport sys\n\nn, g, t = map(int, sys.stdin.readline().split())\ntable = list(map(int, sys.stdin.readline().split()))\n\nn_people = 0\nfor i in range(n):\n    n_people += table[i] // g\n    if n_people >= t:\n        break"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 2\\n1 2 3') == 3.666666667\nassert solution('4 11 4\\n10 10 10 10') == 20\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 2\\n1 2 3') == '3.666666667'\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 42\") == 2\n\n\"\"\""
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 42\") == 2\nassert solution(\"5 123456789\") == 16317634\n\"\"\"\n\nimport math\n\nn, m = input().split()"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 42''') == '2'\nassert solution('''5 123456789''') == '16317634'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 42\") == 2\nassert solution(\"5 123456789\") == 16317634\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 42\") == 2\nassert solution(\"5 123456789\") == 16317634\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n\"\"\""
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 42\") == 2\nassert solution(\"5 123456789\") == 16317634\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 42') == 2\nassert solution('5 123456789') == 16317634\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"1 2 2\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"1 2 2\") == \"1\"\n\nimport sys"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 0 0 2\\n1 2 2\\n1 1 1\\n') == '0'\nassert solution('3 1 1 1 8\\n0 1 1\\n1 0 1\\n2 1 1\\n1 2 1\\n2 2 3\\n0 2 5\\n1 2 6\\n') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 0 0 2') == '0'\n\"\"\""
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"1 2 2\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n\"\"\""
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 0 0 2\\n1 2 2\\n1 1 1\") == 0\n\"\"\"\n\nn, e, sx, sy, c = map(int, stdin.readline().split())\nl = [[0] * n for _ in range(n)]\nfor _ in range(c):\n    x, y, t = map(int, stdin.readline().split())\n    l[y - 1][x - 1] = t\n\nres = 0\nfor i in range(n):\n    for j in range(n):\n        if l[i][j] == 0:\n            continue\n        for k in range(1, n - i + 1):\n            for m in range(1, n - j + 1):\n                if k + m > n - i - j:\n                    break\n                t = l[i][j]\n                for p in range(k):\n                    t = min(t, l[i + p][j + p])\n                for q in range(k):\n                    t = min(t, l[i + k - 1][j + p])\n                for r in range(m):\n                    t = min(t, l[i + k][j + r])\n                for s in range(m):\n                    t = min(t, l[i + p][j + m - 1])\n                l[i + k - 1][j + m - 1] = t\n                if t!= l[i + k - 1][j + m - 1]:\n                    res += t\n                    for tt in range(k):\n                        l[i + tt][j + m - 1] = 0\n                    for tt in range(m):\n                        l[i + k - 1][j + tt] = 0\nprint(res)\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 0 0 2\\n1 2 2\\n1 1 1\\n') == '0'\nassert solution('3 1 1 1 8\\n0 1 1\\n1 0 1\\n2 1 1\\n1 2 1\\n1 2 2\\n2 2 3\\n0 2 5\\n1 2 6\\n') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 0 0 2\\n1 2 2\\n1 1 1\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 0 0 2\\n1 2 2\\n1 1 1\") == \"0\"\nassert solution(\"3 1 1 1 8\\n0 1 1\\n1 0 1\\n2 1 1\\n1 2 1\\n2 2 3\\n0 2 5\\n1 2 6\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1\\n') == '0'\nassert solution('1 1 1 1\\n5 1\\n4 6\\n4 7\\n7 9\\n') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 100 100\", \"27 75\", \"79 77\", \"40 93\", \"62 41\", \"52 45\") == 3\n\"\"\"\n\nfrom typing import List, Tuple, Optional, Set\n\n\nclass Point(Tuple[int, int]):\n    def __init__(self, x: int, y: int):\n        super().__init__(x, y)\n\n    def __add__(self, other: Tuple[int, int]) -> \"Point\":\n        return Point(self[0] + other[0], self[1] + other[1])\n\n    def __sub__(self, other: Tuple[int, int]) -> \"Point\":\n        return Point(self[0] - other[0], self[1] - other[1])\n\n    def __mul__(self, other: int) -> \"Point\":\n        return Point(self[0] * other, self[1] * other)\n\n    def __truediv__(self, other: int) -> \"Point\":\n        return Point(self[0] / other, self[1] / other)\n\n    def __str__(self) -> str:\n        return f\"({self[0]}, {self[1]})\"\n\n    @property\n    def x(self) -> int:\n        return self[0]\n\n    @property\n    def y(self) -> int:\n        return self[1]\n\n\nclass Line:\n    def __init__(self, start: Point, end: Point):\n        self.start: Point = start\n        self.end: Point = end\n\n    def get_distance(self, point: Point) -> int:\n        return (self.start - point).magnitude() + (self.end - point).magnitude()\n\n\nclass Track:\n    def __init__(self, w: int, h: int, n: int):\n        self.w: int = w\n        self.h: int = h\n        self.n: int = n\n        self.lines: List[Line] = []\n        self.gems: List[Point] = []\n        self.build_track()\n\n    def build_track(self) -> None:\n        self.build_start_line()\n        self.build_gems()\n        self.build_finish_line()\n\n    def build_start_line(self) -> None:\n        start = Point(0, 0)\n        end = Point(self.w, 0)\n        self.lines.append(Line(start, end))\n\n    def build_finish_line(self) -> None:\n        start = Point(self.w, self.h)\n        end = Point(0, self.h)\n        self.lines.append(Line(start, end))\n\n    def build_gems(self) -> None:\n        for _ in range(self.n):\n            x, y = map(int, input().split())\n            self.gems.append(Point(x, y))\n\n    def find_closest_gem(self, point: Point) -> Optional[Point]:\n        return min(self.gems, key=lambda gem: abs(gem - point))\n\n    def find_closest_line(self, point: Point) -> Line:\n        return min(self.lines, key=lambda line: line.get_distance(point))\n\n    def is_within_track(self, point: Point) -> bool:\n        return point[0] >= 0 and point[0] < self.w and point[1] >= 0 and point[1] < self.h\n\n    def find_points_on_line(self, line: Line, point: Point) -> Set[Point]:\n        left_point = Point(point.x, point.y) + Point(-line.get_distance(point), 0)\n        right_point = Point(point.x, point.y) + Point(line.get_distance(point), 0)\n        if left_point == point:\n            return {point, right_point}\n        return {left_point, right_point}\n\n    def find_points_on_line_with_intersection(self, line: Line, point: Point) -> Set[Point]:\n        line_distance = line.get_distance(point)\n        left_point = Point(point.x, point.y) + Point(-line_distance, 0)\n        right_point = Point(point.x, point.y) + Point(line_distance, 0)\n        top_point = Point(point.x, point.y) + Point(0, -line_distance)\n        bottom_point = Point(point.x, point.y) + Point(0, line_distance)\n        if left_point == point or top_point == point or bottom_point == point:\n            return {point, left_point, right_point, top_point, bottom_point}\n        return {top_point, bottom_point, left_point, right_point}\n\n    def is_intersection_on_line(self, line1: Line, line2: Line, point: Point) -> bool:\n        return line1.start in self.find_points_on_line_with_intersection(line2, point) or line1.end in self.find_points_on_line_with_intersection(line2, point)\n\n    def is_intersection_on_line_with_point(self, line1: Line, line2: Line, point: Point) -> bool:\n        return line1.start in self.find_points_on_line(line2, point) or line1.end in self.find_points_on_line(line2, point)\n\n    def is_intersection(self, line1: Line, line2: Line) -> bool:\n        return self.is_intersection_on_line(line1, line2, Point(0, 0))\n\n    def is_intersection_with_point(self, line1: Line, line2: Line, point: Point) -> bool:\n        return self.is_intersection_on_line_with_point(line1, line2, point)\n\n    def find_intersection_of_line_and_track(self, line: Line, point: Point) -> Optional[Point]:\n        min_distance = self.w + self.h + 1\n        closest_gem = None\n        for gem in self.gems:\n            distance = (point - gem).magnitude()\n            if distance <= min_distance:\n                min_distance = distance\n                closest_gem = gem\n        if min_distance <= point.magnitude() and"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == '3'\nassert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 10 10\\\\n8 8\\\\n5 1\\\\n4 6\\\\n4 7\\\\n7 9\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == 3\n\"\"\"\n\n\"\"\"\nr_ratio * v_speed = h_speed_max\n\nv_speed = h_speed_max / r_ratio\nr_speed = v_speed / r_ratio\n\n\"\"\""
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('123\\n') == '123'\nassert solution('5\\n1\\n10\\n10\\n10\\n') == '5'\nassert solution('5\\n1\\n10\\n10\\n10\\n10\\n') == '5'\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45\\n\") == 3\n\ntry:\n    assert solution(\"5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45\\n\") == 3\nexcept AssertionError:\n    print(\"WA\")\nelse:\n    print(\"AC\")\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == '3'\nassert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == '3'\nassert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == '3'\nassert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == '3'\nassert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == '3'\nassert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == '3'"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('ABC') == ''\nassert solution('ABCABC') == ''\nassert solution('ABCABCC') == ''\nassert solution('ABCABCABC') == ''\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == -1\nassert solution('ABC') == -1\nassert solution('ABC') == -1\nassert solution('ABC') == -1\nassert solution('ABC') == -1\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC') == 2\nassert solution('ABCABC') == 0\nassert solution('ABCABCABC') == 0\nassert solution('ABCABCABCC') == 3\n\nassert solution('ABBBAAAA') == 3\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABBBCC\") == 3\nassert solution(\"ABCBAAAA\") == -1\nassert solution(\"AABC\") == 0\nassert solution(\"ABBBCCAA\") == 6\n\n\"\"\"\n\n\"\"\"\n2\u3064\u306e\u30ea\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u95a2\u6570\u3000\n\"\"\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == -1\nassert solution('CCCCAAAC') == -1\nassert solution('AABBAAAA') == -1\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == -1\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"CCCCAAAC\") == 3\n\"\"\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 2\n\"\"\""
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 2\n\"\"\"\n\n\"\"\"\npublic class Q_0304_Unique_Paths_II {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        int n = scanner.nextInt();\n        int[][] matrix = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = 1;\n                if (i > 0) {\n                    dp[i][j] += dp[i - 1][j];\n                }\n                if (j > 0) {\n                    dp[i][j] += dp[i][j - 1];\n                }\n            }\n        }\n        System.out.println(dp[m - 1][n - 1]);\n    }\n}\n\"\"\"\n\n\"\"\"\npublic class Q_0304_Unique_Paths_II {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        int n = scanner.nextInt();\n        int[][] matrix = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = 1;\n                if (i > 0) {\n                    dp[i][j] += dp[i - 1][j];\n                }\n                if (j > 0) {\n                    dp[i][j] += dp[i][j - 1];\n                }\n                if (i > 0 && j > 0) {\n                    dp[i][j] -= dp[i - 1][j - 1];\n                }\n            }\n        }\n        System.out.println(dp[m - 1][n - 1]);\n    }\n}\n\"\"\"\n\n\"\"\"\npublic class Q_0304_Unique_Paths_II {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        int n = scanner.nextInt();\n        int[][] matrix = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = 1;\n                if (i > 0) {\n                    dp[i][j] += dp[i - 1][j];\n                }\n                if (j > 0) {\n                    dp[i][j] += dp[i][j - 1];\n                }\n                if (i > 0 && j > 0) {\n                    dp[i][j] -= dp[i - 1][j - 1];\n                }\n            }\n        }\n\n        int cnt = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0) {\n                    cnt += dp[i][j];\n                }\n            }\n        }\n        System.out.println(cnt);\n    }\n}\n\"\"\"\n\n\"\"\"\npublic class Q_0304_Unique_Paths_II {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        int n = scanner.nextInt();\n        int[][] matrix = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = 1;\n                if (i > 0) {\n                    dp[i][j] += dp[i - 1][j];\n                }\n                if (j > 0) {\n                    dp[i][j] += dp[i][j - 1];\n                }\n                if (i > 0 && j > 0) {\n                    dp[i][j] -= dp[i - 1][j - 1];\n                }\n            }\n        }\n\n        int cnt = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0) {\n                    cnt += dp[i][j];\n                }\n            }\n        }\n        System.out.println(cnt);\n    }\n}\n\"\"\"\n\n\"\"\"\npublic class Q_0304_Unique_Paths_II {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        int n = scanner.nextInt();\n        int[][] matrix = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = 1;\n                if (i > 0) {\n                    dp[i][j] += dp[i - 1][j];\n                }\n                if (j > 0) {\n                    dp[i][j] += dp[i][j - 1];\n                }\n                if (i > 0 && j > 0) {\n                    dp[i][j] -= dp[i - 1][j - 1];\n                }\n            }\n        }\n\n        int cnt = 0;\n        for (int i = 0; i < m"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == -1\nassert solution(\"ABBBAAAA\") == 3\n\n\"\"\""
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == -1\nassert solution('ABCABC') == 1\nassert solution('ABCABCABC') == 1\nassert solution('ABCABCABCABC') == 0\nassert solution('ABC') == -1\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nA\\nB\\nAA\\nBBB\\nAAA') == 3"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\nA\nB\nAA\nBBB\nAAA\n\"\"\") == 3\nassert solution(\"\"\"\n5\nA\nABA\nBBB\nABABA\nAAAAAB\n\"\"\") == 3\nassert solution(\"\"\"\n5\nA\nAA\nBBB\nABABA\nAAAAAB\n\"\"\") == 3\nassert solution(\"\"\"\n5\nAA\nAAA\nBBB\nABABA\nAAAAAB\n\"\"\") == 3\nassert solution(\"\"\"\n5\nAA\nAAA\nBBB\nABABA\nAAAAAB\n\"\"\") == 3\n\n-----Explanation-----\nThe longest subsequence is \"ABA\" or \"AA\", and the Loda can make three teleportations.\n\n\"\"\""
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\nA\nB\nAA\nBBB\nAAA\"\"\") == 3\n\n\"\"\""
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == n\n\n\"\"\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nA\\nB\\nAA\\nBBB\\nAAA') == 3\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import Callable, List"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AAABABAAAABAB\") == 3\nassert solution(\"AAAAAB\") == 1\n\"\"\""
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nA\\nB\\nAA\\nBBB\\nAAA\") == 3\nprint(solution(\"5\\nA\\nABA\\nBBB\\nABABA\"))\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCDABCD\") == \"ABCDABCD\"\nassert solution(\"ABCD\") == \"A\"\nassert solution(\"ABABCD\") == \"ABABCD\"\nassert solution(\"ABBBABCD\") == \"ABCD\"\nassert solution(\"ABABAABAABAB\") == \"ABAB\"\n\nprint(solution(\"ABABAABAABAB\"))\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('ABA') == 'ABA'\nassert solution('ABAB') == 'AB'\nassert solution('AAABB') == 'AB'\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n\nprint(solution(\"100 10 2 1\"))\nprint(solution(\"100 10 2 2\"))"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n\n-----\n\nSolution 1\n\n-----\n\n\"\"\""
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 10 2 1\") == '0.1'\nassert solution(\"100 10 2 2\") == '0.1909090909'\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 10 2 1') == '0.1'\n\"\"\""
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n\n\"\"\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n\"\"\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n\"\"\"\n\nm, n, t, p = [int(s) for s in input().split()]\n\nprint(round(p / m * (n / t), 9))\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\nassert solution(\"10 10 2 1\") == \"0.1\"\nassert solution(\"10 10 2 2\") == \"0.1909090909\"\n\"\"\"\nimport random"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABABABcABABAbAbab') == 4\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''ABABABcABABAbAbab''') == '4'\nassert solution('''AAABbab''') == '3'\nassert solution('''ABABABcABABAbAbab''') == '4'\nassert solution('''ABCDEFGHIJKLIMNOQRSTUVWXYZ''') == '26'\nassert solution('''AAAAABBBBBB''') == '2'\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABaBBABBcABbab\") == \"4\"\nassert solution(\"aabb\") == \"2\"\nassert solution(\"abb\") == \"1\"\nassert solution(\"ABCabcdefgABabcdefgABC\") == \"7\"\nassert solution(\"ABCabcdefgABabcdefgABC\" * 2) == \"7\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"0\"\nassert solution(\"ABABABcABABAbAbab\") == \"5\"\n\n\"\"\"\n\n\nfrom typing import Dict, List\nimport unittest\n\n\nclass Solution:\n    def __init__(self, stdin: str) -> None:\n        self.string = stdin\n        self.length = len(stdin)\n        self.trades: Dict[str, List[int]] = {}\n\n    def add_trade(self, trade: str) -> None:\n        if trade not in self.trades:\n            self.trades[trade] = [0] * self.length\n\n    def add_trade_at_index(self, trade: str, index: int) -> None:\n        self.add_trade(trade)\n        self.trades[trade][index] = self.trades[trade][index] + 1\n\n    def trade_sequences_longest(self) -> int:\n        if not self.trades:\n            raise ValueError(\"Nothing to trade\")\n\n        trades_longest = 0\n\n        for t1, l in self.trades.items():\n            for i1 in range(self.length):\n                l1 = self.trades[t1][i1]\n                for t2, l2 in self.trades.items():\n                    for i2 in range(self.length):\n                        l2 = self.trades[t2][i2]\n                        if t1 == t2:\n                            continue\n\n                        l3 = l1 + l2\n                        if l3 < self.trades[t2][i2]:\n                            continue\n\n                        self.add_trade_at_index(t2, i2)\n                        if l3 > trades_longest:\n                            trades_longest = l3\n\n        return trades_longest\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == 4\n\"\"\"\n\n\"\"\"\nREADME\n========\n\nPython:\n    -\n\n\ubb38\uc81c:\n    -\n\n\ub0b4\uc6a9:\n    -\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\nABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n''') == '''\n4\n0\n5\n'''\n\n\"\"\"\n\nfrom typing import Callable\n\nimport sys\n\nstdin = sys.stdin\n\ni = stdin.readline()\nlength_a = int(i)\na = stdin.readline()\n\nq = int(stdin.readline())\n\nassert q >= 1 and q <= 100000\n\nseq = []\n\nfor _ in range(q):\n    i, j = (int(k) for k in stdin.readline().split())\n    assert i >= 0 and i < length_a\n    assert j >= 0 and j < length_a\n    assert i!= j\n    seq.append((i, j))\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABaBcABABbAbab') == '4'\nassert solution('ABaBcABABAbAbab') == '5'\nassert solution('ABaBcABABAbAbab') == '5'\nassert solution('ABaBcABABAbAbab') == '5'\nassert solution('ABaBcABABAbAbab') == '5'\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABABABcABABAbAbab') == 4\n\"\"\"\n\ns = stdin.split('\\n')[0]"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"ABABABcABABAbAbab\"\n) == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == 4\n\"\"\""
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n0\\n1') == 2\nassert solution('1\\n0\\n1\\n2\\n3\\n2\\n1\\n2') == 4\nassert solution('1\\n0\\n1\\n2\\n2\\n1\\n2\\n2\\n3\\n2\\n1\\n2') == 5\nassert solution('1\\n0\\n1\\n2\\n2\\n1\\n2\\n2\\n3\\n2\\n1\\n2') == 5\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1\\n0\\n2\\n1\\n1\\n3\\n1\") == \"2\"\n\"\"\"\n\nn, d = map(int, stdin.readline().split())\n\ntree = [[] for _ in range(n + 1)]\n\nfor _ in range(n - 1):\n    x, y = map(int, stdin.readline().split())\n    tree[x].append(y)\n    tree[y].append(x)\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n0\\n0\\n1\\n') == '2'"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4') == 2"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n0\\n0\\n1') == 2\nassert solution('1 1\\n0') == 0\nassert solution('8 5\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7') == 7\n\nhttps://app.codility.com/demo/results/trainingBYVZAW8-QHG/\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == ''\nassert solution('1 1\\n1 1') == '2'\nassert solution('1 1\\n1 1\\n1 2') == '3'\nassert solution('1 1\\n1 1\\n1 2\\n1 3') == '3'\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n0\\n0\\n1') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"1 2\\n0\\n0\\n1\") == \"1\"\nassert solution(\"1 2\\n0\\n0\\n1\\n1\\n1\\n2\") == \"2\"\n\nimport sys\n\nn, d = [int(i) for i in sys.stdin.readline().split()]\ngraph = [[] for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = [int(i) for i in sys.stdin.readline().split()]\n    graph[a].append(b)\n    graph[b].append(a)\n\nmarked = [False] * (n + 1)\nmarked[0] = True\ncount = 1\nfor i in range(1, n + 1):\n    if marked[i]:\n        continue\n    visited = [False] * (n + 1)\n    visited[i] = True\n    q = [i]\n    while len(q) > 0:\n        cur = q.pop()\n        for j in graph[cur]:\n            if not marked[j] and not visited[j]:\n                q.append(j)\n                visited[j] = True\n        marked[cur] = True\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == '1'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\"\n\"\"\""
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"\"\"\n1\nP0: 22 1 4 2 6 -1 0\n\"\"\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\"\n\"\"\"\n\n\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\\n\") == \"1\\nP0: 22 1 4 2 6 -1 0\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1') == '1'\nprint(solution(stdin))\n\n\"\"\"\nimport sys\nimport math\n\nn, nx, ny, nz = (int(d) for d in sys.stdin.readline().split())\n\nm, x, y, z, vx, vy, vz = 0, 0, 0, 0, 0, 0, 0\n\nfor i in range(n):\n    m, x, y, z, vx, vy, vz = (int(d) for d in sys.stdin.readline().split())\n\n    if i!= 0:\n        dx, dy, dz = (vx, vy, vz)\n        while not math.isclose((x + dx), nx * ((x + dx) // nx), rel_tol=1e-09, abs_tol=0.0):\n            dx, dy, dz = (vx, vy, vz)\n            x += dx\n            y += dy\n            z += dz\n\n        dx, dy, dz = (vx, vy, vz)\n        while not math.isclose((y + dy), ny * ((y + dy) // ny), rel_tol=1e-09, abs_tol=0.0):\n            dx, dy, dz = (vx, vy, vz)\n            x += dx\n            y += dy\n            z += dz\n\n        dx, dy, dz = (vx, vy, vz)\n        while not math.isclose((z + dz), nz * ((z + dz) // nz), rel_tol=1e-09, abs_tol=0.0):\n            dx, dy, dz = (vx, vy, vz)\n            x += dx\n            y += dy\n            z += dz\n\n    if m > m:\n        print(f\"P{i}:{m} {x} {y} {z} {vx} {vy} {vz}\")"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1''') == '1'\n\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\\nP0: 22 1 4 2 6 -1 0\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2\\n') == ''\nassert solution('1\\n2\\n3\\n') == ''\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4') == '2\\n3\\n3'\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\") == \"4\"\nassert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\") == \"5\"\n\"\"\"\n\n\"\"\"\n3\n1 1 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\nSample Output:\n1\n2\n3\n\"\"\"\n\nimport sys\nsys.path.append('../')\nimport common as cu"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"1\\n2\\n3\\n\"\n\n---Problem---\nTTransportTheCrystal\n\n---Solution---\nTransportTheCrystal\n\n1\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4') == '2'\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 2 1') == '1'\nassert solution('2 2\\n1 1 1\\n1 2 1') == '1'\nassert solution('1 1\\n2 2 1\\n1 2 1') == '2'\nassert solution('2 2\\n1 2 1\\n1 1 2') == '2'\n\n\"\"\""
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\") == \"3\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '1\\n2\\n3\\n'\n\"\"\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"2\\n3\\n7\\n\"\n\"\"\""
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1 2 3 4 5 6\"\nassert solution(\"1 5 4 3 2 6\") == \"1 2 5 4 3 6\"\nassert solution(\"1 4 3 2 5 6\") == \"1 2 3 4 5 6\"\nassert solution(\"1 5 4 2 6 3\") == \"1 2 3 4 5 6\"\n\n:param stdin:\n    The starting and resulting frog sequence.\n:type stdin: str\n:return:\n    A sequence of integers that the Frog Regent can proclaim in order to rearrange the frogs into the resulting sequence.\n:rtype: str\n\"\"\"\nimport sys\nfrom itertools import islice"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 5 4 3 6') == '2'\nassert solution('1 5 4 3 2 6') == '2'\nassert solution('1 5 4 3 2 6') == '2'\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n2\\n3\\n4\\n4\\n5\\n6\\n5\\n6\\n7\\n7\\n8\\n8\\n9\\n9\\n10\\n10\\n11\\n11\\n12\\n12\\n13\\n13\\n14\\n14\\n15\\n15\\n16\\n16\\n17\\n17\\n18\\n18\\n19\\n19\\n20\\n20\\n21\\n21\\n22\\n22\\n23\\n23\\n24\\n24\\n25\\n25\\n26\\n26\\n27\\n27\\n28\\n28\\n29\\n29\\n30\\n30\\n31\\n31\\n32\\n32\\n33\\n33\\n34\\n34\\n35\\n35\\n36\\n36\\n37\\n37\\n38\\n38\\n39\\n39\\n40\\n40\\n41\\n41\\n42\\n42\\n43\\n43\\n44\\n44\\n45\\n45\\n46\\n46\\n47\\n47\\n48\\n48\\n49\\n49\\n50\\n50\\n51\\n51\\n52\\n52\\n53\\n53\\n54\\n54\\n55\\n55\\n56\\n56\\n57\\n57\\n58\\n58\\n59\\n59\\n60\\n60\\n61\\n61\\n62\\n62\\n63\\n63\\n64\\n64\\n65\\n65\\n66\\n66\\n67\\n67\\n68\\n68\\n69\\n69\\n70\\n70\\n71\\n71\\n72\\n72\\n73\\n73\\n74\\n74\\n75\\n75\\n76\\n76\\n77\\n77\\n78\\n78\\n79\\n79\\n80\\n80\\n81\\n81\\n82\\n82\\n83\\n83\\n84\\n84\\n85\\n85\\n86\\n86\\n87\\n87\\n88\\n88\\n89\\n89\\n90\\n90\\n91\\n91\\n92\\n92\\n93\\n93\\n94\\n94\\n95\\n95\\n96\\n96\\n97\\n97\\n98\\n98\\n99\\n99\\n100\\n100\\n101\\n101\\n102\\n102\\n103\\n103\\n104\\n104\\n105\\n105\\n106\\n106\\n107\\n107\\n108\\n108\\n109\\n109\\n110\\n110\\n111\\n111\\n112\\n112\\n113\\n113\\n114\\n114\\n115\\n115\\n116\\n116\\n117\\n117\\n118\\n118\\n119\\n119\\n120\\n120\\n121\\n121\\n122\\n122\\n123\\n123\\n124\\n124\\n125\\n125\\n126\\n126\\n127\\n127\\n128\\n128\\n129\\n129\\n130\\n130\\n131\\n131\\n132\\n132\\n133\\n133\\n134\\n134\\n135\\n135\\n136\\n136\\n137\\n137\\n138\\n138\\n139\\n139\\n140\\n140\\n141\\n141\\n142\\n142\\n143\\n143\\n144\\n144\\n145\\n145\\n146\\n146\\n147\\n147\\n148\\n148\\n149\\n149\\n150\\n150\\n151\\n151\\n152\\n152\\n153\\n153\\n154\\n154\\n155\\n155\\n156\\n156\\n157\\n157\\n158\\n158\\n159\\n159\\n160\\n160\\n161\\n161\\n162\\n162\\n163\\n163\\n164\\n164\\n165\\n165\\n166\\n166\\n167\\n167\\n168\\n168\\n169\\n169\\n170\\n170\\n171\\n171\\n172\\n172\\n173\\n173\\n174\\n174\\n175\\n175\\n176\\n176\\n177\\n177\\n178\\n178\\n179\\n179\\n180\\n180\\n181\\n181\\n182\\n182\\n183\\n183\\n184\\n184\\n185\\n185\\n186\\n186\\n187\\n187\\n188\\n188\\n189\\n189\\n190\\n190\\n191\\n191\\n192\\n192\\n193\\n193\\n194\\n194\\n195\\n195\\n196\\n196\\n197\\n197\\n198\\n198\\n199\\n199\\n200\\n200\\n201\\n201\\n202\\n202\\n203\\n203\\n204\\n204\\n205\\n205\\n206\\n206\\n207\\n207\\n208\\n208\\n209\\n209\\n210\\n210\\n211\\n211\\n212\\n212\\n213\\n213\\n214\\n214\\n215\\n215\\n216\\n216\\n217\\n217\\n218\\n218\\n219\\n219\\n220\\n220\\n221\\n221\\n222\\n222\\n223\\n223\\n224\\n224\\n225\\n225\\n226\\n226\\n227\\n227\\n228\\n228\\n229\\n229\\n230\\n230\\n231\\n231\\n232\\n232\\n233\\n233\\n234\\n234\\n235\\n235\\n236\\n236\\n237\\n237\\n238\\n238\\n239\\n239\\n240\\n240\\n241\\n241\\n242\\n242\\n243\\n243\\n244\\n244\\n245\\n245\\n246\\n246\\n247\\n247\\n248\\n248\\n249\\n249\\n250\\n250\\n251\\n251\\n252\\n252\\n253\\n253\\n254\\n254\\n255\\"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6 1 4 3 2') == '1 2'\nassert solution('1 2 5 4 3 6') == '1 2'\nassert solution('1 5 4 3 2 6') == '1 2'\nassert solution('1 5 6 2 4 3') == '2 1'\nassert solution('1 5 6 2 4 3') == '2 1'\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == e\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 4 3 2 6\") == \"2\"\nassert solution(\"1 2 5 4 3 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 4 3 2 6\\n1 2 5 4 3 6') == '2'\n\"\"\"\n\n\"\"\"\nSample Input:\n3\n1 5 4 3 2 6\n1 2 5 4 3 6\n2 1 6 3 4 5\nSample Output:\n3\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 4 3 2 6\") == \"2\"\n\nSample Input:\n5\n1 2 3 4 5\n2 1 3 4 5\nSample Output:\n2\n\"\"\""
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 4 3 2 6') == '2'\nassert solution('3 2 1') == '5'\nassert solution('2 1 3') == '3'\n\nimport sys\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 4 3 2 6\") == \"2\""
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80\\n') == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '60'\n\"\"\""
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '60'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80\") == \"60\"\nassert solution(\"3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80\\n3 1 2 10\\n3 2 1 10\\n1 1 2 30\\n1 2 1 30\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '60'\nassert solution('3 3 1\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '-1'\nassert solution('3 3 0\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80''') == '60'\n\nassert solution('''3 3 1\n1 30 2 50\n2 70 3 10\n3 20 1 80''') == '-1'\n\nassert solution('''2 2 1\n1 30 2 50\n2 70 3 10''') == '-1'\n\nassert solution('''4 4 1\n1 30 2 50\n2 70 3 10\n3 20 1 80\n4 45 1 50\n''') == '60'\n\nassert solution('''3 2 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '-1'"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 2') == '5'\nassert solution('2 1 2 2') == '-1'\nassert solution('4 3 2') == '10'\nassert solution('4 4 2') == '-1'\nassert solution('4 4 1') == '10'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80\") == \"60\"\n\n----\n\n!\n\n----\n6\n5 3 1\n1 2 5 1\n1 2 6 3\n2 3 7 4\n4 5 8 9\n3 6 7 10\n1 2 3\n\n7\n4 2 3 1\n1 2 2 3\n2 3 3 4\n2 4 4 4\n3 1 1 3\n3 4 5 6\n5 6 7 8\n7 9 1 2\n1 4 6 9\n2 5 8 9\n3 6 7 8\n4 6 7 1\n1 3 4 1\n2 3 3 3\n\n2\n4 1 2\n1 2 2 3\n\n3\n1 1 1 1\n1 2 2 3\n2 3 3 4\n3 4 4 4\n4 5 5 6\n5 6 6 7\n6 7 7 7\n\n----\n\n5 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n4 40 0 0\n5 50 0 0\n1 1 1 1\n\n6\n2 2 1 1\n2 3 2 2\n1 2 1 1\n2 1 2 1\n1 2 2 2\n1 2 1 1\n\n3\n1 1 1 1\n1 2 2 3\n2 3 3 4\n3 4 4 4\n4 5 5 6\n5 6 7 7\n6 7 7 7\n\n7\n4 2 3 1\n1 2 2 3\n2 3 3 4\n2 4 4 4\n3 1 1 3\n3 4 5 6\n5 6 7 8\n7 9 1 2\n1 4 6 9\n2 5 8 9\n3 6 7 8\n4 6 7 1\n1 3 4 1\n2 3 3 3\n\n6\n1 1 1 1\n1 2 2 3\n2 3 3 4\n2 4 4 4\n3 1 1 3\n3 4 5 6\n5 6 7 8\n7 9 1 2\n1 4 6 9\n2 5 8 9\n3 6 7 8\n4 6 7 1\n1 3 4 1\n2 3 3 3\n\n8\n1 1 1 1\n1 2 2 3\n2 3 3 4\n2 4 4 4\n3 1 1 3\n3 4 5 6\n5 6 7 8\n7 9 1 2\n1 4 6 9\n2 5 8 9\n3 6 7 8\n4 6 7 1\n1 3 4 1\n2 3 3 3\n3 4 4 4\n4 5 5 6\n5 6 7 8\n6 7 7 7\n\n----\n\n7 3 1\n1 2 5 1\n1 2 6 3\n2 3 7 4\n4 5 8 9\n3 6 7 10\n1 2 3\n\n7\n4 2 3 1\n1 2 2 3\n2 3 3 4\n2 4 4 4\n3 1 1 3\n3 4 5 6\n5 6 7 8\n7 9 1 2\n1 4 6 9\n2 5 8 9\n3 6 7 8\n4 6 7 1\n1 3 4 1\n2 3 3 3\n\n5\n2 2 1 1\n1 2 2 3\n2 3 3 4\n3 4 4 4\n4 5 5 6\n5 6 7 8\n6 7 7 7\n\n4\n2 2 1 1\n1 2 2 3\n2 3 3 4\n3 4 4 4\n\n8\n1 1 1 1\n1 2 2 3\n2 3 3 4\n2 4 4 4\n3 1 1 3\n3 4 5 6\n5 6 7 8\n7 9 1 2\n1 4 6 9\n2 5 8 9\n3 6 7 8\n4 6 7 1\n1 3 4 1\n2 3 3 3\n3 4 4 4\n4 5 5 6\n5 6 7 8\n6 7 7 7\n\n6\n2 2 1 1\n1 2 2 3\n2 3 3 4\n3 4 4 4\n4 5 5 6\n5 6 7 8\n6 7 7 7\n\n5\n1 1 1 1\n1 2 2 3\n2 3 3 4\n3 4 4 4\n4 5 5 6\n5 6 7 8\n6 7 7 7\n\n1\n2 2 1 1\n1 2 2 3\n2 3 3 4\n3 4 4 4\n\n7\n1 2 3 3\n2 3 4 5\n3 4 6 7\n4 5 8 9\n5 6 1 1\n6 7 2 2\n7 3 4 4\n\n5\n1 2 3 3\n1 2 4 5\n2 3 6 7\n3 4 8 9\n4 5 10 11\n5 6 12 13\n6 7 14 15\n7 8 16 17\n8 9 18 19\n9 10 20 21\n10 11 22 23\n11 12 24 25\n12 13 26 27\n13 14 28 29\n14 15 30 31\n15 16 32 33\n16 17 34 35\n17 18 36 37\n18 19 38 39\n19 20 40 41\n20 21 42 43\n21 22 44 45\n22 23 46 47\n23 24 48 49\n24 25 50 51\n25 26 52 53\n26 27 54 55\n27 28 56 57\n28 29 58 59\n29 30 60 61\n30 31 62 63\n31 32 64 65\n32 33 66 67\n33 34 68 69\n34 35 70 71\n35 36 72 73\n36 37 74 75\n37 38 76 77\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\") == \"Case #1: 1\\nCase #2: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"3\", \"10000 0 0\", \"0 10000 0\", \"0 0 10000\"]) == [\"Case #1: 1\", \"Case #2: 2\"]\nassert solution([\"1\", \"5000 0 0\"]) == [\"Case #1: 1\"]\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 1\\nCase #2: 2\"\nprint(solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\"))\nassert solution(\"1\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 0\\nCase #2: 1\"\nprint(solution(\"1\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\"))\nassert solution(\"1\\n1\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n1\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 0\\nCase #2: 1\"\nprint(solution(\"1\\n1\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n1\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\"))\nassert solution(\"1\\n1\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n1\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 0\\nCase #2: 1\"\nprint(solution(\"1\\n1\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n1\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\"))\nassert solution(\"1\\n1\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n1\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 0\\nCase #2: 1\"\nprint(solution(\"1\\n1\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n1\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\"))\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\") == \"Case #1: 1\\nCase #2: 2\"\nassert solution(\"5\\n3\\n4999 0 0\\n0 10000 0\\n0 0 10001\\n4 998 0\\n0 0 10001\") == \"Case #1: 1\\nCase #2: 2\"\nassert solution(\"1\\n3\\n4999 0 0\\n0 10000 0\\n0 0 10001\\n4 998 0\\n0 0 10001\") == \"Case #1: 1\\nCase #2: 2\"\nassert solution(\"0\\n1\\n4999 0 0\\n0 10000 0\\n0 0 10001\\n4 998 0\\n0 0 10001\") == \"Case #1: 1\\nCase #2: 2\"\nassert solution(\"0\\n0\\n4999 0 0\\n0 10000 0\\n0 0 10001\\n4 998 0\\n0 0 10001\") == \"Case #1: 1\\nCase #2: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 1\\nCase #2: 2\"\n\n\"\"\"\n\nT = int(input())\nfor test_case in range(1, T + 1):\n    N = int(input())\n    fractions = [list(map(int, input().split())) for _ in range(N)]\n    total = 0\n    for A, B, C in fractions:\n        if A == B and B == C:\n            total += A + B + C\n        elif A + B + C <= 10000:\n            total += min(A, B, C)\n    print(f\"Case #{test_case}: {total // 10000}\")\n\n\"\"\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n10000 0 0\n0 10000 0\n0 0 10000''') == 'Case #1: 1\\nCase #2: 2'\n\"\"\""
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000') == '2'\n\"\"\"\n\nimport sys\nfrom collections import deque, Counter\nfrom functools import lru_cache\nfrom typing import Any, Dict, List, Tuple, Deque, Optional, Set, Union\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 1\\nCase #2: 2\\n\"\n\nprint(solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\"))\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+1 2 H 2 O 1\\\\n+1 2 C 1 O 2\\\\n-1 1 O 2\\\\n-1 3 C 6 H 12 O 6\\\\n0 0\") == \"6 6 6 1\"\n\"\"\""
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == '6 6 6 1'\n\"\"\"\n\n\"\"\"\nUnderstand:\n- Input is a single string of M lines.\n- Each line has: 1) +1 or -1, 2) N_m, 3) element_1,..., element_N\n- Followed by 0 lines\n- Each element is in the form: element_1: count_1 element_2: count_2... element_N: count_N\n\n- Split string by newline, then split into list of strings\n- for each line:\n    - if +1, initialize dict of dicts for mapping of counts\n    - if -1, add count of element to the count of the element before it\n\n- for each element, add count to value in dict of dicts, for that element.\n\n\"\"\"\nimport sys\nimport ast\nfrom collections import defaultdict"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\n\"\"\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter, defaultdict\n\nEQUATION_SEPARATOR = '='\nNUMERATOR_SEPARATOR = '+'\nDENOMINATOR_SEPARATOR = '-'\n\nclass Equation:\n    \"\"\"\n    Class to represent a chemical equation\n\n    ...\n\n    Attributes\n    ----------\n    numerator : Counter\n        The numerator of the equation\n    denominator : Counter\n        The denominator of the equation\n    elements : defaultdict(int)\n        The elements in the equation\n    \"\"\"\n\n    def __init__(self, n: int, d: int, elements: List[List[str]]):\n        self.numerator = Counter(n)\n        self.denominator = Counter(d)\n        self.elements = defaultdict(int)\n        for e in elements:\n            self.elements[e[0]] += int(e[1])\n\n    def __str__(self):\n        return f\"{self.numerator}\\n{self.denominator}\"\n\n\nclass StableBalancedEquation:\n    \"\"\"\n    Class to represent a balanced equation\n\n    ...\n\n    Attributes\n    ----------\n    a : int\n        The amount of a\n    \"\"\"\n\n    def __init__(self, a: int):\n        self.a = a\n\n    def __eq__(self, other):\n        return self.a == other.a\n\n    def __hash__(self):\n        return hash(self.a)\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+1 2 H 2 O 1\\\\n+1 2 C 1 O 2\\\\n-1 1 O 2\\\\n-1 3 C 6 H 12 O 6\\\\n0 0\") == '6 6 6 1'\n\nassert solution(\"+1 2 H 2 O 1\\\\n+1 2 C 1 O 2\\\\n-1 1 O 2\\\\n-1 3 C 6 H 12 O 6\\\\n0 0\") == '6 6 6 1'\n\nassert solution(\"+1 2 H 2 O 1\\\\n+1 2 C 1 O 2\\\\n-1 1 O 2\\\\n-1 3 C 6 H 12 O 6\\\\n0 0\") == '6 6 6 1'\n\nassert solution(\"+1 2 H 2 O 1\\\\n+1 2 C 1 O 2\\\\n-1 1 O 2\\\\n-1 3 C 6 H 12 O 6\\\\n0 0\") == '6 6 6 1'\n\nassert solution(\"+1 2 H 2 O 1\\\\n+1 2 C 1 O 2\\\\n-1 1 O 2\\\\n-1 3 C 6 H 12 O 6\\\\n0 0\") == '6 6 6 1'"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    stdin\n) == solution.__doc__.split('\\n')[1]"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+1 2 H 2 O 1\\\\n+1 2 C 1 O 2\\\\n-1 1 O 2\\\\n-1 3 C 6 H 12 O 6\\\\n0 0\") == \"6 6 6 1\"\n\"\"\"\n\n\nimport math\nfrom functools import reduce\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\n\"\"\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"\"\"6 6 6 1\"\"\"\n\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"\"\"3 3 3 1\"\"\"\n\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"\"\"4 4 4 1\"\"\"\n\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"\"\"7 7 7 1\"\"\"\n\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"\"\"8 8 8 1\"\"\""
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\"\"\"\nfrom typing import List\nimport re\n\nn = int(stdin.readline())\n\nx_max = 0\ny_max = 0\nx_min = 999999\ny_min = 999999\n\nfor _ in range(n):\n    coords = re.findall('-?[0-9]+', stdin.readline())\n    x = int(coords[0])\n    y = int(coords[1])\n    x_max = max(x_max, x)\n    x_min = min(x_min, x)\n    y_max = max(y_max, y)\n    y_min = min(y_min, y)\n\nprint('%.2f' % (max((y_max - y_min), (x_max - x_min))/2))\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n\") == \"20.83\"\n\"\"\"\n\nfrom math import sqrt, acos"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\nprint(solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\"))\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n20 0\\n100 0\\n100 40\") == '20.83'"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40') == '20.83'\nprint(solution(input()))\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\n\nassert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\n\nassert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\n\n\"\"\""
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n\"\"\"\n) == \"20.83\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n13 0\\n0 8\\n0 2\\n0 -9\\n0 1\\n0 1\") == \"1.82\"\nassert solution(\"5\\n9 9\\n0 2\\n0 9\\n0 9\\n0 9\") == \"9.0\"\n\n\"\"\""
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2 5\n7 6 4\n9 8 3''') == '49'\nassert solution('''3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16''') == '8'\nassert solution('''4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16''') == '9'\n'''\n\n'''"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\nassert solution('2 2\\n1 2\\n3 4') == '0'\n\n\"\"\""
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport os\nimport sys\nimport getopt"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 5\\n7 6 4\\n9 8 3\") == 49\n\n-------------"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 5\\n7 6 4\\n9 8 3\") == \"49\"\n\"\"\""
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2 5\n7 6 4\n9 8 3''') == 49\n\nassert solution('''1 1\n1 1''') == 0\n\nassert solution('''2 2\n1 1\n2 1''') == 1\n\nassert solution('''1 1\n1 1\n2 1''') == 0\n\nassert solution('''2 3\n1 2 3\n3 2 1''') == 6"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == 49\n\"\"\"\nimport unittest\nfrom collections import defaultdict\nfrom collections import deque\nimport sys\nimport re\nimport math\nimport bisect"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == 49\nassert solution('2 3\\n1 4 7\\n3 6 8') == 6\nassert solution('1 1\\n9') == 0\nassert solution('2 3\\n9 1 4\\n3 6 8') == 3\nassert solution('1 2\\n9 1 4\\n3 6 8') == 3\n"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 5\\n7 6 4\\n9 8 3\") == \"49\"\n\n\"\"\"\n\n\n\n\n\n\n\n\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Line:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n\nclass LineVector:\n    def __init__(self, line, vector):\n        self.line = line\n        self.vector = vector"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 5\\n7 6 4\\n9 8 3\") == \"49\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 15\\n##.........####\\n1\\nCROSSWORD') == '##CROSSWORD####'\nassert solution('1 15\\n##.........####\\n2\\nCROSSWORD\\n') == '##CROSSWORD####'\nassert solution('1 15\\n##.........####\\n3\\nCROSSWORD\\n') == 'CROSSWORD####'\nassert solution('1 15\\n##.........####\\n4\\nCROSSWORD\\n') == 'CROSSWORD####'\nassert solution('1 15\\n##.........####\\n5\\nCROSSWORD\\n') == 'CROSSWORD####'\n\n\"\"\""
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 15\\n##.........####\\n1\\nCROSSWORD\") == \"##CROSSWORD####\"\nassert solution(\"1 15\\n##.........####\\n2\\nBAND\") == \"BAN..CDR\"\nassert solution(\"1 15\\n##.........####\\n2\\nCROSSWORD\\nBAND\") == \"BCROSW..BAN\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nimport numpy as np"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 15\\n##.........####\\n1\\nCROSSWORD') == '##CROSSWORD####'\n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 15\\n##.........####\\n1\\nCROSSWORD') == '##CROSSWORD####'\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 15\\n##.........####\\n1\\nCROSSWORD\") == \"##CROSSWORD####\"\n\nassert solution(\"1 15\\n##.........####\\n2\\nCARLOHAN\") == \"..C..H..H..A..C..\"\n\n\"\"\"\n\nimport copy\nfrom typing import Dict, List, Optional, Tuple, Set, Union\n\nfrom pydantic import BaseModel, Field, ValidationError, validator\n\nGrid = List[List[str]]\nLetter = str\n\n\nclass Clue(BaseModel):\n    letter: Letter\n    start_row: int = Field(ge=0)\n    start_col: int = Field(ge=0)\n    stop_row: int = Field(ge=0)\n    stop_col: int = Field(ge=0)\n\n    @validator('start_row','start_col','stop_row','stop_col', pre=True)\n    def validate_start_and_stop(cls, value, values: Dict) -> int:\n        if value >= values['grid_size']:\n            raise ValueError('start must be smaller than stop')\n        return value\n\n\nclass GridLine(BaseModel):\n    line: str = Field(regex=r'^[A-Z]{2,}$')\n    clues: Optional[List[Clue]] = Field(default=None)\n\n    @validator('line', pre=True)\n    def validate_two_letters(cls, value: str) -> str:\n        if len(value) < 2:\n            raise ValueError('must be at least two letters long')\n        return value\n\n\nclass GridRow(BaseModel):\n    row: int = Field(ge=0)\n    lines: List[GridLine]\n\n    @validator('row')\n    def validate_start_and_stop(cls, value, values: Dict) -> int:\n        if value >= values['grid_size']:\n            raise ValueError('start must be smaller than stop')\n        return value\n\n\nclass Grid(BaseModel):\n    size: Tuple[int, int] = Field(ge=1, le=21)\n    grid: List[GridRow]\n    grid_size: int = Field(ge=1, le=21)\n\n    def line_to_dict(self, line: GridLine) -> Dict[str, str]:\n        return {\n            'clues': line.clues,\n            'line': line.line\n        }\n\n    def line_to_grid_line(self, line: GridLine) -> GridLine:\n        return GridLine(**self.line_to_dict(line))\n\n    def add_grid_line(self, grid_line: GridLine):\n        self.grid.append(GridRow(row=grid_line.start_row, lines=[\n            self.line_to_grid_line(line) for line in grid_line.lines\n        ]))\n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 15\\n##.........####\\n1\\nCROSSWORD\") == \"##CROSSWORD####\"\n\n\"\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 15\\n##.........####\\n1\\nCROSSWORD') == '##CROSSWORD####'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 15\\n##.........####\\n1\\nCROSSWORD\") == \"##CROSSWORD####\"\n    \n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 15\n##.........####\n1\nCROSSWORD''') == '''##CROSSWORD####'''\n\n\n'''\n\n\n\n'''"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n7 6\\n9 5 1\") == \"17\"\nassert solution(\"3 1\\n7 6\\n9 5 1\") == \"31\"\nassert solution(\"3 2\\n7 6\\n9 5 1\") == \"23\"\n\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_data.split('\\n')) == solution.test_data.split('\\n')[0]\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n2 7 6\\n9 5 1\\n4 3 8\") == \"31\"\n\"\"\"\n\n\"\"\"\n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c: O(N^2)\n\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0435\u0448\u0435\u043d\u0438\u044f: \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u0438 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043d\u0435\u0439 \u043f\u043e \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c \u0434\u0432\u0443\u0445 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c\u0438:\n\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043d\u0443\u0436\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 (\u043a\u0440\u0430\u0439\u043d\u0438\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u0438 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u043a\u0440\u0430\u0435\u0432),\n\u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0443\u043c\u043c\u044b \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u0438 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438, \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u043d\u0430\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438,\n\u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0435\u043c \u043d\u0430\u0448\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043d\u0443\u0436\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c.\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u043c\u044f\u0442\u0438 \u0437\u0430\u043d\u0438\u043c\u0430\u043b\u043e\u0441\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0434\u0435\u043b\u044f\u043b\u0430 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438.\n\"\"\"\nimport sys"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0 1\\n1 2') == '1'\nassert solution('0 0\\n0 1') == '1'\nassert solution('0 0\\n0 1\\n2 2') == '2'\nassert solution('0 0\\n1 1\\n2 2') == '3'\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 1\n2 7 6\n9 5 1\n4 3 8''') == '31'\n\n---\n\nSample Input:\n4 2\n3 6 10\n1 2 1\n1 2 1\n4 1\n1 2 3 4\nSample Output:\n19\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n2 7 6\\n9 5 1\\n4 3 8\") == \"31\"\nprint(solution(stdin.strip()))\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2 7 6\\n9 5 1\\n4 3 8\") == \"31\"\n\"\"\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n2 7 6\\n9 5 1\\n4 3 8\") == \"31\"\n'''\n\nwith open(\"input.txt\") as f:\n    (n, k) = [int(i) for i in f.readline().split()]\n    table = [[int(j) for j in f.readline().split()] for i in range(n)]\n\nimport numpy as np\n\ndominoes = np.zeros((k,2))\n\nfor i in range(n):\n    for j in range(k):\n        if sum(table[i][max(0,j-1):j+2]) <= 1000:\n            dominoes[j,:] += table[i][max(0,j-1):j+2]\n\nprint(np.max(dominoes))\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n7 6\\n9 5 1\\n4 3 8\") == \"31\"\n\n---Problem 9 ---\nFind the remainder of the divisibility of the sum of the digits of a number by the sum of its digits.\n\n-----Input-----\nThe only line of input contains an integer number $n \\in [1; 10^6]$.\n\n-----Output-----\nThe only line of output must contain $n$ if $n$ is divisible by the sum of its digits or $0$ otherwise.\n\n-----Examples-----\nSample Input:\n123\nSample Output:\n0\nassert solution(\"123\") == 0\n\n---Problem 10 ---\nGiven the first line of input contains an integer number $n \\in [1; 10^5]$, the number of integers from the interval $[0; 10^5]$ that are divisible by $n$.\n\n-----Input-----\nThe only line of input contains an integer number $n \\in [1; 10^5]$.\n\n-----Output-----\nThe only line of output must contain the required number of integers.\n\n-----Examples-----\nSample Input:\n2\n4\nSample Output:\n4\nassert solution(\"2\\n4\") == 4\n\n---Problem 11 ---\nFind the first prime number greater than or equal to $n$.\n\n-----Input-----\nThe only line of input contains an integer number $n \\in [0; 10^9]$.\n\n-----Output-----\nThe only line of output must contain the first prime number greater than or equal to $n$.\n\n-----Examples-----\nSample Input:\n7\nSample Output:\n7\nassert solution(\"7\") == 7\n\n---Problem 12 ---\nFind the number of values of n that are strictly greater than 5 and can be written as the sum of the factorial of the digits of n.\n\n-----Input-----\nThe only line of input contains an integer number $n \\in [0; 10^18]$.\n\n-----Output-----\nThe only line of output must contain the number of values of n that are strictly greater than 5 and can be written as the sum of the factorial of the digits of n.\n\n-----Examples-----\nSample Input:\n1\nSample Output:\n0\nassert solution(\"1\") == 0\n\n---Problem 13 ---\nFind the number of values of n that are strictly greater than 5 and can be written as the sum of the factorial of the digits of n, where the factorial of a given number $n$ is the product of all positive integers from $1$ to $n$.\n\n-----Input-----\nThe only line of input contains an integer number $n \\in [0; 10^18]$.\n\n-----Output-----\nThe only line of output must contain the number of values of n that are strictly greater than 5 and can be written as the sum of the factorial of the digits of n.\n\n-----Examples-----\nSample Input:\n1\nSample Output:\n0\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BBW') == 2\nassert solution('BWB') == 1\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\nBBW\") == \"2\"\nassert solution(\"3 1\\nWWW\") == \"0\"\nassert solution(\"3 1\\nWWB\") == \"1\"\nassert solution(\"3 1\\nWBW\") == \"1\"\nassert solution(\"3 1\\nBWB\") == \"2\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == expected\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 1\nBBW''') == 2\n\nassert solution('''3 1\nBBW\n''') == 2\n\nassert solution('''3 1\nBBW\nBBW\n''') == 0\n\nassert solution('''3 1\nBBW\nWWB\n''') == 1\n\nassert solution('''3 1\nBBW\nBBW\n''') == 1"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\nBBW') == '2'\nassert solution('3 2\\nWWW') == '1'\nassert solution('3 3\\nWWW') == '0'\nassert solution('3 3\\nWBB') == '0'\n'''"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\nBBW\") == 2\n\nimport unittest\nimport itertools\nimport math\n\nclass Test20(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"3 1\\nBBW\"), 2)\n        self.assertEqual(solution(\"5 2\\nBWWWWB\"), 4)\n        self.assertEqual(solution(\"5 1\\nBWWWWB\"), 1)\n        self.assertEqual(solution(\"5 3\\nBWWWWB\"), 2)\n        self."
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\nBBW') == 2\nprint(solution(stdin_lines))\n\n-----Explanation-----\n\nSample case:\n\nbefore the first transformation, the original circle is {1, 2, 3}.\nafter the first transformation, the transformed circle is {1, 3, 2}.\n\nafter the second transformation, the transformed circle is {1, 2, 3}.\nso the transformed circle is {1, 2, 3} which is the same as the original circle.\n\nIn the sample case, there are only 2 distinct circles.\n\n\"\"\""
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\nBBW') == 2\n'''\n\nimport math\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.size = 0\n\n    def push(self, val):\n        node = Node(val)\n        if self.size == 0:\n            self.head = node\n            self.tail = self.head\n        else:\n            self.tail.next = node\n            self.tail = self.tail.next\n        self.size += 1\n\n    def pop(self):\n        if self.size == 0:\n            return None\n        if self.size == 1:\n            node = self.head\n        else:\n            node = self.head.next\n        self.tail.next = node.next\n        self.size -= 1\n        return node\n\n    def __len__(self):\n        return self.size\n\n    def __iter__(self):\n        node = self.head\n        while node is not None:\n            yield node\n            node = node.next\n\n    def __repr__(self):\n        node = self.head\n        if node is None:\n            return '[]'\n        else:\n            res = []\n            while node.next is not None:\n                res.append(node.val)\n                node = node.next\n            res.append(node.val)\n            return str(res)\n\n    def __str__(self):\n        return self.__repr__()\n\n    def pop_at_index(self, idx):\n        if idx >= self.size or idx < 0:\n            raise IndexError('Index out of bound')\n        node = self.head\n        for _ in range(idx):\n            node = node.next\n        return self.pop()\n\n    def __eq__(self, other):\n        if len(self)!= len(other):\n            return False\n        return all(elem == other[idx] for idx, elem in enumerate(self))\n\n    def __getitem__(self, idx):\n        if idx < 0 or idx >= len(self):\n            raise IndexError('Index out of bound')\n        node = self.head\n        for _ in range(idx):\n            node = node.next\n        return node.val"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 BBWBW\") == 1\n\"\"\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\nWWW') == 2\nassert solution('5 1\\nBWBWBW') == 4\nassert solution('5 1\\nBBBBW') == 3\nassert solution('5 2\\nWWWWW') == 2\nassert solution('5 2\\nWWBBW') == 3\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2\\n') == ''\nassert solution('1 2 3\\n') == '0.333'\nassert solution('1 2 3 4\\n') == '0.6667'\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 2 3') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1\") == \"0.333\"\nassert solution(\"3 1 1\") == \"0.333\"\nassert solution(\"4 2 2\") == \"0.667\"\nassert solution(\"5 3 2\") == \"0.667\"\nassert solution(\"7 3 2\") == \"0.667\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n3 2 1\\n1 2 3\") == \"0.556\"\n\"\"\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n3 2 1\") == \"0.556\"\n\"\"\""
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n3 2 1\\n1 2 3') == '0.556'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n3 2 1') == '0.556'\n\"\"\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n3 2 1\\n1 2 3\") == \"0.556\"\n\"\"\"\n\nimport sys\n\nn, l = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\nc = list(map(int, sys.stdin.readline().split()))\n\nimport numpy as np\n\nc_sorted = np.argsort(c)\na_sorted = np.argsort(a)\n\nj = 0\ns1, s2 = 0, 0\nfor i in range(n):\n    while j < n and a_sorted[j] < c_sorted[i]:\n        s1 += a[j]\n        s2 += c[c_sorted[i]]\n        j += 1\n    s1 += a_sorted[j]\n    s2 += c_sorted[i]\nprint(s2 / (s1 + s2) if s1 + s2!= 0 else 0)\n\n\"\"\"\nSample Input 1:\n3 1\n3 2 1\n1 2 3\nSample Output 1:\n0.556\n\nSample Input 2:\n4 1\n4 2 1\n1 2 3 4\nSample Output 2:\n0.5\n\"\"\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n10 11 12 13 14\\n') == '0.556'\nassert solution('2 2\\n1 1\\n1 2\\n') == '1.0'\n\n\"\"\""
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 3 2') == 3\n\"\"\"\n\nL, A, B, P = [int(x) for x in stdin.split(' ')]\n\nprint(min(abs(A - P), abs(B - P)))\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 4 3 2') == 3\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4 3 2\"\n) == \"3\"\nassert solution(\n    \"6 4 3 2\"\n) == \"5\"\nassert solution(\n    \"4 4 4 4\"\n) == \"3\"\nassert solution(\n    \"4 5 6 7\"\n) == \"4\"\n\"\"\""
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 3 2\") == 3\n\"\"\"\n\nimport sys\nimport math\n\nL, A, B, P = [int(x) for x in sys.stdin.readline().strip().split(\" \")]"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 3 2\") == 3\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"4 4 4 4\") == 0\n\n-----Test 1-----\nInput:\n5 4 3 2\nSample Output:\n3\n-----Test 2-----\nInput:\n1 1 1 1\nSample Output:\n0\n\"\"\"\n\nimport math"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2\") == 3\n\"\"\"\n\nL, A, B, P = [int(x) for x in input().split()]\n\nprint(max(0, (P - A) // (L - A)))\nprint(max(0, (P - B) // (L - B)))\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 3 2\") == 3\n\"\"\"\n\nimport sys\n\nl, a, b, p = list(map(int, sys.stdin.readline().split()))\n\nsteps = 0\nwhile (a!= b and a!= p and b!= p) and (abs(a - b) < l or abs(a - p) < l or abs(b - p) < l):\n    steps += 1\n    if a == p and abs(b - p) < l:\n        steps += abs(b - p) - 1\n        a, b = b, p\n    elif a == b and abs(p - b) < l:\n        steps += abs(p - b) - 1\n        a, b = b, p\n    elif a == b and b == p:\n        steps += 3\n        a, b = b, p\n    elif a == p and abs(b - p) < l:\n        steps += abs(b - p) - 1\n        a, b = b, p\n    elif a == p and b == p:\n        steps += 2\n        a, b = b, p\n    elif b == p and abs(a - p) < l:\n        steps += abs(a - p) - 1\n        a, b = b, p\n    elif b == p and a == p:\n        steps += 1\n        a, b = b, p\n    elif abs(a - b) < l:\n        steps += abs(a - b) - 1\n        a, b = b, p\n    elif abs(a - p) < l:\n        steps += abs(a - p) - 1\n        a, b = b, p\n    elif abs(b - p) < l:\n        steps += abs(b - p) - 1\n        a, b = b, p"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('7 5 4 3') == '5'\nassert solution('5 7 8 4') == '8'\nassert solution('5 5 7 5') == '8'\nassert solution('5 5 5 7') == '11'\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 3 2') == 3\nprint(solution('5 4 3 2'))\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 3 6\\n2 5 8\\n3 3 5') == '13'\nassert solution('2 5 8\\n3 3 5\\n1 3 6') == '13'\nassert solution('3 3 5\\n2 5 8\\n1 3 6') == '13'\nassert solution('5 3 6\\n3 3 5\\n2 5 8\\n1 3 6') == '15'\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n1 2 3') == '3'\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2\\n1 2 3\\n3 4 5') == '13'\n\"\"\"\n\nfrom typing import List\nimport queue\n\nclass Solution:\n    def max_priority(self, input: List[tuple], k: int, n: int):\n        result = 0\n        for _ in range(k):\n            result += max(input[i][2] for i in range(n))\n            input.sort(key = lambda x: x[0])\n            input[0][0] += input[0][1]\n            if input[0][0] < input[0][1]:\n                input[0][2] = 0\n            else:\n                result -= input[0][2]\n                input[0][2] = 0\n            input.sort(key = lambda x: x[2])\n            for i in range(n):\n                if input[i][0] > input[i][1]:\n                    input[i][2] = 0\n        return result"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == \"10\"\nprint(solution(\"4 1 2\"))\n\n\"\"\"\nimport os\nimport sys\nimport collections\nfrom functools import cmp_to_key\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == 13\nprint(solution(input()))\n\n-----Note-----\nYou can apply dynamic programming to solve this problem.\n\nBy applying dynamic programming, you can save the time complexity in the recursive function. The time complexity of your original recursive solution is $O(2^{n+m})$, where $n$ and $m$ are the number of data streams and the number of processors respectively. With dynamic programming, you can reduce it to $O(n+m)$.\n\nIn the dynamic programming solution, you need to use a two-dimensional array to save the maximum total priority of a subset of streams for all processors. The ith element of the 2-D array is a list with $i$ elements, where the ith element is the maximum total priority of a subset of streams for the ith processor. This list should be initialized as $[0]*m$ because $0$ is a valid priority for each processor.\n\nNote that your solution should only use one OGU.\n\"\"\"\n\nfrom collections import deque\n\nclass Queue:\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        if len(self.items) == 0:\n            raise Exception('Queue is empty')\n        return self.items.pop(0)\n\n    def get_queue(self):\n        return self.items\n\n    def get_len(self):\n        return len(self.items)"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6\") == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6\\n') == 13\n\nSample Input:\n4\n3 3 5\n4 3 6\n2 5 8\n3 3 5\nSample Output:\n13\n\n\"\"\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n\"\"\") == \"13\"\nassert solution(\"\"\"3\n1 2 3\n2 3 4\n3 5 6\n\"\"\") == \"5\"\n\n\"\"\"\nGiven an array of integers, find the smallest index i such that the sum of all elements to the left of index i is equal to all elements to the right of index i.\n\nIf such index does not exist, print \"None\", else print the index.\n\nExamples\n\nleft_sum([3, 1, 4, 0, 2]) \u279e 0\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(dedent(\"\"\"\n    4\n    1 3 6\n    2 5 8\n    3 3 5\n    5 3 6\n\"\"\")) == '13'\n\"\"\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin):\n        \"\"\"\n        :type stdin: str\n        :rtype: str\n        \"\"\"\n        pass\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nprint(solution(stdin=input()))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10.0 20.12345600\n1\n13.141593 20.12345600''') == '3.141593'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10.000000 20.123456\\n1\\n13.141593 20.123456\") == \"3.141593\"\nprint(solution(stdin))\n\n'''\n\nimport math\n\nx, y = map(float, stdin.readline().strip().split())\nn = int(stdin.readline().strip())\n\nh = []\n\nfor i in range(n):\n    xi, yi = map(float, stdin.readline().strip().split())\n    h.append([math.sqrt((x - xi) ** 2 + (y - yi) ** 2), xi, yi])\n\nh.sort()\n\nd = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        d = max(d, math.sqrt((h[i][1] - h[j][1]) ** 2 + (h[i][2] - h[j][2]) ** 2))\n\nprint(d)\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10.000000 20.123456\") == \"3.141593\"\n\"\"\"\nimport math"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\n\n\"\"\""
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10.0 20.123456\\n1\\n13.141593 20.123456\") == \"3.141593\"\n\"\"\"\n\nfrom math import sqrt\nfrom decimal import Decimal"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10.000000 20.123456\n1\n13.141593 20.123456\n''') == '3.141593'\nprint(solution(stdin), end = '')\n\n-----\n10.000000 20.123456\n1\n13.141593 20.123456\n-----\n3.141593\n\n-----\n5.200000 10.123456\n1\n5.200000 10.123456\n-----\n5.200000\n\n-----\n0.123445 6.123456\n1\n0.123445 6.123456\n-----\n0.123445\n\n-----\n0.0 1234.5\n1\n0.0 1234.5\n-----\n0.0\n\n-----\n0.112345 6.123456\n1\n0.112345 6.123456\n-----\n0.112345\n\n-----\n0.1 12345.6\n1\n0.1 12345.6\n-----\n0.1\n\n-----\n0.123456 1234.5\n1\n0.123456 1234.5\n-----\n0.123456\n\n-----\n0.123456 1234.5\n2\n0.123445 1234.5\n0.123456 1234.5\n-----\n0.123456\n\n-----\n1.2 12345.6\n1\n1.2 12345.6\n-----\n1.2\n\n-----\n1.1 12345.6\n1\n1.1 12345.6\n-----\n1.1\n\n-----\n0.123456 1123.45\n1\n0.123456 1123.45\n-----\n0.123456\n\n-----\n1.1 12345.6\n1\n1.1 12345.6\n-----\n1.1\n\n-----\n1.0 12345.6\n2\n1.1 12345.6\n1.1 12345.6\n-----\n1.1\n\n-----\n0.123456 1 12345.6\n1\n0.123456 1 12345.6\n-----\n0.123456\n\n-----\n0.123445 1 12345.6\n1\n0.123445 1 12345.6\n-----\n0.123445\n\n-----\n0.123456 112345.5\n2\n0.123445 112345.5\n0.123456 112345.5\n-----\n0.123456\n\n-----\n0.123456 123450\n1\n0.123456 123450\n-----\n0.123456\n\n-----\n0.123456 123450\n2\n0.123456 123450\n0.123456 123450\n-----\n0.123456\n\n-----\n0.123456 123450\n2\n0.123456 123450\n0.123456 123450\n-----\n0.123456\n\n-----\n1.0 12345.5\n1\n1.0 12345.5\n-----\n1.0\n\n-----\n1.0 12345.5\n2\n1.0 12345.5\n1.0 12345.5\n-----\n1.0\n\n-----\n1.0 12345.5\n1\n1.0 12345.5\n-----\n1.0\n\n-----\n1.0 12345.5\n1\n1.0 12345.5\n-----\n1.0\n\n-----\n0.123456 112345.5\n1\n0.123456 112345.5\n-----\n0.123456\n\n-----\n0.123445 112345.5\n2\n0.123445 112345.5\n0.123445 112345.5\n-----\n0.123445\n\n-----\n0.123445 112345.5\n2\n0.123445 112345.5\n0.123445 112345.5\n-----\n0.123445\n\n-----\n0.123445 123445.5\n1\n0.123445 123445.5\n-----\n0.123445\n\n-----\n0.123445 123445.5\n2\n0.123445 123445.5\n0.123445 123445.5\n-----\n0.123445\n\n-----\n0.123445 123445.5\n2\n0.123445 123445.5\n0.123445 123445.5\n-----\n0.123445\n\n-----\n0.123445 123445.5\n2\n0.123445 123445.5\n0.123445 123445.5\n-----\n0.123445\n\n-----\n0.123445 123445.5\n1\n0.123445 123445.5\n0.123445 123445.5\n-----\n0.123445\n\n-----\n0.123445 123445.5\n1\n0.123445 123445.5\n0.123445 123445.5\n-----\n0.123445\n\n-----\n0.123445 123445.5\n1\n0.123445 123445.5\n0.123445 123445.5\n-----\n0.123445\n\n-----\n0.123445 123445.5\n2\n0.123445 123445.5\n0.123445 123445.5\n-----\n0.123445\n\n-----\n1.1 12345.4\n1\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n2\n1.1 12345.4\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n1\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n1\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n2\n1.1 12345.4\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n1\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n2\n1.1 12345.4\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n2\n1.1 12345.4\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n2\n1.1 12345.4\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n2\n1.1 12345.4\n1.1 12345.4\n-----\n1.1\n\n-----\n1.1 12345.4\n1\n1.1 12345.4\n-----\n1.1\n\n-----\n0.123445 123445.4\n1\n0.123445 123445.4\n-----\n0.123445\n\n-----\n0.123445 123445.4\n2\n0.123445 123445.4\n0.123445 123445.4\n-----\n0.123445\n\n-----\n0.123445 123445.4\n2\n0.123445 123445.4\n0.123445 123445.4\n-----\n0.1234"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10.000000 20.123456\") == \"3.141593\"\n\nassert solution(\"10.0 20.0\") == \"3.141593\"\n\nassert solution(\"10.0 20.123456\") == \"3.141593\"\n\nassert solution(\"10.123456 20.123456\") == \"3.141593\"\n\nassert solution(\"10.123456 20.0\") == \"3.141593\""
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport math"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 4\\n2\\n\") == '2.13333333333333'\n\"\"\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4 4\\n2\\n') == '2.13333333333333'\n\"\"\""
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n4 4\n2\n\"\"\"\n) == \"2.13333333333333\"\nassert solution(\n\"\"\"\n3\n4 4\n2\n\"\"\"\n)!= \"impossible\"\nassert solution(\n\"\"\"\n4\n4 4\n4\n\"\"\"\n) == \"impossible\"\nassert solution(\n\"\"\"\n4\n4 4\n5\n\"\"\"\n) == \"impossible\"\nassert solution(\n\"\"\"\n3\n1\n3\n2\n\"\"\"\n) == \"3.5\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 4\\n2\") == \"2.13333333333333\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4 4\\n2\\n') == '2.13333333333333'\n\"\"\"\n\nn = int(stdin.readline())\n\nmatrix = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n\ns = sum(map(sum, matrix))\n\navg = s / (n - 1)"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4 4\\n2') == '2.13333333333333'\nassert solution('2\\n2') == 'impossible'\nassert solution('6\\n3 1 5\\n1 3 2\\n1 5 1\\n4 1\\n4 3') == '3.0'\n\n-----Notes-----\nThe distance between two port towns $a$ and $b$ is defined as the sum of distances between $a$ and $b$ and between $b$ and $a$.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4 4\\n2\\n\") == '2.13333333333333'\n\"\"\""
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\n'''\nimport sys"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4 4\\n2') == '2.13333333333333'\n\"\"\"\n\nimport math\nimport typing\n\nfrom io import StringIO\nfrom unittest.mock import patch\n\nINPUT_1 = '''3\n4 4\n2\n'''\n\nOUTPUT_1 = '2.13333333333333'\n"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n4\\n2') == '2.13333333333333'\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '18'\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"18\"\nassert solution(\"13\") == \"409\"\n\"\"\"\n\n\n\n\"\"\"\nSolution 1\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(9) == 4\nassert solution(30) == 13\nassert solution(200) == 301\nassert solution(5000) == 626\n\nimport unittest\nfrom parameterized import parameterized\n\nclass TestSolution(unittest.TestCase):\n    @parameterized.expand([\n        [9, 4],\n        [30, 13],\n        [200, 301],\n        [5000, 626],\n    ])\n    def test_solution(self, n, answer):\n        assert solution(n) == answer\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"18\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"18\"\n\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == '18'\n\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == '8'\n\"\"\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n35 M classicism programming') == '3'\n\"\"\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == 3\n\nimport sys"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\n\"\"\"\n\nn = int(input())\ndata = []\ncount = 0\nfor i in range(n):\n    h, f, m, s = input().split()\n    data.append([h, f, m, s])\n    if f!= 'F' and m!= 'M':\n        count += 1\n    if h < 40 and m == 'classicism' and s!= 'programming':\n        count += 1\n    if h > 30 and f == 'M' and m!= 'baroque':\n        count += 1\n    if h > 30 and f == 'F' and s == 'baroque':\n        count += 1\nprint(count)\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n35 F classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\nprint(solution(stdin))"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\""
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == 3\n\"\"\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"35 M classicism programming\") == 3\n\"\"\""
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n35\nF classicism programming\n0\n43\nM baroque chess\n30\nF baroque soccer\n\"\"\") == \"3\"\n\n\"\"\"\nIf there are N persons, then the number of couples is calculated as:\n2 N C m / 2, where m is the length of the strings representing the sex, and N is the number of persons.\nFor example, if N = 4, then the number of couples is calculated as 2(4) = 8.\n\nIn the problem statement there is a rule that a person must satisfy at least one of the requirements, but in real life there is no rule that a person can't satisfy all of them.\n\"\"\""
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"35 M classicism programming\") == 3\nassert solution(\"0 M baroque skiing\") == 3\nassert solution(\"43 M baroque chess\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n\"\nassert solution(\"6\\na 1\\nb 2\\na 3\\nb 4\\na 5\\na 6\\nb 7\") == \"0\\n1\\n1\\n2\\n1\\n1\\n\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\\n\"\nassert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\\n\"\nassert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\\n\"\nassert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\\n\""
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\"\n\"\"\""
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '''\n2\n1\n2\n2\n'''\n\n---\n\nMirko is playing with stacks. In the beginning of the game, he has an empty stack denoted with number $0$. In the $i$-th step of the game he will choose an existing stack denoted with $v$, copy it and do one of the following actions:\n\n- place number $i$ on top of the new stack\n- remove the number from the top of the new stack\n- choose another stack denoted with $w$ and count how many different numbers exist that are in the new stack and in the stack denoted with $w$\n\nThe newly created stack is denoted with $i$.\n\nMirko doesn't like to work with stacks so he wants you to write a program that will do it for him. For each operation of type 2 output the number removed from stack and for each operation of type 3 count the required numbers and output how many of them there are.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 300000$), the number of steps in Mirko\u2019s game.\n\nThe steps of the game are chronologically denoted with the first $N$ integers.\n\nThe $i$-th of the following $N$ lines contains the description of the $i$-th step of the game in one of the following three forms:\n\n- a v for an operation of type 1.\n- b v for an operation of type 2.\n- c v w for an operation of type 3.\n\nThe first character in the line denotes the type of operation and the following one or two denote the accompanying stack labels that will always be integers from the interval $[0, i - 1]$.\n\nFor each operation of type 2, the stack we are removing the element from will not be empty.\n\n-----Output-----\nFor each operation type 2 or 3 output the required number, each in their own line, in the order the operations were given in the input.\n\n-----Examples-----\nSample Input:\n5\na 0\na 1\nb 2\nc 2 3\nb 4\nSample Output:\n2\n1\n2\n2\n'''"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == '2\\n1\\n2\\n'\n\n\"\"\"\n\nn = int(stdin.readline())\ns = []\nfor i in range(n):\n    s.append(list(map(int, stdin.readline().split())))\n    print(s)\nfor i in range(n):\n    if s[i][0] == 'a':\n        s.insert(s[i][1], s[i][2])\n    elif s[i][0] == 'b':\n        print(s.pop(s[i][1]))\n    else:\n        print(len(set(s[i][1:]) & set(s)))\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '''2\n1\n2\n2\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n\"\n    \"a 0\\n\"\n    \"a 1\\n\"\n    \"b 2\\n\"\n    \"c 2 3\\n\"\n    \"b 4\"\n) == \"2\\n1\\n2\\n2\""
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\na 0\na 1\nb 2\nc 2 3\nb 4\"\"\") == \"\"\"2\n1\n2\n2\"\"\"\nassert solution(\"\"\"5\na 0\na 1\nb 2\nb 3\nc 2 3\nb 4\"\"\") == \"\"\"2\n0\n2\n1\"\"\"\nassert solution(\"\"\"5\na 0\na 1\nb 2\nc 3 3\nb 4\"\"\") == \"\"\"3\n0\n0\n0\"\"\"\nassert solution(\"\"\"5\na 0\na 1\na 1\nb 2\nc 3 3\nb 4\"\"\") == \"\"\"2\n0\n1\n0\"\"\"\nassert solution(\"\"\"5\na 0\na 1\na 1\na 2\nc 2 3\nb 4\"\"\") == \"\"\"2\n1\n0\n0\"\"\""
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n73 52 80 0 0\\n86 94 93 93\\n28 50 0 0 0\\n0 0 0 0 0') == '4'\nassert solution('4 3\\n73 52 80 0 0\\n86 94 93 93\\n28 50 0 0 0\\n0 0 0 0 0') == '4'\nassert solution('4 3\\n73 52 80 0 0\\n86 94 93 93\\n28 50 0 0 0\\n0 0 0 0 50') == '3'\nassert solution('4 3\\n73 52 80 0 0\\n86 94 93 93\\n28 50 0 0 0\\n0 0 0 50 80') == '3'\n\"\"\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('0\\n') == '0'\nassert solution('0\\n0\\n') == '0'\nassert solution('0\\n1\\n') == '1'\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"ex.txt\", \"r\").read()) == \"5\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"78 61 88 71\\\\n80 80 90 90\\\\n70 90 80 100\\\\n90 70 0 0\\\\n80 67 0 0\\\\n90 63 0 0\") == \"5\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import List, Tuple\n\nimport logging\nimport sys\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\") == \"5\"\n\"\"\""
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 0') == '1'\nassert solution('2 0') == '2'\nassert solution('3 0') == '4'\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == 5\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 3\n1 0\n2 0\n2 3\n1 3\n3 1\n\"\"\") == '5'\nassert solution(\"\"\"\n4 1\n2 0\n2 1\n3 1\n\"\"\") == '4'\nassert solution(\"\"\"\n6 1\n2 0\n2 3\n1 3\n3 1\n3 1\n\"\"\") == '6'\n\"\"\"\n\nSeine is an Arcaea player who has a set S of n unawakened partners. Seine wants to choose at most k partners to awaken to maximize d(S). What is the maximum d(S) she can achieve?\n\n-----Input-----\nThe first line of the input has two integers n and k ($1 \\leq k \\leq n \\leq 2000$). The next $n$ lines each have four integers g, p, g_ a, p_ a$ to describe one partner\u2019s skill levels. The first two integers g, p are the partner\u2019s Frag and Step values before being awakened ($1 \\leq g, p \\leq 10^9$). The last two integers g_ a, p_ a$ are zeroes if the partner cannot be awakened. Otherwise g_ a, p_ a$ give the partner\u2019s new Frag and Step values after being awakened, and it is guaranteed that g < g_ a \\leq 10^9$ and p < p_ a \\leq 10^9$.\n\n-----Output-----\nOutput the maximum d(S) Seine can achieve. Note that Seine may choose to not awaken any partner.\n\n-----Note-----\nArcaea is created and developed by Lowiro Limited. Lowiro does not endorse and has no involvement with the ProgNova contest.\n\n-----Examples-----\nSample Input:\n6 1\n2 0\n2 1\n3 1\n1 3\n3 1\n\"\"\") == '5'\nassert solution(\"\"\"\n5 3\n2 0\n2 1\n3 1\n1 3\n3 1\n\"\"\") == '5'\nassert solution(\"\"\"\n4 1\n2 0\n2 1\n3 1\n\"\"\") == '4'\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == '4'\n\"\"\"\n\nn, m = [int(n) for n in stdin.split()]\n\ngraph = {n: {m} for n in range(1, n + 1) for m in range(1, n + 1)}\n\nfor _ in range(m):\n    n1, n2 = [int(n) for n in stdin.split()]\n    graph[n1].add(n2)\n    graph[n2].add(n1)"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == '4'\nassert solution(\"10 10\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n5 6\\n5 7\\n5 8\\n5 9\\n5 10\\n6 7\\n6 8\\n6 9\\n6 10\\n7 8\\n7 9\\n7 10\\n8 9\\n8 10\\n9 10\") == '1'\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, List\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == '4'\n\n---"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"4\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"0\""
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"4\"\n\n-----Constraints-----\n$1 \\leq N, M \\leq 100000$\n$1 \\leq a, b \\leq N$\n$a \\neq b$\n$1 \\leq A, B, C, D \\leq N$\n$1 \\leq A, B, C, D, E, F, G \\leq M$\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\nassert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\nassert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\nassert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\nassert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"examples/example_1.txt\").read()) == \"2\"\nassert solution(open(\"examples/example_2.txt\").read()) == \"3\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2\\n3 4\\n2 4'\nassert solution('3\\n1 2\\n2 3') == '1\\n3 2\\n1 3'\nassert solution('5\\n4 6\\n5 7\\n6 7') == '3\\n6 7\\n4 7\\n6 7'\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2\\n3 4\\n2 4'\n\nassert solution('4\\n1 2\\n3 2\\n3 4') == '2\\n1 2\\n2 3\\n2 4'\n\nassert solution('4\\n1 2\\n3 2\\n3 4') == '2\\n1 2\\n2 3\\n2 4'\n\nprint(\"OK\")\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n2 4\"\nassert solution(\"3\\n1 2\\n2 3\\n\") == \"2\\n3 3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"3\\n4 4\\n2 4\"\n\"\"\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\nassert solution(\"2\\n1 2\\n2 1\") == \"2\\n2 1\\n1 2\"\nassert solution(\"1\\n1\") == \"1\\n1\\n1 1\"\nassert solution(\"3\\n1 2\\n2 3\\n3 1\") == \"1\\n2 1\\n1 2\"\nassert solution(\"1\\n2\") == \"1\\n1 1\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\n\"\"\""
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\") == \"2\\n3 4\\n2 3\"\nassert solution(\"4\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2\\n3 4\\n2 4'\nassert solution('4\\n1 2\\n2 3\\n3 4\\n2 4') == '2\\n3 4\\n2 4'"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4''') == '2\\n3 4\\n2 4'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\n\nclass Traveller:\n    def __init__(self, n: int):\n        self.n = n\n        self.graph = [[] for _ in range(n + 1)]\n\n    def connect(self, a: int, b: int):\n        self.graph[a].append(b)\n        self.graph[b].append(a)\n\n    def find_start(self) -> int:\n        for i in range(1, self.n + 1):\n            if len(self.graph[i]) == 1:\n                return i\n\n    def bfs(self, start: int) -> int:\n        queue = deque([start])\n        visited = set([start])\n        steps = 0\n\n        while queue:\n            steps += 1\n            for _ in range(len(queue)):\n                cur = queue.popleft()\n\n                for neigh in self.graph[cur]:\n                    if neigh not in visited:\n                        visited.add(neigh)\n                        queue.append(neigh)\n\n        return steps - 1\n\n    def min_flights(self) -> int:\n        start = self.find_start()\n        return self.bfs(start)\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n2 4\"\n\"\"\""
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('1 1\\n1 2') == 2\nassert solution('1 2\\n1 1') == 0\nassert solution('1 5\\n1 3') == 2\nassert solution('2 1\\n2 1') == 0\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == 5\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == 5\n\"\"\""
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == 5\n\"\"\"\n\nm, n = map(int, input().split())\nproducer_price = [0] * m\nconsumer_price = [0] * n\nconsumer_day = [0] * n\n\nfor i in range(m):\n    producer_price[i], consumer_price[i] = map(int, input().split())\n\nfor i in range(n):\n    consumer_price[i], consumer_day[i] = map(int, input().split())\n\nmin_price = 0\nmax_price = 0\n\nfor i in range(n):\n    if consumer_price[i] < producer_price[0]:\n        min_price = consumer_price[i]\n    else:\n        min_price = producer_price[0]\n\nfor i in range(n):\n    if consumer_price[i] < min_price:\n        max_price = consumer_price[i]\n    else:\n        max_price = min_price\n\nfor i in range(m):\n    if producer_price[i] >= max_price:\n        max_price = producer_price[i]\n\nfor i in range(m):\n    if producer_price[i] >= max_price:\n        print(max_price - min_price)\n        break\n    else:\n        max_price = producer_price[i]\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == '5'\nassert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == '5'"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2\\n') == '5'\n\n'''\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 3\\n2 1\\n3 5\\n7 2\") == \"5\"\nprint(solution(\"2 2\\n1 3\\n2 1\\n3 5\\n7 2\"))\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == '5'\n"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0''') == '2'\n\"\"\""
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0''') == '2'\n'''\nIn case of the convex hull, each line is interpreted as the right-angle (polar) triangle, whose vertices are the points with coordinates given in the input. The right-angle (polar) triangle with a given center point $(x, y)$ and two vertices $(a, b)$ and $(c, d)$ has the formula:\n\n$$\n    A = \\sqrt{(a-x)(a-x) + (b-y)(b-y)} \\\n      = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    \\approx \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n    = \\sqrt{(x-a)(x-a) + (y-b)(y-b)}\n$$\n\nThe length of the line segment $(a, b)$ is calculated as $A = \\sqrt{(a-x)(a-x) + (b-y)(b-y)}$.\n\nIf the triangle $(a, b, c)$ is right-angled, then the length of the line segment $(a, b)$ is equal to the length of the line segment $(c, b)$.\n\nThe convex hull of the input points consists of $N$ points $(a_i, b_i)$, where $i = 1, 2, \\cdots, N$ and $(a_i, b_i)$ is a pair of coordinates of the $i$-th point. The convex hull is a polygon with vertices $(a_1, b_1), (a_2, b_2), \\cdots, (a_N, b_N)$.\n\nNote that the convex hull is convex in the coordinate plane; the $i$-th vertex is $a_i = (a_i, b_i)$, $i = 1, 2, \\cdots, N$.\n\nThe convex hull is also a closed polygon: the first and the last vertices are identical.\n\nIn the case of the convex hull, there are $M$ lines between vertices. Thus, the convex hull can be described as a set of triangles, each with three edges. The $j$-th triangle has the vertices $(a_j, b_j), (a_j+1, b_j+1), (a_j+2, b_j+2)$.\n\nThe convex hull is not the minimum bounding box of the points; the minimum bounding box is $a_1 \\le a_2 \\le \\cdots \\le a_N \\le b_1 \\le b_2 \\le \\cdots \\le b_N$ with all the vertices $(a_i, b_i)$, where $i = 1, 2, \\cdots, N$.\n\nFor example, if the convex hull is described as a set of triangles with the vertices $(a_1, b_1), (a_2, b_2), \\cdots, (a_N, b_N)$, and if the line segment $(a_1, b_1)$ is between the vertices $(a_i, b_i)$, then the line segment $(a_i, b_i)$ is between the vertices $(a_1, b_1)$ and $(a_2, b_2)$.\n\nThe number of triangles $M$ is equal to the number of vertices $N$.\n\nThe convex hull is a convex polygon, and the number of vertices $N$ is equal to the number of edges of the polygon.\n\nThe convex hull contains all the points in the input points set, and the convex hull does not contain any points from the input points set that are strictly outside the convex hull.\n\nThe convex hull is not necessarily the smallest possible minimum bounding box of all the points.\n\nThe convex hull may contain points that are not in the input points set.\n\nIn the case of the convex hull, if the convex hull contains the point with coordinate $(x, y)$, then all the points $(x, y)$ that lie strictly inside the convex hull also fall strictly inside the convex hull.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe convex hull is not necessarily the minimum bounding box of all the points.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe convex hull is not necessarily the smallest possible minimum bounding box of all the points.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe convex hull may contain points that are not in the input points set.\n\nThe"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == 2\n\"\"\"\n\n\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n\") == \"2\"\nassert solution(\"5 4 2\\n0 1\\n0 2\\n3 0\\n0 2\\n2 3\\n2 0\\n3 2\\n3 3\\n1 2\\n0 2\\n1 3\\n0 2\\n2 2\\n1 0\\n1 1\\n\") == \"8\"\n\n\"\"\"\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4') == '2'\n\"\"\"\n\n\"\"\"\nWrite an efficient algorithm for the following assumptions:\n* N is an integer within the range [3..100,000];\n* each element of array A is an integer within the range [0..10,000];\n* each element of array B is an integer within the range [0..10,000];\n* A[i] \u2264 B[i], where 0 \u2264 i < N;\n* the triplet (A[i], A[j], A[k]) for all i, j, k is unique.\n\nAssume that:\n* the triplet (A[i], A[j], A[k]) is called a \"magic triplet\" if A[i] + A[j] + A[k] is odd;\n* N is an integer within the range [3..100,000];\n* each element of array A is an integer within the range [0..10,000];\n* each element of array B is an integer within the range [0..10,000];\n* A[i] \u2264 B[i], where 0 \u2264 i < N.\n\nThe goal of the problem is to find the largest possible sum of any magic triplet.\n\nIt can be proven that the sum of any magic triplet is odd.\n\"\"\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 1\\n3 4') == '1 2'\nassert solution('1 1\\n1 1\\n3 4') == '0 0'\nassert solution('3 2 3\\n1 1\\n2 2\\n0 0\\n1 3\\n0 0\\n1 4') == '2'\nassert solution('3 2 3\\n1 1\\n2 2\\n0 0\\n1 3\\n0 0\\n1 4') == '0'\n"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\") == 2\n\"\"\"\n\n\"\"\"\n\uc544\ub798 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc5d0\uc5b4\ucee8\uc740 \uacfc\uac10\ud55c \uc131\uaca9\uc758 \uc624\ub77d\uc2e4\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \n\uc624\ub77d\uc2e4\uc758 \uc870\uac74\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n1. \uc624\ub77d\uc2e4\uc758 \uc131\ub2a5\uc740 \ubcc4\ub85c \uc88b\uc9c0 \uc54a\ub2e4.\n2. \uba3c\uc800 \uc624\ub77d\uc2e4\uc744 \uc124\uce58\ud558\uba74 \uc5b4\ub5a4 \uc74c\uc2dd\uc774 \uc5b4\ub5a4 \uc5d0\uc5b4\ucee8\uc774 \uc124\uce58\ub420 \uc218 \uc788\uc744\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4. \n   \uc774\ub54c \uc74c\uc2dd\uc774 \uc5d0\uc5b4\ucee8\uc5d0 \uac00\ub2a5\ud55c \uc131\ub2a5\uc744 \uac00\uc9c0\uac8c \ud558\uba74 \uc88b\ub2e4.\n3. \uc624\ub77d\uc2e4 \uc74c\uc2dd\uc774 \uc120\ud638\ub418\ub294 \uc5d0\uc5b4\ucee8\uc744 \uc124\uce58\ud558\uba74 \uc5b4\ub5a4 \uc74c\uc2dd\uc744 \uc120\ud638\ud558\ub294\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4.\n   \uc774\ub54c \uc74c\uc2dd\uc774 \uc5d0\uc5b4\ucee8\uc5d0 \uac00\ub2a5\ud55c \uc131\ub2a5\uc744 \uac00\uc9c0\uac8c \ud558\uba74 \uc88b\ub2e4.\n4. \uc624\ub77d\uc2e4\uc744 \uc5ec\ub7ec \uac1c\uc758 \uacbd\uc6b0\uc758 \uc218\uc5d0\uc11c \uc120\ud638\ub418\ub294 \uc74c\uc2dd\uc774 \uc5d0\uc5b4\ucee8\uc5d0 \uac00\ub2a5\ud55c \uc131\ub2a5\uc744 \uac00\uc9c0\uac8c \ud558\uba74 \uc88b\ub2e4.\n5. \uac01 \uc624\ub77d\uc2e4\uc758 \uc74c\uc2dd\uc774 \ub3d9\uc77c\ud55c \uc870\uac74\uc744 \uac00\uc9c0\ub294 \uc5d0\uc5b4\ucee8\uc744 \uc124\uce58\ud558\uba74 \uc11c\ub85c \uc624\ub978\ucabd \uac01\ub3c4\uac00 \ub2e4\ub978 \uc624\ub77d\uc2e4\uc758 \uc131\ub2a5\uc744 \uac00\uc9c4 \uc5d0\uc5b4\ucee8\uc744 \uc124\uce58\ud560 \uc218 \uc788\ub2e4.\n6. \uac01 \uc624\ub77d\uc2e4\uc758 \uc74c\uc2dd\uc774 \ub3d9\uc77c\ud55c \uc870\uac74\uc744 \uac00\uc9c0\ub294 \uc5d0\uc5b4\ucee8\uc744 \uc124\uce58\ud558\uba74 \uc11c\ub85c \uc67c\ucabd \uac01\ub3c4\uac00 \ub2e4\ub978 \uc624\ub77d\uc2e4\uc758 \uc131\ub2a5\uc744 \uac00\uc9c4 \uc5d0\uc5b4\ucee8\uc744 \uc124\uce58\ud560 \uc218 \uc788\ub2e4.\n   \uac01 \uc624\ub77d\uc2e4\uc758 \uc74c\uc2dd\uc774 \ub3d9\uc77c\ud55c \uc870\uac74\uc744 \uac00\uc9c0\ub294 \uc5d0\uc5b4\ucee8\uc758 \uc131\ub2a5\uc740 \ubaa8\ub450 \uac19\uc544\uc57c \ud55c\ub2e4.\n\n\uc624\ub77d\uc2e4\uc758 \uc131\ub2a5\uc740 \ubcc4\ub85c \uc88b\uc9c0 \uc54a\ub2e4. \n\uc624\ub77d\uc2e4\uc758 \uc131\ub2a5\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ub450 \uc870\uac74\uc744 \uac00\uc9c0\uac8c \ud55c\ub2e4.\n\n1. \uc624\ub77d\uc2e4\uc758 \uc131\ub2a5\uc740 \ubcc4\ub85c \uc88b\uc9c0 \uc54a\ub2e4.\n2. \uba3c\uc800 \uc624\ub77d\uc2e4\uc744 \uc124\uce58\ud558\uba74 \uc5b4\ub5a4 \uc74c\uc2dd\uc774 \uc5b4\ub5a4 \uc5d0\uc5b4\ucee8\uc774 \uc124\uce58\ub420 \uc218 \uc788\uc744\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4. \n   \uc774\ub54c \uc74c\uc2dd\uc774 \uc5d0\uc5b4\ucee8\uc5d0 \uac00\ub2a5\ud55c \uc131\ub2a5\uc744 \uac00\uc9c0\uac8c \ud558\uba74 \uc88b\ub2e4.\n3. \uc624\ub77d\uc2e4 \uc74c\uc2dd\uc774 \uc120\ud638\ub418\ub294 \uc5d0\uc5b4\ucee8\uc744 \uc124\uce58\ud558\uba74 \uc5b4\ub5a4 \uc74c\uc2dd\uc744 \uc120\ud638\ud558\ub294\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4.\n   \uc774\ub54c \uc74c\uc2dd\uc774 \uc5d0\uc5b4\ucee8\uc5d0 \uac00\ub2a5\ud55c \uc131\ub2a5\uc744 \uac00\uc9c0\uac8c \ud558\uba74 \uc88b\ub2e4"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\n\"\"\""
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == 2\nprint(solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0'))\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\nassert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\nassert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport sys\n\nL, n = [int(x) for x in sys.stdin.readline().strip().split()]\nans = \"SAFE\"\nfor i in range(n):\n    x, d = sys.stdin.readline().strip().split()\n    x, L = int(x), int(L)\n    if (L - x) % 90!= 0:\n        ans = \"GHOST\"\nprint(ans)\n\n\"\"\"\nSolution 2\n\"\"\"\n\nimport sys\n\nL, n = [int(x) for x in sys.stdin.readline().strip().split()]\nans = \"SAFE\"\nfor i in range(n):\n    x, d = sys.stdin.readline().strip().split()\n    x, L = int(x), int(L)\n    if (L - x) % 90!= 0 and d == \"C\":\n        ans = \"GHOST\"\nprint(ans)\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\nassert solution('''4 2\n2 C\n3 C\n1 C\n''') == 'GHOST'\nassert solution('''4 3\n3 W\n2 W\n1 W\n''') == 'GHOST'\nassert solution('''4 2\n2 C\n3 C\n1 C\n''') == 'SAFE'\nassert solution('''4 3\n3 C\n2 W\n1 C\n''') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C') == 'GHOST'\nassert solution('4 3\\n3 C\\n2 C\\n1 C') == 'GHOST'\nassert solution('4 3\\n3 W\\n2 W\\n1 W') == 'SAFE'\nassert solution('4 3\\n3 W\\n2 C\\n1 C') == 'SAFE'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"2 3\\n\"\n\"3 C\\n\"\n\"1 C\\n\"\n) == \"GHOST\"\n\nassert solution(\n\"3 2\\n\"\n\"3 C\\n\"\n\"1 C\\n\"\n) == \"SAFE\"\n\nassert solution(\n\"3 4\\n\"\n\"1 C\\n\"\n\"2 C\\n\"\n\"3 C\\n\"\n) == \"GHOST\"\n\nassert solution(\n\"5 4\\n\"\n\"1 C\\n\"\n\"4 C\\n\"\n\"3 C\\n\"\n\"2 C\\n\"\n) == \"GHOST\"\n\nassert solution(\n\"5 5\\n\"\n\"1 C\\n\"\n\"4 C\\n\"\n\"3 C\\n\"\n\"2 C\\n\"\n) == \"SAFE\""
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C') == 'GHOST'\n\nSample Input:\n4 4\n0 C\n3 C\n1 C\n2 C\nSample Output:\nSAFE\n\nassert solution('4 4\\n0 C\\n3 C\\n1 C\\n2 C') == 'SAFE'\n\nSample Input:\n5 1\n2 C\nSample Output:\nGHOST\n\nassert solution('5 1\\n2 C') == 'GHOST'\n\nSample Input:\n5 4\n0 C\n2 C\n3 C\n4 C\nSample Output:\nSAFE\n\nassert solution('5 4\\n0 C\\n2 C\\n3 C\\n4 C') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C') == 'GHOST'\n\"\"\"\n\nL, N = input().split()\nL = int(L)\n\nwire_direction = []\nfor i in range(int(N)):\n    direction, wire = input().split()\n    wire_direction.append((wire, direction))\n\nwire_direction.sort(key=lambda x: x[0])\n\nfor i in range(int(N)):\n    wire = wire_direction[i][0]\n    direction = wire_direction[i][1]\n    if direction == 'W':\n        if wire_direction[i-1][0] == wire - 1:\n            print('GHOST')\n            break\n    elif direction == 'C':\n        if wire_direction[i-1][0] == wire + 1:\n            print('GHOST')\n            break\nelse:\n    print('SAFE')\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Iterator, List, Optional\n\nDIRECTION = {\"W\": True, \"C\": False}\n\nstdin: str\nstdout: str\n_input: List[str]\n_output: List[str]\n\n_find_non_touching_points: Optional[Iterator[int]] = None\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == '2'\n\"\"\"\nfrom typing import List\nimport sys\nimport math\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\nassert solution('3 3\\n2.00 2.50 3.00') == 'no fika'\nassert solution('1 3\\n0.25') == 'no fika'\n\n-----Constraints-----\n1 <= N <= L <= 1000\n0.1 <= x_i <= 1000\n0.1 <= v <= 10\n\n\"\"\""
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\n\n\"\"\"\n\nimport sys\nimport math\nimport pytest"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n0.00 2.00') == '2'\n'''\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0.00 2.00') == '2'\n\"\"\"\n\nN, L = map(float, input().split())\nx = sorted(map(float, input().split()))\n\ni = 0\nans = 0\n\nwhile i < N - 1:\n    v = (x[i + 1] - x[i]) / (L / N)\n    if abs(v - ans) > 10 ** -9:\n        ans = v\n    i += 1\n\nprint(\"%.2f\" % ans if ans!= 0 else \"no fika\")\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\n\"\"\"\n\nimport math\n\nN, L = map(int, input().split())\nL = [float(v) for v in input().split()]\nL.sort()\n\nv0 = 0\nv1 = L[-1] - L[0]\nwhile v1 - v0 >= 10 ** -9:\n    v = (v1 + v0) / 2\n    if sum(math.ceil(L[i] / v) for i in range(len(L))) <= N:\n        v0 = v\n    else:\n        v1 = v\n\nprint(min(v, v0 + 10 ** -9))\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\nassert solution(\"1 1\\n1.00\") == \"no fika\"\nassert solution(\"1 1\\n2.01\") == \"no fika\"\n\"\"\"\n\nN, L = [int(c) for c in input().split(' ')]\ndata = [float(c) for c in input().split(' ')]\ndata = sorted(data)\n\nstart = 1\nend = 10\nmid = (start + end) / 2"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'no fika'\nassert solution('2.0 1.0') == '2.0'\nassert solution('3.0 2.0') == '2.9'\nassert solution('2.9 3.0') == '2.9'\nassert solution('0.1 2.0') == '1.0'\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('2\\n1 2') == '2'\nassert solution('2\\n1\\n2') == '2'\nassert solution('2\\n1\\n2\\n1') == '2'\n"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n10 0\\n2\\n30 0\\n15 0\") == \"10\"\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10\\n20\\n30\\n40\") == 10\nassert solution(\"1\\n10\\n20\") == 10\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\n\"\"\"\n\n\n\n\"\"\"\n\u8fd9\u9053\u9898\u662f\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u9898\u76ee\uff0c\u4f46\u662f\u9700\u8981\u8fdb\u884c\u5148\u5e8f\u904d\u5386\u6392\u5e8f\uff0c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528\u5feb\u6392\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3002\u672c\u9898\u7684\u7b97\u6cd5\u662f\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\uff0c\n\u5177\u4f53\u5b9e\u73b0\u601d\u8def\u662f\uff0c\u4ece\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u627e\u5230\u4e00\u4e2a\u5143\u7d20\uff0c\u5206\u6210\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u4ece\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\u4e2d\u9012\u5f52\u6267\u884c\u6b64\u7b97\u6cd5\uff0c\u76f4\u5230\u6392\u5e8f\u5b8c\u6210\u3002\n\n\u5148\u5e8f\u904d\u5386\u7684\u65b9\u6cd5\u662f\u6bcf\u6b21\u627e\u51fa\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u5c06\u5176\u53f3\u8fb9\u7684\u5143\u7d20\u548c\u5de6\u8fb9\u7684\u5143\u7d20\u653e\u5230\u4e00\u8d77\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u786e\u4fdd\u5728\u5de6\u8fb9\u6570\u7ec4\u4e2d\u6bd4\u6700\u5c0f\u5143\u7d20\u5927\u7684\u5143\u7d20\u5728\u53f3\u8fb9\u3002\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        # \u5148\u628a\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n        distance.sort()\n        # \u521d\u59cb\u5316\u53c2\u6570\n        start, destination = min(start, destination), max(start, destination)\n        # \u8bb0\u5f55\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u8ddd\u79bb\n        left, right = 0, distance[-1]\n        for i in range(start, destination):\n            left += distance[i]\n        for j in range(start, destination):\n            right -= distance[j]\n        # \u8fd4\u56de\n        return min(left, right)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nprint(solution('1\\n2\\n3\\n'))\n\n'''\n\nfrom math import sqrt\n"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\ntry:\n    assert solution('2') == '2'\nexcept Exception as e:\n    print(e)\n\ntry:\n    assert solution('3') == '10'\nexcept Exception as e:\n    print(e)\n\ntry:\n    assert solution('100') == '98'\nexcept Exception as e:\n    print(e)\n\ntry:\n    assert solution('12345') == '10'\nexcept Exception as e:\n    print(e)\n\ntry:\n    "
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 0\\n30 0\") == \"10\"\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0\n0 1\n0 2\n2\n0 0\n0 1\n0 2\n''') == '4'\n\nassert solution('''\n2\n0 1\n1 1\n2\n0 1\n1 1\n''') == '2'\n\nassert solution('''\n1\n1\n1\n1\n''') == '0'\n\nassert solution('''\n1\n1\n1\n''') == '2'\n\nassert solution('''\n0\n0\n0\n''') == '0'"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3\\n4') == '2'\nassert solution('1\\n1\\n1\\n2') == '0'\nassert solution('1\\n1\\n2\\n1\\n1\\n2\\n3\\n3\\n3\\n4') == '1'\n"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 2\\n4\\n1 3\\n2 2\\n4\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\nW 10 0\\nW 10 3\\nE 17 4\") == \"0\"\n\"\"\"\nimport math\n\nt, n = map(int, input().split())\nwaiting_time_list = []\nfor i in range(n):\n    direction, arrival_time, irritation_time = input().split()\n    if direction == 'W':\n        waiting_time_list.append([int(arrival_time) - irritation_time, int(arrival_time)])\n    else:\n        waiting_time_list.append([int(arrival_time), int(arrival_time) + irritation_time])\nwaiting_time_list.sort()\n\nn = waiting_time_list[-1][0]\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\nW 10 0\\nW 10 3\\nE 17 4\\n\") == \"0\"\n\n\"\"\"\n\nt, n = map(int, input().split())\n\nroads = []\n\nfor _ in range(n):\n    d, a, r = input().split()\n    roads.append([d, int(a), int(r)])\n\nroads.sort(key=lambda x: x[1])\n\ncur_arrival = roads[0][1]\ncur_time = roads[0][2]\n\nfor i in range(1, n):\n    if roads[i][1] < cur_arrival:\n        cur_arrival = roads[i][1]\n        cur_time = roads[i][2]\n\nprint(cur_time)\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '0'\nassert solution('8 3\\nW 10 3\\nE 17 4\\n') == '0'\nassert solution('8 3\\nE 10 0\\nW 10 3\\nE 17 4\\n') == '1'\nassert solution('8 3\\nE 10 0\\nW 10 3\\nE 17 4\\n') == '1'\nassert solution('8 3\\nW 10 3\\nE 17 0\\nE 17 4\\n') == '1'\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\nW 10 0\\nW 10 3\\nE 17 4\") == '0'\nassert solution(\"5\\nW 10 0\\nE 10 1\\nE 10 2\\nW 10 3\\nW 10 3\\nE 10 4\") == '0'"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"W 10 0 W 10 3 E 17 4\") == \"0\"\n\"\"\"\n\n\"\"\"\nimport sys\n\nfrom collections import deque\nfrom collections import defaultdict\nfrom typing import List\n\nfrom functools import reduce\n\nMAX_INT = 999999999\nMIN_INT = -99999999\n\n\"\"\"\n\n\"\"\"\nfrom collections import deque\nfrom collections import defaultdict\nfrom typing import List\n\nMAX_INT = 999999999\nMIN_INT = -99999999\n\nclass Solution:\n    def __init__(self):\n        self.my_dict = defaultdict(dict)\n        self.num_cars = 0\n        self.num_drivers = 0\n        self.driver_to_num_car = []\n        self.car_to_driver = []\n\n    def solution(self, stdin: List[str]) -> None:\n        \"\"\"\n        >>> solution([\"W 10 0\", \"W 10 3\", \"E 17 4\"])\n        0\n        \"\"\"\n        self.num_cars, self.num_drivers = list(map(int, stdin.pop(0).split()))\n        cars = stdin.pop(0)\n\n        while self.num_drivers < self.num_cars:\n            self.num_drivers += 1\n            self.driver_to_num_car.append(self.num_cars - self.num_drivers)\n            self.car_to_driver.append(self.num_drivers - 1)\n\n        while cars:\n            arrival, irritation = list(map(int, cars.split()))\n\n            self.my_dict[arrival][irritation] = self.my_dict.get(arrival, dict()).get(irritation, 0) + 1\n\n            cars = stdin.pop(0)\n\n        self.max_irritation = 0\n        self.max_irritation_cars = []\n\n        for arrival, irritation_dict in self.my_dict.items():\n            for irritation, num_cars in irritation_dict.items():\n                if num_cars > self.max_irritation:\n                    self.max_irritation = num_cars\n                    self.max_irritation_cars = []\n\n                if num_cars == self.max_irritation:\n                    self.max_irritation_cars.append((arrival, irritation))\n\n        return self.driver_to_num_car[self.max_irritation_cars[0][1]]"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nW 2 0\\nW 2 1\") == \"1\"\nassert solution(\"3 3\\nW 10 1\\nE 1 0\\nE 1 5\") == \"2\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4') == '0'\n\"\"\"\n\nfrom collections import deque\nfrom heapq import heappop, heappush\nfrom sys import stdin\n\ninput = stdin.readline\n\nt, n = map(int, input().split())\nlst = deque()\n\nfor _ in range(n):\n    lst.append(tuple(map(int, input().split())))\n\ntime = 0\nheap = []\nfor _ in range(n):\n    while lst and lst[0][0] <= time:\n        heappush(heap, lst.popleft())\n\n    if heap:\n        _, rt = heappop(heap)\n        time += rt\n        if time > lst[0][0]:\n            time -= lst[0][0]\n            lst.appendleft(lst.pop())\n    else:\n        time += t\n\nprint(time)\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\nW 10 0\\nW 10 3\\nE 17 4') == '0'\nassert solution('6 3\\nW 10 0\\nE 20 7\\nE 10 3\\nE 10 6\\nE 20 7\\nE 20 8\\nW 10 0\\nW 10 3') == '2'\n\"\"\""
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport time\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n5 6\\n3 4\\n5 13\\n6 10\") == '3'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\n\nn = int(sys.stdin.readline())\nstore = defaultdict(list)\nfor i in range(n):\n    store[sys.stdin.readline().strip().split()].append(i)\n\nstore = dict(store)\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5\n5 8\n5 6\n3 4\n5 13\n6 10\n\"\"\"\n) == '3'\n\"\"\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n5 6\\n3 4\\n5 13\\n6 10\\n\") == \"3\"\n-----\n5\n1 1000\n2 1001\n3 1002\n4 1003\n5 1004\n6 1005\n7 1006\n8 1007\n9 1008\n10 1009\n11 1010\n12 1011\n13 1012\n14 1013\n15 1014\n16 1015\n17 1016\n18 1017\n19 1018\n20 1019\n21 1020\n22 1021\n23 1022\n24 1023\n25 1024\n26 1025\n27 1026\n28 1027\n29 1028\n30 1029\n31 1030\n32 1031\n33 1032\n34 1033\n35 1034\n36 1035\n37 1036\n38 1037\n39 1038\n40 1039\n41 1040\n42 1041\n43 1042\n44 1043\n45 1044\n46 1045\n47 1046\n48 1047\n49 1048\n50 1049\n51 1050\n52 1051\n53 1052\n54 1053\n55 1054\n56 1055\n57 1056\n58 1057\n59 1058\n60 1059\n61 1060\n62 1061\n63 1062\n64 1063\n65 1064\n66 1065\n67 1066\n68 1067\n69 1068\n70 1069\n71 1070\n72 1071\n73 1072\n74 1073\n75 1074\n76 1075\n77 1076\n78 1077\n79 1078\n80 1079\n81 1080\n82 1081\n83 1082\n84 1083\n85 1084\n86 1085\n87 1086\n88 1087\n89 1088\n90 1089\n91 1090\n92 1091\n93 1092\n94 1093\n95 1094\n96 1095\n97 1096\n98 1097\n99 1098\n100 1099\n101 1100\n102 1101\n103 1102\n104 1103\n105 1104\n106 1105\n107 1106\n108 1107\n109 1108\n110 9\n111 1109\n112 1110\n113 1111\n114 1112\n115 1113\n116 1114\n117 1115\n118 1116\n119 1117\n120 1118\n121 1119\n122 1120\n123 1121\n124 1122\n125 1123\n126 1124\n127 1125\n128 1126\n129 1127\n130 1128\n131 1129\n132 1130\n133 1131\n134 1132\n135 1133\n136 1134\n137 1135\n138 1136\n139 1137\n140 1138\n141 1139\n142 1140\n143 1141\n144 1142\n145 1143\n146 1144\n147 1145\n148 1146\n149 1147\n150 1148\n151 1149\n152 1150\n153 1151\n154 1152\n155 1153\n156 1154\n157 1155\n158 1156\n159 1157\n160 1158\n161 1159\n162 1160\n163 1161\n164 1162\n165 1163\n166 1164\n167 1165\n168 1166\n169 1167\n170 1168\n171 1169\n172 1170\n173 1171\n174 1172\n175 1173\n176 1174\n177 1175\n178 1176\n179 1177\n180 1178\n181 1179\n182 1180\n183 1181\n184 1182\n185 1183\n186 1184\n187 1185\n188 1186\n189 1187\n190 1188\n191 1189\n192 1190\n193 1191\n194 1192\n195 1193\n196 1194\n197 1195\n198 1196\n199 1197\n200 1198\n201 1199\n202 1200\n203 1201\n204 1202\n205 1203\n206 1204\n207 1205\n208 1206\n209 1207\n210 1208\n211 1209\n212 1210\n213 1211\n214 1212\n215 1213\n216 1214\n217 1215\n218 1216\n219 1217\n220 1218\n221 1219\n222 1220\n223 1221\n224 1222\n225 1223\n226 1224\n227 1225\n228 1226\n229 1227\n230 1228\n231 1229\n232 1230\n233 1231\n234 1232\n235 1233\n236 1234\n237 1235\n238 1236\n239 1237\n240 1238\n241 1239\n242 1240\n243 1241\n244 1242\n245 1243\n246 1244\n247 1245\n248 1246\n249 1247\n250 1248\n251 1249\n252 1250\n253 1251\n254 1252\n255 1253\n256 1254\n257 1255\n258 1256\n259 1257\n260 1258\n261 1259\n262 1260\n263 1261\n264 1262\n265 1263\n266 1264\n267 1265\n268 1266\n269 1267\n270 1268\n271 1269\n272 1270\n273 1271\n274 1272\n275 1273\n276 1274\n277 1275\n278 1276\n279 1277\n280 1278\n281 1279\n282 1280\n283 1281\n284 1282\n285 1283\n286 1284\n287 1285\n288 1286\n289 1287\n290 1288\n291 1289\n292 1290\n293 1291\n294 1292\n295 1293\n296 1294\n297 1295\n298 1296\n299 1297\n300 1298\n301 1299\n302 1300\n303 1301\n304 1302\n305 1303\n306 1304\n307 1305\n308 1306\n309 1307\n310 1308\n311 1309\n312 1310\n313 1311\n314 1312\n315 1313\n316 1314\n317 1315\n318 1316\n319 1317\n320 1318\n321 1319\n322 1320\n323 1321\n324 1322\n325 1323\n326 1324\n327 1325\n328 1326\n329 1327\n330 1328\n331 1329\n332 1330\n333 1331\n334 1332\n335 1333\n336 1334\n337 1335\n338 1336\n339 1337\n340 1338\n341 1339\n342 1340\n343 1341\n344 1342\n345 1343\n346 1344\n347 1345\n348 1346\n349 1347\n350 1348\n351 1349\n352 1350\n353 1351\n354 1352\n355 1353\n356 1354\n357 1355\n358 1356\n359 1357\n360 1358\n361 1359\n362 1360\n363 1361\n364 1362\n365 1363\n366 1364\n367 1365\n368 1366\n369 1367\n370 1368\n371 1369"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == expected\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n5 8\n5 6\n3 4\n5 13\n6 10''') == '3'\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == expected_result"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10\\n') == '3', 'wrong result'\nprint('Hooray!')\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10\\n\") == \"3\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\nassert solution('1\\n2\\n3') == '0'\nassert solution('1\\n1\\n2\\n2\\n3\\n1') == '3'\nassert solution('1\\n2\\n2\\n2\\n2\\n3\\n1') == '3'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == '6'\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10\") == 3\n\"\"\"\n\n\"\"\"\ninput\n5\n5 8\n5 6\n3 4\n5 13\n6 10\n\noutput\n3\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n10 3 3') == 'impossible'\n\nSample Input:\n4 4\n5 1 7\nSample Output:\nABAA\nABBC\nABBB\nABBC\n\"\"\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"4 4\", \"10 3 3\"]) == \"impossible\"\nassert solution([\"4 4\", \"10 3 1\"]) == \"impossible\"\nassert solution([\"4 4\", \"10 1 3\"]) == \"impossible\"\nassert solution([\"4 4\", \"10 2 3\"]) == \"impossible\"\nassert solution([\"4 4\", \"10 1 1\"]) == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n10 3 3\") == 'impossible'\n\n-----------------\nSample Input:\n4 4\n13 3 2\nSample Output:\nABACABACABACA\n'''\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n10 3 3') == 'impossible'\nassert solution('4 4\\n12 4 2') == 'impossible'\nassert solution('4 4\\n20 5 3') == 'impossible'\nassert solution('4 4\\n20 5 4') == '4 4\\nBBBB'\n\nSample Input:\n4 4\n10 5 3\nSample Output:\nimpossible\n\n\"\"\""
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 4\\n10 3 3\"\n) == \"impossible\"\nassert solution(\n    \"2 2\\n5 2 1\"\n) == \"2\\n2 2\\n2 2\"\nassert solution(\n    \"8 6\\n8 8 8\"\n) == \"impossible\"\nassert solution(\n    \"5 6\\n9 4 3\"\n) == \"impossible\""
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n10 3 3\") == \"impossible\"\nassert solution(\"4 4\\n6 3 3\") == \"2 2\\n6 1 1\"\nassert solution(\"4 4\\n4 3 3\") == \"impossible\""
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n10 3 3') == 'impossible'\nassert solution('4 4\\n10 2 3') == 'impossible'\nassert solution('4 4\\n10 2 2') == '2 2 3 3'\nassert solution('4 4\\n10 1 1') == '4 4'\nassert solution('4 4\\n10 1 2') == 'impossible'\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n10 3 3\") == \"impossible\"\nassert solution(\"3 4\\n3 5 3\") == \"impossible\"\nassert solution(\"2 4\\n2 2 2\") == \"impossible\"\nassert solution(\"4 2\\n1 1 2\") == \"A B A B\\nA C A B\"\nassert solution(\"4 4\\n6 5 3\") == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n10 3 3\") == \"impossible\"\n\n-------\nSample Input:\n4 4\n8 2 2\nSample Output:\nABABABABAB\nABABABABAB\nABABABABAB\nBABABABABA\nBABABABABA\nBABABABABA\nBABABABABA\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABABABAB\nBABABABABA\nBABABABABA\nABABA"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n10 3 3') == 'impossible'\nassert solution('4 4\\n10 5 2') == 'impossible'\nassert solution('4 4\\n5 6 2') == 'impossible'\nassert solution('4 4\\n5 7 4') == 'impossible'\nassert solution('4 4\\n5 8 6') == 'impossible'\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\"\"\"\n\nimport sys\n\ndict_ = dict()\nfor i in range(int(sys.stdin.readline())):\n    dict_[sys.stdin.readline().rstrip()] = 1\n\ninp = sys.stdin.readline().rstrip()\n\nlst = []\nfor i in range(len(inp)):\n    if inp[i].isalpha():\n        lst.append(inp[i])\n\nvowels = ['a','e','i','o','u']\nv = 0\na = 0\nfor i in lst:\n    if i in vowels:\n        v += 1\n    else:\n        a += 1\n\ni = 0\nj = 0\ndict_in = dict()\nfor i in dict_.keys():\n    if inp.count(i)!= 0:\n        dict_in[i] = inp.count(i)\nfor j in dict_in.keys():\n    if inp.count(j) == 1:\n        if inp.count(j) in dict_:\n            if j.count('e') == 1 and j.count('a') == 1:\n                if j.count('u') == 1 and j.count('o') == 1:\n                    if j.count('i') == 1 and j.count('e') == 1:\n                        dict_[j] = inp.count(j)\n                if j.count('o') == 1 and j.count('u') == 1:\n                    if j.count('a') == 1 and j.count('i') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('a') == 1 and j.count('u') == 1:\n                if j.count('i') == 1 and j.count('o') == 1:\n                    if j.count('e') == 1 and j.count('a') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('e') == 1 and j.count('o') == 1:\n                if j.count('a') == 1 and j.count('u') == 1:\n                    if j.count('i') == 1 and j.count('e') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('i') == 1 and j.count('o') == 1:\n                if j.count('e') == 1 and j.count('u') == 1:\n                    if j.count('a') == 1 and j.count('i') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('i') == 1 and j.count('o') == 1:\n                if j.count('e') == 1 and j.count('a') == 1:\n                    if j.count('u') == 1 and j.count('i') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('i') == 1 and j.count('a') == 1:\n                if j.count('u') == 1 and j.count('o') == 1:\n                    if j.count('e') == 1 and j.count('i') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('i') == 1 and j.count('e') == 1:\n                if j.count('o') == 1 and j.count('u') == 1:\n                    if j.count('a') == 1 and j.count('i') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('o') == 1 and j.count('i') == 1:\n                if j.count('e') == 1 and j.count('u') == 1:\n                    if j.count('a') == 1 and j.count('o') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('u') == 1 and j.count('i') == 1:\n                if j.count('e') == 1 and j.count('a') == 1:\n                    if j.count('o') == 1 and j.count('u') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('u') == 1 and j.count('a') == 1:\n                if j.count('o') == 1 and j.count('i') == 1:\n                    if j.count('e') == 1 and j.count('u') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('u') == 1 and j.count('o') == 1:\n                if j.count('i') == 1 and j.count('a') == 1:\n                    if j.count('e') == 1 and j.count('u') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('u') == 1 and j.count('e') == 1:\n                if j.count('o') == 1 and j.count('a') == 1:\n                    if j.count('i') == 1 and j.count('u') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('o') == 1 and j.count('i') == 1:\n                if j.count('e') == 1 and j.count('a') == 1:\n                    if j.count('u') == 1 and j.count('o') == 1:\n                        dict_[j] = inp.count(j)\n            if j.count('o') == 1 and j.count('a') == 1:\n                if j.count('i') =="
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('a b c d e') == ''\nassert solution('a b c d e f') == 'abcdef'\nassert solution('a b c d e f g h i') == 'abdefghi'\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))\n\nassert solution(\"8\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(solution(\"8\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))\n\nassert solution(\"5\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(solution(\"5\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))\n\nprint(solution(\"4\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))\n\nassert solution(\"4\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(solution(\"4\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))\n\nprint(solution(\"3\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))\n\nprint(solution(\"2\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))\n\nassert solution(\"2\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(solution(\"2\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))\n\nprint(solution(\"1\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"))"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nprint(solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'))"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    11\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n    \"\"\"\n) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nprint('Passed')\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a non-empty list of words, write a function that returns the *k* most frequent elements. The result should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.\n\nExample:\n\nInput:\nwords = ['lambda','school', 'rules', 'lambda','school', 'rocks']\nk = 2\n\nOutput:\n['lambda','school']\n\nExplanation:\n'lambda' and'school' are the two most frequent words.\nNote that lambda comes before school in an alphabetical sort.\n\n-----Input-----\nThe first line contains a single integer $t$ denoting the number of test cases. The description of $t$ test cases follows.\n\nEach test case contains 2 space-separated integers $n, k$ where $n$ is the number of words in the list and $k$ is the number of frequent elements.\n\nThe last line contains $n$ space-separated lowercase English letters, each representing a word in the list.\n\n4\n3 2\nlambda school rules lambda school rocks\n2 2\na a\na bb b\na bb bb c c c\n\n-----Output-----\nThe output for each test case contains two space-separated integers. The first integer is $k$, the second is the most frequent word.\n\n1 1\n1 a\n2 3\n1 a\n2 bb\n3 c\n\n-----Example-----\nSample Input:\n4\n1 2\nlambda\n1 1\na\n2 2\nab ab ab ab\nSample Output:\n1 a\n1 ab\n2 ab\n2 ab\n\n-----Explanation-----\nIn the first test case, the most frequent word is 'lambda' because it appears once. The second most frequent word is 'a' because it appears twice.\n\nIn the second test case, the most frequent word is 'a' because it appears twice. The second most frequent word is 'ab' because it appears three times.\n\nIn the third test case, the most frequent word is 'ab' because it appears three times. The second most frequent word is 'a' because it appears twice.\n\nIn the fourth test case, the most frequent word is 'ab' because it appears three times. The second most frequent word is 'a' because it appears twice.\n\"\"\"\n\nimport collections\nimport heapq\nimport functools\n\nclass Solution:\n    def kMostFrequent(self, stdin):\n        return self.kMostFrequent(stdin.split('\\n'))\n\n    # \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f\n    def kMostFrequent(self, stdin):\n        _, k = stdin.split(' ')\n        k = int(k)\n        words = stdin.split('\\n')\n        words = list(set(words))\n        # print(words)\n        d = {}\n        for word in words:\n            d[word] = d.get(word, 0) + 1\n        # print(d)\n\n        words_counts = []\n        for word, count in d.items():\n            words_counts.append((count, word))\n        # print(words_counts)\n        heapq.heapify(words_counts)\n        # print(words_counts)\n\n        res = []\n        for _ in range(k):\n            count, word = heapq.heappop(words_counts)\n            # print(count, word)\n            res.append(word)\n        return''.join(res)\n\n\nassert Solution().kMostFrequent(\n    \"\"\"\n    11\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n    \"\"\"\n) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nprint('Passed')\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.\n\nExample 1:\n\nInput: \"aba\"\nOutput: True\nExample 2:\n\nInput: \"abca\"\nOutput: True\nExplanation: You could delete the character 'c'.\nNote:\nThe string will only contain lowercase characters a-z. The maximum length of the string is 50000.\n\n-----Input-----\nThe first and only line of input contains a string s of length n.\n\n-----Output-----\nA single line containing the answer True or False.\n\nSample Input:\naba\nSample Output:\nTrue\n\n-----Example-----\nSample Input:\nabca\nSample Output:\nTrue\n\n-----Explanation-----\nWe could delete the character 'c'.\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        l = 0\n        r = len(s) - 1\n        # print(s)\n        for i in range(len(s)):\n            if s[i]!= s[r]:\n                l = i\n                r = r - 1\n                break\n            r = r - 1\n        # print(l, r)\n        s1 = s[:l]\n        s2 = s[l + 1:]\n        # print(s1, s2)\n        return self.isPalindrome(s1) or self.isPalindrome(s2)\n\n    def isPalindrome(self, s: str) -> bool:\n        return s == s[::-1]\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\n\"\"\""
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AE') == 'A'\nassert solution('AEB') == 'AB'\nassert solution('ABC') == 'ABC'\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\n\"\"\"\nimport sys\nimport re\nimport math\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abrahellehhelleh') == 12\nassert solution('rachelhellabracadabra') == 0\nassert solution('rhacphsa') == 0\nassert solution('rbbxaa') == 0\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abrahellehhelleh') == 12\n\"\"\"\n\nimport re"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abrahellehhelleh') == 12\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('abrahellehhelleh') == 12\nassert solution('rachelhellabracadabra') == 0\nassert solution('abra') == 0\nassert solution('abraa') == 0\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\nassert solution(\"rachelhellabracadabra\") == 0\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\nassert solution(\"abcdefghi\") == 0\nassert solution(\"abracadabra\") == 0\nassert solution(\"acedcdefghi\") == 0\n\"\"\"\n\nfrom typing import Dict"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abrahellehhelleh') == 12\nprint(solution('abrahellehhelleh'))\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\nassert solution(\"rachelhellabracadabra\") == 0\n\n'''\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abrahellehhelleh') == 12\n\"\"\""
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"180\"\n\n\"\"\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n\nassert solution('''1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '0'\n\nassert solution('''65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '340'\n\nassert solution('''65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '340'\n\nassert solution('''65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"0\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"90\"\n\"\"\"\n\n\nfrom collections import Counter\nfrom functools import reduce"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\nprint('assert pass')\n\nassert solution('''195\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '70'"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '70'\nassert solution('65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '0'\nassert solution('65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n2 2 2 2 2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '0'\nassert solution('65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '0'\nassert solution('65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\n\n\"\"\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\nassert solution(\"65\\n5 5 5 5 5 5 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5 5 5 5 5\\n\") == \"340\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 9\\n1 1\\n1 2\\n2 3\\n3 4\\n0 0\\n1 1\\n0 1') == '3\\n2\\n4\\n1'\nassert solution('4 8\\n1 1\\n1 2\\n2 3\\n3 4\\n0 0\\n0 1\\n1 2\\n0 2') == '3\\n1\\n1\\n2\\n0'\n\n\"\"\""
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n8\\n8\\n8\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n8\\n8\\n8\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n8\\n8\\n8\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n8\\n8\\n8\\n\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == '10\\n7\\n8\\n7\\n'\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4') == '10\\n7\\n8\\n7\\n'\nassert solution('5 0\\n1 2 3 4 5\\n0 2\\n0 1\\n1 1\\n1 0\\n1 2') == '5\\n5\\n'\n\"\"\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == '10\\n7\\n8\\n7\\n'\nassert solution(\"1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == '10\\n8\\n8\\n8\\n'\nassert solution(\"1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == '10\\n8\\n8\\n8\\n'\nassert solution(\"1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == '10\\n8\\n8\\n8\\n'\nassert solution(\"1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == '10\\n8\\n8\\n8\\n'\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\\n\""
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10\\n7\\n8\\n7\\n'\n\n\"\"\""
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\\n\"\n\n\"\"\""
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\"\n\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n0 3\\n0 1\\n1 3\\n0 2\\n2 3') == '8\\n7\\n8\\n7'\n\n\"\"\"\n\n\n\n\"\"\"\nI learned the usage of class list in python and learned the use of class list and inheritance and implemented a solution to the problem.\n\"\"\"\n\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def find_magical_color_subtree(self, root: TreeNode, magical_color: int) -> int:\n        if not root:\n            return 0\n        root_color = root.val\n        left_color_count = self.find_magical_color_subtree(root.left, magical_color)\n        right_color_count = self.find_magical_color_subtree(root.right, magical_color)\n        magical_color_count = left_color_count + right_color_count\n        if root_color == magical_color:\n            magical_color_count += 1\n        if root_color == magical_color:\n            magical_color_count += 1\n        return magical_color_count\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\""
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\"\"\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    2 4 7\n    -2 0\n    0 -1\n    -2 1\n    1 0\n    2 1\n    2 3\n    3 -1\n    \"\"\"\n) == \"6\"\n\n\"\"\"\nExplanation:\n\nThere are 7 people who need to cross the river, so the answer is 7.\n\nThere are only 3 logs in the river, so the answer is 3.\n\"\"\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1') == '6'\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n\n------------------"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1''') == '6'\n\n'''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n\n'''\n\nassert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1''') == '4'\n\n'''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n\n'''\n\nassert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n3 3''') == '3'\n\n'''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n3 3\n\n'''\n\nassert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n3 3\n\n''') == '4'\n\n'''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n3 3\n3 3\n\n'''\n\nassert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n3 3\n3 3\n\n''') == '3'\n\n'''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n3 3\n3 3\n3 3\n\n'''"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == 6\nprint(solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\"))\n\n\"\"\"\n\nfrom typing import List\nimport itertools\n\nclass Solution:\n    def __init__(self) -> None:\n        self.banks = {}\n        self.boulder_to_banks = {}\n        self.bridges = {}\n\n    def part1(self) -> int:\n        def find_closest(start: int, end: int, bridge: bool = False) -> int:\n            if start == end:\n                return start\n            current_bank = end\n            if bridge:\n                current_bank = self.bridges[start][end]\n            while current_bank!= start:\n                current_bank = self.bridges[current_bank][end]\n                if bridge:\n                    self.bridges[start][end] = current_bank\n            return current_bank\n\n        self.build_graph(part2 = False)\n        for b in self.bridges:\n            self.bridges[b] = self.bridges[b][:]\n        for b in self.boulder_to_banks:\n            self.bridges[b] = []\n        for b in self.boulder_to_banks:\n            if b not in self.bridges[self.boulder_to_banks[b][0]]:\n                self.bridges[b].append(self.boulder_to_banks[b][0])\n        self.bridges[self.boulder_to_banks[-2][0]].append(self.boulder_to_banks[-2][1])\n        self.bridges[self.boulder_to_banks[-1][0]].append(self.boulder_to_banks[-1][1])\n        self.bridges[self.boulder_to_banks[-1][0]].remove(self.boulder_to_banks[-2][1])\n        self.bridges[self.boulder_to_banks[-2][0]].remove(self.boulder_to_banks[-1][1])\n\n        self.count_safe = 0\n        for _ in range(len(self.bridges)):\n            current = []\n            for b in self.bridges:\n                if len(self.bridges[b]) == 0:\n                    current.append(b)\n            for b in current:\n                self.bridges.pop(b)\n            for b in self.bridges:\n                for x in self.bridges[b]:\n                    self.bridges[x].remove(b)\n            self.count_safe += 1\n            if len(current) == 0:\n                return self.count_safe\n        return self.count_safe\n\n    def part2(self) -> int:\n        def find_closest(start: int, end: int, bridge: bool = False) -> int:\n            if start == end:\n                return start\n            current_bank = end\n            if bridge:\n                current_bank = self.bridges[start][end]\n            while current_bank!= start:\n                current_bank = self.bridges[current_bank][end]\n                if bridge:\n                    self.bridges[start][end] = current_bank\n            return current_bank\n\n        self.build_graph(part2 = True)\n        self.bridges[-1] = [-1] * len(self.bridges)\n        self.bridges[-2] = [-2] * len(self.bridges)\n        self.bridges[0] = [0] * len(self.bridges)\n        self.bridges[1] = [1] * len(self.bridges)\n        self.bridges[2] = [2] * len(self.bridges)\n        for b in self.boulder_to_banks:\n            if len(self.bridges[self.boulder_to_banks[b][0]]) == 0:\n                self.bridges[self.boulder_to_banks[b][0]].append(b)\n            if len(self.bridges[self.boulder_to_banks[b][1]]) == 0:\n                self.bridges[self.boulder_to_banks[b][1]].append(b)\n            if len(self.bridges[b]) == 0:\n                self.bridges[b] = [b]\n        for b in self.bridges:\n            for x in self.bridges[b]:\n                self.bridges[x].remove(b)\n        self.count_safe = 0\n        for _ in range(len(self.bridges)):\n            current = []\n            for b in self.bridges:\n                if len(self.bridges[b]) == 0:\n                    current.append(b)\n            for b in current:\n                self.bridges.pop(b)\n            for b in self.bridges:\n                for x in self.bridges[b]:\n                    self.bridges[x].remove(b)\n            self.count_safe += 1\n            if len(current) == 0:\n                return self.count_safe\n        return self.count_safe\n\n    def build_graph(self, part2: bool) -> None:\n        self.banks = {x: [] for x in range(-2, self.R + 1)}\n        for line in self.lines:\n            start = line[0]\n            end = line[1]\n            self.banks[start].append(end)\n            if end in self.banks:\n                self.banks[end].append(start)\n            if not part2:\n                self.boulder_to_banks[start]"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '-2 0'\n) == '6'\nassert solution(\n    '2 1'\n) == '2'\n\n-----Test Data-----\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n3 0\n\n-----Explanation-----\nThe example is described in the statement.\n'''\n\nimport sys"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == '6'\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('2.75 1.25 3.5 100') == '2'\nassert solution('2.75 1.25 3.5 100') == '3'\nassert solution('2.75 1.25 3.5 10') == '2'\nassert solution('2.75 1.25 3.5 10') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3 1 4 40) == 3\nassert solution(5.4 2.1 1.9 0.9) == 2\nassert solution(2.6 1.9 1.9 1.9) == 1\nassert solution(1.5 1.9 1.9 1.9) == 0\nassert solution(0.5 1.9 1.9 1.9) == 0\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\nassert solution(\"2.5 1 4 40\") == \"2\"\nassert solution(\"3.5 1 4 40\") == \"3\"\nassert solution(\"3.501 1 4 40\") == \"3\"\nassert solution(\"3.501 1 4 40\") == \"3\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\nassert solution(\"3 1 4 10\") == \"3\"\nassert solution(\"3 1 4 50\") == \"3\"\nassert solution(\"3 1 4 20\") == \"2\"\n\"\"\""
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\nassert solution(\"3 1 4 40\") == \"3\"\nassert solution(\"3 1 4 40\") == \"3\"\n\nprint(solution(stdin.strip()))\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3 2 5 10') == '3'\nassert solution('3.2 5 10') == '4'\nassert solution('3.2 5.1 10') == '4'\nassert solution('3.2 5 10') == '4'\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 0.5 4\n7 80''') == '3'\nassert solution('''1 0.5 4\n7 100''') == '0'\nassert solution('''1 0.5 4\n7 10''') == '1'\nassert solution('''1 0.5 4\n7 10''') == '1'\nassert solution('''1 0.5 4\n7 80''') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4 40\") == 3\nassert solution(\"3 1 4 40\") == 3\n\"\"\""
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 4 40\") == 3\n\nimport sys\nassert solution(sys.stdin.read()) == \"3\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\") == \"99\"\n\n\"\"\"\n\nfrom copy import deepcopy\nimport numpy as np\n\nnum_case = int(input())\nmax_score = 0\ntime = 1440\n\nfor case in range(num_case):\n    time_list = []\n    num_task = int(input())\n    time_list.append(time)\n    for i in range(num_task):\n        p, t, d = map(int, input().split())\n        time_list.append([p, t, d])\n    time_list.append(time)\n    time_list = np.array(time_list)\n\n    time_list = np.transpose(time_list)\n    \n    for i in range(1, num_task+2):\n        for j in range(1, num_task+2):\n            if i!= j and time_list[i][0] == 0:\n                time_list[j][0] += time_list[i][0]\n            elif time_list[i][0]!= 0:\n                time_list[j][0] += min(time_list[i][1], time_list[i][2])\n            else:\n                pass\n    \n    time_list = np.transpose(time_list)\n\n    score_list = []\n    for i in range(num_task+2):\n        score_list.append(time_list[i][0])\n\n    max_score = max(max_score, max(score_list))\n    print(max_score)\n    indices = []\n    for i, j in enumerate(score_list):\n        if j == max_score:\n            indices.append(i)\n\n    indices.sort()\n    for i in indices:\n        print(i, end=\" \")\n    print()\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 15\") == \"1\\n2\\n4\\n5\\n6\\n7\\n8\\n9\\n10\"\nassert solution(\"7 15\", is_part_2=True) == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('\\n\\n\\n\\n') == ''\nassert solution('1\\n1\\n1\\n') == ''\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\") == \"99\"\n\n\"\"\""
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99\\n3'\n\nassert solution('5 15\\n1 2 10\\n4 4 15\\n1 2 10\\n4 4 15\\n1 2 10\\n4 4 15\\n2 2 15\\n4 2 10') == '10\\n5'\n\nassert solution('3 10\\n1 2 5\\n4 4 6\\n1 2 5') == '0\\n0'\n\nassert solution('3 10\\n1 2 5\\n4 4 6\\n1 2 5\\n4 4 6\\n1 2 5') == '5\\n0\\n2'\n\nassert solution('3 10\\n2 5 10\\n4 4 6\\n1 2 5') == '10\\n1'"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\") == \"99\"\n\nassert solution(\"3 524\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1\"\n\nassert solution(\"1 2 3 4 5\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1 2 3 4 5\"\n\nassert solution(\"1 2 3 4 5\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n\") == \"99\"\n\"\"\"\n\n##########################################################################################################################################\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\") == \"99\\n3\"\n\n\"\"\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('2 1000\\n10 10\\n1 1\\n2 2\\n2 10\\n10 10\\n2 2\\n1 1') == '11'\nassert solution('3 100\\n15 10\\n10 15\\n2 1\\n1 2\\n2 10') == '0'\nassert solution('1 1\\n1 1') == '0'\n\"\"\"\nfrom collections import defaultdict\nimport heapq\n\nn, t = map(int, input().split())\nm = defaultdict(list)\nfor i in range(n):\n    a, b, c, d = map(int, input().split())\n    m[a].append((b, c, d))"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('3 352\\n91 82 445\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\n\n'''"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n4 2\\n\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\nassert solution(\"4\\n1 2\\n2 2\\n3 4\") == \"2\\n3 4\\n4 1\"\nassert solution(\"4\\n1 2\\n2 4\\n3 4\") == \"2\\n3 4\\n4 3\"\nassert solution(\"4\\n1 3\\n2 4\") == \"3\\n4 1\""
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\n\"\"\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n4 2\\n4 3\"\n\"\"\""
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == '2\\n4 2\\n4 3'\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n1 2\\n2 3\\n3 4\") == '2\\n4 2\\n4 3\\n4 1\\n3 4'\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n1 2\\n2 3\\n3 4\") == '2\\n4 2\\n4 3\\n3 4'\n\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == '2\\n5 4\\n5 1\\n3 4'\n\nassert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == '2\\n6 5\\n6 1\\n3 4'"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\n\"\"\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n4 2\\n4 3\"\nassert solution(\"4\\n1 2\\n3 4\") == \"3\\n3 1\\n2 4\"\nassert solution(\"4\\n2 3\\n3 4\") == \"3\\n2 4\\n4 1\""
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\") == \"3\\n3 1\\n1 2\"\nassert solution(\"4\\n1 2\\n1 3\\n3 4\") == \"4\\n1 3\\n1 2\"\nassert solution(\"4\\n1 2\\n1 3\\n3 1\") == \"3\\n3 1\\n1 2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\") == \"3\\n3 1\\n1 2\"\n\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n4 2\"\nassert solution(\"4\\n1 2\\n2 2\\n3 4\\n\") == \"1\\n2 2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 3\\n\") == \"1\\n3 2\\n1 3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 3\\n\") == \"1\\n2 2\"\nassert solution(\"4\\n1 2\\n3 3\\n3 4\\n\") == \"1\\n3 2\\n1 3\"\n\"\"\"\nfrom typing import List, Tuple\nfrom unittest import TestCase\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1\\n') == '9.0000\\n12\\n12.00000\\n9.0'\nassert solution('4\\n4 1\\n2 2\\n3 2\\n1 1\\n') == '9.0'\nassert solution('4\\n3 2\\n2 2\\n1 1\\n') == '12\\n12.00000\\n9.0'\n\"\"\""
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == '9.0'\nassert solution(\"4\\n3 2\\n3 2\\n4 1\") == '12.0'\nassert solution(\"4\\n1 1\\n3 2\\n3 2\\n4 1\") == '12.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 1\n2 2\n3 2\n4 1\n''') == '''\n9.0\n12\n12.0\n9.0\n'''"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"9.0\\n12\\n12.0\\n9.0\""
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"9.0\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nresult = []\n\nfor i in range(N):\n    x, h = map(int, sys.stdin.readline().split())\n    result.append(180 * x / h)\n\nfor r in result:\n    print(round(r, 4))\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1') == '9.0'\nassert solution('4\\n4 1\\n3 2\\n2 2') == '12'\nassert solution('4\\n4 1\\n3 2\\n2 2') == '12'\n'''\n\nN = int(stdin.readline())\n\nfor i in range(N):\n    X, H = map(int, stdin.readline().split())\n    sol = 180 * H / X\n    print('%.4f' % sol)"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"9.0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1\\n') == '9.0\\n12\\n12.0\\n9.0\\n'\n\nassert solution('5\\n1 1\\n2 1\\n3 2\\n4 1\\n5 1\\n') == '12.0\\n10\\n10.0\\n12.0\\n12.0\\n'\n\n\"\"\"\n\nimport sys\n\nn = int(input())\n\narr = [[0 for j in range(2)] for i in range(n)]\n\nfor i in range(n):\n    arr[i][0], arr[i][1] = [int(j) for j in input().split()]\n\narr.sort(key=lambda x: x[0])\n\nmax = 0\nfor i in range(n):\n    max += arr[i][1]\n\ntime = [max]\n\nfor i in range(1, n):\n    time.append(time[i - 1] - arr[i - 1][1])\n\ntime.sort()\n\nfor i in range(len(time)):\n    print(round(time[i] / arr[i][0], 4))\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(sample_input) == \"A\\nX\\nST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y'\n\nimport io, sys\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"\"\"ST A\nST X\nPH A\nPH X\nAD\nPL Y\nDI Y\"\"\"\n\n\"\"\"\n\n------\n\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n''') == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n\"\"\"\n\n\nfrom pathlib import Path\nfrom typing import IO, List, Tuple\n\nimport numpy as np\n\nfrom util import cnt_io\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\nassert solution('1\\n') == \"ST A\\nST X\\nPH A\\nAD\\nPL Y\\nDI Y\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\""
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('A') == 'ST A'\nassert solution('B') == 'ST X'\nassert solution('C') == 'ST Y'\n\n'''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\n\n\nInstructions\n\nYou are given a program written in code by the computer, and it will execute one instruction in its entirety.\n\nThe input to the program is provided to you as a string, with a single instruction per line, and each instruction must be on a single line.\n\nEach instruction will be one of the following:\n\n- `push <x>`: Push the string `<x>` onto the instruction stream.\n- `pop`: Pop a value from the instruction stream and output it.\n- `write <x>`: Output a string `<x>`.\n- `if <reg>`: Jump to the instruction immediately after the next one if the value in the register is nonzero.\n- `goto <x>`: Jump to the instruction at `<x>`.\n- `set <reg> <x>`: Set the value of the register `<reg>` to `<x>`.\n- `end`: Terminate the program.\n- `print <x>`: Output the value `<x>`.\n- `jump <x>`: Skip the next instruction `<x>` lines.\n- `set <reg> <x>`: Set the register `<reg>` to `<x>`.\n\nNote that `<reg>` must be a valid register name (i.e. one of `A`, `B`, `C`, `D`, `E`, `F`, `X`, `Y`, or `Z`).\n\nInstructions can be repeated on the same line if you need to spread out your instructions.\n\nE.g.\n\n`push A`\n`set D 10`\n`if A nonzero goto B`\n`if C nonzero goto D`\n`end`\n`pop B`\n`pop C`\n`print A`\n`print B`\n`print C`\n`print D`\n\nThe values written to the various registers will be the values of the first line of instructions that are executed.\n\nYour task is to determine which instructions are valid for the program.\n\n---\n\nSome examples:\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n''') == '''\nST A\nST X\nPH A\nPH X\nAD\nPL Y\nDI Y\n'''"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n\"\"\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\\n\") == '2'\n\nassert solution(\"1 5 6\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n\") == '0'\n\nassert solution(\"1 5 6\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n\") == '0'\n\nassert solution(\"1 5 6\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n\") == '0'\n\nassert solution(\"1 5 6\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n\") == '0'"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 6\\n\"\n\"FFF FFF FFFF FFFF FFFF\\n\"\n\"FFF FFFF FFFF FFFF FFFF\\n\"\n\"FFF FFFF FFFF FFFF FFFF\\n\"\n\"FFF FFFF FFFF FFFF FFFF\\n\"\n\"FFF FFFF FFFF FFFF FFFF\\n\") == \"2\"\nassert solution(\"1 5 6\\n\"\n\"0000 FFFF 0000 0000 0000 0000\\n\"\n\"FFFF FFFF 0000 FFFF FFFF 0000\\n\"\n\"0000 0000 0000 FFFF 0000 0000\\n\"\n\"0000 FFFF FFFF FFFF FFFF 0000\\n\"\n\"0000 0000 0000 0000 0000 0000\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000') == '2'\n\nprint(solution(stdin))\n\"\"\"\n\nimport re\nfrom typing import List, Dict, Union\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == \"2\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000') == 2\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 6\\n'\n        '0000 FFFF 0000 0000 0000 0000\\n'\n        'FFFF FFFF 0000 FFFF FFFF 0000\\n'\n        '0000 0000 0000 FFFF 0000 0000\\n'\n        '0000 FFFF FFFF FFFF FFFF 0000\\n'\n        '0000 0000 0000 0000 0000 0000\\n') == 2\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 6\\n\"\n\"0000 FFFF 0000 0000 0000 0000\\n\"\n\"FFFF FFFF 0000 FFFF FFFF 0000\\n\"\n\"0000 0000 0000 FFFF 0000 0000\\n\"\n\"0000 FFFF FFFF FFFF FFFF 0000\\n\"\n\"0000 0000 0000 0000 0000 0000\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 6\\n' + '0x0'*9 + '\\n' + '0xF'*9 + '\\n' + '0x0'*9 + '\\n' + '0x0'*9) == 2\nassert solution('1 5 6\\n' + '0x0'*9 + '\\n' + '0xF'*9 + '\\n' + '0x0'*9 + '\\n' + '0xF'*9) == 2\nassert solution('1 5 6\\n' + '0x0'*9 + '\\n' + '0x0'*9 + '\\n' + '0xF'*9 + '\\n' + '0xF'*9) == 1\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 6\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == 2\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"\"\"\nabaaba\nNONE\nabbbbbbbbbbbbbbbbba\na\n\"\"\"[1:]\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test1) == \"abaaba\"\nassert solution(test2) == \"abba\"\n\"\"\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \") == 'abaaba'\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \") == 'abbbbbbbbbbbbbbbbba'\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \") == 'NONE'\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \") == 'a'\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \") == 'NONE'"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"abaaba\"\nassert solution(\"3\\nA -> a\\nA -> b\\nA ->\") == \"NONE\"\nassert solution(\"4\\nA -> a\\nA -> a\\nA -> a\\nA ->\") == \"aaaaa\"\nassert solution(\"1\\nA -> a\\nA -> a\\nA -> a\\nA ->\") == \"a\"\nassert solution(\"2\\nA -> aa\\nA -> a\\nA -> a\\nA ->\") == \"aaaaa\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \") == \"abaaba\"\nassert solution(\"3\\nA -> a\\nA -> B\\nA -> a\\nA -> A\\nA -> \\nA -> \") == \"a\"\nassert solution(\"2\\nA -> a\\nA -> A\\nA -> \\nA -> \") == \"NONE\"\nassert solution(\"3\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \") == \"abaaba\"\nassert solution(\"3\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \") == \"abbbbbbbbbbbbbbbbba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"S -> aSb\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"abaaba\\nNONE\\nabbbbbbbbbbbbbbbbba\\na\\n\"\nassert solution(\"\"\"S -> aSb\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"abaaba\\nNONE\\nabbbbbbbbbbbbbbbbba\\na\\n\"\nassert solution(\"\"\"S -> aSb\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"abaaba\\nNONE\\nabbbbbbbbbbbbbbbbba\\na\\n\"\nassert solution(\"\"\"S -> aSb\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"abaaba\\nNONE\\nabbbbbbbbbbbbbbbbba\\na\\n\"\nassert solution(\"\"\"S -> aSb\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"abaaba\\nNONE\\nabbbbbbbbbbbbbbbbba\\na\\n\"\n\"\"\"\nS -> aSb\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \\nS ->\") == \"abaaba\"\nassert solution(\"S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \\nS ->\") == \"NONE\"\nassert solution(\"S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \\nS ->\") == \"abbbbbbbbbbbbbbbbba\"\nassert solution(\"S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \\nS ->\") == \"a\"\nassert solution(\"S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \\nS ->\") == \"NONE\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\nS -> aS\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\n\nassert solution('''\nS -> aS\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'b'\n\nassert solution('''\nS -> aS\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'a'\n\nassert solution('''\nS -> aS\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'b'\n\nassert solution('''\nS -> aS\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'NONE'"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nS->aS\\nS->bSb\\nS->a\\nS->b\\nS->\\n') == 'bSb'\nassert solution('3\\nS->a\\nS->b\\nS->a\\n') == 'a'\nassert solution('4\\nS->aS\\nS->bSb\\nS->a\\nS->b\\n') == 'bSb'"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"S -> aSa S -> bSb S -> a S S -> b S b S -> a b S b S b S -> a b S b S b S b S\") == 'abaaba'\nassert solution('S -> a S S -> b S b S b S') == 'a'\nassert solution('S -> a S S') == 'b'\nassert solution('S -> b S b S') == 'b'\nassert solution('S -> a') == 'a'\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 0 2\\n1 3 7\\n2 0\\n4') == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == '4'\n\n-----\nSample Input:\n7\n1 5 7 0 4 3 2\n1 2 3 4 5 6 7\n1 3\n2 4\n3 5\nSample Output:\n4\n\n-----\nSample Input:\n8\n1 5 7 0 4 3 2\n1 2 3 4 5 6 7\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\nSample Output:\n0\n\n-----\nSample Input:\n5\n1 5 7 0 4 3 2\n1 2 3 4 5 6 7\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\nSample Output:\n4\n\n-----\nSample Input:\n3\n4 5 7 0 2\n1 3 6 7 0\n2 3\n4\n3\nSample Output:\n3\n\n-----\nSample Input:\n2\n1 2\n1 2\nSample Output:\n0\n\n\"\"\""
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\nassert solution('3\\n10 4 1\\n0\\n') == '6'\nassert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    5\n    4 5 0 2\n    1 3 7\n    2 0\n    4\n    \"\"\"\n) == '4'\n\nassert solution(\n    \"\"\"\n    5\n    4 5 0 2\n    1 3 7\n    2 0\n    4\n    \"\"\"\n) == '4'\n\nassert solution(\n    \"\"\"\n    5\n    4 5 0 2\n    1 3 7\n    2 0\n    4\n    \"\"\"\n) == '4'\n\nassert solution(\n    \"\"\"\n    5\n    4 5 0 2\n    1 3 7\n    2 0\n    4\n    \"\"\"\n) == '4'\n\nassert solution(\n    \"\"\"\n    5\n    4 5 0 2\n    1 3 7\n    2 0\n    4\n    \"\"\"\n) == '4'"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n4 0 2') == '4'\nassert solution('4\\n5 5 0 2') == '4'\nassert solution('4\\n0') == '0'\nassert solution('4\\n5 4 0 2') == '4'\nassert solution('4\\n5 5 0 2') == '4'"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == '4'\nassert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == '4'\nassert solution(\"7\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == '0'\nassert solution(\"3\\n1 0\\n2 2\\n1 1\\n\") == '1'\nassert solution(\"3\\n1 0\\n2 2\\n1 1\\n\") == '1'\n\n\"\"\"\n\nn = int(stdin.readline().strip())\ns = list(map(int, stdin.readline().strip().split()))\n\ni = 0\nd = [0 for _ in range(n)]\n\nwhile i < n - 1:\n    j = 0\n    while j < n - i:\n        d[i + j] = max(d[i + j], s[i + j] + s[j] - d[i])\n        j += 1\n    i += 1\n\nprint(sum(d))\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 7\\n2\\n4\") == \"4\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\") == \"4\"\n\"\"\"\n\nimport math\nimport sys\n\nn = int(input())\narr = []\nfor i in range(n - 1):\n    x = list(map(int, input().split()))\n    arr.append(x)"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'GO FOR IT'\nassert solution('''4 3\nWWWW\nWSBB\nWWWW\nWBWG''') == 'NO CHANCE'\nassert solution('''3 2\nWWWW\nWSBB\nWWWW\nWBWG''') == 'NO WAY'\nassert solution('''3 3\nWWWW\nWSBB\nWWWW\nWBWG''') == 'SUCCESS'\nassert solution('''4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'SUCCESS'\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\n\"\"\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\"\n) == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'GO FOR IT'\n\"\"\"\n\n\"\"\"\nAssumption:\nThe goal of the game is to get to the goal tile as soon as possible.\nThe player who cannot reach the goal is considered lost.\nIf it is the player who loses, the player who can reach the goal will win.\n\nAlgorithm:\n1. Initialize the endpoints.\n2. Iterate through the input string and for every character in the map, check if it is a starting or ending point.\n    a. If it is not a starting point, skip this character.\n    b. If it is a starting point, see if the player who can reach the starting point can reach the goal tile by adding another step to the current point.\n        i. If the player can reach the goal, return \u201cGO FOR IT\u201d.\n        ii. If the player cannot reach the goal, return \u201cNO CHANCE\u201d.\n3. If the game cannot be won in one move, return \u201cNO WAY\u201d.\n\n\"\"\""
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"NO CHANCE\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'GO FOR IT'\n\"\"\"\n\nimport sys\nfrom collections import deque\nimport numpy as np"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == \"GO FOR IT\"\n\"\"\"\n\nA, F = [int(x) for x in stdin.split('\\n')[0].split()]\nL, W = [int(x) for x in stdin.split('\\n')[1].split()]\n\nT = stdin.split('\\n')[2:]"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"1 1\\n1 1\\nWBWW\") == \"SUCCESS\"\nassert solution(\"3 4\\n4 4\\nWBBW\\nWWBW\") == \"NO CHANCE\"\nassert solution(\"4 6\\n4 6\\nWWWW\\nWSBB\\nWWWW\\nWBBW\\nWWWW\\nWBBW\") == \"NO WAY\""
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\ncal = list(map(int, input().split()))\n\nc = 0\nans = 0\nfor i in range(n):\n    c += cal[i]\n    ans = max(c, ans)\n    if c <= m:\n        pass\n    else:\n        c = c * 2 / 3\n\nprint(math.floor(ans))\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\n\"\"\""
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\n\"\"\"\n\n\nfrom collections import Counter\nfrom functools import reduce"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\n\"\"\""
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == '2243'\n\"\"\"\n\nimport math\n\nn, m = map(int, stdin.split())\n\ncourse = [int(i) for i in stdin.split()][1:]"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\n\"\"\""
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1, 2') == '2'\nassert solution('1, 2, 3') == '6'\nassert solution('1, 2, 3, 4, 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\nprint(solution(\"5 900\\n800 700 400 300 200\"))\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 900') == '2243'\nassert solution('6 400') == '2243'\nassert solution('4 900') == '2243'\nassert solution('4 1000') == '2283'\nassert solution('6 1000') == '2243'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\ninput = stdin.readline\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n? 1 3\\n= 1 3\\n= 4 8\\n= 3 8\\n? 1 3') == 'no\\nyes'\nassert solution('2 4\\n? 1 3\\n= 1 3\\n= 1 4') == 'yes\\nno'\nassert solution('1 1\\n? 1 2') == 'no\\nyes'\n\n\"\"\"\n\n\"\"\"\n2021-06-08\n\n\u6a21\u677f\uff1a\n\n-----Input-----\n\n-----Output-----\n\n\n\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n\") == \"no\\nyes\\n\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\\n? 1 3\\n= 1 8\\n= 3 8\") == \"no\"\n\n\"\"\"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def checkIntersection(self, a: int, b: int, nums: List[int]) -> bool:\n        num_dict = Counter(nums)\n        if a in num_dict and b in num_dict:\n            return True\n        return False\n\n    def solution(self, stdin: str) -> str:\n        [N, Q] = stdin.split('\\n')[:2]\n        nums = list(map(int, stdin.split('\\n')[2:]))\n        Q = int(Q.split(' ')[1])\n        for i in range(Q):\n            if stdin.split('\\n')[i+3].split(' ')[0] == '=':\n                if self.checkIntersection(int(stdin.split('\\n')[i+3].split(' ')[1]), int(stdin.split('\\n')[i+3].split(' ')[2]), nums):\n                    print('yes')\n                else:\n                    print('no')\n            else:\n                if self.checkIntersection(int(stdin.split('\\n')[i+3].split(' ')[1]), int(stdin.split('\\n')[i+3].split(' ')[2]), nums):\n                    print('yes')\n                else:\n                    print('no')\n        return ''\n\nsolution(\"10 4\\n? 1 3\\n= 1 8\\n= 3 8\")"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\\n? 1 3\\n= 1 8\\n= 3 8\") == \"no\\nyes\"\n\"\"\""
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\nprint(\"Passed!\")\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3''') == '''no\nyes'''\nprint('Hooray!')\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('? 1 1') == 'yes'\nassert solution('? 1 2') == 'no'\nassert solution('? 2 1') == 'no'\nassert solution('? 1 3') == 'yes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == 'no'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'no\\nyes'"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'no\\nyes'\nassert solution('5 6\\n? 1 3\\n? 4 5\\n= 1 8\\n= 4 8\\n= 3 8\\n? 1 3') == 'yes\\nno\\nno'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5 4 8 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == 2\nassert solution('1\\n1') == 0\nassert solution('1 1\\n1') == 0\nassert solution('1\\n1 1') == 0\nassert solution('1\\n1 1\\n1') == 0\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3\n2 3 4\n''') == 4\nassert solution('''4 3\n1 1 2 3\n''') == 0\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == 2\n\nassert solution('4 5\\n1 2 3 4 5\\n2 3 4') == 0\n\nassert solution('4 5\\n1 2 3 4 5\\n4 5') == 0\n\nassert solution('4 5\\n1 2 3 4 5\\n4 4') == 0\n\nassert solution('4 5\\n1 2 3 4 5\\n2 3') == 0"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 5 4 8 3') == 2\nprint(solution('10 5 4 8 3'), 2)\nprint(solution('10 2 4 8 3'), 2)\nprint(solution('10 5 2 4 8 3'), 2)\n\nSample Input:\n7 1\n10 5 4 8 3\nSample Output:\n0\nprint(solution('10 5 4 8 3'), 0)\nprint(solution('10 5 2 4 8 3'), 0)\nprint(solution('10 5 4 9 3'), 0)\n\nSample Input:\n10 3\n10 5 4 8 3\nSample Output:\n2\nprint(solution('10 5 4 8 3'), 2)\nprint(solution('10 5 2 4 8 3'), 2)\nprint(solution('10 5 4 9 3'), 2)\n\nSample Input:\n10 2\n10 5 4 8 3\nSample Output:\n0\nprint(solution('10 5 4 8 3'), 0)\nprint(solution('10 5 2 4 8 3'), 0)\nprint(solution('10 5 4 9 3'), 0)\n\nSample Input:\n8 2\n10 10 10 10 10 10 10 10\nSample Output:\n1\nprint(solution('10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 10 1'), 1)\nprint(solution('10 10 10 10 10 10 1 0'), 1)\nprint(solution('10 10 10 10 10 10 0 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10'), 1)\nprint(solution('10 10 10 10 10 10 0 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\nassert solution('8 2\\n10 20 20 16 10') == '0'\nassert solution('8 1\\n10 20 20 16 10') == '3'\nassert solution('5 1\\n10 5 4 8 3') == '0'\nassert solution('8 2\\n10 20 20 16 10') == '0'\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == 2\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == 2\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 5 4 8 3') == 2\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\n\n-----Solution-----\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 127') == '1083', solution('1 127')\n\"\"\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8') == '110'\nassert solution('1 127') == '1083'\n\"\"\""
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 127\") == \"1083\"\n\"\"\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 127') == 1083\nprint(solution('1 127'))"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 127\") == \"1083\"\n\n\"\"\""
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 127') == 1083\n\"\"\"\n\nimport sys\n\nl, r = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 127\") == \"1083\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 127') == '1083'\n\n'''\nfrom math import ceil\n\nstdin = input()\nL, R = stdin.split(' ')\nL, R = int(L), int(R)"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 27\") == \"1011\"\nassert solution(\"5 10\") == \"1\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"1 9\") == \"5\"\nassert solution(\"1 1000000000\") == \"5\"\n\n-------------"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 127\") == \"1083\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\") == \"2.0000000000\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n\n----"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African\\n\") == \"2.0000000000\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2'\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n\nassert solution('''\n4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n\nassert solution('''\n4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n\nassert solution('''\n4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n''')"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n    2 3\n    How much is 6 times 9? 42\n    How much is 9 times 6? 42\n    Is there intelligent life on Earth? Probably\n    What is the air speed velocity of an unladen swallow? African?\n    ''') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == '3.5'\n\"\"\"\n\nimport sys\nfrom enum import Enum\nfrom typing import List\n\n\nclass InputParser:\n    \"\"\"\n    Class to store all data needed to parse input\n    \"\"\"\n    class Type(Enum):\n        QUANTITY = 1\n        OTHER_QUESTION = 2\n        ANOTHER_QUESTION = 3\n\n    def __init__(self, input_line: str):\n        \"\"\"\n        Initialize the parser with the input line\n        :param input_line: line to parse\n        \"\"\"\n        # store the line\n        self.line = input_line\n\n        # extract quantity\n        quantity, self.question = self.extract_quantity()\n\n        # if the line contains a quantity, it means that it's a new question\n        self.type = InputParser.Type.QUANTITY if quantity is not None else InputParser.Type.OTHER_QUESTION\n\n        # if we're not dealing with a new question, extract the actual question\n        if not self.type == InputParser.Type.OTHER_QUESTION:\n            self.question = self.extract_question()\n\n        # if we have the actual question, extract the actual answer\n        if self.type == InputParser.Type.OTHER_QUESTION:\n            self.answer = self.extract_answer()\n\n    def extract_quantity(self) -> tuple:\n        \"\"\"\n        Extract the quantity of the first input line\n        :return: quantity or None if not exists\n        \"\"\"\n        quantity = None\n        words = self.line.split(' ')\n\n        for word in words:\n            try:\n                quantity = int(word)\n            except ValueError:\n                pass\n\n        return quantity, words[words.index(quantity) + 1:]\n\n    def extract_question(self) -> str:\n        \"\"\"\n        Extract the actual question from the line\n        :return: question\n        \"\"\"\n        return self.line[:self.line.find('?')]\n\n    def extract_answer(self) -> str:\n        \"\"\"\n        Extract the answer from the line\n        :return: answer\n        \"\"\"\n        return self.line[self.line.find('?') + 1:]\n\n    def get_lines(self) -> List[str]:\n        \"\"\"\n        Get the input line split in multiple lines\n        :return: input lines\n        \"\"\"\n        return self.line.split('\\n')\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(samples.txt
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\")!= \"IMPOSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\")!= \"FALSE ALARM\"\n\nExplanation:\nIn the first example, it is possible to restore all of the animals back to their respective enclosures. In the second example, it is not possible because the zoo will contain a lion which will try to jump into another enclosure. In the third example, it is possible to move all the animals back to their respective enclosures because the only animals left in the zoo are either other animals of the same type (penguin) or have been moved into the other enclosures (monkey, lion, and penguin).\n\"\"\"\n\n\"\"\"\nHint 1\nCount the number of animal types in the zoo. If it is less than the total number of animals, then the zoo cannot be solved.\n\nHint 2\nMove the first animal in each of the $n$ different enclosures, and return to the first enclosure.\n\nHint 3\nIf the starting state does not have all of the same number of animals of the same type, then the zoo cannot be solved.\n\nHint 4\nKeep track of what enclosures are open.\n\nHint 5\nWhen checking whether a particular animal type can be moved, check if it is not currently in its enclosing enclosure.\n\nHint 6\nAfter moving an animal, check to make sure that the animal's type is still in the enclosing enclosure.\n\"\"\""
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"IMPOSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion\\nlion 3 monkey\\npenguin 1 monkey\") == \"FALSE ALARM\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_output\nprint(solution(stdin))\n\nTime complexity: O(n) where n is the number of lines in stdin\nSpace complexity: O(n)\n\n-----Explanation-----\nFor example, if the input is\n\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey\nthen the output is\n\nPOSSIBLE\n\nYou can immediately move the two lion monkeys to the correct enclosures.\n\nSince the zoo is laid out as such, it is always possible to go from one enclosure to another.\n\nSo, even if all of the animals are already in their proper enclosures, then the output should still be\n\nPOSSIBLE\n\nBy going from the last monkey enclosure to the second to last one and changing the monkey inside, the lion monkeys can be moved to their proper enclosures.\n\nIf you have read this far, you know that this problem is not that hard, you just have to think of the implications.\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Set\n\n\nclass Zoo:\n    def __init__(self, n_enclosures: int, n_animals: int, animal_enclosure: str):\n        self.n_enclosures = n_enclosures\n        self.n_animals = n_animals\n        self.enclosure_info = defaultdict(int)\n        for line in animal_enclosure:\n            enclosure, amount = line.split()\n            self.enclosure_info[enclosure] += int(amount)\n\n        self.enclosure_names = sorted(self.enclosure_info.keys())\n        self.enclosure_map = {\n            enclosure: i\n            for i, enclosure in enumerate(self.enclosure_names)\n        }\n\n        self.animal_enclosures: Set[str] = set(\n            self.enclosure_info.keys()\n        )\n        for animal, count in self.enclosure_info.items():\n            for _ in range(count):\n                self.animal_enclosures.remove(animal)\n\n    def get_current_enclosures(self) -> Set[str]:\n        return {\n            animal\n            for animal, count in self.enclosure_info.items()\n            if count > 0\n        }\n\n    def get_remaining_enclosures(self) -> Set[str]:\n        return set(self.enclosure_names) - self.get_current_enclosures()\n\n    def get_reconstructed_enclosures(self) -> Set[str]:\n        # If we are able to reconstruct all of the enclosures\n        # it means that every animal can be moved from one\n        # enclosure to another\n        reconstructed_enclosures = self.animal_enclosures\n        for animal in self.animal_enclosures:\n            if self.enclosure_info[animal] == 1:\n                reconstructed_enclosures.discard(animal)\n\n        return reconstructed_enclosures\n\n    def move_animals(self) -> bool:\n        # At the beginning, all the animals are in the correct enclosures\n        moved_animals = set()\n        while len(self.get_remaining_enclosures()) > 0:\n            for animal, count in self.enclosure_info.items():\n                if count > 0:\n                    if count == 1:\n                        if self.enclosure_info[animal] == 1:\n                            if animal in moved_animals:\n                                continue\n                            else:\n                                self.enclosure_info[animal] -= 1\n                                moved_animals.add(animal)\n                        else:\n                            self.enclosure_info[animal] -= 1\n                            moved_animals.add(animal)\n                    else:\n                        if animal not in moved_animals:\n                            moved_animals.add(animal)\n                            self.enclosure_info[animal] -= 1\n\n                    if len(moved_animals) == self.n_animals:\n                        return True\n                    else:\n                        return False\n        return False\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'POSSIBLE'\nassert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'IMPOSSIBLE'\nassert solution('''4 6\nlion 2 monkey lion\nlion 3 monkey\nlion 4 monkey\nlion 5 monkey\nlion 6 monkey\nmonkey 2 lion\nmonkey 3 monkey\nmonkey 4 monkey\nmonkey 5 monkey\nmonkey 6 monkey''') == 'FALSE ALARM'\n\n-----Explanation-----\nThe zoo is laid out so that there is no way to restore the animals to their proper enclosures by moving them from their current enclosures. Thus, the output is IMPOSSIBLE.\n\nThe zoo is laid out so that the animals are distributed as follows:\n\n       monkey lion\n   penguin monkey lion\nmonkey lion\n\nThere are a total of 6 animals, and one of them is in its own enclosure. Since all the animals are in their own enclosures, there is no way for them to be moved to their proper enclosures. Thus, the output is IMPOSSIBLE.\n'''"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"IMPOSSIBLE\"\nassert solution(\"3 6\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"FALSE ALARM\"\n\n------Problem------\nIn the animal protection zoo, there is a queue of animals, with animals numbered from 1 to $n$, where $n$ is an even number. The animals are arranged in a circular fashion, with animal 1 directly preceding animal $n$. Therefore, the queue is circular. You are given a list of $n$ pairs of integers $q_i, q_j$ with $1\\leq i<j\\leq n$, where $q_i$ is the starting position of an animal in the queue and $q_j$ is the position of the next animal in the queue.\n\nFor example, if the queue is in the state $1, 3, 4, 2, 5$, then $q_1=1$, $q_2=3$, $q_3=4$, $q_4=2$, $q_5=5$.\n\nGiven the pairs of indices, determine if it is possible to arrange the animals in the queue such that the starting position of each animal is adjacent to the end position of the animal in front of it in the queue. Note that animals can be arranged in the same pair more than once.\n\n-----Solution-----"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n') == 'POSSIBLE'\nassert solution('4 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n') == 'IMPOSSIBLE'\nassert solution('4 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\n') == 'FALSE ALARM'\n\n\"\"\""
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n') == 'POSSIBLE'\nassert solution('3 6\\nlion 2 monkey penguin lion\\npenguin 1 monkey\\n') == 'IMPOSSIBLE'\nassert solution('3 6\\nmonkey 2 lion penguin\\npenguin 1 monkey\\n') == 'FALSE ALARM'\nassert solution('3 6\\nmonkey 2 lion\\n') == 'POSSIBLE'\nassert solution('3 6\\nmonkey 2 lion\\npenguin 1\\n') == 'POSSIBLE'\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '100'\n    '4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4'\n    '4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2'\n    '0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7'\n    '2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8'\n    '8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution(\n    '100'\n    '4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4'\n    '4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2'\n    '0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7'\n    '2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8'\n    '8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution(\n    '100'\n    '4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4'\n    '4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2'\n    '0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7'\n    '2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8'\n    '8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\n\"\"\"\n\n\nimport numpy as np\nfrom collections import defaultdict"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found\\n'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found\\n'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found\\n'\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\n\n\"\"\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\n\n-----Notes-----\nFor more info on this kata, see the description in the problem statement.\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import groupby\nfrom operator import itemgetter"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == 'triple correlation 4(1)4(3)3 found'\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == 'triple correlation 4(1)4(3)3 found'\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == 'triple correlation 4(1)4(3)3 found'\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == 'triple correlation 4(1)4(3)3 found'\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\n\"\"\"\n\nimport sys\nimport re\nfrom collections import Counter\n\nPATTERN = re.compile(r'(?=([4]{1,})[ ]{1,}([4]{1,})([3]{1,})[ ]{1,}([3]{1,})[ ]{1,}([3]{1,})[ ]{1,}([2]{1,})([1]{1,})([0]{1,})[ ]{1,}([2]{1,})([1]{1,})([0]{1,}))')"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import ceil\n\nDIGITS = 10\nPATTERN = [0]*(DIGITS+2)\nPATTERN[1] = 4\nPATTERN[2] = 4\nPATTERN[3] = 3\nPATTERN[4] = 3\nPATTERN[5] = 2\nPATTERN[6] = 2\nPATTERN[7] = 1\nPATTERN[8] = 1\nPATTERN[9] = 1"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\""
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\nassert solution('2 1\\n0\\n10\\n0') == '10'\nassert solution('1 1\\n0\\n10\\n0') == '10'\nassert solution('2 1\\n0.2\\n10\\n0.3') == '10.2'\nassert solution('2 1\\n0.1\\n10\\n0.2') == '10.1'\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\") == \"40.5\"\nassert solution(\"1 1\\n10\") == \"10\"\nassert solution(\"2 2\\n1\\n1\") == \"2\"\n\nprint(solution(input().strip()))\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n39\\n10\\n40\\n') == '40.5'\n\"\"\""
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\\n\") == \"40.5\"\n\nassert solution(\"3 1\\n39\\n10\\n40\\n\") == \"40.5\"\n\nassert solution(\"3 1\\n39\\n10\\n40\\n\") == \"40.5\"\n\nassert solution(\"3 1\\n39\\n10\\n40\\n\") == \"40.5\"\n\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\\n\") == \"40.5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\\n\") == \"40.5\"\n\"\"\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\") == \"40.5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\") == \"40.5\"\n\"\"\"\n\nfrom math import ceil\n\nN, k = map(int, stdin.readline().split())\n\nheights = []\nfor _ in range(N):\n    heights.append(int(stdin.readline()))\n\nheights.sort()\n\nfor i in range(1, N):\n    h = ceil((heights[i-1] + heights[i+1]) / 2 + k)\n    heights[i] = h\n\nprint(heights[N-1])"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\\n\") == \"40.5\"\n\"\"\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"1987\"\nassert solution(\"4 6\\n1 2 1988\\n2 3 1988\\n1 3 1988\\n2 4 1988\\n1 4 1988\\n3 4 1988\") == \"Impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\n\n-----Challenge-----\nFind an efficient solution that solves the problem in less than $O(n)$ time."
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"2008\""
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\nassert solution('2 3\\n2 3 1987\\n1 3 1987') == 'Impossible'\nassert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == '1987'\nassert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == '1987'\n\"\"\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\nassert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987') == '1987'\nassert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\n\n-----------------------"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Impossible'\nassert solution('5 3\\n2 3 1983\\n3 4 1983') == '1983'\nassert solution('3 1\\n1 2 1987\\n2 3 1987') == '1987'\n'''\n\nfrom math import ceil\n\nn, c = [int(x) for x in input().split()]\n\nencounters = [int(x) for x in input().split()]\n\nencounters.sort()\n\nleft = min(encounters)\nright = max(encounters)\n\nfirst_encounters = {}\n\nfor x in encounters:\n    if x in first_encounters:\n        first_encounters[x] += 1\n    else:\n        first_encounters[x] = 1\n\nwhile left < right:\n    mid = ceil((left + right) / 2)\n    if sum([first_encounters[x] for x in range(left, mid)]) > n / 3:\n        left = mid + 1\n    else:\n        right = mid\n\nprint(left)\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"1987\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"4 6\\n1 2 1989\\n2 3 1988\\n1 3 1989\\n2 4 1988\\n1 4 1988\\n3 4 1988\") == \"Impossible\"\nassert solution(\"4 6\\n1 2 1986\\n2 3 1986\\n1 3 1986\\n2 4 1986\\n1 4 1986\\n3 4 1986\") == \"1987\"\nassert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"4 6\\n1 2 1988\\n2 3 1988\\n1 3 1988\\n2 4 1988\\n1 4 1988\\n3 4 1988\") == \"Impossible\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\nassert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == '2008'\n\"\"\""
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == 'impossible'\nassert solution('4 0 1\\nN 1 2\\nC 1 3\\nN 1 3') == '3'\nassert solution('4 0 1\\nN 1 3\\nC 1 2\\nN 1 3') == '1'\nassert solution('4 0 1\\nN 1 3\\nC 1 1\\nN 1 3') == '1'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3') == '2'\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == 'impossible'\nassert solution(\"4 0 1\\nN 1 2\\nC 1 3\\nN 1 3\\nC 1 1\") == '2'\nassert solution(\"4 0 1\\nN 1 2\\nC 1 3\\nN 1 3\\nC 1 3\") == '1'\nassert solution(\"4 0 1\\nN 1 2\\nC 1 3\\nN 1 3\\nC 1 3\") == '1'\n\"\"\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n\") == \"3\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 1\\n1 2\\nC 1 2\\n1 3\\nC 1 1\") == \"3\"\nassert solution(\"2 0 1\\nN 1 2\") == \"impossible\"\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Union, Optional, Set, Iterable\nfrom collections import deque\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1''') == '3'\nassert solution('''8 0 1\nN 2 1\nC 1 2\nN 1 3\nC 1 1\nN 5 6\nC 1 4\nN 6 1\nC 5 6\nN 3 1\nC 4 3\nN 1 3\nC 3 2\nN 7 1\nC 1 4\nN 4 1\nC 3 6\nN 3 1\nC 3 2\nN 1 7\nC 1 2\nN 3 1\nC 7 1\nN 6 4\nC 1 4\nN 1 6\nC 2 5\nN 1 5\nC 3 4\nN 1 7\nC 4 1\nN 7 5\nC 5 4\nN 2 1\nC 1 2\nN 1 4\nC 2 2\nN 1 1\nC 5 3\nN 2 1\nC 1 5\nN 3 3\nC 4 1\nN 4 6\nC 3 7\nN 7 2\nC 1 5\nN 3 4\nC 3 1\nN 5 7\nC 1 4\nN 5 6\nC 2 7\nN 4 1\nC 5 2\nN 4 1\nC 7 4\nN 4 2\nC 1 7\nN 1 1\nC 5 1\nN 3 7\nC 5 1\nN 2 1\nC 1 6\nN 1 7\nC 1 5\nN 4 3\nC 7 5\nN 1 3\nC 5 1\nN 3 1\nC 2 3\nN 1 7\nC 4 1\nN 1 4\nC 3 2\nN 4 5\nC 1 4\nN 5 7\nC 3 1\nN 2 5\nC 7 4\nN 2 3\nC 1 5\nN 3 2\nC 1 5\nN 2 6\nC 4 4\nN 4 4\nC 2 3\nN 3 4\nC 2 1\nN 6 3\nC 3 3\nN 4 6\nC 3 3\nN 6 4\nC 6 3\nN 2 5\nC 2 1\nN 6 7\nC 5 4\nN 2 1\nC 5 3\nN 6 1\nC 4 3\nN 5 1\nC 4 1\nN 1 2\nC 1 4\nN 1 2\nC 1 3\nN 7 4\nC 2 2\nN 7 2\nC 2 1\nN 3 2\nC 1 1\nN 2 1\nC 6 5\nN 1 2\nC 1 5\nN 4 6\nC 1 5\nN 6 6\nC 6 4\nN 2 1\nC 4 1\nN 1 7\nC 1 2\nN 7 2\nC 5 3\nN 2 6\nC 3 1\nN 7 4\nC 3 1\nN 7 3\nC 1 7\nN 7 1\nC 3 5\nN 2 3\nC 6 6\nN 1 5\nC 4 1\nN 1 1\nC 2 1\nN 5 1\nC 1 3\nN 2 3\nC 5 1\nN 2 3\nC 1 1\nN 5 3\nC 3 1\nN 2 1\nC 2 1\nN 5 3\nC 2 1\nN 1 3\nC 7 3\nN 4 3\nC 3 4\nN 2 2\nC 5 3\nN 4 6\nC 1 1\nN 5 6\nC 2 7\nN 1 7\nC 1 6\nN 1 1\nC 3 6\nN 5 3\nC 1 1\nN 6 1\nC 1 2\nN 5 2\nC 3 6\nN 5 7\nC 7 3\nN 7 3\nC 6 5\nN 3 4\nC 1 2\nN 6 1\nC 1 4\nN 2 2\nC 1 5\nN 4 2\nC 2 5\nN 3 2\nC 2 5\nN 3 5\nC 5 2\nN 4 5\nC 1 5\nN 4 3\nC 7 1\nN 2 7\nC 5 3\nN 4 2\nC 1 5\nN 1 7\nC 1 5\nN 2 6\nC 5 4\nN 2 5\nC 1 7\nN 1 6\nC 1 5\nN 1 7\nC 1 2\nN 2 7\nC 6 7\nN 7 7\nC 7 6\nN 7 7\nC 3 7\nN 1 5\nC 4 2\nN 2 5\nC 4 2\nN 6 3\nC 4 1\nN 5 1\nC 2 2\nN 1 6\nC 1 4\nN 5 7\nC 4 7\nN 5 4\nC 2 1\nN 2 1\nC 1 1\nN 7 7\nC 1 2\nN 5 6\nC 1 2\nN 2 1\nC 2 1\nN 7 7\nC 1 1\nN 6 1\nC 1 1\nN 7 5\nC 1 5\nN 4 2\nC 4 6\nN 5 1\nC 5 7\nN 3 2\nC 5 6\nN 5 7\nC 2 2\nN 5 7\nC 3 7\nN 1 7\nC 1 7\nN 4 3\nC 1 5\nN 1 3\nC 5 1\nN 1 7\nC 3 2\nN 7 6\nC 3 1\nN 6 7\nC 1 5\nN 2 3\nC 7 2\nN 5 5\nC 3 2\nN 6 7\nC 5 1\nN 3 1\nC 5 4\nN 5 5\nC 7 4\nN 7 5\nC 5 3\nN 1 6\nC 1 3\nN 7 2\nC 1 5\nN 3 5\nC 5 1\nN 4 1\nC 3 5\nN 2 1\nC 1 5\nN 7 6\nC 1 5\nN 6 7\nC 1 4\nN 7 3\nC 1 4\nN 7 7\nC 6 7\nN 1 4\nC 3 1\nN 3 2\nC 5 2\nN 4 1\nC 1 4\nN 2 2\nC 4 3\nN 3 1\nC 1 1\nN 7 5\nC 1 3\nN 2 7\nC 1 1\nN 1 1"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == '3'\n\n\"\"\""
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n\") == \"impossible\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == 'impossible'\n\"\"\"\n\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()()\") == 2\nassert solution(\"((()))\") == 6\nassert solution(\"(()(()))\") == 8\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('())') == 0\nassert solution('())((((((((') == 2\nassert solution('(((((((((((') == 0\nassert solution('())((((((((((') == 2\nassert solution('())((((((((((') == 2\n\nfrom dataclasses import dataclass\nimport sys\nimport traceback\n\n@dataclass\nclass Result:\n    ok: bool\n    stdout: str = \"\"\n    stderr: str = \"\"\n    exception: Exception = None"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(()\") == 2\nassert solution(\"()\") == 2\nassert solution(\"(((\") == 3\nassert solution(\"((()))\") == 6\nassert solution(\"(()((()()(())))((((((((())))))))))\") == 18\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(()) == 0\nassert solution(')()') == 1\nassert solution('((()))') == 4\nassert solution('((()(') == 2\nassert solution('(((()(') == 2\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()())\") == 6\nassert solution(\"((()))\") == 7\nassert solution(\"(()((()()))(((((())))))\") == 15\nassert solution(\"())\") == 3\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()))(\") == 4\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()())\") == \"4\"\nassert solution(\"(((()))((()(()))))\") == \"17\"\nassert solution(\"(((()(()()((()()(()()))))))(()()(())))(((((()()((()())()(()(()()((()()(()()()((()(())(()()))(()(()(()((()(()()()(()()(()()((()(()((()()(((()(()(()()))(())()(()()(()(()(())()(()(((((((((((((()(())())()(()(())()(()(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))))()))))(()()()(())(())()(()(()(((((()))(((((())())()(()((()()(((()()))(()(())((()))((()))((()()((()(((()(()(((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((()(((())()(()))(())()(()(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(((()))(()()))(\") == 16\nassert solution(\"(((()))(()()))(\") == 16\nassert solution
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(()))((()\") == 5\nassert solution(\"(((())((()()))(()))(()))\") == 13\nassert solution(\"(((()()()))(()()))\") == 9\nassert solution(\"(((((((((()()())))))))))\") == 8\nassert solution(\"((((((((()(()((((()(()())((()(()(()())))))))))))))))(()))\") == 18\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"((()))\") == 4\nassert solution(\"((()))()\") == 6\nassert solution(\"()\") == 0\n\n----\nimport sys"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8') == '85293'\n\"\"\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nassert solution(\"7\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"67392\"\nassert solution(\"7\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"67392\"\nassert solution(\"7\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"67392\"\nassert solution(\"7\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"67392\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == '85293'\n\"\"\""
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 3\") == \"85293\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 4\\n2 5\\n3 5\\n3 6\") == \"55294\"\nassert solution(\"9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n3 4\\n3 5\\n3 6\\n3 7\\n3 8\\n4 7\\n4 8\\n4 9\\n5 9\\n6 9\\n6 8\\n6 7\") == \"77296\"\n\"\"\"\nfrom typing import NamedTuple\n\nimport sys\n\nfrom utils import euler_problem_14\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nprint(\"Test Completed\")\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nprint(solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\"))\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == '85293'\n\n\"\"\"\n\nn = int(input())\ngravity = [0 for _ in range(n)]\nhuman = [0 for _ in range(n)]\nalien = [0 for _ in range(n)]\nfor i in range(n):\n    s, t = input().split()\n    gravity[i] = int(s)\n    if t == 'a':\n        alien[i] = 1\n    else:\n        human[i] = 1\nm = int(input())\nlinks = []\nfor i in range(m):\n    l = input().split()\n    links.append([int(l[0])-1, int(l[1])-1])"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == 5\nassert solution(\"7 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n1 1\\n1 3\\n2 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n6 7\") == 4\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('4 4\\n1 2\\n1 3\\n2 3') == '1'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n1 3') == '0'\nassert solution('4 3\\n1 2\\n1 3\\n2 3') == '0'\nassert solution('4 4\\n1 2\\n1 3\\n1 4\\n2 3') == '0'\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"5 8\\n1 2\\n1 3\\n2 3\\n4 5\\n5 6\\n2 4\\n4 6\") == \"12\"\nassert solution(\"5 8\\n1 2\\n1 3\\n2 3\\n4 5\\n5 6\\n2 4\\n4 6\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == 5\n\"\"\"\n\n\n\n\"\"\"\nsolution\n\"\"\"\nfrom collections import Counter, defaultdict\nimport itertools\nimport math\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 6)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nprint(\"Test finished.\")\n\n\"\"\""
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"6 9\\n1 2\\n1 3\\n2 3\\n4 5\\n5 6\\n2 4\\n4 6\\n4 5\") == \"6\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\n\"\"\""
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nprint(solution(stdin))\n\nExplanation:\nSample Case 1: There are two unicyclic subgraphs, the subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$\n\nSample Case 2: There are three unicyclic subgraphs: the subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4), (4, 3)$ and the subgraphs that includes the edges $(1, 2), (1, 3), (2, 4)$.\n\nSample Case 3: There are four unicyclic subgraphs: the subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ and the subgraphs that includes the edges $(1, 4), (2, 4), (4, 3)$ and the subgraphs that includes the edges $(1, 2), (1, 3), (2, 4)$.\n\nSample Case 4: There are five unicyclic subgraphs: the subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ and the subgraphs that includes the edges $(1, 4), (2, 4), (4, 3)$ and the subgraphs that includes the edges $(1, 2), (1, 3), (2, 4)$ and the subgraphs that includes the edges $(1, 2), (1, 3), (2, 4)$.\n\nExplanation:\nThe graph is represented by a matrix as follows.\n\n1 2\n1 3\n2 3\n1 4\n2 4\nGraph:\n| 1 2 |\n| 1 3 |\n| 2 3 |\n| 1 4 |\n| 2 4 |\nAt each row and column, there is exactly one edge.\nSample Case 1: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 5.\n\nSample Case 2: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4), (4, 3)$ and the subgraphs that includes the edges $(1, 2), (1, 3), (2, 4)$ are unicyclic subgraphs, so the answer is 6.\n\nSample Case 3: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 7.\n\nSample Case 4: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 8.\n\nSample Case 5: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 9.\n\nSample Case 6: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 10.\n\nSample Case 7: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 11.\n\nSample Case 8: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 12.\n\nSample Case 9: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 13.\n\nSample Case 10: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 14.\n\nSample Case 11: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 15.\n\nSample Case 12: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 16.\n\nSample Case 13: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 17.\n\nSample Case 14: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 18.\n\nSample Case 15: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 19.\n\nSample Case 16: The subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 20.\n\nExplanation:\nThe graph is represented by a matrix as follows.\n\n1 2\n1 3\n2 3\n1 4\n2 4\nThe subgraphs that includes the edges $(1, 2), (1, 3), (2, 3)$ and the subgraphs that includes the edges $(1, 4), (2, 4)$ are unicyclic subgraphs, so the answer is 5.\n\nThe graph is represented by a matrix as follows.\n\n1 2\n1 3\n2 3\n1 4\n2 4\nThe subgraphs that includes the edges $(1, 2), (1, 3), (2,"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == 5\n\"\"\""
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(aoc.read_files(19)) == \"5\"\nprint(solution(open(\"test.txt\", \"r\")))\n\"\"\""
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\ntriangle 10\\n5 4 3\\n6\\n10 10 10 10') == '250'\nassert solution('3\\ntriangle 10\\n5 4 3\\n6\\n10 10 10 10') == '250'\nassert solution('3\\ntriangle 10\\n5 4 3\\n6\\n10 10 10 10') == '250'\nassert solution('3\\ntriangle 10\\n5 4 3\\n6\\n10 10 10 10') == '250'\nassert solution('3\\ntriangle 10\\n5 4 3\\n6\\n10 10 10 10') == '250'"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\ncaterpillar 3 pupa 7 butterfly') == '5100'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(aoc_20_2_input) == aoc_20_2_solution\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n3 mouse 1 electromouse 5 rat\\n7\\n0 electromouse\\n500 electromouse\\n1000 electromouse\\n1500 rat\\n2000 aaabaaajss\\n2500 pigeon\") == \"5100\"\n\n\"\"\"\n\nimport sys\nimport math\n\nsys.setrecursionlimit(100_000)"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('12\\n'\n'') == '12'\nassert solution('11\\n'\n'') == '11'\nassert solution('100\\n'\n'') == '100'\nassert solution('4\\n'\n'') == '4'\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\ncaterpillar 3 pupa 7 butterfly') == '5100'\nassert solution('5\\ncaterpillar 3 pupa 7 butterfly') == '5100'\nassert solution('3\\ndove 3 pigeon 7 aaabaaajss') == '5100'\nassert solution('3\\nmouse 1 electromouse 5 rat') == '5100'\nassert solution('7\\n0 electromouse\\n500 electromouse\\n1000 electromouse\\n1500 rat\\n2000 aaabaaajss\\n2500 pigeon') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3\\n3\\n7\\nbutterfly\\n') == '5100'\nassert solution('3\\n3\\n3\\n7\\nbutterfly\\n') == '5100'\nassert solution('3\\n3\\n3\\n7\\nbutterfly\\n') == '5100'\nassert solution('3\\n3\\n3\\n7\\nbutterfly\\n') == '5100'\nassert solution('3\\n3\\n3\\n7\\nbutterfly\\n') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\ncaterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n3 mouse 1 electromouse 5 rat\\n7\\n0 electromouse\\n500 electromouse\\n1000 electromouse\\n1500 rat\\n2000 aaabaaajss\\n2500 pigeon\\n3000 butterfly\") == \"5100\"\n\"\"\"\n\nimport collections\nimport operator\nimport re\nimport sys\nfrom typing import (\n    DefaultDict,\n    List,\n    NamedTuple,\n    Optional,\n    Pattern,\n    Set,\n    Tuple,\n    Union,\n)\n\n\nclass Nudg\u00e9mon(NamedTuple):\n    family: int\n    type: str\n    rank: int\n    score: int\n    level: int\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\ncaterpillar 3\\npupa 7\\nbutterfly\\n\") == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\ncaterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n3 mouse 1 electromouse 5 rat\") == \"5100\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\\n\"\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\\n\"\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\\n\"\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\\n\"\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\\n\""
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\\n\"\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"-1\\n\"\nassert solution(\"7\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\\n\"\nassert solution(\"7\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"-1\\n\"\nassert solution(\"6\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\\n\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0\\n1 1\\n1 1\") == \"1\\n1\"\nassert solution(\"5\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import accumulate\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\n\n\"\"\"\nThe answer is correct, but it is very slow.\n\nBecause Fiona is an expert climber, she has some special pegs which she always brings with her. For example, if she is climbing a wall, and the wall is $w_1,\\ldots, w_m$, where $w_i$ is a special peg, she can always bring her peg with her so that the special peg can be put on the wall at point $i$:\n\n1. She places her peg on point $i$, and the wall is now $w_i,\\ldots, w_m$, so she can bring her peg to any point in the wall at most $m-1$ steps.\n2. She places her peg on point $j$, and the wall is now $w_i,\\ldots, w_j$, so she can bring her peg to any point in the wall at most $j-i$ steps.\n3. She places her peg on point $k$, and the wall is now $w_i,\\ldots, w_k$, so she can bring her peg to any point in the wall at most $k-i$ steps.\n4. She places her peg on point $l$, and the wall is now $w_i,\\ldots, w_l$, so she can bring her peg to any point in the wall at most $l-i$ steps.\n5. She places her peg on point $i$, and the wall is now $w_i,\\ldots, w_m$, so she can bring her peg to any point in the wall at most $m-1$ steps.\n6. She places her peg on point $j$, and the wall is now $w_i,\\ldots, w_j$, so she can bring her peg to any point in the wall at most $j-i$ steps.\n7. She places her peg on point $k$, and the wall is now $w_i,\\ldots, w_k$, so she can bring her peg to any point in the wall at most $k-i$ steps.\n8. She places her peg on point $l$, and the wall is now $w_i,\\ldots, w_l$, so she can bring her peg to any point in the wall at most $l-i$ steps.\n\nIf we see the problem as a graph, we see that when adding peg $1$ to a point $i$, we need to make $m - 1$ moves. For example, when adding peg $1$ to point $2$, we need to make $2 - 1 = 1$ moves. This is because we need to make a move to the peg itself, which is $m - 1$ moves, and then we need to make $i - 2$ moves, because we need to bring the peg to point $i - 2$.\n\nIf we see the problem as a graph, we see that when removing peg $1$ from a point $i$, we need to make $m - 1$ moves. For example, when removing peg $1$ from point $2$, we need to make $2 - 1 = 1$ moves. This is because we need to make a move to the peg itself, which is $m - 1$ moves, and then we need to make $i + 1$ moves, because we need to remove the peg from point $i + 1$.\n\nFiona is planning to climb a wall, so she thinks about how to place her special peg on the wall. For example, she has decided that it should be at the same point as the last peg, and that she has to bring her peg with her when the wall is $w_1,\\ldots, w_m$, where $w_i$ is a special peg. She doesn't care about the rest of the wall and only cares about the special peg, so it doesn't matter where the peg is placed.\n\nBecause of the special peg, she only needs to bring her peg with her when the peg is placed on point $i$, not when it is removed from point $i$. This means that the number of moves Fiona needs to make for her plan to be valid is $m - 1$.\n\nBecause of this, the answer is $m - 1$.\n\nLet's solve the problem for any number of strategic points on a wall.\n\n\"\"\""
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '''\n6\n1\n2\n3\n1\n4\n5\n'''\n\nassert solution('''\n4\n0\n1 1\n1 1\n3 3\n0\n2\n2\n1\n4\n2\n3\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n4\n0\n1 1\n1 1\n3 3\n0\n2\n2\n1\n4\n2\n3\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '''\n5\n1\n2\n3\n1\n4\n5\n'''\n\nassert solution('''\n10\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '''\n-1\n'''"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\nassert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '-1'\nassert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '10'\n\n\"\"\""
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '-1'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_0) == \"3\"\nassert solution(test_input_1) == \"1\"\nassert solution(test_input_2) == \"1\"\nassert solution(test_input_3) == \"-1\"\nassert solution(test_input_4) == \"4\"\n\nprint(solution(get_input()))\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\") == \"10\"\nprint(solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\"))\n\n-----Notes-----\nIf there is no solution, output \"NOT POSSIBLE\".\n\"\"\""
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 2 R 2\\n1 2 O 3\\n2 1 O 3\\n1 2 R 2\\n1 2 O 3\\n2 1 O 3\\n1 2 R 2\\n1 2 O 3\\n2 1 O 3\") == \"10\"\nassert solution(\"2 5\\n1 2 R 2\\n1 2 O 3\\n2 1 O 3\\n1 2 R 2\\n1 2 O 3\") == \"6\"\nassert solution(\"4 4\\n1 2 O 3\\n1 3 O 3\\n1 2 O 3\\n1 3 O 3\") == \"12\"\nassert solution(\"6 5\\n1 2 R 2\\n1 2 O 3\\n2 1 O 3\\n1 2 R 2\\n1 2 O 3\\n2 1 O 3\\n1 2 R 2\\n1 2 O 3\\n2 1 O 3\") == \"20\"\nassert solution(\"4 4\\n2 1 O 3\\n2 1 O 3\") == \"12\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5''') == '10'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'\nprint('Test passed')\n\nassert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'\nprint('Test passed')\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 2 1\") == \"10\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n\") == \"10\"\n\"\"\"\n\n\"\"\"\nThe solution is the sum of the tickets for round trips and the tickets for one trip.\n\"\"\"\n\nimport sys\n\nn, d = map(int, sys.stdin.readline().split())\n\nair_schedule = list(map(int, sys.stdin.readline().split()))\n\nair_schedule.append(air_schedule[0])"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\") == 10\n\"\"\""
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"10\"\n\n\"\"\"\nfrom collections import defaultdict, deque\nfrom typing import Dict, Deque, List, Tuple, Set, Union\nfrom collections import Counter\n\nINF: int = 10 ** 9"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\") == '1'\n\n'''\nimport collections\nfrom typing import List\n\nclass TopologicalSorting:\n    def topologicalSort(self, v, adj):\n        inDegree = {node: 0 for node in v}\n        for u, v in adj:\n            inDegree[v] += 1\n        queue = collections.deque()\n        for node in v:\n            if inDegree[node] == 0:\n                queue.append(node)\n        res = []\n        while queue:\n            node = queue.popleft()\n            res.append(node)\n            for v in adj[node]:\n                inDegree[v] -= 1\n                if inDegree[v] == 0:\n                    queue.append(v)\n        return res if len(res) == len(v) else []"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\n\"\"\"\n\n\"\"\"\n\"\"\""
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nclass Node:\n    def __init__(self, num):\n        self.num = num\n        self.edges = []\n\n    def __repr__(self):\n        return f'{self.num}'"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\") == \"1\"\nassert solution(\"6 6\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"6\"\nassert solution(\"4 2\\n0 1\\n1 2\\n2 3\\n3 4\") == \"4\"\nassert solution(\"4 3\\n0 1\\n1 2\\n2 3\\n3 4\\n4 0\") == \"4\"\nassert solution(\"4 1\\n0 1\\n1 2\\n2 3\\n3 0\") == \"1\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\n\"\"\"\nimport collections\nfrom typing import List, Dict, Tuple, Optional\nfrom itertools import permutations\n\nN, M = map(int, input().split())\nedges = []\n\nfor _ in range(M):\n    x, y = map(int, input().split())\n    edges.append((x, y))\n\nedges.sort(key=lambda x: x[1])\n\nparent: Dict[int, int] = {i: i for i in range(N)}\n\ngroup_dict: Dict[int, int] = {}\ngroup_num: int = 0\ngroup_num_dict: Dict[int, int] = {}\ngroup_num_dict[group_num] = -1\ngroup_set: List[int] = []\n\nfor edge in edges:\n    x, y = edge\n\n    if parent[x] == x:\n        parent[x] = y\n        group_dict[x] = group_num\n    else:\n        group_num_dict[group_num] += 1\n        group_dict[x] = group_num_dict[group_num]\n        group_set.append(group_num_dict[group_num])\n        group_set.append(group_num)\n        group_num += 1\n\nsorted_group_set: List[int] = list(sorted(group_set))\n\nprint(len(sorted_group_set))\n\nfor edge in edges:\n    x, y = edge\n    x_group = group_dict[x]\n    y_group = group_dict[y]\n    if x_group == y_group:\n        print(1)\n    elif x_group < y_group:\n        print(2)\n    else:\n        print(3)\n\n\"\"\"\nimport collections\nimport itertools\nimport sys\n\nN, M = map(int, sys.stdin.readline().strip().split())\nedges = [tuple(map(int, sys.stdin.readline().strip().split())) for _ in range(M)]\nedges.sort()\n\nparent: Dict[int, int] = {i: i for i in range(N)}\n\ngroup_dict: Dict[int, int] = {}\ngroup_num: int = 0\ngroup_num_dict: Dict[int, int] = {}\ngroup_num_dict[group_num] = -1\ngroup_set: List[int] = []\n\nfor x, y in edges:\n    if parent[x] == x:\n        parent[x] = y\n        group_dict[x] = group_num\n    else:\n        group_num_dict[group_num] += 1\n        group_dict[x] = group_num_dict[group_num]\n        group_set.append(group_num_dict[group_num])\n        group_set.append(group_num)\n        group_num += 1\n\nsorted_group_set: List[int] = list(sorted(group_set))\n\nprint(len(sorted_group_set))\n\nfor x, y in edges:\n    x_group = group_dict[x]\n    y_group = group_dict[y]\n    if x_group == y_group:\n        print(1)\n    elif x_group < y_group:\n        print(2)\n    else:\n        print(3)\n\"\"\"\n\n\"\"\"\nimport collections\nimport itertools\n\nN, M = map(int, sys.stdin.readline().strip().split())\nedges = [tuple(map(int, sys.stdin.readline().strip().split())) for _ in range(M)]\n\ngraph = collections.defaultdict(list)\nvisited = [False] * N\n\nfor x, y in edges:\n    graph[x].append(y)\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\") == \"1\"\nassert solution(\"4 4\\n0 1\\n0 3\\n3 2\\n2 3\") == \"0\"\n\"\"\"\n\nfrom collections import deque, Counter\nfrom itertools import combinations\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(st.txt) == 1\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict, deque\nimport sys\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\") == \"1\"\nprint(solution(\"4 3\\n0 1\\n1 2\\n2 3\\n1 3\"))\n\n\"\"\"\n\n\"\"\"\n\u65b9\u6cd5\u4e00\uff1a\u52a8\u6001\u89c4\u5212\n\n\u7ecf\u5178\u7684\u56fe\u7ed3\u6784\u662f\u62d3\u6251\u6392\u5e8f\u7684\u90bb\u63a5\u8868\u3002\n\n\u6b64\u5916\uff0c\u9664\u975e\u662f\u62d3\u6251\u7ed3\u6784\uff0c\u5426\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u62d3\u6251\u7ed3\u6784\u7684\u90bb\u63a5\u8868\u662f\u6709\u5411\u7684\u3002\n\n\u5982\u679c\u662f\u62d3\u6251\u7ed3\u6784\uff0c\u90a3\u4e48\u6b64\u5904\u7684\u90bb\u63a5\u8868\u662f\u65e0\u5411\u7684\u3002\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u62d3\u6251\u7ed3\u6784\u7684\u62d3\u6251\u6392\u5e8f\uff0c\u6211\u4eec\u6709 3 \u79cd\u89e3\u6cd5\uff1a\n\n1. \u7b97\u6cd5\u601d\u8def\uff1a\u5148\u5c06\u62d3\u6251\u7ed3\u6784\u7684\u6bcf\u4e00\u6761\u8fb9\u52a0\u5165\u8fb9\u96c6\u5408\u4e2d\uff0c\u518d\u7edf\u8ba1\u8fb9\u96c6\u5408\u4e2d\u6bcf\u4e2a\u8fb9\u7684\u51fa\u5ea6\u548c\u5165\u5ea6\uff0c\u82e5\u51fa\u5ea6\u548c\u5165\u5ea6\u90fd\u7b49\u4e8e 1\uff0c\u90a3\u4e48\u8bf4\u660e\u6b64\u8fb9\u662f\u62d3\u6251\u6392\u5e8f\u4e2d\u7684\u4e00\u4e2a\u8fb9\u3002\n\n2. \u89e3\u6cd5\u4e00\uff1a\u904d\u5386\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u67e5\u770b\u5176\u51fa\u5ea6\u662f\u5426\u4e3a 0\uff0c\u5982\u679c\u51fa\u5ea6\u4e3a 0\uff0c\u5c31\u5c06\u6b64\u8282\u70b9\u52a0\u5165\u7ed3\u679c\u96c6\u4e2d\uff0c\u7136\u540e\u9012\u5f52\u8c03\u7528\u51fd\u6570\u3002\n\n3. \u89e3\u6cd5\u4e8c\uff1a\u5c06\u6240\u6709\u8fb9\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u7136\u540e\u8bb0\u5f55\u6240\u6709\u8282\u70b9\u51fa\u5ea6\u4e3a 0 \u7684\u8282\u70b9\uff0c\u6700\u540e\u5c06\u5176\u51fa\u5ea6\u6240\u6709\u7684\u8282\u70b9\u7684\u51fa\u5ea6\u51cf\u4e00\uff0c\u5982\u679c\u51fa\u5ea6\u7b49\u4e8e 0\uff0c\u5219\u8bf4\u660e\u6b64\u8282\u70b9\u662f\u62d3\u6251\u6392\u5e8f\u4e2d\u51fa\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u3002\n\n\u89e3\u6cd5\u4e8c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V + E)\uff0c\u5176\u4e2d V \u662f\u62d3\u6251\u7ed3\u6784\u4e2d\u8282\u70b9\u7684\u603b\u6570\uff0cE \u662f\u62d3\u6251\u7ed3\u6784\u4e2d\u8fb9\u7684\u603b\u6570\u3002\n\n\u89e3\u6cd5\u4e09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V + E)\uff0c\u5176\u4e2d V \u662f\u62d3\u6251\u7ed3\u6784\u4e2d\u8282\u70b9\u7684\u603b\u6570\uff0cE \u662f\u62d3\u6251\u7ed3\u6784\u4e2d\u8fb9\u7684\u603b\u6570\u3002\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str):\n        pass\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '0.833333333333'\nassert solution('3\\n1 2 3') == '0.5'\nassert solution('4\\n1 3 2 4') == '0.4'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '0.272727272727'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '0.111111111111'\n\n\"\"\"\n\nimport numpy as np\nimport sys"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n4\\n1 3\\n1 3\\n3 4') == '0.928571428571'\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\nimport math\nimport random"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4\\n'\n    '1 2\\n'\n    '1 3\\n'\n    '1 4\\n'\n) == '0.962962962962964'\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n4\\n3\\n2\\n1') == '0.962962962963'\n\"\"\""
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n4\\n0\\n1\\n0\\n0\\n0\\n1') == '0.962962962963'\n\"\"\"\n\nfrom math import sqrt\nimport sys\nfrom random import randint\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 1\\n4 2 3\\n1 1 2\\n3 1 4\") == '0.9629629629629629'\n\"\"\""
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0.5'\nassert solution('2\\n1') == '0.5'\nassert solution('3\\n1') == '0.5'\nassert solution('3\\n2') == '0.1666666666667'\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 3 4') == '0.962962962963'\n\"\"\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0.962962962963'\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nans = 1\nfor i in range(n):\n    ans *= (1 - (n - i - 1) / n)\n    ans = ans * (1 - (n - i - 1) / n)\nprint(round(1 - ans, 8))"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n1 2\") == \"0.962962962963\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 1\") == \"0.962962962963\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '0 0\\n40000000 0'\nassert solution('3\\n1 1\\n3 2') == '1 1\\n3 2'\nassert solution('5\\n1 1\\n3 2\\n2 2\\n3 3') == '1 1\\n3 2\\n2 2\\n3 3'\nassert solution('3\\n0 1\\n4 1') == '0 1\\n4 1'\nassert solution('3\\n1 1\\n0 1') == '1 1\\n0 1'\n"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '0 0\\n40000000 0\\n0 40000000'\nassert solution('3\\n1 1\\n2 2\\n3 3') == '1 1\\n3 2\\n2 3'\nassert solution('1\\n1\\n1') == '1 1\\n0 0'\nassert solution('2\\n1 1\\n2 2') == '1 1\\n1 2\\n0 0'\nassert solution('3\\n1 1\\n2 2\\n3 3\\n2 1\\n0 2') == '1 1\\n1 2\\n2 2\\n3 3\\n0 0\\n1 1'\n\n\"\"\""
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '0 40000000\\n0 0\\n40000000 0'\n\"\"\"\n\nimport os\nimport math\nimport sys\nimport re\n\npath = os.path.join(os.path.dirname(__file__), '../../../input/big')"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\"\n\n\"\"\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0\\n0\\n0') == '0 0\\n40000000 0\\n0 40000000'\nassert solution('3\\n40000000\\n0\\n0') == '0 0\\n40000000 0\\n0 40000000'\nassert solution('3\\n40000000\\n40000000\\n0') == '0 0\\n0 0\\n40000000 0\\n40000000 40000000'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n40000000 0\\n0 40000000\") == \"0 0\\n40000000 0\\n0 40000000\"\nassert solution(\"1\\n0 0\") == \"0 0\"\nassert solution(\"2\\n0 0\\n40000000 0\") == \"0 0\\n40000000 0\"\nassert solution(\"3\\n0 0\\n40000000 0\\n0 40000000\") == \"0 0\\n40000000 0\\n0 40000000\"\nassert solution(\"4\\n0 0\\n40000000 0\\n0 40000000\\n0 0\") == \"0 0\\n40000000 0\\n0 40000000\\n0 0\"\n\n------Hints------\n- Consider the two diagonals of your bounding box. The maximum area of such a diagonal is $2 \\cdot 10^7$.\n- The maximum area of the $k$th diagonal is $2 \\cdot 10^7 \\cdot k$.\n- The maximum area of the $k$th diagonal is $2 \\cdot 10^7 \\cdot k$ if you subtract the area of the $i$th diagonal from the area of the $(k-i)$th diagonal.\n\"\"\""
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n40000000 0\\n0 40000000\") == \"0 40000000\"\nassert solution(\"1\\n0 0\\n40000000 0\") == \"0 40000000\"\nassert solution(\"5\\n0 0\\n0 40000000\\n0 0\\n0 0\\n0 0\") == \"0 0\\n40000000 40000000\\n0 0\\n0 0\\n0 0\"\n\"\"\""
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '0 0\\n40000000 0\\n0 40000000'\nassert solution('2\\n40000000 0\\n0 40000000') == '0 0\\n40000000 0'\nassert solution('1\\n0 0') == '0 0'\n'''\nimport sys"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '0 0\\n40000000 0'\n"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\"\n\"\"\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'impossible'\n\n-----Tests-----\nSample Input:\n2 3 4 9\nSample Output:\n2\n\n-----Tests-----\nSample Input:\n3 5 5 2\nSample Output:\n1\n\n-----Tests-----\nSample Input:\n3 5 4 9\nSample Output:\nimpossible\n\n----MEMOIZATION----\nFor every new expression created, we append it to our solution list. So when we construct the expression, we need to add it to the list, then construct a new expression.\n\nTherefore, we can solve it in the following way:\n\n-   Initialize the variable solution to the empty list, then loop through the input lines and process each one.\n-   If we are processing a line of input, we can construct an expression and then check whether the expression equals $24$.\n-   If it does, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of the expression.\n-   Otherwise, we can check whether the expression is in the solution list.\n-   If it is, then we can simply return the expression and the length of"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('1 2 3 4') == 'impossible'\nassert solution('2 2 1 4') == '2*3+4'\nassert solution('2 2 2 1 4') == '1*1+4'\nassert solution('3 5 5 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3 5 5 2'\n) == '1'\nassert solution(\n    '2 3 4 9'\n) == '2'\nassert solution(\n    '9 3 6 6'\n) == '0'\nassert solution(\n    '3 5 5 2'\n) == '1'\nassert solution(\n    '10 100 10 50'\n) == '2'\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\n\"\"\"\n\n\nfrom math import gcd\nfrom functools import lru_cache\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 5 2') == 'impossible'\nassert solution('1 2 3 4') == '2*3+1*4'\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\n\n-----Notes-----\nIf it is not possible to produce $24$ using the base values, the lowest grade possible is $2$.\n\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('3 5 5 8') == 'impossible'\nassert solution('3 1 2 5') == '2'\nassert solution('1 3 5 8') == 'impossible'\nassert solution('3 5 3 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 5 2') == '1'\nassert solution('5 3 5 2') == '1'\nassert solution('1 3 2 4') == 'impossible'\n\"\"\"\n\nimport math\nfrom collections import deque\nimport sys\n\nfrom utils import timer\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 2 4 9\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n5\\n0\") == \"2\"\nassert solution(\"8\\n2\\n0\\n0\\n0\\n0\\n0\\n0\") == \"4\"\nassert solution(\"8\\n2\\n0\\n0\\n0\\n0\\n0\\n0\") == \"4\"\nassert solution(\"4\\n0\\n0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"7\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0') == '2'\n\"\"\"\nfrom __future__ import annotations\n\nimport sys\n\nfrom collections import defaultdict\nfrom math import inf\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 5 4\") == \"2\"\nassert solution(\"5 3 5 4\") == \"2\"\nassert solution(\"10 5 5 4\") == \"0\"\nassert solution(\"5 5 5 4\") == \"2\"\nassert solution(\"10 10 10 10\") == \"0\"\n\n\"\"\"\n\nfrom typing import List\nfrom math import log"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 3 5 5\\n0 0 0\\n30 0 0\\n0 0 0\") == \"2\"\n\"\"\""
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == '2'\n\nassert solution(\"20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == '2'\n\nassert solution(\"20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == '2'\n\n\"\"\"\nimport numpy as np\nimport sys"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3 5\\n2\\n3\\n4\\n5\\n0\\n0\\n0\\n0\") == \"2\"\nassert solution(\"1\\n3 5\\n2\\n3\\n4\\n5\\n0\\n0\\n0\\n0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 5 2\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == '2'\n\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n''') == '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == '2'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('314') == '312'\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"13\") == \"12 14\"\nassert solution(\n\"100\") == \"99 99\"\nassert solution(\n\"11\") == \"10 10\"\nassert solution(\n\"101\") == \"99 99\"\n\"\"\""
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(111111111111111111111111111111) == \"12 2222 3333 4444 5555 6666 7777 8888 9999\"\nassert solution(122222222222222222222222222222) == \"12 2222 3333 4444 5555 6666 7777 8888 9999\""
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(13)) == \"12 14\"\nassert solution(str(19)) == \"12 19\"\nassert solution(str(123456789)) == \"12 345 678 9\"\n\"\"\""
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"12 14\"\nassert solution(\"12\") == \"12 12\"\nassert solution(\"11\") == \"11 11\"\nassert solution(\"10\") == \"10 10\"\nassert solution(\"1\") == \"1 1\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"14\") == \"12 14\"\nassert solution(\"12\") == \"12 12\"\nassert solution(\"13\") == \"12 14\"\nassert solution(\"1234\") == \"12 34\"\nassert solution(\"12345\") == \"12 34\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"12 14\""
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '12 14'\nassert solution('11') == '12 13'\nassert solution('10') == '11 12'\nassert solution('9') == '10 11'\nassert solution('8') == '9 10'\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('6') == '6 6'\nassert solution('1') == '1 1'\nassert solution('13') == '12 14'\nassert solution('2') == '2 2'\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"12 14\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"10\"\nassert solution(\"111\") == \"110\"\nassert solution(\"100111010\") == \"10101010\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1\") == 0\nassert solution(\"7\\n2 2 0\\n3 0 3\\n1 0 3\\n4 0 1\") == 2\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\"\"\") == \"0\"\nassert solution(\"\"\"5\n0 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\"\"\") == \"0\"\nassert solution(\"\"\"5\n1 1 1\n1 0 1\n3 0 1\n3 0 1\n3 1 1\"\"\") == \"1\"\nassert solution(\"\"\"5\n1 0 1\n1 1 1\n3 0 1\n3 1 1\n3 0 1\"\"\") == \"0\"\nassert solution(\"\"\"10\n1 1 1\n1 0 1\n3 0 1\n3 1 1\n3 0 1\n3 1 1\n3 0 1\n3 1 1\n3 0 1\n3 1 1\n3 0 1\"\"\") == \"1\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\n\"\"\"\n\n\nfrom collections import Counter\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        l = []\n        for _ in range(n):\n            l.append(list(map(int, stdin.split('\\n')[_].split())))\n        l.sort(key=lambda x: x[0])\n\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            s = 0\n            for j in range(i):\n                if (l[j][0] - l[i - j - 1][0]) % 2 == 0:\n                    s += dp[j]\n            dp[i] = s + 1\n\n        return str(dp[n] % (10 ** 9 + 7))\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"0\\n\"\n\"\"\"\n\nimport sys\nfrom math import factorial"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n0 1 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n0 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n1 1 0\n2 2 0\n3 3 0\n3 3 0\n3 3 0\n\"\"\") == \"1\""
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\"\"\") == \"0\"\n\nassert solution(\"\"\"5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\"\"\") == \"0\"\n\nassert solution(\"\"\"10\n1 0 0\n1 1 1\n2 2 2\n3 0 1\n3 0 0\n3 0 1\n3 0 0\n3 0 1\n3 0 0\n3 0 1\n3 0 0\"\"\") == \"4\"\n\nassert solution(\"\"\"10\n1 0 0\n1 1 1\n2 2 2\n3 0 1\n3 0 0\n3 0 1\n3 0 0\n3 0 1\n3 0 0\n3 0 1\n3 0 0\"\"\") == \"0\"\n\nassert solution(\"\"\"10\n1 1 1\n2 2 2\n3 0 1\n3 0 0\n3 0 1\n3 0 0\n3 0 1\n3 0 0\n3 0 1\n3 0 0\n3 0 1\"\"\") == \"0\""
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"0\"\nassert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"0\"\nassert solution(\"5\\n0 1 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"1\"\nassert solution(\"5\\n0 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"1\"\nassert solution(\"5\\n1 0 0\\n0 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution.__annotations__)\n\n-----Testcases-----\nInput:\n4\n0 0 0\n0 0 1\n3 0 1\n3 0 0\nOutput:\n0\n\nInput:\n2\n1 1 1\n0 1 1\nOutput:\n1\n\nInput:\n3\n1 0 1\n1 1 1\n3 0 0\nOutput:\n0\n\nInput:\n4\n1 0 1\n1 1 1\n3 0 1\n3 0 0\nOutput:\n1\n\nInput:\n5\n0 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\nOutput:\n0\n\n-----MEMOIZATION-----\nMemoization is a technique for solving optimization problems. In this problem we want to find the number of ways of assigning a costume to each child, consistent with our observations. The key is to try to form the sub-problems for this problem.\n\nIt is useful to know that the number of ways of assigning a costume to child $i$ is the number of ways of assigning a costume to child $i-1$ if we know the number of ways of assigning a costume to child $i-1$. This is because the total number of ways of assigning a costume to child $i-1$ can be calculated by adding the number of ways of assigning a costume to child $i-2$ to $n-1$, since every child must be assigned either the orange or black costume.\n\nOur base case for memoization is that when we have assigned a costume to child $i$, we know the number of ways of assigning a costume to child $i-1$. We memoize this value using a hash table.\n\nThe function that solves the problem is called solver. We make a dictionary memo that maps the number of ways to assign a costume to child $0$ to the number of ways to assign a costume to child $1$. We then iterate through the dictionary. For each key (which corresponds to the number of ways to assign a costume to child $i$), we add the value of that key to the number of ways of assigning a costume to child $i-1$.\n\nThis means that when we reach a new key, we have also reached a new way of assigning a costume to child $i$. When we reach the last child, we have found all the ways of assigning a costume to all children.\n\nSince our base cases are the number of ways of assigning a costume to child $0$ and child $1$, it is important that the values are not overwritten. The key for each value is the value of $i-1$ to ensure that we do not overwrite anything.\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\n\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3') == '1 1\\n2 2\\n1 3\\n2 1'\n\"\"\"\n\nimport sys\n\nN, M = [int(n) for n in sys.stdin.readline().split(' ')]\n\nprint(\"2 3\")\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3''') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\n\n\"\"\"\n\n\"\"\"\n\u672c\u9898\u7ed9\u5b9a\u7684grid\u662f\u4e00\u4e2a$N \\times M$\u7684\u77e9\u9635\uff0c\u6211\u4eec\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u8d77\u70b9\u4e3a$a_1, \\dots, a_{NM}$\u7684\u8def\u5f84\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\uff1a\n1.\u8def\u5f84\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e2\n2.\u6bcf\u4e2a\u9876\u70b9\u90fd\u53ea\u88ab\u8bbf\u95ee\u4e00\u6b21\n3.\u6bcf\u4e2a\u8def\u5f84\u7684\u4e24\u4e2a\u76f8\u90bb\u9876\u70b9\u7684\u8ddd\u79bb\u4e3a2\u62163\n\"\"\"\n\nN, M = [int(i) for i in input().split()]"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\nassert solution(\"2 4\") == \"1 1\\n2 2\\n3 3\\n2 1\\n3 2\\n1 3\\n2 1\\n2 3\\n1 2\\n3 2\"\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n\"\"\"\nimport sys\nfrom tools import timing"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 1\\n2 2\\n1 3') == '1 1\\n2 2\\n1 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sample_input_output[0])) == str(sample_input_output[1])\n\"\"\""
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.33333333\"\n\"\"\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n1 0 1\\n1 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"10 4\\n1 2 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"2 1 2\"\nassert solution(\"10 10\\n1 10 1\\n1 10 1\\n1 10 1\\n1 10 1\") == \"1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"10 10\\n2 10 1\\n2 10 1\\n2 10 1\\n2 10 1\") == \"1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"10 10\\n3 10 1\\n3 10 1\\n3 10 1\\n3 10 1\") == \"0 0 0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.33333333\"\nassert solution(\"3 10\\n0 10 1\\n0 10 2\\n0 10 1\") == \"1.66666667\"\n\"\"\"\n\nn, t = [int(x) for x in stdin.split()]\n\na, b, d = [[int(x) for x in stdin.split()] for i in range(n)]"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == '3.33333333'\nprint(solution(input()))\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == '3.33333333\\n3.33333333\\n3.33333333'\nassert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\") == '3.33333333\\n3.33333333\\n3.33333333\\n3.33333333'\nassert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\") == '3.33333333\\n3.33333333\\n3.33333333\\n3.33333333\\n3.33333333'\nassert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\") == '3.33333333\\n3.33333333\\n3.33333333\\n3.33333333\\n3.33333333\\n3.33333333'\nassert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\") == '3.33333333\\n3.33333333\\n3.33333333\\n3.33333333\\n3.33333333\\n3.33333333\\n3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1') == '3.33333333\\n3.33333333\\n3.33333333'\n\"\"\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == '3.333333333333333'\nassert solution(\"\"\"3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == '3.333333333333333'\nassert solution(\"\"\"4 10\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == '3.333333333333333'\nassert solution(\"\"\"3 10\n0 10 1\n1 10 1\n0 10 1\n\"\"\") == '1.0'\nassert solution(\"\"\"5 10\n0 10 1\n1 10 1\n0 10 1\n2 10 1\n0 10 1\n\"\"\") == '0.8'\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10') == '3.333333333333333'\nassert solution('6 20') == '1.999999999999999'\nassert solution('8 9') == '0.5'\nassert solution('10 5') == '0.5'\nassert solution('3 1') == '0.66666667'\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 10\n0 10 1\n0 10 1\n0 10 1''') == '3.3333333333333333'\nassert solution('''3 10\n0 10 1\n0 20 1\n0 20 1''') == '3.5'\nassert solution('''3 10\n0 10 1\n0 10 1\n0 20 1''') == '3.5'\nassert solution('''3 10\n0 10 1\n0 10 1\n0 20 1''') == '3.5'\nassert solution('''3 10\n0 10 1\n0 20 1\n0 30 1''') == '4'\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1') == '3.3333333333333333'\nassert solution('3 10\\n2 1 3\\n2 1 3') == '2.6666666666666666'\n\"\"\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2\\n3 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n3 3 2''') == '1'\nassert solution('''3\n2 3 3''') == '0'\nassert solution('''3\n3 3 2\n3 3 3''') == '0'\nassert solution('''3\n3 3 2\n3 3 2\n3 3 2''') == '0'\nassert solution('''3\n3 3 2\n3 3 3\n3 3 3''') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 3 2\") == \"1\"\n\nSample Input:\n4\n1 2 3 4\nSample Output:\n0\n\nassert solution(\"4\\n1 2 3 4\") == \"0\"\n\nSample Input:\n5\n9 8 2 1 3\nSample Output:\n0\n\nassert solution(\"5\\n9 8 2 1 3\") == \"0\"\n\nSample Input:\n5\n5 2 2 2 3\nSample Output:\n3\n\nassert solution(\"5\\n5 2 2 2 3\") == \"3\"\n\nSample Input:\n5\n2 1 2 3 4\nSample Output:\n2\n\nassert solution(\"5\\n2 1 2 3 4\") == \"2\"\n\nSample Input:\n5\n5 2 3 4 2\nSample Output:\n2"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n3 3 2''') == 1\n\n\"\"\"\n\nfrom typing import List\nfrom decimal import Decimal\n\nclass Solution:\n    def solve(self, n, a):\n        p = 0\n        for i in a:\n            p += i\n        m = 0\n        for i in a:\n            if i > m:\n                m = i\n        if n == 1 and p == m:\n            return 1\n        if n > 1 and p == m:\n            return 2\n        if n > 1 and p > m:\n            return 0\n        if n > 1 and p < m:\n            return 2"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 2') == '1'\nassert solution('1 1 1') == '1'\n\nassert solution('1 1 0') == '2'\nassert solution('2 1 0') == '1'\n\nassert solution('0 1 0') == '3'\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\") == \"1\"\n\nSample Input:\n3\n3 3 2\n4 1 3\nSample Output:\n0\nassert solution(\"3 3 2\") == \"0\"\n\nSample Input:\n5\n2 4 6 8 10\n8 7 6 5 4\nSample Output:\n2\n\nSample Input:\n5\n3 2 4 5 6\n7 7 7 6 7\nSample Output:\n0\n\nSample Input:\n5\n3 1 5 6 9\n6 7 8 5 4\nSample Output:\n0\n\nSample Input:\n3\n2 3 4\n3 1 4\nSample Output:\n0\n\"\"\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3 3 2') == '1'\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\") == '1'\n\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\") == \"1\"\nprint(solution(\"3 3 2\"))"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abba') == 2\nassert solution('aabb') == 2\nassert solution('baab') == 3\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split())\narr = list(stdin.readline().strip())\nd = {}\n\ncount = 0\nfor i in arr:\n    if i not in d:\n        d[i] = 0\n        count += 1"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin.read()) == test_stdin.read()\n\n------Solution------\nThe task can be solved using dynamic programming. \nThe main idea is to define the dp[i][j] = the number of ways to reach the ith video with at most j clicks:\ndp[i][j] = dp[i-1][j] + dp[i-1][j-1] if the ith video is of the same type as the ith-1 video\ndp[i][j] = dp[i-1][j] if the ith video is of a different type than the ith-1 video\n\ntime O(nk) | space O(nk)\n\n------Test Cases-----\nimport collections\nimport copy\nimport math\nimport random\nimport re\nimport unittest\n\nclass Solution:\n    def minNumberOfClicks(self, video, cnt = 0):\n        if video[0]!= video[1]:\n            cnt += 1\n        if cnt == len(video)-1:\n            return cnt\n        return min(self.minNumberOfClicks(video[1:], cnt), self.minNumberOfClicks(video[1:], cnt+1))\n\n\"\"\""
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abba') == 2\n\nassert solution('abbaa') == 3\n\nassert solution('abaa') == 2\n\nassert solution('aabb') == 2\n\nassert solution('aab') == 2"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == 2\n\"\"\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"abba\"\n) == 1\nassert solution(\n\"aab\"\n) == 1\nassert solution(\n\"abab\"\n) == 0\nassert solution(\n\"aa\"\n) == 2\nassert solution(\n\"aaabbb\"\n) == 2\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abba') == 2\n\"\"\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"gkswhc\") == 4\nassert solution(\"ddd\") == 1\nassert solution(\"aaabbb\") == 3\nassert solution(\"aaaabbbbb\") == 4\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"aabb\") == 1\nassert solution(\"aaabb\") == 2\nassert solution(\"aaabbb\") == 3\nassert solution(\"aabab\") == 3\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abba') == 2\nprint(solution('abba'))\n\nfrom typing import Generator"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abba') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 3\n1 2\n2 3\n2 4''') == 3\n\"\"\"\n\nimport time\nimport math\nimport sys\nfrom sys import stdin"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 2\\n1 3\") == 1\nassert solution(\"2 2\\n1 2\\n1 3\\n1 4\") == 4\nassert solution(\"4 3\\n1 2\\n2 3\\n2 4\") == 2\n\nimport time\nstart = time.time()\n\nclass Solution:\n    def solution(self, stdin):\n        n, m = map(int, stdin.readline().split())\n        compat = [[] for i in range(n)]\n        for i in range(m):\n            a, b = map(int, stdin.readline().split())\n            compat[a - 1].append(b - 1)\n        res = self.recursion(n, compat, 0)\n        print(res)\n    def recursion(self, n, compat, count):\n        if count == n - 1:\n            return 1\n        count += 1\n        res = 0\n        for child in compat[count]:\n            res += self.recursion(n, compat, child)\n        return res\n\nSolution().solution(open(\"2.in\"))\n\nprint(time.time() - start)"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == 3\n\"\"\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n2 4\") == 3\n\n\"\"\""
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == 3\n\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == 4\n'''"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n2 4\") == 3\nassert solution(\"5 3\\n1 5\\n1 2\\n2 3\\n2 4\\n2 5\") == 4\nassert solution(\"5 4\\n1 2\\n1 3\\n1 4\\n1 5\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\") == 3\nassert solution(\"5 4\\n1 2\\n1 3\\n1 4\\n1 5\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\") == 4\nassert solution(\"5 4\\n1 2\\n1 3\\n1 4\\n1 5\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == 3\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == 3\n\"\"\""
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''\n\n'''\nSample Input:\n5 3\n1 0\n0 1\n2 3\n2 3\n2 4\n0 3\n1 4\nSample Output:\n1\n0\n3\n3\n2\n3\n'''\n\n'''\n"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('./sample/input.txt')) == open('./sample/output.txt').read()\n\n-----Explanation-----\nIn the first test case, we have the number of houses and the number of zoning requests (3 2) as input.\n\nThe first line of the input file contains the number of houses and the number of zoning requests, respectively.\n\nThe next 3 lines contain the coordinates of house 1, house 2, and house 3.\n\nThe next 2 lines contain the coordinates of the first and second zoning requests, respectively.\n\nNote that the coordinate of house 2 is within the range of the first zoning request and the coordinate of house 3 is within the range of the second zoning request.\n\nThe first line of the output file should contain the side length of the smallest axis-aligned square that contains all of the points of houses with addresses in the range [1..3].\n\nThe second line of the output file should contain the side length of the smallest axis-aligned square that contains all of the points of houses with addresses in the range [1..2].\n\nThe third line of the output file should contain the side length of the smallest axis-aligned square that contains all of the points of houses with addresses in the range [1..1].\n\nSince we can ignore house 2, the smallest axis-aligned square that contains all of the points of houses with addresses in the range [1..3] is of size 1.\n\nWe can ignore house 3, the smallest axis-aligned square that contains all of the points of houses with addresses in the range [1..2] is of size 0.\n\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\nEach test case consist of a single line containing two integers N and Q,\nwhere N is the number of houses and Q is the number of zoning requests.\n\nNext N lines each contains 2 integers X and Y, which represents the\ncoordinates of a house in the state or province.\n\nNext Q lines each contains 2 integers A and B, which represents a range\n[A..B] that is a zoning request.\n\nFor each request, print the side length of the smallest axis-aligned square\nthat contains all of the houses within the range. If at most one house can be\nignored, print -1.\n\"\"\""
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 0\\n0 1\\n1000 1\") == \"1\"\nassert solution(\"3\\n1 2\\n2 3\\n1000 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nprint(solution(stdin))"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '''1\n0\n'''\n"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\") == '1\\n0'\nassert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\") == '1\\n0'\nassert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\") == '1\\n0'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 0\\n0 1\\n1 1\\n1 1\\n\") == \"1\"\nassert solution(\"2 3\\n1 0\\n0 1\\n1 3\\n2 3\\n\") == \"0\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\nAlgorithm:\n- The answer for every single zoning request is the largest square with a positive height/width that has all the houses in the range.\n- We want to find the largest side of the smallest square containing all the houses.\n- We want to find the smallest side of the largest square containing all the houses.\n\nNote: We can solve this by brute force. We will use a 2D list where each entry is the coordinate of a house. We will iterate through every row/column of the 2D list and check if all the houses in the row/column can be inside the square. If yes, we will add the side of the square.\n\nTime complexity: O(n**2)\n\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def solve(self, n: int, house_coordinates: List[int], zones_request: List[int]) -> List[int]:\n        zones = set()\n        for x, y in house_coordinates:\n            zones.add((x, y))\n\n        max_side = 0\n        for i in range(n):\n            for j in range(n):\n                if (i, j) not in zones:\n                    side = max(abs(i - j), abs(i + j))\n                    max_side = max(max_side, side)\n\n        return [max_side] * len(zones_request)\n\n\"\"\"\nSolution 2\n\nAlgorithm:\n- Start with the smallest square that contains all the houses.\n- Keep the largest side of this square.\n- For each zone, find the largest possible square with the first house of the range on the top/left and the last house of the range on the bottom/right.\n- If the range is all on the same side of the axis, we will just update the largest side.\n- Otherwise, we will have to check if the range is on the same side of the axis as the zone. If it is, we will update the largest side.\n\nTime complexity: O(n + q*(n+m)^2)\n\n\"\"\"\nclass Solution2:\n    def solve(self, n: int, house_coordinates: List[int], zones_request: List[int]) -> List[int]:\n        house_coordinates.sort(key=lambda x: x[0])\n        zones = set()\n        for x, y in house_coordinates:\n            zones.add((x, y))\n\n        max_side = 0\n        for i in range(n):\n            for j in range(n):\n                if (i, j) not in zones:\n                    side = max(abs(i - j), abs(i + j))\n                    max_side = max(max_side, side)\n\n        answer = [max_side] * len(zones_request)\n\n        for a, b in zones_request:\n            x1, y1 = house_coordinates[a - 1]\n            x2, y2 = house_coordinates[b - 1]\n            if x1 == x2:\n                side = abs(y2 - y1)\n                max_side = max(max_side, side)\n                answer[a - 1] = side\n            elif y1 == y2:\n                side = abs(x2 - x1)\n                max_side = max(max_side, side)\n                answer[a - 1] = side\n            else:\n                side_1 = abs(y2 - y1)\n                side_2 = abs(x2 - x1)\n                max_side = max(max_side, side_1, side_2)\n                if side_1 == side_2:\n                    answer[a - 1] = side_1\n                else:\n                    if x1 == x2:\n                        answer[a - 1] = side_1\n                    else:\n                        answer[a - 1] = side_2\n\n        return answer"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\n') == 'a\\nb'\n\n'''\n\nfrom sys import stdin"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n3 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3\\n3 2 2\\n5 2 1\\n3 2 1') == 7\n\nassert solution('2\\n2 1\\n2 1') == 2\n\nassert solution('3\\n1 2 3\\n3 2 2\\n5 2 1\\n1 2 1') == 1\n-----Explanation-----\nIn the first test case, the height of trees in the first row is 1, 1, and 2. The height of trees in the second row is 2, 1, and 1. The height of trees in the third row is 5, 3, and 2.\n\nFrom the diagram, the largest connected group of trees of equal height is 3, 2, 2. This group contains two trees with heights 2, 1, and 1. This group is connected to one tree with height 3.\n\nIn the second test case, the height of trees in the first row is 1, 2, and 3. The height of trees in the second row is 2, 1, and 1.\n\nIn the third test case, the height of trees in the first row is 1, 2, and 3. The height of trees in the second row is 2, 1, and 1.\n\nIn this case, there is only one largest connected group of trees of equal height and it contains only one tree.\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\n-----Problem-----\nA forest is represented as a matrix of integers where each field contains the number of trees that are present in this field. The forest is considered to be connected if there is a path from the topmost row of the forest to the bottom-most row, and if we are moving from left to right.\n\nA group of trees is considered to be connected if all of its trees are connected to each other.\n\nWe also need to know the size of the largest connected group of trees, and you need to answer a question that Mirko asks.\n\nMirko is very fond of the trees in the enchanted forest. He spent years observing them and for each tree measured how many meters it grew in a year. The trees grow continuously. In other words, if the tree grows $5$ meters in a year, it will grow $2.5$ meters in half a year.\n\nThe task is to calculate the size of the largest connected group of trees and the size of the largest group of trees of the same height.\n\n-----Solution-----\nMirko lives in a big enchanted forest where trees are very tall and grow really quickly. That forest can be represented as an $N\\cdot N$ matrix where each field contains one tree.\n\nMirko is very fond of the trees in the enchanted forest. He spent years observing them and for each tree measured how many meters it grew in a year. The trees grow continuously. In other words, if the tree grows $5$ meters in a year, it will grow $2.5$ meters in half a year.\n\nApart from trees, Mirko likes mushrooms from the enchanted forest. Sometimes, he eats suspicious colorful mushrooms and starts thinking about peculiar questions. Yesterday, this unfortunate thing happened and he wondered what would be the size of the largest connected group of trees that are all of equal height if the trees continue to grow at the same speed they\u2019re growing at that moment.\n\nTwo trees are adjacent if their fields in the matrix share a common edge.\n\nTwo trees are connected if there is a sequence of adjacent trees that leads from the first to the second.\n\nA group of trees is connected if every pair of trees in the group is connected.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 700$).\n\nAfter the first line, $N$ lines follow, each of them containing $N$ integers.\n\nThe $i$-th line contains integers $h_{ij}$ ($1 \\leq h_{ij} \\leq 10^6$), the initial height of tree in the $i$-th row and $j$-th column, given in meters.\n\nAfter that, $N$ more lines follow with $N$ integers each.\n\nThe $i$-th line contains integers $v_{ij}$ ($1 \\leq v_{ij} \\leq 10^6$), the growth speed of the tree in the $i$-th row and $j$-th column, given in meters.\n\nWarning: Please use faster input methods beacuse the amount of input is very large. For example, either set ios::sync_with_stdio(false) or use scanf instead of cin in C++, and use BufferedReader instead of Scanner in Java.\n\n-----Output-----\nThe first and only line of output must contain the required number from the task.\n\n-----Examples-----\nSample Input:\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\nSample Output:\n7\n"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n-----Solution-----\n\nimport numpy as np\n\nsize = int(stdin.readline().strip())\n\ngrid = [[int(i) for i in stdin.readline().split()] for _ in range(size)]\n\ngrid = np.array(grid)"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"2\"\nassert solution(\"7\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\") == \"2\"\nassert solution(\"6\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\") == \"2\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"3\""
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\nimport os\nfrom datetime import datetime, timedelta\nimport math\nfrom collections import Counter, deque, defaultdict\nfrom itertools import combinations, product, permutations, combinations_with_replacement\nfrom functools import lru_cache, reduce\nfrom math import log, log2, ceil, floor, gcd, sqrt\nfrom copy import deepcopy\nfrom collections import deque"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 2 3\n1 3 2 3 4\n2 5 1 2 4\n1 3 1 3 5\n3 1 1 2 3\n\"\"\") == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2 1 2 4\\n1 3 2 2\\n3 4 4 3\") == \"2\"\nassert solution(\"3\\n1 2 3\\n2 1 2\\n3 4 4\") == \"0\"\nassert solution(\"3\\n4 4 4\\n3 2 2\\n2 1 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n3 2 2\\n5 2 1\\n3 2 1') == '7'\n\"\"\"\n\nfrom typing import List, Any\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\nassert solution('''5 1\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '10'\nassert solution('''5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\n'''"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 3\nchicken 3\nfish 5\nmeat 3\n\"\"\") == \"33\"\nassert solution(\"\"\"\n4 3\nchicken 1\nfish 2\nmeat 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 3\nchicken 1\nfish 2\nmeat 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 3\nchicken 1\nfish 2\nmeat 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 3\nchicken 1\nfish 3\nmeat 3\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalkculus1 10\\ncalkculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == 20\n\"\"\"\n\nn, k = map(int, input().split())\n\ncourses = {}\nfor i in range(n):\n    course = input().split()\n    course[0] = course[0].lower()\n    courses[course[0]] = int(course[1])\n\ncourses_order = sorted(courses.items(), key=lambda x: x[1])\n\na = courses_order[:k]\na = [x[0] for x in a]"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n\"\"\") == 20\n\n\"\"\"\nSo, the input is the number of courses and the number of courses Tom is planning to take in his last year. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\nThen the sum of the difficulties is calculated, and the output is printed.\n\n\"\"\"\n\n\"\"\"\nSo, the input is the number of courses and the number of courses Tom is planning to take in his last year. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\nThen the sum of the difficulties is calculated, and the output is printed.\n\"\"\"\n\n\"\"\"\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\"\"\"\nNow, the problem is broken up into 3 parts:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n1. Number of courses\n\"\"\"\n\"\"\"\nSince the number of courses is an input to the program, it is the first section. The number of courses is the second section. The number of courses Tom can take in his last year is a positive integer $n$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n2. Number of courses Tom can take in his last year\n\"\"\"\n\"\"\"\nNow, the number of courses Tom can take in his last year is an input to the program. Since the number of courses is an input to the program, it is the first section. The number of courses Tom can take in his last year is a positive integer $n$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n2. Number of courses Tom can take in his last year\n\"\"\"\n\"\"\"\nSince the number of courses Tom can take in his last year is an input to the program, it is the first section. The number of courses Tom can take in his last year is a positive integer $n$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n3. The difficulty level of each course\n\"\"\"\n\"\"\"\nNow, the difficulty level of each course is an input to the program. Since the difficulty level of each course is an input to the program, it is the first section. The difficulty level of each course is a positive integer $d$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n3. The difficulty level of each course\n\"\"\"\n\"\"\"\nSince the difficulty level of each course is an input to the program, it is the first section. The difficulty level of each course is a positive integer $d$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\nNumber of courses\n\"\"\"\n\"\"\"\nSo, the number of courses is the first section. The number of courses is the second section. The number of courses Tom can take in his last year is an input to the program. Since the number of courses is an input to the program, it is the first section. The number of courses Tom can take in his last year is a positive integer $n$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n2. Number of courses Tom can take in his last year\n\"\"\"\n\"\"\"\nNow, the number of courses Tom can take in his last year is an input to the program. Since the number of courses is an input to the program, it is the first section. The number of courses Tom can take in his last year is a positive integer $n$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n2. Number of courses Tom can take in his last year\n\"\"\"\n\"\"\"\nSince the number of courses Tom can take in his last year is an input to the program, it is the first section. The number of courses Tom can take in his last year is a positive integer $n$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n3. The difficulty level of each course\n\"\"\"\n\"\"\"\nNow, the difficulty level of each course is an input to the program. Since the difficulty level of each course is an input to the program, it is the first section. The difficulty level of each course is a positive integer $d$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n3. The difficulty level of each course\n\"\"\"\n\"\"\"\nSince the difficulty level of each course is an input to the program, it is the first section. The difficulty level of each course is a positive integer $d$. The input is split up by a new line. Then the problem is broken up into 3 sections:\n\n1. Number of courses\n2. Number of courses Tom can take in his last year\n3. The difficulty level of each course\n\"\"\"\n\n\"\"\"\n1. Number of courses\n\"\"\"\n\"\"\"\nSince the number of courses is an input to the program, it is the first section. The number"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\n\nimport sys"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\") == \"6\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6') == 6\nassert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n2\\n5 1 0\\n3\\n5 1 0\\n3\\n5 1 0\\n3\\n5 1 0\\n3\\n5 1 0\\n3\\n5 1 0') == 12\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6') == '6'\nassert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6') == '6'\nassert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6') == '6'"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n\nassert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n\nassert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n'''"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\") == \"6\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == 6\nprint(solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n'))\n\n\"\"\""
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n\") == \"6\"\n\"\"\"\n\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\") == 6\n\n-----Instructions-----\nYou will be given input consisting of the number of intersections and roads in Stockholm and a list of orders made yesterday. You must create a delivery schedule so that all customers receive their pizzas before the pizzas for the next order. Find the longest the customer has to wait for their pizzas to be ready.\n\nFor instance, suppose you are given an input containing the following:\n\n5 3\n2 4 2\n4 1 2\n3 1 3\n2 4 3\n3 2 5\n4 2 2\n3 4 4\n2 3 1\n1 4 2\n2 4 1\n2 3 3\n5\n2 3 1\n3 2 1\n4 4 1\n2 4 1\n3 4 2\n4 1 2\n4 1 1\n4 3 3\n3 1 3\n2 2 3\n3 4 4\n1 2 2\n3 1 1\n2 4 1\n2 3 2\n3 3 3\n4 2 2\n2 1 1\n1 4 2\n2 3 2\n4 4 3\n3 3 4\n2 1 1\n3 2 3\n1 4 1\n4 3 3\n1 1 3\n2 1 3\n3 3 3\n\nThen the longest the customer would have to wait for their pizzas is 6, and the delivery schedule is [3,2,1,1,4,2,4,1,3,3,1,2,3,1,1,2,2,2,3,3,1,2,3,1,3,1,1,3,1,3,3,4,4,3,4,1,4,2,4,1,3,3,4,2,1,2,3,1,1,1,3,1,2,1,3,3,3,2,3,2,2,3,1,1,3,2,1,1,2,4,4,1,1,3,4,1,4,3,2,4,2,3,1,2,3,3,4,2,1,4,4,2,2,4,1,1,3,1,1,2,1,1,4,2,3,1,3,1,1,1,3,3,4,3,3,2,4,1,2,3,2,3,2,2,2,4,1,3,2,2,3,3,3,2,1,2,2,1,3,1,2,2,4,4,2,3,3,3,1,1,2,2,2,1,4,2,3,4,1,2,2,1,4,1,3,1,1,1,3,1,4,1,2,3,1,3,1,2,2,1,4,4,1,1,2,4,1,3,4,2,3,1,2,4,1,3,1,2,2,3,3,4,3,1,1,4,2,2,3,3,3,1,3,2,4,2,1,3,3,3,1,1,2,3,3,3,3,2,2,4,1,1,1,3,1,3,3,4,1,1,2,4,1,1,1,1,4,1,4,2,3,2,1,2,1,1,3,2,1,2,2,2,4,1,2,2,1,3,4,1,2,4,1,1,2,2,3,3,1,2,2,1,1,2,2,1,4,4,1,2,2,2,2,4,1,1,3,1,1,1,2,3,1,1,4,2,2,1,1,2,2,1,1,1,4,1,4,1,1,1,1,1,1,4,2,1,2,1,1,2,1,1,4,1,2,4,1,1,2,1,2,3,1,1,1,2,2,2,2,1,1,2,1,2,1,1,1,4,2,1,4,1"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '6'\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import chain\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\\\n1 2 2\\\\n2 3 4\\\\n3 4 1\\\\n4 1 2\\\\n3 3 3\\\\n4 3 6') == 6\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\n-----Notes-----\n1. Do not read input from stdin.\n\n2. Use the default template and fill in the actual code.\n\n3. Remember to fill in all the `TODO`s.\n\n4. Use the default template and fill in the code for each task.\n\n5. Do not write the code for any classes, functions or variables defined in the template.\n\n6. The input and output for each task are defined in the template.\n\n7. If there are any remaining TODOs, write them below.\n\n8. Delete this note if you have filled in all the TODOs.\n\n9. Finally, test your code by running `python3 task.py test_case`, where `test_case` is the filename of the test case.\n\n10. The solution to the template must be tested and evaluated based on the rules stated in the template.\n\n11. The template is written for a very narrow subset of Python.\n\n\"\"\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 1\\n2\\n3\\n1 1\\n1\") == \"2\"\nassert solution(\"3 1 1\\n2\\n3\\n3 2 1\\n1 1\\n1\") == \"impossible\""
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 1\\n2\\n3\\n1 2\\n1 1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1\\n2\\n3\\n1 2\\n1 1\") == 2\nassert solution(\"4 1 1\\n2\\n4\\n1 2\\n1 1\\n2 3 1\") == \"impossible\"\nassert solution(\"4 1 1\\n2\\n4\\n1 2\\n1 1\\n2 3 1\\n3 1 2\") == 2\n\n\"\"\"\n\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0441\u043a\u0440\u0438\u043f\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u044e\u0434\u0435\u0439 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b\u043e \u0434\u043e\u0440\u043e\u0436\u043a\u0438 \u043d\u0430 \u0445\u043e\u0434\u0443. \u041d\u0430 \u0432\u0445\u043e\u0434 \u0432\u0430\u0448 \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b. \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b\u0438 \u0434\u043e\u0440\u043e\u0436\u043a\u0438 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0438\u0433\u0440\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435.\n\n-----Input-----\n\u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043a\u043b\u044e\u0447\u0438 \u0432\u0438\u0434\u0430: {\u0414\u041e\u0420\u041e\u0416\u041e\u041a_1: \u041a\u041e\u041b\u0418\u0427\u0415\u0421\u0422\u0412\u041e_\u041b\u042e\u0414\u0415\u0419, \u0414\u041e\u0420\u041e\u0416\u041e\u041a_2: \u041a\u041e\u041b\u0418\u0427\u0415\u0421\u0422\u0412\u041e_\u041b\u042e\u0414\u0415\u0419,...}\n\u0412 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043a\u043b\u044e\u0447 - \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u0440\u043e\u0436\u043a\u0438, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0447\u0438\u0441\u043b\u043e \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b\u0438 \u0434\u043e\u0440\u043e\u0436\u043a\u0443\n\n-----Output-----\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u044e\u0434\u0435\u0439 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b\u043e \u0434\u043e\u0440\u043e\u0436\u043a\u0438 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0438\u0433\u0440\u044b\n\n-----Examples-----\nSample Input:\n{1: 4, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 1, 8: 1, 9: 1, 10: 1}\nSample Output:\n4\n\n\"\"\"\n\nd = {1: 4, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 1, 8: 1, 9: 1, 10: 1}\n\nresult = 0\nfor key, value in d.items():\n    if value!= 0:\n        result += value\nprint(result)\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\\n2\\n3\\n1 2\\n1 1\") == \"2\"\n\"\"\"\n\nimport sys\nfrom itertools import permutations\nfrom collections import defaultdict\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\\n2\\n1 2 1\\n1 1\") == \"2\"\nassert solution(\"3 1 1\\n2\\n3\\n1 2 1\\n1 1\") == \"impossible\"\nassert solution(\"3 1 1\\n2\\n3\\n1 2 1\\n1 1\\n1 2 1\\n1 1\") == \"3\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 1''') == '2'\nassert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 1''') == '2'\nassert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 1''') == '2'\nassert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 2''') == 'impossible'\nassert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 2''') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\\n2\\n3\\n1 2\\n1 1\") == \"2\"\n\"\"\"\n\nfrom collections import deque\nimport sys\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n''') == '2'\n\nassert solution('''\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n''') == 'impossible'\n\nassert solution('''\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n''') == '2'\n\nassert solution('''\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n''') == '2'\n\nassert solution('''\n3 2 1\n3\n1 2 3\n2 1\n2 2\n1 2\n1 3\n1 1\n''') == 'impossible'"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1\\n2\\n3\\n1 2\\n1 1\") == \"2\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n250 250\\n250 750\") == \"500.00\"\n\"\"\""
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nassert solution('3\\n250 750\\n250 1000\\n750 1000') == '1000.00'\nassert solution('4\\n250 1000\\n250 1000\\n750 1000\\n1000 1000') == '2000.00'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\nn = int(input[0])\narray = []\n\nfor _ in range(n):\n    x, y = map(int, input[1].split())\n    array.append((x, y))\n\narray.sort(key=lambda x: x[1])\n\nanswer = 0\nlength = 0\n\nfor i in range(n-1):\n    length += array[i+1][0] - array[i][1]\n    if i == n-2:\n        length += array[i+1][1]\n    answer = max(answer, length)\n\nprint(round(answer, 2))\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n250 250\\n250 750\") == \"500.00\"\nassert solution(\"2\\n250 250\\n250 750\") == \"500.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n250 250\\n250 750\") == \"500.0\"\nassert solution(\"4\\n235555 547441\\n527279 917245\\n123 10222222\\n76512 551314\") == \"118.5\"\n\nimport sys\nimport math\nfrom typing import Callable, Tuple, List, Iterator, Sequence, Dict\nfrom itertools import chain\nfrom functools import partial\nimport itertools\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n250 250\\n250 750\") == '500.00'\nassert solution(\"2\\n800 800\\n700 700\") == '500.00'\nassert solution(\"2\\n800 800\\n900 900\") == '500.00'\n\"\"\"\n\n\"\"\"\n#### INPUT EXAMPLE ####\n2\n250 250\n250 750\n\n#### OUTPUT EXAMPLE ####\n500.00\n\"\"\""
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nassert solution('3\\n250 250\\n250 750\\n625 675') == '1000.00'\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n250 250\\n250 750\") == \"500.00\"\n\"\"\"\n\n\"\"\"\nSolution:\nhttps://www.reddit.com/r/adventofcode/comments/ebr2cq/2018_day_5_solutions/f3qjq1c/?utm_source=share&utm_medium=web2x&context=3\n\nNote that the amount of rope required is proportional to the square of the distance between the posts.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n250 250\\n250 750\") == \"500.00\"\nprint(solution(\"2\\n250 250\\n250 750\"))"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nprint('Hooray!')\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.0'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10') == '0'\n\n-----Solution-----\n\n```python\nN, M = map(int, stdin.readline().split())\ndog_eat_time = [0] * M\n\nfor _ in range(N):\n    for dog_eat_time_i in map(int, stdin.readline().split()):\n        dog_eat_time[dog_eat_time_i - 1] += dog_eat_time_i\n\nprint(min(dog_eat_time))"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('./test_input.txt', 'r').read()) == '0'\n\"\"\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10') == 0\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3\n2 100 10\n100 1 10''') == '0'\n\"\"\"\n\nimport sys\nimport ast\nimport math\nfrom collections import namedtuple\n\nassert sys.version_info >= (3, 7)\n\nN, M = ast.literal_eval(sys.stdin.readline().strip())\nDog = namedtuple('Dog', ['id', 'x', 'y'])\nBowl = namedtuple('Bowl', ['id', 'x', 'y'])\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10') == '0'\n\n\"\"\""
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10') == '0'\nassert solution('2 5\\n1 1 100 100\\n5 1 100 100') == '200'\n\"\"\""
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n2 100 10\\n100 1 10\") == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\") == \"0\"\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"80 50 3 2\\\\n75 5 25 20 50 35\\\\n50 5 25 35\") == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 100 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\n\"\"\"\n\nimport math\nimport collections\nimport operator"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == 2\n\"\"\"\nimport sys\n\nn_r, n_c, n, m = list(map(int, sys.stdin.readline().strip().split()))\n\nfiles = []\nfor _ in range(n+m):\n    row, col = map(int, sys.stdin.readline().strip().split())\n    files.append((row, col))"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3 2\\n1 2\\n1 3') == '2'\nassert solution('4 2 3 2\\n1 2\\n2 2\\n1 3') == '2'\nassert solution('4 2 3 2\\n1 2\\n2 2\\n1 3\\n2 3') == '3'\nassert solution('4 2 3 2\\n1 2\\n2 2\\n1 3\\n2 3\\n2 4') == '3'\nassert solution('4 2 3 2\\n1 2\\n2 2\\n1 3\\n2 3\\n2 4') == '4'\n\n---\nSample Output:\n3\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\nSample Output:\n2\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n3\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n1\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\nSample Output:\n0\n\n---\nSample Input:\n80 50 3 2\n75 5 25 20 50 35\n75 5 25 35\n"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2 1 2 1\") == \"2\"\nassert solution(\"20 20 2 1\") == \"1\"\nassert solution(\"3 5 3 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\n\"\"\""
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\n\"\"\"\n\nfrom collections import deque\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == 2\n'''\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\nBB..\\nBBBB\\n...B\\n....\\n...C\\nCCCC'\nassert solution('1 1\\n11') == 'impossible'\nassert solution('3 5\\n2222\\n1111\\n1111\\n2222') == 'BBBBBB\\n...B\\n....\\n...B\\n..CC\\n..CC'\nassert solution('10 10\\n11111\\n11111\\n11111\\n11111\\n11111\\n11111\\n11111\\n11111\\n11111') == 'BBBBBBBBBBBBBBBBBBBBBBBB\\n...B\\n...B\\n...B\\n...B\\n...B\\n...B\\n...B\\n...B\\n...B\\n...B'\n\nprint(solution(stdin))\n\n------\n\n\"\"\"\n\"\"\"\n\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0442\u044c \u0438\u0433\u0440\u043e\u043a\u0443 \u0432 \u043a\u0440\u0435\u0441\u0442\u0438\u043a\u0438-\u043d\u043e\u043b\u0438\u043a\u0438 \u0441 \u0438\u0433\u0440\u043e\u043a\u043e\u043c \u043d\u0430 \u0432\u044b\u0431\u043e\u0440.\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442 \u0438\u0433\u0440\u043e\u043a\u0443 \u0441\u0432\u043e\u044e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0443 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u0438 \u0441\u0430\u043c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441.\n\u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0438\u0433\u0440\u043e\u043a\u0443 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0446\u0438\u0444\u0440\u0443 \u0438\u043b\u0438 \u043d\u043e\u043b\u044c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n4 3\n4 3\n4 3\n1\n1\n0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n0|0|0\n0|0|0\n0|0|0\n0|0|0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n3 2\n3 2\n3 2\n0\n0\n1\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n0|0\n0|0\n0|0\n1|1\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n2 2\n2 2\n2 2\n1\n1\n1\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n0|0\n1|1\n1|1\n0|0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n3 3\n3 3\n3 3\n0\n0\n0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n0|0|0\n0|0|0\n0|0|0\n0|0|0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n4 4\n4 4\n4 4\n0\n0\n0\n0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n0|0|0|0\n0|0|0|0\n0|0|0|0\n0|0|0|0\n0|0|0|0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n3 3\n3 3\n3 3\n1\n1\n1\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n1|1|1\n1|1|1\n1|1|1\n0|0|0\n0|0|0\n0|0|0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n3 3\n3 3\n3 3\n0\n0\n0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n0|0|0\n0|0|0\n0|0|0\n0|0|0\n0|0|0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n4 4\n4 4\n4 4\n0\n0\n0\n0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n0|0|0|0\n0|0|0|0\n0|0|0|0\n0|0|0|0\n0|0|0|0\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n4 4\n4 4\n4 4\n1\n1\n1\n1\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n1|1"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\\n\") == \"AAAA\\n...A\\n....\\n\"\nassert solution(\"3 4\\n1112\\n1112\\n1112\\n\") == \"BB..\\nBBBB\\n...B\\n\"\nassert solution(\"3 4\\n1112\\n1112\\n1112\\n\") == \"impossible\\n\"\n\"\"\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\n\\nBB..\\nBBBB\\n...B\\n\\n....\\n...C\\nCCCC'\nassert solution('3 3\\n11\\n12\\n12\\n') == 'impossible'\nassert solution('3 3\\n11\\n11\\n12\\n') == 'BB..\\nBBBB\\n..B'\nassert solution('3 3\\n11\\n11\\n12\\n') == 'BB..\\nBBBB\\n..B'\nassert solution('3 2\\n11\\n12\\n12\\n') == 'BB..\\nBBBB\\n..B'\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4\n2211\n1112\n1112''') == '''AAAA\n...A\n....\n\nBB..\nBBBB\n...B\n\n....\n...C\nCCCC'''\n\nprint(solution(input()))"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....'\nassert solution('3 3\\n11\\n22\\n11') == 'impossible'\nassert solution('1 1\\n1') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"\"\"AAAA\n...A\n....\n\nBB..\nBBBB\n...B\n\n....\n...C\nCCCC\"\"\".strip()\n\nprint(solution(\"3 4\\n2211\\n1112\\n1112\"))\n\nassert solution(\"2 2\\n22\\n1\") == \"impossible\"\n\nprint(solution(\"2 2\\n22\\n1\"))\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\nBB..\\nBBBB\\n...B'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....'\nassert solution('3 4\\n2111\\n1112\\n1112') == 'BB..\\nBBBB'\nassert solution('3 4\\n2211\\n1112\\n1112') == 'impossible'\nassert solution('3 4\\n2212\\n1112\\n1112') == 'impossible'\n\nprint('Success')\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 4\\n2211\\n1112\\n1112\"\n) == \"AAAA\\n...A\\n....\\n\\nBB..\\nBBBB\\n...B\\n\\n....\\n...C\\nCCCC\"\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\nBB..\\nBBBB\\n...B\\n....\\n...C\\nCCCC\\n'\nassert solution('3 4\\n2211\\n1112\\n1111\\n1111') == 'impossible'\nassert solution('3 4\\n2211\\n1112\\n1111\\n1111') == 'impossible'\nassert solution('3 4\\n2211\\n1112\\n1111\\n1111') == 'impossible'\nassert solution('3 4\\n2211\\n1112\\n1111\\n1111') == 'impossible'\n\n\"\"\"\n\nimport collections\nimport copy\nimport math\nimport unittest"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\") == \"9\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1''') == '9'\nassert solution('''3 1 3 4\n3 4 1 2 3 2\n4 3 1 2 1''') == '14'\nassert solution('''1 4 1 2 1 3\n1 4 1 2 1 3\n1 2 2 1 3\n1 2 1 3\n1 2 1 3\n2 2 2 3\n1 2 1 3\n2 2 1 3\n2 1 1 3\n1 1 1 3\n2 1 1 3\n2 1 1 3\n1 2 1 3\n2 2 1 3\n2 1 1 3\n2 1 1 3\n2 2 1 3\n1 1 1 3\n2 1 1 3\n2 1 1 3\n2 2 1 3\n1 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n1 2 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n1 2 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3\n2 1 1 3"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '9'\nprint('all test cases passed')\n\n-----Note-----\nIf you think you are doing well, keep going!\nThe solutions to the remaining challenges will unlock the potential of solving the Mystery of the Rabbit\u2019s Frontiers in a Wonderland (http://www.wonderfulworld.org/en/rabbit-holes/).\n\nThis series is still missing:\n\n@author: Lucien Lavoie\n\"\"\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\") == \"9\"\n\"\"\""
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\") == \"9\"\n\"\"\"\n\n\n\nfrom typing import List\n\n\nclass Solution:\n    def shortestPath(self, locations: List[int], numTrips: int, trips: List[List[int]]) -> int:\n        # \u521d\u59cb\u5316\u56fe\n        graph = {}\n        for i in range(1, numLocations+1):\n            graph[i] = {}\n        # \u8bfb\u53d6trip\u7684\u8fb9\n        for trip in trips:\n            # \u8bfb\u53d6\u5f53\u524dtrip\uff0c\u4e0b\u4e00\u4e2atrip\uff0c\u8fb9\u7684\u65f6\u95f4\u548c\u4e0b\u4e00\u4e2atrip\u7684\u4e0b\u4e00\u4e2alocation\n            currentTrip = [locations[trip[0]], locations[trip[1]]]\n            nextTrip = [locations[trip[2]], locations[trip[3]]]\n            # \u521d\u59cb\u5316\u8fb9\n            graph[currentTrip[0]][currentTrip[1]] = min(graph[currentTrip[0]].get(currentTrip[1], float('inf')), trip[2])\n            graph[currentTrip[0]][currentTrip[1]] = min(graph[currentTrip[0]].get(currentTrip[1], float('inf')), trip[2])\n            # \u66f4\u65b0trip\n            if nextTrip[0] not in graph[currentTrip[0]]:\n                graph[currentTrip[0]][nextTrip[0]] = trip[2]\n            # \u66f4\u65b0\u4e0b\u4e00\u4e2atrip\u7684\u4e0b\u4e00\u4e2alocation\n            graph[nextTrip[0]][nextTrip[1]] = min(graph[nextTrip[0]].get(nextTrip[1], float('inf')), trip[3])\n        # \u521d\u59cb\u5316\u8d77\u70b9\n        graph[locations[1]][locations[1]] = 0\n        # \u603b\u65f6\u95f4\n        totalTime = 0\n        # \u5f53\u524d\u8282\u70b9\n        currentNode = locations[1]\n        # \u76ee\u6807\u8282\u70b9\n        destination = locations[1]\n        while True:\n            # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u8282\u70b9\n            nextNode = min(graph[currentNode].values())\n            # \u5982\u679c\u4e0b\u4e00\u4e2a\u8282\u70b9\u5df2\u7ecf\u662f\u76ee\u7684\u5730\n            if nextNode == float('inf'):\n                return totalTime\n            # \u5c06\u65f6\u95f4\u52a0\u5230\u603b\u65f6\u95f4\u4e0a\n            totalTime += nextNode\n            # \u66f4\u65b0\u8282\u70b9\n            currentNode = nextNode\n            # \u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u76ee\u7684\u5730\n            if currentNode == destination:\n                return totalTime\n            # \u5982\u679c\u5f53\u524d\u8282\u70b9\u5728\u8def\u5f84\u4e0a\n            if destination in graph[currentNode]:\n                destination = currentNode\n            # \u5982\u679c\u5f53\u524d\u8282\u70b9\u5728\u56fe\u4e2d\n            if currentNode in graph:\n                del graph[currentNode][destination]\n            # \u5982\u679c\u5f53\u524d\u8282\u70b9\u5728\u56fe\u4e2d\n            if currentNode in graph:\n                del graph[currentNode][destination]"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '9'\nassert solution('4 1 3 3\\n3 4 1 2 1\\n4 3 1 2 1\\n1 4 1 2 1 3') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\\n\") == \"9\"\nprint(solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\\n\"))\n\n-----Instructions-----\nYou are provided with Alice\u2019s current location, the location of the hole, and all of the trip durations. Your task is to find the shortest time it takes for Alice to get home.\n\nNote that, if Alice goes from her home location to the same location again (for example, if she has to go back to the same place after she got home), she will not count it as a new trip.\n\nInput Format\n\nThe first line contains four integers: $N$, $A$, $R$ and $T$, where: $N$ is the number of distinct locations; $A$ identifies the place where Alice is located; $R$ corresponds to the Rabbit\u2019s hole location; and $T$ is the number of trips recorded in White Rabbit\u2019s logbook. All locations are identified by numbers from $1$ to $N$. Each of the next $T$ lines describes a trip logged with format $d p a_{1} a_{2} \\cdots a_{p}$, where $d$ is the trip duration (according to White Rabbit), $p$ is the number of locations and $a_{1} a_{2} \\cdots a_{p}$ is the sequence of visited locations.\n\nConstraints\n\n$2$\n\n$\\leq $\n\n$N$\n\n$\\leq $\n\n$200$\n\nNumber of locations\n\n$1$\n\n$\\leq $\n\n$T$\n\n$\\leq $\n\n$500$\n\nNumber of trips in the logbook\n\n$2$\n\n$\\leq $\n\n$p$\n\n$\\leq $\n\n$800$\n\nNumber of (possibly repeated) locations in a trip\n\n$1$\n\n$\\leq $\n\n$d_{ij}$\n\n$\\leq $\n\n$12$\n\nReal time of the direct track between $a_ i$ and $a_ j$ (if it exists)\n\nThere are at most $200$ direct tracks. The input will be constructed in such a way that all (real) trip durations are uniquely determined.\n\nOutput Format\n\nAn integer representing the shortest (real) time it takes for Alice to get home.\n\nSample Input 0\n\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\nSample Output 0\n\n9\nSample Input 1\n\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\nSample Output 1\n\n5\nExplanation 1\n\nThe shortest time it takes for Alice to go home is:\n\n  * 4 hours from $A$ to $R$.\n  * 3 hours from $R$ to $T$ (Alice goes home before midnight).\n  * 2 hours from $T$ to $T$.\n  * 1 hour from $T$ to $A$.\n  * 1 hour from $A$ to $R$.\n  * 4 hours from $R$ to $A$ (Alice goes home after midnight).\n\nThe total time is:\n\n  * 9 hours.\n\nFor more detail on the problem, please visit the \"Sample Output\" section in the problem statement.\n\n\"\"\"\n\nimport collections\nimport itertools\nimport math\nfrom typing import List, Set, Dict, Tuple, Optional, IO, Iterator, Sequence\n\nDEBUG = False\n\nLocation = int\n\nclass Solution:\n    def __init__(self, trips: List[Tuple[int, int, List[Location]]]) -> None:\n        self.trips: List[Tuple[int, int, List[Location]]] = trips\n        # How many trips are there?\n        self.trip_count: int = len(trips)\n        # Where is Alice?\n        self.alice_start: Location = trips[0][1]\n        # Where is the hole?\n        self.rabbit_hole: Location = trips[0][2][0]\n        # What are the trip durations?\n        self.trip_durations: List[int] = [x[0] for x in trips]\n\n    def trip_to_location(self, trip_num: int) -> Tuple[int, int, List[Location]]:\n        # How many locations does the trip visit?\n        trip_size = len(self.trips[trip_num][2])\n        # What are those locations?\n        trip_locations: List[Location] = self.trips[trip_num][2]\n        return trip_size, trip_locations\n\n    def get_distance(self,"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\") == '9'\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\"\"\"\n) == \"9\"\n\nassert solution(\n    \"\"\"3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\"\"\"\n) == \"9\"\n\nassert solution(\n    \"\"\"1 2 1 1 1 2 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n---Problem---\nA water supply system for the town of Cluj-Napoca, Romania has been awarded the prize for the best engineering solution. As this is a problem in an interactive setting, it is only possible to submit a single line of input containing the four integers $n$, $s$, $t$ and $q$.\n\nYou have been given a dictionary of all the towns and their respective spring and the maximum aqueduct length. Your task is to determine the minimum cost of connecting each town to its spring. Each town has a spring, and each spring has one or more towns. The towns can be connected by one or more aqueducts which can be built on any combination of hills and springs. The costs for aqueducts are given in the dictionary in the format {(hill, spring): cost}. Each town has a spring and will be connected by a minimum of one aqueduct.\n\n-----Bibliography-----\nhttps://en.wikipedia.org/wiki/Min_cost_flow\n\nhttps://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n\nhttps://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n\nhttps://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm\n\n\"\"\"\n\nimport os\nfrom functools import reduce\nfrom math import inf\nfrom typing import Tuple, Union, List\n\n\nclass WaterDict:\n\n    def __init__(self, n: int, s: int, t: int, q: int):\n        self.n = n\n        self.s = s\n        self.t = t\n        self.q = q\n        self.costs: dict = {}\n\n    def input_dictionary(self) -> None:\n        \"\"\"\n        This method reads in the dictionary of costs from the input file.\n        :return:\n        \"\"\"\n        with open(os.path.join(os.path.dirname(__file__), \"input.txt\"), \"r\") as file:\n            for line in file.readlines():\n                row = line.split(\" \")\n                hill = int(row[0])\n                spring = int(row[1])\n                cost = int(row[2])\n                self.costs[(hill, spring)] = cost\n\n    def dictionary_solution(self) -> Union[None, str]:\n        \"\"\"\n        This method solves the problem with the dictionary solution.\n        :return:\n        \"\"\"\n        hills: List[Tuple[int, int]] = list(self.costs.keys())\n        # sort all hills in ascending order by their x coordinate\n        hills.sort(key=lambda tup: tup[0])\n        # create a list of lists with all possible ways to connect all towns\n        possible_connections: List[List[int]] = []\n        # for every hill, create a list of all possible connections with the current hill\n        for hill in hills:\n            connections = []\n            # for every other hill\n            for other in hills:\n                if other[0] == hill[0]:\n                    connections.append(other[1])\n            # add the connections to the list\n            possible_connections.append(connections)\n\n        # create a list of lists with all possible ways to connect all springs\n        possible_springs: List[List[int]] = []\n        # for every spring\n        for spring in range(1, self.s + 1):\n            # create a list of all possible connections with the current spring\n            connections = []\n            # for every other spring\n            for other in range(1, self.s + 1):\n                if other == spring:\n                    continue\n                # add the connections to the list\n                connections.append(other)\n            # add the connections to the list\n            possible_springs.append(connections)\n\n        # create a list of lists with all possible ways to connect all towns and springs\n        possible_connections_springs: List[List[int]] = []\n        # for every possible way to connect towns and springs\n        for i in range(len(possible_connections)):\n            # for every possible way to connect towns and springs\n            for j in range(len(possible_springs)):\n                # add the possible ways to connect towns and springs to the list\n                possible_connections_springs.append(possible_connections[i] + possible_springs[j])\n\n        # initialize the shortest paths dictionary with infinite values\n        shortest_paths: dict = {}\n        for connection in possible_connections_springs:\n            shortest_paths[connection] = inf\n\n        # initialize the longest aqueduct dictionary with 0\n        longest_aqueducts: dict = {}\n        for connection in possible_connections_springs:\n            longest_aqueducts[connection] = 0\n\n        # initialize the list of visited towns with false\n        visited = [False] * (self.n + 1)\n\n        # initialize the list of shortest paths and the list of longest aqueducts with infinite values\n        shortest_paths = [inf] * (self.n + 1)\n        longest_aqueducts = [inf] * (self.n + 1)\n\n        # initialize the list of flows for all possible connections\n        flows = [0] * (self.n + 1)\n\n        # initialize the list of paths for all possible connections\n        paths = [0] * (self.n + 1)\n\n        # initialize the list of sources with the source index and the source's value in the shortest path dictionary\n        sources = [0] * (self.n + 1)\n        for i in range(self.n + 1):\n            if i == 0:\n                sources[0] = (i, shortest_paths[i])\n            else:\n                shortest_paths[i] = shortest_paths[i - 1] + self.costs[(i, 0)]\n                sources[i] = (i"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('1 0 0 0') == 'IMPOSSIBLE'\nassert solution('1 0 1 0') == '10.0'\nassert solution('1 0 2 1') == '9.0'\nassert solution('0 2 3 0') == '7.0'\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_data_1) == test_result_1\nassert solution(test_data_2) == test_result_2\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 2 3') == '20.396078'\n\"\"\"\nimport math\nfrom collections import deque"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\\n') == '20.396078'\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nfrom math import sqrt\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4''') == '20.396078'\n\"\"\""
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5') == '20.396078'\n\"\"\"\nfrom __future__ import annotations\n\nimport math\nfrom typing import Iterable, List, NamedTuple, Set\n\nfrom advent import Point, Segment, Triangle\n\n\nclass Aqueduct(NamedTuple):\n    origin: Point\n    destination: Point\n    length: float\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\\n') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2 7 1 5 6 2 6 5\\n3 1 2\\n1 3 1\\n1 2 3\") == \"20.396078\"\n\"\"\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\n-----Test Data-----\n3 7 1 9\n1 3 7\n1 2 6\n1 1 1\n1 1 2\n1 2 3\n1 3 4\n2 2 3\n3 3 4\n4 3 2\n5 1 2\n5 2 4\n5 3 6\n6 2 7\n6 3 6\n6 3 8\n7 1 9\n7 3 4\n8 5 1\n8 5 3\n8 6 2\n9 6 2\n9 7 2\n9 8 2\n10 3 1\n10 2 4\n10 3 7\n10 4 6\n10 5 1\n10 5 3\n10 6 2\n10 7 3\n10 8 4\n10 9 4\n11 2 1\n11 2 3\n11 3 2\n11 4 2\n12 1 1\n12 1 2\n12 3 2\n12 4 2\n12 5 2\n12 6 3\n12 7 2\n12 8 3\n12 9 4\n12 10 2\n12 11 4\n12 12 2\n12 13 4\n12 14 3\n12 15 2\n12 16 2\n12 17 3\n12 18 2\n12 19 4\n12 20 2\n13 1 3\n13 3 4\n13 4 5\n13 5 7\n13 6 1\n13 6 3\n13 7 1\n13 7 2\n13 8 5\n13 9 1\n13 9 3\n13 10 4\n13 11 4\n13 12 3\n13 13 4\n13 14 1\n13 14 2\n13 15 3\n13 16 1\n13 17 2\n13 18 5\n13 19 2\n13 20 3\n14 1 3\n14 2 3\n14 3 4\n14 4 1\n14 5 2\n14 6 3\n14 7 1\n14 7 2\n14 8 2\n14 9 3\n14 10 2\n14 11 3\n14 12 4\n14 13 2\n14 14 5\n14 15 1\n14 16 1\n14 17 4\n14 18 5\n14 19 1\n14 20 1\n15 2 4\n15 3 3\n15 4 1\n15 5 2\n15 6 1\n15 6 3\n15 7 2\n15 8 3\n15 9 4\n15 10 2\n15 11 2\n15 12 3\n15 13 2\n15 14 4\n15 15 1\n15 16 1\n15 17 1\n15 18 3\n15 19 4\n15 20 1\n16 2 5\n16 3 2\n16 4 4\n16 5 2\n16 6 2\n16 7 2\n16 8 4\n16 9 3\n16 10 1\n16 11 2\n16 12 1\n16 13 3\n16 14 1\n16 15 2\n16 16 3\n16 17 2\n16 18 5\n16 19 2\n16 20 3\n17 1 2\n17 2 6\n17 3 1\n17 3 2\n17 4 5\n17 5 3\n17 6 4\n17 7 1\n17 7 2\n17 8 3\n17 9 2\n17 10 1\n17 11 2\n17 12 4\n17 13 1\n17 14 1\n17 15 2\n17 16 3\n17 17 2\n17 18 3\n17 19 4\n17 20 2\n17 21 2\n18 2 5\n18 3 2\n18 4 1\n18 5 3\n18 6 4\n18 7 1\n18 7 2\n18 8 4\n18 9 1\n18 10 2\n18 11 1\n18 12 1\n18 13 5\n18 14 2\n18 15 3\n18 16 3\n18 17 1\n18 18 4\n18 19 1\n18 20 1\n19 1 1\n19 2 1\n19 3 1\n19 4 5\n19 5 3\n19 6 2\n19 7 1\n19 7 2\n19 8 1\n19 9 3\n19 10 1\n19 11 1\n19 12 3\n19 13 2\n19 14 2\n19 15 1\n19 16 1\n19 17 3\n19 18 1\n19 19 3\n19 20 2\n19 21 2\n20 2 6\n20 3 1\n20 4 2\n20 5 2\n20 6 3\n20 7 1\n20 7 2\n20 8 2\n20 9 2\n20 10 3\n20 11 2\n20 12 1\n20 13 3\n20 14 2\n20 15 1\n20 16 2\n20 17 2\n20 18 4\n20 19 1\n20 20 2\n20 21 2\n20 22 1\n20 23 1\n21 1 1\n21 2 2\n21 3 3\n21 4 4\n21 5 4\n21 6 3\n21 7 2\n21 8 1\n21 9 1\n21 10 2\n21 11 2\n21 12 3\n21 13 1\n21 14 2\n21 15 1\n21 16 1\n21 17 4\n21 18 4\n21 19 4\n21 20 2\n21 21 4\n21 22 2\n21 23 1\n22 2 3\n22 3 4\n22 4 1\n22 5 2\n22 6 1\n22 7 3\n22 8 1\n22 9 3\n22 10 1\n22 11 3\n22 12 1\n22 13 2\n22 14 2\n22 15 2\n22 16 2\n22 17 1\n22 18 2\n22 19 1\n22 20 2\n22 21 3\n22 22 2\n22 23 3\n22 24 1\n22 25 1\n23 1 1\n23 2 2\n23 3 3\n23 4 4\n23 5 3\n23 6 3\n23 7 2\n23 8 2\n23 9 1\n23 10 1\n23 11 2\n23 12 2\n23 13 2\n23 14 3\n23 15 2\n23 16 1\n23 17 1\n23 18 2\n23 19 4\n23 20 3\n23 21 2\n23 22 3\n23 23 2\n23 24 1\n23 25 1\n24 1 1\n24 2 4\n24 3 4\n24 4 3\n24 5 4\n24 6 1\n24 7 2\n24 8 1\n24 9 4\n24 10 2\n24 11 3\n24 12 1\n24 13 1\n24 14 2\n24 15 1\n24 16 2\n24 17 3\n24 18 2\n24 19 1\n24 20 1\n24 21 1\n24 22 1\n24 23 2\n24 24 2\n24 25 2\n25 1 1\n25 2 1\n25 3 4\n25 4 1\n25 5 4\n25 6 4\n25 7 2\n25 8 3\n25 9 4\n25 10 4\n25 11 4\n25 12 3\n25 13 3\n25 14 1\n25 15 1\n25 16 1\n25 17 1\n25 18"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abca') == 'bc'\nassert solution('bc dd ee ff gg hh ii jj kk ll mm') == 'nn'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'zz'\n\"\"\"\n\nimport sys\nimport re\nimport collections"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abccbaabc\") == \"abccba\"\n\n\"\"\""
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"nn\"\n\"\"\""
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == p"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"nn\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"zz\"\n\"\"\"\n\n\nimport string\nimport itertools"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == ans, \"Wrong Answer!\"\nprint('Test passed')\n\n-----Problem-----\nIn a university, there are $n$ courses and $m$ students. Their seats are represented by integer numbers in the range $[1, n]$. The number of courses a student takes is represented by array $a$ of $n$ integers, where $a_i$ is the number of courses the $i^\\textrm{th}$ student takes. The number of courses a student takes cannot be greater than the number of courses it is free to take.\n\nThe number of students for each course is represented by array $b$, where $b_i$ is the number of students taking course $i$.\n\nThe teacher of a course is represented by integer $c$, where $1 \\leq c \\leq m$.\n\nFor each course $i$, the teacher of this course is the largest possible integer $j$, such that $a_i \\leq j \\leq b_i$ and $j = c$.\n\nHelp the teacher and students find out who will be the teacher of the university in each step.\n\n-----Solution-----"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"bc\"\n\n\"\"\""
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"abcdefg\") == \"bcdefg\"\nassert solution(\"abcdefghijklm\") == \"bcdefghijklm\"\nassert solution(\"abcdefghijklmno\") == \"bcdefghijklmno\"\nassert solution(\"abcdefghijklmnop\") == \"bcdefghijklmnop\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"nn\"\n\"\"\"\n\ns = stdin\nK, M = list(map(int, input().split()))"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"bcde\"\n\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom itertools import product\nfrom typing import List\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\") == \"12\\n10\\n16\\n7\"\nassert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\") == \"12\\n10\\n16\\n7\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ndb = set([sys.stdin.readline()[:-1] for _ in range(n)])\nq = int(sys.stdin.readline())\ndb = set([sys.stdin.readline()[:-1] for _ in range(q)])"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\n''') == '''\n12\n10\n16\n7\n'''"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija') == '12\\n10\\n16\\n7'\nassert solution('3\\nrobot\\nhobi\\nhobit\\n4\\nrobi\\nhobi\\nhobit\\n2\\nrobot\\nhobi\\nhobit') == '14\\n10\\n6'\nassert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija') == '12\\n10\\n16\\n7'\nassert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija') == '12\\n10\\n16\\n7'\n\n\"\"\""
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija') == '12\\n10\\n16\\n7'\n\n-----Test1-----\nSample Input:\n5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\nSample Output:\n12\n10\n16\n7\n\n-----Test2-----\nSample Input:\n5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\nSample Output:\n12\n10\n16\n7\n\n-----Test3-----\nSample Input:\n5\nwien\nsverige\ntj\u00e4nst\nl\u00e4nder\nwien\n4\nl\u00e4nder\ntj\u00e4nst\nsverige\n\n-----Test4-----\nSample Input:\n5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\nSample Output:\n12\n10\n16\n7\n\n-----Test5-----\nSample Input:\n1\nrobot\n4\nrobi\nhobi\nhobit\nrakija\nSample Output:\n8\n\n-----Test6-----\nSample Input:\n5\nmango\npikachu\npikachu\nmango\n4\npikachu\nmango\npikachu\npikachu\nSample Output:\n16\n16\n16\n12\n\n-----Test7-----\nSample Input:\n5\nr\ne\nr\nt\nf\n4\nr\ne\nr\nt\nf\nSample Output:\n0\n0\n0\n0\n0\n\n-----Test8-----\nSample Input:\n5\nsverige\nrobot\nhobi\nhobit\nrobi\n4\nsverige\nrobot\nhobi\nhobit\nrakija\nSample Output:\n12\n10\n16\n7\n\n-----Test9-----\nSample Input:\n5\n\n-----Test10-----\nSample Input:\n5\n\n-----Test11-----\nSample Input:\n5\n\n-----Test12-----\nSample Input:\n5\n\n-----Test13-----\nSample Input:\n5\n\n-----Test14-----\nSample Input:\n5\n\n-----Test15-----\nSample Input:\n5\n\n-----Test16-----\nSample Input:\n5\n\n-----Test17-----\nSample Input:\n5\n\n-----Test18-----\nSample Input:\n5\n\n-----Test19-----\nSample Input:\n5\n\n-----Test20-----\nSample Input:\n5\n\n-----Test21-----\nSample Input:\n5\n\n-----Test22-----\nSample Input:\n5\n\n-----Test23-----\nSample Input:\n5\n\n-----Test24-----\nSample Input:\n5\n\n-----Test25-----\nSample Input:\n5\n\n-----Test26-----\nSample Input:\n5\n\n-----Test27-----\nSample Input:\n5\n\n-----Test28-----\nSample Input:\n5\n\n-----Test29-----\nSample Input:\n5\n\n-----Test30-----\nSample Input:\n5\n\n-----Test31-----\nSample Input:\n5\n\n-----Test32-----\nSample Input:\n5\n\n-----Test33-----\nSample Input:\n5\n\n-----Test34-----\nSample Input:\n5\n\n-----Test35-----\nSample Input:\n5\n\n-----Test36-----\nSample Input:\n5\n\n-----Test37-----\nSample Input:\n5\n\n-----Test38-----\nSample Input:\n5\n\n-----Test39-----\nSample Input:\n5\n\n-----Test40-----\nSample Input:\n5\n\n-----Test41-----\nSample Input:\n5\n\n-----Test42-----\nSample Input:\n5\n\n-----Test43-----\nSample Input:\n5\n\n-----Test44-----\nSample Input:\n5\n\n-----Test45-----\nSample Input:\n5\n\n-----Test46-----\nSample Input:\n5\n\n-----Test47-----\nSample Input:\n5\n\n-----Test48-----\nSample Input:\n5\n\n-----Test49-----\nSample Input:\n5\n\n-----Test50-----\nSample Input:\n5\n\n-----Test51-----\nSample Input:\n5\n\n-----Test52-----\nSample Input:\n5\n\n-----Test53-----\nSample Input:\n5\n\n-----Test54-----\nSample Input:\n5\n\n-----Test55-----\nSample Input:\n5\n\n-----Test56-----\nSample Input:\n5\n\n-----Test57-----\nSample Input:\n5\n\n-----Test58-----\nSample Input:\n5\n\n-----Test59-----\nSample Input:\n5\n\n-----Test60-----\nSample Input:\n5\n\n-----Test61-----\nSample Input:\n5\n\n-----Test62-----\nSample Input:\n5\n\n-----Test63-----\nSample Input:\n5\n\n-----Test64-----\nSample Input:\n5\n\n-----Test65-----\nSample Input:\n5\n\n-----Test66-----\nSample Input:\n5\n\n-----Test67-----\nSample Input:\n5\n\n-----Test68-----\nSample Input:\n5\n\n-----Test69-----\nSample Input:\n5\n\n-----Test70-----\nSample Input:\n5\n\n-----Test71-----\nSample Input:\n5\n\n-----Test72-----\nSample Input:\n5\n\n-----Test73-----\nSample Input:\n5\n\n-----Test74-----\nSample Input:\n5\n\n-----Test75-----\nSample Input:\n5\n\n-----Test76-----\nSample Input:\n5\n\n-----Test77-----\nSample Input:\n5\n\n-----Test78-----\nSample Input:\n5\n\n-----Test79-----\nSample Input:\n5\n\n-----Test80-----\nSample Input:\n5\n\n-----Test81-----\nSample Input:\n5\n\n-----Test82-----\nSample Input:\n5\n\n-----Test83-----\nSample Input:\n5\n\n-----Test84-----\nSample Input:\n5\n\n-----Test85-----\nSample Input:\n5\n\n-----Test86-----\nSample Input:\n5\n\n-----Test87-----\nSample Input:\n5\n\n-----Test88-----\nSample Input:\n5\n\n-----Test89-----\nSample Input:\n5\n\n-----Test90-----\nSample Input:\n5\n\n-----Test91-----\nSample Input:\n5\n\n-----Test92-----\nSample Input:\n5\n\n-----Test93-----\nSample Input:\n5\n\n-----Test94-----\nSample Input:\n5\n\n-----Test95-----\nSample Input:\n5\n\n-----Test96-----\nSample Input:\n5\n\n-----Test97-----\nSample"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\\n\") == \"12 10 16 7\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\\n\") == \"12 10 16 7\"\n\n-----Problem Description-----\nThe longest common prefix of two words is the longest word that both words start with. For example, the longest common prefix of the words \u201cidentity\u201d and \u201cidealistic\u201d is the word \u201cide\u201d. A database contains $N$ words.\n\nThe algorithm to search for a query word $W$ in the database is primitive. It compares the word $W$ one by one with each word in the database. Two words are compared letter by letter until a letter in which they differ is found or until the end of one of the words is reached (it is then established either that the words are equal or that one is longer than the other). When the algorithm finds the word $W$ in the database, it terminates.\n\nAnalysing the algorithm shows that the number of steps needed to find a word $W$ is equal to the number of words $W$ is compared to, plus the sum of the lengths of the longest common prefixes of W and each of the words it was compared to.\n\nWrite a program that calculates the number of steps the algorithm uses to find each of the $Q$ query words.\n\n-----Input-----\nThe first line contains an integer $N$ $(1 \\leq N \\leq 30000)$, the number of words in the database. Each of the following $N$ lines contains a single word from the database. The words are given in the order the algorithm compares them to a query word. All words in the database will be distinct. The following line contains an integer $Q$ $(1 \\leq Q \\leq 30000)$, the number of words searched for. Each of the following $Q$ lines contains a single query word.\n\nAll words in the input will be strings of less than $30$ lowercase letters of the English alphabet\n\n-----Output-----\nOutput one integer per line for each query word, the number of steps the algorithm uses when searching for the word.\n\n-----Examples-----\nSample Input:\n5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\nSample Output:\n12\n10\n16\n7\n\"\"\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abc') == 'a'\nassert solution('abcd') == 'a'\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrkija\") == \"12\\n10\\n16\\n7\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\") == \"12\\n10\\n16\\n7\"\n\"\"\"\n\nfrom typing import List, Dict\nimport unittest\n\nclass Node:\n    def __init__(self, key: str):\n        self.key: str = key\n        self.children: Dict[str, Node] = {}\n        self.parent: Node = None\n    \n    def __str__(self):\n        return f\"{self.key} with {len(self.children)} children\""
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\") == '12\\n10\\n16\\n7'"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\nSolution\nFirst, we will define the function $f(x) = (33x + 1) \\mod 2^{20}$. Then, we will create a $X$ by $X$ size grid, fill the upper left corner with $f^1(0)$, the next cell to the right with $f^2(0)$, $f^3(0)$ etc. Once the top row is filled, continue to the cell below the upper left cell, and fill with $f^{X+1}(0)$. Continue this process until all rows are filled. Finally, we will sum all the values in every column, and take those values modulo $2^{20}$. After that, we will convert the result of step 4 into base $27$ and then output the decrypted message.\n\nCode:\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\n\"\"\"\n\n\n\n\"\"\"\nIn cryptography, a Caesar cipher is a very simple encryption techniques in which each letter in the plain text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 3, A would be replaced by D, B would become E, and so on. The method is named after Julius Caesar, who used it to communicate with his generals. ROT-13 (\"rotate by 13 places\") is a widely used example of a Caesar cipher where the shift is 13. In Python, the key for ROT-13 may be represented by means of the following dictionary:\n\nkey = {'a':'n', 'b':'o', 'c':'p', 'd':'q', 'e':'r', 'f':'s', 'g':'t', 'h':'u', \n       'i':'v', 'j':'w', 'k':'x', 'l':'y','m':'z', 'n':'a', 'o':'b', 'p':'c', \n       'q':'d', 'r':'e','s':'f', 't':'g', 'u':'h', 'v':'i', 'w':'j', 'x':'k',\n       'y':'l', 'z':'m', 'A':'N', 'B':'O', 'C':'P', 'D':'Q', 'E':'R', 'F':'S', \n       'G':'T', 'H':'U', 'I':'V', 'J':'W', 'K':'X', 'L':'Y', 'M':'Z', 'N':'A', \n       'O':'B', 'P':'C', 'Q':'D', 'R':'E', 'S':'F', 'T':'G', 'U':'H', 'V':'I', \n       'W':'J', 'X':'K', 'Y':'L', 'Z':'M'}\n\nYou are given a string s formed by concatenating several words using the following rules:\n\nWord = only letters and spaces (' ').\nAll letters are in lowercase.\nEach space between two words adds '|' in between.\n\nFor example, the string \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\" would be represented as \"gfmnc wms bgblr rpylqjyrc gr| zw fylb. rfyrq ufyr amknsrcpq ypc| dmp. bmgle gr gl zw fylb gq glcddgagclr ylb| rfyr'q ufw rfgq rcvr gq| qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\".\n\nReturn the final string after performing the described operations on s.\n\nExample 1:\n\nInput: s = \"map\"\nOutput: \"mpp\"\nExplanation: map -> mpa -> mpp.\n\nExample 2:\n\nInput: s = \"omk\"\nOutput: \"omm\"\nExplanation: omk -> oma -> omm\n\nExample 3:\n\nInput: s = \"pies\"\nOutput: \"ps\"\nExplanation: pies -> pie -> ps\n\nExample 4:\n\nInput: s = \"shhs\"\nOutput: \"hs\"\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('14 4', 'JQ IRKEYFG EXQ') == 'THIS IS A TEST'\n\nSample Input:\n10 5\nLEXYXQA NV KWBNM\nSample Output:\nSO STRONG\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\nW X R T M P N K\nQ J I R F G E\nT X S U P V Y\nM Z A R Q P N\nT J O U E S\nF L X Z C V P\nY A U R X Y A\nQ W P J A R E\nV T J E I T D\nX U C O D M Z\n''') == '''THIS IS A TEST\n\n'''\n\n-----Problem-----\nTRELLO\n\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"14 4\", \"JQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"14 4\", \"JQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\"\n\nimport math\nimport re\nimport sys\nfrom functools import reduce\nfrom operator import xor\n\nALPHABET = list(map(chr, range(ord('A'), ord('Z') + 1)))\nALPHABET_SIZE = len(ALPHABET)\n\nMOD = 2 ** 20"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"JQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('4 6\\nSZYAZRJL AZENOPL') == 'TRQVKJQR I JFQTTJE'\nassert solution('4 6\\nSZYAZRJL AZENOPL') == 'TRQVKJQR I JFQTTJE'\nassert solution('4 6\\nSZYAZRJL AZENOPL') == 'TRQVKJQR I JFQTTJE'\n\n\"\"\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2.6\") == [\"135\", \"270\", \"135135\", \"270270\"]\nassert solution(\"1.1\") == [\"110\"]\nassert solution(\"2.2\") == [\"121\", \"221\", \"222\"]\n\"\"\"\n\nimport math"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.6') == ['135', '270', '135135', '270270']\nassert solution('0.1234') == ['1234', '1']\nassert solution('2.9') == ['2', '3', '4']\nassert solution('1.234567') == ['1234567', '12', '1']\nassert solution('1.1234567') == ['1234567', '112345']\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2.6\") == \"135\\n270\\n135135\\n270270\"\nassert solution(\"5.8\") == \"No solution\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2.6\") == ['135', '270', '135135', '270270']\nassert solution(\"3.8\") == ['153', '384', '2340', '4848', '29300', '53450', '57600', '62760', '72660', '83160', '93840']\nassert solution(\"5.4\") == ['3554', '5355', '5555', '6565', '7665', '8755', '9565', '10555', '11555', '12565', '13565', '14565', '15555', '16665', '17565', '18665', '19665', '20555', '21555', '22565', '23565', '24565', '25565', '26565', '27565', '28555', '29565', '30565', '31555', '32565', '33565', '34565', '35565', '36565', '37565', '38565', '39565', '40565', '41555', '42565', '43565', '44565', '45565', '46565', '47565', '48555', '49565', '50565', '51555', '52565', '53565', '54565', '55565', '56565', '57565', '58565', '59565', '60565', '61555', '62565', '63565', '64565', '65565', '67565', '68565', '69565', '70565', '71555', '72565', '73565', '74565', '75565', '76565', '77565', '78565', '79565', '80565', '81555', '82565', '83565', '84565', '85565', '86565', '87565', '88565', '89565', '90565', '91555', '92565', '93565', '94565', '95565', '96565', '97565', '98565', '99565', '100566', '101155', '101265', '101365', '101465', '101565', '101665', '101765', '101865', '101985', '101995', '10205', '102155', '102265', '102365', '102366', '102466', '102566', '102666', '102766', '102866', '102966', '103066', '103165', '103265', '103366', '103466', '103566', '103666', '103766', '103866', '103966', '104066', '104165', '104265', '104365', '104375', '104466', '104566', '104666', '104766', '104866', '104966', '105066', '105165', '105265', '105365', '105375', '10545', '105555', '105655', '105765', '105865', '105965', '106065', '106165', '106265', '106365', '106375', '106466', '106566', '106665', '106766', '106866', '106966', '107066', '107165', '107265', '107375', '10745', '107555', '107655', '107765', '107865', '107965', '108065', '108165', '108265', '108365', '108375', '108466', '108666', '108766', '108866', '108966', '109066', '109165', '109265', '109375', '109466', '109566', '109666', '109766', '109866', '109966', '110066', '110166', '110265', '110365', '110465', '110566', '110766', '110866', '110966', '111066', '111166', '111266', '111366', '111466', '111566', '111666', '111766', '111866', '111966', '112066', '112165', '112265', '112365', '112466', '112566', '112664', '112765', '112865', '112985', '112995', '113205', '113355', '113465', '113565', '113666', '113766', '113866', '113966', '114066', '114165', '114265', '114365', '114375', '114466', '114566', '114666', '114766', '114866', '114966', '115066', '115166', '115266', '115366', '115466', '115566', '115666', '115766', '115866', '115966', '116066', '116165', '116265', '116365', '116375', '116466', '116566', '116665', '116766', '116866', '116966', '117066', '117165', '117265', '117375', '117466', '117566', '117666', '117766', '117866', '117966', '118066', '118165', '118265', '118365', '118375', '118466', '118566', '118666', '118766', '118866', '118966', '119066', '119165', '119265', '119365', '119466', '119566', '119666', '119766', '119866', '119986', '119996']\nassert solution(\"3.8\") == ['153', '384', '2340', '4848', '29300', '53450', '57600', '62760', '72660', '83160', '93840']\nassert solution(\"5.4\") == ['3554', '5355', '5555', '6565', '7665', '8755', '9565', '10555', '11555', '12565', '13565', '14565', '15555', '16665', '17565', '18665', '19665', '20555', '21555', '22565', '23565', '24565', '25565', '26565', '27565', '28555', '29565', '30565', '31555', '32565', '33565', '34565', '35565', '36565', '37565', '38565', '39565', '40565', '41555', '42565', '43565', '44565', '45565', '46565', '47565', '48555"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.6') == ['135', '270', '135135', '270270']\nassert solution('3.6') == ['135', '270', '135135', '270270', '3654', '5233', '3536', '6161', '6322', '6651', '6382', '6921', '7201', '7411', '7522', '7651', '7812', '8102', '8341', '8682', '9021', '9261', '9602', '9742', '9882']\n\"\"\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2.6''') == '''135\n270\n135135\n270270'''\nprint('Hooray!')\n\n'''\n\nimport math\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2.6\") == ['135', '270', '135135', '270270']\nassert solution(\"0.69\") == ['1022']\nassert solution(\"6.45\") == ['321']\nassert solution(\"1.2\") == ['2']\nassert solution(\"2\") == ['2', '3']\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2.6\") == ['135', '270', '135135', '270270']\nprint(\"Test pass.\")"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2.6\") == ['135', '270', '135135', '270270']\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2.6\") == [\"135\", \"270\", \"135135\", \"270270\"]\n\"\"\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(st.parse(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\")\nassert solution(st.parse(\"2\\n0 1\\n1 2\\n3 3\\n4 4\") == \"0\")\nassert solution(st.parse(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\")) == \"4\")\n\n-----Test 1-----\n1\n-1 2\n-1 1\n-3 -1\n-2 -3\n3 -1\n3 0\n\n----Test 2-----\n1\n0 2\n1 1\n2 2\n3 3\n\n-----Test 3-----\n5\n-6 -1\n-5 -6\n0 -1\n0 1\n0 3\n\n-----Test 4-----\n4\n0 1\n1 1\n2 2\n3 3\n\n-----Test 5-----\n4\n0 1\n3 5\n3 5\n0 3\n1 1\n1 2\n2 2\n3 3\n\n-----Test 6-----\n4\n0 1\n4 5\n4 5\n0 3\n1 1\n1 2\n2 2\n3 3\n\n-----Test 7-----\n4\n0 2\n4 5\n5 4\n0 3\n1 1\n1 2\n2 2\n3 3\n\n-----Test 8-----\n4\n0 1\n0 2\n1 1\n3 3\n\n-----Test 9-----\n2\n0 1\n1 1\n1 2\n\n-----Test 10-----\n2\n0 1\n1 1\n1 2\n\n-----Test 11-----\n2\n0 1\n1 1\n0 3\n1 1\n\n-----Test 12-----\n2\n0 2\n1 1\n1 2\n\n-----Test 13-----\n3\n0 1\n1 1\n2 2\n0 3\n1 1\n1 2\n1 3\n\n-----Test 14-----\n1\n1 1\n\n-----Test 15-----\n1\n1 1\n\n-----Test 16-----\n3\n0 1\n1 1\n0 3\n1 1\n\n-----Test 17-----\n2\n0 1\n0 1\n1 1\n\n-----Test 18-----\n2\n0 1\n1 1\n1 1\n\n-----Test 19-----\n2\n0 1\n0 1\n0 1\n\n-----Test 20-----\n2\n0 1\n0 1\n1 1\n\n-----Test 21-----\n1\n0 1\n\n-----Test 22-----\n2\n0 1\n0 1\n1 1\n\n-----Test 23-----\n2\n0 2\n0 1\n1 1\n\n-----Test 24-----\n2\n0 1\n1 1\n0 1\n\n-----Test 25-----\n2\n0 1\n0 1\n1 1\n\n-----Test 26-----\n1\n0 2\n\n-----Test 27-----\n2\n0 2\n0 1\n1 1\n\n-----Test 28-----\n2\n0 1\n0 1\n1 1\n\n-----Test 29-----\n1\n0 2\n\n-----Test 30-----\n2\n0 1\n0 1\n1 1\n\n-----Test 31-----\n2\n0 1\n0 1\n0 1\n\n-----Test 32-----\n2\n0 1\n0 1\n0 1\n\n-----Test 33-----\n3\n0 2\n0 1\n0 1\n\n-----Test 34-----\n3\n0 2\n0 1\n1 1\n\n-----Test 35-----\n3\n0 2\n0 1\n0 1\n\n-----Test 36-----\n3\n0 2\n0 1\n0 1\n\n-----Test 37-----\n3\n0 2\n0 1\n1 1\n\n-----Test 38-----\n1\n0 1\n\n-----Test 39-----\n3\n0 2\n0 2\n0 1\n\n-----Test 40-----\n3\n0 1\n0 1\n0 1\n\n-----Test 41-----\n3\n0 1\n0 1\n0 1\n\n-----Test 42-----\n3\n0 1\n0 1\n0 1\n\n-----Test 43-----\n3\n0 1\n0 1\n0 1\n\n-----Test 44-----\n2\n0 1\n0 1\n0 1\n\n-----Test 45-----\n2\n0 1\n0 1\n0 1\n\n-----Test 46-----\n2\n0 1\n0 1\n0 1\n\n-----Test 47-----\n2\n0 1\n0 1\n0 1\n\n-----Test 48-----\n1\n0 1\n\n-----Test 49-----\n1\n0 1\n\n-----Test 50-----\n2\n0 1\n0 1\n\n-----Test 51-----\n1\n0 1\n\n-----Test 52-----\n2\n0 1\n0 1\n\n-----Test 53-----\n2\n0 1\n0 1\n\n-----Test 54-----\n1\n0 1\n\n-----Test 55-----\n2\n0 1\n0 1\n\n-----Test 56-----\n2\n0 1\n0 1\n\n-----Test 57-----\n2\n0 1\n0 1\n\n-----Test 58-----\n3\n0 1\n0 1\n0 1\n\n-----Test 59-----\n2\n0 1\n0 1\n0 1\n\n-----Test 60-----\n1\n0 1\n\n-----Test 61-----\n1\n0 1\n\n-----Test 62-----\n3\n0 1\n0 1\n0 1\n\n-----Test 63-----\n1\n0 1\n\n-----Test 64-----\n2\n0 1\n0 1\n0 1\n\n-----Test 65-----\n1\n0 1\n\n-----Test 66-----\n1\n0 1\n\n-----Test 67-----\n2\n0 1\n0 1\n\n-----Test 68-----\n1\n0 1\n\n-----Test 69-----\n2\n0 1\n0 1\n\n-----Test 70-----\n2\n0 1\n0 1\n\n-----Test 71-----\n2\n0 1\n0 1\n\n-----Test 72-----\n1\n0 1\n\n-----Test 73-----\n2\n0 1\n0 1\n\n-----Test 74-----\n3"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == '4'\n\"\"\"\n\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Points:\n    def __init__(self, points):\n        self.points = points\n        self.num_points = len(points)\n        self.size = len(points[0])\n\n    def area(self):\n        size = self.size\n        if size == 2:\n            return self.points[0][0] * self.points[0][1] + self.points[1][0] * self.points[1][1]\n        else:\n            A = self.points[0]\n            B = self.points[1]\n            C = self.points[2]\n            D = self.points[3]\n            return (A.x * B.y + B.x * C.y + C.x * D.y + D.x * A.y - A.x * C.y - B.x * D.y - C.x * A.y) / 2.0\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"input.txt\").read()) == \"2\"\n\"\"\"\nimport sys\nimport math\nimport itertools\n\n\"\"\"\nhttps://stackoverflow.com/questions/217038/finding-a-centroid-of-a-set-of-points-in-2d-space\n\"\"\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == '4'\nassert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == '4'\nassert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == '4'\nassert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == '4'\n\"\"\""
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(input()))"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n5\\n6\\n7\\n') == '4'\n\n'''\n\n\n'''\n\n[+]Temporal marker            : Sat, 18:04 | Mar 03, 20\n[+]Temporal marker untethered : Sat, 18:14 | Mar 03, 20\n[+]Comments                  : At first of all, the solution is not optimal, it seems like there is always a non-degenerate quadrilateral formed by any four points, so you always have a count of one.\n                                However, this is not true. Any degenerated quadrilateral forms only one point. You don't have to worry about counting\n                                them.\n                                What matters is the number of non-degenerate quadrilaterals.\n                                Any degenerated quadrilaterals form a non-degenerate quadrilaterals, so they can be counted.\n                                Finally, the number of castles is simply the sum of all quadrilaterals.\n                                \n[+]Space Complexity           : O(1)\n[+]Time Complexity            : O(N^2 + N * S)\n[+]Level                     :\n[+]Tread Speed               :\n[+]LINK                      : https://www.interviewbit.com/problems/four-points-non-degenerate/\n[+] Supplement Sources       : N/A\n\n'''"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n\") == \"4\"\nassert solution(\"6\\n0 0\\n0 10\\n8 6\\n7 1\\n7 10\\n0 8\\n1 6\\n1 8\\n2 2\\n2 4\\n3 1\\n3 3\\n6 10\\n8 4\\n9 8\\n7 4\\n9 1\\n\") == \"3\"\nassert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n\") == \"4\"\nassert solution(\"5\\n0 1\\n1 2\\n2 3\\n3 4\\n4 0\\n0 5\\n1 5\\n1 6\\n2 4\\n2 6\\n3 5\\n3 6\\n4 5\\n4 6\\n5 6\\n\") == \"3\"\nassert solution(\"4\\n0 1\\n0 2\\n0 3\\n0 4\\n1 4\\n2 4\\n3 4\\n4 0\\n0 5\\n1 5\\n1 6\\n2 5\\n2 6\\n3 5\\n3 6\\n4 5\\n4 6\\n\") == \"0\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n5 1') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n5 5') == '0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000'\nassert solution('5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5') == '0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000'\nassert solution('6\\n1 2\\n1 3\\n1 4\\n1 5\\n2 6') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 2') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000'\n\n\"\"\"\n\n\nfrom typing import List, Tuple\nfrom math import inf\nimport numpy as np\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2\n2 3\n3 1''') == '''0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000'''\n\nassert solution('''5\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5''') == '''0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n2.0000000 2.0000000\n3.0000000 3.0000000\n-2.0000000 -2.0000000\n4.0000000 4.0000000\n-3.0000000 -3.0000000'''\n\nassert solution('''5\n1 2\n2 3\n3 1\n4 1\n4 2''') == '''0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n1.0000000 1.0000000\n1.0000000 -1.0000000\n2.0000000 2.0000000\n2.0000000 -2.0000000\n3.0000000 3.0000000\n3.0000000 -3.0000000\n4.0000000 4.0000000\n-4.0000000 -4.0000000'''\n\nassert solution('''6\n1 2\n1 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6''') == '''0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n1.0000000 1.0000000\n1.0000000 -1.0000000\n2.0000000 2.0000000\n3.0000000 3.0000000\n-2.0000000 -2.0000000\n4.0000000 4.0000000\n-3.0000000 -3.0000000\n5.0000000 5.0000000\n-4.0000000 -4.0000000\n6.0000000 6.0000000\n-5.0000000 -5.0000000'''\n\n'''n = int(stdin.readline())\nconnections = [tuple(map(int, line.split())) for line in stdin]"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nprint(solution(stdin.read()))\n\n-----Notes-----\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 4\\n4 2') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution(\"3\\n1 1\\n2 2\") == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n0.0000000 1.0000000'\nassert solution(\"3\\n1 2\\n2 1\") == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n0.0000000 1.0000000'\nassert solution(\"3\\n1 1\\n2 2\") == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n0.0000000 1.0000000'\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaa\\nabc\\naba\\n*a\\naaa*\\n*aaa\") == \"2\\n1\\n1\\n\"\n\"\"\""
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaa\\nabc\\naba\\na*a\\naaa*\\n*aaa') == '2\\n1\\n1'\nassert solution('aaa\\naba\\n*aa\\n**a') == '3\\n1\\n0'\nassert solution('abc\\naba\\n*aa\\n**a') == '0\\n0\\n0'\nassert solution('abc\\naba\\n*aa\\n**a') == '0\\n0\\n0'\nassert solution('aaa\\naba\\n*aa\\n**a') == '2\\n0\\n0'\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\") == '2\\n1\\n1\\n'\nprint(solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\"))\n\n--------------------------------------------------------------------------------------"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\") == \"2\\n1\\n1\"\nassert solution(\"a\\naa\\na*\\na*a\\na*a\\na*a\\n*a*\\n*a*a\\n*a*a\\n*a*a\\n*a*a\\n*a*a\\n*a*a\\n*a*a\\n*a*a\\n*a*a\") == \"9\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\n*a\\naaa*\") == \"2\\n1\\n1\"\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\n*\\naaa\\n*\\n\") == \"2\\n1\\n1\\n\"\nassert solution(\"1 1\\naa\\n*\\n\") == \"1\\n\"\nassert solution(\"7 8\\naaaa\\nab*\\na*\\n*\\n*\\n*\\n*\\n*\\n\") == \"5\\n2\\n0\\n\"\nassert solution(\"3 3\\nxaa\\nx*\\ny*\\n\") == \"0\\n0\\n0\\n\"\n\nprint(\"PASSED\")\n\n-----Note-----\nSince the first line contains two integers $N$ and $Q$, which may be different, you should take them as input.\n\nInput format:\nThe first line contains two integers $N$ and $Q$ (1\u2009\u2264\u2009$N, Q\u2009\u2264\u2009100,000$).\nEach of the next $N$ lines contains a word.\nEach of the following $Q$ lines contains a pattern for which you need to output how many words from the first set it covers. The total number of characters will be less than $4000000$.\n\nSample Input 1:\n3 2\naaa\nabc\naba\n*\naaa\n*\nSample Output 1:\n2\n1\n1\n\nSample Input 2:\n1 1\naa\n*\nSample Output 2:\n1\n\nSample Input 3:\n5 5\na\nb\nc\naa\nbb\nc\nbb\ncc\n*\na\n*\nSample Output 3:\n4\n0\n0\n0\n\n-----Problem-----\nLittle Matej is solving an OOP (Object-oriented programming) laboratory exercise and he\u2019s having trouble with solving one subtask.\n\nHe is given a set that contains $N$ words. He is also given $Q$ queries where each query is one pattern. A pattern consists of a single character \u201c*\u201d and lowercase letters of the English alphabet. For example, \u201c*\u201d, \u201ckul*to\u201d, \u201cana*\u201d.\n\nA pattern is said to cover a word if such an array of letters (which can be empty) exists that, when replacing the character \u201c*\u201d, the pattern and the word become completely identical. It is necessary to output how many words each pattern covers.\n\n-----Input-----\nThe first line of input contains two integers $N$ and $Q$ ($1 \\leq N, Q \\leq 100000$). Each of the following $N$ lines contains a word that consists of lowercase letters of the English alphabet. Each of the following $Q$ lines contains a pattern for which you need to output how many words from the first set it covers. The total number of characters will be less than $4000000$.\n\n-----Output-----\nOutput $Q$ lines, the $k$-th line containing the number of words that the $k$-th pattern covers.\n\n-----Examples-----\nSample Input:\n3 3\naaa\nabc\naba\n*\naaa\n*\nSample Output:\n2\n1\n1\n1\n0\n2\n0\n1\n0\n0\n0\n1\n0\nSample Input:\n1 1\naa\n*\nSample Output:\n1\n0\n\n-----Note-----\nSince the first line contains two integers $N$ and $Q$, which may be different, you should take them as input.\n\nInput format:\nThe first line contains two integers $N$ and $Q$ (1\u2009\u2264\u2009$N, Q\u2009\u2264\u2009100,000$).\nEach of the next $N$ lines contains a word.\nEach of the following $Q$ lines contains a pattern for which you need to output how many words from the first set it covers. The total number of characters will be less than $4000000$.\n\nSample Input 1:\n3 2\naaa\nabc\naba\n*\naaa\n*\nSample Output 1:\n2\n1\n1\n2\n0\n1\n0\n\nSample Input 2:\n1 1\naa\n*\nSample Output 2:\n1\n0\n\nSample Input 3:\n5 5\na\nb\nc\naa\nbb\nc\nbb\ncc\n*\na\n*\nSample Output 3:\n4\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n1\n0\n\n-----Problem-----\nLittle Matej is solving an OOP (Object-oriented programming) laboratory exercise and he\u2019s having trouble with solving one subtask.\n\nHe is given a set that contains $N$ words. He is also given $Q$ queries where each query is one pattern. A pattern consists of a single character \u201c*\u201d and lowercase letters of the English alphabet. For example, \u201c*\u201d, \u201ckul*to\u201d, \u201cana*\u201d.\n\nA pattern is said to cover a word if such an array of letters (which can be empty) exists that, when replacing the character \u201c*\u201d, the pattern and the word become completely identical. It is necessary to output how many words each pattern covers.\n\n-----Input-----\nThe first line of input contains two integers $N$ and $Q$ ($1 \\leq N, Q \\leq 100000$). Each of the following $N$ lines contains a word that consists of lowercase letters of the English alphabet. Each of the following $Q$ lines contains a pattern for which you need to output how many words from the first set it covers. The total number of characters will be less than $4000000$.\n\n-----Output-----\nOutput $Q$ lines, the $k$-th line containing the number of words that the $k$-th pattern covers.\n\n-----Examples-----\nSample Input:\n3 3\naaa\nabc\naba\n*\naaa\n*\nSample Output:\n2\n1\n1\n1\n0\n1\n0\n1\n0\n0\n0\n1\n0\n\n-----Note-----\nSince the first line contains two integers $N$ and $Q$, which may be different, you should take them as input.\n\nInput format:\nThe first line contains two integers $N$ and $Q$ (1\u2009\u2264\u2009$N, Q\u2009\u2264\u2009100,000$).\nEach of the next $N$ lines contains a word.\nEach of the following $Q$ lines contains a pattern for which you need to output how many words from the first set it covers. The total number of characters will be less than $4000000$.\n\nSample Input 1:\n3 2\naaa\nabc\naba\n*\naaa\n*\nSample Output 1:\n2\n1\n1\n1\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\nSample Input 2:\n1 1\naa\n*\nSample Output 2:\n1\n0\n\n-----Problem-----\nLittle Matej is solving an OOP (Object-oriented programming) laboratory exercise and he\u2019s having trouble with solving one subtask.\n\nHe is given a set that contains $N$ words. He is also given $Q$ queries where each query is one pattern. A pattern consists of a single character \u201c*\u201d and lowercase letters of the English alphabet. For example, \u201c*\u201d, \u201ckul*to\u201d, \u201cana*\u201d.\n\nA pattern is said to cover a word if such an array of letters (which can be empty) exists that, when"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == '1'\nassert solution('aaba') == '2'\nassert solution('abc') == '1'\nassert solution('abcba') == '2'\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba\\na*a\\naaa*') == '2\\n1\\n1'\n\n\"\"\""
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aaa') == '2'\nassert solution('abc') == '1'\nassert solution('aba') == '1'\nassert solution('a*a') == '2'\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\n*aa\\naaa*\\n*aaa\") == '2\\n1\\n1'\nprint('Success')\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO''') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nO X\\nX O\\nX O\\nX O\\nO X\\nO O\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n'\n    'XO\\n'\n    'OX\\n'\n    'XO\\n'\n    'OX\\n'\n    'OO') == 1\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO\") == 1\n\"\"\"\n\nimport os\nfrom typing import List, Tuple"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO\") == 1\n\n-----Note-----\nAssume that the student\u2019s programming language has no limits on the number of rows or columns that can be used for the starting configuration.\n\n\"\"\""
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\nOXX\\nOXX\\nOXX\\nOOX\") == 1\nassert solution(\"4 2\\nOXX\\nOXX\\nOXX\\nOOX\") == 0\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(None) == None\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(st.rstrip()) == expected\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO') == 1\nassert solution('4 2\\nOO\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO') == 0"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == 16\n\n\"\"\""
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n2 0\n0 2\n-2 0\n0 -2''') == '16'\n\"\"\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == \"16\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2') == '16'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == 16\n\"\"\"\n\n\n\"\"\"\nOur plan is to generate all possible quadrilaterals of size 4, in the form of 4 distinct points on the grid, and then check if the coordinates of these points represent a quadrilateral. This way, we generate all possible quadrilaterals. Since we don't care about the areas of the quadrilaterals, we sum up the scores of the quadrilaterals.\n\nLet's go step by step:\n\n1. Choose 4 distinct points on the grid (N <= 700).\n2. Find all the possible quadrilaterals.\n3. Check if the coordinates of these points represent a quadrilateral.\n4. Sum up all the quadrilaterals.\n\nAssume that the coordinates of the points are integers. So the maximum possible coordinate value is 999. So the max possible quadrilateral length is 4. We will find all possible quadrilaterals of length 4. For each quadrilateral, we will generate 4 distinct points, so the total number of quadrilaterals is 4 * 4 * 4 = 64.\n\nWe have a cache for quadrilaterals that we have already generated. Each quadrilateral is associated with a key as a string, and a value as the sum of the quadrilateral's area. We can find the quadrilateral with the given key in the cache, and if the key does not exist in the cache, we can generate the quadrilateral and insert it into the cache.\n\nWe will represent the quadrilateral by a string. Each character will be a point on the grid, with the minimum possible coordinate value being 0, and the maximum being 999. So the quadrilateral will be of the form PQRS, where each point is denoted by its index (starting from 1) in the grid. For example, the quadrilateral PQRS will be represented as \"1235\".\n\nSo for a quadrilateral ABCD, we will form all possible quadrilaterals ABCDPQR and ABCDPQRS. ABCD will be represented as \"1234\", and PQRS will be \"12345\".\n\nNow if a quadrilateral ABCD is a valid quadrilateral, then the quadrilateral ABCDPQR is also a valid quadrilateral, and the quadrilateral ABCDPQRS is still a valid quadrilateral. For example, a quadrilateral ABCD of length 4 can be formed by joining point 1 to point 4. So ABCD can be represented as \"1234\". Similarly, we can form the quadrilateral ABCDPQR by joining point 1 to point 5, and point 2 to point 6. So ABCDPQR can also be represented as \"1235\". Similarly, we can form the quadrilateral ABCDPQRS by joining point 1 to point 6, and point 2 to point 5. So ABCDPQRS can also be represented as \"1235\".\n\nWe can generate all the quadrilaterals and put them into the cache. Then we will take the minimum key of the cache, and that will be the quadrilateral with the minimum sum of the areas of the quadrilaterals.\n\nThe code is below.\n\"\"\"\n\nN = int(stdin.readline())"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2') == 16\n\"\"\""
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == 16\n\n'''"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == 16\nassert solution(\"6\\n5 2\\n2 5\\n-3 0\\n1 -3\\n2 -3\\n3 -3\") == 26\nassert solution(\"7\\n6 2\\n2 6\\n-5 0\\n3 -5\\n4 -5\\n5 -5\\n6 -5\") == 33\nassert solution(\"7\\n0 0\\n0 -3\\n0 -5\\n0 -7\\n0 -9\\n1 -2\\n2 -2\\n3 -2\\n4 -2\") == 7\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nscores = dict()\n\nfor i in range(n):\n    x, y = [int(j) for j in sys.stdin.readline().split()]\n    if x in scores:\n        scores[x].append(y)\n    else:\n        scores[x] = [y]\n\npoints = list(scores.keys())\npoints.sort()"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4\n0 0\n0 2\n-2 0\n0 -2\n\"\"\") == 16\nprint(\"You can beat me!\")\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == 16\n\"\"\""
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom utils import timing\n\nINPUT_TXT = \"4 10 50\\n8 8 2 -2\"\nINPUT_LINES = INPUT_TXT.split('\\n')\nOUTPUT_TXT = \"80\"\nOUTPUT_LINES = OUTPUT_TXT.split('\\n')\n\n\"\"\"\n- n : number of comments\n- c : cost for creating fake account\n- r : cost for reporting\n- s : scores\n\"\"\"\nINPUT_DICT = {\n    'n' : 0,\n    'c' : 0,\n    'r' : 0,\n    's' : [],\n}\nfor idx, line in enumerate(INPUT_LINES):\n    if idx == 0:\n        INPUT_DICT['n'], INPUT_DICT['c'], INPUT_DICT['r'] = map(int, line.split())\n    else:\n        INPUT_DICT['s'].append(int(line))"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\n\n\"\"\"\n\n\n\nclass Solution:\n    def __init__(self, stdin):\n        self.n = int(stdin.readline().strip())\n        self.c = int(stdin.readline().strip())\n        self.r = int(stdin.readline().strip())\n\n        self.scores = [int(s) for s in stdin.readline().strip().split(' ')]\n\n    def solve(self) -> str:\n        \n        \n        pass\n\n\nimport sys\nassert Solution(sys.stdin.read()).solve() == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4 10 50\\n8 8 2 -2'\n) == '80'\n\n\"\"\"\n\nfrom operator import xor"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\nprint(solution(stdin=input()))\n\nSample Input:\n4 10 50\n-2 8 8 -2\nSample Output:\n-60\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n\n\"\"\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    'tests/6.txt') == '0'\n\"\"\""
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100_000)"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\nfrom math import log2\nimport os, sys\ncurrentdir = os.path.dirname(os.path.realpath(__file__))\nparentdir = os.path.dirname(currentdir)\nsys.path.append(parentdir)\nfrom numba import njit\nimport cProfile"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4 10 50\n8 8 2 -2\n\"\"\") == '80'\n\n\"\"\"\nTime Complexity: O(NlogN)\nSpace Complexity: O(N)\n\"\"\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1') == '3.0'\n\n\"\"\"\n\nfrom collections import deque, defaultdict"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"3.000000000\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List, Tuple, Union\nfrom decimal import Decimal\nimport math\nimport sys\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n3\\n3 1 1\\n1 1 1\\n2 2 3\") == \"6.0\\n\"\n\"\"\"\n\nv_walk, v_bike = map(int, stdin.readline().split())\nx_1, y_1, x_2, y_2 = map(int, stdin.readline().split())\nx_g, y_g = map(int, stdin.readline().split())\nx_d, y_d = map(int, stdin.readline().split())\nn = int(stdin.readline())\nstations = []\nfor i in range(n):\n    stations.append(list(map(int, stdin.readline().split())))"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"3.000000000\"\nassert solution(\"6 2\\n2 4\\n0 0 10 10\\n3 2\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"4.833333333\"\nassert solution(\"1 1\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"9.5000001110\"\nassert solution(\"2 2\\n0 0 10 10\\n3 2\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"9.5000001110\"\nassert solution(\"0 0\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"5.3333333333\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '3.000000000'\n\n---"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 1\\n4 5\\n3\\n1 1\\n2 3\\n2 3\") == \"5.551115123\"\n\"\"\""
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"3.000000000\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '3.0'\n\n-----Notes-----\nThis is a rather simple problem. The only trick is that the map is infinite, that is, it can be bigger than the bounding box of the map.\n\"\"\""
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"3.000000000\"\n\"\"\"\n\nfrom collections import deque, namedtuple\nimport math\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"3.0\"\n\"\"\""
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == \"1\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\n\"\"\"\n\n\"\"\"\n----- EXPLANATION -----\n\nWe'll treat the input as a graph.\n\nThe graph will be represented as a dictionary.\n\nThe graph's vertices will be the state governors.\n\nThe graph will have two edges for each edge in the input, one for each of the two parties.\n\nTo represent the graph, we'll use a dictionary of dictionaries.\n\nWe'll call the two edges that we add to the graph the Orange and Purple edges.\n\nWe'll add a dictionary to the dictionary corresponding to the governor.\n\nThat dictionary will have two keys, one for the edge of the same party as the governor, and the other for the edge of the other party.\n\nIf that edge exists, we'll add the governor to that edge.\n\nOtherwise, we'll add a new edge of the governor's party.\n\nOnce the graph has been built, we'll see if we can go from orange to purple in one step.\n\nIf so, we'll return that step.\n\nIf we can't get from orange to purple in one step, we'll return one more than the minimum step required.\n\nWe'll continue to build the graph and look for a path.\n\nIf we can't find a path, we'll return the maximum number of months that it could take to get the graph to a single party.\n\"\"\""
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\n\n\"\"\""
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\n\"\"\""
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\nprint(solution(stdin))\n\n'''"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4') == 1\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\n###############################################################################\n\"\"\"\nSolution: use a breadth first search.\n\nO(n) time\nO(n) extra space\n\"\"\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\n\n\"\"\""
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\n\"\"\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n') == '6.283185'\n\n---Problem 638A---\nThere are $N$ points on a plane. We wish to compute how many different triangles can be formed by connecting $3$ of them.\n\nThere are 3N\u22122 points, and each point has a coordinate pair x and y. So the total number of connections is 3N\u22122. Let us denote the number of triangles by $T$.\n\nSo, for example, if the coordinates of the points are (1, 2), (2, 4), (3, 6), then the number of triangles is 2.\n\nLet the number of triangles be $T(x, y)$. The following figure depicts the graph of $T$ for each x and y:\n\n-----Input-----\nThe first line contains the integer $T$: the number of triangles.\n\nThe next $T$ lines contain three space separated integers, each in the range $1 \\leq x, y \\leq 10^4$.\n\n-----Output-----\nThe answer to the problem, rounded to 6 decimal places, in the range $0 \\leq T(x, y) \\leq 10^9$.\n\n-----Examples-----\nSample Input:\n3\n1 2\n2 4\n3 6\nSample Output:\n2"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n0 1\\n1 0\\n0 1\\n0 2\") == \"6.283185\"\nprint(solution(\"0 0\\n0 1\\n1 0\\n0 1\\n0 2\"))\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2''') == '6.283185'\n\n'''\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n\") == \"6.283185\"\n\"\"\"\n\nimport sys\nimport ast"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\"\"\") == \"6.283185\""
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\") == '6.283185'\nprint(solution(input()))\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n\") == \"6.283185\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n0 1\\n1 0\\n1 1\\n1 0\\n0 2\\n1 2\") == 6.283185\n\"\"\"\n\nimport math"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n\"\"\") == '6.283185'\n\n-----Note-----\nThere are no blank lines in the input.\n\n-----Hint-----\n1. If you can see the nodes on a drawing, what is the minimum amount of turning you would have to do to get to each node after you have visited all of them?\n2. In the first line, the number of nodes is $N$, and the number of edges is $M$.\n3. In the second line, there are $N$ nodes, and there are $M$ lines in the input.\n4. In the third line, there are $N$ nodes, and there are $M$ lines in the input.\n5. In the fourth line, there are $N$ nodes, and there are $M$ lines in the input.\n6. In the fifth line, there are $N$ nodes, and there are $M$ lines in the input.\n7. In the sixth line, there are $N$ nodes, and there are $M$ lines in the input.\n8. In the seventh line, there are $N$ nodes, and there are $M$ lines in the input.\n9. In the eighth line, there are $N$ nodes, and there are $M$ lines in the input.\n10. In the ninth line, there are $N$ nodes, and there are $M$ lines in the input.\n11. In the tenth line, there are $N$ nodes, and there are $M$ lines in the input.\n12. In the eleventh line, there are $N$ nodes, and there are $M$ lines in the input.\n13. In the twelfth line, there are $N$ nodes, and there are $M$ lines in the input.\n14. In the thirteenth line, there are $N$ nodes, and there are $M$ lines in the input.\n15. In the fourteenth line, there are $N$ nodes, and there are $M$ lines in the input.\n16. In the fifteenth line, there are $N$ nodes, and there are $M$ lines in the input.\n17. In the sixteenth line, there are $N$ nodes, and there are $M$ lines in the input.\n18. In the seventeenth line, there are $N$ nodes, and there are $M$ lines in the input.\n19. In the eighteenth line, there are $N$ nodes, and there are $M$ lines in the input.\n20. In the nineteenth line, there are $N$ nodes, and there are $M$ lines in the input.\n21. In the twentieth line, there are $N$ nodes, and there are $M$ lines in the input.\n22. In the twenty-first line, there are $N$ nodes, and there are $M$ lines in the input.\n23. In the twenty-second line, there are $N$ nodes, and there are $M$ lines in the input.\n24. In the twenty-third line, there are $N$ nodes, and there are $M$ lines in the input.\n25. In the twenty-fourth line, there are $N$ nodes, and there are $M$ lines in the input.\n26. In the twenty-fifth line, there are $N$ nodes, and there are $M$ lines in the input.\n27. In the twenty-sixth line, there are $N$ nodes, and there are $M$ lines in the input.\n28. In the twenty-seventh line, there are $N$ nodes, and there are $M$ lines in the input.\n29. In the twenty-eighth line, there are $N$ nodes, and there are $M$ lines in the input.\n30. In the twenty-ninth line, there are $N$ nodes, and there are $M$ lines in the input.\n31. In the thirty-first line, there are $N$ nodes, and there are $M$ lines in the input.\n32. In the thirty-second line, there are $N$ nodes, and there are $M$ lines in the input.\n33. In the thirty-third line, there are $N$ nodes, and there are $M$ lines in the input.\n34. In the thirty-fourth line, there are $N$ nodes, and there are $M$ lines in the input.\n35. In the thirty-fifth line, there are $N$ nodes, and there are $M$ lines in the input.\n36. In the thirty-sixth line, there are $N$ nodes, and there are $M$ lines in the input.\n37. In the thirty-seventh line, there are $N$ nodes, and there are $M$ lines in the input.\n38. In the thirty-eighth line, there are $N$ nodes, and there are $M$ lines in the input.\n39. In the thirty-ninth line, there are $N$ nodes, and there are $M$ lines in the input.\n40. In the forty-first line, there are $N$ nodes, and there are $M$ lines in the input.\n41. In the forty-second line, there are $N$ nodes, and there are $M$ lines in the input.\n42. In the forty-third line, there are $N$ nodes, and there are $M$ lines in the input.\n43. In the forty-fourth line, there are $N$ nodes, and there are $M$ lines in the input.\n44. In the forty-fifth line, there are $N$ nodes, and there are $M$ lines in the input.\n45. In the forty-sixth line, there are $N$ nodes, and there are $M$ lines in the input.\n46. In the forty-seventh line, there are $N$ nodes, and there are $M$ lines in the input.\n47. In the forty-eighth line, there are $N$ nodes, and there are $M$ lines in the input.\n48. In the forty-ninth line, there are $N$ nodes, and there are $M$ lines in the input.\n49. In the fifty-first line, there are $N$ nodes, and there are $M$ lines in the input.\n50. In the fifty-second line, there are $N$ nodes, and there are $M$ lines in the input.\n51. In the fifty-third line, there are $N$ nodes, and there are $M$ lines in the input.\n52. In the fifty-fourth line, there are $N$ nodes, and there are $M$ lines in the input.\n53. In the fifty-fifth line, there are $N$ nodes, and there are $M$ lines in the input.\n54. In the fifty-sixth line, there are $N$ nodes, and there are $M$ lines in the input.\n55. In the fifty-seventh line, there are $N$ nodes, and there are $M$ lines in the input"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1 2 3'\nprint(solution('2'))\nassert solution('5') == '1 2 3 4 5'\nprint(solution('5'))\nassert solution('15') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\nprint(solution('15'))\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2\"\"\"\n        output = \"\"\"1 2 3\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5\"\"\"\n        output = \"\"\"1 2 3 4 5\"\"\"\n        self."
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == '1 2 3'\nassert solution(2) == '1 2 4 5 6 7 8'\nassert solution(3) == '1 2 4 8 12 16 21 25'\nassert solution(4) == '1 2 4 8 12 16 20 24 28 32 36'\nassert solution(5) == '1 2 4 8 12 16 20 24 28 32 36 40 49 54 58 61 62 64'\n"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 4 5 6 7\"\nassert solution(\"5\") == \"1 2 4 5 7 8 9 10 13 14 15 16\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '1\\n1 2\\n1 3 2\\n1 4 3 2\\n1 5 4 3 2\\n1 6 5 4 3 2\\n1 7 6 5 4 3 2\\n1 8 7 6 5 4 3 2\\n1 9 8 7 6 5 4 3 2\\n1 10 9 8 7 6 5 4 3 2\\n1 11 10 9 8 7 6 5 4 3 2\\n1 12 11 10 9 8 7 6 5 4 3 2\\n1 13 12 11 10 9 8 7 6 5 4 3 2\\n1 14 13 12 11 10 9 8 7 6 5 4 3 2\\n1 15 14 13 12 11 10 9 8 7 6 5 4 3 2'\nassert solution('3') == '1 2 3\\n1 2 4 3\\n1 3 5 2\\n1 3 6 5 2\\n1 4 7 6 3 2\\n1 4 8 7 6 3 2\\n1 5 9 8 7 6 3 2\\n1 5 10 9 8 7 6 3 2\\n1 6 11 10 9 8 7 6 3 2\\n1 6 12 11 10 9 8 7 6 3 2\\n1 7 13 12 11 10 9 8 7 6 3 2\\n1 7 14 13 12 11 10 9 8 7 6 3 2\\n1 8 15 14 13 12 11 10 9 8 7 6 3 2\\n1 8 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 9 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 9 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 10 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 10 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 11 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 11 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 12 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 12 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 13 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 13 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 14 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 14 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 15 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 15 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 16 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 16 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 17 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 17 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 18 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 18 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 19 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 19 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 20 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 20 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 21 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 21 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 22 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 22 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 23 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 23 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 24 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 24 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 25 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 25 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 26 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 26 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 27 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 3 2\\n1 27 54 53 52 51 50 49 48"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '1 2 3', 'Try again'\nassert solution('3') == '1 3 2 4 5 6 7 8', 'Try again'\n\"\"\""
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\npreorder = []\n\nfor _ in range(n):\n    preorder.append(int(sys.stdin.readline()))"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '1 2 3'\n\"\"\"\n\nimport unittest\nfrom typing import List\nfrom math import ceil\nfrom collections import defaultdict\n\n\nclass Solution:\n    def sum_of_left_and_right(self, node: str) -> int:\n        def helper(node: str) -> int:\n            if node.startswith('-'):\n                return -helper(node[1:])\n            return sum(helper(node[1:]) + ord(node[0]) - 96)\n\n        return helper(node)\n\n    def sum_of_left_and_right_with_graph(self, node: str) -> int:\n        graph: List[List[int]] = [[0, 0]]\n        for char in node:\n            graph.append([graph[-1][0] + ord(char) - 96, 1])\n            graph.append([graph[-1][0] - ord(char) + 96, 0])\n\n        def helper(node: int, is_left: bool) -> int:\n            if is_left:\n                return graph[node][0]\n            return graph[node][1]\n\n        return helper(node, True) + helper(node, False)\n\n    def get_leaves_preorder(self, node: str) -> List[str]:\n        def helper(node: str, root: str, is_left: bool) -> None:\n            if node == root:\n                if is_left:\n                    self.leaves.append(root)\n                else:\n                    self.leaves.append(root)\n                return\n\n            if not node.startswith(root):\n                self.leaves.append(node)\n                return\n\n            if node.startswith(root):\n                helper(node[1:], root, True)\n                helper(node[1:], root, False)\n                return\n\n        self.leaves = list()\n        helper(node, node, True)\n        helper(node, node, False)\n        return self.leaves\n\n    def dfs(self, node: str, level: int, graph: List[List[int]], graph_left: List[List[int]]) -> None:\n        if node == '*':\n            return\n\n        if node.startswith('-'):\n            self.dfs(node[1:], level, graph, graph_left)\n            self.dfs(node[1:], level, graph, graph_left)\n            return\n\n        if node.startswith('+'):\n            self.dfs(node[1:], level, graph, graph_left)\n            self.dfs(node[1:], level, graph, graph_left)\n            return\n\n        left = self.sum_of_left_and_right(node)\n        right = self.sum_of_left_and_right(node)\n        graph[level][0] += right\n        graph[level][1] += left\n        graph_left[level][0] += left\n        graph_left[level][1] += right\n\n        self.dfs(node[1:], level + 1, graph, graph_left)\n\n    def build_graph(self, node: str) -> List[List[int]]:\n        graph = [[0, 0]]\n        graph_left = [[0, 0]]\n\n        self.dfs(node, 0, graph, graph_left)\n        return graph\n\n    def construct_tree(self, root: str, graph: List[List[int]], graph_left: List[List[int]]) -> List[str]:\n        if root == '*':\n            return []\n\n        if root.startswith('-'):\n            return self.construct_tree(root[1:], graph, graph_left) + self.construct_tree(root[1:], graph, graph_left)\n\n        if root.startswith('+'):\n            return self.construct_tree(root[1:], graph, graph_left) + self.construct_tree(root[1:], graph, graph_left)\n\n        left = self.sum_of_left_and_right(root)\n        right = self.sum_of_left_and_right(root)\n        graph[0][0] += right\n        graph[0][1] += left\n        graph_left[0][0] += left\n        graph_left[0][1] += right\n\n        if root[1:]:\n            return self.construct_tree(root[1:], graph, graph_left) + [root] + self.construct_tree(root[1:], graph, graph_left)\n        else:\n            return [root]\n\n    def solve(self, root: str, graph: List[List[int]], graph_left: List[List[int]]) -> str:\n        leaves = self.get_leaves_preorder(root)\n        for leaf in leaves:\n            graph.append([0, 0])\n            graph_left.append([0, 0])\n\n        tree = self.construct_tree(root, graph, graph_left)\n        return''.join(tree)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self):\n        # testcase0\n        self.assertEqual(self.solution.solve('1+2-3+4+5'), '5 8 -9 10')\n        # testcase1\n        self.assertEqual(self.solution.solve('1+2-3*4+5'), '7 0')\n        # testcase2\n        self.assertEqual(self.solution.solve('1+2-3*4+5+6-7+8+9*0+1'), '10')\n        # testcase3\n        self.assertEqual(self.solution.solve('1+2-3+4+5-6+7+8-9-0-1+2+3+4+5+6+7+8+9+0+1+2+3+4+5+6+7+8+9+0+1'), '0')\n        # testcase4\n        self."
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '1 2 3'\nassert solution('3\\n') == '1 2 4 6 7'\nassert solution('4\\n') == '1 3 5 8 10 13'\nassert solution('5\\n') == '1 3 6 10 15 20 25'"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('101') == '101 1'\nassert solution('101 11') == '101 11 1'\nassert solution('10111 1011') == '10111 1011 1'"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1 2 3\"\nassert solution(\"3\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\nassert solution(\"4\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n\nassert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n\nassert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n\nassert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n\nassert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\""
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n\"\"\""
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1\\n1 2 3 4'\nprint(solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4'))\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1\\n1 2 3 4'\n'''"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n1 2\n1 3\n2 4\n3 4''') == '1'\nassert solution('''5 2\n1 4\n1 3\n2 5\n4 5''') == '1'\nassert solution('''5 3\n1 4\n1 3\n2 5\n4 5\n2 1''') == '1'\n\n'''\nThe train system in this country is very peculiar, and very limited. Train lines are all one-way, and once anyone takes a train out of a city, there is no sequence of train lines that return to that city. This is because the country is trying to make money off of the more costly planes. In this country, every city has exactly one airport, so you can travel by plane from any city to any other city.\n\nPer doesn\u2019t just want to know the minimum number of flights he needs. He also wants to know in which cities he can visit the airport during some trip with fewest flights. Per likes airport restaurants, you see, and would like to know which restaurants he can visit, so he can choose his route to visit his favorites. He can visit the airport if he flies in or out of the city. Note that Per can start in any city.\n\nConsider this country with four cities, with the arrows representing one-way train routes:\n\nThere are several possible trips Per could take, but he\u2019s going to need to fly at least once. Here are some (but not all) possible routes with fewest flights, with $\\rightarrow $ indicating a train trip and $\\Rightarrow $ indicating a flight:$1 \\rightarrow 2 \\rightarrow 4 \\Rightarrow 3$\n\n$2 \\rightarrow 4 \\Rightarrow 1 \\rightarrow 3$\n\n$1 \\rightarrow 3 \\Rightarrow 4 \\Rightarrow 2$\n\n\nIn this example, every airport is visited on at least one of the routes. Per has the option to choose his route so he can visit any airport restaurant he wishes.\n\n\n-----Input-----\nEach test case will begin with a line with two space-separated integers $n$ ($1\\! \\le \\! n\\! \\le \\! 10^5$) and $m$ ($0\\! \\le \\! m\\! \\le \\! 10^5$), where $n$ is the number of cities and $m$ is the number of train lines. The cities are numbered $1..n$.\n\nEach of the next $m$ lines contains two space separated integers $a$ and $b$ ($1\\! \\le \\! a,b\\! \\le \\! n, a\\! \\neq \\! b$), which indicates that there is a train line from city $a$ to city $b$ (but not back). All train lines will be distinct.\n\n-----Output-----\nProduce exactly two lines of output.\n\nOn the first line, output a single integer, which is the minimum number of flights Per must take to visit all of the cities.\n\nOn the second line, output a list of space-separated integers, which are the cities with airports he can visit. If he can visit an airport on any one of the routes with the minimum number of flights, it should be listed. Output these numbers in increasing order. If no airports are to be visited, output a blank line.\n\n-----Examples-----\nSample Input:\n4 4\n1 2\n1 3\n2 4\n3 4\nSample Output:\n1\n1 2 3 4\n'''\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n\") == \"1\\n1 2 3 4\"\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\narr = [0] + [set() for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    arr[a].add(b)\n    arr[b].add(a)\n\nvisited = [0] * (n + 1)"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n') == '1\\n1 2 3 4'\n\n---\nSample Input:\n5 3\n1 2\n2 3\n3 4\n4 5\n2 5\nSample Output:\n3\n1 2 3 4 5\n1 2 3 4 5\n\"\"\"\nimport sys\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n\") == '1\\n1 2 3 4'\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 1\nassert solution('1\\n') == 1\nassert solution('2\\n1 2') == 1\nassert solution('2\\n1 1') == 2\nassert solution('3\\n1 2\\n2 3') == 1\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1\n1 2''') == '1'\nassert solution('''3 4\n1 2\n2 3\n3 1''') == '2'\nassert solution('''3 4\n1 2\n2 3\n3 1\n1 3\n3 2''') == '1'\nassert solution('''4 5\n1 2\n2 3\n3 4\n4 1''') == '3'\nassert solution('''4 5\n1 2\n2 3\n3 4\n4 1\n1 3\n2 4\n3 2''') == '2'\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 2') == 1\nassert solution('3 2\\n1 2\\n2 3') == 2\nassert solution('3 2\\n1 2\\n3 2') == 1\nassert solution('6 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n4 5\\n5 6') == 3\nassert solution('7 7\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n4 5\\n5 6\\n6 7\\n2 7\\n4 7') == 3\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'2 1\\n1 2'\n) == '1'\n\"\"\""
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2 1\n1 2\n\"\"\"[1:]) == '1'\nassert solution(\n\"\"\"\n2 2\n1 2\n2 1\n\"\"\"[1:]) == '2'\nassert solution(\n\"\"\"\n2 1\n1 2\n2 1\n\"\"\"[1:]) == '0'\nassert solution(\n\"\"\"\n1 1\n\"\"\"[1:]) == '1'\nassert solution(\n\"\"\"\n3 1\n1 2\n2 3\n\"\"\"[1:]) == '0'\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"1 2\\n1 2\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\") == \"3\"\nassert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"3\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 2') == 1\n\"\"\""
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n') == '1'\nassert solution('2 1\\n1 2') == '1'\nassert solution('1 2\\n2 1') == '0'\nassert solution('2 2\\n1 2\\n1 1') == '0'\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '1120'\nassert solution('4') == '1369'\nassert solution('5') == '6793'\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"45\"\n\"\"\"\n\nn = int(input())\n\ntotal_lucky_number = (2 ** n) * n - n ** n\n\nprint(total_lucky_number)"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"45\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"45\"\nassert solution(\"3\") == \"18\"\nassert solution(\"10\") == \"156250\"\nassert solution(\"30\") == \"2409570\"\nassert solution(\"1000\") == \"127037545897\""
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '45'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"45\"\nassert solution(\"3\") == \"132\"\nassert solution(\"4\") == \"1795\"\nassert solution(\"5\") == \"3305\"\nassert solution(\"6\") == \"6458\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 45\nassert solution(3) == 270\nassert solution(4) == 945\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2) == \"45\"\nassert solution(3) == \"90\"\nassert solution(4) == \"100\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '45'\n\"\"\"\n\nimport math\n\nn = int(input())\n\nprint(math.floor(1000 * n * 0.01 - (10 ** (n - 1))))\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"45\"\nassert solution(\"3\") == \"100\"\nassert solution(\"4\") == \"100\"\n\"\"\""
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2') == 4\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2') == '4'\n\nassert solution('5 20 20\\n3 10 10 10') == '3'\n\nassert solution('5 20 20\\n1 1 1 1 1') == '0'\n\nassert solution('5 20 20\\n7 11 9 12 2\\n1 1 1 1 1') == '0'\n\nprint('All tests passed.')"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == 4\n\"\"\"\n\n\"\"\"\nTheory:\n\nInput:\n\nn: int\n\ns_1: int\n\ns_2: int\n\nn: int\n\nt_1: int\n\nt_2: int\n\nn: int\n\nt: int\n\nOutput:\n\nstr\n\nComplexity:\n\nTime:\n\nSpace:\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2') == 4\nassert solution('5 20 20\\n7 19 9 12 2') == 3\nassert solution('5 20 20\\n7 20 9 12 2') == 2\nassert solution('5 20 20\\n7 21 9 12 2') == 2\nassert solution('5 20 20\\n7 21 9 12 20') == 2\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\n'''\n\nimport sys\n\nn, s_1, s_2 = map(int, sys.stdin.readline().split())\nt = list(map(int, sys.stdin.readline().split()))\n\nt.sort()\n\nans = 0\ncur = 0\n\nfor i in range(n):\n    cur += t[i]\n    if cur <= s_1:\n        ans += 1\n    else:\n        cur -= t[i]\n\nprint(ans)"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 100 10\\n11 9 12 2') == '3'\nassert solution('2 100 100\\n1 1') == '0'"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('10 5 2') == '4'\n\n---Problem---\nThe manager of a supermarket is planning to offer discounts to some customers. He would like to offer discount to the customer if and only if the customer has spent more than $100 on a particular item.\n\nGiven the list of items for sale and their prices that are input in the form of a string, find out how much each customer must spend to qualify for discount and print their order numbers. If no discount is offered print \"No discount\".\n\n---Sample Input---\n\n3\n\nItem Name    Item Price\nApple    $100\nOrange    $200\nApple    $200\n\n---Sample Output---\n\nNo discount\n1\n2\n\n----Solution---\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2') == 4\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\n\n-----Solution-----\nThe most naive solution would be to just try all possible combinations of the two counters for each customer. \nThis solution takes O(2^n) time and O(2^n) space.\n\nInstead, we can do better. We can use dynamic programming to solve the problem. \nAt every index $i$ in the array $t$, we store the maximum number of customers that can be served today \n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 20 20\\n7 11 9 12 2\") == \"4\"\n\n\"\"\"\n\nimport math\nimport sys\nimport os\nimport time\nfrom collections import deque"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n\") == \"2\"\n-----Explanation-----\nThe students named harrypotter and lordoftherings have read a total of 2 books each, so the number of presentations is $2$.\n\nIn total, there are 2 boys and 2 girls. When the boy named kenny presents his first book, he will read 1 book, so he will be able to present 1 book in total. In the next presentation, the girl named laura will present her first book, so she will be able to present 1 book in total. Therefore, the minimum number of presentations is 2.\n\"\"\"\n\nfrom collections import Counter\n\nassert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n\") == \"2\"\nassert solution(\"1 1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n\") == \"1\"\nassert solution(\"2 1\\nkenny 1 lordoftherings\\ncharlie 1 harrypotter1\\njenny 1 lordoftherings\\nlaura 1 harrypotter1\\n\") == \"1\"\nassert solution(\"1 1\\nkenny 1 lordoftherings\\ncharlie 1 harrypotter1\\njenny 1 lordoftherings\\n\") == \"0\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == \"2\"\n\"\"\""
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\n\"\"\"\n\n\nimport sys\nimport os"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == 2\n\nprint(solution(stdin=input()))\n\n------\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\n-----Constraints-----\n$1 \\le B, G \\le 1000$\n$1 \\le N_i, N_j \\le 10^5$\n$1 \\le |S_i|, |S_j| \\le 20$\n$1 \\le |B| \\le 1000$\n$1 \\le |G| \\le 1000$\n$No two students share the same name$\n\n\"\"\""
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == result\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n\") == \"2\"\n\n---\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == output\n\n----"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == \"1 2\"\nassert solution(\"110011\") == \"2 1\"\nassert solution(\"100110111\") == \"1 3\"\nassert solution(\"101110011010\") == \"4 7\"\nassert solution(\"10110110111010\") == \"4 6\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"010\") == \"0 1\"\nassert solution(\"101\") == \"0 1\"\nassert solution(\"11110\") == \"1 2\"\nassert solution(\"11111\") == \"0 1\"\nassert solution(\"111110000\") == \"2 2\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '1 1'\n\"\"\""
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11100011111') == '4 3'\nassert solution('11100011110') == '0 3'\nassert solution('111111') == '0 0'\nassert solution('1101110111') == '0 3'\nassert solution('111011110111') == '0 5'\n\nprint(solution(stdin))\n\n[+]Temporal marker           : Thu, Sept 19, at 12:12 | Sept 19, at 14:17\n[+]Temporal marker untethered: Thu, Sept 19, at 12:13 | Sept 19, at 14:17\n[+]Comments                  : Knew the solution\n[+]Level                     : Easy\n[+]LINK                      : https://www.interviewbit.com/tutorials/codefights/bit/3/\n[+]SOURCE                     : Interviewbit\n[+]TEMPLATE  : https://github.com/kode-wifi/Interview-Preparation/blob/master/Code-QA/Code-QA-Templates/Python/Coding-Interview-Questions/Coding-Interview-Questions.txt\n'''"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101010\") == \"5 2\"\n\"\"\"\n\nk = int(stdin.readline().strip())\ns = stdin.readline().strip()\n\nmax_count = 0\nmax_index = 0\nfor i in range(len(s) - k + 1):\n    count = 0\n    for j in range(k):\n        if s[i+j] == \"1\":\n            count += 1\n    if count > max_count:\n        max_count = count\n        max_index = i + 1\n\nprint(max_index, max_count)\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"010\") == (0, 1)\nassert solution(\"10010010011\") == (3, 5)\nassert solution(\"110111101\") == (1, 4)\nassert solution(\"01110010011\") == (1, 4)\nassert solution(\"111011110111101\") == (7, 12)\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 1') == '1 1'\n\"\"\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"01\") == \"1 1\"\nassert solution(\"11010\") == \"1 3\"\nassert solution(\"01101101010\") == \"1 10\"\nassert solution
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == (1, 1)\nassert solution(\"11110\") == (2, 2)\nassert solution(\"10111010\") == (1, 3)\nassert solution(\"1110111010\") == (2, 4)\nassert solution(\"111111111110111010\") == (5, 11)\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01\") == \"2 1\"\nassert solution(\"101\") == \"4 2\"\nassert solution(\"1110\") == \"4 4\"\nassert solution(\"1110111101010\") == \"10 8\"\nassert solution(\"010111\") == \"1 7\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n2123\\n1012\\n2123\\n\"\nassert solution(\"3\\n2 3\\n12\\n21\\n21\\n21\\n\") == \"2 3\\n12\\n12\\n12\\n\"\nassert solution(\"3\\n4 1\\n21\\n12\\n\") == \"4 3\\n21\\n21\\n21\\n\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n4 1\n2123\n2 2\n21\n10\"\"\") == \"\"\"4 3\n2123\n1012\n2123\"\"\"\n\nassert solution(\"\"\"4\n2\n23\n12\n22\n\"\"\") == \"\"\"4 3\n2233\n2233\n1111\"\"\"\n\nassert solution(\"\"\"8\n3 2\n2233\n22\n1112\n2233\n22\n1111\n2222\n2233\n\"\"\") == \"\"\"8 3\n2233\n2233\n2233\n2233\n1111\n2222\n1111\"\"\"\n\nassert solution(\"\"\"8\n2\n12\n12\n12\n12\n12\n12\n12\n12\n\"\"\") == \"\"\"8 4\n1212\n1212\n1212\n1212\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n2233\\n1111\\n2233\\n\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n2123\\n1012\\n2123\\n\"\nassert solution(\"4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n2123\\n1012\\n2123\\n\"\n\"\"\""
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '12'\nassert solution('1 2\\n3 4') == '12\\n34'\nassert solution('1\\n2') == '1\\n2'\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n2123\\n1012\\n2123\\n2233\\n1111\"\nassert solution(\"3\\n1 1\\n212\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n212\\n1012\\n212\\n2233\\n1111\"\nassert solution(\"1\\n1 1\\n11\\n1 1\\n\") == \"4 1\\n11\\n11\\n11\"\n\n----\n3\n4 1\n1222\n2 2\n21\n10\n2 2\n22\n12\n2\n----\n4 3\n1222\n1012\n1222\n2233\n1111\n11111\n1222\n----\n4 2\n11\n11\n11\n11\n11\n----\n4 1\n11\n11\n11\n11\n----\n3\n3 1\n21\n21\n21\n----\n4 3\n1122\n1012\n1222\n2233\n1111\n----\n4 1\n11\n11\n11\n11\n----\n3\n1 1\n11\n1 1\n----\n2\n1 1\n11\n1 1\n\"\"\""
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\n\"\"\") == \"4 3\"\n\n\"\"\"\nfrom copy import deepcopy"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\") == \"4 3\\n2123\\n1012\\n2123\\n\"\nassert solution(\"2\\n2 3\\n123\\n21\\n4 2\") == \"3 2\\n2112\\n2112\\n4 12\\n1232\\n\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n2123\\n1012\\n2123\\n\"\nassert solution(\"2\\n5 5\\n12345\\n5 5\\n\") == \"10 10\\n123445\\n\"\n\"\"\"\n\nimport sys\nfrom itertools import chain\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12') == '4 3\\n2123\\n1012\\n2123\\n2233\\n1111'\nassert solution('2\\n2\\n12\\n2\\n') == '2 2\\n12\\n12\\n22\\n22'\nassert solution('2\\n1\\n12\\n2\\n') == '2 2\\n12\\n12\\n21\\n21'\nassert solution('1\\n1\\n12\\n2\\n') == '2 2\\n12\\n12\\n21\\n21'\nassert solution('1\\n1\\n12\\n1\\n') == '2 2\\n12\\n12\\n12\\n22\\n22'\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n-----Problem-----\nWe want to install a given list of software packages that may have dependencies. We assume that there is a working computer that can install the package (i.e. it can install the package dependencies) and we do not have to install anything before installing the given package (i.e. we cannot install packages that have dependencies before the given packages).\n\nFor each test case, output the sequence of package installation that will install the given list of software packages, if it is possible. If there is no possible installation, output \u2018cannot be installed\u2019.\n\n-----Tests-----\nSample Test 1\n\nInput:\n4\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\n\nOutput:\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nvim-X11\n\nTest 1\nOK\n\nSAMPLE_INPUT = input()\nassert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\nSAMPLE_INPUT = input()\nexpected = 'cannot be installed'\nassert solution(SAMPLE_INPUT) == expected"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\nlibtiff\\npango\\nzlib\\nemacs\\nvim-X11\\nlisp'\n\"\"\"\n\nclass Solution:\n    def can_be_ordered(self, dependencies: str) -> bool:\n        dependencies = dependencies.split()\n        # print(dependencies)\n        dependencies_map = {}\n        for dependency in dependencies:\n            key = dependency[0]\n            if key not in dependencies_map:\n                dependencies_map[key] = []\n            dependencies_map[key].append(dependency[2:])\n\n        # print(dependencies_map)\n\n        queue = []\n        for key in dependencies_map:\n            if not self.is_satisfy_dependencies(key, dependencies_map):\n                queue.append(key)\n\n        while len(queue) > 0:\n            key = queue[0]\n            queue.remove(key)\n            for dependency in dependencies_map[key]:\n                if dependency not in dependencies_map:\n                    queue.append(dependency)\n                dependencies_map[dependency].remove(key)\n                if len(dependencies_map[dependency]) == 0:\n                    queue.append(dependency)\n\n        for key in dependencies_map:\n            if len(dependencies_map[key]) > 0:\n                return False\n\n        return True\n\n    def is_satisfy_dependencies(self, key: str, dependencies_map: dict) -> bool:\n        for dependency in dependencies_map[key]:\n            if dependency not in dependencies_map:\n                return False\n        return True\n\n    def order(self, dependencies: str) -> str:\n        dependencies = dependencies.split()\n        dependencies_map = {}\n        for dependency in dependencies:\n            key = dependency[0]\n            if key not in dependencies_map:\n                dependencies_map[key] = []\n            dependencies_map[key].append(dependency[2:])\n\n        # print(dependencies_map)\n\n        queue = []\n        for key in dependencies_map:\n            if not self.is_satisfy_dependencies(key, dependencies_map):\n                queue.append(key)\n\n        while len(queue) > 0:\n            key = queue[0]\n            queue.remove(key)\n            for dependency in dependencies_map[key]:\n                dependencies_map[dependency].remove(key)\n                if len(dependencies_map[dependency]) == 0:\n                    queue.append(dependency)\n\n        result = ''\n        for key in dependencies_map:\n            result += key +''\n        return result[:-1] if len(result) > 0 else 'cannot be ordered'\n\nassert Solution().order('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\nlibtiff\\npango\\nzlib\\nemacs\\nvim-X11\\nlisp'\nassert Solution().order('13\\ngrep\\nvim-common\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nzlib\\nlibjpeg\\nxorg-x11-libs vim-common\\nxorg-x11-libs libattr\\nzlib\\nlibattr\\nlibtiff\\nvim-X11\\nxorg-x11-libs freetype\\nlibtiff\\nxorg-x11-libs libjpeg\\nxorg-x11-libs glib2\\nxorg-x11-libs emacs\\nzlib\\nfreetype\\nlibjpeg\\nxorg-x11-libs pango\\nlibattr\\nxorg-x11-libs glib2\\nzlib\\nxorg-x11-libs gtk2\\nvim-X11\\nxorg-x11-libs atk\\nxorg-x11-libs freetype\\nxorg-x11-libs pango\\nzlib\\nxorg-x11-libs gtk2\\nxorg-x11-libs gtk2\\nxorg-x11-libs gtk2\\nx"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == output\n\"\"\"\nimport collections\nimport heapq\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        packages = {package.split()[0]: package.split()[1:] for package in stdin.split('\\n')}\n        indegrees = collections.defaultdict(list)\n        graph = collections.defaultdict(list)\n        for package in packages:\n            for dependency in packages[package]:\n                graph[dependency].append(package)\n                indegrees[package] += 1\n\n        heap = [key for key in indegrees if indegrees[key] == 0]\n        heapq.heapify(heap)\n        while heap:\n            package = heapq.heappop(heap)\n            for dependency in graph[package]:\n                indegrees[dependency] -= 1\n                if indegrees[dependency] == 0:\n                    heapq.heappush(heap, dependency)\n\n        return '\\n'.join(packages.keys()) if indegrees else 'cannot be ordered'\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\") == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nzlib\\nlibtiff\\nxorg-x11-libs\\npango\\nxorg-x11\\nemacs\\ngtk2\\nvim-X11\"\n\n\n----\n'''"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\") == \"\"\"\\\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\n\"\"\"\n\n\n\nSample Input:\n16\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\nSample Output:\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\n\ncannot be ordered\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == '''\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\n'''\n\nassert solution('''\n4\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2\n0\n3\nlibtiff\natk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n''') == '''\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\n'''\n\nassert solution('''\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2\n0\n3\nlibtiff\natk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n''') == '''\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3''') == '''atk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11'''\n    assert solution('''4\nfreetype\npango\nlibattr\nlibjpeg\n0''') == '''cannot be ordered'''\n    assert solution('''13\nlibattr\nxorg-x11-libs\ngrep pcre\npcre\nlibjpeg\nfreetype\nlibtiff\natk\nlibtiff\ngtk2\ngrep\nvim-common\nxorg-x11-libs\npango\nvim-X11\n0''') == '''cannot be ordered\npcre\natk\nlibtiff\nlibattr\ngrep\nxorg-x11-libs\nlibjpeg\nfreetype\ngrep\nvim-common\nxorg-x11-libs\npango\nvim-X11'''\n    assert solution('''4\nfreetype\npango\nlibattr\nlibjpeg\n0''') == '''cannot be ordered'''\n    assert solution('''6\nlibattr\nlibjpeg\nlibtiff\natk\nfreetype\ngrep\nvim-common\n0''') == '''cannot be ordered\natk\nfreetype\ngrep\nvim-common\nlibattr\nlibjpeg\nlibtiff'''\n    "
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\") == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\nzlib\\nvim-common\\nxorg-x11-libs\\nxorg-x11\\ngrep pcre\\npcre\\nglib2\\nlibtiff\\nlibjpeg\\nemacs\\natk\\nfreetype\\ngrep\\nvim-X11\"\n\n\"\"\"\n\nimport ast\nimport collections\nimport pprint\nimport sys\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\") == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\nlibtiff\\ngtk2\\nvim-X11\\nxorg-x11-libs\\nlisp\\nemacs\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\\n') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\nlibtiff\\ngtk2\\nemacs\\nvim-X11\\n'\n\"\"\"\n\n\n\"\"\"\n1. \uc21c\uc11c\ub300\ub85c \uc55e\uc5d0\uc11c \ubd80\ud130 \uc120\ud0dd\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4.\n2. \uc120\ud0dd\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 \ub9ac\uc2a4\ud2b8\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c \ube44\uad50\ud55c\ub2e4.\n3. \ube44\uad50\uac00 \ub05d\ub098\uba74 \uc120\ud0dd\ud560 \uc218 \uc788\ub294 \ub9ac\uc2a4\ud2b8\uc758 \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \uc120\ud0dd\ud55c\ub2e4.\n4. \uc120\ud0dd\ud560 \uc218 \uc788\ub294 \ub9ac\uc2a4\ud2b8\uc758 \uc6d0\uc18c\uac00 \uc120\ud0dd\ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\ud55c\ub2e4.\n5. \uc55e\uc5d0\uc11c \ubd80\ud130 \ube44\uad50\ud560 \ub54c \uc120\ud0dd\ub41c \uac12\uc744 \uc9c0\uc6cc\uc900\ub2e4.\n6. \uc120\ud0dd\ud560 \uc218 \uc788\ub294 \ub9ac\uc2a4\ud2b8\uc758 \ubaa8\ub4e0 \uc6d0\uc18c\ub4e4\uc744 \uc120\ud0dd\ud558\uba74 \uc885\ub8cc\ud55c\ub2e4.\n\"\"\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32 20\") == \"16\"\nprint(solution(\"32 20\"))\n"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('32 20') == '16'\nassert solution('4 4') == '10'\nassert solution('4 16') == '10'\n\"\"\"\n\ny, e = map(int, stdin.split())"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('32 20') == '16'\n\"\"\"\nimport os\nimport sys\nfrom math import log10"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32 20') == '16'\nassert solution('23 10') == '8'\nassert solution('10 15') == '2'\nassert solution('30 10') == '10'\nassert solution('10 10') == '10'\n\"\"\""
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('32 20') == '16'\nassert solution('18 15') == '8'\nassert solution('18 14') == '10'\nassert solution('18 13') == '10'\nassert solution('18 12') == '10'\n"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32 20') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(32, 20) == 16\n\"\"\"\n\nimport math\n\ny, l = input().split()\ny, l = int(y), int(l)\n\nm = math.ceil(math.log10(y))\nb = 10 ** m\nprint(b)"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32 20') == '16'"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('32 20') == '16'\n\"\"\""
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n32 20\n''') == 16\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 4\n..#..\n.#.#.\n...#.\n\"\"\"\n) == \"5 13\"\nprint('Test pass.')\n\n---\nSample Output:\n4 4\n\"\"\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n....\\n.#.#\\n....') == '5 13'\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\\n....\") == \"5 13\"\nassert solution(\"1 1\\n#\") == \"0 1\"\nassert solution(\"2 2\\n.#\\n.#\") == \"0 1\"\nassert solution(\"5 1\\n...#\\n#...\") == \"1 0\"\nassert solution(\"7 7\\n.##.##..\\n#...#...\\n..#....#\\n.#...#.#\\n.#....##\\n.#...#.#\\n.##...##\") == \"8 70\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\\n....\") == \"5 13\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n....\\n.#.#\\n....') == '5 13'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n...\\n....\\n.##.\\n....\") == \"5 13\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\\n....\") == \"5 13\"\nassert solution(\"3 4\\n....\\n#.#\\n....\") == \"4 10\"\nassert solution(\"1 1\\n#\\n\") == \"1 0\"\nassert solution(\"3 4\\n#.#\\n...\\n....\") == \"3 5\"\n\"\"\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\\n....\") == \"5 13\"\nassert solution(\"1 1\\n.#\\n\") == \"0 0\"\nassert solution(\"3 3\\n#.#\\n###\\n\") == \"1 2\"\nassert solution(\"3 4\\n..#\\n#..\\n..#\\n\") == \"3 4\"\nassert solution(\"3 4\\n#..\\n##.\\n#..\\n\") == \"0 0\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\\n....\") == \"5 13\"\nprint(solution(stdin.strip()))\n\n\"\"\""
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n....\\n.#.#\\n....') == (5, 13)\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 5 1\\n2 3 3 1\") == '5'\n\"\"\"\n\nN, M = [int(x) for x in input().split()]\nl = [int(x) if x!= '?' else -1 for x in input().split()]"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\nassert solution('1 2?\\n2 3 3 1\\n3 1? 0') == '1'\nassert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\nassert solution('2 2\\n1 1? 1\\n0 1??') == '1'\nassert solution('4 3\\n2 3 3 1\\n2 2 2 1\\n3 1? 0\\n1 1??') == '3'\nassert solution('4 3\\n2 3 3 1\\n2 2 2 1\\n3 1? 0\\n1 1??') == '3'"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\") == \"5\"\n\n----\n\n2 3\n1 2 5 1\n2 3 3 1\n3 1? 0\nassert solution(\"2 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\") == \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3? 0\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom math import ceil\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\") == \"5\"\n\n\"\"\"\nimport sys\nimport math\n\nsys.stdin = open('./input.txt')\n\nN, M = map(int, input().split())\n\ntunnels = []\nfor i in range(M):\n    tunnel = [int(s) for s in input().split()]\n    tunnels.append(tunnel)"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2 5 1\\n2 3 3 1\\n3 1?\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5 1\") == \"5\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"1 1 3 1\") == \"3\"\nassert solution(\"1 2? 0\") == \"2\"\nassert solution(\"1 1? 0\") == \"2\"\n\"\"\"\n\nimport sys\nimport collections\n\nclass Node:\n    def __init__(self, v):\n        self.v = v\n        self.next = None\n        self.prev = None\n\nclass Stack:\n    def __init__(self):\n        self.first = None\n        self.last = None\n\n    def push(self, v):\n        node = Node(v)\n        if self.first == None:\n            self.first = node\n            self.last = self.first\n        else:\n            self.last.next = node\n            node.prev = self.last\n            self.last = node\n\n    def pop(self):\n        if self.first == None:\n            return None\n        if self.first == self.last:\n            node = self.first\n            self.first = None\n            self.last = None\n            return node\n        node = self.first\n        self.first = node.next\n        node.next = None\n        self.last.next = None\n        return node\n\n    def is_empty(self):\n        return self.first == None\n\n    def __str__(self):\n        if self.is_empty():\n            return \"Empty\"\n        res = \"[\"\n        node = self.first\n        while node!= None:\n            res += str(node.v)\n            if node.next!= None:\n                res += \", \"\n            node = node.next\n        res += \"]\"\n        return res"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n6 6\n1 2 1\n1 3 2\n1 4 1\n1 5?\n1 6 1\n2 3 1\n2 4?\n2 5 1\n3 4?\n3 5 1\n4 5 1\n4 6 1\n''') == '4'\nprint('OK')\n\nSample Input:\n6 6\n1 2 1\n1 3 2\n1 4?\n1 5 2\n1 6 1\n2 3 1\n2 4?\n2 5 2\n3 4?\n3 5 1\n4 5 1\n4 6 1\nSample Output:\n2\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3\n-1 0\n-1 1\n0 1''') == '0'\n\n'''\nYou own and manage an office building. One of the tenants, a regional paper supply company, is complaining about the lack of security offered by the CrapTacular$^{\\text {TM}}$ doors you installed in the building. A potential attacker could easily pick the locks on these doors to gain access to any room of the building. This is frankly unacceptable as there are reams upon reams of priceless paper stored inside the office.\n\nTo appease your tenant, you offer to replace one existing door with a new high-security door that will stop any attacker. To get the most benefit from the new door, it should protect the maximum possible number of rooms in the building. That is, you need to find which existing door to replace with a secure door that will allow the maximum number of rooms to only be reached from outside the building. That is, you need to find which existing door to replace with a secure door that will allow the maximum number of rooms to only be reached from outside the building.\n\nThe building contains $0<N<100000$ rooms which are connected by $0<M<100000$ doors. Rooms are uniquely named by the integers in the range $[0,N)$. To figure out where to install the secure door, you have a floor plan of the building. The floor plan somehow represents all of the floors in one (possibly non-planar) graph. The only way to pass from one room to another, or the outside, is by using a door. All rooms can be reached, directly or via other rooms, from all other rooms and from the outside of the building.\n\n-----Input-----\nInput contains several lines of integers separated by spaces. The first line contains the number $N$, then $M$. The following $M$ lines describe each door with two numbers $-1 \\le u < N$ and $-1 \\le v < N$, $u \\ne v$. The numbers $u$ and $v$ represent the rooms connected by the door. A door connects to the outside if $u$ or $v$ is $-1$. No door has $u = v$.\n\n-----Output-----\nThe maximum number of rooms that can be protected with a single high-security door.\n\n-----Sample Explanation-----\nThe image below illustrates the building described in Sample Input 2:\n\n\n\n\n\nHere, double-headed arrows indicate doors. For example, the arrow between room $0$ and $1$ shows that there is a door there. The other arrow connecting room $0$ leads to the outside of the building. We could totally secure room $5$ by replacing the door between room $1$ and $5$, but this is not the optimal solution. The best solution for this input is to replace the door between room $1$ and $2$, since room $2$, $3$, and $4$ can only be reached from the outside of the building by passing through that door. The answer is thus $3$ because at most $3$ rooms can be secured.\n\n-----Examples-----\nSample Input:\n2 3\n-1 0\n-1 1\n0 1\nSample Output:\n0\n'''"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1\\n0 2') == 0\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\nassert solution(\"4 4\\n-1 0\\n-1 1\\n0 1\\n2 3\") == \"0\"\nassert solution(\"4 4\\n-1 0\\n-1 1\\n0 1\\n2 2\") == \"1\"\nassert solution(\"4 4\\n-1 0\\n-1 1\\n0 1\\n2 3\") == \"3\"\nassert solution(\"4 4\\n-1 0\\n-1 1\\n0 1\\n2 3\\n2 3\") == \"2\"\n\nprint('Tests passed!')\n\"\"\"\nimport itertools"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n-1 0\\n-1 1\\n0 1') == '0'\n\"\"\"\nimport re\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3\n-1 0\n-1 1\n0 1\n0 2\n0 3\n1 0\n1 2\n1 3\n2 1\n3 1\n-1 -1''') == \"0\"\n\nassert solution('''3 4\n-1 0\n-1 1\n0 1\n0 2\n0 3\n1 0\n1 2\n1 3\n2 0\n2 3\n-1 -1\n3 0\n3 1\n3 2''') == \"2\"\n\nassert solution('''1 3\n-1 0\n-1 1\n0 1\n-1 -1''') == \"0\"\n\nassert solution('''1 2\n-1 0\n-1 1\n0 1\n-1 -1''') == \"0\"\n\nassert solution('''3 3\n0 1\n-1 0\n-1 1\n1 1\n-1 -1\n-1 -1\n1 1\n0 1\n0 1\n0 1''') == \"0\""
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0') == '0'\nassert solution('0 1') == '0'\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\n\n\"\"\"\nimport sys\nsys.stdin = open('input_2.txt')\n\nN, M = map(int, input().split())"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\n\"\"\"\n\nimport unittest\nfrom math import inf\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3\n-1 0\n-1 1\n0 1\n''') == '0'\nassert solution('''3 2\n0 1\n0 -1\n-1 1\n''') == '1'\nassert solution('''2 3\n-1 0\n-1 1\n0 1\n-1 -1\n''') == '2'"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(r\"D:\\Code\\GitHub\\Hackerrank\\Python-Challenges\\PyPy\\inputs\\test_2.txt\", 'r').read()) == '3'"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\n"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n9 6 2 4''') == '6'\nassert solution('''4\n9 6 2 4''') == '6'"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\nassert solution('5\\n1 1 2 2 3') == '3'\nassert solution('6\\n1 1 1 1 1 1') == '1'\nassert solution('7\\n1 2 3 4 5 6 7') == '7'\nassert solution('8\\n1 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n9 6 2 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"3\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n9 6 2 4') == 6\n\"\"\""
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n9 6 2 4\") == \"6\"\n\"\"\"\n\nfrom dataclasses import dataclass\nimport sys\n\nsys.setrecursionlimit(10**7)\n\n@dataclass\nclass Sequence():\n    start: int\n    end: int"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n9 6 2 4\") == \"6\"\n\n-----Constraints-----\n1 <= n <= 5 * 10^5\n1 <= a_ i <= 10^18\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(5 * 10 ** 5)\n"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\nassert solution('2\\n3 4') == '1'\nassert solution('1\\n2') == '0'\nassert solution('1\\n2 2 2 2 2 2') == '1'\nassert solution('1\\n1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3 2\") == 2.0\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3 2\\n2 5 1\") == 2\n\"\"\"\n\nimport sys\n\nnums = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3 2\\n2 5 1') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3 2\\n2 5 1') == '2.000000'\nassert solution('2 1 1 3 2\\n2 0 1') == '1.200000'\n\"\"\""
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 3 2\\n2 5 1\") == \"2.0\"\n\n---Problem---\nA town has been hit by a meteor shower. The meteor shower is an unknown source of danger. If we can survive as long as we can, we can save the town. If we die, we will be able to find our family.\n\nYou have to help us survive as long as possible. Your task is to calculate the minimum amount of time you need to survive.\n\nThe meteor shower moves in straight lines with the speed $S$ meters per second. The meteor shower is represented by a line that is $S$ meters long. You have $s$ seconds to survive.\n\nThe town is represented by a rectangle with the left-bottom corner at point $(0, 0)$ and the right-top corner at point $(x, y)$. The size of the rectangle is $(x, y)$ meters. You can determine the distance from the left-bottom corner to the right-top corner by $x+y$.\n\nYou have to survive as long as possible, so you don't want to walk through the town. If you walk through the town, you will take one damage per second. If you walk through the town and it was the meteor shower, you will take $S$ damage.\n\n---Solution---\nA player can walk through the town only if the player is able to escape the town by either leaving it or by escaping it.\n\nIf the player can escape from the town, then the minimum amount of time he needs to survive is the time he needs to travel the distance $x+y$ meters.\n\nIf the player cannot escape from the town, then the minimum amount of time he needs to survive is the time he needs to travel the distance $x+y$ meters and the time he needs to walk through the town.\n\nIf the player can escape from the town, then the minimum amount of time he needs to survive is the time he needs to travel the distance $x+y$ meters.\n\nIf the player cannot escape from the town, then the minimum amount of time he needs to survive is the time he needs to travel the distance $x+y$ meters and the time he needs to walk through the town.\n\nThe minimum amount of time the player needs to survive is the minimum of the two times.\n\nIf the player has enough time to escape from the town, then the player can travel the distance $x+y$ meters. So the time needed to survive is equal to the time he needs to travel the distance $x+y$ meters.\n\nIf the player does not have enough time to escape from the town, then the player needs to walk through the town. So the time needed to survive is equal to the time he needs to travel the distance $x+y$ meters and the time he needs to walk through the town.\n\nIf the player can escape from the town, then the time needed to survive is equal to the time he needs to travel the distance $x+y$ meters.\n\nIf the player cannot escape from the town, then the time needed to survive is equal to the time he needs to travel the distance $x+y$ meters and the time he needs to walk through the town.\n\nWe can use dynamic programming to solve this problem.\n\nWe can use a table to store all the results for all the possible values of $x$ and $y$.\n\nThe table is a matrix $n \\times m$, where $n$ is the number of possible values of $x$ and $m$ is the number of possible values of $y$.\n\nIn the table, the entry $(i, j)$ will represent the minimum amount of time needed to survive with $x=i$ and $y=j$.\n\nFor each entry $(i, j)$ we have two possible cases.\n\nIf the player can escape from the town, then we can calculate the value of $(i, j)$ using the formula shown above.\n\nIf the player cannot escape from the town, then we have to calculate the value of $(i, j)$ by adding $s$ to the time needed to escape from the town.\n\nWe can use an additional matrix to store the result of the table entry $(i, j)$ for all possible values of $x=i+1$.\n\nFor each entry $(i, j)$ in the matrix, the value is equal to the minimum of the two cases above.\n\nWe can start from the last row of the matrix and work our way to the first row.\n\nLet us assume that the table is initialized with all values set to $n + m$, where $n$ is the number of possible values of $x$ and $m$ is the number of possible values of $y$.\n\nNow, for each entry $(i, j)$ in the matrix, the value is equal to the minimum of the two cases above.\n\nThe value of the matrix entry $(i, j)$ will be equal to the minimum of the following two cases.\n\nIf the player can escape from the town, then the value of the matrix entry $(i, j)$ will be equal to the minimum of the value of the matrix entry $(i-1, j)$, the value of the table entry $(i-1, j)$, and the value of the table entry $(i, j-1)$.\n\nIf the player cannot escape from the town, then the value of the matrix entry $(i, j)$ will be equal to the minimum of the value of the matrix entry $(i-1, j)$, the value of the table entry $(i-1, j)$, and the value of the table entry $(i, j-1)$.\n\nWe can iterate the table row-by-row and column-by-column in a bottom-up fashion.\n\n---Implementation---\nSince the table is square, we can use only one matrix to store the result.\n\nWe can initialize the matrix with all values set to $n + m$, where $n$ is the number of possible values of $x$ and $m$ is the number of possible values of $y$.\n\nThe entries in the matrix will hold the minimum amount of time needed to survive with $x=i$ and $y=j$.\n\nFor each entry $(i, j)$ in the matrix, the value will be equal to the minimum of the following two cases.\n\nIf the player can escape from the town, then the value of the matrix entry $(i, j)$ will be equal to the minimum of the value of the matrix entry $(i-1, j)$, the value of the table entry $(i-1, j)$, and the value of the table entry $(i, j-1)$.\n\nIf the player cannot escape from the town, then the value of the matrix entry $(i, j)$ will be equal to the minimum of the value of the matrix entry $(i-1, j)$, the value of the table entry $(i-1, j)$, and the value of the table entry $(i, j-1)$.\n\nWe can start from the last row of the matrix and work our way to the first row.\n\nAt each step, we check whether"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3 2\\n2 5 1\") == \"2.0\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 3 2\\n2 5 1') == 2.0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3 2\\n2 5 1\") == '2.000000'\n\"\"\"\n\nx_s, y_s, s_s, r_i, r_f = map(int, input().split())\nx_a, y_a, s_a = map(int, input().split())\n\nimport math\n\nx_t = (s_a * x_a + s_s * y_s) / (s_a + s_s)\ny_t = (s_a * y_a + s_s * x_s) / (s_a + s_s)\n\nd = 0\n\nwhile True:\n    if math.sqrt((x_t - x_s) ** 2 + (y_t - y_s) ** 2) < r_i:\n        break\n    d += 1\n    r_i += 1\n\nwhile True:\n    if math.sqrt((x_t - x_s) ** 2 + (y_t - y_s) ** 2) < r_f:\n        break\n    d += 1\n\nprint('%.6f' % d)\n\n\"\"\"\n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c: O(\u221e)\n\u0427\u0438\u0441\u043b\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430\n\u0427\u0438\u0441\u043b\u043e \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439\n\u0421\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438\n\u041f\u0440\u0435\u0434\u0443\u0441\u043b\u043e\u0432\u0438\u044f:\n1 <= x_s, y_s, s_s, r_i, r_f <= 10^9\n1 <= x_a, y_a, s_a <= 10^9\n\"\"\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 1 1 3 2\"\n) == \"2.000000\"\n\nassert solution(\n    \"2 1 1 3 2\"\n) == \"2.000000\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\nprint(\"All tests passed.\")\n\n-----Explanation-----\nIn the first case, the new network has 3 computers with the following edges:\n\n1 to 2\n1 to 3\n1 to 4\n2 to 3\n3 to 4\n4 to 1\n4 to 2\nThe minimum transmission cost is 96.\n\nIn the second case, the new network has 4 computers with the following edges:\n\n1 to 2\n1 to 3\n1 to 4\n1 to 1\n2 to 3\n2 to 4\n3 to 1\n3 to 2\n3 to 4\n3 to 1\n4 to 1\n4 to 2\nThe minimum transmission cost is 96.\n\n-----Challenge-----\nTime complexity: $\\mathcal{O}(N \\cdot M)$\n\nN = number of nodes in A\nM = number of nodes in B\n\"\"\"\n\nfrom functools import lru_cache\nfrom math import inf\nfrom typing import List\n\nclass Solution:\n    def __init__(self) -> None:\n        self.N = None\n        self.edgesA = None\n        self.edgesB = None\n        self.M = None\n        self.edgesAB = None\n    \n    def build_graph(self, N: int, edgesA: List[List[int]], edgesB: List[List[int]]) -> None:\n        self.N = N\n        self.edgesA = edgesA\n        self.edgesB = edgesB\n\n    def solution(self) -> int:\n        self.build_graph(N=self.N, edgesA=self.edgesA, edgesB=self.edgesB)\n\n        @lru_cache(maxsize=None)\n        def dfs(src: int, dest: int) -> int:\n            if src == dest:\n                return 0\n            return min([\n                dfs(src, dest),\n                self.edgesA[src][dest] ** 2 + dfs(dest, src)\n            ])\n\n        return sum([dfs(src, dest) for src in range(self.N) for dest in range(self.N)])\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '96'\n\nassert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '160'\n\nassert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '64'\n\nassert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '88'\n\nassert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '160'"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '96'\nassert solution('5\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\\n3 5') == '82'\nassert solution('5\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\\n3 5') == '88'\nassert solution('7\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\\n1 5\\n3 6') == '125'"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4') == '96'\nassert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '96'\nassert solution('1\\n1 2\\n2 3') == '0'\nassert solution('1\\n2 2\\n3 3') == '5'\nassert solution('1\\n1 2\\n1 3') == '0'\n\n'''\n\nfrom collections import defaultdict\nimport heapq"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"64\"\n\"\"\"\n\n\"\"\"\ndp[i][j] = min(dp[i-1][k] + dp[k][j] + A[i]*A[k]*A[j] for k in range(i,j))\n\"\"\"\n\nimport sys\nimport math\n\nN = int(sys.stdin.readline())\nA = [0]\nA.extend(sorted([int(sys.stdin.readline()) for _ in range(N-1)]))\nM = int(sys.stdin.readline())\nB = [0]\nB.extend(sorted([int(sys.stdin.readline()) for _ in range(M-1)]))\n\ndp = [[math.inf] * (N+1) for _ in range(N+1)]\ndp[1][1] = 0\nfor j in range(1, N+1):\n    for i in range(j):\n        dp[i][j] = min(dp[i][k] + dp[k][j] + A[i]*A[k]*A[j] for k in range(i,j))\n\nprint(min(dp[1][1:]))\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\\n') == '96'\n\"\"\"\n\nimport sys\nimport networkx as nx\nfrom collections import defaultdict\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\nsys.stdin = open('input.txt', 'r')  \nsys.stdout = open('output.txt', 'w') \n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '96'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n2 1\\n3 4\\n1 4') == '162'\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import defaultdict\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\n\"\"\"\n\n\"\"\"\n\u4efb\u610f\u306e\u9802\u70b9\u3092\u7d50\u3076\u6700\u5c0f\u306e\u8fba\u3092\u6c42\u3081\u308b\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nprint('Hooray!')\n\n\"\"\"\n\nn = int(stdin.readline())\npoints = [tuple(map(int, stdin.readline().split())) for _ in range(n)]"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == 3\n\"\"\"\n\nimport sys\n\nsys.stdin = open('test_files/Y14R5P1/A.in')"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\n\n\"\"\"\nimport heapq\nimport sys\n\ninputs = int(sys.stdin.readline())\ninputs_list = []\n\nfor _ in range(inputs):\n    input_line = sys.stdin.readline()\n    input_line_split = input_line.split()\n    input_line_split = list(map(lambda x: int(x), input_line_split))\n    inputs_list.append(input_line_split)\n\nedges_list = []\n\nfor i in range(inputs - 1):\n    for j in range(i + 1, inputs):\n        input_i_j = (inputs_list[i][0] - inputs_list[j][0], inputs_list[i][1] - inputs_list[j][1])\n        edges_list.append(input_i_j)\n\nheapq.heapify(edges_list)\n\nedges_sum = 0\n\nwhile edges_list:\n    edges_sum += heapq.heappop(edges_list)[0]\n\nprint(edges_sum)"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\n\"\"\""
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3\\n5 7') == '3\\n'\nassert solution('3\\n1 2 3\\n4 6 8\\n2 2 1\\n5 9') == '3\\n'\nassert solution('3\\n1 2 3\\n4 5 6\\n7 8 9') == '7\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\nprint('Passed')\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0\\n0 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\nprint(solution(\"3\\n2 8\\n3 1\\n1 4\"))"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\"\nprint(solution(\"3\\n2 8\\n3 1\\n1 4\"))\n\n---------------------\n\nimport sys"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\"\nprint(solution(\"3\\n2 8\\n3 1\\n1 4\"))\n\nassert solution(\"3\\n1 4\\n2 8\\n3 1\") == \"9\"\nprint(solution(\"3\\n1 4\\n2 8\\n3 1\"))\n\nassert solution(\"3\\n1 4\\n2 8\\n3 1\") == \"9\"\nprint(solution(\"3\\n1 4\\n2 8\\n3 1\"))\n\nassert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\"\nprint(solution(\"3\\n2 8\\n3 1\\n1 4\"))\n\nassert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\"\nprint(solution(\"3\\n2 8\\n3 1\\n1 4\"))"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 9\") == \"10\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"4\\n3 1\") == \"5\"\n\"\"\"\n\nN = int(input())\nlist_of_a = []\nlist_of_b = []\nfor i in range(N):\n    A, B = map(int, input().split())\n    list_of_a.append(A)\n    list_of_b.append(B)\n\nd = {}\nfor i in range(len(list_of_a)):\n    for j in range(len(list_of_b)):\n        if list_of_a[i] in d:\n            d[list_of_a[i]].append(list_of_b[j])\n        else:\n            d[list_of_a[i]] = [list_of_b[j]]"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\n\"\"\"\n\nN = int(input())\nfor _ in range(N):\n    A, B = map(int, input().split())\n    print(A * B)"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\n\n-----Explanation-----\nFor the first round, the maximal sum is equal to $8+1$ or $9$.\n\nFor the second round, the maximal sum is equal to $8+1+4$ or $9+4$.\n\nFor the third round, the maximal sum is equal to $8+4+1$ or $9+5$.\n\"\"\""
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\nassert solution(\"3\\n1 4\\n2 8\\n3 1\") == \"10\\n9\\n9\"\n\"\"\"\n\nn = int(input())\n\nans = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    ans.append(sum([a, b]))\n\nprint(max(ans))"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n2 8\n3 1\n1 4''') == '10\n\nassert solution('''5\n2 8\n3 1\n1 4\n2 9\n8 2''') == '10\n\nassert solution('''8\n2 8\n3 1\n1 4\n2 9\n8 2\n2 5\n2 7\n1 4\n4 8''') == '18\n\nassert solution('''5\n2 8\n3 1\n1 4\n2 9\n8 2\n2 5\n2 7\n1 4\n4 8''') == '18\n\nassert solution('''3\n2 8\n3 1\n1 4\n2 9\n8 2\n2 5\n2 7\n1 4\n4 8''') == '18"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 8\\n2 3\\n8 5\\n8 1\") == \"15\\n10\\n9\\n\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('#') == 'IMPOSSIBLE'\nassert solution('#J') == 'IMPOSSIBLE'\nassert solution('#JF#') == 'IMPOSSIBLE'\nassert solution('#JF#\\n..#\\n#J#\\n..#\\n#J#') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n1\n1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n1\n1\n1\n1\n''') == '3'\n\nassert solution('''\n3\n3\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == 3\n\"\"\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".#.\\n#J#\\n#F#\\n####\") == \"IMPOSSIBLE\"\nassert solution(\".#.\\n####\\n#J#\\n#F#\\n####\") == \"IMPOSSIBLE\"\nassert solution(\".#.\\n#.J#\\n#F#\\n####\") == \"IMPOSSIBLE\"\nassert solution(\".#.\\n####\\n#J#\\n#.F#\\n####\") == \"IMPOSSIBLE\"\nassert solution(\".#.\\n#J#\\n#F#\\n####\") == \"3\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('###\\n#.J#\\n###') == '9'\nassert solution('####\\n#F.F#\\n####') == 'IMPOSSIBLE'\nassert solution('####\\n#.J.#\\n####') == '0'\n'''"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == '3'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(maze) == result\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"3\"\nassert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#FJ#\") == \"4\"\nassert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#FJ#\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\n\"\"\"\n\nfrom math import factorial\n\nn, m, d = map(int, input().split())\nmy_health = list(map(int, input().split()))\nopponent_health = list(map(int, input().split()))\n\nmy_minions = set(my_health)\nopponent_minions = set(opponent_health)\n\nmy_cards = sum(my_minions)\nopponent_cards = sum(opponent_minions)\n\ntotal_cards = my_cards + opponent_cards\n\ntotal_choices = (total_cards * (total_cards - 1)) // 2\n\nmy_choices = (my_cards * (my_cards - 1)) // 2\nopponent_choices = (opponent_cards * (opponent_cards - 1)) // 2\n\nmy_combinations = factorial(total_cards) // (factorial(my_cards) * factorial(total_cards - my_cards))\nopponent_combinations = factorial(total_cards) // (factorial(opponent_cards) * factorial(total_cards - opponent_cards))\n\nmy_result = my_combinations * my_choices\nopponent_result = opponent_combinations * opponent_choices"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\nprint(solution(\"1 2 2\\n2\\n1 1\"))\n\nimport math"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\n\n\"\"\"\n\nfrom math import factorial\n\nn, m, d = list(map(int, stdin.readline().split()))\ns = list(map(int, stdin.readline().split()))\no = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == 0.333333333333\n\"\"\"\n\nn, m, d = [int(x) for x in input().split()]\n\nminions = [int(x) for x in input().split()]\nopponents = [int(x) for x in input().split()]\n\ncombined = minions + opponents\ncombined.sort(reverse=True)"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == 0.333333\n"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 2 2\n2\n1 1''') == '0.3333333333'\nassert solution('''1 3 2\n2\n1 1\n''') == '0.16666666667'\n\n\"\"\"\nSolution\n\"\"\""
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.333333333333\"\n\"\"\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\nassert solution(\"1 2 2\\n0\\n1 1\") == \"0.3333333333\"\nassert solution(\"1 2 2\\n2\\n0\") == \"1.0\"\n\"\"\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\n\"\"\"\n\nn, m, d = [int(i) for i in stdin.split()]\na = [int(i) for i in stdin.split()[1:]]\nb = [int(i) for i in stdin.split()[-1:]]"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '1023'\nassert solution('1010111') == '1023'\nassert solution('1011') == '1023'\nassert solution('1110111') == '1023'\nassert solution('111111111111111111') == '1023'\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1011111111011111111110111) == 1023\n\n\"\"\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == 1023\nassert solution('101111') == 1023\nassert solution('1110111') == 1023\nassert solution('101101') == 1023\nassert solution('1011111') == 1023\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n1') == '1023'\n\n--------testcase1--------\n5\n101\nSample Output:\n11\n--------testcase2--------\n5\n101101101101\nSample Output:\n9\n\"\"\""
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '1010'\nassert solution('11') == '10111'\nassert solution('20') == '110110'\n\n-----Note-----\nGiven that the maximum length of a valid ID is 50, at least one character should not be *.\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101\\n1*1') == 1023\nassert solution('101\\n1*') == 1024\n\"\"\"\n\nn = int(input())\nP = input()\nprint(2**n - 1)\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101111111\") == 1023\nassert solution(\"10111111\") == 1023\nassert solution(\"10111111\") == 1023\nassert solution(\"10111111\") == 1023\nassert solution(\"101111111\") == 1023\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == 2\nassert solution('1111') == 2\nassert solution('1010') == 4\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == '11111111'\n\nassert solution('111111111111111111111111111111111') == '111111111111111111111111111111111'\n\nassert solution
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 6\n\"\"\"\n\nx, y = list(map(int, input().split()))\nprint(\n    (x + 1) * (y + 1)\n    + (x + 1) * y\n    + x * (y + 1)\n    + (x + 1) * (y + 1)\n    - (x + 1) * (x + 1)\n)"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"0 1\") == 1\nassert solution(\"0 2\") == 2\nassert solution(\"1 2\") == 3"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n') == 6\n\n\"\"\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n'''\n"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == 0\nassert solution('1 1\\n0 1') == 1\n\"\"\"\n\n\"\"\"\nimport sys\nfrom math import gcd"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == 6\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"0 2\") == 1\nassert solution(\"1 2\") == 1\nassert solution(\"2 3\") == 7\n\"\"\"\n\nimport sys\n\nMOD = 10 ** 9 + 7"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nx, y = map(int, stdin.split())\n"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == 6\nassert solution('2 2') == 16\nassert solution('3 5') == 52\nassert solution('1 100') == 38228970787342401\nassert solution('100 100') == 95775369848516101\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\n\n\"\"\""
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1') == 'Impossible'\nassert solution('1000\\n2000\\n7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('0\\n0\\n0\\n0') == '0'\nassert solution('1\\n2\\n3\\n4') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\n\n----"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''') == '2930'\n\"\"\"\n\n\"\"\"\n    def test_case(stdin: str, expected: str) -> bool:\n        try:\n            assert solution(stdin) == expected\n        except AssertionError:\n            print('expected: <{}>'.format(expected))\n            print('result: <{}>'.format(solution(stdin)))\n            print()\n            return False\n        return True\n\n    test_case('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''', '2930')\n\"\"\"\n\n\"\"\"\nimport unittest\nfrom unittest.mock import patch\nimport sys\n\nfrom io import StringIO\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.held, sys.stdin = sys.stdin, StringIO('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''')\n\n    def tearDown(self):\n        sys.stdin = self.held\n\n    def test_solution(self):\n        actual = solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''')\n        expected = '2930'\n        self.assertEqual(expected, actual)"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Impossible'\nassert solution('1\\n1\\n2\\n2') == 'Impossible'\nassert solution('1\\n2\\n3\\n4') == '11'\nassert solution('1\\n1\\n1\\n2\\n2\\n3\\n3') == '11'\nassert solution('1\\n1\\n1\\n2\\n2\\n3\\n3\\n4\\n4') == '12'\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\"\"\"\n) == \"2930\"\nprint(\"Test PASSED\")\n\nassert solution(\n    \"\"\"1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\"\"\"\n) == \"Impossible\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\n\"\"\""
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n') == '2930'\n\"\"\""
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\n\"\"\"\n\n\nimport sys\nfrom math import ceil"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"1 2 3\\n1\\n0\\n1\") == \"1\"\nassert solution(\"1 2 3\\n0\\n0\\n1\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 2 3\n0\n0\n1''') == '2'\nassert solution('''1 2 3\n0\n0\n1\n3\n5\n2\n3\n3\n5\n5\n3\n4\n3\n1\n2\n2\n2\n2\n2\n3\n3\n3\n5\n5\n4\n3\n1\n1\n1\n1\n1\n3\n2\n2\n1\n1\n1\n2\n1\n0\n0\n2\n1\n0\n2\n0\n0\n2\n1\n1\n1\n1\n1\n0\n1\n0\n2\n2\n2\n3\n1\n3\n3\n3\n3\n3\n3\n2\n3\n3\n3\n2\n1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n2\n1\n1\n0\n2\n0\n1\n0\n2\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 2 3\n0\n0\n1''') == '2'\n\nassert solution('''1 2 3\n0\n0\n1''') == '1'\n\nassert solution('''1 2 3\n0\n0\n2''') == '2'\n\nassert solution('''1 2 3\n0\n0\n2''') == '1'\n\nassert solution('''1 2 3\n0\n0\n0''') == '0'"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 2 3\n0\n0\n1''') == '2'\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\nassert solution('1 2 3\\n0\\n0\\n1') == '3'\nassert solution('1 2 3\\n0\\n0\\n1') == '3'\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\n\nassert solution('1 2 3\\n0\\n0\\n0\\n1') == '0'\n\nassert solution('1 2 3\\n0\\n0\\n0\\n1') == '1'\n\nassert solution('1 2 3\\n0\\n0\\n0\\n1') == '1'\n\nassert solution('1 2 3\\n0\\n0\\n0\\n1') == '2'"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\""
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2 1\n0\n0\n0\n1\n0\n0\n0\n0\n1\n2\n0\n0\n0\n1\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n0\n1\n2\n0\n0\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 0 0 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\") == 10\n\"\"\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2') == '10'\nassert solution('1 1\\n-1') == '0'\nassert solution('4 4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0') == '0'\nassert solution('1 1\\n2 2') == '2'\nprint('Success')\n'''"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2') == 10\nassert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2') == 10\nassert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2') == 10\n\n-------------\nSample Output 1:\n6\n\n-------------\nSample Output 2:\n0\n\n\"\"\"\n\nimport unittest\nfrom numpy import min as npmin, max as npmax"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\nb') == 'ab'\n\"\"\"\n\nimport numpy as np\n\nrows, cols = list(map(int, input().split()))\nmat = np.zeros((rows, cols), dtype=int)\nfor i in range(rows):\n    for j in range(cols):\n        mat[i,j] = int(input())\n\ni,j = map(int, input().split())"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\") == \"10\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\") == \"10\"\nassert solution(\"5 5\\n1 1 1 1 1 1\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\") == \"100\"\nassert solution(\"2 3\\n1 1 1\\n0 0 0\") == \"6\"\n\nprint(solution(input()))"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2') == '10'\n\n'''\n"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\") == \"10\"\n\n-----Test Cases-----\nYou may use my test cases to test your code locally.\n\nYou don't need to submit the solution on Edx.\n\"\"\"\n\nimport sys\n\nclass Node:\n    def __init__(self, x, y, h):\n        self.x = x\n        self.y = y\n        self.h = h\n        self.neighbours = []\n        self.p = None\n        self.q = None"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == 10\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\n\n-----Notes-----\n\n'''\n'''"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\nassert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 0\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict\n\nN, R = map(int, sys.stdin.readline().split())\nairports = defaultdict(list)\nflights = defaultdict(list)\nfor _ in range(R):\n    x, y, c = map(int, sys.stdin.readline().split())\n    airports[x].append((c, y))\n    airports[y].append((c, x))\nfor _ in range(int(sys.stdin.readline())):\n    x, y, c = map(int, sys.stdin.readline().split())\n    flights[x].append((c, y))\n    flights[y].append((c, x))"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\""
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\n\n\"\"\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n7 3\n1 3 2\n1 2 3\n2 4 1\n3 4 3\n3 5 2\n3 6 2\n4 7 2\n\"\"\"\n) == \"3100\"\n\n\"\"\"\nhttps://www.codewars.com/kata/frida-is-a-writer-for-cosmopolitan-who-writes-restaurant-reviews\n\nFrida is a writer for Cosmopolitan who writes restaurant reviews. She enjoys it a lot, but it seems that, throughout the years, she has reviewed all the restaurants on Earth. It\u2019s now time to move one level up; she is going to review the food served by the airlines, so that the readers can make better decisions on which flights to take.\n\nHer boss gave her a list of flight connections that she needs to review for the upcoming issue of Cosmopolitan. She knows that they serve the same food in both directions of every flight, so she only needs to take it once. She realized that she will need to take some additional flights, because she can not make all reviews using only flights in the list from her boss. Therefore she did some quick research and made a list of additional flights which she might take. She will not review the food on these flights; they will only be used so that she can make all the reviews.\n\nFrida\u2019s goal is to make all the reviews while spending the least money on flight tickets. Her office is in Stockholm, so she starts and ends her journey there. Each flight is both ways between two cities and has a fixed price in both directions. You can assume that it is possible to make all the reviews using some of the additional flights.\n\nFor the purposes of this problem we ignore the price Frida has to pay for accommodation and we also ignore the departure and arrival times of flights by assuming that every flight is very often and reasonably short. We only focus on the total price of the flights.\n\n-----Input-----\nThe first line contains $2$ space separated integers $N, R, (2\\leq N\\leq 13, 0\\leq R\\leq 78)$, where $N$ is the number of airports mentioned in the input and $R$ is the number of flights to review. The airports are numbered $1, \\dots, N$ and Stockholm has number $1$.\n\nThe next $R$ lines describe the $R$ flights to review. Each line contains 3 space separated integers $a, b, c, (1\\leq a, b\\leq N, 1\\leq c\\leq 10000)$, where $a, b$ denote 2 distinct airports and $c$ is the cost of the flight in Swedish kronor in both directions. No pair of $2$ cities is listed twice.\n\nThe next line contains an integer $F$, $(0\\leq F\\leq 200)$, the number of additional flights available. The next $F$ lines contain descriptions of flights in the same format as above. There may be more flights between a pair of cities. You may assume that it is possible to make all the reviews using some of these additional flights.\n\n-----Output-----\nOutput one line with one integer \u2013 the lowest total cost of flight tickets, such that Frida can make all the reviews and return back to Stockholm.\n\n-----Examples-----\nSample Input:\n7 3\n1 3 2\n1 2 3\n2 4 1\n3 4 3\n3 5 2\n3 6 2\n4 7 2\n5\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\nSample Output:\n3100\n\"\"\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\"\n\nimport sys\nfrom itertools import product"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\nprint('Hooray!')\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n0 1\\n\") == 0\nassert solution(\"2 1\\n0 2\\n\") == 1\nassert solution(\"2 1\\n0 1\\n0 2\\n\") == 1\nassert solution(\"3 2\\n0 1\\n0 2\\n0 3\\n\") == 1\nassert solution(\"3 2\\n0 1\\n1 2\\n1 3\\n\") == 1\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n0 1') == '0'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1') == '0'\nassert solution('2 2\\n0 1\\n0 2') == '0'\nassert solution('2 1\\n0 1\\n1 2') == '1'\nassert solution('2 2\\n0 1\\n1 2') == '1'\nassert solution('2 3\\n0 1\\n0 2\\n1 2\\n1 3') == '2'"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1\") == 0\nassert solution(\"1 1\") == 0\nassert solution(\"2 2\") == 2\nassert solution(\"3 2\") == 4\nassert solution(\"4 3\") == 9\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 2\") == 0\nassert solution(\"2 2\\n0 1\\n0 1\") == 1\nassert solution(\"3 3\\n0 1\\n0 2\\n1 2\\n1 3\\n2 3\") == 3\nassert solution(\"5 4\\n0 1\\n0 2\\n1 2\\n1 3\\n3 4\") == 2\nassert solution(\"7 6\\n0 1\\n0 2\\n1 2\\n1 3\\n2 3\\n4 5\\n5 6\") == 3\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1') == 0\n\"\"\"\n\nfrom collections import defaultdict\nimport itertools\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n0 1\") == 0\n\nassert solution(\"2 2\\n0 1\\n1 2\") == 1\n\nassert solution(\"2 3\\n0 1\\n1 2\\n0 3\") == 0\n\nassert solution(\"2 4\\n0 1\\n1 2\\n0 2\\n1 3\") == 1\n\nassert solution(\"2 5\\n0 1\\n1 2\\n0 3\\n1 4\\n0 4\\n1 5\") == 1"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 1\n0 1\n''') == 0\n\nassert solution('''2 1\n1 2\n''') == 0\n\nassert solution('''1 1\n''') == 0\n\nassert solution('''2 2\n0 1\n1 2\n''') == 1\n\nassert solution('''4 6\n1 3\n2 3\n3 4\n3 5\n''') == 1"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 1\n0 1\n''') == 0\nassert solution('''2 1\n0 1\n0 1\n''') == 1\nassert solution('''2 1\n0 1\n0 1\n''') == 0\n\n'''\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10\") == 10\nassert solution(\"1 2\") == 1\n\nprint(solution(stdin))\n\"\"\"\n\n\nfrom math import log2\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 100') == '100'\nassert solution('0 100') == '0'\nassert solution('10 10') == '0'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 10') == '10'\n\"\"\""
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\""
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10\") == \"10\"\n\"\"\""
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"1 1000\") == \"1000\"\nassert solution(\"1 10000\") == \"10000\"\nassert solution(\"1 100000\") == \"100000\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 10') == '10'\nassert solution('1 100') == '100'\nassert solution('1 10000') == '10000'\nassert solution('0 10') == '0'\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10\") == \"10\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 10') == '10'\nassert solution('3 1') == '1'\nassert solution('3 3') == '0'\nassert solution('0 10') == '0'\n\nimport math\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\n-----Solution-----\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == 0\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\nassert solution('4\\n0 0\\n1000 0\\n1000 1000') == '0'\nassert solution('4\\n0 0\\n1000 0\\n0 1000') == '1'\nassert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\"\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\"\nassert solution(\"4\\n5 5\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"1\"\n\nimport sys\nassert solution(sys.stdin.read()) == \"\"\n\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nassert n > 0 and n <= 1000\npoints = []\n\nfor i in range(n):\n    x, y = map(int, sys.stdin.readline().split())\n    points.append((x, y))\n\nmin_x = points[0][0]\nmax_x = points[0][0]\nmin_y = points[0][1]\nmax_y = points[0][1]\n\nfor x, y in points:\n    min_x = min(x, min_x)\n    max_x = max(x, max_x)\n    min_y = min(y, min_y)\n    max_y = max(y, max_y)\n\nassert max_x - min_x <= 20000\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\"\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\""
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''0 1 0.5\n''') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\n\"\"\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 0.1\\n0 1 0.5\") == \"0.5 0.1\\n\"\n\"\"\"\nimport sys\nimport numpy as np\n\nassert int(solution('1 2 0.1\\n0 1 0.5')) == 0.5\n\n_, n, m = [int(i) for i in sys.stdin.readline().split()]\n\np = np.zeros((n, n))\nfor i in range(m):\n    a, b, w = [float(j) for j in sys.stdin.readline().split()]\n    p[a, b] = w\n\ndp = np.zeros((n, n))\nfor k in range(1, n):\n    dp[0, k] = p[0, k]\n\nfor i in range(1, n):\n    for k in range(1, n):\n        dp[i, k] = np.max([dp[i - 1, j] * p[j, k] for j in range(n) if j <= k])\n\nans = []\nfor i in range(n):\n    ans.append(np.max([dp[-1, i], dp[i, i]]))\n\nprint(\" \".join([str(i) for i in ans]))\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\n\"\"\""
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n4 1\\n1 5') == '7'\n\"\"\"\n\nfrom functools import reduce\n\nstdin = open('input.txt')"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\n"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1\\n1 5\\n1 1\\n10 10\\n10 8\") == \"7\"\n\n-------------\n"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1\\n1 5\") == \"1\""
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 1\\n5 1\\n') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('5') == '5'\nassert solution('5\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8') == '7'"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10\") == '7'\n\"\"\""
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10\") == \"7\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"2\"\nprint(\"Test pass.\")\n\nassert solution(\"8\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\") == \"10\"\nprint(\"Test pass.\")\n\nassert solution(\"8\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n16 15\") == \"9\"\nprint(\"Test pass.\")\n\"\"\""
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1\\n\") == \"0\"\nassert solution(\"6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n\") == \"7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a b') == 'a'\nassert solution('a b b') == 'b'\nassert solution('a a b b') == 'a'\nassert solution('a b a') == 'b'\nassert solution('a b b c') == 'a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\") == \"9-b\\n8-a\"\nassert solution(\"4\\nacad\\ncccd\\ncccd\\n0\") == \"0-a\\n8-c\\n8-c\\n8-c\\n8-d\"\n\"\"\""
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'b'\nassert solution('a b') == 'b'\nassert solution('a b a') == 'a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\") == \"9-b\\n8-a\"\nassert solution(\"1\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\") == \"5-b\\n8-a\"\n\"\"\"\n\n\"\"\"\n\u0420\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432\u0441\u0435\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\n\"\"\"\nclass Solution:\n\n    \"\"\"\n    \u041c\u0435\u0442\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0441\u0435\u0445 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439\n    \"\"\"\n    def getResults(self):\n        return self.results\n\n    \"\"\"\n    \u041c\u0435\u0442\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439\n    \"\"\"\n    def getResult(self, case):\n        return self.results[case]\n\n    \"\"\"\n    \u041c\u0435\u0442\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\n    \u041f\u0440\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u043c \u0432\u0432\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f, \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u0432\u0435\u0434\u0443\u0442 \u0432\u0435\u0440\u043d\u044b\u0435\n    \"\"\"\n    def checkResults(self):\n        return\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u043e\u0434\u0430\n        # \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n        # \u0415\u0441\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439, \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\n        # \u0415\u0441\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u043c \u0432\u0432\u043e\u0434\u0435 \u0438 \u0432\u044b\u0439\u0442\u0438\n\n\n\"\"\"\n\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0438\u0445\n\"\"\"\n\n\"\"\"\n\u041c\u0435\u0442\u043e\u0434\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\"\"\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(    \"\"\"\n4\na b\nb b\nc c\na a\n0\n\"\"\") == \"\"\"\n2-b\n0\n\"\"\"\nassert solution(    \"\"\"\n6\na a\n1-a 3-b 5-c\n0\n1-a b 2-b\n0\na\n0\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(    \"\"\"\n4\na b\n0\na\n0\nb\n0\n\"\"\") == \"\"\"\n0-a\n0\n\"\"\"\n\nassert solution(    \"\"\"\n4\na b\n0\na\n0\nb\n0\n\"\"\") == \"\"\"\n0-a\n0\n\"\"\"\nassert solution(    \"\"\"\n4\na b\n0\na\n0\nb\n0\n\"\"\") == \"\"\"\n0-a\n0\n\"\"\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\") == \"9-b\"\n\"\"\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\") == \"9-b 8-a\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"a\"\n\nassert solution(\"bba\") == \"b\"\n\nassert solution(\"a\") == \"a\"\n\nassert solution(\"aa\") == \"b\"\n\nassert solution(\"ab\") == \"a\""
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\") == '9-b 9-b\\n8-a 8-a'\n\n\"\"\""
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '9-b 8-a'\n\nassert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '9-b 8-a'\n\nassert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '9-b 8-a'\n\nassert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '9-b 8-a'\n\nassert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '9-b 8-a'"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n') == '3246R3246'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '3246R3246'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '3246R3246'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '3246R3246'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '3246R3246'"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\necho\\n1\\necho\") == \"3246R3246\"\nassert solution(\"1\\necho\\n1\\nechoecho\") == \"3246D3246\"\n\"\"\""
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\necho\\n1\\n') == ''\nassert solution('1\\necho\\n2\\n') == 'R2U2D'\nassert solution('1\\n1\\n') == ''\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('echoecho') == 'R3246'\nassert solution('hello') == '5U5U5U5'\n\nassert solution('hello world') == '3U3U3U3U3U5U5U5U5U5U5U3U3U5'\nassert solution('abc') == '2U2U2U2U2U2U2'\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\necho\\n1\\necho\\n') == '3246R3246'\n\"\"\""
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"echo\\n1\") == \"34234\"\nassert solution(\"echo\\n1\\n2\\n3\\n4\") == \"23423R34R43R4\"\n\n\"\"\"\n\nimport sys\nimport unittest"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n' + 'echo\\n' + '1\\n' + 'echoecho\\n') == '342346R3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\necho\\necho') == '3246R3246'\nprint(solution('1\\n1\\necho\\necho'), '3246R3246')\nassert solution('1\\n1\\necho\\necho\\necho\\necho') == '3246R3246U3246D3246'\nprint(solution('1\\n1\\necho\\necho\\necho\\necho'), '3246R3246U3246D3246')\nassert solution('1\\n1\\necho\\necho\\necho\\necho\\n3246\\necho') == '3246R3246U3246D3246'\nprint(solution('1\\n1\\necho\\necho\\necho\\necho\\n3246\\necho'), '3246R3246U3246D3246')\n\n-----Problem-----\nCreate a solution for the following problem:\n\nGiven a dictionary of $n$ words, and a query of length $q$, return the minimum number of keypresses required to type the query.\n\n-----Constraints----\n$1 \\le n \\le 200,000$\n$1 \\le q \\le 200,000$\n$0 \\le |w| \\le 200,000$\n$1 \\le |w| \\le n$\n\n-----Sample Input-----\n5\necho\n1\necho\n3246\necho\n2\necho\necho\necho\necho\n2\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\necho\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\necho\\n1\\nechoecho') == '3246R3246'\nassert solution('1\\necho\\n2\\nechoechoe') == 'R24R'\nassert solution('1\\necho\\n5\\nechoechoechoechoe') == 'R24R'\nassert solution('1\\necho\\n10\\nechoechoechoechoechoechoechoechoechoechoechoe') == 'R24R'\nassert solution('1\\necho\\n15\\nechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoe') == 'R24R'\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\nassert solution('5 6') == 'YES\\n5 4\\n5 3\\n5 2\\n5 1'\nassert solution('10 10') == 'NO'\n\"\"\""
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\n1 2\n1 3\n''') == 'YES\\n1 2\\n1 3'\n\nassert solution('''5 2\n3 2\n1 3\n2 4\n3 5\n''') == 'NO'\n\nassert solution('''5 3\n1 2\n1 3\n1 4\n2 5\n''') == 'YES\\n1 1\\n1 2'\n\nassert solution('''5 1\n1 2\n1 3\n1 4\n2 5\n''') == 'NO'\n\nassert solution('''4 3\n1 2\n1 3\n2 4\n''') == 'YES\\n1 2\\n1 3'"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 2\\n1 3') == 'YES\\n1 2\\n1 3'\nassert solution('3 1\\n3 2\\n1 2\\n1 3') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\nprint(solution('3 1'))\nassert solution('3 1') == 'YES\\n1 2\\n1 3'\nprint(solution('3 1'))\n\nassert solution('4 1') == 'NO'\nassert solution('4 2') == 'YES\\n2 3\\n2 4'\nassert solution('4 3') == 'NO'"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"YES\\n1 2\\n1 3\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nconnected = set()\n\nfor _ in range(k):\n    s, t = map(int, sys.stdin.readline().split())\n    if s in connected:\n        connected.remove(s)\n    else:\n        connected.add(s)\n    if t in connected:\n        connected.remove(t)\n    else:\n        connected.add(t)"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\n\"\"\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"YES\\n1 2\\n1 3\""
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\n\"\"\""
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\n\n-----Note-----\nThe tests are taken from Coding Bat.\n\"\"\""
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == 36\nassert solution('9\\n5\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10') == 524\nassert solution('9\\n5\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10') == 548\nassert solution('9\\n5\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10') == 564\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333''') == '176'\nprint('OK')\n\nSolution:\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\\n\") == \"176\"\nassert solution(\"3\\n1\\n3 1\\n10\") == \"8\"\n\"\"\"\n\nimport sys\n\nmin_light_level = int(sys.stdin.readline())\nclub_height = int(sys.stdin.readline())\nclub_size = (int(sys.stdin.readline()), int(sys.stdin.readline()))\nlights = []\nfor _ in range(club_size[0]):\n    lights.append(list(map(int, sys.stdin.readline().strip().split())))\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333''') == '176'"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\") == \"176\"\n\"\"\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333') == '176'\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\") == \"176\"\n\"\"\"\n\nimport sys\n\nB, H = map(int, sys.stdin.readline().strip().split())\nR, C = map(int, sys.stdin.readline().strip().split())\ngrid = []\nfor _ in range(R):\n    grid.append(sys.stdin.readline().strip())\n\ncost = 0\nfor r in range(R):\n    for c in range(C):\n        if grid[r][c] == '0':\n            continue\n\n        for x in range(r+1, R):\n            if grid[x][c]!= '0':\n                cost += (grid[x][c] / (x**2 + 1))\n                break\n\nfor c in range(C):\n    for r in range(R):\n        if grid[r][c] == '0':\n            continue\n        for y in range(r+1, R):\n            if grid[y][c]!= '0':\n                cost += (grid[y][c] / (y**2 + 1))\n                break\n\nprint(round(cost))\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333''') == '176'\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\") == \"176\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '12'\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"3\") == \"016\"\n\nassert solution(\"10\") == \"1000\"\n\nassert solution(\"18\") == \"900\"\nassert solution(\"12\") == \"12\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"012\"\n\nassert solution(\"4\\n\") == \"021\"\n\nassert solution(\"12\\n\") == \"016\"\n\nassert solution(\"14\\n\") == \"0271\"\n\nassert solution(\"21\\n\") == \"1012\""
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12!\\n5\\n') == '016'\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"12\"\nprint(solution(\"5\"))\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12') == '012'\nassert solution('153') == '153'\nassert solution('18') == '18'\nassert solution('20') == '200'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"012\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 2\nassert solution('4') == 0\nassert solution('0') == 0\nassert solution('15') == 1\nassert solution('123') == 0\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n''') == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('()') == 0\nassert solution('((()))') == 0\nassert solution('(()(()(') == 3\nassert solution(')()())') == 5\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('((()') == \"?\"\nassert solution('(())') == \"?\"\nassert solution('(())') == \"?\"\nassert solution('()()') == \"?\"\n\nassert solution('((())') == \"?\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"((()\") == \"??\"\nassert solution(\"(()))((()\") == \"??\"\nassert solution(\"(()((((((((()(\") == \"??\"\nassert solution(\"(())(()(()(()(()()(()()(()(())()(())(\") == \"??\"\n\n-----Notes-----\n\n\"\"\"\n\nfrom typing import NamedTuple, List\n\nclass Point(NamedTuple):\n    x: int\n    y: int"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('((()') == 480\nassert solution('((()))') == 480\nassert solution('((()))') == 480\nassert solution('((()))') == 480\nassert solution('((()))') == 480\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('()') == 0\nassert solution('()()') == 0\nassert solution('()()()') == 0\nassert solution('(()())') == -2\nassert solution('()(())') == -1\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''(()\n480\n617\n-570\n928\n''') == '480'\n\nassert solution('''(()\n480\n617\n-570\n928\n''') == '?'''\n\nassert solution('''((()\n480\n617\n-570\n928\n''') == '?'''\n\nassert solution('''(()\n480\n617\n-570\n928\n''') == '?'''\n\nassert solution('''(()\n480\n617\n-570\n928\n''') == '?'''"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '?'\nassert solution('()') == 0\nassert solution('((()))') == 0\nassert solution('()(())()') == 0\nassert solution('()((()))') == 0\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('((()') == 480\nassert solution('()((())') == 0\nassert solution('(()(()(())()())())') == 0\nassert solution('()()((((((((((())))))))()())(())())()') == 0\n\n'''\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('()') == '?'\nassert solution('(())') == '?'\nassert solution('()()') == '?'\nassert solution('(()()') == '?'\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('((()))') == '?'\nassert solution('((()))(((()())(())()))') == '?'\nassert solution('(()())(())()') == '?'\nassert solution('()') == 0\nassert solution('((())())(()(()()))') == 0\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 6\\n2 1 3 4 6\\n2 2 4 5 6\\n2 3 4 5 6\\n2 4 6\") == \"4 6\"\n\"\"\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\nassert solution(\"9\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\nassert solution(\"5\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"1 1 1 1 1 1\"\n\"\"\"\n\nfrom typing import List\nimport collections\nimport bisect\nimport functools\nimport itertools\n\nclass Solution:\n    def find_identical_rooms(self, n: int, rooms: List[List[int]]) -> str:\n        graph = collections.defaultdict(list)\n        for i in range(n):\n            for j in range(len(rooms[i])):\n                graph[i].append(rooms[i][j])\n                graph[rooms[i][j]].append(i)\n\n        visited = set()\n        ret = []\n        def dfs(room):\n            if room in visited:\n                return\n            ret.append(room)\n            visited.add(room)\n            for neighbor in graph[room]:\n                dfs(neighbor)\n\n        for i in range(n):\n            if i not in visited:\n                dfs(i)\n\n        return \"\\n\".join(map(str, sorted(ret)))\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"\"\"\n2 4\n5 6\n7 8 9 10 11 12 13\n\"\"\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12') == '2 4\\n5 6\\n7 8 9 10 11 12 13'\n\"\"\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\n\n\"\"\""
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\\n\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\nassert solution(\"10\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\n\n\"\"\"\n\nimport sys\nimport os\nimport os.path\nimport itertools\nimport re\nimport collections\nimport time\nimport math\nimport datetime\nimport random"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6') == '2 4'\nassert solution('2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6') == '5 6'\nassert solution('2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6') == '5 6'\nassert solution('2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6') == '5 6'\nassert solution('2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6') == '5 6'\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12') == '2 4\\n5 6\\n7 8 9 10 11 12 13'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\n-------------------------------\nimport re\nimport sys\nimport functools"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2''') == '''35 39 36 27 29'''\nassert solution('''3 2\n1 2 2\n2 3 2\n3 1 1''') == '''6 6 3'''\nassert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2\n1 2 3\n2 3 12\n3 5 4\n4 5 2''') == '''35 39 36 27 29'''\nassert solution('''4 4\n1 2 1\n1 3 1\n2 3 1\n3 4 1\n2 1 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3 4 2\n1 2 2\n1 3 2\n2 3 2\n3"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 1\\n3 2 2\\n1 2 2\\n2 3 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n4 2 1\\n3 4 2\\n4 2 1\\n2 3 1\\n3 4 2\\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 1\\n1 3 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\nprint('Hooray!')\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(dataset[0])) == str(dataset[1])\n\n\"\"\"\n\nimport math\nimport sys\nfrom collections import deque\nfrom itertools import combinations\nfrom typing import Dict, List\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\n\nassert solution(\"1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"0 1 0 1 0\"\n\nassert solution(\"4 5\\n3 4 4\\n2 1 5\\n1 2 1\\n2 1 2\") == \"3 3 0 1 1\"\n\nassert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\n\nassert solution(\"1 2 2\\n1 3 2\\n1 4 2\\n2 3 2\\n2 4 2\\n3 4 2\\n4 5 2\") == \"0 1 1 1 1\""
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('hello') == 'hello'\nassert solution('100100101') == '101100101'\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2''') == '35 39 36 27 29'\n\nassert solution('''3 2\n1 2 100\n1 3 100\n2 3 100''') == '100 100 100'\n\nassert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n\nassert solution('''7 3\n1 2 7\n1 3 3\n2 3 4\n2 4 5\n3 4 6\n3 5 1\n4 5 2\n''') == '70 90 120'\n\nassert solution('''4 3\n1 2 10\n1 3 6\n2 3 10\n3 4 1''') == '110 110 110'"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 0\") == \"572\"\nassert solution(\"5 2 1\") == \"631\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n3 2 1') == '0 672'\nassert solution('6 3\\n6 4 3') == '0 100000000'\nassert solution('1 1\\n1 1') == '0 672'\nassert solution('6 3\\n6 4 2') == '1 672'\n\"\"\"\n\n\"\"\"\nSource: https://projecteuler.net/problem=187\n\nA completed binary tree will be represented by a list of tuples, where each tuple has two elements:\n\n1. The left child of the current node, or None if no left child exists\n2. The right child of the current node, or None if no right child exists\nA binary search tree (BST) will be represented by a completed binary tree in which the left child of every node is always smaller than or equal to its parent node's value, and the right child of every node is always larger than or equal to its parent node's value.\n\nIn the case of a bst, there will be no duplicate values\n\nclass Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BST(object):\n    def __init__(self, root):\n        self.root = Node(root)\n\n    def insert(self, new_val):\n        self.insert_helper(self.root, new_val)\n\n    def insert_helper(self, current, new_val):\n        if new_val < current.data:\n            if current.left:\n                self.insert_helper(current.left, new_val)\n            else:\n                current.left = Node(new_val)\n        else:\n            if current.right:\n                self.insert_helper(current.right, new_val)\n            else:\n                current.right = Node(new_val)\n\n    def search(self, find_val):\n        return self.search_helper(self.root, find_val)\n\n    def search_helper(self, current, find_val):\n        if current:\n            if current.data == find_val:\n                return True\n            elif current.data < find_val:\n                return self.search_helper(current.right, find_val)\n            else:\n                return self.search_helper(current.left, find_val)\n        return False"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\nprint(solution(input()))\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n3 2 1') == '0 672'\nassert solution('1 10\\n1') == '0 1'\nassert solution('1 10\\n10 1') == '0 998'\nassert solution('1 10\\n10 1\\n2 2') == '0 982'\nassert solution('1 10\\n10 1\\n2 2\\n2 2') == '0 972'\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3 3\n3 2 1\n\"\"\"\n) == '0 672'\n\nassert solution(\n\"\"\"\n5 3\n5 5 6\n\"\"\"\n) == '0 10421'\n\nassert solution(\n\"\"\"\n5 1\n5 1\n\"\"\"\n) == '1 10421'\n\nassert solution(\n\"\"\"\n1 1\n1 1\n\"\"\"\n) == '1 10421'\n\nassert solution(\n\"\"\"\n2 3\n5 5\n\"\"\"\n) == '0 10421'"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n3 2 1') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\\n3 2 1\") == \"0 672\"\nassert solution(\"1 1\\n1 2\") == \"0 1\"\nassert solution(\"4 2 2\\n1 2\") == \"0 0\"\nassert solution(\"6 3\\n4 3 5\") == \"0 6042\"\nassert solution(\"6 5\\n4 2 4 1 1\") == \"0 0\"\n\"\"\""
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n3 2 1''') == '0 672'\nassert solution('''5 5\n3 2 1\n3 2 3\n2 4 2\n3 4 4\n1 3 3''') == '0 0'\nassert solution('''5 5\n3 2 1\n1 2 2\n3 2 1\n1 3 1\n3 4 3''') == '0 0'"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''3 3\n3 2 1''') == \"0 672\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\n\"\"\""
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.50000'\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.50000\"\n\"\"\"\n\nimport math\n\nN, M, R = map(int, input().split())\n\ncars = [list(map(int, input().split())) for _ in range(M)]\ncars = sorted(cars, key=lambda x: x[1], reverse=True)"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\"\n\n_N, _M, _R = map(int, input().split())\nlane = []\nfor _ in range(_M):\n    l, ln, rs = map(int, input().split())\n    lane.append((l, ln, rs))\nlane = sorted(lane, key=lambda x: (x[2], x[1]))\n\nans = 0\nfor l, ln, rs in lane:\n    if l == 0:\n        ans = max(ans, rs)\n    else:\n        break\nprint(ans if ans!= 0 else \"Impossible\")\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == '2.500000'\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\n\"\"\""
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('6 3 5\\n') == 1\n'''\n\nn = int(stdin.readline().strip())\nnums = [int(x) for x in stdin.readline().split(' ')]\n\nstack = []"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4\") == \"3\"\nprint(solution(\"5 3 4\"))\n\n-----Explanation-----\nWe need to move the leftmost stack of 3 crates onto the rightmost stack of 4 crates.\n\nWe first have to move the leftmost stack of 5 crates onto the rightmost stack of 4 crates.\n\nThen, we have to move the leftmost stack of 3 crates onto the rightmost stack of 3 crates.\n\nThe minimum number of actions required to accomplish this is 3.\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5 3 4') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('5\\n5 3 4') == '5'\nassert solution('5\\n5 5 3 4') == '7'\nassert solution('5\\n5 5 5 3 4') == '8'\n\nassert solution('3\\n5 3 4') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 3 4\") == '3'\nassert solution(\"5\\n5 3 4\") == '2'\nassert solution(\"10000\\n1 1 1\") == '1'\n\n-----Constraints-----\n$1\\leq N\\leq 50000$\n$1\\leq |Crates|[i]\\leq 50000$\n$1\\leq StackHeight[i]\\leq 50000$\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 3 4\") == \"3\"\nassert solution(\"7\\n2 3 4 5 6 7 1\") == \"11\"\n\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('2\\n2') == '0'\nassert solution('2\\n2\\n1') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n5 3 4''') == 3\n\"\"\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == 2\n\n-----Explanation-----\nIn the above example, the number of distinct paths is 2, since there are two distinct hops between (0, 0) and (2, 2):\n1. Go from (0, 0) to (1, 1)\n2. Go from (0, 0) to (2, 2)\n\n-----Constraints-----\n1 <= N, X, Y <= 10^6\n\"\"\""
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\") == 2\nassert solution(\"2 2 1\") == 1\n\nSample Input:\n10 100 1\nSample Output:\n1079\n\nSample Input:\n10 100 100\nSample Output:\n1077\n\"\"\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == 2\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1\\n') == 2\nassert solution('5 1 3\\n') == 4\nassert solution('6 1 4\\n') == 0\nassert solution('8 2 3\\n') == 0\nassert solution('1 1 1\\n') == 1\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1\\n') == 2\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import gcd\nfrom typing import Iterator, List, Tuple, Union\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"100 10 5\") == \"2\"\nassert solution(\"100 10 2\") == \"0\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\\n\") == 2\n\n\"\"\"\nimport math"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\\n\") == 2\n'''"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 5\\n') == '7'"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 5\") == \"7\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 5') == '7'\n\"\"\"\n\nn = int(input())\nlst = [int(i) for i in input().split()]\nxor = 0\nfor i in range(n):\n    for j in range(i,n):\n        xor = xor ^ lst[j]\nprint(xor)"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 5\") == 7\n\"\"\""
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 5\") == '7'\nassert solution(\"2\\n1 0\") == '0'\nassert solution(\"3\\n2 2 3\") == '3'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nnums = list(map(int, sys.stdin.readline().split()))\n\ns = sum(nums)\nnums.sort()\n\nfor i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n        if s ^ (nums[i] + nums[j]) > s:\n            s = s ^ (nums[i] + nums[j])\n\nprint(s)\n"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 5') == '7'\n\n\"\"\""
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 5\") == '7'\n\"\"\""
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 5') == '7'\n"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n1 3 5\n\"\"\") == '7'\nprint(solution(\"\"\"3\n1 3 5\n\"\"\"))\n\nassert solution(\"\"\"5\n2 3 9 2 9\n\"\"\") == '9'\nprint(solution(\"\"\"5\n2 3 9 2 9\n\"\"\"))\n\nassert solution(\"\"\"3\n1 3 3\n\"\"\") == '2'\nprint(solution(\"\"\"3\n1 3 3\n\"\"\"))\n\nassert solution(\"\"\"4\n3 3 3 3\n\"\"\") == '0'\nprint(solution(\"\"\"4\n3 3 3 3\n\"\"\"))\n\nassert solution(\"\"\"6\n2 1 1 2 9 2\n\"\"\") == '3'\nprint(solution(\"\"\"6\n2 1 1 2 9 2\n\"\"\"))"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 3\") == 3\n\"\"\"\nimport os\nimport random\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible\"\nassert solution(\"3\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"john rhinocerous rockets\\nmary rhinocerous rockets\"\n\"\"\"\n\n#######################################################\n\"\"\"\n\u672c\u9898\u6709\u4e24\u79cd\u89e3\u6cd5\uff0c\u4e00\u79cd\u662f\u6bcf\u6b21\u9009\u51fa\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u540d\u5355\uff0c\u7b2c\u4e8c\u79cd\u662f\u6bcf\u6b21\u9009\u51fa\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u540d\u5355\uff0c\u5728\u9009\u62e9\u8fc7\u7a0b\u4e2d\u8981\u505a\u4e00\u4e9b\u5224\u65ad\u3002\n\u6ce8\u610f\u9898\u76ee\u8981\u6c42\u7b2c\u4e00\u79cd\u89e3\u6cd5\u6bcf\u6b21\u9009\u51fa\u7684\u540d\u5355\u90fd\u4e0d\u80fd\u91cd\u590d\uff0c\u4f46\u662f\u9898\u76ee\u8981\u6c42\u53ef\u4ee5\u91cd\u590d\u9009\u62e9\u540d\u5355\uff0c\u8fd9\u6837\u65e2\u53ef\u4ee5\u4fdd\u8bc1\u7b2c\u4e00\u79cd\u89e3\u6cd5\u9009\u51fa\u7684\u540d\u5355\u662f\u552f\u4e00\u7684\uff0c\u53c8\u53ef\u4ee5\u505a\u4e00\u4e9b\u7ec4\u5408\u3002\n\"\"\"\n#######################################################"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\nfred jetsons\njohn jets\nruth rockets\n\"\"\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"Impossible.\\nImpossible.\"\nassert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"fred jetsons\\njohn jets\\nruth rockets\\n\"\nassert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"fred jetsons\\njohn jets\\nruth rockets\\nImpossible.\\n\"\nassert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"fred jetsons\\njohn jets\\nImpossible.\\nImpossible.\\n\"\nassert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"fred jetsons\\njohn jets\\nImpossible.\\nImpossible.\\n\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Impossible.'\nassert solution('4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'john jetsons\\nmary rhinocerous rockets'\nassert solution('2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'Impossible.'\nassert solution('1\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'ruth rockets'\nassert solution('1\\n1\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'Impossible.'\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible.\"\n\"\"\"\n\nimport sys\nimport ast\nimport itertools"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible.\"\n\nassert solution(\"3\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nruth platypus 1 rockets\") == \"mary rhinocerous rockets\"\n\nassert solution(\"4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"john rhinocerous 2 jets\"\n\nassert solution(\"4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nruth platypus 1 rockets\") == \"Impossible.\"\n\nassert solution(\"4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nruth platypus 1 rockets\") == \"Impossible.\""
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\"\"\") == '''Impossible.\nfred rhinocerous\njohn rhinocerous\nmary rhinocerous\nruth platypus'''\nassert solution(\"\"\"4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\"\"\") == '''Impossible.\nruth platypus\njohn rhinocerous\nmary rhinocerous\nfred rhinocerous\nruth rockets\njohn rhinocerous\nmary rhinocerous\nfred jetsons\nruth rockets\nfred rhinocerous\njohn rhinocerous\nmary rhinocerous\nfred jetsons\njohn rhinocerous\nmary rhinocerous\nfred jetsons\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nmary rhinocerous\nfred rhinocerous\njohn rhinocerous\nmary rhinocerous\nfred jetsons\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nfred rhinocerous\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nmary rhinocerous\nfred rhinocerous\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\njohn rhinocerous\nmary rhinocerous\nfred jetsons\nruth rockets\nruth platypus\nmary rhinocerous\nfred rhinocerous\njohn rhinocerous\nruth rockets\nruth platypus\nmary rhinocerous\nruth rockets\nruth platypus\nmary rhinocerous\nfred rhinocerous\njohn rhinocerous\nruth rockets\nruth platypus\nruth rockets\nmary rhinocerous\nfred rhinocerous\nruth platypus\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nmary rhinocerous\nfred rhinocerous\njohn rhinocerous\nruth rockets\nruth platypus\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nruth rockets\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nfred rhinocerous\nruth rockets\nruth platypus\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nmary rhinocerous\nruth rockets\nfred rhinocerous\njohn rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nfred rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nfred rhinocerous\nruth rockets\nruth platypus\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nfred rhinocerous\nruth rockets\nruth platypus\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nfred rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nfred rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nfred rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nfred rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nruth platypus\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nruth platypus\njohn rhinocerous\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nmary rhinocerous\nruth rockets\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus\nruth platypus"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"john jets\\nruth rockets\\nImpossible.\\n\"\n\n\"\"\""
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\n ruth platypus 1 rockets\") == \"Impossible.\\njohn jets\\nruth rockets\"\n\"\"\"\n\n\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n') == 'fred jetsons\\njohn jets\\nruth rockets\\n'\n\nprint(solution('4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n'))"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\"\"\"\n\nimport sys\n\nnum_of_cans = int(sys.stdin.readline().strip())\ncan_locations = []\ncan_blast_radii = []\n\nfor _ in range(num_of_cans):\n    can_locations.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    can_blast_radii.append(int(sys.stdin.readline().strip()))\n"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\nassert solution('''\n5\n4 4\n1 1\n-2 0\n-1 -3\n0 -2\n''') == '1 2 1 3'\nassert solution('''\n2\n4 4\n1 1\n-2 0\n-1 -3\n0 -2\n''') == '2 2 2'\n\n'''\n4 3\n-10 9\n-2 3\n-1 -3\n0 -2\n'''\n'''\n4 4\n1 1\n-2 0\n-1 -3\n0 -2\n'''"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\"\"\""
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\"\"\""
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"examples.txt\", \"r\").read()) == open(\"examples_ans.txt\", \"r\").read()\n\nprint('Successful')\n"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\nprint(\"Correct!\")\n\n\"\"\"\n\n\nfrom __future__ import annotations\nfrom typing import Callable, List\n"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_one) == test_output_one\nassert solution(test_input_two) == test_output_two\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n\"\"\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == '2.125'\n\"\"\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\n\"\"\""
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\""
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\\n') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\\n') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == '2.125'\n    \"\"\""
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n\"\"\"\n\nfrom collections import Counter, defaultdict, deque\nfrom random import randint"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n\nimport sys\nfrom random import randint\nfrom collections import defaultdict\nfrom typing import Dict, List, Optional"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc\\n'\nassert solution('*.c') =='main.c\\n'\nassert solution('*.*.c') =='main.c\\na.out\\nreadme\\n'\nassert solution('*.c.c') =='main.c\\n'\nassert solution('*.*.c.c') =='main.c\\na.out\\nreadme\\n'\n\n-----Solution-----"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('*') == '*'\n\nassert solution('*.') == '*.c'\n\nassert solution('*.*') == '*.*'\n\nassert solution('a.*') == 'a*.c'"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"*.c\") == \"\"\"main.c\na.out\nreadme\nyacc\"\"\".split('\\n')\n\nassert solution(\"*.*\") == \"\"\"main.c\na.out\nreadme\nyacc\"\"\".split('\\n')\n\nassert solution(\"*.c *.h\") == \"\"\"main.c\nreadme\nyacc\"\"\".split('\\n')\n\nassert solution(\"*abc\") == \"\"\"main.c\na.out\nreadme\nyacc\"\"\".split('\\n')\n\n-----Explanation-----\nThe pattern *.* matches every file.\n\nThe pattern *abc matches every file with an \u201ca\u201d, \u201cb\u201d or \u201cc\u201d in the filename.\n\nThe pattern *.* *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.* *.h matches every file with a \u201ch\u201d in the filename.\n\nThe pattern *.* *.h *.c matches every file with a \u201ch\u201d, \u201cc\u201d or \u201cc\u201d in the filename.\n\nThe pattern *.* *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.* *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.* *.h *.c *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.h matches every file with a \u201ch\u201d in the filename.\n\nThe pattern *.h matches every file with a \u201ch\u201d in the filename.\n\nThe pattern *.h matches every file with a \u201ch\u201d in the filename.\n\nThe pattern *.h matches every file with a \u201ch\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d in the filename.\n\nThe pattern *.c matches every file with a \u201cc\u201d"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"*.*\") == \"main.c\\na.out\\nreadme\\nyacc\\n\"\nprint(solution(\"*.*\"))\n-----Test cases-----\n\n1. Given input \"*.*\" Output \"main.c\\na.out\\nreadme\\nyacc\"\n2. Given input \"*.c\" Output \"main.c\\na.out\\nreadme\\nyacc\"\n3. Given input \"*.c*\" Output \"main.c\\na.out\\nreadme\\nyacc\"\n4. Given input \"*.c*\" Output \"main.c\\na.out\\nreadme\\n\"\n5. Given input \"*.c*\" Output \"main.c\\nreadme\\n\"\n6. Given input \"*.c*\" Output \"main.c\\nreadme\"\n7. Given input \"*.c*\" Output \"main.c\"\n8. Given input \"*.c*\" Output \"main.c\"\n9. Given input \"*.c*\" Output \"\"\n10. Given input \"*.c*\" Output \"\"\n\n-----Solution-----\n\"\"\"\nimport re"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n*.*\n4\nmain.c\na.out\nreadme\nyacc\n''') == \"\"\"\nmain.c\na.out\n\"\"\"\n\n-----Tests-----\nYou can check the correct implementation of your function by running tests on random inputs.\n\n-----BONUS-----\nWrite a function which matches only files with an extension.h.\nWrite a function which matches only files with an extension.c.\n\n'''\nimport os"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"*.*\") == [\n    \"main.c\",\n    \"a.out\",\n    \"readme\",\n    \"yacc\",\n]\n\n\"\"\"\n\nimport re\n\npattern = r\"^(.*)\\.(.*)$\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"*.*\") == \"main.c\\na.out\\nreadme\\nyacc\\n\"\nassert solution(\"*.c\") == \"main.c\\nyacc\\n\"\n\n-----Constraints-----\n1 <= N <= 100\n1 <= |P| <= 100\n1 <= |S| <= 100\n|S| == |P|\n|S| <= N\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc'\n\nassert solution('*.c') =='main.c\\nyacc'\n\nassert solution('*.c*') =='main.c\\nyacc\\na.out'\n\"\"\""
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc\\n', solution('*.*')\n\n-----Note-----\nThe characters (, ), [, ], and | are all supported.\n\n-----Hints-----\nA wildcard matches zero or more characters of any kind.\n\nWrite a program that receives a pattern as input and lists all the files in the directory that match the pattern.\n\"\"\""
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".*.*\") == [\"main.c\", \"a.out\", \"readme\", \"yacc\"]\n\n-----Hints-----\n1. Try to think about a solution that does not require using regular expressions.\n2. The purpose of this problem is to allow you to explore the concept of string matching, which will require you to use regular expressions.\n3. The \".*\" pattern matches any number of characters, except for the newline \\n.\n\n\"\"\""
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nprint(solution(stdin))\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nimport numpy as np\nfrom decimal import *"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 1\n0.500000''') == \"0.500000\"\n\"\"\"\n\nimport os\nimport sys\nfrom math import log, e"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0.5') == '0.5'\nassert solution('0.33') == '0.33'\nassert solution('0.95') == '0.95'\nassert solution('0.3334') == '0.3334'\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\n\"\"\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n0.5\") == \"0.5\"\nassert solution(\"1 1\\n0.500000\") == \"0.5\"\nassert solution(\"1 1\\n0.555555\") == \"0.555555\"\nassert solution(\"1 1\\n0.55555555\") == \"0.55555555\"\nassert solution(\"1 1\\n0.5555555555\") == \"0.5555555555\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n0.2\\n0.7\") == \"0.25\"\nassert solution(\"3 3\\n0.8\\n0.7\\n0.1\") == \"0.736\"\nassert solution(\"4 4\\n0.3\\n0.5\\n0.7\\n0.9\") == \"0.52\"\nassert solution(\"5 5\\n0.6\\n0.3\\n0.6\\n0.8\\n0.1\") == \"0.559\"\nassert solution(\"6 6\\n0.2\\n0.1\\n0.8\\n0.3\\n0.8\\n0.4\") == \"0.536\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n0.5\\n\") == \"0.5\"\nassert solution(\"2 2\\n0.1 0.2\\n\") == \"0.1\"\nassert solution(\"2 2\\n0.2 0.2\\n\") == \"0.3\"\n\n\"\"\"\n\nfrom math import *\nimport re\n\nS = input()\n\npattern = r\"\\d{1,6}\"\nnums = re.findall(pattern, S)\n\nN = int(nums[0])\nM = int(nums[1])\n\nS = S.split(\"\\n\")\n\nN_list = []\nM_list = []\n\nfor i in range(len(S)):\n    nums = re.findall(pattern, S[i])\n    N_list.append(float(nums[0]))\n    M_list.append(float(nums[1]))"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n0.500000\") == \"0.500000\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n0.500000\") == \"0.500000\"\n\"\"\""
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('20 30') == '-2.0'\n\"\"\""
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\n\"\"\"\n\nimport unittest\nimport io\nimport math\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"0 49.9\"\"\"\n        output = \"\"\"0.0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"0 0\"\"\"\n        output = \"\"\"0.0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"30 17\"\"\"\n        output = \"\"\"4.8\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 49.9') == 0.0\n\"\"\""
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50.0 49.9\") == \"0.0\"\n\"\"\""
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('50 49.9') == '0.0'\nassert solution('0 0') == '0.0'\nassert solution('0 0.5') == '0.0'\nassert solution('0 20.0') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''0 49.9''') == '0.0'\nassert solution('''0 49.9\n50.0''') == '0.0'\nassert solution('''0 49.9\n50.0\n100.0''') == '0.9'\nassert solution('''0 49.9\n50.0\n100.0\n150.0''') == '0.7'\nassert solution('''0 49.9\n50.0\n100.0\n150.0\n200.0''') == '0.6'\n'''"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\n\nassert solution(\"49.9 0\") == \"0.0\"\n\n\"\"\"\n\nfrom fractions import Fraction\nfrom decimal import Decimal"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('49.9 0') == '0.0'\nassert solution('5 49.9') == '2.9'\nassert solution('5 49.9 49.9') == '2.9'\n\"\"\""
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 49.9\") == '0.0'\nassert solution(\"40 41.9\") == '0.0'\nassert solution(\"41.9 40.0\") == '-0.01'\nassert solution(\"10 0.0\") == '10.0'\nassert solution(\"0 0.0\") == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\n\"\"\""
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\\n2 3\\n4 1\") == \"2 1\\n3 2\\n4 1\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\\n3 2\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\nassert solution(\"5\\n2 3\\n4 1\\n3 1\\n5 2\") == \"2 2\\n5 3\\n4 1\\n3 2\""
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\\n\"\n\nprint(solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\"))"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\\n\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n\"\"\"\n\nimport sys\n\nclass Graph():\n\n    def __init__(self, size):\n        self.size = size\n        self.graph = {}\n        for i in range(size):\n            self.graph[i] = set()\n\n    def addEdge(self, u, v):\n        self.graph[u].add(v)\n\n    def dfs(self, start, visited):\n        visited.add(start)\n\n        for next in self.graph[start]:\n            if next not in visited:\n                self.dfs(next, visited)\n\n    def isCyclic(self):\n        visited = set()\n        for i in range(self.size):\n            if i not in visited:\n                self.dfs(i, visited)\n            if len(visited) == self.size:\n                return False\n        return True\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3\\n'\n\"\"\"\n\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parents = [i for i in range(n+1)]\n        self.ranks = [0 for i in range(n+1)]\n        self.sz = [1 for i in range(n+1)]\n\n    def find(self, x):\n        while self.parents[x]!= x:\n            self.parents[x] = self.parents[self.parents[x]]\n            x = self.parents[x]\n        return x\n\n    def union(self, x, y):\n        rx, ry = self.find(x), self.find(y)\n        if rx == ry:\n            return False\n        if self.ranks[rx] < self.ranks[ry]:\n            self.parents[rx] = ry\n            self.sz[ry] += self.sz[rx]\n        elif self.ranks[rx] > self.ranks[ry]:\n            self.parents[ry] = rx\n            self.sz[rx] += self.sz[ry]\n        else:\n            self.parents[ry] = rx\n            self.ranks[rx] += 1\n            self.sz[rx] += self.sz[ry]\n        return True\n\n    def is_connected(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def get_size(self, x):\n        return self.sz[self.find(x)]\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 1\n4 1\n''') == '''\n4 1\n2 1\n3 2\n1 3\n'''\n\nassert solution('''\n2\n1 2\n2 1\n''') == '''\n2 1\n1 2\n'''\n\nassert solution('''\n5\n1 2\n2 3\n3 1\n3 4\n4 5\n''') == '''\n4 1\n2 1\n3 2\n1 3\n3 4\n5 4\n'''\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 5 1 2 3 5 1 3') == 'forever'\nassert solution('6 5 1 2 3 4 5 1 3') == 'forever'\nassert solution('6 5 1 2 3 4 5 1 4') == 'forever'\nassert solution('6 5 1 2 3 4 5 1 5') == 'forever'\nassert solution('6 5 1 2 3 4 5 1 6') == 'forever'\n\n\"\"\"\nimport sys\nfrom typing import Dict, List, Tuple\n\nsys.setrecursionlimit(1_000_000)"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 6 3 5 3\\n1 2 5 3 5\") == '1'\nassert solution(\"3 2 6 1 5 2\\n3 1 5 2 5\") == 'forever'\nassert solution(\"3 1 5 1 5\\n1 1 1\") == 'forever'\n\"\"\""
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\n\"\"\"\n\n\"\"\"\n10-7:\nMy first solution was to take the partial sums of the array of length 2^n. Then, for each number, \nfind the index of the smallest element in the sum array that is larger than it. Then, just\ntake the total number of elements in the array with indices less than or equal to that index.\n\nBetter solution:\n\nO(nlog(n))\n\"\"\"\n\n\"\"\"\n10-8:\nThis is my solution. I'm getting the prefix sums from the array, and then using binary search\nto find the index of the smallest element in the prefix sums that is larger than target.\n\nO(nlog(n))\n\"\"\"\n\n\"\"\"\n10-9:\nI used the same solution as before, but instead of taking the prefix sums, I iterated\nover the array and summed up all the values, which makes it much faster.\n\nO(n)\n\"\"\"\n\n\"\"\"\n10-10:\nI used binary search to search for the last element smaller than target. Then, I iterated\nover the array from the last element in the array to the beginning, checking if the \ndifference between target and the current element is positive. If so, I set the current\nelement as the new target, and iterate over the array from the beginning to the\ncurrent element. If not, I increment the last element we were searching for by one.\n\nO(nlog(n))\n\"\"\"\n\n\"\"\"\n10-11:\nI used a similar solution as before, but instead of using prefix sums, I used a set of\ntwo pointers, one on the right and one on the left. The right pointer will begin at\nthe end of the array, and the left pointer will begin at the beginning. Once the\nright pointer has reached the end of the array, the left pointer will start at \nthe beginning of the array, and will always stay the length of the array.\n\nO(n)\n\"\"\"\n\n\"\"\"\n10-12:\nI used the binary search solution from 10-9, but instead of taking the prefix sums, I\niterate over the array and sum up the values, then do binary search on the sums. This\nmakes it O(nlog(n)).\n\"\"\"\n\n\"\"\"\n10-13:\nMy solution is O(n) time and O(1) space. I iterated over the array and summed up the\nvalues, then performed binary search.\n\nI also used the binary search from 10-9, but instead of taking the prefix sums, I\ntook the total sum of the array. This is the space complexity.\n\"\"\"\n\n\"\"\"\n10-14:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-15:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-16:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-17:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-18:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-19:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-20:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-21:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-22:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-23:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-24:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each iteration, calculated the total\nsum, which takes O(n) time and O(n) space.\n\"\"\"\n\n\"\"\"\n10-25:\nI simply iterated over the array, which takes O(n) time and O(1) space.\n\nThen, I iterated over the array, and, after each"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2 1 3 2') == 'forever'\nassert solution('5 5\\n1 2 5 3 5') == 'forever'\nassert solution('6 5\\n1 2 3 5 3') == 'forever'\nassert solution('6 5\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n1 2 3 5 2') == '1'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"forever\"\nassert solution(\"4 5\") == \"forever\"\nassert solution(\"4 6\") == \"forever\"\nassert solution(\"8 6\") == \"forever\"\nassert solution(\"8 7\") == \"forever\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 6 3 5 3\\n1 2 5 3 5\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 1 6 3 5 3') == '1'\nassert solution('1 1\\n0 1') == 'forever'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n1 1 1 1 1 1\\n1 1') == 'forever'\nassert solution('6 5\\n1 1 1 1 1 1\\n1 1') == 'forever'\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\n2 1 2\\n5\\n1') == '1', 'You should return 1 for the test case'\nassert solution('3 6\\n2 1 2\\n5\\n3') == 'forever', 'You should return forever'\n\"\"\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 1 3 1\\n4 5 3 1\") == \"forever\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 10\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\") == \"3\"\nassert solution(\"2 1 10\\n0 1 1 2 6\\n1 2 1 1 2\") == \"impossible\"\nassert solution(\"2 1 10\\n0 1 1 2 6\\n1 1 1 1 2\") == \"3\"\n\"\"\"\n\nimport math\nimport typing as t\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    ('n','m','s','m_line'),\n    (\n        pytest.param(2, 1, 10, ['0 1 1 2 6']),\n        pytest.param(2, 1, 10, ['0 1 1 2 6', '1 2 1 1 2']),\n        pytest.param(2, 1, 10, ['0 1 1 2 6', '1 1 1 1 2']),\n    )\n)\n"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 10 10\\n0 1 1 1 2 5\\n0 1 1 3 2 2\\n0 1 1 3 1 3\\n0 1 1 3 3 3\") == \"3\"\nassert solution(\"5 2 1\\n0 2 1 1 2\\n0 1 1 1 1\\n0 3 3 1 2\\n0 3 4 3 2\") == \"impossible\"\nassert solution(\"5 2 1\\n0 1 1 1 2\\n0 1 1 3 2\\n0 1 1 3 1\\n0 1 1 3 3\") == \"3\"\nassert solution(\"10 10 5\\n0 2 1 1 2\\n0 1 1 1 1\\n0 3 1 3 1\\n0 3 1 3 3\\n0 4 1 4 3\\n0 4 1 4 3\\n0 4 1 4 3\\n0 4 1 4 3\\n0 5 1 5 1\\n0 5 1 5 1\\n0 5 1 5 1\\n0 5 1 5 1\\n0 5 1 5 1\\n0 5 1 5 1\\n0 5 1 5 1\") == \"7\"\nassert solution(\"10 10 10\\n0 1 1 1 2\\n0 1 1 3 2\\n0 1 1 3 1\\n0 1 1 3 3\\n0 1 1 3 3\\n0 1 1 3 3\\n0 1 1 3 3\\n0 1 1 3 3\\n0 1 1 3 3\\n0 1 1 3 3\\n0 1 1 3 3\\n0 1 1 3 3\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('2 1 10\\n1 0 1 2 6') == 'impossible'\nassert solution('2 2 10\\n0 1 1 2 6') == '3'\n\n-----Explanation-----\nIn the first case, you could leave at the earliest time $3$ after the meeting starts, when the first tram arrives at stop $0$ and departs in $3$ seconds. In the second case, there is no way to make it on time.\n'''\n\nimport sys\nimport os\nimport time\nfrom io import StringIO"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('1 1 1 1 1') == 'impossible'\nassert solution('2 1 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('2 1 10\\n0 1 1 2 5') == 'impossible'\n\n\"\"\"\n\nimport sys\n\nn, m, s = map(int, sys.stdin.readline().split())\n\nlines = []\nfor _ in range(m):\n    u, v, t_0, p, d = map(int, sys.stdin.readline().split())\n    lines.append([u, v, t_0, p, d])"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 2 20\n0 1 1 2 6\n0 2 1 1 1''') == '3'\nassert solution('''3 2 20\n0 1 1 2 6\n0 2 1 1 1''') == 'impossible'\nassert solution('''1 1 1 1\n0 1 1 1 1''') == '0'\nassert solution('''2 2 3\n0 1 1 1 6\n0 2 1 1 1''') == 'impossible'\nassert solution('''2 2 3\n0 1 1 1 6\n0 2 1 1 1''') == '3'\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == \"2\\n1 2\"\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 100\\n99 1\\n1 99\\n') == '2\\n1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '1\\n1\\n'\n\nassert solution(\n    '2 100\\n99 1\\n1 99'\n) == '2\\n1 2\\n'\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == '1'\nassert solution(test_input_1) == '2'\nassert solution(test_input_2) == '3'\nassert solution(test_input_3) == '6'\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == '2\\n1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == \"2\\n1 2\"\nprint(solution(stdin))\n\n-----Notes-----\nThe order of the apps does not matter.\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 1\\n99 1\") == \"2\\n1 2\"\n\"\"\"\n\nfrom typing import List, Tuple\nimport math\nimport collections\nfrom unittest import mock, skip"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\\n\") == \"2\\n1 2\"\n\nassert solution(\"2 100\\n1 2\\n1 2\\n\") == \"0\\n\"\n\nassert solution(\"2 100\\n2 1\\n2 1\\n\") == \"1\\n1 2\"\n\nassert solution(\"2 100\\n2 1\\n2 99\\n\") == \"1\\n1 2\"\n\nassert solution(\"2 100\\n99 1\\n1 99\\n\") == \"1\\n1 2\""
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 100\\n99 1\\n1 99\\n') == '2\\n1 2\\n'\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == '2\\n1 2'\n\nassert solution(\"1 100\\n1 1\") == '1\\n1'\n\nassert solution(\"2 100\\n99 1\\n1 99\\n1 1\") == '2\\n1 2'\n\nassert solution(\"2 100\\n99 1\\n1 99\\n1 1\\n1 1\") == '2\\n1 2'\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H\", \"T\", 0.5) == 0.5"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H' * 10 ** 5 + 'T' * 10 ** 5 + 'H' * 10 ** 5 + 'T' * 10 ** 5) == '0.5'\nassert solution('H' * 10 ** 5 + 'T' * 10 ** 5) == '0.5'\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('HHT') == '0'\nassert solution('THH') == '1'\nassert solution('HHTH') == '0'\nassert solution('THTH') == '0'\nassert solution('HTHH') == '1'\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H\", \"T\", 0.5) == 0.5\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom typing import Dict, List, Set\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H\", \"T\", 0.5) == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HTHTH\") == 0.5\nassert solution(\"HTTH\") == 0.25\nassert solution(\"THT\") == 0.25\nassert solution(\"THTH\") == 0.5\n\n\"\"\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('H') == '1'\nassert solution('TH') == '0'\nassert solution('HHH') == '1'\nassert solution('TTT') == '0'\n\"\"\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('HT') == '0.0'\nassert solution('H') == '1.0'\nassert solution('HH') == '0.0'\nassert solution('TH') == '0.0'\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H\", \"T\", 0.5) == \"0.5\"\nassert solution(\"HH\", \"TT\", 0.5) == \"0.25\"\nassert solution(\"HHH\", \"TTT\", 0.5) == \"0.125\"\n\nSample Input:\nT\nT\n0.4\nSample Output:\n1.0"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '8'\nassert solution('6') == '49'\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"16\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '8\\n1 3 5 7 9 11 13 15'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '8\\n1 3 5 7 9 11 13 15'\nprint(solution(stdin.readlines()))\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '8'\nassert solution('1') == '4'\nassert solution('5') == '3'\nassert solution('100') == '48'\nassert solution('123') == '24'\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == '8'\nassert solution(4) == '16'\nassert solution(5) == '32'\nassert solution(6) == '64'\nassert solution(7) == '128'\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '8\\n1 3 5 7 9 11 13 15'\n\n------Problem-----\n\n* There exists at least one valid placement of mines for each $n$.\n* If $m$ is the number of safe cells, then each safe cell has at least $m - 1$ adjacent mines, and each mine has exactly $m$ adjacent safe cells.\n* Given the side length $n$, write a function that outputs the minimum number of mines required for a valid placement.\n\n* The solution is in O(n2).\n* The number of cells is $4n+4$, and it is bounded by $n^2$.\n* Space complexity is in $\\mathcal{O}(1)$.\n\n------Solution------\n\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"8\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '8'\nassert solution('6') == '36'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"6\") == \"16\"\nassert solution(\"10\") == \"50\"\nassert solution(\"1\") == \"4\"\nassert solution(\"13\") == \"64\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\"\n) == \"3\\n1\\n0\"\nprint('Hooray!')\n\n\"\"\"\nfrom utils.test import Test as test\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 5 7\") == \"3\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n') == '1'\n\"\"\"\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\") == \"3\\n1\\n0\""
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5') == '3\\n1\\n0'\n\nassert solution('6\\n4 8 12 32 0 32 16\\n2\\n1 4\\n1 6') == '0\\n0'\n\nassert solution('5\\n3 5 7 10 9\\n2\\n2\\n2 5\\n1 6') == '2\\n2\\n0'\n\nassert solution('5\\n3 5 7 10 9\\n2\\n2\\n2 5\\n1 6') == '2\\n2\\n0'\n\nassert solution('6\\n3 5 7 10 9\\n2\\n2\\n2 5\\n1 6') == '2\\n2\\n0'"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5 7\") == \"3\"\nassert solution(\"1 3 5 7\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 5\") == \"0\"\n\n\"\"\"\n\nimport sys\n\na = [int(s) for s in sys.stdin.readline().split()]\n\nK = a[0]\nx = a[1:]\n\nQ = int(sys.stdin.readline())\nl = []\nr = []\nfor i in range(Q):\n    a = [int(s) for s in sys.stdin.readline().split()]\n    l.append(a[0])\n    r.append(a[1])\n\nxor = []\nfor i in range(Q):\n    xor.append(sum([x[j] for j in range(l[i]-1, r[i])]))\n\nprint('\\n'.join(map(str, xor)))\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n\") == \"3\\n1\\n0\"\n\"\"\""
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n'\n) == '0\\n3\\n1\\n0'\nassert solution(\n    '5\\n1 3 5 7 11 13\\n3\\n2 2\\n2 5\\n1 5\\n'\n) == '3\\n1\\n0\\n3\\n1'\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n\"\"\"\n) == \"\"\"\n3\n1\n0\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n\"\"\"\n) == \"\"\"\n3\n1\n0\n\"\"\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 -2 0\") == \"0\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\nimport math\n\nfrom typing import List\n\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n\n\nclass Line:\n    def __init__(self, p1: Point, p2: Point):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __eq__(self, other):\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def __repr__(self):\n        return f\"({self.p1},{self.p2})\"\n\n\n@dataclass\nclass Section:\n    size: int\n    points: List[Point]\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1\n1 1 -2 0\n''') == '0'\n\nassert solution('''2 2\n1 1 -2 0\n1 -1 -1 1\n''') == '1'\n\nassert solution('''3 3\n1 1 -2 0\n1 -1 -1 1\n1 1 -2 0\n''') == '1'\n\nassert solution('''3 3\n1 1 -2 0\n1 -1 -1 1\n1 -1 -1 1\n''') == '2'\n\nassert solution('''3 3\n1 1 -2 0\n-1 -1 -1 1\n1 1 -2 0\n''') == '3'"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 1\n1 1 -2 0''') == '0'\nassert solution('''2 1\n1 1 3 0\n''') == '2'\n'''\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 1 -2 0') == 0\nassert solution('2 1\\n1 1 -10000 0') == 0\nassert solution('2 1\\n1 1 2 0') == 0\nassert solution('2 1\\n1 1 -10000 2') == 0\nassert solution('2 1\\n1 1 0 2') == 0\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 1\n1 1 -2 0\n\"\"\") == '0'\n\"\"\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(\"3 1\\n-1 1 0 1\") == \"0\"\nassert solution(\"4 1\\n0 1 1 1 1\") == \"1\"\nassert solution(\"4 1\\n1 1 0 1 1\") == \"1\"\nassert solution(\"4 1\\n1 1 1 1 1\") == \"0\"\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == 0\n\"\"\""
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '194'\nassert solution('2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n2021 10 29') == '337'\n\n'''\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4') == '1 2 3 4'\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\") == \"194\\n2019 10 25\\n2020 10 30\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\\n10 12 15\") == \"\"\nassert solution(\"1\\n10 12 13\") == \"10 12 13\"\n\"\"\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '194\\n2019 10 25\\n2020 10 30'\nassert solution('2\\n5\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '194\\n2020 10 30'\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n\") == \"194\"\nassert solution(\"1\\n0\\n2019 10 12\\n2019 10 13\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n\") == \"14\"\nassert solution(\"1\\n1\\n2019 10 12\\n2019 10 13\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n\") == \"194\"\n\n\"\"\"\n\nimport sys\nimport math\nimport typing as t\n\nDEBUG = False\ndata: t.List[str] = []\nfor line in sys.stdin:\n    line = line.rstrip('\\r\\n')\n    data.append(line)\n\ntest_data = \"\"\"\n5\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n\"\"\""
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\") == '194\\n2019 10 25\\n2020 10 30'\nassert solution(\"1\\n0\") == '0'\nassert solution(\"3\\n2\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\") == '0\\n2019 10 25\\n2020 10 30'\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\") == \"194\\n2019 10 25\\n2020 10 30\"\nassert solution(\"2\\n5\\n2020 10 02\\n2020 10 16\\n2020 10 23\") == \"126\"\n\"\"\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '194\\n2019 10 25\\n2020 10 30'\nassert solution('2\\n1\\n2019 10 02\\n2019 10 18\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '1011\\n2019 10 18'\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\") == \"194\\n2019 10 25\\n2020 10 30\"\n\"\"\"\n\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\n\"\"\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\\n6 10 10 10 10 0\") == \"negative-infinity 0\\n5 12.5\\nnegative-infinity -5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\\n6 10 10 10 10 0\") == \"-5\\n-1.5\\n0\\n5\"\n\n\"\"\""
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5\\n5 6 7 8 9\\n') == '1 2\\n5 8\\n'\n\"\"\"\nimport sys"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0''') == '''negative-infinity 0\n5 12.5\nnegative-infinity -5'''\nprint('Test pass.')\n\n-----Explanation-----\nIn the first case, you would hit the wall at the point (1,1).\nIn the second case, you would hit the wall at (5,8) and (6,9).\nIn the third case, you would hit the wall at (5,10) and (6,11).\n\n2\n2\n4\n2\n2\n8\n2\n4\n'''\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity -5'\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\"\"\") == \"negative-infinity 0\\n5 12.5\\nnegative-infinity -5\"\n\n\"\"\"\nSolution:\n\nstart = map(float, stdin.readline().strip().split())\nend = map(float, stdin.readline().strip().split())\npos = map(float, stdin.readline().strip().split())\n\nimport math\n\np1 = [start[0], start[1]]\np2 = [end[0], end[1]]\np3 = [pos[0], pos[1]]\n\na = math.fabs(p1[0] - p2[0])\nb = math.fabs(p1[1] - p2[1])\n\nc = math.fabs(p2[0] - p3[0])\nd = math.fabs(p2[1] - p3[1])\n\nprint(a + b + c + d)\n\"\"\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\") == \"0\\n12.5\\n0 -5\\n\"\n\"\"\"\n\nimport math\nimport unittest\n\nstdin = \"\"\"0 10 10 10 10 0\n0 10 10 5 10 0\n6 10 10 10 10 0\n\"\"\""
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\") == \"negative-infinity 0\\n5 12.5\\nnegative-infinity -5\"\n\n\"\"\"\n\nfrom decimal import Decimal, InvalidOperation\nfrom typing import List, Tuple\n\nfrom intcode.computer import Computer\nfrom intcode.operations import get_value\n\nOPEN = \".\"\nWALL = \"#\"\nFREE = \" \"\n\nLASER_TEST = False\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n\"\"\") == '0 0\\n5 12.5\\n0 -5'\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000') == '2'\n\"\"\"\n\n\"\"\"\nStart with an empty itinerary\nAccept a number of orders, with a list of destination type, distance, and angle in one line\nBuild a list of itinerary in order\nIf the itinerary exceeds the maximum allowed distance, return IMPOSSIBLE\nConvert the list of itinerary into a string\n\"\"\"\nimport math\n\ninputs = open('input.txt', 'r').readlines()\n\nmax_itinerary_distance = float(inputs[0])\nitinerary = []\n\nfor line in inputs[1:]:\n    itinerary.append([int(x) for x in line.split(' ')])"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\\n') == '2'\n\"\"\""
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\"\"\""
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\"\"\""
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\\\n100 30000\\\\n200 20000\\\\n300 10000\\\\n400 0\\\\n50 10000\\\\n75 20000\\\\n400 -40000\") == \"2\"\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom collections import deque\nimport sys\nfrom typing import List, Tuple\n\nstdin = open(sys.argv[1], 'r').read().strip()\nlines = stdin.splitlines()\n\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n    type: int = None\n"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n\"\"\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n\"\"\"\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n\"\"\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n\"\"\"\n3 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n\"\"\"\n) == \"2\""
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\nassert solution(\"4 4\\n200 1000\\n300 0\\n100 3000\\n200 0\\n50 3000\\n75 0\\n400 -40000\") == \"IMPOSSIBLE\"\n\nassert solution(\"4 4\\n200 1000\\n300 0\\n100 3000\\n200 0\\n50 3000\\n75 0\\n400 -40000\") == \"2\"\n\nassert solution(\"4 4\\n200 1000\\n300 0\\n100 3000\\n200 0\\n50 3000\\n75 0\\n400 -40000\") == \"2\"\n\nassert solution(\"4 4\\n200 1000\\n300 0\\n100 3000\\n200 0\\n50 3000\\n75 0\\n400 -40000\") == \"2\""
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\nassert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\nassert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\nassert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\nassert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100''') == '345 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\\nrotS 2 1\\nnegR 2\"\nassert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\\nrotS 2 1\\nnegS 1\\nnegR 2\"\nassert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\\nrotS 2 1\\nnegS 1\\nnegR 2\"\nassert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\\nrotS 2 1\\nnegS 1\\nnegR 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\\nrotS 2 1\\nnegR 2\"\nassert solution(\"2 4\\n-8 0 -4\\n11 4 0 100\") == \"342 2\\nrotS 1 2\"\n\"\"\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2'\nassert solution('1 3\\n1 2 3') == '6 3\\nrotS 1 2\\nnegR 1'\n\"\"\""
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100''') == '345 2'\n\"\"\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2'"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2'\nprint(solution(input()))\n\n---"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n3 1 1''') == '0.5'\nassert solution('''4 2\n4 1 1''') == '1.0'\nassert solution('''3 2\n3 2 2''') == '2.5'\nassert solution('''5 1\n3 2 2 2 3''') == '2.5'\nassert solution('''4 2\n4 1 1''') == '1.0'\n\n'''\nSolution:\nmax: (x-E_j)^2 = max(x)^2 - 2 * E_j * x + E_j^2\nmin: (x-E_j)^2 = min(x)^2 - 2 * E_j * x + E_j^2\n\n'''\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\n\nSample Input:\n1 4\n7 1 2 3 5 6\nSample Output:\n5\n\"\"\"\nimport math\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n3 1 1') == '0.5'\n\"\"\"\n\nimport sys\n\na = [int(i) for i in sys.stdin.readline().split()]\n\nprint(sum((i - min([i - j for j in range(a[1])])) ** 2 for i in [int(i) for i in sys.stdin.readline().split()]))"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\nassert solution(\"2 2\\n2 1 1\") == \"1.0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\nassert solution(\"4 4\\n1 10^6 1 10^6 10^6 2 10^6\") == \"2\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == e\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n3 1 1\\n\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n3 1 1\\n') == '0.5'\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\") == \"1 4 5\\n2 6 7\"\nassert solution(\"1 1\") == \"impossible\"\n\"\"\"\n\nfrom collections import deque, Counter\n\nn, m = map(int, input().split())\n\nroads = [tuple(map(int, input().split())) for _ in range(m)]\n\ncities = set()\nfor i in range(1, n + 1):\n    cities.add(i)\n\nedges = {u: [] for u in cities}\nfor u, v in roads:\n    edges[u].append(v)\n    edges[v].append(u)\n\nvisited = set()"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n1 2\\n2 1\") == \"1 4\\n2 6\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9''') == '1 4 5\\n2 6 7'\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n2 1\\n3 2') == 'impossible'\n\"\"\"\n\nn, m = (int(x) for x in input().split())\nroads = [tuple(map(int, input().split())) for _ in range(m)]\n\ngraph = [[] for _ in range(n + 1)]\nfor x, y in roads:\n    graph[x].append(y)\n    graph[y].append(x)"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n4\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7'\nassert solution('2\\n4\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == 'impossible'\nassert solution('2\\n4\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == 'impossible'\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\") == \"1 4 5\\n2 6 7\"\nassert solution(\"9 9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n1 9\") == \"1 2 3 4 5 6 7 8\"\nassert solution(\"6 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"9 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"9 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 10\") == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7\\n'\nassert solution('9 9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 9\\n1 2\\n1 3') == 'impossible'\nassert solution('9 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 2\\n1 3') == 'impossible'\nassert solution('9 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\\n6 8\\n7 8\\n7 9\\n8 9\\n8 10\\n9 10\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\\n6 8\\n7 8\\n7 9\\n8 9\\n8 10\\n9 10\\n1 2\\n1 3\\n1 4\\n2 4\\n2 5\\n3 5\\n3 6\\n4 6\\n4 7\\n5 7\\n5 8\\n6 8\\n6 9\\n7 9\\n7 10\\n8 10\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n3 5\\n3 6\\n3 7\\n4 7\\n4 8\\n4 9\\n5 9\\n5 10\\n6 10\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n4 7\\n5 7\\n5 8\\n6 8\\n6 9\\n7 9\\n7 10\\n8 10\\n9 10') == '1 4 5\\n2 6 7\\n3 7 10'\nassert solution('6 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6') == 'impossible'\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\") == \"1 4 5\\n2 6 7\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9''') == '''1 4 5\n2 6 7\n'''\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n4 5\\n1 2\\n2 3\\n4 5\") == '1 4 5\\n2 6 7'\nassert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n4 5\\n1 2\\n2 3\\n4 5\") == '1 4 5\\n2 6 7'\nassert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n4 5\\n1 2\\n2 3\\n4 5\") == '1 4 5\\n2 6 7'\nassert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n4 5\\n1 2\\n2 3\\n4 5\") == '1 4 5\\n2 6 7'\nassert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n4 5\\n1 2\\n2 3\\n4 5\") == '1 4 5\\n2 6 7'\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2') == '8'\nassert solution('11 2') == '13'\nassert solution('11 3') == '15'\nassert solution('7 4') == '10'\nassert solution('11 5') == '15'\n\"\"\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\") == \"13500\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\") == \"13500\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 2\\\\n12000\\\\n9000\\\\n4500\\\\n10000\\\\n12000\\\\n11000\\\\n12000\\\\n18000\\\\n10000\\\\n9000\\\\n12000\") == '13500'\nassert solution(\"1 2\\\\n12000\\\\n9000\\\\n4500\\\\n10000\\\\n12000\\\\n11000\\\\n12000\\\\n18000\\\\n10000\\\\n9000\\\\n12000\") == '13500'\n\"\"\""
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\") == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"13500\"\nprint(solution(stdin))"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\nassert solution('3 2\\n12000\\n10000\\n4500\\n') == '20000'\nassert solution('4 2\\n10000\\n10000\\n10000\\n10000\\n') == '320000'\nassert solution('8 5\\n10000\\n9000\\n9000\\n9000\\n9000\\n9000\\n9000\\n9000\\n9000\\n9000\\n9000') == '4200000'"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\nassert solution('2 3\\n10000\\n9000\\n10000\\n12000\\n12000') == '8200'\nassert solution('5 3\\n4500\\n4500\\n4500\\n10000\\n10000') == '28500'\nassert solution('5 3\\n10000\\n10000\\n10000\\n10000\\n10000') == '10000'\nassert solution('3 1\\n10000\\n10000\\n10000\\n10000\\n10000') == '10000'\n\n\"\"\""
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '6'\nassert solution('1 1 1') == '3'\nassert solution('1 2 3 4') == '10'\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\") == \"13500\"\n\nprint(solution(\"12 4\\n50000\\n5000\\n5000\\n5000\\n5000\"))\n\n-----Notes-----\nWhen the car is at the stadium, each person can take up to four passengers.\nYou may assume that the first passenger is always the driver.\nYou must drive all people from your house to the stadium.\nYou can drive any passenger to and from the stadium.\nYou can assume that no person in your house spends more than 10 seconds at your house, and any person in the stadium spends less than 10 seconds at the stadium.\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data) == expected_result\nprint(\"Success\")\n\n-------------------------------\n\nA customer enters the store and buys four items:\n\n1. Regular Tea (3)\n2. Lemonade (4)\n3. Soup (5)\n4. Coffee (6)\n\nWhen the customer is finished, they are given the option to select what order they want to ship. They would like to ship their items in this order:\n\n1. Tea, Lemonade, Soup, Coffee (exactly the same as entered)\n2. Tea, Lemonade, Coffee, Soup (exactly the same as entered)\n3. Tea, Soup, Lemonade, Coffee (exactly the same as entered)\n4. Tea, Soup, Coffee, Lemonade (exactly the same as entered)\n\nHowever, this order is not acceptable. So the customer will choose a different order:\n\n1. Tea, Soup, Lemonade, Coffee (exactly the same as entered)\n2. Tea, Lemonade, Coffee, Soup (exactly the same as entered)\n3. Tea, Soup, Lemonade, Coffee (exactly the same as entered)\n4. Tea, Lemonade, Coffee, Soup (exactly the same as entered)\n\nHowever, the customer still wants to ship the items in the same order as entered. So the first option is also acceptable.\n\nYour task is to determine whether the requested order is a possible order or not.\n\nInput\nThe input consists of one or more lines with one to four items from the set above, one on each line. The items are separated by exactly one space.\n\nOutput\nYour output must consist of one line per input line. If the requested order is possible, print \"Yes\" (without quotes) in the first line, otherwise print \"No\" (without quotes) in the second line.\n\nConstraints\nThere are no more than 4 items in each line\nEach item is either Regular Tea, Lemonade, Soup, or Coffee\n\nSample Input\nRegular Tea Lemonade Soup Coffee\nNo\nLemonade Coffee Soup Tea Regular Tea\nYes\nRegular Tea Regular Tea Lemonade Soup Coffee\nYes\nLemonade Coffee Lemonade Regular Tea Soup\nNo\n\nSample Output\nYes\nNo\nYes\nYes\n\n-------------------------------\n\nfrom collections import deque\nfrom sys import stdin"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdrin) == expected\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 16\\nHot cross buns! = Hot cross buns! = 4 4 4 4 4 4 4 4\\n1 2 2 2 2 2 2 2 4 4 4 4 4\") == \"Hot cross buns! = Hot cross buns! = ___Hot_cross_buns!_=\\n___Hot_cross_buns!_=_________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=__________One_a_pen-_ny,_Two_a_pen-_ny,\\n\"\n\n\"\"\"\n\nimport datetime\nimport re\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 4 4 4 4\\n') == 'Hot cross buns!_=___Hot cross buns!_=\\n____________________Hot cross buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nprint('Test pass.')\n\n-----"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4\\n\") == 'Hot cross buns! = Hot cross buns! =\\n____________________Hot cross buns!=\\nOne a pen- ny, Two a pen- ny, Hot___cross____buns!=\\nHot___cross____buns!=________One a pen- ny, Two a pen- ny,'\n\n\"\"\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 16\\n\"\n    \"Hot cross buns!\\n\"\n    \"4 4 4 4 4 4 4 4\\n\"\n    \"One a pen- ny, Two a pen- ny, Hot cross buns!\\n\"\n) == (\"Hot cross buns!_=___Hot cross buns!_=\\n\"\n\"____________________Hot cross buns!_=\\n\"\n\"One a pen- ny, Two a pen- ny, Hot___cross____buns!_=\\n\"\n\"Hot___cross____buns!_=________One a pen- ny, Two a pen- ny,\\n\"\n)\n\n\"\"\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 16\\nHot cross buns!\\n4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns!\") == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\"\n    "
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\") == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n\"\n\"\"\"\n\nfrom collections import namedtuple\n\nTime = namedtuple('Time', ('count','syllable'))\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 16\\nHot cross buns!\\n4 4 4 4 4 4 4 4\\nTwo a pen- ny,\\n2 2 2 2 2 2 2 2 4 4 4 4\\n\") == \"\"\"Hot cross buns!_=___Hot cross buns!_=\n____________________Hot cross buns!_=\nOne a pen- ny, Two a pen- ny, Hot___cross____buns!_=\nHot___cross____buns!_=________One a pen- ny, Two a pen- ny,\n\"\"\""
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 16\\nHot cross buns!\\n4 4 4 4 4 4 4 4\\n1 2 2 2 2 2 2 2 4 4 4 4\") == \"Hot cross buns!\\n_Hot cross buns!_\\n_Hot cross buns!_=\\n___Hot cross buns!_=\\n_Hot cross buns!_=___\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\") == \"33\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nimport math\nimport heapq\nimport itertools\nimport re\nimport array\nfrom typing import List, Tuple, Dict, Set\nfrom functools import lru_cache\n\nfrom.lib import *\n\nsys.path.append(os.path.join(os.path.dirname(__file__), '..', 'common'))\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33''') == '33'\n\n\"\"\"\n\nG, K, R = [int(n) for n in stdin.split()]\nroads = [tuple(int(n) for n in stdin.split()) for _ in range(R)]\n\nvenues = [0] * K\ngigs = [0] * G\n\nfor start, end, time in roads:\n    venues[start - 1] += time\n    venues[end - 1] += time\n    gigs[start - 1] += time\n    gigs[end - 1] += time\n\ncurrent_best_total = 0\ncurrent_best_venue = None\nfor venue, gig_time in enumerate(venues):\n    if gig_time > current_best_total:\n        current_best_total = gig_time\n        current_best_venue = venue + 1\n\nprint(current_best_total)"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n'''\n\n'''\nThe greatest value that can be made is the maximum value of any of the possible\ncombinations of the set of bidirectional roads.\n'''"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == expected_result\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == \"33\"\n\"\"\"\n\ngigs, venues, roads = [int(x) for x in stdin.strip().split()]\n\nbidirectional_roads = []\nfor _ in range(roads):\n    a, b, t = [int(x) for x in stdin.strip().split()]\n    bidirectional_roads.append((a, b, t))\n    bidirectional_roads.append((b, a, t))\nbidirectional_roads = sorted(bidirectional_roads, key=lambda x: x[2])\n\nbidirectional_roads = set([(a, b) for a, b, _ in bidirectional_roads])\n\ngig_scores = []\nfor _ in range(gigs):\n    a, s, e, m = [int(x) for x in stdin.strip().split()]\n    gig_scores.append((a, s, e, m))\n\ngig_scores = sorted(gig_scores, key=lambda x: x[3])"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == \"33\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\") == \"33\"\nassert solution(\"2 2 1\\n1 4 6 6\\n1 6 10 5\") == \"33\"\nassert solution(\"2 3 1\\n1 2 10\\n1 3 10 5\") == \"33\"\nassert solution(\"2 3 1\\n1 3 10 5\") == \"33\"\nassert solution(\"4 2 1\\n1 2 10\\n1 3 10 5\\n1 4 10 5\") == \"33\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == 33\nassert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == 70\nassert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == 94\nassert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == 94\n\n-----Constraints-----\n$G$, $K$, and $R$ are integers.\n$1 \\leq G \\leq 200000$\n$1 \\leq K \\leq 100$\n$0 \\leq R \\leq \\min \\left(4000, K(K-1)/2\\right)$\n$A_ i, B_ i, T_ i \\in {1,..., K}$\n$1 \\leq S_ i < E_ i \\leq 1000000000$\n$1 \\leq M_ i \\leq 1000000$\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == 405\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n\nassert solution('''\n2\n20 15 10\n7 7\n''') == '7'\n\nassert solution('''\n5\n20 15 10\n7 7\n10 13 20\n3 6\n8 12\n''') == '6'\n\nassert solution('''\n3\n20 15 10\n7 7\n10 13 20\n3 6\n8 12\n''') == '8'\n\nassert solution('''\n2\n20 15 10\n7 7\n10 13 20\n3 6\n8 12\n''') == '6'"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n3\n20 15 10\n7 7\n30 0\n    \"\"\".strip()\n) == '405'\n\n\"\"\"\n3\n20 15 10\n7 7\n30 0\n    \"\"\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'3\\n20 15 10\\n7 7\\n30 0\\n') == '405'\nassert solution(\n'3\\n20 15 10\\n7 7\\n30 0\\n')!= '406'\n\n\"\"\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n1 1\\n2 2\\n') == '3'\nassert solution('3 3\\n1 2\\n0 2\\n2 3\\n') == '7'\nassert solution('3 3\\n1 2\\n0 3\\n2 3\\n') == '8'\nassert solution('3 3\\n1 2\\n0 3\\n2 3\\n') == '7'\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n7 7\\n30 0\") == \"405\"\n\nassert solution(\"3\\n7 7\\n1 0\") == \"11\"\nassert solution(\"3\\n1 0\\n7 7\") == \"16\"\nassert solution(\"3\\n1 0\\n1 0\") == \"6\"\n\"\"\""
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('3\\n20 7\\n30 0') == '405'\nassert solution('3\\n20 0\\n7 7') == '40'\nassert solution('3\\n7 7\\n20 0') == '40'\nassert solution('3\\n7 7\\n20 20') == '40'\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n7 7\\n30 0\") == \"405\"\n\"\"\"\n\nn, m = map(int, input().split())\nprice = list(map(int, input().split()))\ndep = list(map(int, input().split()))\n\ndp = [[0 for _ in range(n+1)] for _ in range(m+1)]\ndp[0][0] = 0\nfor i in range(1, m+1):\n    for j in range(1, n+1):\n        if j < dep[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = min(dp[i-1][j], dp[i-1][j-dep[i-1]] + price[i-1])\n\nprint(dp[m][n])\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nprint('Hooray')\n\n'''\n\nimport math\nimport sys\n\ninput()\nprices = list(map(int, sys.stdin.readline().split(' ')))\ncounts = list(map(int, sys.stdin.readline().split(' ')))\nlimit = int(sys.stdin.readline())\ntrips = [tuple(map(int, sys.stdin.readline().split(' '))) for _ in range(limit)]\n\nprint(prices, counts, limit, trips)\n\nfrom collections import Counter, defaultdict\n\ndp = defaultdict(list)\ndp[0] = [0]\nfor index, price in enumerate(prices):\n    print(price, counts[index])\n    dp[price] = dp[price - 1] + [sum(dp[p] + math.ceil((price - p) / counts[index]) for p in prices[0:index]) + 1]\n\nmin_cost = math.inf\nfor start, end in trips:\n    min_cost = min(min_cost, dp[end] - dp[start - 1])\n\nprint(min_cost)\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n\"\"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\n\nsolution('4\\n1 2 4 7')\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\n\"\"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n\"\"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\n\"\"\"\n\nn = int(stdin.readline())\n\nweights = list(map(int, stdin.readline().split()))\n\nweights.sort()\nprint(weights[-1] * 4)\nprint(weights[0] * 4)\nprint(len(set(weights)))\nprint(sum(weights) // 4)\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n\n-------\n\nThe maximum possible weight of a $4$-pack for the given set of figurines is 28.\n\nThe minimum possible weight of a $4$-pack for the given set of figurines is 4.\n\nThere are 21 distinct weights of figurines in the set, so the number of distinct weights is 21.\n\nThe average weight of a $4$-pack for the given set of figurines is 14.0.\n\"\"\"\n\nfrom itertools import combinations\n\nn = int(input())\n\nweights = list(map(int, input().split()))"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n\nfrom a1 import solution\n\nwith open('test_input.txt', 'r') as f:\n    solution(f.read())\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\nassert solution('4\\n1 2 3 4') == '6 10 4 10.0'\n\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\"\n\nassert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"no\"\n\nassert solution(\"4 3\\n1 2 3 4\\n2 3 4 1\") == \"yes\"\n\nassert solution(\"3 1\\n1 2 3\\n4 1 2\") == \"no\"\n\nassert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\") == \"no\""
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2\\n3 4\") == \"no\"\nassert solution(\"2 2\\n1 2\\n2 3\") == \"yes\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"no\"\nassert solution(\"4 2\\n1 2\\n3 4\") == \"yes\"\nassert solution(\"2 3\\n1 3\\n3 2\") == \"yes\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1') == 'yes'\nassert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2') == 'yes'\nassert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'yes'\nassert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n4 1 2 3') == 'yes'\nassert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3') == 'yes'\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"no\"\nassert solution(\"3 3\\n3 3 3\\n3 3 3\\n3 3 3\") == \"no\"\nassert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\") == \"no\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"no\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\"\n\n\"\"\"\n\nfrom itertools import product, permutations"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n\n\"\"\""
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end=\"\")\n\n----\n\na=input().split()\nm=int(a[0])\nn=int(a[1])\nk=int(a[2])\ns=[]\nfor i in range(k):\n    s.append(input().split())\n\nfor i in range(len(s)):\n    for j in range(len(s[i])):\n        s[i][j]=int(s[i][j])"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\nassert solution('''3 2\n1 2 3\n2 3 1\n''') == 'no'"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\nassert solution('''4 2\n1 2 3 4\n2 3 4 1\n''') == 'no'\n\n'''\nWe can easily solve this problem using backtracking. Instead of trying all possible values, we\u2019ll just try to solve the problem using the first $k$ rows only. Once we get a solution with $k$ rows, we know that $k+1$ rows will also be valid solutions.\n\nIf we are able to solve the problem using backtracking, we will end up with a list of valid solutions. If we are not able to solve the problem with backtracking, we will get an empty list of solutions.\n\nIt is important to note that a backtracking search guarantees that a valid solution will exist. If there is no solution, it will not be possible to find a valid solution using the first $k$ rows only.\n\nThe following is an implementation of the backtracking algorithm for the Superdoku problem.\n'''"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.0'\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000'\n\"\"\"\n\nn = int(stdin.readline())\nvalues = list(map(int, stdin.readline().split()))\n\nseen = set()\nmax_payout = 0\ncount = 0\ncounted = 0\nfor val in values:\n    if val in seen:\n        continue\n    seen.add(val)\n    counted += 1\n    if val <= -10 ** 9:\n        count += 1\n    if count == 2:\n        max_payout = max(max_payout, -counted / (count - 1))\n        count = 0\n        counted = 0\n        seen = set()\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\nassert solution('3\\n10 -10 10') == '0.500000'\nassert solution('10\\n10 -10 -10') == '0.0'\nassert solution('7\\n10 -10 -10 -10 10 -10 -10') == '0.400000'\nassert solution('10\\n-10 -10 -10 -10 -10 -10 -10') == '0.0'\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 10 -10 -4 10\") == \"10.000000000\"\n\"\"\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 10 -10 -4 10\") == \"10.0\"\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.0'\nassert solution('5\\n-10 -10 10 -4 10') == '0.0'\nassert solution('5\\n10 -10 -10 -10 -10') == '0.0'\nassert solution('5\\n10 10 10 10 10') == '0.0'\nassert solution('5\\n-10 -10 -10 -10 -10') == '0.0'\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 10 -10 -4 10\") == \"10.000000000\"\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndp = [float('-inf')] * n\ndp[0] = 0\ndp[1] = abs(s[1] - s[0])\nfor i in range(2, n):\n    dp[i] = max(abs(s[i] - s[i-1]), dp[i-1])\n\nprint(dp[n-1])\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000'\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nprint(solution(stdin))\n'''"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 1\nassert solution('4\\n1\\n2\\n3\\n4') == 0\nassert solution('4\\n1\\n2\\n3\\n4\\n5') == 4\nassert solution('5\\n1\\n2\\n3\\n4\\n5\\n6') == 10\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n6\\n7') == 4\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\\n2\\n45\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\nfrom math import gcd\nfrom functools import reduce\n\nn = int(input())\nnums = map(int, input().split())\n\nnums = list(nums)\n\ndivs = [1] * n\n\nfor i in range(2, int(n**0.5)+1):\n    for j in range(i, n):\n        if i*j % n == 0:\n            divs[j] *= gcd(i, j//i)\n\ncounter = Counter(divs)\n\nprint(counter[1])\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n'.join([\n    '2',\n    '3',\n    '30',\n    '45',\n])) == '1'\nassert solution('\\n'.join([\n    '4',\n    '2',\n    '3',\n    '30',\n    '45',\n])) == '2'\nassert solution('\\n'.join([\n    '2',\n    '2',\n    '3',\n    '30',\n    '45',\n])) == '0'\nassert solution('\\n'.join([\n    '2',\n    '3',\n    '3',\n    '30',\n    '45',\n])) == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == 1\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"30\\n3\\n2\\n45\") == 1\n\nimport math"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\n'''\n\nimport math\n\nn = int(input())\n\nmod = 10**9 + 7"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n30\\n3\\n2\\n45\") == \"1\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport math"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\n\"\"\"\n\nfrom fractions import Fraction\nimport math\n\nclass Flubber:\n    def __init__(self, v: float, num: int, den: int):\n        self.v = v\n        self.num = num\n        self.den = den\n\n    def __repr__(self):\n        return f\"F(v={self.v}, num={self.num}, den={self.den})\"\n\n    def __add__(self, other):\n        return Flubber(self.v + other.v, self.num * other.den + other.num * self.den, self.den * other.den)\n\n    def __mul__(self, other):\n        return Flubber(self.v * other.v, self.num * other.num, self.den * other.den)"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\"\"\""
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3''') == '''0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897'''"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\n'''\nimport math"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n\n\"\"\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\"\"\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n-----Notes-----\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n-----Problem-----\n\nThe world\u2019s largest water plant is dumping about $10^9$ gallons of water per day. A population of A people live in a city that is $10^6$ meters wide. The water is pumped out through small pipes that are less than 10 meters in length, and there are some pipes that are capable of pumping the water out in bulk. The pipes are connected and the water is pumped out in a single direction.\n\nYou must determine the maximum rate of water flow that can be sent through the pipes in the water plant. In order to do this, you need to determine the maximum water flow that can be pumped from any pipe in the water plant, and the maximum water flow that can be pumped in any pipe in the water plant.\n\nYou will use the following constraints:\n\nThe population must be in the same city as the water plant.\nThe water pumped out through a pipe must be able to reach every city in the world, assuming that the population can be fed once a day.\nA pipe cannot be connected to two locations, or from two locations to the same location.\nA pipe cannot be connected to two locations that are less than 10 meters apart.\nA pipe cannot be connected to two locations that are less than 100 meters apart.\nThe water pump is an unlimited source of water.\nThe water pump will run continuously if there are no constraints.\nThe water pump must be able to pump out the maximum water possible, independent of the population.\nThe water pump must be able to pump out the maximum water possible independent of the population.\nThe water pump must be able to pump out the maximum water possible independent of the population.\nThe water pump must be able to pump out the maximum water possible independent of the population.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one other pipe.\nEach pipe can only be connected to one"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdrin) == expected\n\n\"\"\""
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2') == '4'\nassert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n4\\n1 1\\n2 2') == '4'\nassert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n4\\n1 1\\n2 2\\n3 2\\n3 1') == '3'\nassert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n4\\n1 1\\n2 2\\n3 2\\n3 1\\n4\\n1 2\\n2 3') == '4'\nassert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n4\\n1 1\\n2 2\\n3 2\\n3 1\\n4\\n1 2\\n2 3') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('2\\n2\\n2\\n2') == '1'\nassert solution('3\\n0\\n0\\n0\\n0') == '1'\nassert solution('5\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '1'\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == \"4\"\nassert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n4\\n1 1\\n2 2\") == \"2\"\nassert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n4\\n0 0\\n0 3\") == \"1\"\n\nSample Input:\n2\n3\n0 0\n0 3\n3 0\n4\n0 0\n3 0\n2\n1 1\n2 2\nSample Output:\n3\n4\n-----\n3\n0 0\n0 3\n2 3\n2 0\n3\n1 1\n2 2\nSample Output:\n2\n4\n\"\"\"\n\nimport math\nfrom sys import stdin"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == 4\nassert solution(\"4\\n3 3\\n3 3\\n3 3\\n3 3\\n2\\n0 0\\n1 1\\n0 3\\n3 0\\n1 1\\n2 2\") == 0\n\n-----\nSample Input:\n3\n0 0\n0 2\n2 3\n0 2\n0 0\n0 2\n1 1\n1 1\n0 0\nSample Output:\n3\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 3\\n3 3\\n3 0') == '4'\nassert solution('3\\n1 1\\n2 2') == '2'\nassert solution('5\\n0 0\\n0 1\\n1 1\\n0 2\\n1 2') == '3'\nassert solution('5\\n0 0\\n0 1\\n1 1\\n0 2\\n0 3') == '4'\nassert solution('5\\n0 0\\n0 1\\n1 1\\n0 2\\n0 3') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '4'\nassert solution('0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2') == '4'"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == '4'\n\nimport math\nimport sys\n\nassert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == '4'\n\nassert solution(\"8\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n4 0\\n0 2\\n2 1\\n1 2\\n1 0\\n4 3\\n0 1\\n1 0\\n0 3\\n3 2\\n0 0\\n1 0\\n1 1\\n2 2\\n1 2\\n2 1\\n0 1\\n3 1\\n1 1\\n1 0\\n3 3\\n0 0\\n2 3\\n0 0\\n2 0\\n0 0\") == '8'\n\nassert solution(\"8\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n4 0\\n0 2\\n2 1\\n1 2\\n1 0\\n4 3\\n0 1\\n1 0\\n0 3\\n3 2\\n0 0\\n2 3\\n0 0\\n2 0\\n0 0\") == '8'"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == 4\n\n-----\n5\n0 0\n0 3\n3 3\n3 0\n4\n0 2\n0 3\n2 2\n0 2\n1 1\n1 3\n3 0\n3 3\n1 2\n3 2\n2 2\nSample Output:\n4\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\") == \"3\"\n\n\"\"\"\n\uc5b4\ub824\uc6b0\uc2dc\ub098\uc694?\n\uadf8\ub7f0\ub370 \uadf8\ub0e5 \ub2e4 \ud2c0\ub9ac\uba74 \ub2f5\uc774 \uc548\ub098\uc62c\uac70\uc57c\n\n\ucc98\uc74c\uc5d0 \uc804\ubd80 \ud2c0\ub9ac\ub294 \uacbd\uc6b0\uac00 \uc788\uc5c8\uc74c\n\n\uc5ec\ub7ec\ubc88 \ubcf4\uba74 \ub098\uc62c\uac70\uc57c\n\n\uc774\uc911\ud3ec\ubb38\uc744 \ub3cc\ub824\uc11c \uc0dd\uac01\ubcf4\ub2e4 \uc5b4\ub835\uc9c0\ub294 \uc54a\uc558\ub294\ub370\n\n\uc774\ubbf8 \uc5b4\ub835\ub358 \ucf00\uc774\uc2a4\ub294 \uacc4\uc18d \ud2c0\ub9ac\ub294\uac83\uac19\uc740\ub370\n\n\ub9c8\uc9c0\ub9c9\uc5d0\ub3c4 \uacc4\uc18d \ud2c0\ub9ac\ub294\uac70\uac19\uc740\ub370\n\n\uc65c \uc774\ub7f0\uac70 \uc0dd\uac01\uc744 \ubabb\ud574\uc11c \uadf8\ub7f0\uc9c0 \ubaa8\ub974\uaca0\ub2e4.\n\n\uacb0\uad6d \ub05d\uae4c\uc9c0 \ud2c0\ub838\ub358 \uc774\uc720\ub294 \uc65c\uc77c\uae4c \uc774\ub7f0\uac8c \uc0dd\uac01\uc774 \uc548\ub098\uc624\ub294\uac70\uc9c0?\n\n\uc544 \uc5b4\ub835\ub358 \ucf00\uc774\uc2a4\uc5d0\uc11c \ub3c4\uc800\ud788 \uc0dd\uac01\uc744 \uc548\ud588\uc73c\uba74 \ub2e4\uc2dc \ud558\uba74\ub428\n\n\uacc4\uc18d \ub2f5\uc774 \uc548\ub098\uc624\ub294\uac70 \uc0dd\uac01\uc744 \uc548\ud588\uc74c\n\n\uacb0\uad6d \uc9c0\uae08 \uc774\ubbf8 \uc5b4\ub835\ub358 \ucf00\uc774\uc2a4\uc5d0\uc11c \uc0dd\uac01\uc744 \uc548\ud588\ub2e4\n\n\ub300\ubc15!\n\n\uadf8\ub0e5 \ud604\uc7ac \uc774\ubd84\ud0d0\uc0c9\uc73c\ub85c \ud574\uacb0\ud574\ubcf4\uc790\n\n\uc804\ubd80 \uc5b4\ub835\ub358 \ucf00\uc774\uc2a4\ub97c \uc798\ubabb \uc0dd\uac01\ud558\uace0 \uc788\uc5c8\uc74c\n\n\uc5b4\ub824\uc6b4 \ubb38\uc81c \uc774\ub7f0\ucf00\uc774\uc2a4\uc5d0\uc11c\ub3c4 \ud30c\uc774\uc36c\uc758 \ub0b4\uc7a5\ud568\uc218\ub97c \uc774\uc6a9\ud558\uc9c0 \uc54a\uace0 \ud480\uace0\uc788\uc5c8\uc74c\n\n\uc5b4\ub835\uc9c0 \uc54a\uc558\ub2e4\n\n\uc774\uc81c \uc6b0\ub9ac\ub294 \uc9c0\uae08 \uc2dc\uc791\uc810\uc5d0\uc11c \uc5b4\ub290\ucabd\uc73c\ub85c \ud68c\uc804\uc774 \uc5b4\ub5bb\uac8c \ub418\ub294\uc9c0 \uc544\uc9c1 \ubaa8\ub974\uaca0\ub2e4\n\n\uc5ed\uc2dc \uc804\ubd80 \uc5b4\ub824\uc6b4 \ubb38\uc81c\uc5d0\uc11c\ub3c4 \uc774\ubd84\ud0d0\uc0c9\uc744 \uc774\uc6a9\ud558\uc9c0 \uc54a\uace0 \ud480\uc5b4\ubcf4\ub294 \uac83\uc744 \uc5b4\ub5bb\uac8c \uc0dd\uac01\ud574\uc57c \ud560\uae4c \uc0dd\uac01\ud574\uc57c \ud560\uae4c \ubaa8\ub974\uaca0\ub2e4\n\n\uc774\uc911\ud3ec\ubb38\uc744 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud574\uc57c \ud558\ub098\uc694?\n\n\ud68c\uc804\ud558\ub294 \uc88c\ud45c\ub97c \ub2f4\ub294 \ubc30\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\uc918\uc57c \ud558\ub294\ub370 \ud68c\uc804\uc744 \uc804\ubd80 \uc5c6\uc560\ub294 \uac70 \uc544\ub2cc\uc9c0 \uc0dd\uac01\uc744 \ubabb\ud588\ub2e4\n\n\uadf8\ub798\uc11c \ud68c\uc804\ud558\ub294 \uc88c\ud45c\ub97c \ub2f4\ub294 \ubc30\uc5f4\uc5d0\ub294 \uc5c6\uc5c8\ub294\ub370\n\n\ubaa8\ub4e0 \uacbd\uc6b0\uc758 \uc218\ub97c \ub2e4 \uc2dc\ub3c4\ud574"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0\\\\n0 1\\\\n0 2\\\\n0 3\") == '2\\\\n3 2\\\\n3 1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import deque\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\nassert solution(\"4 1\\n0 1\\n1 2\\n0 2\") == \"1\\n2 1\"\nassert solution(\"5 5\\n0 1\\n0 2\\n0 3\\n0 4\") == \"0\\n4 4\\n4 3\"\nassert solution(\"5 0\\n0 1\\n0 2\\n0 3\\n0 4\") == \"0\\n4 4\\n4 3\"\nassert solution(\"7 3\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\") == \"0\\n6 6\\n6 5\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom icontract import require, ensure\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0\\n0 1\\n0 2\\n0 3') == '2\\n3 2\\n3 1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0\\n0 1\\n0 2\\n0 3\\n') == '2\\n3 2\\n3 1'\nassert solution('4 1\\n0 1\\n0 2\\n0 3\\n') == '2\\n3 2\\n3 1'\nassert solution('4 1\\n0 2\\n0 3\\n') == '2\\n3 1'\nassert solution('4 1\\n0 3\\n0 2\\n') == '2\\n3 1'\n\n\"\"\""
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n\"\"\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n\nassert solution(\"2 1\\n0 1\") == \"1\\n1 0\"\n\nprint(solution(input()))\n\nSample Input:\n6 3\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\nSample Output:\n5\n4 5\n4 3\n3 4\n3 2\n2 3\n2 1\n\n'''\n\nn, h = [int(i) for i in input().split()]\n\nlines = []\nfor i in range(n - 1):\n    lines.append([int(i) for i in input().split()])\n\ndp = [1 for i in range(n)]\n\nfor line in lines:\n    dp[line[1]] = min(dp[line[0]], dp[line[1]])\n\ndp[h] = 0\n\nprint(len([i for i in dp if i > 0]))\n\nfor i in range(1, n):\n    if dp[i]!= 1:\n        print(i, end=' ')\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0\\\\n0 1\\\\n0 2\\\\n0 3\") == '2\\\\n3 2\\\\n3 1'\n\nSample Input:\n3 3\n0 1\n0 2\n2 3\nSample Output:\n3\n\nSample Input:\n4 0\n0 1\n0 2\n2 3\nSample Output:\n2\n\nSample Input:\n5 6\n0 1\n1 2\n0 2\n0 3\n2 4\n0 3\nSample Output:\n1\n\nSample Input:\n7 7\n0 1\n1 2\n0 2\n0 3\n2 4\n0 5\n2 6\n3 7\nSample Output:\n4\n\nSample Input:\n8 5\n0 1\n1 2\n0 2\n0 3\n3 4\n5 6\n0 7\n2 8\n0 8\nSample Output:\n4\n\nSample Input:\n3 2\n0 1\n0 2\n1 2\nSample Output:\n2\n\nSample Input:\n4 0\n0 1\n0 2\n2 3\nSample Output:\n1\n\nSample Input:\n4 5\n0 1\n0 2\n1 3\n2 4\nSample Output:\n0\n\nSample Input:\n6 2\n0 1\n1 2\n0 3\n3 4\nSample Output:\n1\n\nSample Input:\n7 6\n0 1\n1 2\n0 2\n0 3\n2 4\n2 5\n3 6\nSample Output:\n2\n\nSample Input:\n8 7\n0 1\n1 2\n0 2\n0 3\n3 4\n2 5\n1 6\n0 6\nSample Output:\n2\n\nSample Input:\n8 7\n0 1\n1 2\n0 2\n0 3\n3 4\n2 5\n1 6\n0 6\nSample Output:\n1\n\nSample Input:\n10 6\n0 1\n2 3\n0 4\n2 5\n0 6\n6 7\n1 8\n0 9\n2 10\nSample Output:\n2\n\nSample Input:\n7 4\n0 1\n1 2\n0 2\n1 3\n2 4\nSample Output:\n1\n\nSample Input:\n5 7\n0 1\n1 2\n0 2\n3 4\n2 5\nSample Output:\n0\n\nSample Input:\n10 9\n0 1\n0 2\n1 3\n2 4\n2 5\n0 6\n2 7\n3 8\n4 9\nSample Output:\n0\n\nSample Input:\n5 8\n0 1\n1 2\n0 2\n0 3\n2 4\n2 5\n0 6\n0 7\n1 8\nSample Output:\n2\n\nSample Input:\n5 8\n0 1\n1 2\n0 2\n3 4\n2 5\n0 6\n0 7\n1 8\nSample Output:\n2\n\nSample Input:\n5 9\n0 1\n1 2\n0 2\n1 3\n2 4\n2 5\n0 6\n0 7\n0 8\n2 9\nSample Output:\n2\n\nSample Input:\n5 10\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n1 7\n0 8\n2 9\n1 10\nSample Output:\n2\n\nSample Input:\n5 10\n0 1\n1 2\n0 2\n1 3\n2 4\n2 5\n0 6\n2 7\n3 8\n0 9\n2 10\nSample Output:\n1\n\nSample Input:\n5 11\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n1 7\n0 8\n2 9\n1 10\n2 11\nSample Output:\n3\n\nSample Input:\n6 5\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n0 6\nSample Output:\n0\n\nSample Input:\n6 5\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n0 6\nSample Output:\n0\n\nSample Input:\n7 5\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n0 6\n1 7\nSample Output:\n1\n\nSample Input:\n7 7\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n0 6\n0 7\nSample Output:\n0\n\nSample Input:\n7 7\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n0 6\n0 7\nSample Output:\n0\n\nSample Input:\n8 8\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n0 7\n0 8\nSample Output:\n1\n\nSample Input:\n8 8\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n0 6\n2 7\n1 8\nSample Output:\n0\n\nSample Input:\n10 10\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n0 7\n1 8\n0 9\n2 10\nSample Output:\n2\n\nSample Input:\n10 10\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n0 7\n1 8\n0 9\n2 10\nSample Output:\n0\n\nSample Input:\n11 10\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n0 7\n1 8\n0 9\n2 10\nSample Output:\n2\n\nSample Input:\n10 11\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n0 7\n1 8\n0 9\n2 10\nSample Output:\n2\n\nSample Input:\n13 11\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n0 7\n1 8\n0 9\n2 10\n1 11\nSample Output:\n0\n\nSample Input:\n15 8\n0 1\n1 2\n0 2\n1 3\n2 4\n0 5\n2 6\n0 7\n1 8\n0 9\n2 10\n1 11\nSample Output:\n0\n\nSample Input:\n15 12\n0 1\n1 2\n0 2\n1"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0.5 0.5 1.5 0\\n0.5 0.5 1.5 0\") == \"ok\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 0\\n0 1.5 0') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"3\\n-2 2.3 3.4\\n-3.4 3.2 3.1\\n0 0 0\") == \"ok\"\nassert solution(\"4\\n-2.7 3.1 4.3\\n-4.3 4.1 4.2\\n0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"5\\n-2.7 3.1 4.3\\n-4.3 4.1 4.2\\n0 0 0\\n0 1.5 0\\n0 0 0\") == \"ok\"\nassert solution(\"10\\n-2.7 3.1 4.3\\n-4.3 4.1 4.2\\n0 0 0\\n0 1.5 0\\n0 0 0\\n0 0 0\\n0 1.5 0\\n0 0 0\") == \"ok\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"1\\n0 0 0\\n0 1.5 0\") == \"crash\"\nassert solution(\"1\\n0.2 0.1 0\\n0 0.3 0.1\") == \"crash\"\n\nprint(solution(\"2\\n0.0 0.0 0.0\\n0.0 0.0 0.0\"))\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"2\\n0 0 0\\n0 1.5 1\") == \"crash\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1.5 0\\n0 1.5 0\") == 'ok'\nassert solution(\"1\\n1.5 0\\n0 1.5 0\") == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n0 0 0\n0 1.5 0''') == 'ok'\nassert solution('''3\n0 0 0\n0 1.5 0\n0 0 1.5''') == 'crash'"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 1 1\\n0 1 2') == 'ok'\nassert solution('1\\n1 2 1') == 'ok'\nassert solution('1\\n1 1 1') == 'ok'\nassert solution('2\\n1 1 1\\n1 1 1') == 'ok'\nassert solution('2\\n1 1 1\\n1 1 1') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0 0\\n0 1.5 0') == 'ok'\n\"\"\"\nfrom math import pi, cos, sin"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"2\\n-0.03 -0.04 0\") == \"ok\"\nassert solution(\"2\\n-0.03 0.04 0\") == \"crash\"\nassert solution(\"1\\n0.1 0 0\") == \"ok\"\nassert solution(\"2\\n0 0.1 0\") == \"crash\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom typing import Dict, List\n\nN, M = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 2\\n0 1\\n0 3\\n1 2\\n2 4') == '2\\nR 0\\nG 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\""
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\"\n\"\"\""
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2\\nR 0\\nG 2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\"\n\"\"\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\"\nprint(solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\"))"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\") == \"2\\nR 0\\nG 2\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == '2\\nR 0\\nG 2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\"\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F''') == '2'\n\"\"\"\nimport sys\nimport math\n\n\"\"\"\nsolution:\n    The first step is to create a matrix that shows the number of\n    transportation firms that can supply each raw material site\n    to each factory.\n    \n    We can then use this matrix to find the maximum number of\n    factory sites that can be supplied by a single transportation\n    company.\n\"\"\"\nclass TransportMatrix:\n    def __init__(self, raw_material_sites, factories):\n        self.num_transport_firms = len(factories)\n        self.num_raw_material_sites = len(raw_material_sites)\n        \n        self.transport_matrix = [[0 for factory in factories] for raw_material in raw_material_sites]\n        self.maximum_number_of_factory_sites_supplied = 0\n    \n    def add_transport_firm(self, raw_material_site, factory):\n        self.transport_matrix[raw_material_site][factory] += 1\n    \n    def add_transport_firm_to_all(self, raw_material_site, factory):\n        for i in range(self.num_transport_firms):\n            self.transport_matrix[raw_material_site][i] += 1\n    \n    def add_transport_firm_to_all_except(self, raw_material_site, factory):\n        for i in range(self.num_transport_firms):\n            if i!= factory:\n                self.transport_matrix[raw_material_site][i] += 1\n    \n    def can_supply_all_factory_sites(self):\n        for raw_material_site in range(self.num_raw_material_sites):\n            for factory in range(self.num_transport_firms):\n                if self.transport_matrix[raw_material_site][factory] == 0:\n                    return False\n        return True\n    \n    def max_factory_sites(self):\n        self.maximum_number_of_factory_sites_supplied = 0\n        \n        for factory in range(self.num_transport_firms):\n            count = 0\n            for raw_material_site in range(self.num_raw_material_sites):\n                count += self.transport_matrix[raw_material_site][factory]\n            \n            self.maximum_number_of_factory_sites_supplied = max(count, self.maximum_number_of_factory_sites_supplied)\n    \n    def max_factory_sites_except(self, raw_material_site, factory):\n        self.maximum_number_of_factory_sites_supplied = 0\n        \n        for i in range(self.num_transport_firms):\n            if i!= factory:\n                count = 0\n                for j in range(self.num_raw_material_sites):\n                    count += self.transport_matrix[j][i]\n                \n                self.maximum_number_of_factory_sites_supplied = max(count, self.maximum_number_of_factory_sites_supplied)\n    \n    def max_factory_sites_except_except(self, raw_material_site, factory):\n        self.maximum_number_of_factory_sites_supplied = 0\n        \n        for i in range(self.num_transport_firms):\n            if i!= factory:\n                count = 0\n                for j in range(self.num_raw_material_sites):\n                    if j!= raw_material_site:\n                        count += self.transport_matrix[j][i]\n                \n                self.maximum_number_of_factory_sites_supplied = max(count, self.maximum_number_of_factory_sites_supplied)\n    \n    def max_factory_sites_except_except_except(self, raw_material_site, factory):\n        self.maximum_number_of_factory_sites_supplied = 0\n        \n        for i in range(self.num_transport_firms):\n            if i!= factory:\n                count = 0\n                for j in range(self.num_raw_material_sites):\n                    if j!= raw_material_site:\n                        count += self.transport_matrix[j][i]\n                \n                self.maximum_number_of_factory_sites_supplied = max(count, self.maximum_number_of_factory_sites_supplied)\n\n\"\"\"\nsolution:\n    This solution uses a modified version of the matrix, which we can\n    see in the code below. We will fill out the matrix from factory to\n    raw material sites, so we can eliminate raw material sites as we\n    process them. We can then check that the matrix contains the\n    required amount of factories.\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\") == \"2\"\nassert solution(\"7 4 3 4\\nA B C D\\nE F G H\\n3 A E G\\n3 A C E\\n3 B D F\") == \"3\"\n\"\"\""
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\") == \"2\"\nprint('Success')"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F''') == '2'\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F') == 2\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 2\\nA B C D\\n1 A B\\n3 A C\") == \"2\"\nassert solution(\"8 3 3 2\\nA B C D E F G H I J\\n1 A B C\\n3 A D E I\") == \"4\"\nassert solution(\"8 3 3 2\\nA B C D E F G H I J\\n1 A B C D\\n3 A E F I J\") == \"2\"\nassert solution(\"6 5 4 3\\nA B C D E F G\\n1 A B C\\n3 A D E\") == \"5\"\nassert solution(\"6 5 4 3\\nA B C D E F G\\n1 A B C D\\n3 A E F I J\") == \"5\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F''') == '2'\nassert solution('''5 5 5 5\nA B C D\nE F G H\nI J K L\nM N O P\nQ R S T''') == '6'\n'''\n\nimport collections\nimport math\nimport sys\nimport pprint\nimport queue\n\n\nclass Solution:\n    def __init__(self):\n        self.__scores = None\n        self.__supply = None\n        self.__demand = None\n\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        #\n        # @param stdin\n        # @return solution\n        \"\"\"\n        n, m, r, c, s = [int(c) for c in stdin.split(' ')]\n        states = [c for c in stdin.split('\\n')[1:-1]]\n        supply = [int(c) for c in stdin.split('\\n')[2].split(' ')]\n        demand = [int(c) for c in stdin.split('\\n')[3].split(' ')]\n        supply = collections.deque(supply)\n        demand = collections.deque(demand)\n        scores = [0] * n\n        self.__scores = scores\n        self.__supply = supply\n        self.__demand = demand\n        self.__solve(n, m, r, c, s)\n        print(len(self.__scores))\n\n    def __solve(self, n, m, r, c, s):\n        if self.__scores[n - 1] >= s:\n            return\n        else:\n            self.__solve(n - 1, m, r, c, s)\n            for i in range(m):\n                while self.__demand and self.__demand[0] <= self.__supply[0]:\n                    self.__demand.popleft()\n                    self.__supply.popleft()\n                    self.__scores[i] += 1\n                    if self.__scores[i] >= s:\n                        return\n                self.__solve(i, m, r, c, s)\n                self.__demand.appendleft(self.__scores[i] - 1)\n                self.__supply.appendleft(self.__scores[i])\n                self.__scores[i] = 0\n\n\nSolution().solution(\n    \"\"\"7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\"\"\"\n)\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\") == \"2\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"XXX\") == \"3\"\nassert solution(\"NYY\") == \"2\"\nassert solution(\"YNY\") == \"1\"\nassert solution(\"YYY\") == \"3\"\n\"\"\""
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('YYY\\nNYY\\nYNY') == '2\\n1 2 3'"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\nYYY\nNYY\nYNY\n''') == '2\\n1 2 3\\n3 1 2'\nprint('OK')\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('YNY') == '2\\n1 2\\n3 1'\nassert solution('YNN') == '1\\n1 2\\n3 1'\nassert solution('NNY') == '0\\n1 2\\n3 1'\nassert solution('NNN') == '0\\n1 2\\n3 1'\nassert solution('NYN') == '0\\n1 2\\n3 1'\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('\\n'.join([\n    '3',\n    'YYY',\n    'NYY',\n    'YNY',\n])) == '2\\n1 2 3'\n\nassert solution('\\n'.join([\n    '4',\n    'YYY',\n    'NYY',\n    'YNY',\n    'NNN',\n])) == '0'\n\nassert solution('\\n'.join([\n    '4',\n    'YYY',\n    'YYY',\n    'YNY',\n    'NNN',\n])) == '0'\n\nassert solution('\\n'.join([\n    '4',\n    'YYY',\n    'YYY',\n    'YNY',\n    'YNY',\n])) == '1\\n3 1 2'\n\nassert solution('\\n'.join([\n    '6',\n    'YYY',\n    'YYY',\n    'YYY',\n    'YNY',\n    'YNY',\n    'YNN',\n])) == '2\\n2 5 1 3'"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nYYY\\nNYY\\nYNY\") == '2\\n1 2 3'\nassert solution(\"2\\nYYY\\nNYY\") == '1\\n3 1 2'\nassert solution(\"2\\nYYY\\nNYY\") == '0'\nassert solution(\"2\\nNNY\\nNYY\") == '0'\nassert solution(\"2\\nNYN\\nNNY\") == '1\\n1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('YYY') == '1 2 3'\nassert solution('NYY') == '3 1 2'\nassert solution('YNY') == '1 2 3'\nassert solution('YYY') == '1 2 3'\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\nYYY\nNYY\nYNY\n''') == '''\n2\n1 2 3\n3 1 2'''\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"YYY\\nNYY\\nYNY\") == \"2\\n1 2 3\"\nprint(solution(\"YYY\\nNYY\\nYNY\"))\n\nassert solution(\"YYY\\nNYY\\nYYY\\nYNY\\nYYY\\nYNY\\nYNY\\nYNY\") == \"5\\n3 1 2 4\"\nprint(solution(\"YYY\\nNYY\\nYYY\\nYNY\\nYYY\\nYNY\\nYNY\\nYNY\"))\n\nassert solution(\"NYY\\nYYY\\nYYY\\nYNY\\nYYY\\nYNY\\nYYY\\nYNY\") == \"4\\n1 2 3 4\"\nprint(solution(\"NYY\\nYYY\\nYYY\\nYNY\\nYYY\\nYNY\\nYYY\\nYNY\"))\n\nassert solution(\"YYY\\nYNY\\nYNY\\nYYY\\nYNY\\nYNY\\nYYY\\nYNY\") == \"2\\n1 2\"\nprint(solution(\"YYY\\nYNY\\nYNY\\nYYY\\nYNY\\nYNY\\nYYY\\nYNY\"))\n\nassert solution(\"YNY\\nYYY\\nYNY\\nYNY\\nYYY\\nYNY\\nYNY\\nYNY\") == \"4\\n1 3 2 4\"\nprint(solution(\"YNY\\nYYY\\nYNY\\nYNY\\nYYY\\nYNY\\nYNY\\nYNY\"))"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('YYY\\nNYY\\nYNY') == '2\\n1 2 3'\nassert solution('YYY\\nYNY\\nYYY\\nYNY\\nYNY') == '2\\n3 1 2'\nassert solution('YYY\\nNYY\\nYNY\\nYYY\\nYNY\\nYYY') == '3\\n2 3 1'\n\"\"\""
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\nx..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2\") == \"4 0 5\"\n\n\"\"\"\n\nimport sys\nfrom math import sqrt\n\nR, S = map(int, sys.stdin.readline().split())\nfield = []\nfor _ in range(R):\n    field.append(sys.stdin.readline().split())\n\ni = 0\nwhile i < len(field):\n    if field[i][i] == 'x':\n        break\n    i += 1\nG = int(sys.stdin.readline())\nfor _ in range(G):\n    apple = list(map(int, sys.stdin.readline().split()))\n    dist = 0\n    for i in range(len(apple)):\n        dist += int(sqrt((apple[i]-apple[i-1])**2 + (i-apple[i-1])**2))\n    print(dist)\n\n\"\"\"\n(r_i, s_i)\n\uac01 \ud574\ub2f9 \ud310\uc758 \uc904 \uc774\ub984 \uc55e\uc5d0 \uc788\ub294 \uac12\ub4e4\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4.\nfor\ubb38\uc744 \uc774\uc6a9\ud558\uc5ec \uc55e\uc5d0\uc11c \uc77d\uc744 \uc904 \uc774\ub984\uc744 \uc800\uc7a5\ud558\uace0, \uadf8 \uac12\uc744 \uc800\uc7a5\ud560 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud558\uace0, \ud574\ub2f9 \ud310\uc5d0\uc11c \ub3c4\ub2ec\ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 \uc9c0\ub098\uac08 \uc218 \uc788\ub294 \uacf3\ub3c4 \ub3c4\ub2ec\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc73c\ubbc0\ub85c \uacbd\uc6b0\uc758 \uc218\ub97c \uacc4\uc0b0\ud560 \ub54c \ucd5c\ub300\uac12\uc73c\ub85c \uc800\uc7a5\ud558\uc5ec \uc800\uc7a5\ud55c\ub2e4.\n\ub2e4\uc74c \ud574\ub2f9 \ud310\uc5d0\uc11c \uc0ac\uacfc\ub97c \uba39\uace0 \ub09c \ud6c4, \ub2e4\uc74c \ud310\ubd80\ud130 \ub2e4\uc2dc \uc55e\uc5d0\uc11c \uc77d\uc744 \ud310 \uc774\ub984\uc744 \uc800\uc7a5\ud558\uace0, \uc800\uc7a5\ud55c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc904 \uc774\ub984\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\ub2e4\uc74c \ud574\ub2f9 \ud310\uc5d0\uc11c \uc0ac\uacfc\ub97c \uba39\uace0 \ub09c \ud6c4, \ub2e4\uc74c \ud310\ubd80\ud130 \ub2e4\uc2dc \uc55e\uc5d0\uc11c \uc77d\uc744 \ud310 \uc774\ub984\uc744 \uc800\uc7a5\ud558\uace0, \uc800\uc7a5\ud55c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc904 \uc774\ub984\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\ub2e4\uc74c \ud574\ub2f9 \ud310\uc5d0\uc11c \uc0ac\uacfc\ub97c \uba39\uace0 \ub09c \ud6c4, \ub2e4\uc74c \ud310\ubd80\ud130 \ub2e4\uc2dc \uc55e\uc5d0\uc11c \uc77d\uc744 \ud310 \uc774\ub984\uc744 \uc800\uc7a5\ud558\uace0, \uc800\uc7a5\ud55c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc904 \uc774\ub984\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\uc774\ub97c \ubc18\ubcf5\ud55c\ub2e4.\n\ub9cc\uc57d \ub9cc\uc871\ud558\ub294 \ud310\uc758 \uc774\ub984\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74, \ucd5c\ub300\uac12\uc744 \ucd9c\ub825\ud558\uace0 \uc885\ub8cc\ud55c\ub2e4.\n\ub9cc\uc871\ud558\ub294 \ud310\uc758 \uc774\ub984\uc774 \uc874\uc7ac\ud558\uba74, \uadf8 \uc774\ub984\uc758 \uc904\uc744 \ucc3e\uc544 \uc21c\uc11c\ub97c \ubc18\ub300\ub85c \ud558\uc5ec \ucd5c\uc18c\uac12\uc744 \ucd9c\ub825\ud55c\ub2e4.\n\n\"\"\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2\\n\") == \"4\\n0\\n5\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n....\\n...x\\n..x.\\n1 3\\n1 1\\n3 2\\n\") == \"4 0 5\"\nassert solution(\"3 3\\n....\\n...x\\n..x.\\n1 3\\n1 1\\n3 2\\n\") == \"4 0 5\"\nassert solution(\"5 5\\n.x.x\\n.x.x\\n.x.x\\n.x.x\\n.x.x\\n3 3\\n....\\n...x\\n..x.\\n1 3\\n1 1\\n3 2\\n\") == \"0 0 0 0 0 0 5\"\nassert solution(\"5 5\\n.x.x\\n.x.x\\n.x.x\\n.x.x\\n.x.x\\n3 3\\n....\\n...x\\n..x.\\n1 3\\n1 1\\n3 2\\n\") == \"0 0 0 0 0 0 5\"\nassert solution(\"5 5\\n.x.x\\n.x.x\\n.x.x\\n.x.x\\n.x.x\\n3 3\\n....\\n...x\\n..x.\\n1 3\\n1 1\\n3 2\\n\") == \"0 0 0 0 0 0 5\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n....\\n...x\\n.x.\\nx...\\n3\\n1 3\\n1 1\\n3 2') == '4\\n0\\n5'\nassert solution('4 4\\n....\\n...x\\n.x.\\nx...\\n4\\n1 3\\n1 1\\n3 2') == '9\\n0\\n8'\n\n\"\"\"\n\nR, S = map(int, stdin.readline().split())\n\ngrid = [list(stdin.readline().split()) for _ in range(R)]\n\nTrees = set()\n\nfor r in range(R):\n    for s in range(S):\n        if grid[r][s] == 'x': Trees.add((r,s))"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nx..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2\") == \"4\\n0\\n5\""
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2''') == '4 0 5'\nassert solution('''4 4\n...x\n...x\n...x\n...x\n...x\n...x\n3\n3 4\n2 3\n1 1\n2 3\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n''') == '0 0 0 0 0'\nassert solution('''5 5\n.x.\n.x.\n.x.\n.x.\n.x.\n3\n3 2\n1 1\n1 1\n3 3\n3 3\n3 4\n4 4\n4 5\n5 5\n1 4\n2 3\n3 1\n4 2\n4 2\n4 2\n4 2\n4 2\n3 2\n4 1\n5 5\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n''') == '4 1 4 9 16 25 36'"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('3 4\\n.xx.\\n..x.\\n.x.x\\n.xx.') == '1\\n0\\n1\\n3\\n4\\n'\nassert solution('4 3\\n.x.\\n.x.\\n.x.\\n.x.\\n.x.') == '1\\n0\\n0\\n2\\n2\\n3\\n'\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n...\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2\\n\") == \"4\\n0\\n5\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '1'\nassert solution('1 2 3\\n') == '1'\nassert solution('1 2 3 4\\n') == '1'\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\"\n) == '4\\n0\\n5'\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n3\\n4\\n5 3\\n') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0 0'\nassert solution('2\\n1\\n1') == '0 0'\nassert solution('3\\n1\\n2\\n1') == '1 1'\nassert solution('4\\n1\\n2\\n3\\n1') == '1 1'\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nassert solution(\"1\\n1\\n1\\n1\\n1 3\") == \"3.000 0.000\\n3.000 0.000\"\nassert solution(\"3\\n5\\n3\\n4\\n5 3\\n-2.0 3.0\") == \"3.141 -1.774\\n3.150 -0.354\"\nassert solution(\"1\\n1\\n1\\n1\\n1 1\") == \"1.000 0.000\\n1.000 0.000\"\nassert solution(\"3\\n5\\n3\\n4\\n5 3\\n1 1 1\") == \"3.571 -0.571\\n4.571 -1.143\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == '4.114 -2.842'\n\"\"\""
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nassert solution(\"1\\n1\\n1\\n1\\n1 1\") == \"0.000 0.000\\n0.000 0.000\"\nassert solution(\"2\\n2\\n2\\n2\\n2 2\") == \"0.000 0.000\\n0.000 0.000\"\nassert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nassert solution(\"5\\n4\\n2\\n5\\n5 4\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n\n-----Note-----\n| The input is correctly formatted as a string.\n| The order of the lines in the input is arbitrary.\n| All lines contain exactly two integers each.\n| The lines in the input are not empty.\n\n\"\"\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n3\\n4\\n5 3') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\nassert solution('2\\n1\\n1\\n5\\n5 1') == '3.332 -1.117\\n3.667 -1.117'\nassert solution('2\\n1\\n1\\n5\\n5 5') == '3.332 -2.842\\n3.667 -3.664'\n\nprint('Success')"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nassert solution(\"3\\n5\\n3\\n4\\n5 3\\n1 1\") == \"4.125 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n\n-----Note-----\nYou must return a string containing the correct output, formatted to\n$<number1> \\pm <number2>$ where the $<number>$\u2019s are real numbers.\nIf the absolute difference between the two $<number>$\u2019s is greater than\n$0.01$, then you must round to the nearest integer. For example, if the\noutput should be $4.2 \\pm 0.1$ then return $\"4.0 \\pm 0.1\"$.\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n5\n3\n4\n5 3\n''') == '''\n4.114 -2.842\n6.297 -0.784\n5.000 3.000\n'''\n\nassert solution('''\n3\n5\n3\n4\n5 3\n''') == '''\n4.114 -2.842\n6.297 -0.784\n5.000 3.000\n'''\n\nassert solution('''\n2\n4\n3\n5\n4 4\n''') == '''\n5.000 3.000\n3.774 1.188\n3.999 -0.020\n'''\n\nassert solution('''\n5\n5\n3\n2\n4 6\n''') == '''\n4.372 2.286\n4.383 0.036\n4.365 -0.014\n4.400 -0.001\n4.411 -0.000\n'''\n\nassert solution('''\n5\n5\n3\n2\n4 6\n''') == '''\n4.372 2.286\n4.383 0.036\n4.365 -0.014\n4.400 -0.001\n4.411 -0.000\n'''"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == '3\\n5\\n8\\n10\\n13'\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8') == '3\\n5\\n8\\n10\\n13'\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '''3\n5\n8\n10\n13\n'''\n\nassert solution('''3 3\n2 3 5\n2\n3\n5\n6\n8\n''') == '''3\n5\n8\n10\n'''\n\nassert solution('''3 3\n2 3 5\n2\n3\n5\n6\n8\n''') == '''3\n5\n8\n10\n'''\n\nprint(solution(input()))\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == \"3\\n5\\n8\\n10\\n13\"\n\"\"\"\n\nn, q = list(map(int, input().split(' ')))\n\nline = input()\n\nsum = 0\ncount = 0\nwhile line!= '':\n    sum += int(line)\n    count += 1\n    line = input()\n\nfor i in range(q):\n    line = int(input())\n    if line <= n:\n        print(sum)\n    else:\n        sum = 0\n        for j in range(count):\n            if line % 2!= 0:\n                sum += int(line/2) * 2\n            else:\n                sum += int(line/2)\n            line = int(line / 2)\n        print(sum)"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == '3\\n5\\n8\\n10\\n13'\nprint(\"Exercise 5 solved.\")\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10\\n13'\n\"\"\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10\\n13'\nassert solution('4 5\\n3 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10\\n13'\n\"\"\"\n\nimport sys\nimport itertools\n\nstdin = sys.stdin.read()\n\nn, q = [int(x) for x in stdin.split('\\n')[:2]]\n\nenergies = [int(x) for x in stdin.split('\\n')[2:-1]]\n\nfor i in range(q):\n    k = int(sys.stdin.readline())\n    energy = 0\n    for a in itertools.combinations(energies, k):\n        energy += sum(a)\n    print(energy)\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10\\n13'\n\n\"\"\""
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == '3\\n5\\n8\\n10\\n13'\n\"\"\""
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '''3\n5\n8\n10\n13'''\n\nassert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '''3\n5\n8\n10\n13'''\n\n\"\"\"\nfrom collections import Counter\nimport math"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n0 1\n1 2\n''') == '0'\n\nassert solution('''\n3 2\n0 1\n1 2\n1 2\n''') == '1'\n\nassert solution('''\n3 2\n0 2\n1 2\n1 2\n''') == '2'\n\nassert solution('''\n5 4\n0 1\n2 3\n2 4\n''') == '3'\n\nassert solution('''\n5 4\n0 1\n2 3\n2 4\n3 4\n''') == '4'"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5''') == '0'\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\nfrom collections import defaultdict\nfrom itertools import permutations, combinations\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        # return self.solve_1(stdin)\n        return self.solve_2(stdin)\n\n    def solve_1(self, stdin: List[str]) -> str:\n        V, P = list(map(int, stdin.pop(0).split()))\n        graph = defaultdict(list)\n        for u, v in [list(map(int, stdin.pop(0).split())) for i in range(V-1)]:\n            graph[u].append(v)\n            graph[v].append(u)\n        for u in range(V):\n            graph[u] = list(set(graph[u]))\n\n        leave = [False] * V\n        for u, v in combinations(range(P), 2):\n            if not leave[u] and not leave[v] and len(graph[u]) == len(graph[v]) == 1:\n                leave[u] = True\n                leave[v] = True\n        print(sum(leave))\n\n    def solve_2(self, stdin: List[str]) -> str:\n        V, P = list(map(int, stdin.pop(0).split()))\n        graph = defaultdict(list)\n        for u, v in [list(map(int, stdin.pop(0).split())) for i in range(V-1)]:\n            graph[u].append(v)\n            graph[v].append(u)\n        for u in range(V):\n            graph[u] = list(set(graph[u]))\n        # print(graph)\n\n        leave = [False] * V\n        for u in range(P):\n            leave[u] = True\n            for v in graph[u]:\n                if not leave[v]:\n                    leave[v] = True\n        print(sum(leave))"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == 0\nassert solution('10 6\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n5 7\\n5 8\\n5 9\\n6 7\\n7 8\\n8 9') == 3\nassert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == 0\nassert solution('10 6\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n5 7\\n5 8\\n5 9\\n6 7\\n7 8\\n8 9') == 3\nassert solution('3 3\\n0 1\\n1 2\\n2 3') == 1\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n0 1\\n0 2\\n1 2\\n0 3\\n1 4\\n1 5\\n0 4\\n1 5\\n1 4\\n1 3\\n') == '0'\nprint('Hooray')"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == '0'\n-----Question-----\n\n\"\"\"\n\n\"\"\"\nUnderstand: \n- input: \n    V: number of vertices in tree\n    P: number of pigs\n    V-P: number of wolves\n    # each line is an edge\n- output:\n    W: minimum number of wolves to remove such that\n        every pig can escape\n\"\"\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == \"0\"\nassert solution(\"3 4\\n0 1\\n1 2\\n2 3\\n1 2\\n3 4\\n1 2\\n3 4\") == \"1\"\nassert solution(\"6 7\\n0 1\\n1 2\\n2 3\\n2 4\\n3 5\\n4 6\\n4 6\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\") == \"0\"\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2\\n3 4\\n1 3\\n1 2\\n2 4\\n2 3') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '0'\nassert solution('5 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '3'\nassert solution('5 5\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n3 2 5\\n') == '2'\nassert solution('5 5\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n3 2 5\\n') == '2'\nassert solution('5 5\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n3 2 5\\n') == '2'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('0 1\\n1 2\\n2 3\\n2 4\\n1 5') == '0'\n\n\"\"\""
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\n\"\"\"\n\nV, P = [int(i) for i in stdin.readline().split()]\ntree = {}\nfor i in range(V - 1):\n    v, w = [int(i) for i in stdin.readline().split()]\n    tree[v] = w\n\non_pig = [int(i) for i in stdin.readline().split()]\nres = 0\nfor i in range(P):\n    pig = on_pig[i]\n    seen = set()\n    pig_path = [pig]\n    while pig_path:\n        curr = pig_path.pop(0)\n        if curr in seen:\n            continue\n        seen.add(curr)\n        pig_path.extend(tree[curr])\n        if len(seen) == V:\n            res += 1\n            break\nprint(res)\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71'\n\nassert solution('1 1 5 C1 L1 C100 U1 C1') == '1'\n\nassert solution
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '106 107 71'\n\"\"\"\n\nfrom typing import Iterable, List\nfrom collections import deque\nimport heapq\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '''106\n107\n71'''\n\n\"\"\"\nimport math\nimport sys\nfrom functools import partial\nfrom operator import attrgetter\nfrom typing import Callable, List, NamedTuple, Sequence, Tuple\n\nfrom icontract import require, ensure, DBC\n\n\nclass IntList(NamedTuple):\n    \"\"\"List of integers.\"\"\"\n\n    values: Tuple[int,...]\n\n\nclass IntListWithIndices(NamedTuple):\n    \"\"\"List of integers and indices.\"\"\"\n\n    values: Tuple[int,...]\n    indices: Tuple[int,...]\n\n\nclass IntListWithComparator(NamedTuple):\n    \"\"\"List of integers with a comparator function.\"\"\"\n\n    values: Tuple[int,...]\n    comparator: Callable[[int], int]\n\n\nclass IntListWithComparatorWithIndex(NamedTuple):\n    \"\"\"List of integers with a comparator function and an index.\"\"\"\n\n    values: Tuple[int,...]\n    comparator: Callable[[int], int]\n    index: int\n\n\nclass Task(DBC, NamedTuple):\n    \"\"\"Task.\"\"\"\n\n    start: int\n    priority: int\n    instructions: Sequence[Tuple[str, int]]\n\n\nclass Resource(NamedTuple):\n    \"\"\"Resource.\"\"\"\n\n    priority_ceiling: int\n    is_locked: bool\n    task: Optional[Task]\n\n\nclass ProcessorClock(NamedTuple):\n    \"\"\"Processor clock.\"\"\"\n\n    value: int\n\n    def __add__(self, other: int) -> 'ProcessorClock':\n        return ProcessorClock(self.value + other)\n\n    def __sub__(self, other: int) -> 'ProcessorClock':\n        return ProcessorClock(self.value - other)\n\n\nclass Clock(NamedTuple):\n    \"\"\"Clock.\"\"\"\n\n    value: int\n    running: bool\n\n    def __add__(self, other: int) -> 'Clock':\n        return Clock(self.value + other, self.running)\n\n    def __sub__(self, other: int) -> 'Clock':\n        return Clock(self.value - other, self.running)\n\n\nclass Solution:\n    \"\"\"Solution class.\"\"\"\n\n    def __init__(self, stdin: str) -> None:\n        \"\"\"Initializer.\"\"\"\n        self.clocks = self.parse_clocks(stdin)\n\n    @staticmethod\n    @ensure(lambda result: len(set(result)) == len(result))\n    @ensure(\n        lambda result, clocks: all(\n            clock.value == result[i]\n            for clock in clocks\n            for i in range(len(clocks))\n        )\n    )\n    def parse_clocks(stdin: str) -> List[Clock]:\n        \"\"\"Parse clocks from the given string.\"\"\"\n        lines = stdin.split('\\n')\n        lines = [line.split() for line in lines if line.strip()]\n\n        tasks = []  # type: List[Task]\n        for line in lines[1:]:\n            tasks.append(Task(int(line[0]), int(line[1]), line[2:]))\n\n        resources = []  # type: List[Resource]\n        for line in lines[0].split():\n            resources.append(Resource(int(line), False, None))\n\n        @require(lambda resources, tasks: len(resources) == len(tasks))\n        @require(lambda resources, tasks: len(resources) == len(set(tasks)))\n        @require(lambda resources, tasks: all(\n            resource.priority_ceiling == tasks[0].priority\n            for resource in resources\n        ))\n        @require(lambda resources, tasks: all(\n            resource.is_locked == False\n            for resource in resources\n        ))\n        @require(lambda resources, tasks: all(\n            task.start == (resources[task.priority - 1].priority_ceiling - 1)\n            for task in tasks\n        ))\n        def check_priority(resources, tasks):\n            for i in range(len(resources)):\n                for j in range(len(tasks)):\n                    assert resources[i].priority_ceiling == tasks[j].priority\n                    if i == j:"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == \"106\\n107\\n71\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71'"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == \"106\\n107\\n71\"\n\"\"\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n\") == \"106\\n107\\n71\\n\"\n\n\"\"\"\n\nimport collections\n\nclass Process:\n    def __init__(self, s, priority):\n        self.s = s\n        self.priority = priority\n    \n    def __repr__(self):\n        return \"s: {}, p: {}\".format(self.s, self.priority)"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == \"106 107\\n71\"\nassert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == \"106 107\\n71\"\n\"\"\"\n\nT, R = map(int, stdin.readline().split())"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n\") == \"106\\n107\\n71\\n\""
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n\") == \"106\\n107\\n71\\n\"\n\n-----Solution-----\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AA') == 51\nassert solution('ABC') == 0\n\"\"\"\nfrom collections import Counter\n\nfrom sys import stdin, stdout\n\nstdin = open('./input.txt')\nstdout = open('./output.txt', 'w')"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AA\") == \"51\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AA') == 51\n\"\"\""
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AA\") == \"51\"\nassert solution(\"AAB\") == \"77\"\nassert solution(\"ZAB\") == \"7\"\nassert solution(\"ABA\") == \"77\"\n\n\"\"\""
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('A') == 0\nassert solution('AA') == 1\nassert solution('AAAA') == 1\nassert solution('AABC') == 1\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('AA') == '51'\nassert solution('A') == '9'\nassert solution('AAAA') == '141'\nassert solution('AABAA') == '857'\n\"\"\""
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AA\") == 51\n\n-----Solution-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('A') == 1\nassert solution('AAA') == 1\nassert solution('ABBA') == 0\nassert solution('ABBAA') == 1\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AA\") == 51\nassert solution(\"AB\") == 51\nassert solution(\"BB\") == 51\nassert solution(\"ABB\") == 104\nassert solution(\"ZAZ\") == 362881\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AB') == 2\nassert solution('ABA') == 4\nassert solution('ABAA') == 7\nassert solution('ABABA') == 10\nassert solution('ABB') == 2\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 29 45 56 68\\\\1 19 43 50 72\\\\11 25 40 49 61\\\\9 23 31 58 63\\\\4 27 42 54 71\") == \"1 2\"\nassert solution(\"2\\\\3 29 45 56 68\\\\1 19 43 50 72\\\\11 25 40 49 61\\\\9 23 31 58 63\\\\4 27 42 54 71\") == \"1 2\"\nassert solution(\"3\\\\2 29 45 56 68\\\\1 19 43 50 72\\\\11 25 40 49 61\\\\9 23 31 58 63\\\\4 27 42 54 71\") == \"1 2\"\nassert solution(\"2\\\\3 29 45 56 68\\\\1 19 43 50 72\\\\11 25 40 49 61\\\\9 23 31 58 63\\\\4 27 42 54 71\") == \"1 2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 29 45 56 68') == '1 2'\nassert solution('1 19 43 50 72') == '1 1'\nassert solution('11 25 40 49 61') == '1 1'\nassert solution('9 23 31 58 63') == '1 1'\nassert solution('4 27 42 54 71') == '1 1'"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"2\\n1 19 43 50 72\\n9 23 31 58 63\\n4 27 42 54 71\") == \"no ties\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"no ties\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n\") == \"1 2\"\nassert solution(\"14 23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68\\n\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\n\"\"\""
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\""
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 29 45 56 68\") == '1 2'\nassert solution(\"1 19 43 50 72\") == '1 1'\nassert solution(\"11 25 40 49 61\") == '1 1'\nassert solution(\"9 23 31 58 63\") == '1 1'\nassert solution(\"4 27 42 54 71\") == '1 1'\n\"\"\"\n\nimport itertools\nimport typing\n\n_stdin = \"\"\"\n3\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\"\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.cards = []\n        self._parse(stdin)\n\n    def _parse(self, stdin: str):\n        for i, card in enumerate(stdin.split('\\n\\n')):\n            self.cards.append([int(n) for n in card.split('\\n')])\n\n    def solve(self) -> typing.Union[str, typing.Tuple[int, int]]:\n        cards = [set(range(1, 301)) for _ in range(5)]\n        for row in range(5):\n            for col in range(5):\n                cards[row] = cards[row] & set(self.cards[col][row])\n        for row in range(5):\n            for col in range(5):\n                for n in range(5):\n                    cards[row] = cards[row] & set(self.cards[col][n: n + 5])\n        for row in range(5):\n            for col in range(5):\n                for n in range(5):\n                    cards[row] = cards[row] & set(self.cards[row + n][col: col + 5])\n        for row in range(5):\n            for col in range(5):\n                for n in range(5):\n                    cards[row] = cards[row] & set(\n                        self.cards[row + n][col: col + 5])\n        for row in range(5):\n            for col in range(5):\n                for n in range(5):\n                    cards[row] = cards[row] & set(\n                        self.cards[row + n][col: col + 5])\n        for card in cards:\n            if len(card) == 5:\n                return '1 1'\n        sorted_cards = list(\n            map(sorted, itertools.permutations(cards)))\n        for i in range(len(sorted_cards)):\n            if i!= 0 and sorted_cards[i] == sorted_cards[i - 1]:\n                return '1 1'\n        return''.join(map(str, sorted(max(cards, key=lambda card: len(card)))))\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'\n\nassert solution('14 23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68') == '1 2'\n\nassert solution('2\\n1 2\\n3 4\\n5 6\\n7 8') == 'no ties'\n\nassert solution('3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'\n\nassert solution('3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2 1') == '1'\nassert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3\\n1 2 3\\n1 2 3') == '0'\n\n-----Problem-----\nJaap, Jan and Thijs are on a trip to the desert after having attended the ACM ICPC World Finals 2015 in Morocco. The trip included a camel ride, and after returning from the ride, their guide invited them to a big camel race in the evening. The camels they rode will also participate and it is customary to bet on the results of the race. \n\nOne of the most interesting bets involves guessing the complete order in which the camels will finish the race. This bet offers the biggest return on your money, since it is also the one that is the hardest to get right.\n\nJaap, Jan, and Thijs have already placed their bets, but the race will not start until an hour from now, so they are getting bored. They started wondering how many pairs of camels they have put in the same order. If camel\u00a0$c$ is before camel\u00a0$d$ on Jaap\u2019s, Jan\u2019s and Thijs\u2019 bet, it means that all three of them put $c$ and $d$ in the same order. Can you help them to calculate the number of pairs of camels for which this happened?\n\n-----Solution------\nTake the three lists. Then for each row, create a dictionary with key = element and value = index. Then iterate over the first two rows. If the element in a row does not exist in the dictionary, add it. If it is, add +1 to the corresponding value. Then iterate over the third row. If the element is not in the dictionary, add it. If it is, add +1 to the corresponding value. If both rows are identical, return the result.\n\nSample input:\n3\n1 2 3\n1 2 3\n1 2 3\nSample output:\n0\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\n\"\"\"\n\n\"\"\"\n\u9996\u5148\u628a\u4e09\u4e2a\u8f93\u5165\u5206\u5f00\uff0c\u7136\u540e\u76f4\u63a5\u7528\u4e00\u4e2alist\u5b58\u50a8\u6570\u636e\n\u7136\u540e\u7528\u4e00\u4e2ahashmap\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u548c\u5176\u5bf9\u5e94\u7684\u8f6e\u6b21\n\u7136\u540e\u904d\u5386hashmap\uff0c\u5982\u679chashmap\u91cc\u9762\u6709\u76f8\u540c\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u6709\u4e09\u4e2a\u90fd\u76f8\u540c\n\"\"\""
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 2 1\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '0'\nassert solution('3 2 1') == '0'\nassert solution('3 1 2') == '0'\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('1 2 3'), '0')\n        self.assertEqual(solution('3 2 1'), '0')\n        self."
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\\n1 2 3\") == \"0\"\nassert solution(\"3\\n1 2 3\\n1 3 2\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\\n2 1 3\\n1 2 3\") == \"2\"\nassert solution(\"3\\n1 2 3\\n2 1 3\\n1 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 2 1\\n1 2 3\\n1 2 3\") == \"0\"\nassert solution(\"3\\n3 2 1\\n2 1 3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n3 2 1\\n2 3 1\\n1 2 3\") == \"1\"\nassert solution(\"3\\n3 2 1\\n2 3 1\\n1 3 2\\n1 2 3\") == \"2\"\nassert solution(\"3\\n3 2 1\\n3 2 1\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 2 1\") == \"0\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\njaap_bet = [int(i) for i in sys.stdin.readline().split()]\njan_bet = [int(i) for i in sys.stdin.readline().split()]\nthijs_bet = [int(i) for i in sys.stdin.readline().split()]\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == e\n\n\"\"\"\nimport os\nimport sys"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n\") == \"0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n\"\n\"\"\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n\"\"\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n\nprint(solution(stdin))\n'''\n\nimport math"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n'\nprint('Hooray!')\n\nNote: The information given for each traffic light is accurate to a 1-second resolution."
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n\") == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul\nfrom itertools import accumulate\n\nnum_lights = int(stdin.readline().strip())\n\npositions = [\n    int(line) for line in stdin\n]\n\ntimes = []\nfor i in range(num_lights - 1):\n    times.append((positions[i + 1] - positions[i]) / 2)\n\nprint(reduce(mul, times))\n\nprint(reduce(mul, accumulate(times[:1] + times)))\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nsolution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\n\"\"\""
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\n\"\"\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\n\"\"\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"\"\"1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\"\"\"\n\nassert solution(\"3\\n1 5\\n3 3\\n4 5\") == \"impossible\"\n\"\"\"\n-----Problem-----\nIn a game of Nim, two players take turns removing objects from a heap of $n$ stones. The player who is the first to get to $0$ wins.\n\nObjects are removed from the heap in the following order:\n\nThe player takes one stone at a time, but can also make a run of $2$ stones if they want.\n\nHe then removes any number of stones in this run from the heap.\n\nThere are exactly eleven possible runs, the maximum being of length $2$.\n\nGiven that there are at most four possible runs for a heap of $n$ stones, what is the maximum number of stones that can be removed?\n\n-----Solution-----\n\nWe know that $n$ can be at most four, and each number is not larger than $n$ so the maximum number of stones is $2n$.\n\nThe maximum number of stones that can be removed is $2n - 2$. The minimum number of stones that can be removed is $0$.\n\nSo the problem is to find the maximum number of stones that can be removed, which is $2n - 2$.\n\nIn other words, find the largest integer $x$ such that $x \\leq 2n - 2$ and $x + 2n \\geq 2$.\n\nSince $x$ is the largest integer such that $x + 2n \\geq 2$, $x + 2n \\leq 3n + 1$.\n\nSo the solution is $x + 2n = 3n + 1$.\n\nThe time complexity is O(1).\n\"\"\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6\\n-5 -3\\n-4 -4') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n-5 -3 = 2\\n-4 -4 = 0'\nassert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6\\n-5 -3\\n-4 -4\\n5 -4\\n-1 -6\\n3 -5\\n-1 -6\\n5 -3') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n-5 -3 = 2\\n-4 -4 = 0\\n5 -4 = 2\\n-1 -6 = 3\\n3 -5 = -2\\n-1 -6 = 5\\n5 -3 = 1'\nassert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6\\n-5 -3\\n-4 -4') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n-5 -3 = 2\\n-4 -4 = 0'\nassert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6\\n-5 -3\\n-4 -4\\n5 -4\\n-1 -6\\n3 -5\\n-1 -6\\n5 -3') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n-5 -3 = 2\\n-4 -4 = 0\\n5 -4 = 2\\n-1 -6 = 3\\n3 -5 = -2\\n-1 -6 = 5\\n5 -3 = 1'\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"3\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"impossible\"\nassert solution(\"2\\n1 5\\n3 3\") == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6')!= '1 + 5 = 3'\nassert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6')!= '1 + 5 = 5'\n\n-------\nInput\n4\n1 5\n3 3\n4 5\n-1 -6\nOutput\n1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n\"\"\""
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\n\n---Problem---\nIn the past few weeks you've built a bunch of functions that accept one or more numbers as input. These functions always return a sum of the input numbers.\n\nBut suppose you want to extend that! Suppose a function accepts one or more numbers, sums up all the numbers and returns the sum. For example, the function could be written like this:"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\"\"\""
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\n\"\"\""
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n') == '4\\n1\\n4\\n6\\n0'"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n\") == \"4\\n1\\n4\\n6\\n0\"\nassert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n\") == \"4\\n1\\n4\\n6\\n0\"\nassert solution(\"1\\n1\") == \"1\\n0\"\nassert solution(\"5 0\\n1 1\\n2 1\") == \"0\\n0\"\nassert solution(\"5 2\\n1 2\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n\") == \"4\\n1\\n4\\n6\\n0\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n\") == \"4\\n1\\n4\\n6\\n0\"\n\"\"\"\n\nimport sys\nimport math\nimport statistics\n\nd, s = map(int, input().split())\n\ndrops = []\nsensors = []\n\nfor i in range(d):\n    drop = list(map(int, input().split()))\n    drops.append(drop)\n\nfor i in range(s):\n    sensor = list(map(int, input().split()))\n    sensors.append(sensor)\n\nsensor_min_x, sensor_max_x = math.inf, 0\nsensor_min_y, sensor_max_y = math.inf, 0\n\nfor i in range(s):\n    sensor_min_x = min(sensor_min_x, sensors[i][0])\n    sensor_max_x = max(sensor_max_x, sensors[i][1])\n    sensor_min_y = min(sensor_min_y, sensors[i][2])\n    sensor_max_y = max(sensor_max_y, sensors[i][3])\n\nsensor_x_len, sensor_y_len = sensor_max_x - sensor_min_x, sensor_max_y - sensor_min_y\n\nx_points = []\ny_points = []\n\nfor drop in drops:\n    x_points.append(drop[0])\n    y_points.append(drop[1])\n\nsorted_x_points = sorted(x_points)\nsorted_y_points = sorted(y_points)"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n2 8\\n5 8\\n5 9\") == \"4\\n1\\n4\\n6\\n0\"\n\"\"\"\n\nstdin = \"\"\"5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\"\"\"\n\nimport sys\nimport math\nimport queue"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\n\n\"\"\""
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n') == '4\\n1\\n4\\n6\\n0\\n'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == \"4\\n1\\n4\\n6\\n0\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('8 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('8 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('8 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('8 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\") == \"4\\n1\\n4\\n6\\n0\"\n\"\"\"\nimport sys\nfrom math import atan, tan, atan2, sqrt, pi\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == \"4\\n1\\n4\\n6\\n0\"\nassert solution(\"6 11\\n1 2\\n1 6\\n1 8\\n1 7\\n2 2\\n2 5\\n2 9\\n1 10\\n1 10\\n1 6\\n3 2\\n3 5\\n3 9\\n4 6\\n4 10\\n4 11\\n1 7\\n1 11\\n2 7\\n2 11\\n3 7\\n3 11\\n4 7\\n4 11\\n5 7\\n5 11\\n6 7\\n6 11\\n7 7\\n7 11\\n8 7\\n8 11\\n9 7\\n9 11\\n10 7\\n10 11\\n11 7\\n11 11\") == \"2\\n1\\n2\\n3\\n3\\n1\\n4\\n4\\n4\\n5\\n5\\n2\\n3\\n3\\n0\\n5\\n5\\n5\\n6\\n6\\n5\\n6\\n6\\n7\\n7\\n5\\n6\\n6\\n7\\n7\\n6\\n7\\n7\\n8\\n8\\n7\\n8\\n8\\n9\\n9\\n8\\n9\\n9\\n10\\n10\\n9\\n10\\n10\\n11\\n11\\n10\\n11\\n11\\n11\\n12\\n12\\n11\\n12\\n12\\n12\\n13\\n13\\n12\\n13\\n13\\n14\\n14\\n13\\n14\\n14\\n15\\n15\\n14\\n15\\n15\\n16\\n16\\n15\\n16\\n16\\n17\\n17\\n16\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 3\") == 4\n\"\"\""
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('1 2 3 4') == 4"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1, 2, 3, 4) == 4\n\"\"\""
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == 4\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 3 4''') == '4'\nprint(solution(stdin=input()))\n\n-----Time Complexity-----\nO(n)\n\n-----Space Complexity-----\nO(1)"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 4\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2 3') == 4\n\"\"\"\n\nimport sys\nfrom functools import lru_cache"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == 4\n\"\"\""
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == '4'\nassert solution(\"2 1 1\") == '0'\nassert solution(\"2 1 1 3\") == '1'\nassert solution(\"1 2 1\") == '1'\nassert solution(\"2 2\") == '0'\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 2\\n20 60\\n50 90') == '4 3'\nassert solution('1 3 2\\n20 60\\n50 90\\n50 60') == '5 4'\nassert solution('1 3 2\\n20 60\\n50 90\\n50 90') == '4 3'\nassert solution('1 3 2\\n20 60\\n50 90\\n50 60\\n50 60\\n50 60\\n50 60') == '5 4'\nassert solution('1 3 2\\n20 60\\n50 90\\n50 90\\n50 90\\n50 90\\n50 90\\n50 90\\n50 90\\n50 90\\n50 90') == '4 4'\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 31 2\\n20 60\\n50 90\") == \"4 3\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 31 2\\n20 60\\n50 90\") == \"4 3\"\nprint(solution(\"1 31 2\\n20 60\\n50 90\"))\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 31 2\\n20 60\\n50 90\") == \"4 3\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'\nassert solution('1 31 2\\n20 60\\n50 90') == '4 3'\nassert solution('1 31 2\\n20 60\\n50 90') == '4 3'\n'''\n\nimport sys\nfrom collections import deque\nfrom typing import Deque, Dict, List, Set, Tuple\nfrom itertools import combinations"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'\n\nn, t, m = [int(x) for x in stdin.split(' ')]\nscores = [0] * (t + 1)\nfor _ in range(m):\n    l, r = [int(x) for x in stdin.split(' ')]\n    scores[l] += 1\n    scores[r] -= 1\n\ngoal = 0\nscore = 0\nscore_goal = 0\nscore_remain = 0\nfor i in range(1, t + 1):\n    score += scores[i]\n    if score > score_goal:\n        score_goal = score\n        goal += score_goal\n        score_remain = score - score_goal\nprint(goal, score_remain)\n\n---\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90\\n') == '4 3'\n\n\"\"\"\n\nimport sys\n\nassert sys.stdin.read() == '1 31 2\\n20 60\\n50 90\\n'"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'\nassert solution('0 1 0\\n1 0\\n0 0') == '0 1'\nassert solution('0 2 10\\n1 0\\n0 0') == '0 2'\nassert solution('0 2 10\\n0 0\\n0 1') == '0 0'\n\"\"\"\n\nn, t, m = map(int, stdin.readline().split())\nschedules = [list(map(int, stdin.readline().split())) for _ in range(m)]\ncheerleaders = {i: set() for i in range(n)}\nfor start, end in schedules:\n    cheerleaders[end].add(start)\n\nmin_, max_ = -1, -1\nfor i in range(t, t + 1000):\n    curr = set()\n    for j in range(i - n + 1, i):\n        curr = curr.union(cheerleaders[j])\n    min_ = max(min_, len(curr))\n    max_ = max(max_, len(curr))\n\nprint(min_, max_)\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 31 2\\n20 60\\n50 90\") == \"4 3\"\nassert solution(\"1 31 2\\n20 60\\n50 90\") == \"4 3\"\n\"\"\"\n\nn, t, m = map(int, input().split())\narr = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    arr.append([a,b])\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == expected_output\n\n\"\"\"\n\nr, w, d = list(map(int, input().split()))\n\nnum_combination_white = 1\nnum_combination_red = 1\n\nfor i in range(w):\n    num_combination_white *= (w - i)\n\nfor i in range(r):\n    num_combination_red *= (r - i)\n\nprint(num_combination_red / (num_combination_white * d) // 1 % (10 ** 9 + 7))\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"3 3 1\") == \"3\"\nassert solution(\"3 3 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 2 1\"\n) == \"3\"\nassert solution(\n    \"10 9 2\"\n) == \"1\"\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"3 5 3\") == \"6\"\nassert solution(\"4 7 1\") == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin=\"2 2 1\") == 3\nassert solution(stdin=\"2 2 2\") == 2\n\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 2') == '0'\nassert solution('2 1 1') == '1'\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('3 4 4') == '0'\nassert solution('4 5 8') == '0'\nassert solution('1 2 1') == '2'\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 1 2\") == \"0\"\nassert solution(\"4 4 5\") == \"0\""
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('3 2 1') == '6'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1') == '1'\n\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 5 2\") == \"2\"\n\"\"\"\n\nimport math\n\nr, w, d = map(int, stdin.split())\n\npiles = w - r\n\nways = 1\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\nSample Input:\n4\n999999 31 1222 3112 23\nSample Output:\n4 0\n\nSample Input:\n4\n1222 31 1231 3112 23\nSample Output:\n4 1\n\nSample Input:\n4\n1222 31 1222 3112 23\nSample Output:\n4 0\n\nSample Input:\n5\n999999 21 31 1231 3212 23\nSample Output:\n5 0\n\nSample Input:\n5\n999999 21 31 1231 3212 23\nSample Output:\n5 1\n\nSample Input:\n5\n1 2 3 4 5\nSample Output:\n1 2\n\nSample Input:\n5\n1 2 3 4 5\nSample Output:\n2 4\n\nSample Input:\n5\n2 1 2 3 4\nSample Output:\n2 1\n\nSample Input:\n5\n2 1 2 3 4\nSample Output:\n1 1\n\nSample Input:\n5\n2 1 2 3 4\nSample Output:\n1 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2 1 2 3 4\nSample Output:\n0 0\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n5\n2212 31 1232 2131 23\nSample Output:\n3 1\n\nSample Input:\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391') == '3 1'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391') == '3 1'\nassert solution('5\\n2 2 2 3') == '1 2'\nassert solution('5\\n210000 100000 100000 100000 100000') == '4 0'\nassert solution('5\\n10000 100000 100000 100000 100000') == '4 0'\nassert solution('1\\n10000') == '0 0'\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\nimport sys\nimport math"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\nassert solution(\"13\\n1341 2412 1200 3112 2391\") == \"3 0\"\n\nassert solution(\"1\\n1\") == \"1 1\"\n\nassert solution(\"1\\n2\") == \"1 1\"\n\nassert solution(\"1\\n1341 2412 1200 3112 2391\") == \"1 1\""
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\"\"\""
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\"\"\"\n\nn = int(stdin.readline())\ndist = list(map(int, stdin.readline().split()))\n\nmax_ = n\n\nfor i in range(n - 1):\n    if dist[i] < dist[i + 1] * 2:\n        max_ -= 1\n        break\n\nprint(max_, i)\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1341 2412 1200 3112 2391''') == '3 1'"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n1 2 3\\n3 1 2\\n2 3 2') == '1'\n\"\"\""
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4''') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"6\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5') == '6'\n\"\"\""
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4''') == '6'\nassert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n2 3 6\n''') == '6'\nassert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n2 3 6\n2 3 7\n3 2 8\n3 3 2\n''') == '9'\nassert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n2 3 6\n2 3 7\n3 2 8\n3 3 2\n''') == '9'\n\n-----Explanation-----\nThe graph is given as an adjacency list.\n\nThe graph looks like this:\n\n[1] -> [3] -> [7]\n[2] -> [1] -> [3] -> [2] -> [5] -> [7]\n[3] -> [2] -> [5] -> [7]\n[3] -> [2] -> [4]\n[3] -> [2] -> [6]\n[3] -> [2] -> [8]\n[3] -> [2]\n[4] -> [3] -> [8]\n[4] -> [3] -> [2]\n[4] -> [3] -> [6]\n[5] -> [2] -> [7]\n[5] -> [3] -> [2] -> [7]\n[5] -> [3] -> [4]\n[5] -> [3] -> [6]\n[6] -> [3] -> [4]\n[6] -> [3] -> [5]\n[6] -> [3] -> [8]\n[6] -> [3]\n[7] -> [5] -> [2] -> [7]\n[7] -> [5] -> [3] -> [2] -> [7]\n[7] -> [5] -> [3] -> [2]\n[7] -> [5] -> [3] -> [4]\n[7] -> [5] -> [3] -> [6]\n[7] -> [5] -> [3] -> [8]\n[7] -> [5]\n[8] -> [3] -> [2]\n[8] -> [3] -> [6]\n[8] -> [3]\n[8] -> [3] -> [4]\n\nJanet will wait at most 6 minutes (max(6, 1 + 3 + 2)) and Richard will wait at least 6 minutes (min(6, 1 + 2 + 3 + 3 + 2 + 5 + 7 + 5 + 2 + 7)).\n\n'''\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n\") == \"6\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n4\n1 3\n2 3\n2 4\n2 5\n3 4\n''') == '2'\n\nassert solution('''6\n7\n1 2 4\n1 3 3\n2 3 5\n2 4 6\n2 5 1\n3 4 5\n3 5 3\n3 6 2\n4 5 3\n4 6 4\n5 6 6\n''') == '4'\n\nassert solution('''5\n4\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '3'\n\nassert solution('''10\n9\n1 2 4\n1 3 3\n2 3 5\n2 4 6\n2 5 1\n3 4 5\n3 5 3\n3 6 2\n4 5 3\n4 6 4\n5 6 6\n''') == '5'\n\nassert solution('''5\n5\n1 4 3\n2 3 2\n2 4 1\n3 4 2\n3 5 2\n''') == '5'"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\") == \"6\"\nassert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"6\"\nassert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n4 3 3\\n4 2 2\\n4 1 1\\n4 5 1\") == \"6\"\nassert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n4 3 3\\n4 2 2\\n4 1 1\\n4 5 1\\n4 6 1\\n4 7 1\\n4 8 1\\n4 9 1\\n4 10 1\") == \"6\"\nassert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n4 3 3\\n4 2 2\\n4 1 1\\n4 5 1\\n4 6 1\\n4 7 1\\n4 8 1\\n4 9 1\\n4 10 1\\n5 3 4\\n5 4 4\\n5 4 4\\n5 4 4\\n5 5 4\\n5 6 4\\n5 7 4\\n5 8 4\\n5 9 4\\n5 10 4\") == \"6\"\n\"\"\"\n\nimport sys\nimport bisect\n\na, b = map(int, sys.stdin.readline().split())\nn, m = map(int, sys.stdin.readline().split())\nedges = [[] for _ in range(n + 1)]\nfor _ in range(m):\n    u, v, t = map(int, sys.stdin.readline().split())\n    bisect.insort(edges[u], (t, v))\n    bisect.insort(edges[v], (t, u))\n\nroute = [0] * (n + 1)\nroute[1] = a\ncur = b\nwhile cur > 0:\n    time, cur = edges[cur][0]\n    route[cur] = max(route[cur], time)\n    for nxt in edges[cur][1:]:\n        time, nxt = nxt\n        if route[nxt] < time:\n            continue\n        route[nxt] = time\n\nroute = route[1:]\nprint(max(route))\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '0'\nassert solution('1 2 1\\n') == '0'\nassert solution('1 1 1\\n') == '0'\nassert solution('1 2 10\\n') == '0'\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '6'\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nn, m = map(int, sys.stdin.readline().split())\n\nroads = []\n\nfor _ in range(m):\n    u, v, t = map(int, sys.stdin.readline().split())\n    roads.append((u, v, t))\n    roads.append((v, u, t))\n\nroads.sort(key=lambda x: x[2])\n\nstart, end = 1, n\n\nmin_cost = None\nfor u, v, t in roads:\n    if u == 1:\n        min_cost = t\n        break\n    elif u > start:\n        min_cost = t + b\n        break\n    else:\n        if v > end:\n            break\n        start = u\n        end = v\n        min_cost = min(min_cost, t)"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\"\nassert solution(\"2 ab b\\n5 b\") == \"0 1\"\nassert solution(\"2 ab b\\n1 b\\n1 a\") == \"0 0\"\nassert solution(\"2 ab b\\n5 b\\n1 a\") == \"0 0\"\nassert solution(\"2 ab b\\n1 b\\n1 b\\n1 a\") == \"0 -1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 ab b\\n1 b\") == '0 1\\n-1 0'\n\"\"\"\n\nn = int(stdin.readline())\n\ndp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\nfor _ in range(n):\n    m, *options = stdin.readline().split()\n    for i in range(int(m)):\n        for j in range(len(options[i])):\n            dp[int(options[i][j])][int(options[i][j+1])] += 1\n\nfor i in range(n):\n    print(' '.join(map(str, dp[i])))\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\"\nassert solution(\"2 ab b\\n3 b\") == \"0 -1\"\nassert solution(\"3 ab b\\n1 b\") == \"0 -1\"\nassert solution(\"3 ab c\\n1 c\") == \"1 1\"\nassert solution(\"3 ab c\\n1 b\") == \"1 0\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 ab b\\n1 b\") == \"0 1\"\nassert solution(\"3\\n2 aa ab a\\n1 a\") == \"1 1\"\n\"\"\"\nfrom typing import List, Tuple\n\nfrom tools import timing\n\nn = int(input())\nc = [set() for _ in range(26)]\nfor _ in range(n):\n    m = int(input())\n    for _ in range(m):\n        c[ord(input().strip()[0]) - ord(\"a\")].add(input().strip())\n\nres = {}\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\nab b\n1 b''') == '0 1'\nassert solution('''2\naa a\n1 a''') == '-1 0'\nassert solution('''2\nbb b\n2 bb''') == '-1 0'\nassert solution('''2\naabb b\n1 a\n2 ab\n''') == '-1 0'\nassert solution('''4\na b c\n2 b b\n1 a\n4 b d\n''') == '-1 0'\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2abb\") == \"0 1\"\nassert solution(\"2b\") == \"-1 0\"\nassert solution(\"2aab\") == \"1 1\"\nassert solution(\"2a\") == \"1 -1\"\nassert solution(\"2ab\") == \"0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2ab\\n1b\") == \"0 1\"\n\"\"\""
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\nab\nb\n\"\"\") == \"\"\"0 1\"\"\"\n\nassert solution(\"\"\"4\na b a \n1 b\n0 b\n0 a\n\"\"\") == \"\"\"0 1\"\"\"\n\nassert solution(\"\"\"5\na b b c d\n0 b\n0 c\n0 d\n1 a\n2 c\n3 b\n4 c\n3 d\n\"\"\") == \"\"\"0 3\"\"\"\n\nassert solution(\"\"\"6\na b c d e f\n0 b\n0 c\n0 d\n0 e\n0 f\n2 b\n3 c\n4 d\n4 e\n5 f\n6 c\n6 d\n6 e\n6 f\n\"\"\") == \"\"\"0 4\"\"\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\\n-1 0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nab\\nb\") == \"0 1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2') == '3'\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == '1\\n3'\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"1\"\nassert solution(\"1 2\\n1 1 2\\n2\\n2\\n2\\n2\") == \"2\"\nassert solution(\"1 2\\n2\\n1 1 2\") == \"2\"\nassert solution(\"1 2\\n2\\n1 2 2\") == \"2\"\n\"\"\"\nimport os\nimport unittest\nfrom typing import Tuple, List\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2') == '3'\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 4\n1 1 2\n2\n1 1 2''') == '''1\n3'''\n\nassert solution('''1 1\n1 1\n2\n2''') == '''1\n1'''\n\nassert solution('''1 5\n1 1 2\n1 1 2\n2\n2\n1 1 3\n1 1 3\n2\n2\n2\n3\n3''') == '''1\n1\n1\n1\n1\n2\n1\n1\n2\n1\n1'''\n\nassert solution('''1 1\n1 1\n2\n2\n1 1 3\n1 1 3\n2\n2\n2\n3\n3''') == '''1\n1\n1\n1\n1\n1\n1\n1\n2\n1'''\n\nassert solution('''1 3\n1 1 2\n1 1 2\n2\n2\n1 1 3\n1 1 3\n2\n2\n2\n3\n3''') == '''1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n'''"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 1 2\\n2\\n1 1 2\") == \"0.4\"\nassert solution(\"4 2\\n1 1 2\\n2\\n3 3\\n1 1 2\") == \"2\"\nassert solution(\"4 2\\n1 1 2\\n2\\n3 3\\n1 1 2\\n2\\n1 1 2\\n2\\n1 1 2\\n1 1 2\\n2\\n1 1 2\") == \"2.0\"\n\n\"\"\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\") == \"2\"\nassert solution(\"4\\n1 1 2\\n2 2 3\\n3 1 3\\n3 3 4\") == \"3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"1\\n3\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"1\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n1 2 3 1\\n2\\n1 2 3\") == \"1\\n3\"\n\"\"\"\nfrom collections import defaultdict\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nlst = [0] * m\nfor i in range(m):\n    lst[i] = map(int, sys.stdin.readline().split())\n\nd = defaultdict(int)\nfor l in lst:\n    d[l[0]] += 1\n    d[l[1]] += 1"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n0 5 2\n5 0 4\n2 4 0''') == '7'\n\"\"\"\n\nimport sys\n\nimport heapq\nimport collections\nimport math\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.split('\\n')[0])\n        b = [stdin.split('\\n')[1:][i].split() for i in range(0, n)]\n        #b = stdin.split('\\n')[1:]\n        #b = b[:n]\n        b = [list(map(int, x)) for x in b]\n        b.sort()\n\n        #for i in range(0, n):\n        #    b[i].sort()\n        \n        #b = [list(map(int, stdin.split('\\n')[1:])) for x in range(0, n)]\n\n        queue = []\n        heapq.heapify(queue)\n        total = 0\n        for i in range(0, n):\n            queue.append(b[i][0])\n        \n        while len(queue)!= 0:\n            #print(queue)\n            #print(total)\n            next_time = queue[0]\n            heapq.heappop(queue)\n            #print(next_time)\n            #print(total)\n            if next_time == 0:\n                break\n            else:\n                total += next_time\n                for i in range(0, n):\n                    if i == 0:\n                        continue\n                    if next_time <= b[i][i-1] and next_time > 0:\n                        heapq.heappush(queue, b[i][i-1] - next_time)\n                        #queue.append(b[i][i-1] - next_time)\n                    if next_time <= b[i][i] and next_time > 0:\n                        heapq.heappush(queue, b[i][i] - next_time)\n                        #queue.append(b[i][i] - next_time)\n        print(total)\n        return str(total)"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5\\n2\\n2\\n0\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0') == 7\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3\\n1\\n2') == '4'\n\n\"\"\""
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0') == '7'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nfrom typing import IO, List, Deque, Optional, Union, Tuple\n\n\nclass Graph:\n    def __init__(self, vertices: int):\n        self.vertices: int = vertices\n        self.adjacency_matrix: List[List[int]] = [[0 for _ in range(vertices)] for _ in range(vertices)]\n\n    def __str__(self) -> str:\n        return f'{self.__class__.__name__}(vertices={self.vertices}, adjacency_matrix=\\n{self.adjacency_matrix})'\n\n    def _repr_html_(self) -> str:\n        return f'<pre>{self}</pre>'\n\n\n    def add_edge(self, source: int, destination: int, weight: int) -> None:\n        self.adjacency_matrix[source][destination] = weight\n\n\n    def is_valid_vertex(self, vertex: int) -> bool:\n        return 0 <= vertex < self.vertices\n\n\n    def dfs_time_complexity(self) -> int:\n        # TODO: fix this\n        pass\n\n\n    def bfs_time_complexity(self) -> int:\n        # TODO: fix this\n        pass\n\n\n    def has_negative_cycle(self) -> bool:\n        # TODO: fix this\n        pass\n\n\n    def ford_fulkerson(self) -> Tuple[int, Optional[List[int]]]:\n        # TODO: fix this\n        pass\n\n\nclass Edge:\n    def __init__(self, source: int, destination: int, weight: int):\n        self.source: int = source\n        self.destination: int = destination\n        self.weight: int = weight\n\n\n    def __str__(self) -> str:\n        return f'{self.__class__.__name__}(source={self.source}, destination={self.destination}, weight={self.weight})'\n\n\n    def __repr__(self) -> str:\n        return str(self)\n\n\n    def _repr_html_(self) -> str:\n        return f'<pre>{self}</pre>'\n\n\nclass DisjointSet:\n    def __init__(self, vertices: int):\n        self.parents: List[int] = [None for _ in range(vertices)]\n        self.ranks: List[int] = [0 for _ in range(vertices)]\n\n\n    def make_set(self, vertex: int) -> None:\n        self.parents[vertex] = vertex\n        self.ranks[vertex] = 0\n\n\n    def find(self, vertex: int) -> int:\n        if self.parents[vertex]!= vertex:\n            self.parents[vertex] = self.find(self.parents[vertex])\n        return self.parents[vertex]\n\n\n    def union(self, vertex_a: int, vertex_b: int) -> None:\n        root_a = self.find(vertex_a)\n        root_b = self.find(vertex_b)\n\n        if root_a!= root_b:\n            if self.ranks[root_a] > self.ranks[root_b]:\n                self.parents[root_b] = root_a\n            elif self.ranks[root_a] < self.ranks[root_b]:\n                self.parents[root_a] = root_b\n            else:\n                self.parents[root_a] = root_b\n                self.ranks[root_b] += 1\n\n\nclass MinCostFlow:\n    def __init__(self, source: int, sink: int, graph: Graph):\n        self.source: int = source\n        self.sink: int = sink\n        self.graph: Graph = graph\n        self.graph.add_edge(source, sink, 0)\n        self.vertices: int = graph.vertices\n        self.edges: int = graph.vertices\n        self.paths: List[Deque[Edge]] = [deque() for _ in range(self.vertices)]\n\n        self.flows: List[int] = [0 for _ in range(self.edges)]\n        self.unit_costs: List[int] = [0 for _ in range(self.edges)]\n        self.residual_matrix: List[List[int]] = [[0 for _ in range(self.edges)] for _ in range(self.edges)]\n\n        self.disjoint_set: DisjointSet = DisjointSet(self.vertices)\n\n\n    def __str__(self) -> str:\n        return f'{self.__class__.__name__}(source={self.source}, sink={self.sink}, graph={self.graph}, flows={self.flows}, unit_costs={self.unit_costs}, paths={self.paths}, residual_matrix=\\n{self.residual_matrix})'\n\n\n    def __repr__(self) -> str:\n        return str(self)\n\n\n    def _repr_html_(self) -> str:\n        return f'<pre>{self}</pre>'\n\n\n    def augment_path(self, path: Deque[Edge]) -> None:\n        unit_cost: int = 0\n        for edge in path:\n            unit_cost += edge.weight\n        flow: int = min(self.unit_costs[edge.source] - self.unit_costs[edge.destination] for edge in path)\n        for edge in path:\n            self.residual_matrix[edge.source][edge.destination] += flow\n            self.residual_matrix[edge.destination][edge.source] -= flow\n        self.unit_costs[self.sink] -= unit_cost\n        self.unit_costs[self.source] += unit_cost\n\n\n    def min_cost_flow(self) -> List[int]:\n        while self.bfs():\n            while self.dfs():\n                pass\n        return self.unit_costs[self.sink]\n\n\n    def bfs(self) -> bool:\n        # TODO: fix this\n        return False\n\n\n    def dfs(self) -> bool:\n        # TODO: fix this\n        return False\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n0 5 2\n5 0 4\n2 4 0''') == '7'\n\"\"\""
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 5\\n2 1 4\\n3 1 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 5 2\\n5 0 4\\n2 4 0\") == \"7\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom functools import lru_cache\nimport heapq"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0') == 7\n'''\n\n\nn = int(input())\nf = [list(map(int, input().split())) for i in range(n)]\ndp = [[0]*n for _ in range(n)]\nfor i in range(n):\n    dp[i][i] = 0\n\nfor l in range(1, n):\n    for i in range(n-l):\n        j = i + l\n        for k in range(i, j):\n            dp[i][j] = max(dp[i][j], dp[i][k]+dp[k+1][j] + f[i][0]*f[k][1]*f[j][1])\n\nprint(dp[0][-1])\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 5 2\\n5 0 4\\n2 4 0\\n\") == \"7\"\n\"\"\"\n\nn = int(input())\n\nflight_duration = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    row = input().split()\n    for j, val in enumerate(row):\n        flight_duration[i][j] = int(val)\n\nfor row in flight_duration:\n    print(row)\n\nresult = 0\nprevious_index = [-1] * n\nfor i in range(n):\n    for j in range(n):\n        if flight_duration[i][j]!= 0:\n            if previous_index[i]!= j:\n                result += flight_duration[i][j]\n            previous_index[j] = i\nprint(result)\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1099511627776') == 8\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1099511627776\") == \"8\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1099511627776\") == \"8\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1099511627776\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1099511627776') == '8'\nprint(solution(stdin))\n\n------Discussion-----\nThe problem is actually easy. You just have to find a list of numbers where the sum of the squares of the numbers is equal to the original number.\n\nIf you're not familiar with the sum of the squares of the numbers, I recommend looking it up.\n\nEach number in the list must be distinct, because if there were two numbers with the same sum of the squares, the sum of the squares of the numbers in the list would be bigger.\n\nIn other words, if we have a list of numbers $Y$ such that the sum of the squares of the elements of $Y$ is equal to $X$, then we also have a list of numbers $Y'$ such that the sum of the squares of the elements of $Y'$ is equal to $X$.\n\nIn other words, if there exists some list $Y$ such that the sum of the squares of the elements of $Y$ is equal to $X$, then we can find a list $Y'$ such that the sum of the squares of the elements of $Y'$ is equal to $X$.\n\nA list of elements $Y$ is called a \"partition\" of $X$ if the sum of the squares of the elements of $Y$ is equal to $X$.\n\nSo, for a positive integer $X$, let $S(X)$ be the set of all lists of distinct positive integers $Y$ such that the sum of the squares of the elements of $Y$ is equal to $X$.\n\nFor example, $S(1099511627776) = {{1, 4, 9, 16, 25, 36, 49, 64, 81, 100}, {1, 6, 11, 20, 37, 52, 69, 84, 101, 116}, {1, 8, 13, 24, 39, 56, 77, 108, 121, 144}, {1, 10, 19, 38, 57, 76, 109, 128, 145, 176}, {1, 12, 21, 40, 61, 80, 121, 152, 181, 200}, {1, 14, 25, 46, 63, 84, 125, 156, 185, 216}, {1, 16, 33, 54, 89, 144, 169, 196, 225, 256}, {1, 18, 37, 58, 87, 132, 157, 182, 217, 262}, {1, 20, 45, 72, 93, 132, 161, 180, 201, 252}, {1, 22, 51, 82, 117, 168, 181, 224, 253, 292}, {1, 24, 55, 96, 169, 224, 249, 292, 325, 364}, {1, 26, 61, 104, 169, 228, 253, 292, 337, 374}, {1, 28, 69, 108, 169, 228, 253, 292, 331, 374}, {1, 30, 77, 116, 169, 228, 253, 292, 337, 374}}$\n\nThis means that $S(1099511627776) = {{1, 4, 9, 16, 25, 36, 49, 64, 81, 100}, {1, 6, 11, 20, 37, 52, 69, 84, 101, 116}, {1, 8, 13, 24, 39, 56, 77, 108, 121, 144}, {1, 10, 19, 38, 57, 76, 109, 128, 145, 176}, {1, 12, 21, 40, 61, 80, 121, 152, 181, 200}, {1, 14, 25, 46, 63, 84, 125, 156, 185, 216}, {1, 16, 33, 54, 89, 144, 169, 196, 225, 256}, {1, 18, 37, 58, 87, 132, 157, 182, 217, 262}, {1, 20, 45, 72, 93, 132, 161, 180, 201, 252}, {1, 22, 51, 82, 117, 168, 181, 224, 253, 292}, {1, 24, 55, 96, 169, 224, 249, 292, 325, 364}, {1, 26, 61, 104, 169, 228, 253, 292, 337, 374}, {1, 28, 69, 108, 169, 228, 253, 292, 331, 374}, {1, 30, 77, 116, 169, 228, 253, 292, 337, 374}}$\n\nAll lists $Y$ of $S(X)$ are called \"partitions\" of $X$.\n\nSo for a positive integer $X$, we have $S(X) = \\{{
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1099511627776') == '8'\n\"\"\""
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1099511627776) == 8\n\"\"\"\n\nimport sys\n\n_, x = sys.stdin.read().split()\nprint(len(str(x)))"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1099511627776\") == \"8\"\n\"\"\""
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1099511627776\") == \"8\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == 2\n\n\"\"\""
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == 2\nprint(solution('3 3\\nx..\\n.x.\\nx.x'))\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\nx..\\n.x.\\nx.x\") == 2\nassert solution(\"7 6\\n...x.\\n...x.\\nx....\\nx...x\\nx.x..\\n.x...\\n.....\\n\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nx..\\n.x.\\nx.x\") == 2\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nx..\\n.x.\\nx.x\\n\") == \"2\"\nassert solution(\"2 2\\nxx\\n.x\\nxx\\n\") == \"1\"\nassert solution(\"3 2\\nxx.\\nxx.\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == '2'\n\"\"\"\nimport sys\nfrom typing import List\n\nassert sys.version_info >= (3, 7)\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nx..\\n.x.\\nx.x\") == 2\nassert solution(\"7 10\\n.....\\n...x\\n.x.x\\nx.x.\\n.....\\n.....\\nx.xxx\") == 4\nassert solution(\"7 10\\n.....\\n...x\\n..x..\\n..x.x\\n.x.x.\\n.....\\n.....\\nx.xxx\") == 4\nassert solution(\"7 10\\n.....\\n...x\\n..x..\\n..x.x\\n.x.x.\\n.....\\n.....\\nx.xxx\\n.x.x.\\n..x..\") == 5\n\n\"\"\""
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('x..') == '2'\nassert solution('x.x') == '0'\nassert solution('x.x\\nxx') == '1'\n\n'''\n\n\nimport sys\nimport re\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 3\nx..\n.x.\nx.x\n\"\"\") == 2\nassert solution(\"\"\"3 3\nx..\n.x.\nx.x\n\"\"\") == 1\nassert solution(\"\"\"3 3\n.x.\nx.x\nx.x\n\"\"\") == 0\nassert solution(\"\"\"3 3\nx..\nx.x\nx.x\n\"\"\") == 0\nassert solution(\"\"\"3 3\n.x.\n.x.\n.x.\n\"\"\") == 0\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n\"\"\"\nimport math"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\\n-1\\n5\\n6\"\n\n\"\"\"\none liner\n\"\"\"\nassert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\\n-1\\n5\\n6\"\n\n\"\"\"\nnote: input is a string\n\"\"\"\nassert solution(\"\"\"\n5\n0 0 0\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"5\\n5\\n5\\n5\\n5\"\n\n\"\"\"\nnote: input is a string\n\"\"\"\nassert solution(\"\"\"\n4\n2 4 3\n3 3 0\n4 0 0\n1 2 2\n\"\"\") == \"1\\n2\\n-1\\n-1\"\n\n\"\"\"\nnote: input is a string\n\"\"\"\nassert solution(\"\"\"\n5\n2 2 0\n1 4 2\n3 3 0\n4 0 0\n1 0 0\n\"\"\") == \"2\\n2\\n2\\n2\\n2\"\n\n\"\"\"\nnote: input is a string\n\"\"\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n') == '9\\n-1\\n5\\n6\\n'\n\"\"\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\nassert solution(\"2\\n2 2 2\\n3 0 0\") == \"-1\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('2\\n1 1 40 30 20 10\\n3 1 95 95 95 10') == '91'\nassert solution('2\\n1 1 40 30 20 10\\n2 1 95 50 30 20') == '121'\n\"\"\""
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20''') == '91'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\n\"\"\"\n\nn = int(input())\n\nshortcut = dict()\n\nfor i in range(n):\n    x, s = list(map(int, input().split()))\n    shortcut[x] = s\n\ntimes = list(map(int, input().split()))\n\nfor i in range(len(times)):\n    times[i] += shortcut[i]\n\nprint(max(times))\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20') == '91'\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20') == '91'\n\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == '91'\nassert solution(\"3\\n1 1 40 30 20 10\\n2 1 95 50 30 20\") == '69'\n\n---Problem---\nThe idea of the problem is to first create a dictionary where the key is a number and the value is the level number and the time it takes to complete that level.\n\nThen we can iterate through the list and calculate the value of the shortcut items by subtracting the time taken in that level using the shortcut item.\n\nThen we can iterate through the list and calculate the time it takes to complete each level by taking the minimum between the time it takes to complete that level using the shortcut item, and the time it takes to complete that level using the shortcut item.\n\nFinally, we can add up the minimum times to get the total.\n\n-----Notes-----\nIt is possible that a level can be completed within the time it takes to finish the shortcut, so we need to make sure to calculate the minimum time in this way.\n\nThere is also the case when the minimum time is the same as the shortcut, as in that case the shortcut will be used if the time is to complete that level.\n\nThis is particularly the case when the shortcut is a list of numbers of the same length, as then all of the numbers will be the same, and the minimum will be the same as the shortcut.\n\n\"\"\""
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == '91'\n\nassert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == '74'\n\n\"\"\"\n&quot;&quot;&quot;\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\nassert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"51\"\nassert solution(\"1\\n1 1 40 30 20 10\") == \"1\"\nassert solution(\"1\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"1\""
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20') == '91'\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\nprint(solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\"))\n\"\"\""
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15 20\\\\n0\\\\n1 1\") == \"15\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n15 20\\n0\\n1 1\") == \"15\"\nassert solution(\"2\\n15 20\\n1\\n0 1\") == \"20\"\nassert solution(\"2\\n10 10\\n1\\n1 2\") == \"10\"\n\"\"\"\n\nn = int(stdin.readline().strip())\ntime = list(map(int, stdin.readline().split()))\n\ndependency = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    dependency[i] = list(map(int, stdin.readline().split()[1:]))\n\ndp = [[0 for _ in range(1 << n)] for _ in range(n)]\n\nfor step in range(n):\n    for state in range(1 << n):\n        if step == 0:\n            dp[step][state] = time[step]\n        else:\n            for prev in range(n):\n                if (state >> prev) & 1 == 0:\n                    dp[step][state] = min(dp[step][state], dp[step - 1][state | (1 << prev)])\n                if dp[step][state] == dp[step - 1][state]:\n                    dp[step][state] = dp[step - 1][state]\n\n            if (state >> step) & 1 == 0:\n                dp[step][state] = min(dp[step][state], dp[step][state | (1 << step)] + time[step])\n\nprint(dp[n - 1][(1 << n) - 1])\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1\\n') == 15\nassert solution('3\\n12 9 11\\n0\\n1 2\\n0\\n2 3\\n') == 17\n\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == 15\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('5 2') == '2'\nassert solution('2 5') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == '15'\nassert solution('2\\n15 20\\n0\\n1 1\\n2 3') == '15'\nassert solution('2\\n15 20\\n0\\n1 1\\n2 2') == '15'\nassert solution('2\\n15 20\\n0\\n1 1\\n2 2\\n3 3') == '15'\nassert solution('2\\n15 20\\n0\\n1 1\\n2 2\\n3 3\\n4 4') == '15'\n\n\"\"\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n'''\n\nN = int(input())\ncost = list(map(int, input().split()))\ncost_all = [0] + cost\nd = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\nfor i in range(1, N + 1):\n    for j in range(1, N + 1):\n        if cost_all[i] > cost_all[j]:\n            d[i][j] = d[i - 1][j]\n        else:\n            d[i][j] = max(d[i - 1][j], d[i - 1][j - 1] + cost_all[i])\nprint(d[N][N])\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == 15\nassert solution('2\\n15 20\\n0\\n0') == 20\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == '15'\n\nassert solution('2\\n15 20\\n1\\n1 1') == '15'\n\nassert solution('2\\n15 20\\n1\\n2 2') == '15'\n\nassert solution('2\\n15 20\\n1\\n1 1') == '15'\n\nassert solution('2\\n15 20\\n1\\n2 2') == '15'"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n15 20\\n0\\n1 1\") == \"15\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4\\n3\\n1\\n375\\n2\\n5\\n283\\n1\\n4\\n716\\n3\\n4\\n98') == 'impossible'\nassert solution('2\\n2\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0') == 'impossible'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\\n') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == res\n\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\nassert solution('1 2\\n1 3 4') == 'impossible'\nassert solution('2 1\\n1 1') == '0'\nassert solution('1 1\\n1 1') == '0'\n\n------Hints------\n\n------Bite------\n\n'''\n"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\\n\") == \"impossible\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\nd = defaultdict(list)\n\nfor i in range(m):\n    x, y, z = map(int, input().split())\n    d[x].append(y)\n    d[y].append(x)"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4\\n3\\n1\\n375\\n2\\n5\\n283\\n1\\n4\\n716\\n3\\n4\\n98') == 'impossible'\nassert solution('7\\n6\\n5\\n4\\n3\\n2\\n1\\n0') == '0'\n\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\") == \"impossible\"\nassert solution(\"7 3\\n1 2 9\\n1 3 10\\n1 4 15\\n1 5 11\\n1 6 16\\n2 3 2\\n2 4 12\\n2 5 6\\n3 4 3\") == \"17\"\n\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98''') == 'impossible'\n\n'''\n\nSample Input:\n6 4\n3 1 2491\n2 5 2263\n1 4 799\n3 4 97\n3 1 347\n2 6 599\nSample Output:\n375\n\nSample Input:\n6 4\n3 1 2491\n2 5 2263\n1 4 799\n3 4 97\n3 1 347\n2 6 599\nSample Output:\n7250\n\nSample Input:\n5 5\n3 1 2491\n2 5 2263\n1 4 799\n3 4 97\n3 1 347\n2 6 599\nSample Output:\nimpossible\n'''\n"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\") == \"impossible\"\n\n------Hint------\nhttps://www.geeksforgeeks.org/allocate-minimum-number-groups-given-students-can-meet-each-other/\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nstudents = {}\n\nfor _ in range(m):\n    p, q, c = map(int, input().split())\n    if p not in students:\n        students[p] = set()\n    if q not in students:\n        students[q] = set()\n    students[p].add((q, c))\n    students[q].add((p, c))\n\nresult = 0\n\nfor i in range(1, n+1):\n    if i in students:\n        for j in students[i]:\n            result += j[1]"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '0.500'\n\n\"\"\"\n\nimport unittest\nfrom random import randint\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1.0'\nassert solution('2') == '2.0'\nassert solution('3') == '4.0'\nassert solution('4') == '7.0'\nassert solution('5') == '9.0'\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1.000000000'\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"3\") == \"2.0\"\nassert solution(\"1000\") == \"13.0\"\nassert solution(\"777\") == \"17.3\"\nassert solution(\"10000000\") == \"15.08\""
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1.0\"\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"2.0\"\nassert solution(\"3\") == \"3.0\"\nassert solution(\"4\") == \"5.0\"\nassert solution(\"5\") == \"8.0\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1.0'\nassert solution('2') == '2.0'\nassert solution('5') == '6.0'\nassert solution('10') == '14.0'\nassert solution('15') == '21.0'\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1''') == '1.0'\nassert solution('''2''') == '1.5'\nassert solution('''3''') == '2.0'\nassert solution('''4''') == '2.5'\nassert solution('''5''') == '3.0'\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 1\n\"\"\"\nimport math\nimport sys\nimport unittest\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '0.4'\nprint(solution(stdin.readlines()[0]))\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == \"115.000000000\"\n\"\"\"\n\nimport sys\nimport math\n\nn, p, c = map(int, sys.stdin.readline().split())\n\nt, x, y = [], [], []\n\nfor _ in range(p):\n    line = list(map(int, sys.stdin.readline().split()))\n    t.append(line[0])\n    x.append(line[1])\n    y.append(line[2])\n\nt.append(math.inf)\nx.append(0)\ny.append(0)"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''100 3 10\n15 99 98\n40 3 2\n90 10 9''') == '115.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 3 10\\n15 99 98\\n40 3 2\\n90 10 9') == '115.000000000'\n\"\"\"\n\nn, p, c = list(map(int, input().split()))\nt, x, y = [], [], []\nfor _ in range(p):\n    t_, x_, y_ = list(map(int, input().split()))\n    t.append(t_)\n    x.append(x_)\n    y.append(y_)\n\nt = [t[0]] + t\nx = [x[0]] + x\ny = [y[0]] + y\n\nd = {}\nfor i in range(n):\n    d[t[i]] = (x[i], y[i])"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''100 3 10\n15 99 98\n40 3 2\n90 10 9''') == '115.0'\n'''Explanation:\nYou will live for at least 115 seconds. The first two pills become available at 15 seconds and then at 40 seconds. After that, no pill is introduced for at least 10 seconds. So, you can take the first two pills at 40 seconds and then age by 10 seconds. At this point, your current life expectancy is 115 - 40 - 10 = 95 seconds. The next two pills become available at 90 and 10 seconds, so you can take the second two pills at 10 seconds. The next pill becomes available at 15 seconds, so you can take that pill at 40 seconds, and then age by 15 - 40 - 10 = 5 seconds. Finally, no more pills become available, so you have lived for a total of 95 + 40 + 5 = 115 seconds.'''"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\\n\") == \"115.0\"\n\"\"\""
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output)\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == \"115.0\"\n\nSample Input:\n1000000 3 10\n15999999 100 10\nSample Output:\n15999999.0\n\"\"\""
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == \"115.000000000\"\nprint(solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\"))\n\n-----Explanation-----\nWe can add a $10$-second pill at time $t = 99$ and age for $9$ seconds at time $100$.\nWe can add a $100$-second pill at time $t = 40$ and age for $2$ seconds at time $100$.\nWe can add a $10$-second pill at time $t = 90$ and age for $9$ seconds at time $90$.\nWe can add a $10$-second pill at time $t = 99$ and age for $9$ seconds at time $90$.\nSince we cannot take any pills after $t = 100$, this is our solution.\n\nThe code below implements the algorithm described above.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == '115.000000000'\n\"\"\"\n\nfrom typing import List\nimport re\nimport math\n\nimport numpy as np"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\\n') == '115.000000000'"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n100 1 1\n100 1 1.5\n\"\"\") == '199.500000'\n\n\"\"\"\nSolution\n\"\"\"\n\nfrom ast import literal_eval\n\nassert solution(\"\"\"\n2\n100 1 1\n100 1 1.5\n\"\"\") == '199.500000'\n\nfrom functools import reduce\nimport operator\nfrom math import acos, sin, cos, pi\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 1 1\") == \"199.500000\"\n\"\"\"\n\n\"\"\"\n\u9996\u5148\uff0c\u6bcf\u4e00\u9897\u661f\u7684\u6392\u5217\u90fd\u662f\u4e00\u4e2a\u5750\u6807\u7cfb\u3002\u7136\u540e\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u662f\uff0c\u6709\u591a\u5c11\u4e2a\u661f\u661f\u80fd\u591f\u63a5\u53d7\u80fd\u63a5\u53d7\u7684\u80fd\u91cf\u3002\u6bcf\u4e00\u9897\u661f\u6700\u5f00\u59cb\u7684\u6392\u5217\u90fd\u662f\u5728\u5750\u6807\u7cfb\u4e2d0\uff0c0\uff0c\u7136\u540e\u4e00\u76f4\u5f80\u53f3\u548c\u5f80\u4e0b\u8d70\u3002\u6709\u65f6\u5019\u9760\u8fd1\u6700\u9ad8\u7684\u661f\u661f\u65f6\uff0c\u6700\u7ec8\u5c31\u4f1a\u8d70\u5230\u6700\u53f3\u8fb9\u548c\u6700\u4e0b\u8fb9\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u8981\u628a\u6240\u6709\u7684\u661f\u661f\u90fd\u8d70\u5230\u8fb9\u4e0a\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u89d2\u5ea6\u7684\u8d70\u52a8\u91cf\u52a0\u5728\u4e00\u8d77\uff0c\u4e0d\u7528\u518d\u7ba1\u8fd9\u4e2a\u89d2\u5ea6\u662f\u4ec0\u4e48\uff0c\u56e0\u4e3a\u65e0\u8bba\u600e\u6837\uff0c\u6bcf\u4e2a\u661f\u661f\u90fd\u8d70\u5230\u8fb9\u4e0a\u7684\u6982\u7387\u90fd\u662f0.5\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5750\u6807\u7cfb\uff0c\u6211\u4eec\u8981\u505a\u7684\u662f\u786e\u5b9a\u6700\u540e\u4e00\u4e2a\u661f\u661f\u6240\u8d70\u5230\u7684\u89d2\u5ea6\uff0c\u7136\u540e\u786e\u5b9a\u63a5\u53d7\u80fd\u91cf\u7684\u661f\u661f\u3002\u8d70\u5230\u8fb9\u4e0a\u7684\u6240\u6709\u661f\u661f\u7684\u6982\u7387\u662f0.5\uff0c\u800c\u8d70\u5230\u6700\u9ad8\u7684\u661f\u661f\u7684\u6982\u7387\u662f1\u3002\u6211\u4eec\u9700\u8981\u5148\u786e\u5b9a\u6700\u9ad8\u7684\u661f\u661f\uff0c\u7136\u540e\u786e\u5b9a\u5176\u4e0b\u9762\u7684\u6240\u6709\u661f\u661f\uff0c\u5e76\u505a\u4e00\u6b21\u5206\u6790\u3002\n\n\u5047\u8bbe\u6700\u9ad8\u7684\u661f\u661f\u5728x\u8f74\u4e0a\uff0c\u90a3\u4e48\u5c31\u5f97\u5230\uff0c\u8981\u6700\u7ec8\u786e\u5b9a\u7b2ci\u4e2a\u661f\u661f\u7684\u89d2\u5ea6\uff0c\u9700\u8981\u786e\u5b9a\u6700\u9ad8\u7684\u661f\u661f\u7684\u4f4d\u7f6ex1\uff0c\u90a3\u4e48\u7b2ci\u4e2a\u661f\u661f\u7684x\u8f74\u4f4d\u7f6e\u662f\uff1ax1 = i - N + 1, \u8fd9\u4e2a\u89c4\u5f8b\u662f\u6211\u4eec\u5728\u5750\u6807\u7cfb\u4e0a\u89c4\u5212\u7684\u3002\u73b0\u5728\u5c31\u662f\u627e\u6700\u9ad8\u661f\u661f\u7684\u4f4d\u7f6e\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u73b0\u5728\u627e\u6700\u9ad8\u7684\u661f\u661f\uff0c\u7136\u540e\u627e\u4ed6\u4e0b\u9762\u7684\u6240\u6709\u661f\u661f\uff0c\u7136\u540e\u6328\u4e2a\u6bd4\u8f83\u9644\u8fd1\u661f\u661f\u548c\u661f\u661f\u7684\u89d2\u5ea6\uff0c\u6309\u7167\u9644\u8fd1\u7684\u89d2\u5ea6\u6765\u8d70\u52a8\u3002\u90a3\u4e48\uff0c\u8d70\u5230\u8fb9\u4e0a\u7684\u661f\u661f\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u8ddf\u7b80\u5355\u7684\u4e00\u4e2a\u661f\u661f\u8d70\u52a8\u7684\u89d2\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u9700\u8981\u627e\u8fb9\u4e0a\u7684\u661f\u661f\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5c31\u662f\uff1a\n\n\u5bf9\u4e8ei\u7b2c\u4e00\u4e2a\u661f\u661f\u6765\u8bf4\uff0c\u5b83\u7b2c\u4e00\u4e2a\u9760\u8fd1\u8fb9\u7684\u662f\u7b2ci-1\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\u9760\u8fd1\u8fb9\u7684\u662f\u7b2ci\u4e2a\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u53ef\u4ee5\u8d70\u5230\u7684\u89d2\u5ea6\u662f\uff1a\n\nT_i - s_i * min(d_i, 1)\n\u5176\u4e2dd_i = min(d_i, 1)\u662f\u56e0\u4e3a\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u5982\u679c\u7b2ci\u4e2a\u661f\u661f\u7684\u89d2\u5ea6\u662f0\uff0c\u90a3\u4e48\u5c31\u662f\u628a\u7b2ci\u4e2a\u661f\u661f\u7684\u89d2\u5ea6\u7b49\u4e8e0\uff0c\u7b2ci\u4e2a\u661f\u661f\u7684\u89d2\u5ea6\u7b49\u4e8e0\uff1b\n\n\u5176\u4e2dT_i - s_i * min(d_i, 1)\u4e2dT_i - s_i * min(d_i, 1)\u5c31\u662f\u5f53\u524d\u661f\u661f\u6240\u8d70\u7684\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u503c\u662f\u53ef\u4ee5\u88ab\u52a0\u5728\u63a5\u53d7\u80fd\u91cf\u7684\u661f\u661f\uff0c\u4e0d\u7528\u518d\u7ba1\u5f53\u524d\u661f\u661f\u7684\u89d2\u5ea6\u662f\u4ec0\u4e48\uff0c\u8fd9\u6837\u5c31\u7b97\u5230\u4e86\u8fb9\u4e0a\uff0c\u8fd9\u4e2a\u89d2\u5ea6\u662f\u4e0d\u4f1a\u53d8\u7684\u3002\u56e0\u4e3a\u4ed6\u7b97\u51fa\u6765\u7684\u503c\u662f\u53ef\u4ee5\u88ab\u52a0\u5728\u63a5\u53d7\u80fd\u91cf\u7684\u661f\u661f\uff0c\u4e0d\u7528\u518d\u7ba1\u5f53\u524d\u661f\u661f\u7684\u89d2\u5ea6\u662f\u4ec0\u4e48"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n100 1 1\\n100 1 1.5\") == \"199.5\"\nassert solution(\"2\\n100 1 1\\n100 1 1.5\") == \"199.5\"\nassert solution(\"2\\n100 1 1\\n100 1 1.5\") == \"199.5\"\n\"\"\"\nimport math\n\nassert math.isclose(solution(\"2\\n100 1 1\\n100 1 1.5\"), 199.5)\nassert math.isclose(solution(\"2\\n100 1 1\\n100 1 1.5\"), 199.5)\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 1 1\\n100 1 1.5\") == \"199.500000\"\n\nfrom functools import reduce\n\nN = int(stdin.readline())\nstars = []\nfor i in range(N):\n    stars.append(tuple(map(float, stdin.readline().split())))\n\ndistances = []\nfor star in stars:\n    distances.append(min(star[1] / cos(star[2]), abs(star[0] - star[1] * sin(star[2])), 0))\n\ndist = reduce(lambda a, b: a + b, distances)\n\nprint(\"{:.6f}\".format(dist))\n\nfrom typing import List, Dict, Tuple, Union"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n\n-----Explanation-----\nStar with index $1$ has a distance of $T_1 = 100$, angle $a_1 = 1$, and distance from Earth of $s_1 = 1$.\n\nStar with index $2$ has a distance of $T_2 = 100$, angle $a_2 = 1.5$, and distance from Earth of $s_2 = 1$.\n\nThe spacecraft can travel at most $T_1 + T_2 + s_1 \\cdot dist(a_1, a_2)$ = $199$.500000.\n\nSo, the maximum distance the spacecraft can travel is $199$.500000.\n'''"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n1\n100 1 1\n''') == '199.5'\nassert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\nassert solution('''\n3\n1000 1 1\n100 1 1\n1000 1 1\n''') == '979.500000'\nassert solution('''\n4\n1000 1 1\n100 1 1\n1000 1 1\n1000 1 1\n''') == '979.500000'\nassert solution('''\n5\n1000 1 1\n100 1 1\n1000 1 1\n1000 1 1\n1000 1 1\n''') == '983.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 1 1\\n100 1 1.5\") == \"199.500000\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('2\\n100 1 1\\n100 1 1.52')!= '199.520000'\nassert solution('2\\n100 1 1\\n100 1 1.5')!= '199.500010'\nassert solution('2\\n100 1 1\\n100 1 1.5')!= '199.500000'\n\n\"\"\"\n\nfrom __future__ import division\nimport sys\nimport math\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n\"\"\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('2\\n4 0 2\\n1 1 1\\n1 1 1.5') == '2.500000'\nassert solution('2\\n4 0 2\\n1 1 2') == '1.000000'\nassert solution('2\\n4 0 2\\n1 1 5') == '1.50000'\n\n'''\n\nimport math\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\\n6 7 8 9 10 11 12\") == \"1\"\n\"\"\""
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n1 2 3\n''') == '1'"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"1\"\nassert solution(\"2 3\\n2 4 12\") == \"1\"\nassert solution(\"2 3\\n6 8 9\") == \"0\"\n\"\"\""
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('2 3\\n1 2 3') == '1'\nassert solution('2 4\\n6 8\\n4 7') == '2'\nassert solution('2 4\\n7 9\\n4 8') == '0'\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 2 3\n''') == '1'\n\n-----Explanation-----\nThe example test case consists of two machines, each with two chips. The first machine has a power output of $1$, the second of $2$, and the machines have an equal difference of power output of $1$.\n'''\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3 5 7 9\") == \"1\"\n\nassert solution(\"2 3\\n1 2 3 4 5 6 7 8 9 10 11 12\") == \"1\"\n\nassert solution(\"1 2\\n2 2\") == \"0\"\n\nassert solution(\"2 1\\n1 2\") == \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2 3') == '1'\nassert solution('2 3\\n1 2 4') == '0'\n\"\"\""
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 3\n1 2 3 4 5 6 7 8 9 10 11 12\"\"\") == '1'"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 2 3 4 5 6 7 8 9 10 11 12''') == '1'\n\n'''\nfrom math import inf\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"5\"\nassert solution(\"3 2 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '5'"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '5'\n\"\"\""
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\\n3 2 1 1\") == \"5\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Impossible'\nassert solution('5\\n1 2 1 1') == 'Impossible'\nassert solution('1\\n3 3 1 1') == 'Impossible'\nassert solution('7\\n1 2 3 2 1') == 'Impossible'\nassert solution('8\\n1 2 3 2 1') == '4'\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Impossible'\nassert solution('11') == 'Impossible'\nassert solution('9') == '4'\nassert solution('10') == '4'\nassert solution('11') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(r'input.txt').readline()) == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13 3 1 1') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13\\n3 2 1 1') == '5'\n\"\"\""
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '5'\nassert solution('10') == 'Impossible'\nassert solution('1') == 'Impossible'\nassert solution('0') == 'Impossible'\nassert solution('11') == 'Impossible'"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(aabcad) == 'yes'\nassert solution(aba) == 'yes'\nassert solution(acd) == 'no'\n-----\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"no\""
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"yes\"\nassert solution(\"ababa\") == \"no\"\nassert solution(\"a\") == \"no\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"yes\"\nassert solution(\"aabcad\") == \"yes\"\nassert solution(\"acd\") == \"no\"\nassert solution(\"a\") == \"no\"\nassert solution(\"\") == \"no\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin_lines[0]) == stdout_lines[0]\n\"\"\""
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"no\"\nassert solution(\"a\") == \"no\"\nassert solution(\"abc\") == \"yes\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"yes\"\nassert solution(\"qwertyuiop\") == \"yes\"\nassert solution(\"abc\") == \"yes\"\nassert solution(\"qwertyu\") == \"no\"\nassert solution(\"abcdefg\") == \"yes\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabcd') == 'no'\nassert solution('aabcb') == 'yes'\nassert solution('aabcc') == 'yes'\nassert solution('aabcd') == 'no'\nassert solution('aaaa') == 'yes'\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin_str) == expected_str\n\n-----------------------------------------------------------------------------"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcabca\") == \"yes\"\nassert solution(\"abcad\") == \"yes\"\nassert solution(\"abccba\") == \"yes\"\nassert solution(\"abcacb\") == \"no\"\nassert solution(\"abd\") == \"no\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9') == '5'\nprint(solution(stdin))\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\") == \"5\"\n\"\"\"\n\nn, l, b = [int(x) for x in stdin.split(\"\\n\")[0].split()]"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\") == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '5'\nassert solution('1 2 3 4 5 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == '16'\nassert solution('1 2 3 4 5 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == '29'\n\nsolution('')\nsolution('1 2 3 4 5')\nsolution('1 2 3 4 5 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29')\nsolution('1 2 3 4 5 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30')\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n3 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n3 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n3 5 10\n2 4\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n3 5 10\n2 4\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n2 4\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n3 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n3 5 10\n2 4\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n3 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n2 4\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n2 4\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\") == \"5\"\n\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9') == '5'\n\n\"\"\""
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n-----Explanation-----\nThe sample output is 5, because there are 5 IDs between (3,2) and (4,2), which is the total number of badge IDs in both directions.\n\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Dict\n\ntest_input = \"\"\"\n3 2 10\n2 1 1 6\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n\"\"\"\ntest_output = 5\n\ninput_file = open(\"test_examples/Y11R5P1/A.in\")\nsys.stdin = input_file"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2\n2 4 same\n3 5 same''') == '4'\nassert solution('''5 2\n3 5 different''') == '0'\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\") == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\") == \"4\"\nassert solution(\"5 2\\n2 4 different\\n3 5 same\") == \"0\"\nassert solution(\"5 2\\n2 4 same\\n3 5 different\") == \"0\"\n\n\"\"\"\nimport itertools\nimport math\n\nlines = iter(stdin.splitlines())\nn, m = map(int, next(lines).split())\n\nhints = [list(map(int, line.split())) for line in lines]\nhints.sort()\n\ncnt = 0\n\nfor idx, (start, end) in enumerate(hints):\n    if idx == 0:\n        hint = start\n        range = (start, end + 1)\n    else:\n        if end < hint:\n            hint = end\n            range = (start, end + 1)\n\nhint_cnt = 1\nwhile True:\n    if hint_cnt == m:\n        cnt += 1\n        hint_cnt = 0\n    else:\n        try:\n            hint = hints[hint_cnt][0]\n            range = (hints[hint_cnt][0], hints[hint_cnt][1] + 1)\n            hint_cnt += 1\n        except IndexError:\n            break\n\nprint(cnt)\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\") == \"4\"\n\"\"\""
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 5') == '3'\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4 5 6 7 8 9') == '2'\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 2\n2 4 same\n3 5 same\n\"\"\") == '4'\n\nassert solution(\"\"\"\n5 2\n2 4 different\n3 5 different\n\"\"\") == '0'\n\nassert solution(\"\"\"\n5 3\n2 4 same\n3 5 same\n3 4 different\n\"\"\") == '2'\n\nassert solution(\"\"\"\n5 3\n2 4 same\n3 5 different\n3 4 same\n\"\"\") == '0'\n\nassert solution(\"\"\"\n5 3\n2 4 same\n3 4 same\n3 4 same\n\"\"\") == '6'"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n2\\n3\\n3') == '1'\nassert solution('1\\n1\\n1\\n1\\n1') == '0'\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same') == '4'\n\"\"\"\n\nn, m = map(int, input().split())\nhints = [input().split() for _ in range(m)]\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 same\") == 1\n\"\"\""
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 same\\n3 5 same') == '4'\nassert solution('2 4 different\\n3 5 same') == '0'\nassert solution('3 5 same\\n3 5 same') == '2'\nassert solution('2 2 different\\n1 3 same') == '0'\nassert solution('1 1 different') == '0'"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1 1\\n2 3') == '3'\nassert solution('1\\n1 1\\n2 3\\n4 5') == '4'\nassert solution('1\\n1 1\\n2 3\\n3 4') == '2'\nassert solution('1\\n1 1\\n2 3\\n3 4\\n4 5') == '1'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\n\nassert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '2'\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4\\n0 1\\n0 2\\n3 4\\n3 5\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n0 1\\n0 2\\n1 2\\n2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 1\\n0 2\\n1 2\\n2 3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"5 4\\n0 1\\n0 2\\n1 2\\n1 3\\n2 3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"6 4\\n0 1\\n0 2\\n1 2\\n1 3\\n2 3\\n3 0\\n0 3\") == \"4\"\nassert solution(\"4 4\\n0 1\\n0 2\\n1 2\\n2 3\\n3 0\\n0 3\") == \"4\"\nassert solution(\"5 5\\n0 1\\n0 2\\n1 2\\n2 3\\n3 0\\n0 3\") == \"4\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 1\\n0 2') == '1'\n\"\"\"\nimport heapq\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n0 1\\n0 2') == '2'\nassert solution('4 3\\n0 1\\n0 2\\n0 3\\n1 2\\n1 3\\n2 3') == '4'\nassert solution('5 3\\n0 1\\n0 2\\n0 3\\n1 2\\n2 3') == '4'\nassert solution('6 3\\n0 1\\n0 2\\n0 3\\n1 2\\n2 3') == '4'\nassert solution('8 5\\n0 1\\n0 2\\n0 3\\n0 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4'\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n0 1\\n0 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 4\n0 1\n0 2\n3 4\n3 5''') == '3'\nprint('Cool! Your solution works!')\n\n---\n2^n\n---"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5\\n'\nassert solution('3\\n1 2\\n3 4\\n') == '2.0\\n'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n2 5\\n4 3\\nLDRDRU') == '8.0\\n'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5\\n'\n\"\"\"\n\nfrom collections import deque, defaultdict\nimport itertools\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\nLUR\") == \"9.0\\n6.5\\n2.5\"\n\nassert solution(\"3\\n1 2\\n3 4\\nLUR\") == \"3.0\\n1.0\\n0.0\"\n\nassert solution(\"5\\n3 4\\n1 2\\nLUR\") == \"2.0\\n1.0\\n0.0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5\\n'"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\") == \"9.0\\n6.5\\n2.5\"\nprint(solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\"))\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\") == \"9.0\\n6.5\\n2.5\"\nassert solution(\"2\\n2 2\\n1 1\") == \"1.0\"\n\"\"\"\n\nimport math\n\nN = int(input())\nnails = set()\n\nfor _ in range(N):\n    x, y = list(map(int, input().split()))\n    nails.add((x, y))\n\nfor i in range(1, N-2):\n    current_nails = set()\n    for j in range(len(nails)):\n        if j % i == 0:\n            if \"U\" in stdin[j]:\n                current_nails.add((nails[j][0], math.floor(sum(nails[j])/len(nails[j]))))\n            elif \"D\" in stdin[j]:\n                current_nails.add((nails[j][0], math.ceil(sum(nails[j])/len(nails[j]))))\n            elif \"R\" in stdin[j]:\n                current_nails.add((math.ceil(sum(nails[j])/len(nails[j])), nails[j][1]))\n            elif \"L\" in stdin[j]:\n                current_nails.add((math.floor(sum(nails[j])/len(nails[j])), nails[j][1]))\n    nails = current_nails\n\nprint('{:.1f}'.format(sum(nails)))\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n4 2\\nLUR\") == \"9.0\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\nLUR\") == \"9.0\\n6.5\\n2.5\"\nprint(\"The first test passed!\")\n\nassert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\nLRUD\") == \"9.0\\n6.5\\n2.5\"\nprint(\"The second test passed!\")\n\nassert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\nLURDL\") == \"9.0\\n6.5\\n2.5\"\nprint(\"The third test passed!\")\n\nassert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\nLUDL\") == \"9.0\\n6.5\\n2.5\"\nprint(\"The fourth test passed!\")\n\nassert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\nLRUDRD\") == \"9.0\\n6.5\\n2.5\"\nprint(\"The fifth test passed!\")"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5\\n'\nprint(solution(input()))\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\nLUR\") == \"9.0\\n6.5\\n2.5\\n\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3 2\nB 1 2\nB 2 3\nR 3 1''') == '1'\nassert solution('''3 4 3\nB 1 2\nB 2 3\nR 3 1\nB 1 3''') == '0'\nassert solution('''3 3 3\nB 1 2\nB 2 3\nR 3 1\nB 1 3''') == '0'\nassert solution('''3 3 4\nB 1 2\nB 2 3\nR 3 1\nB 1 3''') == '0'\nassert solution('''3 3 5\nB 1 2\nB 2 3\nR 3 1\nB 1 3\nB 3 1\nB 3 2''') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\nR 1 2\\nB 2 3\") == \"1\"\nassert solution(\"3 3 2\\nB 1 2\\nB 2 3\") == \"0\"\nassert solution(\"6 9 3\\nR 1 2\\nR 1 3\\nR 1 4\\nR 1 5\\nR 3 4\\nR 3 5\\nB 4 5\") == \"1\"\nassert solution(\"3 3 2\\nR 1 2\\nR 2 3\") == \"0\"\n\n\"\"\"\n\n\n\"\"\"\nunion find\n\"\"\"\n\nfrom collections import defaultdict\n\nclass UnionFind:\n    def __init__(self, num_nodes):\n        self.num_nodes = num_nodes\n        self.parents = [i for i in range(num_nodes)]\n        self.ranks = [0 for i in range(num_nodes)]\n\n    def find(self, x):\n        root = x\n        while self.parents[root]!= root:\n            root = self.parents[root]\n        while self.parents[x]!= x:\n            next = self.parents[x]\n            self.parents[x] = root\n            x = next\n        return root\n\n    def union(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x == root_y:\n            return\n        if self.ranks[root_x] > self.ranks[root_y]:\n            self.parents[root_y] = root_x\n        else:\n            self.parents[root_x] = root_y\n            if self.ranks[root_x] == self.ranks[root_y]:\n                self.ranks[root_y] += 1\n\n    def is_connected(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def get_num_groups(self):\n        return sum([1 if self.parents[i] == i else 0 for i in range(self.num_nodes)])\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\n\n-----Solution-----\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3 2\nB 1 2\nB 2 3\nR 3 1''') == '1'\n\nassert solution('''3 3 2\nB 1 2\nB 2 3\nR 3 1\nB 1 2\nR 1 2\nR 2 3\nR 3 1\nB 1 2\nB 2 3\nR 3 1\nB 1 2\nR 1 2\nR 2 3\nR 3 1\nB 1 2\nR 1 2\nR 2 3\nR 3 1\nB 1 2\nR 1 2\nR 2 3\nR 3 1\nB 1 2\nR 1 2\nR 2 3\nR 3 1''') == '1'\n\nassert solution('''2 4 1\nB 1 2\nR 1 3\nR 1 4\nR 2 4\nB 2 3\nB 3 4\nR 4 3\nB 4 1\nR 4 1\nB 2 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1\nR 4 1\nB 3 4\nR 3 4\nR 4 1\nB 4 1"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3 2\nB 1 2\nB 2 3\nR 3 1''') == '1'\n\nassert solution('''3 4 2\nB 1 2\nB 2 3\nR 3 1\nR 1 2\n''') == '0'\n\nassert solution('''3 4 2\nB 1 2\nB 2 3\nR 3 1\nR 3 1''') == '0'\n\nassert solution('''3 3 2\nB 1 2\nB 2 3\nR 2 3\n''') == '1'\n\nassert solution('''3 4 2\nB 1 2\nB 2 3\nR 3 1\nR 3 1''') == '1'"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '1'\nassert solution('1\\n1\\n') == '0'\nassert solution('1\\n1\\n2\\n') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\") == \"1\"\nassert solution(\"4 5 2\\nB 1 2\\nR 1 3\\nB 2 3\\nR 3 4\") == \"1\"\nassert solution(\"4 5 2\\nB 1 2\\nB 2 3\\nR 3 4\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5 3 4\nB 1 2\nB 2 3\nR 3 4\nB 4 5\nR 4 5\n''') == '0'\n\n\"\"\"\nWe want to identify the graph as a graph with k-1 blue edges and k-1 red edges. \nThen we want to identify the number of edges that we need to remove from the graph in order to get the desired graph.\n\nWe need to identify the following:\n\n- The number of blue edges\n- The number of red edges\n- The edges to remove\n\nThen we can construct a tree by removing the edges. \n\nWe can build a tree with k-1 blue edges and k-1 red edges by \n\n- removing all the edges with color R and then:\n- removing all the edges with color B and then\n- removing all the edges with color R and then\n\nOur tree with k-1 blue edges and k-1 red edges can be represented by the following:\n\nn: (n-1) + k\n\nwhere n is the number of nodes, and k is the number of blue edges.\n\nThe number of edges to remove is:\n\nn - k - 1\n\n\"\"\""
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n6\\n7\") == \"5\"\nassert solution(\"5\\n0\\n0\\n3\") == \"0\"\nassert solution(\"5\\n0\\n0\\n3\\n5\\n0\") == \"10\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7') == '88'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7') == '88'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\"\nassert solution(\"4\\n7 0 7\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\"\nassert solution(\"5\\n7 0 7\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\\n3\\n1\\n2\") == \"4\"\n\nassert solution(\"2\\n4\\n3\\n1\\n2\") == \"6\"\n\nassert solution(\"2\\n4\\n3\\n1\\n2\\n2\\n1\\n5\\n7\") == \"10\"\n\nassert solution(\"3\\n2\\n2\\n1\\n3\\n1\\n2\\n1\\n4\\n5\\n1\\n1\") == \"13\"\n\nassert solution(\"4\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\") == \"12\""
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == '88'\n\"\"\"\n\n\nfrom __future__ import annotations\n\nimport math\n\nfrom typing import Any, Dict, List, Tuple, Union, cast\n\n\nclass Node:\n    def __init__(self, name: str, value: int, children: List[Node]) -> None:\n        self.name = name\n        self.value = value\n        self.children = children\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n\"\"\") == \"\"\"\n88\n5\n5\n7\n\"\"\"\n\n\"\"\"\nOne of the easiest ways to answer the problem is to calculate the possible fun values during the rides. For instance, for a given number of roller coasters, there are only three possible values of the fun coefficient:\n\n$f(i,k) = a_ i - (k-1)^2 \\cdot b_ i$\n\nThe fun value of the first roller coaster is given by $f(i,k) = a_ i - (k-1)^2 \\cdot b_ i$; in this case, it is $a_ i = 5$ and $b_ i = 0$, so the value is $f(i,k) = 5 - (k-1)^2 \\cdot 0 = 5 - 1 = 4$.\n\nSimilarly, the fun value of the second roller coaster is $f(i,k) = a_ i - (k-1)^2 \\cdot b_ i = 7$; the third one has fun value $f(i,k) = a_ i - (k-1)^2 \\cdot b_ i = 7 - 1^2 \\cdot 7 = 7 - 4 = 3$.\n\nThus, the possible fun values for the number of roller coasters given by the problem are:\n\n$\\{f(i,k) = 4, f(i,k) = 3, f(i,k) = 4\\} = \\{4,3,4\\}$\n\nThe following are some variations of the fun values for a number of roller coasters:\n\n$N = 5$:\n$\\{f(i,k) = 4, f(i,k) = 3, f(i,k) = 4, f(i,k) = 5, f(i,k) = 6, f(i,k) = 7\\} = \\{4,3,4,5,6,7\\}$\n\n$N = 6$:\n$\\{f(i,k) = 5, f(i,k) = 6, f(i,k) = 7, f(i,k) = 8, f(i,k) = 9, f(i,k) = 10\\} = \\{5,6,7,8,9,10\\}$\n\nThus, the fun value of a number of roller coasters $N$ is the maximal value among all possible values of fun values $f(i,k)$.\n\nThis is a simple problem to find the maximal value among all possible values of the fun values for the number of roller coasters. The following algorithm does this:\n\nCalculate the fun value for each roller coaster:\n\n$f(i,k) = a_ i - (k-1)^2 \\cdot b_ i$\n\nFor each roller coaster, calculate the fun value:\n\n$f(i,k) = a_ i - (k-1)^2 \\cdot b_ i$\n\nAnd then find the maximal fun value among all possible fun values for this number of roller coasters:\n\n$f(i,k) = max\\{\\{a_ i - (k-1)^2 \\cdot b_ i\\}\\}$\n\nSo, we are able to calculate the fun value for each roller coaster for the given number of time and then find the maximal fun value among all possible values of the fun values for the number of roller coasters.\n\nThis algorithm takes O(N) time.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\"\"\"\n\nn = int(input())\na = []\nb = []\nfor i in range(n):\n    a.append(int(input()))\n    b.append(int(input()))\n\nq = int(input())\nt = []\nfor i in range(q):\n    t.append(int(input()))\n\nprint(*a, sep = '\\n')\nprint(*b, sep = '\\n')\nprint(*t, sep = '\\n')\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n') == '88'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n86\\n5\\n6\\n7\\n') == '86'\n\"\"\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n') == '88\\n5\\n5\\n7\\n'\nassert solution('4 0 4\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n') == '88\\n5\\n5\\n7\\n'\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == 5\n\n-----Explanation-----\nThe state has purchased a large tract of land with a natural trail going between all the places.\n\nThe state has decided to connect these places with a new park, and wishes to minimize cost of the new trail. Thus, the state would like to connect the places with the least cost. The minimum cost of a trail is the sum of the two minimum costs of the two places connected by a trail.\n\nThe minimum cost of a trail joining two places is the minimum of the costs of the trails directly joining the two places.\n\nThe total cost is the minimum of the minimum costs of the two places.\n\nThe total cost of the new park is $5$.\n\nNote that the state wishes to have a single trail, so if the trails joining the two places are $1$ and $2$, then the total cost is $3$ since $1 + 2 = 3$."
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 3 1\\n1 3 1\\n3 1 1\") == \"5\"\nassert solution(\"3 5 2 3\\n1 2 1\\n3 5 1\\n1 2 1\") == \"-1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3''') == '5'\nprint(solution(stdin))\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == \"5\"\n\"\"\"\n\nimport sys\nfrom queue import PriorityQueue\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\") == \"5\"\n\nstdin = \"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\"\nassert solution(stdin) == \"5\"\n\nstdin = \"5 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\"\nassert solution(stdin) == \"5\"\n\nstdin = \"5 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\"\nassert solution(stdin) == \"5\"\n\nstdin = \"5 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\"\nassert solution(stdin) == \"5\"\n\nstdin = \"5 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == \"5\"\n\"\"\"\n\n\"\"\"\nhttps://www.acmicpc.net/problem/1257 \ubb38\uc81c \uc81c\ubaa9 : \ub2e4\ub9ac \ub193\uae30, \uc5b8\uc5b4 : Python, \ub0a0\uc9dc : 2020-05-04, \uacb0\uacfc : \uc131\uacf5\n\n\ubb38\uc81c\n\uc138\uc900\uc774\ub294 \uae30\ub9d0\uace0\uc0ac\ub97c \ub9dd\ucce4\ub2e4. \uc138\uc900\uc774\ub294 \uc810\uc218\ub97c \uc870\uc791\ud574\uc11c \uc9d1\uc5d0 \uac00\uc838\uac00\uae30\ub85c \ud588\ub2e4. \uc77c\ub2e8 \uc138\uc900\uc774\ub294 \uc790\uae30 \uc810\uc218 \uc911\uc5d0 \ucd5c\ub313\uac12\uc744 \uace8\ub790\ub2e4. \uc774 \uac12\uc744 M\uc774\ub77c\uace0 \ud55c\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c \ubaa8\ub4e0 \uc810\uc218\ub97c \uc810\uc218/M*100\uc73c\ub85c \uace0\ucce4\ub2e4.\n\n\uc608\ub97c \ub4e4\uc5b4, \uc138\uc900\uc774\uc758 \ucd5c\uace0\uc810\uc774 70\uc774\uace0, \uc218\ud559\uc810\uc218\uac00 50\uc774\uc5c8\uc73c\uba74 \uc218\ud559\uc810\uc218\ub294 50/70*100\uc774 \ub418\uc5b4 71.43\uc810\uc774 \ub41c\ub2e4.\n\n\uc138\uc900\uc774\uc758 \uc131\uc801\uc744 \uc704\uc758 \ubc29\ubc95\ub300\ub85c \uc0c8\ub85c \uacc4\uc0b0\ud588\uc744 \ub54c, \uc0c8\ub85c\uc6b4 \ud3c9\uade0\uc744 \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uccab\uc9f8 \uc904\uc5d0 \uc2dc\ud5d8 \ubcf8 \uacfc\ubaa9\uc758 \uac1c\uc218 N\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. \uc774 \uac12\uc740 1000\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\ub2e4. \ub458\uc9f8 \uc904\uc5d0 \uc138\uc900\uc774\uc758 \ud604\uc7ac \uc131\uc801\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. \uc774 \uac12\uc740 100\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc740 \uc74c\uc774 \uc544\ub2cc \uc815\uc218\uc774\uace0, \uc801\uc5b4\ub3c4 \ud558\ub098\uc758 \uac12\uc740 0\ubcf4\ub2e4 \ud06c\ub2e4.\n\n\ucd9c\ub825\n\uccab\uc9f8 \uc904\uc5d0 \uc0c8\ub85c\uc6b4 \ud3c9\uade0\uc744 \ucd9c\ub825\ud55c\ub2e4. \uc2e4\uc81c \uc815\ub2f5\uacfc \ucd9c\ub825\uac12\uc758 \uc808\ub300\uc624\ucc28 \ub610\ub294 \uc0c1\ub300\uc624\ucc28\uac00 10-2 \uc774\ud558\uc774\uba74 \uc815\ub2f5\uc774\ub2e4.\n\n\uc608\uc81c \uc785\ub825 1 \n3\n40 80 60\n\uc608\uc81c \ucd9c\ub825 1 \n75.0\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nnums = list(map(int, sys.stdin.readline().split()))\n\nnums.sort()\nprint(nums[n//2])\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3') == '5'\nassert solution('2 2 2\\n2\\n1 2 1\\n1 1 1') == '-1'\nassert solution('2 3 1 3\\n1 2 3\\n1 3 2') == '5'\nassert solution('4 1 1 4\\n3\\n1 4 1\\n2 4 2\\n3 4 3') == '10'\n\n-------------\n\nSolution:\n\nThis is a problem where there are many different scenarios, so\nwe can use recursion to loop over all possible scenarios.\nFor each scenario, we try to assign it a cost, and if the\ncost is less than the current minimum, then we assign it the\nminimal cost. Once we are finished, we return the minimum cost.\n\nThe final call to the function is the recursive one, which\nwe can use as the base case in the top-down recursion.\nThe recursive call will loop over all of the different\npossible scenarios and add them to the minimum cost.\n\nOne point to consider is that we are not limited to cost in\nthe range [0, 10^5]. There are some extreme scenarios where the\nminimum cost could be larger than the maximum cost.\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3''') == '5'\n\n-----Notes-----\n'''\n\n'''\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"irk8vC3n4zC3\") == \"irkvniz\"\nassert solution(\"mirkvC3nzC3\") == \"frulA\"\nassert solution(\"mirkvC3nzC3nizCC44\") == \"frulA\"\nassert solution(\"irkvC3nzC3nzC3nzC3nzC3nzC3\") == \"frulA\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"niz\"\nassert solution(\"mirkovC4nizCC44\") == \"niz\"\nassert solution(\"mirkovC4nizCC44\") == \"niz\"\nassert solution(\"mirkovC4nizCC44\") == \"niz\"\nassert solution(\"mirkovC4nizCC44\") == \"niz\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('ccc') == 'FRULA'\nassert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('ccc') == 'FRULA'\nassert solution('sos') =='sos'\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"niz\"\n\n\"\"\""
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\"\"\"\nimport numpy as np\nfrom typing import List\n\nin_string = input()\nexplosion_string = input()\n\nassert len(in_string) >= 1 and len(in_string) <= 100_000\nassert len(explosion_string) >= 1 and len(explosion_string) <= 36\nassert all(char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for char in explosion_string)\n\nin_string_list = list(in_string)\nexplosion_string_list = list(explosion_string)\n\nassert not np.any(np.array([in_string_list[i] == explosion_string_list[i] for i in range(len(explosion_string_list))]))\n\nindex = 0\nfor i in range(len(explosion_string_list)):\n    if explosion_string_list[i] in in_string_list:\n        index = in_string_list.index(explosion_string_list[i])\n        del in_string_list[index]\n    else:\n        print(in_string_list)\n        break"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\""
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\n-----Notes-----\nIt is guaranteed that no two characters of the string explode at the same time.\nYou can write to stdout for debugging purposes, e.g.\n\nprint(\"Debug messages...\")\n\n-----Hints-----\n- In the initial code, you should use only one loop for the input string and a single loop for the explosion string.\n- The string without explosions will always be the same as the input string and the string without explosions will always be the same as the input string.\n- In the second part of the code, you should use the string variable and not the string itself, so use string[:] instead of string.\n- In the second part of the code, you should use the explosion variable and not the explosion itself, so use explosion[:] instead of explosion.\n- If the first part of the code outputs something, then the second part of the code will not be executed.\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\""
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == 32\nassert solution(\"3 67\") == 1"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == 32\n'''\n\nimport sys\nfrom typing import List, Tuple"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == \"32\"\nprint(\"Exercise pass.\")\n\n\"\"\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == 32\n'''\n\nimport sys"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n65\n45\n60''') == 32\nassert solution('''3\n12\n34\n56''') == 14\nassert solution('''3\n12\n34\n56\n''') == 0\nassert solution('''3\n12\n34\n56\n''') == 0\nassert solution('''3\n12\n56\n12''') == 0\n"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == \"32\"\n'''\nimport sys\n\nn = int(sys.stdin.readline())\nl = list()\nfor _ in range(n):\n    l.append(list(map(int, sys.stdin.readline().split())))"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"3 65\\n45 10\\n60 25\"\n) == \"32\""
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 65\\n45 10\\n60 25') == 32\n\n\"\"\"\n\nimport math\nfrom operator import itemgetter\nimport sys"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 2 4 5\") == \"9\"\nassert solution(\"1 2 3 4 5\") == \"12\"\nassert solution(\"2 1\") == \"0\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == \"32\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 0 3 1') == '3\\n2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 0 3 1\") == \"3\\n2\"\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1 2') == '1'\nassert solution('1 2 0') == '1'\nassert solution('1 2 0 3') == '1'\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 0 3 1\") == \"3\\n2\"\nassert solution(\"5\\n2 2 1 1\") == \"3\\n2\"\nassert solution(\"5\\n1 2 0 3\") == \"3\\n1\"\nassert solution(\"5\\n1 2 0 3\\n1 2 2 2\") == \"5\\n1\\n3\""
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 0 3 1\") == \"3\"\n\nassert solution(\"5\\n1 1 1 1 1\") == \"0\"\n\nassert solution(\"5\\n0 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 0 3 1\") == \"3\\n2\"\nassert solution(\"5\\n2 2 1 3 1\") == \"2\\n0\"\nassert solution(\"5\\n1 2 1 3 1\") == \"3\\n0\"\n\"\"\"\n\nN = int(input())\nmulti_keys = list(map(int, input().split()))"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 0 3 1''') == '3\\n2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 0 3 1') == '3\\n2'\nassert solution('5\\n4 3 2 1') == '3\\n1'\nassert solution('5\\n4 0 1 2') == '3\\n1'\nassert solution('5\\n1 1 1 2') == '3\\n2'\nassert solution('5\\n1 1 1 0') == '2\\n0'\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 0 3 1''') == '3'\nassert solution('''6\n1 2 3 2 1 2''') == '1'\nassert solution('''5\n1 2 0 3 1''') == '1'\nassert solution('''5\n1 2 3 2 1''') == '1'\nassert solution('''5\n1 1 2 2 2''') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3\\n2'\nassert solution('2\\n2\\n') == '1\\n0'\nassert solution('1\\n2\\n') == '1\\n0'\nassert solution('2\\n1\\n') == '1\\n1'\nassert solution('3\\n1\\n') == '0\\n0'\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4''') == 2\n\nassert solution('''1 1 1\n+ 1 1\n+ 1 1\n+ 1 1\n- 1 1\n- 1 1\n- 1 1''') == 1\n\nassert solution('''1 1 1\n+ 1 1\n+ 1 1\n+ 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1''') == 0\n\nassert solution('''1 1 1\n+ 1 1\n+ 1 1\n+ 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1''') == 0\n\nassert solution('''1 1 1\n+ 1 1\n+ 1 1\n+ 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1 1\n- 1"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\n\"\"\"\n\nN, M, K = map(int, input().split())\nd = {}\nfor i in range(K):\n    spin, x, y = input().split()\n    d[(int(x)-1, int(y)-1)] = spin\nans = 0\nfor i in range(N):\n    for j in range(M):\n        x = i // 2\n        y = j // 2\n        s = d[(x,y)]\n        # if (i, j) in d:\n        #     if d[(i, j)] == s:\n        #         ans += 1\n        if (i+j) % 2 == 0:\n            if s == '+':\n                ans += 2\n            else:\n                ans -= 1\n        else:\n            if s == '-':\n                ans += 2\n            else:\n                ans -= 1\nprint(ans % (10**9+7))\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == 2\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 2 2\\n- 2 3\\n+ 2 4\\n- 2 4\") == 2\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 2 2\\n- 2 3\\n+ 2 4\\n- 2 4\\n+ 3 3\\n- 3 4\\n+ 3 4\\n- 3 4\") == 2\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 2 2\\n- 2 3\\n+ 2 4\\n- 2 4\\n+ 3 3\\n- 3 4\\n+ 3 4\\n- 3 4\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\nassert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\n\"\"\""
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == '2'\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\nassert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '4'\nassert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '8'\nassert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '8'\n\n-----Solution-----\n\nPut them in a 2D array, with rows representing the spin and columns representing the coordinates.\nFor each measurement, we find the row of the electron and the column of the measurement. We can then pair the row with the column, so that we can recover the spin.\nThen, we increment the row of the electron, so that we have the same row for the next measurement.\nWe also increment the column of the measurement, so that we have the same column for the next measurement."
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\n\n\"\"\"\n\n\n\n\"\"\"\nTheorem:\n    | If C(n,r) is the number of ways to choose r elements from a set of n elements, then\n    | C(n,0) = C(n,1) = C(n,2) =... = C(n,n-1) = n!\n    | This is because no matter what order the elements are chosen in, there is only one way to choose zero elements (i.e., pick no elements).\n\nComputing the number of possible combinations of r elements from n elements can be done recursively. In the example, the total number of possible combinations of 4 elements from 4 elements is the number of ways to choose 3 elements from a set of 4 elements, which is 6. This can be computed recursively as follows:\n    C(n,r) = C(n-1,r-1) + C(n-1,r)\n\nFor the purpose of this problem, we are only concerned with the total number of combinations. Hence, we can simplify this expression as follows:\n    C(n,r) = C(n-1,r-1) + nC(n-1,r)\n    C(n,r) = C(n-1,r-1) + nC(n-1,0)\n    C(n,r) = C(n-1,r-1) + C(n-1,r)\n    C(n,r) = C(n-1,r-1) + nC(n-1,0) + C(n-1,r)\n    C(n,r) = C(n-1,r-1) + nC(n-1,0) + C(n-1,r) + nC(n-1,0)\n    C(n,r) = C(n-1,r-1) + nC(n-1,0) + C(n-1,r) + nC(n-1,0) + nC(n-1,0)\n    C(n,r) = C(n-1,r-1) + nC(n-1,0) + C(n-1,r) + nC(n-1,0) + nC(n-1,0) + nC(n-1,0)\n\nThe problem statement defines k = 4, so we start with the number of ways to choose 4 elements (from 4 elements) to be the number of ways to choose 3 elements (from 4 elements) to be the number of ways to choose 2 elements (from 4 elements) to be the number of ways to choose 1 element (from 4 elements) to be the number of ways to choose 0 elements (from 4 elements). Thus, we can compute C(4,4) using the above formula.\n\nC(n,r) = nCr = n!/(r!(n-r)!)\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n\n\nclass Main:\n    def __init__(self):\n        self.N, self.M, self.K = list(map(int, input().split()))\n        self.grid = [[x[:2], x[2:]] for x in input().split() for _ in range(self.K)]\n        self.grid = list(filter(lambda x: x[1] in ['+', '-'], self.grid))\n        self.grid = dict(Counter(x[1] for x in self.grid))\n        self.grid = {k: v % 2 for k, v in self.grid.items()}\n        self.grid = [[k for k, v in self.grid.items() if v == 0],\n                     [k for k, v in self.grid.items() if v == 1]]\n        self.grid = list(zip(self.grid[0], self.grid[1]))\n        print(self.grid)\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\n\n-----Testcases-----\nInput:\n2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n\nOutput:\n2\n\"\"\""
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1,2') == '1'\nassert solution('1,2,3') == '1'\nassert solution('1,2,3,4') == '1'\nassert solution('1,2,3,4,5,6') == '1'\n"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 0 1\\n1 1 0') == '500000004'\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom typing import List\n\n\nclass Node:\n    def __init__(self, parent=None, value=0, children=None):\n        self.parent = parent\n        self.value = value\n        self.children = children if children is not None else []\n"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n3 5 1 2 4 6\") == '600000004'\nassert solution(\"5\\n1 4 1 3 5\") == '24000007'\nassert solution(\"3\\n5 6 3\") == '100000007'\n\n\"\"\"\n\n\nimport random\nimport sys\nfrom math import gcd"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n10000000 0\\n10000000 1') == '500000004'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1000000000 1\\n\") == \"500000004\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 0\\n2 1\\n3 1\\n4 1\") == \"11\"\nassert solution(\"4\\n1 0\\n2 1\\n3 1\\n4 0\") == \"5\"\nassert solution(\"2\\n1 0\\n2 0\\n1 1\\n1 1\") == \"0\"\nassert solution(\"2\\n1 0\\n2 0\\n2 1\") == \"1\"\nassert solution(\"4\\n1 0\\n2 0\\n2 1\") == \"1\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1000000000 0 1000000000 1\") == \"500000004\"\n\"\"\"\n\nfrom math import gcd\nimport sys"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\n1000000000 0\n1000000000 1''') == '500000004'\n\n\"\"\"\n\nimport math\nfrom collections import Counter\nfrom functools import reduce"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n\"\"\"\nimport heapq\nimport numpy"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == \"12\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == \"12\"\n\nimport os\nimport sys\nimport ast\nimport time\nfrom io import StringIO\nimport unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        with open(\"test_input.txt\", \"r\") as f:\n            input = f.read()\n        with open(\"test_output.txt\", \"r\") as f:\n            output = f.read()\n        capturedOutput = StringIO()\n        sys.stdout = capturedOutput\n        startTime = int(round(time.time() * 1000))\n        solution(input)\n        endTime = int(round(time.time() * 1000))\n        sys.stdout = sys.__stdout__\n        answer = (capturedOutput.getvalue())\n        expectedAnswer = output\n        self.assertEqual(answer, expectedAnswer)\n        print(\"Time taken: \" + str((endTime - startTime) / 1000) + \" seconds\")\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == \"12\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == \"12\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\\n\") == \"12\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\"\"\") == '12'\nprint('PASSED')\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == \"12\"\n\n\"\"\"\n\nn, m = [int(s) for s in stdin.split()]\n\nfor _ in range(m):\n    a, b, s, e = [int(s) for s in stdin.split()]\n    assert 0 <= a <= n\n    assert 0 <= b <= n\n    assert 0 <= s <= e <= 10 ** 6\n    assert s <= e\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24') == '12'\nassert solution('3 2\\n1 2 1 10\\n2 4 11 16\\n1 3 13 27\\n3 5 23 24') == '3'\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 19\n15 5 3\n12 4 4\n20 10 5\n\"\"\"\n) == 3\n\"\"\"\n\"\"\"\n)\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15 5 3\\n12 4 4\\n20 10 5\") == \"3\"\nassert solution(\"3 19\\n15 5 3\\n12 4 4\\n20 10 5\") == \"3\""
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 19\\n15 5 3\\n12 4 4\\n20 10 5\") == 3\n\"\"\"\n\nimport sys\nimport math\n\nn, d = map(int, sys.stdin.readline().strip().split())\nstack = []\nbest = 0\n\nfor _ in range(n):\n    l, w, h = map(int, sys.stdin.readline().strip().split())\n    s = h + l\n    if s >= d:\n        stack.append(w)\n\nstack = sorted(stack, reverse=True)\n\nwhile stack:\n    w = stack.pop()\n    best += 1\n    stack = [w] + stack\n    while stack and stack[-1] <= w:\n        stack.pop()\n    \nprint(best)"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == 1\nassert solution(\"3 9 5\") == 1\nassert solution(\"4 11 8\") == 2\nassert solution(\"4 9 7\") == 0"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\n\"\"\""
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 19\\n15 5 3\\n12 4 4\\n20 10 5\") == 3\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15 5 3\\n12 4 4\\n20 10 5') == '3'\n\"\"\"\n\nfrom typing import List\nimport unittest\nfrom collections import deque"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15 5 3\\n12 4 4\\n20 10 5') == 3\nprint(solution(input()))\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('5\\n1 2 3\\n5 5 4') == '5'\nassert solution('3\\n1 2 3\\n5 5 4\\n') == '3'\n'''"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 1\n'''\n\nfrom collections import defaultdict\nfrom functools import reduce\nimport numpy as np\nfrom operator import mul\n"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 1\nassert solution('4\\n1 2 3 4') == 6\nassert solution('6\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n5 6') == 15\n\n-------Challenge-------\n\nMake sure you pass the following test cases.\n\nsolution('')\nsolution('5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n5 6')\nsolution('6\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n5 6\\n7 8\\n3 4\\n2 3\\n1 4\\n7 3')\nsolution('7\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n5 6\\n7 8\\n3 4\\n2 3\\n1 4\\n7 3\\n6 8')\n"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\n\"\"\"\nimport os\nimport sys\nimport itertools\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n2 2\\n\") == \"2\"\nassert solution(\"1 1\\n2 2\\n3 3\\n4 4\\n\") == \"1\"\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINES_LEN = len(INPUT_LINES)\n\nTOTAL_NUMBER_OF_GRAPHS = int(INPUT_LINES[0])\n"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '1'\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n1 2\") == 1\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGGR\\nGBGB\\nBYBY\\nYRYR\") == 3"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"4\"\nassert solution(\"BYBY\") == \"3\"\nassert solution(\"YRYR\") == \"0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGGR\") == 3\nassert solution(\"GBGB\") == 3\nassert solution(\"BYBY\") == 3\nassert solution(\"YRYR\") == 3\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGGR\") == 3\nassert solution(\"GBGB\") == 3\nassert solution(\"BYBY\") == 3\nassert solution(\"YRYR\") == 3\n\n-----Test 1-----\nprint(solution(\"RGGR\"))\nprint(solution(\"GBGB\"))\nprint(solution(\"BYBY\"))\nprint(solution(\"YRYR\"))\n----Test 1 Output\n3\n3\n3\n3\n----Test 2-----\nprint(solution(\"BBGGB\"))\nprint(solution(\"RBGGB\"))\nprint(solution(\"RRGGB\"))\nprint(solution(\"RRBYB\"))\n----Test 2 Output\n5\n6\n7\n7\n----Test 3-----\nprint(solution(\"GBGGB\"))\nprint(solution(\"RRRR\"))\nprint(solution(\"RRBB\"))\nprint(solution(\"BBBYB\"))\n----Test 3 Output\n4\n5\n4\n5\n----Test 4-----\nprint(solution(\"RBYBY\"))\nprint(solution(\"YYRYR\"))\nprint(solution(\"RBBGB\"))\nprint(solution(\"RRYBG\"))\n----Test 4 Output\n3\n4\n3\n3\n----Test 5-----\nprint(solution(\"YGGYY\"))\nprint(solution(\"YYYRR\"))\nprint(solution(\"YYYBB\"))\nprint(solution(\"YYYYG\"))\n----Test 5 Output\n5\n5\n5\n5\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(5000)\n\nfrom collections import deque\n\nd = deque()\n\ndx = (-1, 0, 1, 0)\ndy = (0, -1, 0, 1)"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGGR\\nGBGB\\nBYBY\\nYRYR\") == 3\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGGR\") == 3\n\"\"\""
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGGR\") == 3\nassert solution(\"GBGB\") == 3\nassert solution(\"BYBY\") == 3\nassert solution(\"YRYR\") == 3\nassert solution(\"GRGB\") == 4\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGGR\") == 3\nassert solution(\"GBGB\") == 4\nassert solution(\"BYBY\") == 5\nassert solution(\"YRYR\") == 8\n\"\"\""
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGGR\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RGGR') == 3\nassert solution('GBGB') == 3\nassert solution('BYBY') == 3\nassert solution('YRYR') == 3\nassert solution('YBBG') == 3\n\"\"\""
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n\"\"\") == \"AAAAA\"\n\"\"\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 0 -1 -2\") == \"AAAAA\"\n\"\"\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\nassert solution(\"5\\n2 1 0 -1 -2\") == \"BBABB\"\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 -2 1 0 2\") == \"AAAAA\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AAAAA'\n\"\"\""
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 0 1 2') == 'AAAAA'\n\"\"\"\n\nN = int(stdin.readline().rstrip('\\n'))\nA = list(map(int, stdin.readline().split(' ')))\nB = list(map(int, stdin.readline().split(' ')))"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\nassert solution(\"5\\n1 2 4 3 1\\n2 1 0 -1 -2\") == \"ABABA\"\nassert solution(\"5\\n1 2 4 3 1\\n2 1 0 -1 -2\") == \"ABABA\"\nassert solution(\"5\\n1 2 3 1 4\\n2 1 0 -1 -2\") == \"AAABB\"\nassert solution(\"5\\n1 2 3 1 4\\n2 1 0 -1 -2\") == \"AAABB\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\n\"\"\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2''') == 'AAAAA'\nassert solution('''3\n-1 1 -1\n1 1 1''') == 'ABB'\n\n:param stdin: string of numbers separated by newline\n:return: string to output\n\"\"\""
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1') == 'IMPOSSIBLE'\nassert solution('3 2\\n1 0\\n0 1') == 'IMPOSSIBLE'\nassert solution('6 3\\n4 1\\n0 0\\n0 1\\n6 1') == '4'\nassert solution('6 3\\n3 4\\n0 0\\n0 1\\n6 1') == 'IMPOSSIBLE'\nassert solution('6 3\\n3 4\\n0 1\\n0 0\\n6 1') == '4'\n"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"6 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n\n\"\"\"\nfrom typing import List\nfrom itertools import permutations"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\nassert solution(\"6 3\\n4 0\\n0 2\\n6 1\") == \"5\"\nassert solution(\"6 3\\n2 3\\n6 1\\n4 0\") == \"IMPOSSIBLE\"\nassert solution(\"6 3\\n2 3\\n6 1\\n4 0\") == \"5\"\nassert solution(\"6 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m = map(int, stdin.readline().split())\nA1, A2 = map(int, stdin.readline().split())\nB1, B2 = map(int, stdin.readline().split())"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n4 0\\n0 2\\n6 1') == 'IMPOSSIBLE'\nassert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\nassert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0 2\\n6 1\\n2 3\\n4 0\\n6 1\") == 'IMPOSSIBLE'\nassert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n2 3\\n4 0\\n6 1\") == '2'\nassert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n2 3\\n4 0\\n6 1\") == '2'"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n0 3\\n1 0\\n1 1\\n2 0\\n2 3\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\""
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx''') == '''12\n4\n11\n3\n2\n'''\nprint(solution(stdin))"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\"\n\"\"\"\nimport collections\nimport collections.abc\nimport itertools\n\nimport fileinput"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nyx\") == [12, 4, 11, 3, 2]\n"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\nzxy\") == \"12\\n4\\n11\\n3\\n2\\n\"\n\"\"\"\nfrom collections import Counter\nimport operator\nimport re"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'\nassert solution('6 4\\ncat\\nred\\nred\\ncat\\ncat\\nred\\n') == '5\\n3\\n5\\n'\nassert solution('8 5\\nmy\\nname\\nis\\nkelvin\\nkelvin\\nkelvin\\nkelvin\\n') == '11\\n8\\n9\\n'\n\"\"\"\n\nfrom collections import Counter\n\nfrom _2020 import common\n"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\"\"\") == \"12\\n4\\n11\\n3\\n2\\n\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == '12\\n4\\n11\\n3\\n2\\n'\n\nSample Input:\n8 14\nafrica\napple\njuice\nautocorrect\njuice\nautocorrect\njuice\nprogram\nprogramming\ncomputer\nautocorrelation\nautocorrect\nafrica\nprogram\ncompetition\nzyx\napple\njuice\njuice\njuice\nSample Output:\n13\n5\n14\n5\n2\n3\n4\n4\n\"\"\""
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 1\") == \"3\"\nassert solution(\"0 2 1\") == \"3\"\nassert solution
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\") == \"3\"\nassert solution(\"4\\n0 1 1 2\") == \"4\"\n\"\"\"\n\nn = int(input())\n\nA = [int(i) for i in input().split()]\n\nprint(max([0] + [max([0, sum(A[i:i+j+1])]) for i in range(n) for j in range(n-i) if sum(A[i:i+j+1]) <= 12]))\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 1 1\\n') == '3'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1 1') == '3'\nassert solution('2\\n1 1') == '1'\nassert solution('2\\n0 0') == '1'\n\nprint('Hooray!')\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 1\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0 1 1 1') == '2'\nassert solution('3\\n0 1 1') == '1'\nassert solution('1\\n0') == '1'\nassert solution('2\\n1 1') == '0'\n\n-----Constraints-----\n$1 \\leq n \\leq 12$\n$0 \\leq N_i \\leq 30$\n$0 \\leq n \\leq 12$\n$\\sum N_i = n + n$\n$1 \\leq N_i \\leq 30$\n$0 \\leq n \\leq 12$\n$0 \\leq N_i \\leq 30$\n$0 \\leq n \\leq 12$\n$0 \\leq N_i \\leq 30$\n$0 \\leq n \\leq 12$\n$0 \\leq N_i \\leq 30$\n$0 \\leq n \\leq 12$\n$0 \\leq N_i \\leq 30$\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().strip().split()))\n\nmx = max(a)"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1 1\\n') == '3'\n\n\"\"\""
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0\\n1\\n1\\n\") == \"3\"\n'''"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\") == \"3\"\nassert solution(\"7 3 1\") == \"4\"\nassert solution(\"10 5 2\") == \"7\"\nassert solution(\"13 0 3\") == \"impossible\"\n\"\"\"\n\nimport sys\nimport io\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BIGEDCJFAH\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"In Post In Pre Pre\"\nassert solution(\"HFBJCDEGIA\\nIGEDCJBAFH\\nBIGEDCJFAH\") == \"In Post In Pre Pre\"\nassert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"In Post In Pre Pre\"\n\"\"\""
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\nstdout: str = \"\"\"HFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n\"\"\"\n\nassert solution(stdin) == stdout\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"Pre Post In Post In Pre\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BIGEDCJFAH\\nBIGEDCJFAH\\nBIGEDCJFAH') == 'Pre Post In Post In Pre'\nassert solution('HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH') == 'Pre Post In Post In Pre'\nassert solution('HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\\nHFBIGEDCJA') == 'Pre Post In Post In Pre'\nassert solution('HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\\nHFBIGEDCJA\\nBIGEDCJFAH') == 'Pre Post In Post In Pre'\nassert solution('HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\\nHFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH') == 'Pre Post In Post In Pre'\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"Pre Post In Post In Pre\"\nassert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\")!= \"Pre Post In Post In Pre\"\nassert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\")!= \"Pre Post In Post In Pre\"\nassert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\")!= \"Pre Post In Post In Pre\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"HFBJCDEGIA\\nBIGEDCJFAH\\nIGEDCJBAFH\"\nassert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"HFBJCDEGIA\\nBIGEDCJFAH\\nIGEDCJBAFH\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(TEST_CASE_1) == 'HFPJVDKGTUISDQXY'\nassert solution(TEST_CASE_2) == 'PFJVDKGTVUISDQXY'\nassert solution(TEST_CASE_3) == 'NFJVDKGTVUISDQXY'\n\"\"\"\n\nfrom collections import Counter\nimport itertools\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('HFBIGEDCJA') == 'BIGEDCJFAH\\nIGEDCJBAFH\\n'\n\"\"\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"Pre Post In Post In Pre\"\nassert solution(\"HFBJCDEGIA\\nBIGEDCJFAH\\nIGEDCJBAFH\") == \"Pre BIDFAH GIEDCFJ AHBIDCFJ AHFDB\"\nassert solution
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n10 0\n3 1 1\n1\n4 1 0''') == '10'\nassert solution('''3\n10 0\n2 1 1\n1\n4 1 0\n1\n4 1 0''') == '6'\nassert solution('''4\n10 0\n3 1 1\n1\n4 1 0\n1\n4 1 0\n1\n4 1 0\n1\n4 1 0\n1\n4 1 0\n1\n4 1 0\n1\n4 1 0\n1''') == '9'\n\nprint(solution(input()))\n\nassert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\\n\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n10 0\n3 1 1\n1\n4 1 0\"\"\") == \"10\"\n\nassert solution(\"\"\"1\n2\n10 0\n10 0\"\"\") == \"2\"\n\nassert solution(\"\"\"1\n2\n3 1 1\n1\n4 1 0\n\"\"\") == \"5\"\n\nassert solution(\"\"\"1\n2\n3 2 1\n1\n4 1 0\n\"\"\") == \"5\"\n\nassert solution(\"\"\"1\n2\n3 3 1\n1\n4 1 0\n\"\"\") == \"4\""
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\\n\") == \"10\"\nprint('Test passed.')\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\n\nassert solution(\"1\\n1\\n1\") == \"1\"\n\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\n\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\n\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\""
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10 0\\n3 1 1\\n1\\n4 1 0') == '10'\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data) == test_expected\n\"\"\""
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0 100 100\\n30 30 60 60\") == \"10000.0\"\nassert solution(\"5\\n30 30 60 60\\n0 0 100 100\") == \"10000.0\"\nassert solution(\"5\\n30 30 60 60\\n-0 -0 -100 -100\\n0 0 100 100\") == \"-10000.0\"\nassert solution(\"5\\n0 0 100 100\\n0 0 100 100\\n0 0 100 100\") == \"10000.0\""
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 1 2 2\") == 1.0\nassert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == 10000.0\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == \"10000.00\"\n\nSample Input:\n1\n100 100 100 100\nSample Output:\n0.00\n\"\"\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 100 100\") == \"10000.00\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 100 100\\n30 30 60 60\") == \"10000.00\""
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0 100 100\\n100 100 100 100') == '10000.00'\nassert solution('4\\n0 0 100 100\\n100 100 100 100\\n0 0 100 100\\n100 100 100 100') == '10000.00'\n'''\n\nimport sys"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == \"10000.00\"\n\n\"\"\"\n\nimport sys\n\nfrom icecream import ic\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == \"5\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\n\"\"\"\n\u7528\u4e00\u7ec4k\u548cl\u8868\u793a\u7b2c\u4e00\u7ec4\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u7b2c\u4e8c\u7ec4\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u5230\u7b2cn-1\u7ec4\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\u3002\n\n\u601d\u8def:\n\u4f7f\u7528\u4e00\u4e2a\u5b57\u5178\u5b58\u653e\u4e0d\u540c\u7684\u503c\u548c\u4e2a\u6570\n\n\u8f93\u5165\uff1a\n5 3\n1 3\n4 5\n2 4\n\n\u8f93\u51fa\uff1a\n5\n\n\u8f93\u5165\uff1a\n5 3\n1 3\n4 5\n2 4\n4 4\n\n\u8f93\u51fa\uff1a\n5\n\"\"\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '0'\nassert solution('1\\n1\\n2') == '2'\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3\n1 3\n4 5\n2 4''') == '5'\n\n\"\"\""
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == '5'\nassert solution(\"5 3\\n4 5\\n2 4\") == '4'\nassert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == '4'\nassert solution(\"5 3\\n1 3\\n4 5\\n2 4\\n2 4\") == '3'\nassert solution(\"5 3\\n1 3\\n4 5\\n2 4\\n2 4\\n3 5\") == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n4 5\\n2 4') == 5\nassert solution('1 2\\n3 4') == 0\nassert solution('1 2\\n2 3') == 1\nassert solution('1 2\\n3 4') == 1\nassert solution('1 3\\n2 4') == 1\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == 5\n\n\"\"\""
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4') == 5\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == \"5\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4') == '5'\nassert solution('7 6\\n2 4\\n4 5\\n3 6\\n5 7') == '7'\nassert solution('3 5\\n1 3\\n2 4') == '-1'\nassert solution('10 9\\n1 4\\n1 3\\n4 5\\n2 3\\n5 7\\n5 8\\n6 7\\n7 8\\n8 9') == '10'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n\"\"\"\n\nfrom math import gcd\nfrom typing import List, Tuple, Set, Union, Optional, Iterator\nfrom string import ascii_lowercase\n\nfrom icontract import require, ensure, DBC\n\n\nclass Frac:\n    def __init__(self, numerator: int, denominator: int) -> None:\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return self.numerator == other.numerator and self.denominator == other.denominator\n\n    def __add__(self, other: object) -> \"Frac\":\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return Frac(\n            (self.numerator * other.denominator + other.numerator * self.denominator),\n            (self.denominator * other.denominator),\n        )\n\n    def __sub__(self, other: object) -> \"Frac\":\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return Frac(\n            (self.numerator * other.denominator - other.numerator * self.denominator),\n            (self.denominator * other.denominator),\n        )\n\n    def __mul__(self, other: object) -> \"Frac\":\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return Frac(\n            (self.numerator * other.numerator),\n            (self.denominator * other.denominator),\n        )\n\n    def __truediv__(self, other: object) -> \"Frac\":\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return Frac(\n            (self.numerator * other.denominator),\n            (self.denominator * other.numerator),\n        )\n\n    def __lt__(self, other: object) -> bool:\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return self.numerator * other.denominator < other.numerator * self.denominator\n\n    def __le__(self, other: object) -> bool:\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return self.numerator * other.denominator <= other.numerator * self.denominator\n\n    def __gt__(self, other: object) -> bool:\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return self.numerator * other.denominator > other.numerator * self.denominator\n\n    def __ge__(self, other: object) -> bool:\n        if not isinstance(other, Frac):\n            return NotImplemented\n\n        return self.numerator * other.denominator >= other.numerator * self.denominator\n\n    def __repr__(self) -> str:\n        return f\"Frac({self.numerator}, {self.denominator})\"\n\n\n@require(lambda numerator: numerator > 0)\n@require(lambda denominator: denominator > 0)\n@ensure(lambda numerator, denominator, result: result >= 0)\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == '2095'\n\"\"\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 13 17\\n5 2 4\\n0 0 0') == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 13 17\\n5 2 4\\n0 0 0') == '2095'\n\nSample Input:\n7 241 309\n15 10 20\n0 0 0\nSample Output:\n13\n\"\"\"\n\nfrom typing import Tuple, Iterator, Generator, Dict, List\nfrom math import gcd, lcm\n\nfrom icontract import require, ensure, DBC\n\n\nclass Interval(DBC, tuple):\n    @require(lambda lhs, rhs: lhs[0] <= rhs[0])\n    @require(lambda lhs, rhs: lhs[1] >= rhs[1])\n    def __new__(cls, start: int, stop: int) -> 'Interval':\n        return super().__new__(cls, (start, stop))\n\n    @require(lambda self: self[0] <= self[1])\n    def __add__(self, other: 'Interval') -> 'Interval':\n        \"\"\"Apply `Interval.__add__` to `self`.\n\n        Note that this is different from `tuple.__add__`.\n        \"\"\"\n        return Interval(*(lhs + rhs for lhs, rhs in zip(self, other)))\n\n    @require(lambda self: self[0] <= self[1])\n    def __sub__(self, other: 'Interval') -> 'Interval':\n        \"\"\"Apply `Interval.__sub__` to `self`.\n\n        Note that this is different from `tuple.__sub__`.\n        \"\"\"\n        return Interval(*(lhs - rhs for lhs, rhs in zip(self, other)))\n\n    @require(lambda self: self[0] <= self[1])\n    def __mul__(self, other: int) -> 'Interval':\n        \"\"\"Apply `Interval.__mul__` to `self`.\n\n        Note that this is different from `tuple.__mul__`.\n        \"\"\"\n        return Interval(*(lhs * other for lhs in self))\n\n    @require(lambda self: self[0] <= self[1])\n    def __floordiv__(self, other: int) -> 'Interval':\n        \"\"\"Apply `Interval.__floordiv__` to `self`.\n\n        Note that this is different from `tuple.__floordiv__`.\n        \"\"\"\n        return Interval(*(lhs // other for lhs in self))\n\n\nclass Mode(DBC, Tuple[int, int]):\n    @require(lambda self: self[0] < self[1])\n    def __new__(cls, start: int, stop: int) -> 'Mode':\n        return super().__new__(cls, (start, stop))\n\n    @require(lambda self: self[0] < self[1])\n    def __add__(self, other: 'Mode') -> 'Mode':\n        return Mode(*(lhs + rhs for lhs, rhs in zip(self, other)))\n\n    @require(lambda self: self[0] < self[1])\n    def __sub__(self, other: 'Mode') -> 'Mode':\n        return Mode(*(lhs - rhs for lhs, rhs in zip(self, other)))\n\n    @require(lambda self: self[0] < self[1])\n    def __mul__(self, other: int) -> 'Mode':\n        return Mode(*(lhs * other for lhs in self))\n\n    @require(lambda self: self[0] < self[1])\n    def __floordiv__(self, other: int) -> 'Mode':\n        return Mode(*(lhs // other for lhs in self))\n\n    @require(lambda self: self[0] < self[1])\n    def __lt__(self, other: 'Mode') -> bool:\n        return self[1] < other[0]\n\n    @require(lambda self: self[0] < self[1])\n    def __le__(self, other: 'Mode') -> bool:\n        return self[1] <= other[0]\n\n    @require(lambda self: self[0] < self[1])\n    def __gt__(self, other: 'Mode') -> bool:\n        return self[0] > other[1]\n\n    @require(lambda self: self[0] < self[1])\n    def __ge__(self, other: 'Mode') -> bool:\n        return self[0] >= other[1]\n\n\nclass Modulos(DBC, Generator[int, None, None]):\n    @require(lambda self: self[0] < self[1])\n    def __new__(cls, start: int, stop: int) -> 'Modulos':\n        return super().__new__(cls, (start, stop))\n\n    @require(lambda self: self[0] < self[1])\n    def __add__(self, other: 'Modulos') -> 'Modulos':\n        return Modulos(*(lhs + rhs for lhs, rhs in zip(self, other)))\n\n    @require(lambda self: self[0] < self[1])\n    def __sub__(self, other: 'Modulos') -> 'Modulos':\n        return Modulos(*(lhs - rhs for lhs, rhs in zip(self, other)))\n\n    @require(lambda self: self[0] < self[1])\n    def __mul__(self, other: int) -> 'Modulos':\n        return Modulos(*(lhs * other for lhs in self))\n\n    @"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n\"\"\"\n\nfrom typing import List, Union\n\nfrom math import gcd, ceil\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n\n\"\"\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''11 13 17''') == '2095'\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\nprint(solution(\"11 13 17\\n5 2 4\\n0 0 0\"))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\\n\") == \"My name is Gon\\nMy name is Gon\\n\"\n\"\"\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    var a = \"Gon\";\n    var b = a;\n    var c = `My name is ${a}`;\n    end.\n    \"\"\"\n) == \"\"\"\nMy name is Gon\nMy name is Gon\n\"\"\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"var a = \\\"Gon\\\"\\nvar b = a\\nvar c = `My name is ${a}`\\nprint c\\nprint `My name is ${b}`\\nend.\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = \\\"Gon\\\"\\nvar b = a\\nvar c = `My name is ${a}`\\nprint c\\nprint `My name is ${b}`\\nend.\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = \\\"Gon\\\"\\nvar b = a\\nvar c = `My name is ${a}`\\nprint c\\nprint `My name is ${b}`\\nend.\") == \"My name is Gon\\nMy name is Gon\\n\"\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\\nMy name is Gon\"\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\\nMy name is Gon\"\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\\nMy name is Gon\"\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\\nMy name is Gon\"\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('var a = \"Gon\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.') == 'My name is Gon\\nMy name is Gon'\n\n'''\n\nimport re"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\\n\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\\n\") == \"My name is Gon\\nMy name is Gon\\n\"\n\"\"\""
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\n\"\n\n----\n\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\n\n\"\"\""
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0'\nassert solution('1\\n1\\n1') == 'discard 1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nvolumes = [int(x) for x in sys.stdin.readline().split()]\nT = int(sys.stdin.readline())\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\"\n\"\"\"\n\nnum_bottles = int(input())\nbottles = list(map(int, input().split()))\n\ntotal_ice = int(input())"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output_lines)\n\"\"\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\n\"\"\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 8\\n10\\n\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readline().strip()\n\nn = int(stdin.split()[0])\nbottles = list(map(int, stdin.split()[1:]))\n\nt = int(sys.stdin.readline())\n\nd = [0] * n\nd[0] = t\nk = 0\nfor i in range(1, n):\n    k = min(k, t)\n    d[i] = min(k, bottles[i] - d[i - 1])\n    k -= d[i]\n    if k < 0:\n        break"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4\\n2') == 'fill 2'\nassert solution('3\\n1 1 1\\n1') == 'fill 2'\nassert solution('1\\n1') == 'discard 1'\nassert solution('5\\n1 2 1 2 2\\n1') == 'fill 1'\nassert solution('2\\n2 1') == 'fill 2'\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0'\n\"\"\""
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 0\\n'\nassert solution('3\\n5 3') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 0\\n'\nassert solution('2\\n1') == 'discard 1\\n'\n\"\"\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 3\") == \"27\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4 3') == '27'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('10 10 10') == '0'"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 4 3''') == '27'\n'''\n7 8 4\n'''\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4 3\") == \"27\"\nassert solution(\"100 4 3\") == \"543\"\nassert solution(\"100 4 5\") == \"813\"\nassert solution(\"100 4 7\") == \"900\"\nassert solution(\"100 4 10\") == \"9100\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10 4 3''') == '27'\n\nassert solution('''1 10 0''') == '1'\n\nassert solution('''10 4 5''') == '28'\n\nassert solution('''10 10 10''') == '100'\n\nassert solution('''100 10 10''') == '1010'"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '3'\nassert solution('2\\n2\\n2') == '2'\nassert solution('1\\n1\\n1') == '0'\nassert solution('8\\n4\\n2') == '10'\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 3\") == \"27\"\n\n\"\"\"\n\nn, m, k = map(int, input().split())"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 3\") == \"27\"\n\n\"\"\"\n\n\"\"\"\nAgni, 2019\n\"\"\"\n\nn, m, k = map(int, input().split())\n\nprint((k - 1) * ((m - 1) * n + 1) + (m - 1) * k + (n - 1) * k)"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4 3\") == \"27\"\nprint(solution(input()))"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\") == \"3\\n-1\\n4\"\nassert solution(\"4 2 5\\n1 3 1 2\\n2\\n1 1 1\\n2\\n1 1 1\") == \"4\\n4\\n-1\"\n\"\"\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\") == '3\\n-1\\n4'\n\n\"\"\""
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n\") == \"3\\n-1\\n4\"\n\"\"\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1''') == '''3\n-1\n4'''\n\nassert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '''3\n-1\n4'''\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\") == \"4\\n-1\\n4\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 1 1\\n2\") == \"4\\n-1\\n4\"\n\n------Solution------\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1') == '3\\n-1\\n4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1''') == '''3\n-1\n4'''\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1') == '\\n3\\n-1\\n4'\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('N;K;M\\n4;3;5\\n2\\n1;3;1\\n2\\n1;2;1\\n2\\n1;2;3') == '3\\n-1\\n4\\n', 'wrong result'\n\n---Problem Description---\nAn array of integers.\n\nYou have an array of integers and you have to process M queries of two types:\n\n1 type, where you have to process Q queries of the form \u201c1 x y\u201d where x is an index in the array and y is a value to be inserted into the array.\n2 type, where you have to process Q queries of the form \u201c2\u201d.\n\nThe array initially contains all zeros.\n\n---Solution---\nThe idea is to use binary search to find the value.\n\n1. Start with an array of zeros. Let N denote the length of the array.\n2. For each query of the first type, do the following:\n    a. Find the index with binary search.\n    b. If the index was found, change the value of the array at that index into the query\u2019s value.\n3. For each query of the second type, do the following:\n    a. Find the index with binary search.\n    b. Check whether there is a subarray of all values from 1 to K that contains the index.\n    c. If yes, return the length of this subarray.\n    d. Otherwise, return -1.\n\nclass Solution:\n    def __init__(self, N, K):\n        self.N, self.K = N, K\n        self.arr = [0] * N\n\n    def process(self, query):\n        if query[0] == 1:\n            n, v = int(query[1]), int(query[2])\n            idx = self.bs(n)\n            if idx is not None:\n                self.arr[idx] = v\n        else:\n            n = int(query[1])\n            idx = self.bs(n)\n            if idx is not None:\n                return len(self.get_subarray(idx))\n            return -1\n\n    def get_subarray(self, idx):\n        n = self.N\n        subarray = []\n        i = idx\n        while i < n and self.arr[i] == 0:\n            subarray.append(i + 1)\n            i += 1\n        subarray.append(i)\n        while i < n and self.arr[i]!= 0:\n            subarray.append(i + 1)\n            i += 1\n        return subarray\n\n    def bs(self, n):\n        left, right = 0, self.N\n        while left < right:\n            m = left + (right - left) // 2\n            if self.arr[m] <= n:\n                left = m + 1\n            else:\n                right = m\n        return left - 1 if left < self.N else None\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1') == '4\\n-1\\n4'\nassert solution('1 3 3\\n2\\n1 1 1') == '-1'\nassert solution('10 5 10\\n1 2 3 3 4\\n1 2\\n1 1\\n2 3\\n1 3\\n2 1\\n3') == '10\\n-1\\n5'\nassert solution('6 6 6\\n1 1 2\\n2 1\\n3 2\\n2 2\\n3 3\\n1 4\\n1 2\\n3') == '6\\n-1\\n6'\nassert solution('1 1 1\\n1 2 1\\n1 2 3\\n2 3\\n3') == '-1'\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 3000 1000\") == \"533.3333333333\"\n\"\"\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 3000 1000\\n') == '533.3333333333'\n\"\"\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 3000 1000') == '533.33333333'\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 3000 1000') == '533.33333333'\n\"\"\"\n\n\nfrom math import sqrt, pi"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\n\"\"\"\n\nfrom math import sqrt\n\nx, y, z = map(int, stdin.split())\ns = (y * z - x) / sqrt(2)\nprint(s)"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1000 3000 1000''') == '533.3333333333'\n\"\"\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 3000 1000\") == \"533.3333333333\"\n\"\"\"\n\nd, w, c = map(int, input().split())\n\nw = min(w, c)\n\nprint(w / (d ** 2))"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str([1000, 3000, 1000])) == '533.3333333333'\n\"\"\"\n\nfrom collections import namedtuple\nfrom math import sqrt\nfrom typing import List\n\nStats = namedtuple('Stats', ('num', 'denom'))\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 3000 1000\") == \"533.3333333333\"\n\"\"\"\n\nimport math\n\nD, W, C = list(map(int, input().split()))\n\nprint(math.ceil(D * W / C))\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Callable, Dict, List, Tuple, Optional, Set, Union\n\nfrom collections import defaultdict\nimport math\n\nclass Solution:\n    def __init__(self, distance: int, smooch: int, capacity: int):\n        self.distance = distance\n        self.smooch = smooch\n        self.capacity = capacity\n\n    def solve(self) -> str:\n        # max amount of smooch = (distance between monkey and family) * (smooch per meter)\n        # distance between monkey and family * smooch per meter\n        return f'{self.distance * self.smooch / 1000:.3f}'\n\n    def solve_verbose(self) -> str:\n        distance_per_smooch = self.distance / self.smooch\n        carry_smooch = int(math.floor(self.smooch / self.capacity))\n        carry_smooch_leftover = self.smooch - carry_smooch * self.capacity\n\n        # max amount of smooch = (distance between monkey and family) * (smooch per meter)\n        # distance between monkey and family * smooch per meter\n        # carry_smooch + carry_smooch_leftover = distance between monkey and family * smooch per meter\n        carry_distance = math.ceil(self.distance / distance_per_smooch)\n        carry_distance_leftover = self.distance - (carry_distance * distance_per_smooch)\n        carry_distance_total = carry_distance + carry_distance_leftover\n\n        carry_distance_leftover_per_smooch = carry_distance_leftover / carry_smooch\n        carry_distance_total_per_smooch = carry_distance_total / carry_smooch\n\n        result = f'{carry_smooch} {carry_distance_leftover} {carry_distance_total}'\n        carry_smooch_leftover_decimal = carry_distance_leftover_per_smooch % 1\n        carry_distance_total_decimal = carry_distance_total_per_smooch % 1\n        # print(f'{carry_smooch_leftover_decimal=}')\n        # print(f'{carry_distance_total_decimal=}')\n        if carry_smooch_leftover_decimal < 10**-7:\n            result = result + f' {carry_smooch_leftover_decimal:.3f}'\n        else:\n            result = result + f' {carry_smooch_leftover_decimal:.3f}'\n        if carry_distance_total_decimal < 10**-7:\n            result = result + f' {carry_distance_total_decimal:.3f}'\n        else:\n            result = result + f' {carry_distance_total_decimal:.3f}'\n\n        # print(f'{result=}')\n        return result"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == \"14.14\"\n\n\"\"\"\n\n\"\"\"\nThe idea is to traverse the nodes of the graph using BFS. \n\nAs the BFS works best on the level of the graph, we convert the graph to a tree. We can do this by adding a dummy root node. \n\nWe then add the children of the root node to the queue. Each child has the properties of a node in the graph:\n\nIt's child nodes.\nThe location of the child.\nThe parent node of the child.\nThe distance to the parent node.\n\nThe distance to the parent is simply the distance to the current node plus the distance of the child to the parent.\n\nWe then take the minimum distance from all the nodes in the queue. This is the answer.\n\nFor example, consider the following graph:\n\n* 5 6\n1 2\n2 3\n2 4\n3 5\n4\n\nWe can convert it to the following tree:\n\n* (5 6)\n1 (2 3)\n2 (3 4)\n3 (4)\n\nWe can then proceed to add the children of the root node to the queue:\n\n* (5 6)\n(1 2) 1 (2 3)\n(2 3) 2 (3 4)\n(3 4) 3 (4)\n\nWe can then take the minimum distance from all the nodes in the queue:\n\n* 1\n1 1 (2 3)\n2 2 (3 4)\n3 2 (4)\n4\n\n-----Solution-----\n\nIn this problem, we'll represent the graph with a tree.\n\nThe root node of the tree will be the node with the lowest distance. The value of this node will be the total distance.\n\nIn the queue, we'll add all the children of the current node, with the distance to the parent, and the node itself.\n\nFor each node in the queue, we'll find the minimum distance from all the nodes in the queue.\n\n-----My Implementation-----"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == \"14.14\"\n\"\"\""
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 0\\n10 0\\n10 10') == 14.14\n\"\"\""
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_str) == test_expected_str\nprint(solution(input_str))\n'''\n"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('test_input.txt').read()) == '14.14'\n\"\"\""
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '2 0\\n10 0\\n10 10'\n) == '14.14'\nassert solution(\n    '5 4\\n0 0\\n10 10\\n10 11\\n10 12'\n) == '0.67'\nassert solution(\n    '5 2\\n0 0\\n10 10\\n10 11\\n10 12'\n) == '0.34'\nassert solution(\n    '5 5\\n0 0\\n10 10\\n10 11\\n10 12\\n10 13'\n) == '0.17'\n"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 0\\n10 0\\n10 10') == '14.14'\n\"\"\""
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == 14.14\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 0\\n10 0\\n10 10') == '14.14'\nprint(solution('2 0\\n10 0\\n10 10'))\n\"\"\""
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == \"14.14\"\nassert solution(\"2 1\\n5 5\\n10 10\") == \"8.19\"\nassert solution(\"2 0\\n5 5\\n10 10\") == \"16.38\"\n\"\"\"\nimport sys\nimport os\nfrom math import sqrt"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"\"\"123457 0\n0 2\n123458 1\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"123457 0\\n0 2\\n123458 1\""
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457''') == '''123457 0\n0 2\n123458 1'''"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457') == '123457 0\\n0 2\\n123458 1'\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457') == '123457 0\\n0 2\\n123458 1'\nassert solution('1 1\\n123456') == '123456 0'\nassert solution('2 1\\n123456\\n123456') == '123456 0'\nassert solution('1 1\\n123456') == '123456 0'\nassert solution('1 1\\n123456') == '123456 0'\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457') == '123457 0\\n0 2\\n123458 1'\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"\"\"123457 0\n0 2\n123458 1\n\"\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\"\"\") == \"\"\"123457 0\n0 2\n123458 1\"\"\"\n\n\"\"\"\nGiven a matrix of integers A of size N x M and an integer B. In each move, you can swap any two rows with each other, or any two columns with each other. \n\nYour task is to find the minimum number of moves required to make the matrix strictly diagonally dominant. If it is possible in all the moves, return -1.\n\nA matrix is said to be strictly diagonally dominant if each row and each column of the matrix contain at least one element which is strictly greater than the sum of other elements in that row or column.\n\nInput Format:\nThe first argument given is the integer matrix A.\nThe second argument given is the integer B.\nOutput Format:\nReturn the minimum number of moves required to make the matrix strictly diagonally dominant.\nConstraints:\n1 <= N, M <= 1000\n0 <= A[i][j] <= 10^9\n1 <= B <= 10^9\nFor Example\nInput 1:\n    A = [   [2, 2]\n            [2, 2]]\n     B = 2\nOutput 1:\n    1\nExplanation 1:\n    Swap the first row and the second row.\nInput 2:\n    A = [   [1, 2]\n            [1, 2]]\n     B = 2\nOutput 2:\n    -1\nExplanation 2:\n    No move makes the matrix strictly diagonally dominant.\n\"\"\"\n\nclass Solution:\n    # @param A : list of list of integers\n    # @param B : integer\n    # @return an integer\n    def solve(self, A, B):\n        n = len(A)\n        m = len(A[0])\n        dp = [[0 for i in range(n)] for j in range(m)]\n        for j in range(m):\n            for i in range(n):\n                if j == 0:\n                    dp[j][i] = A[i][j]\n                else:\n                    dp[j][i] = dp[j-1][i] + A[i][j]\n        \n        for j in range(m-1, -1, -1):\n            for i in range(n):\n                if j == m-1:\n                    if B >= dp[j][i] or i == n-1:\n                        return j+1\n                else:\n                    if B >= dp[j][i] or i == n-1:\n                        return dp[j+1][i] + j+1\n\n        return -1"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457''') == '''123457 0\n0 2\n123458 1'''\n\n'''\nSample Input:\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\nSample Output:\n123457 0\n0 2\n123458 1'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"123457 0\\n0 2\\n123458 1\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 5 10 2 5\\n2 4 5 1 3\\n\") == \"90\"\n\"\"\""
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3') == 90\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 1 2 4\") == \"90\"\n\"\"\""
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n5 10 2 5\n2 4 5 1 3''') == '90'\nassert solution('''5\n3 10 2 5 6\n2 4 5 1 3\n5 10 8 16 32''') == '290'\nassert solution('''10\n4 0 2 5 8 2 3\n1 8 7 3 1 1 2\n4 2 5 3 6 7 6\n9 8 1 9 1 9 4\n8 3 3 1 2 1 8\n4 1 2 6 1 7 1\n9 4 4 2 9 3 5\n8 1 5 2 9 8 2\n3 2 1 1 6 4 5\n5 2 7 3 7 3 4\n3 9 1 4 7 6 6\n3 5 6 8 9 1 7''') == '729'"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n2 4 5 1 3\\n1 2 3 4 5') == 90\nassert solution('5\\n3 5 4 3 2\\n2 3 1 4 5') == 90\n\n-------"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 5 10 2 5\\n2 4 5 1 3\") == 90\n\"\"\""
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 4 5 1 3\\n1 2 3 4 5') == 90\nassert solution('5\\n2 4 5 1 3\\n2 4 5 1 3') == 90\nassert solution('5\\n2 4 5 1 3\\n2 4 5 1 3\\n2 4 5 1 3') == 90\nassert solution('5\\n2 4 5 1 3\\n2 4 5 1 3\\n2 4 5 1 3\\n2 4 5 1 3') == 90\nassert solution('5\\n2 4 5 1 3\\n2 4 5 1 3\\n2 4 5 1 3\\n2 4 5 1 3\\n2 4 5 1 3') == 90\n\nSample Input:\n5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\nSample Output:\n90\n\"\"\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 5 1 3\\n1 2 3 4 5\") == \"90\"\n\"\"\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 5 1 3\\n1 3 2 4 5') == 90\n\"\"\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 5 10 2 5\\n2 4 5 1 3\\n\") == \"90\"\n\"\"\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2\\n') == '6.0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.0\"\n'''"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\nassert solution('1 1\\n0 2\\n0 1') == '0.000000'\n'''"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\n\nprint(solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2'))\n\n\n-----Explanation-----\nThere are 3 buildings, the tallest of which is 2 meters high and is located at distance 6 meters from the left end of the city. The buildings are sorted in ascending order by the distance from the left end of the city.\n\nThe first transmitter is placed on the city segment [0, 4]. The city segment [4, 4] is covered by the first transmitter.\n\nThe second transmitter is placed on the city segment [0, 8], but the city segment [0, 4] is already covered by the first transmitter.\n\nThe third transmitter is placed on the city segment [0, 10], which is not covered by the first transmitter.\n\nSo the answer is 6 meters.\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 1\\n1 0 2\\n1 1 1\\n1 1 1\\n1 1 2') == '8.000000'\n\"\"\"\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10\\n2 1 3\\n1 5 1\") == \"3.0000\"\nassert solution(\"1 10\\n1 1 1\") == \"0.5000\"\nassert solution(\"2 10\\n0 3 7\") == \"7.0000\"\n\"\"\"\n\nfrom math import *\n\nN, D = map(int, input().split())\n\nx = []\nh = []\nfor _ in range(N):\n    tmp = list(map(int, input().split()))\n    if tmp[0] == 1:\n        x.append(tmp[1])\n        h.append(tmp[2])"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3,10) == 6\n\"\"\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(float(input()))\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\n\"\"\"\n\nfrom math import sqrt\n\nN, D = [int(x) for x in input().split()]\nX, H = [], []\nfor i in range(N):\n    x, h = [int(x) for x in input().split()]\n    X.append(x)\n    H.append(h)\n\nm = 0\nfor i in range(N):\n    m = max(m, X[i] - D)"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1\\n2 2\\n0\\n2 1\\n2 2\\n0\\n2 1') == '1.\\n..\\n1.\\n2.\\n..'\n\nassert solution('4\\n0 1\\n0 1\\n0 2\\n0 2') == '1.\\n1.\\n2.\\n2.'\n\"\"\"\n\nfrom typing import List\n\nINPUT_1 = '4\\n1 1\\n2 2\\n0\\n2 1\\n2 2\\n0\\n2 1'\nINPUT_2 = '4\\n0 1\\n0 1\\n0 2\\n0 2'\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.\\n..\\n0\\n') == '1.\\n..'\nassert solution('3\\n0 0\\n0 0\\n1.\\n..\\n0\\n') == '1.\\n..'\nassert solution('4\\n0 0\\n0 0\\n1.\\n..\\n0\\n') == '2.\\n..'\nassert solution('5\\n0 0\\n0 0\\n1.\\n..\\n0\\n') == '2.\\n..'\nassert solution('6\\n0 0\\n0 0\\n1.\\n..\\n0\\n') == '3.\\n..'\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\"\nprint(solution(\"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\"))\nassert solution(\"\"\"\n2\n0 0\n0 0\n3.\n..\n0\n\"\"\") == \"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\"\nassert solution(\"\"\"\n2\n0 0\n0 0\n3.\n..\n0\n\"\"\") == \"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\"\nassert solution(\"\"\"\n2\n1 2\n1 2\n1.\n..\n0\n\"\"\") == \"\"\"\n2\n1 2\n1 2\n1.\n..\n0\n\"\"\"\nassert solution(\"\"\"\n2\n1 0\n1 1\n1.\n..\n0\n\"\"\") == \"\"\"\n2\n1 1\n1 1\n1.\n..\n0\n\"\"\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n..1\\n..1\\n3\\n2\\n0\") == \"1..\\n0..\\n0..\"\nassert solution(\"3\\n1\\n0\\n2\\n2\\n1\\n0\\n2\\n0\\n1\\n2\\n2\\n0\") == \"...\\n0..\\n0..\"\nassert solution(\"6\\n..1\\n..1\\n3\\n2\\n0\") == \"...\\n0..\\n0..\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n1.\\n..\\n0\\n1.\") == \"1.\\n..\\n1.\\n\"\nassert solution(\"2\\n0\\n0.\\n0\\n1.\") == \"1.\\n.\\n.\\n\"\nassert solution(\"2\\n2\\n0.\\n0.\\n1.\") == \"1.\\n.\\n1.\\n\"\nassert solution(\"2\\n2\\n2.\\n2.\\n1.\") == \"1.\\n2.\\n2.\\n\"\nassert solution(\"2\\n2\\n2.\\n2.\\n2.\") == \"2.\\n2.\\n2.\\n\"\n\"\"\""
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1.\\n..\\n0\\n1\") == \"1.\\n..\\n\"\n\"\"\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1\") == \"1.\\n..\\n\"\n\"\"\""
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 0\n0 0\n1.\n..\n0\n''') == '''\n1.\n..\n'''\n\nassert solution('''\n2\n0 0\n0 0\n3.\n..\n0\n''') == '''\n1.\n..\n'''\n\nassert solution('''\n2\n1 1\n1 1\n1.\n..\n0\n''') == '''\n1.\n..\n'''\n\nassert solution('''\n2\n1 0\n1 0\n1.\n..\n0\n''') == '''\n1.\n..\n'''\n\nassert solution('''\n2\n0 0\n0 0\n3.\n..\n0\n''') == '''\n3.\n..\n'''"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2 1\\n..\\n1.\\n') == '1.\\n..\\n1.\\n'\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.\\n..\\n0\\n') == '1.\\n..\\n'\nassert solution('2\\n0 0\\n0 0\\n1.\\n1.\\n..\\n0\\n') == '1.\\n1.\\n..\\n'\nassert solution('2\\n0 0\\n0 0\\n1.\\n2.\\n..\\n0\\n') == '2.\\n1.\\n..\\n'\nassert solution('2\\n0 0\\n0 0\\n1.\\n2.\\n..\\n0\\n') == '2.\\n1.\\n..\\n'\nassert solution('2\\n0 0\\n0 0\\n1.\\n2.\\n..\\n0\\n') == '2.\\n1.\\n..\\n'\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ab\\n2\\n1\\n2\\n') == '1'\nassert solution('ab\\n3\\n1\\n2\\n') == '1'\nassert solution('ab\\n3\\n1\\n2\\n') == '1'\nassert solution('ab\\n3\\n1\\n2\\n') == '1'\n\n-----Notes-----\nIf the number of lines to be shown to the barbarian is greater than $10^5$, it is better to count the number of unique words and output only the number.\n\n\"\"\""
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('abc\\n') == ''\nassert solution('a\\nbc') == ''\nassert solution('abc\\n\\n\\n\\na\\nbc\\n') == ''\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a\\nbc\\nabc') == 'a\\nbc\\nabc'\nassert solution('abc\\nabc\\nabc') == 'abc\\nabc\\nabc'\nassert solution('abc\\ndef\\nabc\\nabc') == 'abc\\nabc\\nabc'\n\nn = int(stdin.readline())\narr = [stdin.readline() for _ in range(n)]\nstdin.readline()\nq = int(stdin.readline())\n\nfor _ in range(q):\n    t = int(stdin.readline())\n    if t == 1:\n        ans = stdin.readline().strip()\n    else:\n        s = int(stdin.readline())\n        ans = 0\n        for word in arr:\n            if word.startswith(ans):\n                ans += 1\n    print(ans)\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\na\\nbc\\nabc') == '1\\n1\\n1'\nassert solution('3\\nbc\\nabc\\nbc\\nbc\\nbc\\nbc\\nbc\\nbc\\nbc') == '1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1'\nassert solution('3\\nbc\\nabc\\nbc\\nbc\\nbc\\nbc\\nbc\\nbc\\nbc') == '1\\n2\\n1'\nassert solution('3\\nabc\\nabc\\nabc\\nabc\\nabc\\nabc\\nabc\\nabc\\nbc') == '1\\n2\\n2'\nassert solution('3\\nabc\\nabc\\nabc\\nabc\\nabc\\nabc\\nabc\\nabc\\nbc') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('abc\\nabca\\nbcab') == 'a'\n\"\"\""
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\na\\nbc\\nabc') == '1'\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3') == '1'\n\nassert solution('3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3') == '1'\n\nassert solution('3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3') == '1'\n\nassert solution('3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3') == '1'\n\nassert solution('3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3') == '1'"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '1\\n1\\n1'\nassert solution('abc\\nbc\\nabc') == '1\\n1\\n1'\nassert solution('abc\\ndef\\nghi') == '2\\n3\\n4'\nassert solution('a\\nab\\nabc') == '1\\n2\\n2'\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\na\\nbc\\nabc\") == \"1\"\n\"\"\"\n\n\nimport collections\nimport sys\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\na\\nabc\\n3\\n1 abca\\n2 1\\n2 3\\n') == '1\\n1\\n'"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 1 0 1\") == \"NO\"\nassert solution(\"1 0 1 1\") == \"NO\"\nassert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 2 1 1\") == \"NO\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == \"YES\"\nassert solution('1 1 0 1') == \"NO\""
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 1 0 0') == 'YES'\nassert solution('0 2 0 0') == 'NO'\nassert solution('2 2 0 0') == 'NO'\nassert solution('0 1 1 2') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"2 2 2 2\") == \"NO\"\n\"\"\"\n\n\"\"\"\ntheory:\n1. find the total number of sheep, cabbages and wolves\n2. check if the total can be distributed into the boat\n3. check if the distribution is possible\n\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    A = list(map(int, line.split()))\n    n = A[0]\n    W = A[1]\n    S = A[2]\n    C = A[3]\n    K = A[4]\n\n    # total number of sheep, cabbages, and wolves\n    T = W + S + C\n    if T % K!= 0:\n        print(\"NO\")\n    else:\n        # if the total can be distributed into the boat, then it's possible to distribute\n        if T / K >= min(W, S, C):\n            print(\"YES\")\n        # otherwise it's not possible to distribute\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 10') == 'NO'\nassert solution('1 1 10 10') == 'YES'\n\n\"\"\""
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES' or solution(stdin) == 'NO'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 1 0 1\") == \"YES\"\nassert solution(\"1 1 1 0\") == \"NO\"\nassert solution(\"1 1 0 1\") == \"NO\"\n\n-----Note-----\nIn the first case, all items are transfered, so it is possible to transport them with a boat that can carry all of them. In the second case, there is one wolf and one sheep on the bank, so it is not possible to transport all items. In the third case, there are three items in total on the bank, but only one of them can be transferred at once. In the fourth case, there are only two items on the bank, and it is not possible to transfer them all.\n\"\"\"\n\nW, S, C, K = map(int, input().split())\nprint(\"YES\" if max(W, S, C) <= K else \"NO\")\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == 'YES'\nassert solution(\"4 8 8 20\") == 'YES'\nassert solution(\"8 6 3 5\") == 'NO'\n\"\"\"\n\nW, S, C, K = input().split()\nW, S, C, K = int(W), int(S), int(C), int(K)"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1') == \"YES\"\n\nassert solution('1 1 1 2') == \"NO\"\n\"\"\"\n\nW, S, C, K = map(int, input().split())\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"2 2 2 2\") == \"NO\"\n\"\"\"\n\nW, S, C, K = map(int, stdin.strip().split())\n"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696'\nassert solution('1 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696'\nassert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696'"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696000000'\n\"\"\"\n\nfrom typing import List, Tuple, Union\n"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == a\n"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == \"80.569600000000\"\n\nassert solution('1 96\\n0.0000 1.5417 25.0000\\n0.0000 1.5417 25.0000') == \"100.0\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\") == \"80.5696\"\n\"\"\""
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\") == \"80.5696\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\") == '80.5696'\n\"\"\""
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\") == \"80.5696\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5700'\n\"\"\"\n\nimport sys\n\nN, T = [int(x) for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696000000'\n\"\"\""
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"4 0 0 0 1 1 1 0 0 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\""
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\n'''"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1\\n') == '2'\nassert solution('4 0 0 1 1 1 0 0 1\\n') == '2'\nassert solution('4 0 0 1 1 1 0 0 1\\n') == '2'\nassert solution('4 0 0 1 1 1 0 0 1\\n') == '2'\nassert solution('4 0 0 1 1 1 0 0 1\\n') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"3 0 0 1 1 1 0 0 1\") == \"3\"\nassert solution(\"4 -1 0 1 1 1 0 0 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nprint(solution(\"4 0 0 1 1 1 0 0 1\"))\n\n\"\"\"\nimport sys\n\nholes = [0] + [int(x) for x in sys.stdin.read().split(' ')]\nn = holes.pop(0)\n\nprint(n - len(set(holes)))\n"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1\\n') == '2'"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\\n\") == \"2\"\nassert solution(\"5 0 0 1 1 1 0 0 1\\n\") == \"2\"\nassert solution(\"8 0 0 0 0 0 1 1 1\\n\") == \"2\"\nassert solution(\"4 0 0 1 1 1 0 0 1\\n\") == \"2\"\nassert solution(\"4 0 0 1 1 1 0 0 1\\n\") == \"2\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingR6RHRB-XBZ/\n\nYou have a map that marks the locations of treasure islands. Some of the map area has jagged rocks and dangerous reefs. Other areas are safe to sail in. There are other explorers trying to find the treasure. So you must figure out a shortest route to one of the treasure islands.\n\nAssume the map area is a two dimensional grid, represented by a matrix of characters. You must start from one of the starting point (marked as S) of the map and can move one block up, down, left or right at a time. The treasure island is marked as X. Any block with dangerous rocks or reefs will be marked as D. You must not enter dangerous blocks. You cannot leave the map area. Other areas O are safe to sail in. Output the minimum number of steps to get to any of the treasure islands.\n\nExample:\n\nInput:\n[['S', 'O', 'O', 'S', 'S'],\n ['D', 'O', 'D', 'O', 'D'],\n ['O', 'O', 'O', 'O', 'X'],\n ['X', 'D', 'D', 'O', 'O'],\n ['X', 'D', 'D', 'D', 'O']]\n\nOutput: 3\nExplanation:\n[S, S, S, S, S]\n[D, O, D, O, D]\n[O, O, O, O, X]\n[X, D, D, O, O]\n[X, D, D, D, O]\n\nThe treasure locations are (0, 2), (1, 3) and (2, 3).\n\nThe shortest route is S -> O -> X -> D -> X\n\nSo the answer is 3.\n\n\"\"\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n\n'''\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n\nassert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n\nassert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\\n\") == \"1400\"\n\n-----Explanation-----\nThe courier system is built by using two islands. The two islands are connected by a tunnel. The first island is the island of island 0 and the second island is the island of island 1. The length of the tunnel is $3 + 2 + 1 = 6$.\n\nThe maximum throw range of the courier is $3 + 2 + 1 = 6$. The maximum height of the palm tree is $3 + 2 + 1 = 6$. The maximum throw range of the palm tree is $3 + 2 + 1 = 6$. Hence, the maximum throw range of the courier is $6$. The maximum height of the palm tree is $6$. Hence, the maximum height of the courier is $6$.\n\nIf the maximum throw range and maximum height are both $6$, then there is a courier system.\n\nIf the maximum throw range is $6$ and the maximum height is $1$, then the length of the tunnel must be $1$. The length of the tunnel is $1$.\n\nIf the maximum throw range is $6$ and the maximum height is $6$, then there is a courier system.\n\nIf the maximum throw range is $6$ and the maximum height is $6$, then there is a courier system.\n\nIf the maximum throw range is $6$ and the maximum height is $6$, then there is a courier system.\n\nIf the maximum throw range is $6$ and the maximum height is $6$, then there is a courier system.\n\nSince there is no courier system, the answer is $0$.\n\n-----Challenge-----\nCan you build a courier system for any arbitrary number of islands and palm trees?\n\"\"\"\n\nfrom __future__ import print_function\n\nn, m, k = list(map(int, input().split()))"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n\"\"\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n\"\"\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0\\n400\\n400\\n0\\n400\\n400\\n0\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\n400\\n400\\n0\\n400\\"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\n\"\"\"\n\nn, m, k = map(int, input().split())\nislands = []\nfor _ in range(n):\n    x, y, r = map(int, input().split())\n    islands.append([x, y, r])\npalms = []\nfor _ in range(m):\n    x, y, h = map(int, input().split())\n    palms.append([x, y, h])"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\n\\nlondon amsterdam 356\\nberlin amsterdam 575\\n\\nlondon dublin 463\\nreykjavik dublin 1498\\n\\nreykjavik oslo 1748\\nlondon brussels 318') == '3907'"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\n\\nlondon brussels 318\") == '3907'\nprint(solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('sample_input.txt').read()) == '3907'\nprint(solution(open('input.txt').read()))"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nstockholm\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == \"3907\"\n\nassert solution(\"10 6\\nstockholm\\namsterdam\\nstockholm\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\n\") == \"8813\"\n\nassert solution(\"10 8\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\\nbrussels amsterdam 173\") == '3907'\n\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\n\"\"\") == '3907'\n\nassert solution(\"\"\"20 20\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\n\"\"\") == '7985'\n\"\"\")\n\nassert solution(\"\"\"10 10\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\n\"\"\") == '0'\n\nassert solution(\"\"\"4 4\nhelsinki\nstockholm\nlondon\nreykjavik\nhelsinki london\nstockholm helsinki\nstockholm helsinki\nlondon helsinki\nhelsinki reykjavik\nstockholm helsinki\nlondon helsinki\nhelsinki london\nlondon helsinki\n\"\"\") == '0'\n\nassert solution(\"\"\"4 4\nlondon\noslo\namsterdam\nberlin\nlondon amsterdam\noslo london\n\"\"\") == '0'"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == \"3907\""
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\\nbrussels amsterdam 173\") == \"3907\"\n\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == \"3907\"\n\"\"\""
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == \"3907\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1''') == '''2\n1\n2\n1\n2'''\nassert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1''') == '''2\n1\n2\n1\n2'''\nassert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1''') == '''2\n1\n2\n1\n2'''\n\nassert solution('''4 5\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1''') == '''2\n1\n2\n1\n2'''\n\nassert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1''') == '''2\n1\n2\n1\n2'''"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 3\\n0 2\\n0 3\\n1 1\\n2 1\\n\") == \"0\\n0\\n1\"\n\n\"\"\""
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\n\n-----Problem-----\nLet's define a tuple $p=(x_0,\\dots,x_{n-1})$ with $0\\leq x_i < 10^6$, $1\\leq n\\leq 10^5$, and denote the distance between $p$ and $q$ by $\\textrm{dis}(p,q)=\\sum_{i=0}^{n-1}|x_i-q_i|$.\n\nFind the minimum possible value of $\\textrm{dis}(p,q)$.\n-----Data Generator-----\nYou can use the following code to generate additional test cases.\n\nimport random\n\nn = random.randint(1, 10**5)\na = [random.randint(0, 10**6) for i in range(n)]\nq = random.randint(1, 10**5)\nfor i in range(q):\n    x = random.randint(0, 10**6)\n    print(str(i+1) +'' + str(x))\n    \n-----Test 1-----\nn = 5\na = [3, 1, 3, 4, 2]\nq = 4\n\nOutput:\n1\n2\n0\n3\n0\n\n-----Test 2-----\nn = 5\na = [3, 1, 3, 4, 2]\nq = 4\n\nOutput:\n1\n2\n0\n3\n0\n\n-----Test 3-----\nn = 10\na = [4, 8, 1, 9, 6, 5, 3, 6, 8, 2]\nq = 9\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 4-----\nn = 10\na = [4, 8, 1, 9, 6, 5, 3, 6, 8, 2]\nq = 9\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 5-----\nn = 10\na = [4, 8, 1, 9, 6, 5, 3, 6, 8, 2]\nq = 9\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 6-----\nn = 10\na = [4, 8, 1, 9, 6, 5, 3, 6, 8, 2]\nq = 9\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 7-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n1\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 8-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n1\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 9-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n1\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 10-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 11-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 12-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 13-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n1\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 14-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 15-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 16-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 17-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 18-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n0\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 19-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9, 4, 2]\nq = 50\n\nOutput:\n1\n3\n0\n6\n0\n9\n0\n9\n1\n0\n2\n\n-----Test 20-----\nn = 100\na = [3, 6, 1, 17, 9, 7, 6, 9"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\"\"\") == \"\"\"2\n1\n2\n1\n2\"\"\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == res\n\n\"\"\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1'\n) == '2\\n1\\n2\\n1\\n'\nassert solution(\n    '5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1'\n) == '2\\n1\\n2\\n1\\n'\nassert solution(\n    '5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1'\n) == '2\\n1\\n2\\n1\\n'\nassert solution(\n    '5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1'\n) == '2\\n1\\n2\\n1\\n'\nassert solution(\n    '5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1'\n) == '2\\n1\\n2\\n1\\n'\n\n\"\"\"\n\nfrom collections import deque\nfrom itertools import islice\n\nn, q = map(int, input().split())\nhuts = list(map(int, input().split()))\nqueue = deque([[huts[i], 0, i] for i in range(n)])\n\nfor i in range(q):\n    a, b = map(int, input().split())\n    b -= 1\n    while queue[0][1] < b:\n        queue.append(queue.popleft())\n    if queue[0][2] < a:\n        queue.append(queue.popleft())\n    queue[0][1] -= b\n    queue[0][0] += a\n    queue.rotate(-a)\nprint(queue[0][2] + 1)\n\nfor _ in range(q):\n    print(queue[0][2] + 1)\n    queue.rotate(-queue[0][0])\n    queue.popleft()\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 1\\n0 5\\n1 3\\n2 2\\n2 1\\n3 3\\n\") == \"2\\n1\\n3\\n2\\n1\\n\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n0 2\\n0 4\\n0 6\\n1 1\\n1 1\\n1 1\\n0 2\\n0 4\\n0 6\\n0 5\\n0 5\\n0 5\\n0 4\\n0 4\\n0 4\") == \"0\\n1\\n1\\n2\\n2\\n3\\n3\\n4\\n4\\n4\\n3\\n2\\n1\\n1\\n0\\n0\"\n\n\"\"\"\n\nimport sys\n\ntest_input = \"\"\"\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n\"\"\"\n\nsys.stdin = open('test_input.txt')\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n\") == \"2\\n1\\n2\\n1\\n\"\nassert solution(\"3 1\\n1\\n2\\n1\\n0\\n\") == \"2\\n1\\n\"\nassert solution(\"3 1\\n2\\n2\\n1\\n0\\n\") == \"1\\n1\\n\"\nassert solution(\"3 1\\n3\\n3\\n1\\n0\\n\") == \"3\\n3\\n\"\nassert solution(\"3 2\\n1\\n2\\n2\\n0\\n\") == \"1\\n1\\n2\\n\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1 3 4 2\n0 5\n0 9\n4 5\n2 1''') == '2\\n1\\n2\\n1\\n'\nassert solution('''6 8\n0 0 0 0 0 0\n1 2\n0 0 0 1 1\n0 1\n0 1\n0 0 1\n0 0 0\n''') == '3\\n4\\n'\n\nimport math\n\n\"\"\"\nhttps://www.geeksforgeeks.org/solution-least-number-of-people-in-the-hut-queue-to-meet-the-daily-minimum-number-of-people/\n\"\"\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n01001\\n11100\\n10111\") == \"00010\"\nassert solution(\"3 5\\n10111\\n11100\\n01001\") == \"11110\"\nassert solution(\"3 5\\n01110\\n11100\\n10111\") == \"10101\"\nassert solution(\"3 5\\n11110\\n11100\\n10111\") == \"10111\"\nassert solution(\"3 5\\n11110\\n11010\\n10111\") == \"10110\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"01110\"\n\"\"\""
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n01001\\n11100\\n10111\") == '00010'\nassert solution(\"2 3\\n11010\\n1010\") == '01110'\nassert solution(\"2 3\\n11010\\n1010\") == '11010'\nassert solution(\"2 3\\n11010\\n1010\") == '11010'\nassert solution(\"1 2\\n010\") == '01010'\n\na, b = map(int, stdin.split())\nprint(''.join(map(lambda x: '1' if x == '1' else '0', input()*b)))\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1110111') == '11111111'\nassert solution('11101111101110111') == '111111111110111'\n\nassert solution('') == ''\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n01001\\n11100\\n10111\") == '10110'\nassert solution(\"3 3\\n11\\n110\\n11\") == '110'"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 1) == 1\nassert solution(2, 2) == 0\nassert solution(3, 2) == 1\nassert solution(4, 2) == 1\nassert solution(5, 3) == 2\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n01001\\n11100\\n10111\") == \"00010\"\nprint(solution(\"3 5\\n01001\\n11100\\n10111\"))\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n1 1\\n0 0') == '0 0'\nassert solution('1 1\\n0 1\\n1 1') == '1 0'\nassert solution('2 3\\n10 10\\n010 1') == '101 0'\nassert solution('4 5\\n0 0 0 0\\n0 0 0 1\\n0 0 0 0\\n0 0 1 1') == '11110'\nassert solution('5 5\\n0 0 0 0 0\\n0 0 0 0 0\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '11111'\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5\n01001\n11100\n10111''') == '10110'\nassert solution('''4 4\n11110\n10111\n10111\n10111''') == '11110'\nassert solution('''5 5\n11110\n10111\n11110\n11110\n10111''') == '11110'\nassert solution('''1 1\n0''') == '0'\nassert solution('''5 4\n10110\n10110\n10110\n10110\n10110''') == '01110'\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5\n10111\n11100\n01001''') == '00010'\n\n---Problem---\nThe army of The North has a new strategy to crush the enemies on Earth. At the beginning of each turn, each unit will attack at most two units with some level of similarity.\n\nThe units have $k$ features in total and a unit has some subset of them. For example, a unit with features {1, 3, 6} has the features 1, 3, and 6.\n\nThe units are attacking in a circle: the unit to the left attacks the unit to the right, the unit to the right attacks the unit to the left, and so on.\n\nThe number of units is $n$, and the total number of features is $k$.\n\nA team is a group of at most $n$ units that have the same $k$ features.\n\nTira is playing the army of The North. She is an intelligent computer scientist with only a few hours of her time each day. She wants to create a character which has maximum similarity with one of the team members.\n\nGiven the features of the units and the number of units $n$, your task is to find the maximum similarity between Tira\u2019s character and any of the units.\n\n----Input/Output----\n[input] integer n\n\nNumber of units.\n\n[input] string features\n\nEach character in the string is either $0$ or $1$. The total number of characters is $k$, where $k \\le n$.\n\n[output] string\n\nA character that has maximum similarity.\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"possible\"\nassert solution(\"1\\n1\\n6 2\\n0 4\\n6 12\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n3 12\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n3 12\\n2 4\\n9 12\") == \"possible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n3 12\\n2 4\\n9 12\\n1 5\\n2 2\\n8 12\\n4 6\\n0 6\") == \"possible\"\n\n'''\n\nfrom collections import namedtuple\nfrom itertools import chain\n\nInterval = namedtuple('Interval','start end')"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('4\\n0\\n1') == 'impossible'\nassert solution('4\\n0\\n1\\n0\\n2\\n3\\n4\\n3\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n2\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'possible'\nassert solution('2\\n1 1') == 'impossible'\nassert solution('2\\n3 3') == 'impossible'\nassert solution('2\\n2 1\\n1 1') == 'impossible'\nassert solution('2\\n2 3\\n1 1') == 'possible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_expected\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n2\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2 2\\n3 4\\n4 5\\n5 6\\n6\") == \"possible\"\nassert solution(\"1\\n2 2\\n4 4\\n4 5\\n5 6\\n6\") == \"impossible\"\nassert solution(\"1\\n2 2\\n3 2\\n3 4\\n4 5\\n5 6\\n6\") == \"impossible\"\nassert solution(\"1\\n2 2\\n3 4\\n4 5\\n5 6\\n6\") == \"impossible\"\n\nprint(solution(\"1\\n2 2\\n3 4\\n4 5\\n5 6\\n6\"))\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"possible\"\nassert solution(\"1\\n5 2\\n3 1\\n6 1\") == \"impossible\""
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n0\\n2\\n4\\n0\\n3\\n4\\n5\\n0\\n5\\n5\\n0\\n3\\n5\\n1\\n3\\n4\\n1\\n3\\n5\\n1\\n4\\n1\\n4\\n0\\n2\\n5\\n0\\n1\\n4\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n4\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n4\\n0\\n2\\n5\\n0\\n1\\n4\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n4\\n0\\n2\\n5\\n0\\n1\\n4\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\n1\\n5\\n0\\n2\\n5\\n0\\"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n2\\n1\\n1\\n1\\n1\\n') == 'possible'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == 'impossible'\nassert solution('1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n0 0\\n1 1\\n1 0\") == \"possible\"\nassert solution(\"3\\n1\\n0 1\\n1 1\\n1 0\") == \"possible\"\nassert solution(\"1\\n1\\n0 1\\n1 1\\n1 0\") == \"impossible\"\nassert solution(\"2\\n0\\n0 0\\n1 1\\n1 0\") == \"possible\"\nassert solution(\"2\\n0\\n0 0\\n1 1\\n1 0\") == \"impossible\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\n\"\"\"\n\nimport math\nimport numpy as np\nfrom typing import List"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy\nimport numpy.linalg\nfrom typing import List\n\n\nclass Parallelogram:\n    \"\"\"\n    Class for representing a parallelogram.\n\n    Parameters\n    ----------\n    origin : numpy.ndarray\n        Coordinates of the parallelogram's origin\n    axis_x : numpy.ndarray\n        Coordinates of the parallelogram's x axis\n    axis_y : numpy.ndarray\n        Coordinates of the parallelogram's y axis\n    angle : float\n        Angle between axis_x and axis_y\n    \"\"\"\n    def __init__(self, origin: numpy.ndarray, axis_x: numpy.ndarray, axis_y: numpy.ndarray, angle: float):\n        self.origin = origin\n        self.axis_x = axis_x\n        self.axis_y = axis_y\n        self.angle = angle\n        self.points = numpy.array([\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ])\n        self.points = numpy.array([\n            [1, 0, 0, 0],\n            [0, 1, 0, 0],\n            [0, 0, 1, 0],\n            [0, 0, 0, 1]\n        ])\n        self.calculate_corners()\n    \n    def calculate_corners(self) -> None:\n        \"\"\"\n        Calculates the coordinates of the parallelogram's four corners.\n        \"\"\"\n        self.points[0, :] = self.origin\n        self.points[1, :] = self.origin + numpy.array([\n            self.axis_x[0] * numpy.cos(self.angle) - self.axis_y[0] * numpy.sin(self.angle),\n            self.axis_x[0] * numpy.sin(self.angle) + self.axis_y[0] * numpy.cos(self.angle),\n            0,\n            0\n        ])\n        self.points[2, :] = self.origin + numpy.array([\n            self.axis_x[1] * numpy.cos(self.angle) - self.axis_y[1] * numpy.sin(self.angle),\n            self.axis_x[1] * numpy.sin(self.angle) + self.axis_y[1] * numpy.cos(self.angle),\n            0,\n            0\n        ])\n        self.points[3, :] = self.origin + numpy.array([\n            self.axis_x[2] * numpy.cos(self.angle) - self.axis_y[2] * numpy.sin(self.angle),\n            self.axis_x[2] * numpy.sin(self.angle) + self.axis_y[2] * numpy.cos(self.angle),\n            0,\n            0\n        ])\n    \n    def to_line_segment(self) -> numpy.ndarray:\n        \"\"\"\n        Converts the parallelogram to a line segment.\n        \"\"\"\n        return numpy.array([\n            self.points[0, :],\n            self.points[1, :]\n        ])\n    \n    def to_ray(self) -> numpy.ndarray:\n        \"\"\"\n        Converts the parallelogram to a ray.\n        \"\"\"\n        return numpy.array([\n            self.points[0, :],\n            self.points[2, :]\n        ])\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\n\"\"\"\n\nfrom math import pi, acos, sqrt"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\n0 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\"\"\") == \"2\"\n\nassert solution(\"\"\"5\n0 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\"\"\") == \"2\"\n\nassert solution(\"\"\"5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\"\"\") == \"2\"\n\nassert solution(\"\"\"5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\"\"\") == \"2\"\n\nassert solution(\"\"\"5\n0 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\"\"\") == \"2\""
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == 2\nassert solution(\"2 0 0\\n0 0 1\\n0 0 1\") == 1\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    x, y, r = map(int, input().split())\n    l.append((x, y, r))\n\nmax_hits = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (l[i][0] - l[j][0]) ** 2 + (l[i][1] - l[j][1]) ** 2 <= l[i][2] ** 2 + l[j][2] ** 2:\n            max_hits += 1\n\nprint(max_hits)"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\n\n\"\"\"\n\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2 3 4 5\\n6 7 8 9\") == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1') == '2'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n0 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1''') == '2'\nprint('Test pass.')"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\") == \"\"\"\nPlot Error\n3 Just A Dream\nYes\nPlot Error\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\"\n\n\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Plot Error\\n3 Just A Dream\\nYes\\nPlot Error\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\"\"\") == \"\"\"Plot Error\n3 Just A Dream\nYes\nPlot Error\"\"\""
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\") == \"Yes\\n3 Just A Dream\\nYes\"\nassert solution(\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\") == \"Plot Error\"\nassert solution(\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\") == \"3 Just A Dream\"\nassert solution(\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\") == \"Plot Error\"\nassert solution(\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\") == \"3 Just A Dream\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\") == \"\"\"\nPlot Error\n3 Just A Dream\nYes\n\"\"\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Plot Error\\n3 Just A Dream\\nYes\"\nassert solution(\"9\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Plot Error\\n3 Just A Dream\\n3 Just A Dream\"\nassert solution(\"1\\nE business_as_usual\\nS 1!bobby_dies\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Plot Error\"\nassert solution(\"5\\nE bobby_dies\\nS 1!bobby_dies\\nE it_goes_on_and_on\\nD 4\\nS 2!bobby_dies it_goes_on_and_on\") == \"5 Just A Dream\"\nassert solution(\"4\\nE bobby_dies\\nS 1!bobby_dies\\nE it_goes_on_and_on\\nD 4\\nS 2!bobby_dies it_goes_on_and_on\") == \"4 Just A Dream\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nD 1\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == '3 Just A Dream'\nassert solution('4\\nE stuff_happens\\nS 1!bobby_dies business_as_usual\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Plot Error'\nassert solution('4\\nE bobby_dies\\nS 1!bobby_dies business_as_usual\\nS 2!bobby_dies it_goes_on_and_on\\n') == '3 Just A Dream'\nassert solution('10\\nE bobby_dies\\nS 1!bobby_dies business_as_usual\\nS 2!bobby_dies it_goes_on_and_on\\n') == '3 Just A Dream'\nassert solution('10\\nE bobby_dies\\nS 1!bobby_dies business_as_usual\\nS 2!bobby_dies it_goes_on_and_on\\n') == '3 Just A Dream'\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Plot Error\"\nassert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"3 Just A Dream\"\nassert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Yes\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        n = int(stdin.readline().strip())\n        events = []\n        scenarios = []\n        for i in range(n):\n            line = stdin.readline().strip()\n            if line[0] == 'E':\n                events.append(line[2:])\n            elif line[0] == 'D':\n                events = events[:int(line[2:])]\n            elif line[0] == 'S':\n                scenarios.append(line[2:].split())\n        \n        for scenario in scenarios:\n            events_in_scenario = [x for x in scenario if x[0]!= '!']\n            events_dict = {x: True for x in events_in_scenario}\n            for event in scenario:\n                if event[0] == '!':\n                    events_dict[event[1:]] = False\n            \n            for event in events:\n                if event not in events_dict:\n                    print('Plot Error')\n                    return\n                elif events_dict[event] is True:\n                    print('Yes')\n                    return\n                \n        print('Plot Error')\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Plot Error\\n3 Just A Dream\\nYes\\nPlot Error\\n\n\n\"\"\"\n\n\nclass PlotError(Exception):\n    pass\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Plot Error\\n3 Just A Dream\\nYes\"\n\"\"\"\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"24 5 8 7\\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\\nUt enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\nconsequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\\neu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa\\nqui officia deserunt mollit anim id est laborum\") == \"\"\"+------------------------+-----------------------------------------------+\n|exercitation ullamco    |    ^    |\n|laboris nisi ut aliquip    |    |    |\n|ex ea commodo consequat    |    X    |    |\n|Duis aute irure dolor in    |    |    |    |\n|reprehenderit in        |    |    |    |    |\n+------------------------+    |    |    |    |    |\n|exercitation ullamco    |    |    |    |    |    |\n|laboris nisi ut aliquip    |    |    |    |    |    |\n|ex ea commodo consequat    |    |    |    |    |    |    |\n|Duis aute irure dolor in    |    |    |    |    |    |    |\n|reprehenderit in        |    |    |    |    |    |    |    |\n+------------------------+    |    |    |    |    |    |    |    |    |\n\"\"\"\n\nprint(\"Successfully Passed!\")\n\n\"\"\"\n--Solution--"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"24 5 8 7\") == \"Lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est laborum\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24 5 8 7\") == \"exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est laborum\"\n\n\"\"\""
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+\\n|exercitation ullamco    |^\\n|laboris nisi ut aliquip |\\n|ex ea commodo consequat |X\\n|Duis aute irure dolor in    |\\n|reprehenderit in        |v\\n+------------------------+\"\n\n-----Hint-----\nMake your program smarter than the ancient writers of the text, and then write a much simpler solution.\n\"\"\"\n\nfrom typing import NamedTuple\n\nclass ViewportSize(NamedTuple):\n    width: int\n    height: int\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+-\\n\"\\\n                                \"|exercitation ullamco    |\\u0332^\\u0332\\u0333    \\u0333\\u0333\\u0333\\u0333\\u0333|\\n\"\\\n                                \"|laboris nisi ut aliquip |\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333|\\u0332\\u0332\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0333\\u0"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"24 5 8 7\\n\"\n                \"Lorem ipsum dolor sit amet consectetur adipisicing elit sed do\\n\"\n                \"eiusmod tempor incididunt ut labore et dolore magna aliqua ut\\n\"\n                \"enim ad minim veniam quis nostrud exercitation ullamco\\n\"\n                \"laboris nisi ut aliquip ex ea commodo consequat Duis aute\\n\"\n                \"irure dolor in reprehenderit in voluptate velit esse cillum\\n\"\n                \"dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat\\n\"\n                \"non proident sunt in culpa qui officia deserunt mollit anim id\\n\"\n                \"est laborum\") == \"\"\"\n+------------------------+\n|exercitation ullamco    |\n|laboris nisi ut aliquip |\n|ex ea commodo consequat |\n|Duis aute irure dolor in|\n|reprehenderit in        |\n+------------------------+\n\"\"\".strip()\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n''') == r'''+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+'''\n\n\nimport os\nimport sys\nimport typing as t\nfrom io import StringIO\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom challenge import solution\n\n\n@pytest.mark.parametrize(\n    (\"args\", \"expectation\"),\n    (\n        ((), r\"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+\"\"\"),\n        ((), r\"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+\"\"\"),\n        ((), r\"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+\"\"\"),\n        ((), r\"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+\"\"\"),\n        ((), r\"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+\"\"\"),\n        ((), r\"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+\"\"\"),\n    ),\n)\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24 5 8 7') == \"\"\"\n+-------------------------+\n|exercitation ullamco    |\n|laboris nisi ut aliquip |\n|ex ea commodo consequat |\n|Duis aute irure dolor in|\n|reprehenderit in        |\n+-------------------------+\n\"\"\"\n\n\"\"\"\nOUTPUT:\n++++++++++\n
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\"\"\") == \\\n\"\"\"+------------------------+\n|exercitation ullamco    |v\n|laboris nisi ut aliquip    | |\n|ex ea commodo consequat    |X|\n|Duis aute irure dolor in    | |\n|reprehenderit in        |v|\n+------------------------+\n\"\"\"\n\nSample Input:\n24 5 8 7\nAs in the above example, the only relevant line of the input is the first:\n\n24 5 8 7\n\"\"\"\n)\nassert solution(\n\"\"\"24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n\"\"\"\n) == \\\n\"\"\"+------------------------+\n|exercitation ullamco    |v\n|laboris nisi ut aliquip    | |\n|ex ea commodo consequat    |X|\n|Duis aute irure dolor in    | |\n|reprehenderit in        |v|\n+------------------------+\n\"\"\"\n\nSample Input:\n3 3 2 4\naba\nbab\ncac\nSample Output:\n+--------+\n|aba    | |\n|bab    | |\n|cac    | |\n+--------+\n\"\"\"\n)\nassert solution(\n\"\"\"3 3 2 4\naba\nbab\ncac\n\"\"\"\n) == \\\n\"\"\"+--------+\n|aba    | |\n|bab    | |\n|cac    | |\n+--------+\n\"\"\"\n\nSample Input:\n5 5 2 4\naabbcc\nbabbcc\nbbbaaa\nbbbaaa\naaabbb\nSample Output:\n+-----------+\n|aabbcc    | |\n|babbcc    | |\n|bbbaaa    | |\n|bbbaaa    | |\n+-----------+\n\"\"\"\n)\nassert solution(\n\"\"\"5 5 2 4\naabbcc\nbabbcc\nbbbaaa\nbbbaaa\naaabbb\n\"\"\"\n) == \\\n\"\"\"+-----------+\n|aabbcc    | |\n|babbcc    | |\n|bbbaaa    | |\n|bbbaaa    | |\n+-----------+\n\"\"\"\n\nSample Input:\n3 3 1 4\nbab\nbb\nac\nSample Output:\n+--------+\n|bab    | |\n|bb    | |\n|ac    | |\n+--------+\n\"\"\"\n)\nassert solution(\n\"\"\"3 3 1 4\nbab\nbb\nac\n\"\"\"\n) == \\\n\"\"\"+--------+\n|bab    | |\n|bb    | |\n|ac    | |\n+--------+\n\"\"\"\n\nSample Input:\n3 3 2 2\nbaba\nbbab\nabab\nSample Output:\n+--------+\n|baba    | |\n|bbab    | |\n|abab    | |\n+--------+\n\"\"\"\n)\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n----Test data----\n3 2 2 4\nHello world\nlorem ipsum\ndolor sit amet\nconsectetur adipisicing elit\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua\nUt enim ad minim veniam quis\nnostrud exercitation ullamco\nlaboris nisi ut aliquip ex\nea commodo consequat Duis aute irure\ndolor in reprehenderit in voluptate\nvelit esse cillum dolore eu fugiat\nnulla pariatur Excepteur sint\noccaecat cupidatat non proident\nsunt in culpa qui officia deserunt\nmollit anim id est laborum\n\n1 1 3 2\nHello world\nlorem ipsum\ndolor sit amet\nconsectetur adipisicing elit\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua\nUt enim ad minim veniam quis\nnostrud exercitation ullamco\nlaboris nisi ut aliquip ex\nea commodo consequat Duis aute irure\ndolor in reprehenderit in voluptate\nvelit esse cillum dolore eu fugiat\nnulla pariatur Excepteur sint\noccaecat cupidatat non proident\nsunt in culpa qui officia deserunt\nmollit anim id est laborum\n\n0 1 1 1\nHello world\nlorem ipsum\ndolor sit amet\nconsectetur adipisicing elit\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua\nUt enim ad minim veniam quis\nnostrud exercitation ullamco\nlaboris nisi ut aliquip ex\nea commodo consequat Duis aute irure\ndolor in reprehenderit in voluptate\nvelit esse cillum dolore eu fugiat\nnulla pariatur Excepteur sint\noccaecat cupidatat non proident\nsunt in culpa qui officia deserunt\nmollit anim id est laborum\n\n1 0 1 0\nHello world\nlorem ipsum\ndolor sit amet\nconsectetur adipisicing elit\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua\nUt enim ad minim veniam quis\nnostrud exercitation ullamco\nlaboris nisi ut aliquip ex\nea commodo consequat Duis aute irure\ndolor in reprehenderit in voluptate\nvelit esse cillum dolore eu fugiat\nnulla pariatur Excepteur sint\noccaecat cupidatat non proident\nsunt in culpa qui officia deserunt\nmollit anim id est laborum\n\n3 1 2 1\nHello world\nlorem ipsum\ndolor sit amet\nconsectetur adipisicing elit\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua\nUt enim ad minim veniam quis\nnostrud exercitation ullamco\nlaboris nisi ut aliquip ex\nea commodo consequat Duis aute irure\ndolor in reprehenderit in voluptate\nvelit esse cillum dolore eu fugiat\nnulla pariatur Excepteur sint\noccaecat cupidatat non proident\nsunt in culpa qui officia deserunt\nmollit anim id est laborum\n\n0 0 0 0\nHello world\nlorem ipsum\ndolor sit amet\nconsectetur adipisicing elit\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua\nUt enim ad minim veniam quis\nnostrud exercitation ullamco\nlaboris nisi ut aliquip ex\nea commodo consequat Duis aute irure\ndolor in reprehe"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'4 10'\n) == 'possible'\n\nassert solution(\n'4 10'\n) == 'possible'\n\nassert solution(\n'3 10'\n) == 'impossible'\n\nassert solution(\n'4 10'\n) == 'possible'\n\nassert solution(\n'4 10'\n) == 'possible'"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\n\nimport sys\nassert solution(sys.stdin.read()) == 'possible'\n\"\"\"\n\nfrom collections import deque\n\nn, l = map(int, input().split())\npaths = [tuple(map(int, input().split())) for _ in range(n)]\nadj = [[] for _ in range(n)]\n\nfor u, v, p in paths:\n    adj[u - 1].append((v - 1, p))\n    adj[v - 1].append((u - 1, p))\n\nvisited = [False] * n\n\nq = deque([0])\nvisited[0] = True\nwhile q:\n    u = q.popleft()\n    for v, p in adj[u]:\n        if not visited[v]:\n            visited[v] = True\n            q.append(v)\n\nprint('possible' if visited[n - 1] else 'impossible')\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"possible\"\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == 'possible'\n\"\"\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_result\n\n------Hints------\n* Try to draw out a simple picture about the problem.\n\n'''\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == 'possible'\nassert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == 'impossible'\nassert solution(\"2 3\\n0 1\\n1 0\") == 'impossible'\nassert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == 'impossible'\nassert solution(\"5 10\\n0 1 2 3 4\\n1 0 2 3 4\\n2 0 1 3 4\\n3 0 1 2 4\\n4 0 1 2 3\") == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == 'possible'\n\"\"\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\n\"\"\""
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\") == \"possible\"\nassert solution(\"4 11\") == \"impossible\"\nassert solution(\"4 5\") == \"impossible\"\nassert solution(\"4 4\") == \"impossible\"\nassert solution(\"1 1\") == \"possible\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.0'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 1 1\n1\n2''') == '1.00000000'\nassert solution('''4 1 3\n3 2 1\n3\n1 1''') == '1.5'\nassert solution('''5 1 4\n1\n2\n3\n4\n5\n2\n1\n4\n3\n5''') == '2.0'\nassert solution('''50 1 5\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.0'\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(float(input()))\n\nprint(solution(input()))\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.00000000'\n\"\"\"\n\n\"\"\"\n@spec\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.0'"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1\\n1\\n2') == 1.0\n\nSample Input:\n3 5 3\n1 2 1\n1 2 1\n1 3 3\nSample Output:\n4.0\nassert solution('3 5 3\\n1 2 1\\n1 2 1\\n1 3 3') == 4.0\n\nSample Input:\n3 5 3\n1 2 3\n1 2 3\n1 2 3\nSample Output:\n2.85714286\nassert solution('3 5 3\\n1 2 3\\n1 2 3\\n1 2 3') == 2.85714286\n\nSample Input:\n3 5 3\n1 2 3\n1 2 3\n1 2 3\nSample Output:\n2.66666666\nassert solution('3 5 3\\n1 2 3\\n1 2 3\\n1 2 3') == 2.66666666\n\nSample Input:\n3 5 3\n1 1 1\n1 2 3\n1 2 3\nSample Output:\n0.5\nassert solution('3 5 3\\n1 1 1\\n1 2 3\\n1 2 3') == 0.5\n\nSample Input:\n3 5 3\n1 1 1\n1 1 1\n1 1 1\nSample Output:\n0.25\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1'\nassert solution('4 3 2\\n2 2 1\\n2 2 2') == '2'\nassert solution('10 5 10\\n1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '2'\nassert solution('10 10 10\\n1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '0'\nassert solution('1 1 1\\n1\\n1') == '0.5'\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == \"1.00000000\"\nassert solution(\"2 1 1\\n2\\n1\") == \"1.00000000\"\nassert solution(\"4 4 2\\n2\\n1\\n4\\n1\") == \"0.88888888\"\n\"\"\"\n\n\nimport collections\n\n\nclass Solution:\n    def __init__(self):\n        self.balls = []\n\n    def solve(self, stdin: str) -> str:\n        balls = stdin.split(\"\\n\")\n        self.balls = list(map(int, balls[0].split()))\n        self.balls.sort()\n\n        self.d = collections.defaultdict(int)\n        for ball in balls[1].split():\n            self.d[int(ball)] = 1\n\n        current = 0\n        found = False\n\n        for i in range(len(self.balls) - 1):\n            if self.balls[i] > current:\n                current = self.balls[i]\n                found = True\n\n            if found:\n                if self.balls[i] in self.d:\n                    current += 1\n                    found = False\n\n        print(current / (len(self.balls) / 2))\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1\\n1\\n2') == 1.0"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 3 3 2') == '2 1 3'\n\"\"\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 1 3 2') == '2'\nassert solution('5 4 3 3 2') == '2'\nassert solution('5 5 5 5 5') == '5'\nassert solution('1 2 3 4 5') == '1'\nassert solution('5 4 3 2 1') == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"2\\n1\\n3\"\nprint(\"OK\")\n"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 3 2\") == \"2 1 3\"\nassert solution(\"5 4 3 3 2\", \"1 2\") == \"1 1\""
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"2\\n1\\n3\"\n\"\"\""
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"\"\"2\n1\n3\n\"\"\""
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == e"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n4 3 3 2\n3\n1 2\n1 1\n2 4''') == '''2\n1\n3'''\n"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4 3 3 2') == '2'\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 3 3 1 1 1') == '0'\nassert solution('3 3 4 1') == '3'\n\"\"\""
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n4 3 3 2''') == '2'\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2\\n1 2\") == \"never meet\"\nassert solution(\"1 2\\n1 2\") == \"never meet\"\nassert solution(\"0 0\\n1 2\") == \"0\"\nassert solution(\"0 2\\n0 1\") == \"never meet\"\nassert solution(\"1 2\\n1 2\") == \"never meet\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1,2\\n0,2') == 'never meet'\nassert solution('2,3\\n0,1') == 'never meet'\nassert solution('1,2\\n0,2\\n2,1') == 'never meet'\nassert solution('1,2\\n0,2\\n2,1\\n1,0') == 'never meet'\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"never meet\"\n\n\"\"\"\nimport networkx as nx\nimport random\n\nclass MTR:\n    def __init__(self):\n        self.graph = nx.Graph()\n        self.mtr_stations = {}\n        self.stations_neighbours = {}\n\n    def load_file(self, filename):\n        with open(filename) as f:\n            line = f.readline()\n            num_stations, num_edges = list(map(int, line.strip().split()))\n            for i in range(num_stations):\n                self.mtr_stations[i] = set()\n            for i in range(num_edges):\n                line = f.readline()\n                u, v = list(map(int, line.strip().split()))\n                self.graph.add_edge(u, v)\n                self.mtr_stations[u].add(v)\n                self.mtr_stations[v].add(u)\n\n        for station in self.mtr_stations.keys():\n            for neighbour in self.mtr_stations[station]:\n                self.stations_neighbours[station] = self.stations_neighbours.get(station, set())\n                self.stations_neighbours[station].add(neighbour)\n\n    def generate_random_path(self, start_node, path_length):\n        path = [start_node]\n        available_nodes = set(self.mtr_stations.keys())\n        available_nodes.remove(start_node)\n        while len(path) < path_length:\n            current_node = path[-1]\n            if not available_nodes:\n                return []\n            if len(available_nodes) == 1:\n                path.append(list(available_nodes)[0])\n                available_nodes = set()\n                continue\n            next_node = random.choice(list(available_nodes))\n            if next_node in self.stations_neighbours[current_node]:\n                available_nodes.remove(next_node)\n            path.append(next_node)\n        return path\n\n    def test_path(self, path, start_node):\n        for i, node in enumerate(path):\n            if node == start_node:\n                continue\n            if i == 0:\n                if node in self.mtr_stations[start_node]:\n                    return True\n                return False\n            prev_node = path[i-1]\n            if node not in self.mtr_stations[prev_node]:\n                return False\n        return True\n\n    def test_path_and_time(self, path, start_node):\n        path_length = len(path)\n        total_time = 0\n        for i, node in enumerate(path):\n            if node == start_node:\n                continue\n            if i == 0:\n                total_time += 10\n            else:\n                prev_node = path[i-1]\n                if node in self.mtr_stations[prev_node]:\n                    total_time += 1\n                else:\n                    total_time += 10\n        if total_time < 60:\n            return total_time\n        else:\n            return None"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == 'never meet'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == 'never meet'\n\n\"\"\"\n\nimport random\nimport sys\n\nsys.setrecursionlimit(50000)\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'never meet'\nassert solution('123\\n1 2\\n2 3') == 'never meet'\nassert solution('123\\n1 2\\n0 3') == 'never meet'\nassert solution('123\\n1 2\\n3 0') == 'never meet'\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"never meet\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    n, m = line.split()\n    n = int(n)\n    m = int(m)\n    adj = {}\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u] = adj.get(u, []) + [v]\n        adj[v] = adj.get(v, []) + [u]\n    s, t = map(int, input().split())\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 1\\n0 2\\n0 3\\n1 2\") == \"never meet\"\nassert solution(\"4 2\\n0 1\\n0 2\\n0 3\\n1 2\\n1 3\") == \"never meet\"\nassert solution(\"4 2\\n0 1\\n0 2\\n0 3\\n1 2\\n2 3\") == \"never meet\"\n\n\"\"\""
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"1\"\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    def solve(self, n: int, m: int, u: int, v: int, s: int, t: int):\n        \n        def find_neighbours(graph: list, node: int):\n            neighbours = []\n            for i in range(0, n):\n                if graph[node][i] == 1:\n                    neighbours.append(i)\n            return neighbours\n\n        def is_path_exists(graph: list, source: int, destination: int, visited: list) -> bool:\n            if source == destination:\n                return True\n\n            if len(visited) == n:\n                return False\n            \n            for neighbour in find_neighbours(graph, source):\n                if neighbour not in visited:\n                    visited.append(neighbour)\n                    if is_path_exists(graph, neighbour, destination, visited):\n                        return True\n                    visited.pop()\n            return False\n        \n        def find_path(graph: list, source: int, destination: int, visited: list, path: list) -> list:\n            if source == destination:\n                path.append(source)\n                return path\n            \n            if len(visited) == n:\n                return []\n\n            for neighbour in find_neighbours(graph, source):\n                if neighbour not in visited:\n                    visited.append(neighbour)\n                    path.append(neighbour)\n                    if find_path(graph, neighbour, destination, visited, path):\n                        return path\n                    visited.pop()\n                    path.pop()\n            return []\n\n        def distance(graph: list, source: int, destination: int) -> int:\n            source_path = find_path(graph, source, destination, [], [])\n            return len(source_path)\n\n        count = 0\n        for i in range(0, n):\n            for j in range(i, n):\n                if i!= j and i!= s and j!= s:\n                    count += 1\n                    if is_path_exists(u, j, v, [s]):\n                        distance_of_path = distance(u, s, j) + distance(v, j, t)\n                        distance_of_path -= 1\n                        if distance_of_path % 2 == 0:\n                            count -= 1\n        if count == 0:\n            return \"never meet\"\n        else:\n            return math.ceil(count / 2)\n            "
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == '1'\n\"\"\"\n\nfrom typing import List, Optional\nfrom itertools import permutations\n\n\nclass Station:\n    def __init__(self, index: int):\n        self.index = index\n        self.neighbours = []\n\n    def add_neighbour(self, index: int) -> None:\n        self.neighbours.append(index)\n\n    def __str__(self) -> str:\n        return f'{self.index} {self.neighbours}'\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 2\\n2\\n1\") == \"1\\n\"\nassert solution(\"1 4 1\\n1\\n1\") == \"1\\n\"\nassert solution(\"2 3 2\\n3\\n1\") == \"1\\n\"\nassert solution(\"3 10 1\\n5\\n1\") == \"1\\n\"\nassert solution(\"5 10 1\\n5\\n1\") == \"1\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 2\\n') == '14500000001'"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4 2\\n') == '14500000001'\nassert solution('5 4 2\\n') == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\n\"\"\"\n\nR, C, K = map(int, input().split())"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution(\"4 7 3\") == \"5\"\nassert solution(\"2 6 4\") == \"8\"\nassert solution(\"7 3 3\") == \"37\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\\n\") == \"14500000001\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\""
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 4 2\n''') == '14500000001'\n\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n-----Problem-----\n\"The power to arrest\u2013to deprive a citizen of liberty\u2013must be used fairly, responsibly, and without bias.\" \u2013 Loretta Lynch\n\nDue to desperation caused by the global financial crisis, you, left with no other options, decided to rob a bank to survive. Unfortunately, while you were able to escape with a small fortune, the city\u2019s police is now out in full force trying to hunt you down.\n\nThe city can be represented as a grid with $R$ rows and $C$ columns. Each block in the city is represented as a cell in this grid. The city has very strict border controls and has shut down all its borders for $24$ hours after the bank robbery to find and arrest you.\n\nYou have intercepted the officer\u2019s calls and have discovered that the police force intends to, for the next $24$ hours, search all blocks within $K$ blocks of their current location (that is, all blocks that can be reached by traveling a total of at most $K$ blocks horizontally or vertically). Unfortunately, you don\u2019t know their current location, so you can only assume that they are at some random block, each block with equal probability.\n\nYou hence intend to hide at a random location in the city. You will choose a block uniformly at random and hide there, hoping that it is not a block the police will search. Since it is impossible for the police to know which block you are hiding, they will in fact also be hiding in a block that is searched every $24$ hours.\n\nYou can assume that, unfortunately, the police are very thorough in their search and they will definitely catch you if they search the block you are in. However, if the $24$ hours elapse without the block you are in being searched, you will surely be able to escape as the borders are reopened.\n\nWhat is the probability that you will evade capture?\n\n-----Input-----\nThe first and only line of input contains three integers, $R$, $C$ ($1 \\leq R, C \\leq 10^{11}$) and $K$ ($1 \\leq K \\leq 2\\cdot 10^{11}$), the number of rows in the city, the number of columns in the city and the number of blocks the police will search, respectively.\n\n-----Output-----\nIt can be shown that the probability of evading capture can be uniquely represented as an irreducible fraction $p/q$.\n\nOutput a single integer on a line by itself, containing the remainder after dividing $p\\cdot q^{-1}$ by $10^{11}+3$, where $q^{-1}$ denotes the modular multiplicative inverse of $q$ with respect to the modulus $10^{11}+3$.\n\nThe input will be such that $q^{-1}$ always exists.\n\n-----Examples-----\nSample Input:\n5 4 2\nSample Output:\n14500000001\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 4 2\n''') == '14500000001'\n\n\"\"\""
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2'\nassert solution('4\\n2 1\\n3 2\\n1 5') == '0\\n0\\n0\\n0'\nassert solution('3\\n2 2\\n1 3') == '0\\n0\\n1'\n\"\"\""
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n1 4\n3 7\n1 6\n2 6''') == '''0\n1\n1\n2'''\n\nassert solution('''6\n1 4\n2 5\n3 6\n4 7\n5 8\n6 8''') == '''0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n2\n2\n2\n2\n2\n2\n3\n3\n3\n4\n4\n4\n4\n4\n4\n4\n5\n5\n5\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '0\\n1'\nassert solution('1 2\\n3 4\\n5 6') == '0\\n1\\n0'\nassert solution('1 2\\n3 4\\n5 6\\n7 8') == '0\\n1\\n1\\n1\\n0'\n\nimport sys\nlines = [line.strip() for line in sys.stdin.readlines()]\nn = int(lines[0])\nsegments = [(int(s) for s in line.split()) for line in lines[1:]]\n\nsegments.sort()\n\ncount = 0\nfor x1, x2, h in segments:\n    h += count\n    print(h)\n    count = h\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\nassert solution('4\\n') == ''\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2'\nassert solution('5\\n2 1\\n2 5\\n3 2\\n3 5\\n4 4\\n4 2') == '0\\n1\\n1\\n2\\n2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == '0\\n1\\n1\\n2'\nprint(solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\"))\n\n-----\nSample Input:\n1\n1 2\nSample Output:\n0\n\"\"\"\nimport sys\nfrom typing import List\n\n\"\"\"\n\u5730\u7403\u4e0a\u6240\u6709\u53ef\u80fd\u7684\u8449\u5b50\u7684\u9577\u5ea6\u70ba1~100000\uff0c\u5176\u4e2d1\u4ee3\u8868\u7b2c\u4e00\u8f2a\u7684\u7b2c\u4e00\u8f2a\n\u5730\u7403\u4e0a\u7684\u8449\u5b50\u6bcf\u4e00\u6bb5\u4e4b\u9593\u90fd\u6709\u4e00\u500bX\u8ef8\u70ba\u5de6\u908a\u503c\u5230\u53f3\u908a\u503c\uff0c\u56e0\u6b64\u9019\u500b\u6b63\u6392\u5e8f\u6392\u5217\n\n\u8f38\u5165: \u8fc4\u4eca\u4e3a\u6b62\u6709\u5e7e\u5929\uff0c\u7531\u65bc\u7b2c\u4e00\u5929\u5c31\u958b\u59cb\u6709\u8449\u5b50\uff0c\u6240\u4ee5\u8f38\u5165\u7b2c\u4e00\u884c\u70ba0\uff0c\u63a5\u8457\u7b2c\u4e8c\u884c\u70ba\u8449\u5b50\u9577\u5ea6\n\n\u8f38\u51fa: \u56e0\u70ba\u662f\u6bcf\u5929\u6703\u751f\u9577\u4e00\u9897\u8449\u5b50\uff0c\u6240\u4ee5\u6703\u7b49\u5230\u6bcf\u4e00\u5929\u7d50\u675f\u6642\uff0c\u6240\u4ee5\u7b2c\u4e00\u5929\u5c31\u56de\u50b30\uff0c\u63a5\u8457\u7b2c\u4e8c\u5929\u5c31\u56de\u50b31\uff0c...\u7b2cn\u5929\u5c31\u56de\u50b3n-1\n\"\"\"\n\nclass Node:\n    def __init__(self, l, r, h):\n        self.l = l\n        self.r = r\n        self.h = h\n\n\nclass Tree:\n    def __init__(self, root):\n        self.root = root\n\n    def range(self, l, r):\n        return self.root.l <= l <= r <= self.root.r\n\n    def insert(self, node):\n        if self.root.h > node.h:\n            if self.range(self.root.l, self.root.r):\n                self.root.l = min(self.root.l, node.l)\n                self.root.r = max(self.root.r, node.r)\n            else:\n                self.root = Node(self.root.l, self.root.r, node.h)\n        else:\n            if self.range(node.l, node.r):\n                self.root.l = min(self.root.l, node.l)\n                self.root.r = max(self.root.r, node.r)\n            else:\n                self.root = Node(node.l, node.r, self.root.h)\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == \"2\\n1\\n1\\n2\"\n\n-----Solution-----\n\nimport re\n\npat = re.compile(r'(?P<x>\\d+)\\s+(?P<l>\\d+)\\s+(?P<r>\\d+)\\s+(?P<h>\\d+)')"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == \"0\\n1\\n1\\n2\\n\"\nprint(solution(\"1\\n6\\n4\\n8\\n2\\n9\\n2\\n3\\n8\\n6\\n7\\n6\\n8\\n4\\n5\\n9\\n1\\n6\\n7\\n4\\n9\\n5\\n7\\n5\\n2\\n9\\n4\\n8\\n7\\n9\\n6\\n5\\n3\\n9\\n1\\n6\\n5\\n7\\n8\\n4\\n3\\n3\\n7\\n8\\n3\\n4\\n4\\n9\\n2\\n4\\n1\\n7\\n6\\n2\\n1\\n8\\n6\\n7\\n3\\n5\\n8\\n1\\n7\\n6\\n2\\n6\\n4\\n8\\n5\\n7\\n2\\n6\\n5\\n4\\n1\\n4\\n3\\n5\\n8\\n5\\n5\\n1\\n9\\n8\\n9\\n3\\n7\\n6\\n2\\n1\\n7\\n7\\n8\\n9\\n9\\n8\\n4\\n6\\n1\\n3\\n7\\n8\\n9\\n5\\n1\\n7\\n8\\n9\\n8\\n2\\n8\\n3\\n1\\n8\\n4\\n4\\n3\\n1\\n7\\n7\\n8\\n4\\n7\\n7\\n9\\n6\\n5\\n7\\n7\\n8\\n8\\n3\\n6\\n9\\n5\\n7\\n8\\n6\\n7\\n6\\n8\\n8\\n9\\n7\\n1\\n6\\n7\\n9\\n4\\n4\\n5\\n3\\n2\\n8\\n5\\n5\\n6\\n8\\n9\\n1\\n6\\n6\\n5\\n6\\n7\\n1\\n8\\n3\\n5\\n5\\n7\\n1\\n4\\n2\\n1\\n5\\n4\\n7\\n9\\n8\\n2\\n8\\n7\\n1\\n6\\n5\\n2\\n7\\n7\\n9\\n3\\n9\\n4\\n8\\n9\\n5\\n9\\n6\\n2\\n6\\n8\\n3\\n5\\n6\\n6\\n6\\n4\\n5\\n7\\n9\\n7\\n7\\n1\\n8\\n5\\n6\\n7\\n4\\n6\\n8\\n7\\n5\\n6\\n8\\n2\\n1\\n9\\n3\\n3\\n5\\n8\\n5\\n6\\n6\\n3\\n4\\n4\\n7\\n9\\n1\\n3\\n6\\n2\\n5\\n7\\n5\\n1\\n7\\n3\\n6\\n7\\n9\\n6\\n7\\n2\\n4\\n9\\n9\\n2\\n4\\n6\\n8\\n2\\n5\\n2\\n3\\n4\\n6\\n8\\n9\\n1\\n6\\n5\\n2\\n8\\n6\\n4\\n5\\n5\\n7\\n3\\n3\\n6\\n3\\n3\\n8\\n7\\n4\\n9\\n3\\n3\\n3\\n5\\n2\\n2\\n4\\n5\\n9\\n8\\n5\\n6\\n1\\n6\\n2\\n9\\n5\\n5\\n7\\n2\\n1\\n3\\n7\\n8\\n7\\n8\\n6\\n5\\n1\\n3\\n3\\n8\\n9\\n6\\n2\\n9\\n9\\n9\\n9\\n6\\n2\\n7\\n8\\n1\\n8\\n8\\n3\\n9\\n4\\n8\\n2\\n4\\n6\\n8\\n6\\n5\\n8\\n7\\n6\\n6\\n7\\n8\\n8\\n3\\n4\\n8\\n5\\n3\\n6\\n5\\n2\\n5\\n4\\n1\\n5\\n6\\n6\\n3\\n4\\n9\\n7\\n6\\n4\\n6\\n8\\n9\\n5\\n2\\n8\\n6\\n7\\n6\\n6\\n3\\n6\\n9\\n7\\n7\\n5\\n6\\n4\\n5\\n7\\n9\\n7\\n8\\n7\\n6\\n3\\n4\\n2\\n4\\n2\\n8\\n5\\n9\\n6\\n8\\n5\\n1\\n8\\n7\\n5\\n2\\n8\\n5\\n7\\n8\\n8\\n3\\n8\\n7\\n1\\n2\\n8\\n5\\n5\\n5\\n4\\n2\\n8\\n1\\n7\\n1\\n9\\n3\\n6\\n1\\n7\\n3\\n8\\n3\\n1\\n8\\n7\\n4\\n1\\n7\\n6\\n6\\n7\\n8\\n2\\n5\\n2\\n7\\n6\\n4\\n6\\n8\\n3\\n7\\n3\\n5\\n6\\n7\\n4\\n1\\n7\\n4\\n8\\n3\\n4\\n4\\n5\\n7\\n5\\n6\\n5\\n7\\n1\\n5\\n4\\n4\\n5\\n2\\n4\\n3\\n7\\n5\\n4\\n1\\n2\\n1\\n3\\n6\\n7\\n4\\n2\\n3\\n5\\n2\\n7\\n1\\n7\\n2\\n4\\n8\\n5\\n9\\n5\\n8\\n9\\n7\\n7\\n3\\n5\\n6\\n4\\n3\\n7\\n1\\n6\\n2\\n8\\n8\\n3\\n2\\n1\\n8\\n6\\n4\\n1\\n2\\n1\\n1\\n5\\n6\\n9\\n3\\n6\\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == \"0\\n1\\n1\\n2\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\""
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"1050\"\n\"\"\"\n\nfrom collections import Counter, defaultdict, deque\nfrom math import ceil\nfrom sys import stdin\n\nstdin = stdin.read()\ndata = stdin.split('\\n')"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n'''\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\n\nassert solution('''15 1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n3\n1 4 50\n3 5 50\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1''') == '4100'\n\nassert solution('''15 1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1''') == '4100'\n\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1''') == '4200'\n\nassert solution('''15 1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1\n1 2 10\n2 3 20\n4 5 50\n2\n1 4 30\n3 5 30\n1''') == '4200'"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n\nprint(solution(input()))"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9') == '5.25'\n\nassert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9') == '5.25'\n\nassert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9') == '5.25'\n\nassert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9') == '5.25'\n\nassert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9') == '5.25'"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '5.25'\n\n\"\"\""
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\") == \"5.250000000\"\n\"\"\"\n\n\"\"\"\nNaive solution.\n\nO(n^3)\n\"\"\""
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 2\n1 8\n6 5\n2 5\n2 9\n7 13\"\"\") == '5.25'\nprint(solution(\"\"\"4 2\n1 8\n6 5\n2 5\n2 9\n7 13\"\"\"))\n\nassert solution(\"\"\"4 1\n1 5\n4 4\n3 1\n7 7\"\"\") == '4'\nprint(solution(\"\"\"4 1\n1 5\n4 4\n3 1\n7 7\"\"\"))\n\nassert solution(\"\"\"1 1\n1 1\n1 1\n1 1\n1 1\"\"\") == '1'\nprint(solution(\"\"\"1 1\n1 1\n1 1\n1 1\n1 1\"\"\"))\n\nassert solution(\"\"\"4 5\n1 1\n1 1\n2 1\n2 2\n1 1\n2 2\n2 1\n2 2\n3 2\n2 2\n2 2\n1 1\n1 1\n1 1\n3 1\n1 1\n1 1\n2 2\n3 1\n2 1\n3 2\n3 1\n1 1\n3 1\n2 2\n2 2\n1 1\n1 1\n3 2\n2 1\n1 1\n1 1\n3 1\n1 1\n1 1\n1 1\n1 1\n2 2\n3 2\n2 2\n2 2\n2 2\n1 1\n3 1\n1 1\n2 1\n2 1\n2 2\n3 1\n1 1\n2 2\n1 1\n1 1\n2 1\n2 1\n2 1\n3 1\n1 1\n2 1\n2 1\n2 1\n2 1\n1 1\n3 2\n2 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n3 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 1\n2 1\n1 1\n2 1\n2 1\n2 2\n1 1\n2 1\n1 1\n2 1\n2 1\n1 1\n2 1\n2 1\n2 1\n2 2\n1 1\n2 1\n1 1\n1 1\n2 1\n2 1\n2 1\n2 2\n3 1\n2 1\n1 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n3 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 1\n2 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n2 1\n1 1\n2 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 2\n1 1\n1 1\n2 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 2\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n2 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n2 1\n1 1\n2 1\n1 1\n1 1\n2 1\n1 1\n2 2\n1 1\n2 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '2.5'\nassert solution('1 2\\n3 4\\n6 7') == '2.5'\nassert solution('1 2\\n3 4\\n6 7\\n10 11') == '2.5'\nassert solution('1 2\\n3 4\\n6 7\\n10 11\\n14 15') == '2.5'\n"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\\n') == '5.250000000'\n\n---Problem 6\nThe average bus service time is 20 minutes. There are 100 passengers on the bus at the beginning of the day, and each passenger arrives at the bus station after a random time between 10 minutes and 15 minutes. Then 10 more people arrive after the bus has left. What is the average waiting time for the first 100 passengers and what is the probability that they wait less than 10 minutes?\n\n-----Input-----\nThe input consists of two lines. On the first line, the number of passengers on the bus at the beginning of the day is given. On the second line, 10 random values between 10 and 15 are given.\n\n-----Output-----\nThe output must consist of one line with the average waiting time for the first 100 passengers and one line with the probability that they wait less than 10 minutes.\n\n-----Examples-----\nSample Input:\n100\n10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100\nSample Output:\n12.22222222\n0.2"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\\n\") == \"5.25\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\") == \"5.25\"\nprint(solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\"))\n\n-----Test Case-----\n\"7 1\\n1 5\\n1 8\\n5 9\\n6 9\\n8 10\\n10 12\\n11 12\\n12 15\\n15 19\"\n\"6 7\\n1 5\\n1 8\\n5 9\\n6 9\\n8 10\\n10 12\\n11 12\\n12 15\\n15 19\"\n\"8 1\\n1 5\\n1 8\\n5 9\\n6 9\\n8 10\\n10 12\\n11 12\\n12 15\\n15 19\"\n\"9 1\\n1 5\\n1 8\\n5 9\\n6 9\\n8 10\\n10 12\\n11 12\\n12 15\\n15 19\"\n\"7 1\\n1 5\\n1 8\\n5 9\\n6 9\\n8 10\\n10 12\\n11 12\\n12 15\\n15 19\"\n\"10 2\\n2 4\\n3 4\\n4 5\\n5 7\\n6 7\\n7 9\\n8 10\\n9 11\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"11 3\\n3 4\\n4 5\\n5 7\\n6 7\\n7 9\\n8 10\\n9 11\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"12 4\\n4 5\\n5 7\\n6 7\\n7 9\\n8 10\\n9 11\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"13 5\\n5 7\\n6 7\\n7 9\\n8 10\\n9 11\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"14 6\\n6 7\\n7 9\\n8 10\\n9 11\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"15 7\\n7 9\\n8 10\\n9 11\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"16 8\\n8 10\\n9 11\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"17 9\\n9 11\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"18 10\\n10 11\\n11 12\\n12 15\\n15 19\"\n\"19 11\\n11 12\\n12 15\\n15 19\"\n\"20 12\\n12 15\\n15 19\"\n\"21 13\\n13 15\\n15 19\"\n\"22 14\\n14 15\\n15 19\"\n\"23 15\\n15 19\"\n\"24 16\\n16 19\"\n\"25 17\\n17 19\"\n\"26 18\\n18 19\"\n\"27 19\\n19 20\"\n\"28 20\\n20 20\"\n\"29 20\\n20 20\"\n\"30 21\\n21 20\\n20 20\"\n\"31 21\\n21 20\\n20 20\"\n\"32 21\\n21 20\\n20 20\"\n\"33 21\\n21 20\\n20 20\"\n\"34 21\\n21 20\\n20 20\"\n\"35 21\\n21 20\\n20 20\"\n\"36 21\\n21 20\\n20 20\"\n\"37 21\\n21 20\\n20 20\"\n\"38 21\\n21 20\\n20 20\"\n\"39 21\\n21 20\\n20 20\"\n\"40 21\\n21 20\\n20 20\"\n\"41 21\\n21 20\\n20 20\"\n\"42 21\\n21 20\\n20 20\"\n\"43 21\\n21 20\\n20 20\"\n\"44 21\\n21 20\\n20 20\"\n\"45 21\\n21 20\\n20 20\"\n\"46 21\\n21 20\\n20 20\"\n\"47 21\\n21 20\\n20 20\"\n\"48 21\\n21 20\\n20 20\"\n\"49 21\\n21 20\\n20 20\"\n\"50 21\\n21 20\\n20 20\"\n\"51 21\\n21 20\\n20 20\"\n\"52 21\\n21 20\\n20 20\"\n\"53 21\\n21 20\\n20 20\"\n\"54 21\\n21 20\\n20 20\"\n\"55 21\\n21 20\\n20 20\"\n\"56 21\\n21 20\\n20 20\"\n\"57 21\\n21 20\\n20 20\"\n\"58 21\\n21 20\\n20 20\"\n\"59 21\\n21 20\\n20 20\"\n\"60 21\\n21 20\\n20 20\"\n\"61 21\\n21 20\\n20 20\"\n\"62 21\\n21 20\\n20 20\"\n\"63 21\\n21 20\\n20 20\"\n\"64 21\\n21 20\\n20 20\"\n\"65 21\\n21 20\\n20 20\"\n\"66 21\\n21 20\\n20 20\"\n\"67 21\\n21 20\\n20 20\"\n\"68 21\\n21 20\\n20 20\"\n\"69 21\\n21 20\\n20 20\"\n\"70 21\\n21 20\\n20 20\"\n\"71 21\\n21 20\\n20 20\"\n\"72 21\\n21 20\\n20 20\"\n\"73 21\\n21 20\\n20 20\"\n\"74 21\\n21 20\\n20 20\"\n\"75 21\\n21 20\\n20 20\"\n\"76 21\\n21 20\\n20 20\"\n\"77 21\\n21 20\\n20 20\"\n\"78 21\\n21 20\\n20 20\"\n\"79 21\\n21 20\\n20 20\"\n\"80 21\\n21 20\\n20 20\"\n\"81 21\\n21 20\\n20 20\"\n\"82 21\\n21 20\\n20 20\"\n\"83 21\\n21 20\\n20 20\"\n\"84 21\\n21 20\\n20 20\"\n\"85 21\\n21 20\\n20 20\"\n\"86 21\\n21 20\\n20 20\"\n\"87 21\\n21 20\\n20 20\"\n\"88 21\\n21 20\\n20 20\"\n\"89 21\\n21 20\\n20 20\"\n\"90 21\\n21 20\\n"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\") == \"5.25\"\n\n\"\"\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\") == \"5.25\"\n\"\"\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(print(input()))"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2''') == '''7\n2\n2\n0\n4'''\n\nprint('Hooray!')\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n2\\n0\\n4\""
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n1 1 2 3 1 2 1\\n1 3 1 2 3\") == \"3\"\n\nsolution(stdin)\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 1 2 1 1') == '7'\n\nassert solution('1 2 3 1 2 1 1') == '7'\nassert solution('1 2 3 1 2 1 1') == '7'\nassert solution('1 2 3 1 2 1 1') == '7'\nassert solution('1 2 3 1 2 1 1') == '7'\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n1 2 3 1 2 1 1''') == '7\n\n\"\"\"\nThe idea is to maintain two arrays for the longest prefixes (can be thought of as arrays of pointers) for the integers from $a_1$ to $a_i$ and from $a_i+1$ to $a_n$ respectively, and for each query, find the length of the longest prefix that contains only integers in $B$.\n\nThe solution is straightforward: keep track of the length of the longest prefix that contains only integers from $B$ in $prefix[i]$, and replace it if the prefix is longer. Then determine the length of the longest prefix that contains only integers from $B$ in $prefix[i+1]$.\n\"\"\"\n\nimport collections\nimport math\nimport sys"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2') == '7\\n2\\n2\\n0\\n4'\nassert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2') == '7\\n2\\n2\\n0\\n4'\nassert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2') == '7\\n2\\n2\\n0\\n4'\n\"\"\""
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '7\\n1 2 3 1 2 1 1'\n) == '7\\n2\\n2\\n0\\n4\\n'\n\nassert solution(\n    '10\\n9 2 3 4 5 1 2 3 4'\n) == '10\\n9\\n9\\n0\\n4\\n'\n\nassert solution(\n    '10\\n9 2 3 4 5 1 2 3 4'\n) == '10\\n9\\n9\\n0\\n4\\n'\n\nassert solution(\n    '10\\n9 2 3 4 5 1 2 3 4'\n) == '10\\n9\\n9\\n0\\n4\\n'\n\nassert solution(\n    '10\\n9 2 3 4 5 1 2 3 4'\n) == '10\\n9\\n9\\n0\\n4\\n'"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 1 1\") == '7\\n2'\nassert solution(\"5\\n1 3 1 2 3\") == '5\\n2'\nassert solution(\"1\\n1 2 3 4\") == '1\\n0'\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\") == \"32.6405451448\"\n\n-----Explanation-----\nHere the probability of falling into a hole is guaranteed to be zero, so the expected value of playing one game is $0$.\n\"\"\"\n\n\"\"\"\nYou can generate the expected value in terms of the expected value of the random variables.\n\nThe sum of the probabilities of being in the first row $p_0$ and the sum of the probabilities of being in the third row $p_2$ is equal to $p_0 + p_2$.\n\nTherefore, the expected value is the product of the expected value of the probability of being in the first row, and the expected value of the probability of being in the third row.\n\n$E[p_0] = \\frac{1}{N}\\sum_{i = 1}^{N/2} p_0 = \\frac{1}{N}\\frac{N + 1}{2} = \\frac{1}{N}\\frac{(N+1)}{2} = \\frac{1}{N}$$\n\n$E[p_2] = \\frac{1}{N}\\sum_{i = N+1}^{2N} p_2 = \\frac{1}{N}\\frac{2N+1}{2} = \\frac{1}{N}\\frac{(2N+1)}{2} = \\frac{1}{N}\\frac{2(N+1)}{2} = \\frac{1}{N}\\frac{2N + 1}{2} = \\frac{1}{N}$$\n\nThe expected value of the probability of being in a hole is equal to the sum of the probability of being in the first row multiplied by the probability of being in the third row, multiplied by the probability of being in a hole.\n\n$E[p_4] = \\frac{1}{N}\\sum_{i = 1}^{N/2} p_0 * p_2 * p_4 = \\frac{1}{N}\\frac{1}{2} * \\frac{1}{N}\\frac{2N+1}{2} * \\frac{1}{N} = \\frac{1}{N}\\frac{1}{2} * \\frac{2N + 1}{2} = \\frac{1}{N}\\frac{N+1}{2} = \\frac{1}{N}\\frac{N+1}{2}$$\n\n$E[p_i] = p_i = \\frac{1}{N}\\frac{i}{2} = \\frac{1}{N}\\frac{i-1}{2} = \\frac{1}{N}\\frac{(i-1)/2} = \\frac{1}{N}\\frac{(i-1)}{2} = \\frac{1}{N}i/2 = \\frac{1}{N}i/2 = \\frac{i}{2}$$\n\nUsing these two equations, you can obtain the expected value of the probability of being in the first and third row.\n\nNow, the expected value of the probability of being in a hole is given by the expected value of the probability of being in the first row multiplied by the probability of being in the third row.\n\n$E[p_4] = E[p_0] * E[p_2] = \\frac{1}{N}\\frac{1}{2} * \\frac{1}{N}\\frac{2N+1}{2} = \\frac{1}{N}\\frac{(N+1)}{2} = \\frac{1}{N}\\frac{N+1}{2} = \\frac{1}{N}\\frac{N+1}{2}$$\n\n$E[p_i] = p_i = \\frac{1}{N}\\frac{i}{2} = \\frac{1}{N}\\frac{i-1}{2} = \\frac{1}{N}\\frac{(i-1)/2} = \\frac{1}{N}\\frac{(i-1)}{2} = \\frac{1}{N}\\frac{(i-1)}{2} = \\frac{1}{N}\\frac{(i-1)}{2} = \\frac{i}{2}$$\n\n\"\"\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\") == '32.6405451448'\n\"\"\""
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\") == \"32.6405451448\"\n    pass"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50') == '32.64'\n"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50') == 32.6405451448\n\"\"\"\n\nfrom sys import stdin\nfrom fractions import Fraction\nfrom math import factorial, exp, log\n"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\") == \"32.6405451448\"\n\"\"\"\nimport numpy as np\nimport math"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2') == '32.6405451448'\n\"\"\"\n\nfrom fractions import Fraction\nfrom itertools import combinations\nfrom random import choice, choices, random\nfrom typing import List\nfrom math import factorial, log10"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\") == \"32.6405451448\"\nassert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\") == \"32.6405451448\"\n\nimport sys, math\nfrom random import random"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\") == \"32.64\"\n\"\"\"\n\nfrom fractions import Fraction\nimport sys\n\nsys.setrecursionlimit(10000)\n\nclass gcd_cache:\n    def __init__(self):\n        self.cache = {}\n    def get_gcd(self, a, b):\n        key = (a, b)\n        if key in self.cache:\n            return self.cache[key]\n        if b == 0:\n            self.cache[key] = a\n            return a\n        self.cache[key] = self.get_gcd(b, a % b)\n        return self.cache[key]"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 1 4 3') == '2 3 4 1'\n\n-----Tests-----\nsolution([input() for _ in range(int(input()))])\n\n-----Source-----\nhttps://codeforces.com/problemset/problem/52/A\n'''\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 1\") == \"3 1 2 4\"\n\"\"\""
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\nassert solution(\"5\\n2 1 4 3 5\") == \"2 3 4 5 1\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\n\n-------\nSample Input 1:\n4\n1 2 3 4\nSample Output 1:\n1 4 2 3\n-------\nSample Input 2:\n7\n1 2 4 5 3 6 7\nSample Output 2:\n2 7 1 5 3 6 4\n-------\nSample Input 3:\n5\n2 1 4 3 5\nSample Output 3:\n2 5 4 3 1\n\"\"\""
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\nassert solution(\"5\\n1 3 1 4 2\") == \"2 3 4 1\"\nassert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\n\"\"\""
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\n\nassert solution(\"6\\n1 2 3 4 5 6\") == \"2 3 4 1 5 6\"\n\nassert solution(\"5\\n2 3 4 1 5\") == \"2 3 1 4 5\"\nassert solution(\"5\\n2 3 4 1 6\") == \"2 3 4 1 6\"\nassert solution(\"5\\n1 3 4 2 5\") == \"1 3 2 4 5\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"2 3 4 5 6 1\"\nassert solution(\"1\\n1\") == \"1 1\"\nassert solution(\"2\\n2 1\") == \"1 2\"\nassert solution(\"3\\n3 2\") == \"2 3\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 1 4 3') == '2 3 4 1'\nassert solution('4\\n2 3 1 4') == '2 1 4 3'\nassert solution('5\\n1 1 2 2 3') == '2 2 1 3 1'\n\"\"\""
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 4 3\") == \"4 3 1 1\"\nassert solution(\"4 2 4 3\") == \"4 3 1 2\"\nassert solution(\"4 1 2 3\") == \"4 3 1 1\"\nassert solution(\"4 4 4 4\") == \"4 4 4 4\"\nassert solution(\"4 1 2 3 4\") == \"4 3 4 1 1\"\n\nimport sys"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\\n7.656854249492381\\n7.656854249492381\\n7.656854249492381\\n7.656854249492381\\n7.656854249492381\\n\"\n\"\"\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('7\\n1 1\\n1 2\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 7\\n7 1') == '8.660254037844387'\n\"\"\"\n\nimport math\nimport sys\n\nn = int(sys.stdin.readline())\nx = [0 for _ in range(n)]\ny = [0 for _ in range(n)]\nfor i in range(n):\n    x[i], y[i] = map(int, sys.stdin.readline().split())\n\nans = 0\nfor i in range(n):\n    if i == 0:\n        x1 = x[n - 1]\n        y1 = y[n - 1]\n        x2 = x[i]\n        y2 = y[i]\n        x3 = x[0]\n        y3 = y[0]\n    elif i == n - 1:\n        x1 = x[n - 1]\n        y1 = y[n - 1]\n        x2 = x[i - 1]\n        y2 = y[i - 1]\n        x3 = x[0]\n        y3 = y[0]\n    else:\n        x1 = x[i - 1]\n        y1 = y[i - 1]\n        x2 = x[i]\n        y2 = y[i]\n        x3 = x[i + 1]\n        y3 = y[i + 1]\n    k = math.sqrt(2 * (x2 - x1) ** 2 + (y2 - y1) ** 2) / 2\n    ans = max(ans, k)\n\nfor i in range(n):\n    for j in range(n):\n        if j == 0:\n            x1 = x[i]\n            y1 = y[i]\n            x2 = x[j + 1]\n            y2 = y[j + 1]\n        elif j == n - 1:\n            x1 = x[i]\n            y1 = y[i]\n            x2 = x[j]\n            y2 = y[j]\n        else:\n            x1 = x[i]\n            y1 = y[i]\n            x2 = x[j]\n            y2 = y[j]\n        k = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n        ans = max(ans, k)\n\nprint(ans)\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\n\"\"\"\n\nn = int(input())\n\narr = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    arr.append((x, y))\n\narr = sorted(arr, key=lambda x: x[1])\n\nres = [arr[0]]\nfor i in range(1, n):\n    if arr[i][0] < res[-1][0]:\n        res.append(arr[i])\n    else:\n        res[-1] = (res[-1][0], max(res[-1][1], arr[i][1]))\n\nprint(res)\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('6\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('6\\n1 2\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('6\\n1 3\\n2 4\\n3 2\\n3 1\\n2 1') == '7.656854249492381'\nassert solution('6\\n1 3\\n2 4\\n3 2\\n3 1\\n4 1') == '6.0'\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\"\n\"\"\"\n\nfrom collections import Counter, defaultdict, deque\nfrom functools import lru_cache\nfrom math import sqrt\nfrom sys import stdin\nfrom typing import List\n\nfrom helpers import chrono\n\n\n@chrono\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 3\\n2 4\") == \"7.656854249492381\"\nassert solution(\"1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\nassert solution(\"1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n6 2\\n2 1\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381\\n'\nassert solution('5\\n1 2\\n2 3\\n2 4\\n3 1') == '7.656854249492381\\n'\nassert solution('10\\n1 1\\n2 2\\n2 3\\n3 4\\n4 1\\n5 5\\n5 6\\n6 7\\n7 8\\n8 1\\n8 7\\n9 10\\n9 5') == '9.827586206896552\\n'\nassert solution('10\\n1 1\\n2 2\\n3 3\\n4 4\\n4 1\\n5 5\\n5 6\\n6 7\\n7 8\\n8 1\\n9 9\\n9 8\\n9 10') == '9.827586206896552\\n'\nassert solution('10\\n1 1\\n2 2\\n3 3\\n4 4\\n4 1\\n5 5\\n5 6\\n6 7\\n7 8\\n8 1') == '9.827586206896552\\n'\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n1 3\\n2 4\") == \"7.656854249492381\"\n\"\"\"\n\nfrom math import sqrt\n\nN = int(input())\nA = [list(map(int, input().split())) for _ in range(N)]"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\nassert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\nassert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\nassert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\nassert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\n\nprint(solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\"))\n\"\"\""
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == \"2\"\n\"\"\""
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n\") == 2\nassert solution(\"7 3 0\\n1 0\\n2 3\\n3 3\\n3 3\\n0 4\\n4 3\\n0 3\\n\") == 3\nassert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n\") == 2\n\"\"\"\n\nN, M, K = map(int, stdin.readline().split())\nO = {}\nfor i in range(N):\n    x, y = map(int, stdin.readline().split())\n    O[i] = (x, y)\n\nX = []\nfor i in range(M):\n    a, b = map(int, stdin.readline().split())\n    X.append((a, b))\n\nX = sorted(X, key=lambda i: i[1])\nY = sorted(X, key=lambda i: i[0])"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\n\"\"\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4') == '2'\n'''\n\nfrom itertools import permutations\nfrom sys import stdin\n\nstdin = open(__file__.replace('.py', '_test_input.txt'), 'r')\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\n\"\"\"\n\nn, m, k = map(int, input().split())\nons = []\nfence = []\nfor _ in range(n):\n    x, y = map(int, input().split())\n    ons.append((x, y))\nfor _ in range(m):\n    a, b = map(int, input().split())\n    fence.append((a, b))"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\nprint('Test pass.')"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\n\n-----Notes-----\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom itertools import combinations, product\nfrom typing import List\n\n\nclass Graph:\n    def __init__(self, edges: list[tuple[int, int]]) -> None:\n        self.edges = edges\n        self.graph = defaultdict(list)\n        self.build_graph()\n\n    def build_graph(self) -> None:\n        for u, v in self.edges:\n            self.graph[u].append(v)\n            self.graph[v].append(u)\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1') == '9'\n\"\"\""
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1234 5678 9012') == '9'\nassert solution('123 9012') == '9'\nassert solution('123 5678 9012') == '9'\n'''\nimport math\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n') == 9\n\"\"\""
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n') == '9'\n\"\"\"\n\nm, k = map(int, input().split())\nprint((k ** m - 1) % 998244353)\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1') == '9'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == 9\nassert solution(\"2 2\") == 9\nassert solution(\"1 1\") == 1\nassert solution(\"5 1\") == 5\nassert solution(\"1 1\") == 1\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"9\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nGCD with 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 2 3 7 8 9\\n1 4 7\\n1 2 3 6 9\\n1 4 7\\n1 2 3 6 9\\n1 4 7\") == \"9\"\n\n-----Note-----\nAssume that:\n\n$m$ is in the range [1, 10^6].\n$k$ is in the range [1, 10^6].\nThe sum of $m$ and $k$ is in the range [1, 10^6].\nAt most $m$ lines of input are given.\n\"\"\""
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\n\"\"\"\n\n\"\"\"\nApproach 1: Brute Force\n\nA brute-force solution would be to consider every subset of the given set of numbers. For every possible combination of three numbers, we check if they sum up to a sum. If so, we store the sum and proceed to the next combination.\n\nComplexity Analysis\n\nTime complexity : O(N2)\n\nWe can reduce the time complexity to O(N3). However, our brute-force solution is still very inefficient.\n\nSpace complexity : O(1)\n\"\"\"\n\"\"\"\nclass Solution:\n    def bruteForce(self, n: int, nums: List[int]) -> int:\n        if n == 1:\n            return nums[0]\n        else:\n            max_sum = nums[0] + nums[1]\n            for i in range(n):\n                for j in range(i + 1, n):\n                    for k in range(j + 1, n):\n                        if nums[i] + nums[j] + nums[k] > max_sum:\n                            max_sum = nums[i] + nums[j] + nums[k]\n            return max_sum\n\"\"\"\n\"\"\"\nApproach 2: Using Sets\n\nIf we consider the set $S$ of integers, then we can convert it to a list and sort it.\n\nComplexity Analysis\n\nTime complexity : O(NlogN)\n\nThe time complexity is O(NlogN) because we must first convert $S$ to a list and then sort it.\n\nSpace complexity : O(N)\n\nThe space complexity is O(N) because we must allocate a list of size N to store the sorted set of integers.\n\"\"\"\n\"\"\"\nimport functools\nclass Solution:\n    def usingSet(self, n: int, nums: List[int]) -> int:\n        return max(functools.reduce(lambda x, y: x + y, sorted(set(nums))[-3:]) - x for x in sorted(set(nums))[-3:])\n\"\"\"\n\"\"\"\nApproach 3: Using Three Pointers\n\nIf we use three pointers, one for the current index, one for the left index, and one for the right index, then we can keep track of the max value and move the pointers accordingly to get the answer.\n\nComplexity Analysis\n\nTime complexity : O(N)\n\nThe time complexity is O(N) because we iterate through the list for the number of elements in the list.\n\nSpace complexity : O(1)\n\nThe space complexity is O(1) because we do not use any additional data structures.\n\"\"\"\nimport collections\nclass Solution:\n    def usingThreePointers(self, n: int, nums: List[int]) -> int:\n        count = collections.Counter(nums)\n        counted = collections.Counter()\n        l, r, max_sum = 0, 0, 0\n        while r < n:\n            counted[nums[r]] += 1\n            while counted[nums[r]] > count[nums[r]]:\n                counted[nums[l]] -= 1\n                l += 1\n            max_sum = max(max_sum, nums[l] + nums[r] + nums[r - 1])\n            r += 1\n        return max_sum\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\n\"\"\""
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\\n\") == \"12\"\nprint(solution(\"5\\n2\\n3\\n5\\n7\\n12\\n\"))"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abc') == 'a'\nassert solution('abcd') == 'a'\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == 'No solution'\nassert solution('1\\n2\\n1') == 'No solution'\nassert solution('1\\n2\\n3\\n4\\n5') == 'No solution'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 'No solution'\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2\n3\n5\n7\n12\n''') == '12'\nassert solution('''5\n5\n4\n3\n2\n1\n''') == 'no solution'\nassert solution('''5\n2\n3\n5\n7\n12\n''') == '12'\nassert solution('''5\n5\n4\n3\n2\n1\n''') == 'no solution'\nassert solution('''5\n2\n3\n5\n7\n12\n''') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == '12'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\n\nassert solution(\"5\\n2\\n3\\n5\\n7\") == \"no solution\"\n\nassert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\n\nassert solution(\"5\\n2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\") == \"no solution\"\n\nassert solution(\"5\\n2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\n12\\n-2\\n3\\n5\\n7\\"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n2\n3\n5\n7\n12\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n5\n1\n-1\n5\n7\n12\n\"\"\") == \"no solution\"\n\nassert solution(\"\"\"\n6\n1\n2\n3\n4\n5\n6\n\"\"\") == \"no solution\"\n\nassert solution(\"\"\"\n6\n-1\n1\n1\n2\n3\n4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n6\n-1\n1\n2\n2\n3\n4\n\"\"\") == \"2\""
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1011') == '111'\nassert solution('11010') == '01010'\n\"\"\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00\\n01\\n10\\n110\\n111') == '11'\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('011') == '110'\nassert solution('110101') == '11110'\nassert solution('101010') == '111010'\nassert solution('111111') == '111111'\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('01') == '1'\nassert solution('11110') == '11111111111111111'\nassert solution('11111') == '11111111111111110'\n'''\n\nimport sys\nimport os"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('110011') == '110011'\nassert solution('11111') == '1111'\nassert solution('1110011') == '1110011'\nassert solution
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00\\n01\\n10\\n110\\n111') == '11'\nassert solution('11\\n10\\n11\\n010\\n110') == '010'\nassert solution('11\\n1010\\n11010\\n101010') == '101010'\n'''"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n00\n01\n10\n110\n111''') == '11'\nassert solution('''15\n101101\n111111\n111011\n111111\n111011\n111011\n111011\n111011\n111011\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n1111"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '11'\nassert solution('10\\n11') == '11'\nassert solution('10\\n11\\n11\\n1111') == '1111'\nassert solution('10\\n11\\n11\\n1111\\n10\\n1111') == '1111'\nassert solution('10\\n11\\n11\\n1111\\n10\\n1111\\n11\\n11\\n1111') == '11'\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n20\\n100\\n100\\n1\\n150\\n1\\n150\\n') == '100 250 320'\nassert solution('3\\n2\\n20\\n100\\n100\\n1\\n150\\n1\\n150\\n') == '100 250 320'\nassert solution('3\\n2\\n20\\n100\\n100\\n1\\n150\\n1\\n150\\n') == '100 250 320'\n'''"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n20 100') == '100 200'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor _ in range(n):\n    k = int(sys.stdin.readline())\n    s = 0\n    s2 = []\n    for _ in range(k):\n        n, d = [int(x) for x in sys.stdin.readline().split()]\n        s += n\n        s2.append(d)\n    s2 = sorted(s2)\n    for x in s2:\n        print(str(s - sum(s2[:x])) + \" \" + str(s))\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(input()))\n\n-----Notes-----\nThis problem seems easy, but is very difficult to solve without a powerful programming language.\n\nWe can generate and test all possible cases and then test it ourselves, but that would be very time consuming.\n\nIt is much better to solve this with a programming language like C++.\n\"\"\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100\") == \"100 250 320\"\nassert solution(\"3\\n2\\n1\\n2\\n1\\n2\") == \"1 2\""
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100') == '100 250 320'\n\n\"\"\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100\") == \"100 250 320\"\n\"\"\""
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '''100 250 320'''\nprint('Success')\n\n------Solution---------\nn = int(input())\nd = [[] for i in range(n)]\nfor i in range(n):\n    k = int(input())\n    for j in range(k):\n        s = input().split()\n        d[i].append([int(s[0]), int(s[1])])\n\nfor i in range(1, 366):\n    count = 0\n    for j in range(n):\n        for k in d[j]:\n            if k[0] <= i <= k[1]:\n                count += k[0]\n    print(count)\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n20 100\\n100 10\\n\") == \"100 250 320\"\nassert solution(\"3\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100\\n\") == \"100 250 320 100 250 320\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n\"\"\"\nimport numpy as np\nfrom typing import List\n\nL: int\nR: int"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('1') == ''\n\nassert solution('1, 2, 3') == ''\n\nassert solution('1, 2, 3, 4') == '1 2 3 0 1 2 0 1 2 1 1 0 1 2 1 1 2 1 0 0 0 2 3 0 2 1 1 1 0 0 1 0 0 0 3 0 0 2 0 3 1 0 0 1 1 1 0 2 0 1 1 1 0 0 0 2 1 0 3 2 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n\nL, R = [int(x) for x in stdin.split()]\n\ns = ''\nfor i in range(9):\n    s += str(sum(c == str(i + 1) for c in str(L)))\n    s +=''\ns += str(sum(c == str(i + 1) for c in str(R)))\n\nprint(s)"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\""
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 200\") == \"3 7 4 6 5 7 2 15 2\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n\"\"\""
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n\n-----Solution-----\n\"\"\"\n\nimport numpy as np\n\nL, R = [int(x) for x in stdin.split(' ')]"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n\"\"\""
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\") == '40.0000000000'\n\"\"\"\n\na, b = [], []\nfor _ in range(int(stdin.readline())):\n    a.append(list(map(int, stdin.readline().split())))\nfor _ in range(int(stdin.readline())):\n    b.append(list(map(int, stdin.readline().split())))\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\") == \"40.0000000000\"\n\"\"\"\n\nfrom math import hypot\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\") == \"40.0000000000\"\n\"\"\"\nfrom typing import List, Dict\n\nimport itertools\n\nfrom modules.utils import read_input_with_default\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\nassert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\n\"\"\""
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\") == \"40.0000000000\"\nassert solution(\"4\\n-1 -1\\n1 -1\\n1 0\") == \"0.0\"\nassert solution(\"4\\n0 0\\n0 0\\n0 0\") == \"0.0\"\nassert solution(\"4\\n-1 -1\\n1 1\\n1 -1\") == \"1.0\"\nassert solution(\"4\\n-1 -1\\n1 1\\n1 1\") == \"2.0\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == '40.0000000000'\n\"\"\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n3 3 1') == '0.0'\nassert solution('2\\n3 3 5') == '0.0'\nassert solution('3\\n4 5 6') == '0.0'\nassert solution('3\\n5 6 4') == '0.5'\n'''\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7') == '40.0000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\") == \"40.00000000\"\n\"\"\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n2 1 3\n\"\"\") == \"1\\n1\\n\"\nassert solution(\"\"\"5\n1 1 1 1\n\"\"\") == \"1\\n\"\nassert solution(\"\"\"6\n1 1 1 1 1\n\"\"\") == \"1\\n1\\n\"\nassert solution(\"\"\"10\n1 1 1 1 1 1 1 1 1\n\"\"\") == \"1\\n1\\n\"\nassert solution(\"\"\"3\n1 1 1\n\"\"\") == \"1\\n1\\n\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n1\\n3\\n\") == \"1\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 1 3\") == \"1\\n1\"\nassert solution(\"4\\n2 1 3 4\") == \"1\\n1\"\nassert solution(\"2\\n2 1\") == \"1\\n1\"\nassert solution(\"3\\n1 1\") == \"0\\n1\"\nassert solution(\"3\\n2 1 3\") == \"1\\n1\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n3 1 3 2 1\n''') == '2 1 4'\n\nassert solution('''\n3\n1 1 1\n''') == '1'\n\nassert solution('''\n4\n5 1 5 2 5\n''') == '3 1 2'\n\nprint('PASSED')\n\n-----\n2\n3\n1 1 1\n1 1 1\nSample Output:\n1\n3 1 2\n'''\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n2\\n1 2\\n2 1') == '1\\n1'\n\nassert solution('1\\n1\\n1\\n1') == '0'\n\nassert solution('1\\n3\\n2 3') == '0'\n\nassert solution('2\\n3\\n2 1\\n3 1') == '1\\n1'\n\nassert solution('4\\n6\\n4 5 6 2 2\\n2 3 3 4 2 4\\n4 1 2 3 4 3') == '0\\n1\\n3\\n0\\n1\\n1'"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3\\n2 1 3\") == \"1\\n1\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 2 2\\n2 3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1\\n1\\n'\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 3') == '0\\n1\\n0\\n2'\nprint(solution('4\\n1 2 3 4\\n1 2 3'))\n\n-----Problem-----\nYou\u2019re given the heights of people in a line. Find the number of the people you have to consult in order to find the tallest person.\n\n-----Data Representation-----\n - Data is represented as a single integer $n$, the number of people.\n - Each height is represented as a single integer $h$, $1 \\leq h \\leq 10^9$.\n\n-----Algorithm-----\n - Find the tallest person.\n - Output the index of the tallest person.\n\n-----Test Cases-----\nInput:\n6\n2\n1\n5\n5\n5\n1\nOutput:\n2\n\nInput:\n6\n2\n1\n5\n5\n5\n1\nOutput:\n0\n\nInput:\n6\n1\n1\n5\n5\n5\n1\nOutput:\n0\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 3\\n\") == \"1\\n1\\n\"\nassert solution(\"1\\n2 1 3\\n\") == \"1\\n\"\nassert solution(\"2\\n2 1 3\\n\") == \"1\\n\"\n\nimport os, io, time, collections, heapq, math, functools\nfrom operator import itemgetter\n\n\"\"\"\nGreedy solution\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solve(self, k, h):\n        # n < 3*10^5\n        # h <= 10^9\n        n = len(h)\n        result = []\n        if k == 1:\n            result = [0]\n        elif k == 2:\n            # \u627e\u5230\u6700\u9ad8\u7684\u4e24\u4e2a\u9ad8\u5ea6\n            high_height = sorted(h)[-2:]\n            # print(high_height)\n            # \u5224\u65ad\u7b2c\u4e8c\u9ad8\u5ea6\u662f\u5426\u8d85\u8fc7\u7b2c\u4e00\u9ad8\u5ea6\n            if high_height[0] > high_height[1]:\n                result = [0, 1]\n            else:\n                result = [1, 0]\n        else:\n            # \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\n            result = [0] * (k-1)\n            # \u5faa\u73afk-1\u6b21\n            for i in range(1, k-1):\n                # \u627e\u5230\u6700\u9ad8\u7684\u4e24\u4e2a\u9ad8\u5ea6\n                high_height = sorted(h)[-2:]\n                # print(high_height)\n                # \u5224\u65ad\u7b2c\u4e8c\u9ad8\u5ea6\u662f\u5426\u8d85\u8fc7\u7b2c\u4e00\u9ad8\u5ea6\n                if high_height[0] > high_height[1]:\n                    result[i] = i+1\n                else:\n                    result[i] = i\n            # \u5bf9\u6700\u9ad8\u7684\u9ad8\u5ea6\u8fdb\u884c\u6392\u5e8f\n            high_height = sorted(h)[-1:]\n            # print(high_height)\n            result[k-1] = high_height[0]\n\n        # \u5408\u5e76\n        result = [str(item) for item in result]\n        print(\" \".join(result))"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\n\"\"\""
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''725.85 1.71 2.38''') == '''199 162'''\n\nassert solution('''22.64 12.19 4.29''') == '''19 17'''\n\nassert solution('''9.88 9.79 9.42 9.99''') == '''9 9'''\n\nassert solution('''4.50 0.82 4.86''') == '''none'''\nassert solution('''1.00 0.05 0.10''') == '''none'''\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\nprint(solution(stdin))\n\n\"\"\"\n\nimport math\n\nfrom decimal import Decimal\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1,2') == ''\nassert solution('1,2,3') == ''\nassert solution('1,2,3,4,5,6') == ''\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\nassert solution(\"34.89 1.52 1.67\") == \"2 11\"\nassert solution(\"19.52 2.31 2.05\") == \"3 4\"\nassert solution(\"0 0 0.15\") == \"none\"\nassert solution(\"0 0.14 0.01\") == \"none\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"725.85 1.71 2.38\") == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\n\"\"\"\n\nimport sys\nimport os\nimport math"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"\"\"199 162\"\"\""
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_result)"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == '16'"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(42)\nprint(solution(str(input())))"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\"\n\"\"\""
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n1\\n0\\n2\\n3') == '6'\nassert solution('1\\n1\\n0\\n1\\n2') == '5'\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\nlst = [[int(x) for x in input().split()] for _ in range(n)]"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\"\nprint(solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\"))\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n\"\"\") == 16\n\nassert solution(\"\"\"\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n\"\"\") == 16\n\nassert solution(\"\"\"\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n\"\"\") == 16\n\nassert solution(\"\"\"\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n\"\"\") == 16\n\nassert solution(\"\"\"\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n\"\"\") == 16"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 0') == '18'\nassert solution('1 3 2') == '7'\nassert solution('2 1 -1') == '4'\nassert solution('5 3 3') == '30'\nassert solution('2 1 1') == '2'\n\"\"\""
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1\") == \"O 1\"\nassert solution(\"10 10\") == \"I 1\"\nassert solution(\"11 11\") == \"I 0\"\nassert solution(\"22 1\") == \"E 1\"\nassert solution(\"22 22\") == \"E 0\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nO 1\\nE 2\\nI 3\") == \"O 1\\nE 2\\nI 3\"\nassert solution(\"4\\nI 2\\nE 2\\nO 1\\nI 3\") == \"E 2\\nO 1\\nI 3\"\nassert solution(\"4\\nE 2\\nI 1\\nO 3\\nE 3\") == \"E 2\\nO 3\\nE 3\""
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nO 2\\nI 1\\nE 1\") == \"2 1 4\"\nassert solution(\"1\\nE 1\\nO 2\\nE 1\") == \"0 0 1\"\nassert solution(\"1\\nI 1\\nE 1\") == \"1 0 1\"\nassert solution(\"1\\nE 1\\nI 1\\nE 1\") == \"1 1 0\"\nassert solution(\"1\\nI 1\\nE 1\\nO 2\\nE 1\") == \"1 1 2\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nO 4\\n\") == \"2 1 4\"\nassert solution(\"2\\nE 3\\nE 10\\n\") == \"1 3 1 1\"\nassert solution(\"2\\nI 4\\nI 10\\n\") == \"2 2 2 1\"\nassert solution(\"2\\nE 3\\nE 10\\nI 4\\nI 10\\n\") == \"2 2 2 1 2\"\nassert solution(\"2\\nE 3\\nE 10\\nI 4\\nI 10\\nO 4\\nO 10\\n\") == \"1 2 1 2\""
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nE 5\") == \"Even:2, Odd:5\"\nassert solution(\"10\\nI 3\") == \"Ingmariay:1, Odd:8, Even:3\"\nassert solution(\"10\\nE 5\\nI 4\\nE 3\\nO 1\") == \"Odd:7, Even:6, Ingmariay:1\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\nO 4\n\"\"\") == \"1 2 2\"\n\nassert solution(\"\"\"2\nE 10\nO 2\nE 2\nE 1\n\"\"\") == \"2 1 4\"\n\nassert solution(\"\"\"3\nI 8\nE 8\nE 5\nE 2\n\"\"\") == \"2 1 4\"\n\nassert solution(\"\"\"3\nI 1\nE 1\nO 2\n\"\"\") == \"2 1 4\"\n\nassert solution(\"\"\"2\nE 10\nO 2\nE 2\nE 1\n\"\"\") == \"2 1 4\""
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nO 2\\nE 1\\nI 1\") == \"2 1 4\"\nassert solution(\"15\\nE 16\\nE 2\\nE 8\\nI 1\\nE 4\\nO 2\\nI 1\\nE 1\\nO 4\\nI 1\\nE 1\\nO 1\\nE 1\\nO 1\\nE 1\\nI 1\\nE 1\\nE 1\\nE 1\\nO 1\\nE 1\\nE 1\\nO 1\\nO 1\\nE 1\\nE 1\\nE 1\\nI 1\\nI 1\\nO 1\\nO 1\\nI 1\\nE 1\\nO 1\\nO 1\\nO 1\\nE 1\\nE 1\\nI 1\\nE 1\\nE 1\\nI 1\\nE 1\\nO 1\\nI 1\\nI 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nI 1\\nE 1\\nE 1\\nE 1\\nO 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nE 1\\nE 1\\nO 1\\nO 1\\nE 1\\nI 1\\nE 1\\nE 1\\nE 1\\nO 1\\nE 1\\nO 1\\nE 1\\nO 1\\nI 1\\nE 1\\nO 1\\nI 1\\nI 1\\nI 1\\nE 1\\nO 1\\nO 1\\nO 1\\nI 1\\nE 1\\nO 1\\nO 1\\nI 1\\nI 1\\nO 1\\nO 1\\nO 1\\nO 1\\nE 1\\nI 1\\nE 1\\nO 1\\nE 1\\nI 1\\nO 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nI 1\\nO 1\\nO 1\\nO 1\\nE 1\\nE 1\\nE 1\\nE 1\\nO 1\\nO 1\\nO 1\\nI 1\\nI 1\\nO 1\\nO 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nO 5\\nE 3\\nI 2\\nO 1\\nE 2\\nI 1\") == '2 1 4'\nassert solution(\"5\\nI 2\\nI 3\\nI 1\\nO 1\\nE 3\\nI 1\\nE 2\\nI 2\\nO 3\\nE 1\\nI 2\\nO 2\") == '3 2 2'\n\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"O 4\\n\") == \"2 1 4\"\nassert solution(\"E 3\\nI 5\\nI 2\\nO 1\\nO 1\") == \"2 2 4\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15\\nO 1\\nE 2\\nI 3\\nE 4\\nO 5\\nI 6\\nI 7\\nO 8\\nI 9\\nE 10\\nI 11\\nO 12\\nI 13\\nE 14\\nI 15\\nO 16\\nE 17\\nI 18\\nE 19\\nO 20\\nI 21\\nE 22\\nE 23\\nI 24\\nO 25\\nI 26\\nE 27\\nI 28\\nE 29\\nO 30\\nE 31\\nI 32\\nE 33\\nI 34\\nE 35\\nI 36\\nO 37\\nE 38\\nI 39\\nO 40\\nE 41\\nI 42\\nE 43\\nI 44\\nO 45\\nE 46\\nI 47\\nE 48\\nI 49\\nO 50\\nE 51\\nE 52\\nE 53\\nO 54\\nE 55\\nE 56\\nI 57\\nE 58\\nI 59\\nO 60\\nE 61\\nE 62\\nO 63\\nE 64\\nI 65\\nI 66\\nE 67\\nI 68\\nE 69\\nI 70\\nI 71\\nI 72\\nO 73\\nI 74\\nI 75\\nE 76\\nE 77\\nI 78\\nO 79\\nI 80\\nE 81\\nE 82\\nO 83\\nI 84\\nE 85\\nE 86\\nO 87\\nI 88\\nI 89\\nO 90\\nE 91\\nE 92\\nI 93\\nE 94\\nE 95\\nI 96\\nO 97\\nE 98\\nE 99\\nE 100\\n\") == \"Odd\\nEven\\nIngmariay\\n\""
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\\n\") == 4\n\"\"\"\n\nimport numpy as np\n\nr, l = map(int, input().split())"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\\n6 0 0 1 3\\n7 0 0 0 1\") == \"3\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == \"4\"\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn this kata you have to create all permutations of an input string and remove duplicates, if present. This means, you have to shuffle all letters from the input in all possible orders.\n\nThe permutation logic can be understood from here: https://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/\n\nIf you like this Kata, please also try C: Permutations.\n\nHint: Think of an additional data structure: A StringSet.\n\nInput:\n\nstr = \"ab\"\nOutput:\n\n[\"ab\", \"ba\"]\n\nConstraints:\n\n[time limit] 5000ms\n\n[input] string str\n\n1 \u2264 str.length \u2264 6\n[output] array.string\n\nAll permutations of the string must be unique.\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == \"4\"\n\"\"\"\n\nimport sys\nimport numpy\n\nrooms = []"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\n\"\"\""
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\\n') == '4'\n\nSample Input:\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\nSample Output:\n5\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == \"4\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\\n\") == 4\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == \"4\""
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-99.99 99.99 9999.99\\n99 9 999 9999\\n9 99 9 99 9\") == \"9.585073\"\n\"\"\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-1.9 -1.9 9999.99\") == \"0.05\"\nassert solution(\"-1.9 -1.9 9999.99\") == \"0.05\"\nassert solution(\"-1.9 -1.9 9999.99\") == \"0.05\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == '9.585072999999994'\nassert solution(\"99 9 999 9999\") == '9.585073'\n\"\"\"\n\nimport re\n\npolynomial = re.compile(r\"(?P<degree>[1-9][0-9]*)?(?P<coefficient>[+-][0-9]*)?(?P<power>[+-][0-9]*)\")\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\n\"\"\""
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\n\"\"\"\n\nfrom decimal import Decimal, getcontext\ngetcontext().prec = 100"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-99.99 99.99 9999.99\\n99 9 999 9999\\n9 99 9 99 9\\n\") == \"9.585073\"\nprint(solution(\"-99.99 99.99 9999.99\\n99 9 999 9999\\n9 99 9 99 9\\n\"))\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == '9.585072999'\nassert solution(\"99 9 999 9999\") == '9.585073'\n\"\"\"\n\nimport math\n\na, b, c, t1, t2, t3, t4, n, k, r, s, l = [int(x) for x in input().split()]\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n''') == '9.5850730791'\nassert solution('''-99999999999999.99 9999999999999999.99 99999999999999997.99\n99999999999999997999999999999999999999999999999999999999999999999999999999999999999999.99\n99999999999999993999999999999999999999999999999999999999999999999999999999999999999999.99\n99999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.99\n9999"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"9.585073\"\nassert solution(\"9 99 9 99 9\") == \"9.585073\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 30\") == \"12.74 127.83\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 30\") == \"12.74 127.83\"\nassert solution(\"100 10\") == \"impossible\"\nassert solution(\"20 0\") == \"impossible\"\nassert solution(\"20 10\") == \"impossible\"\nassert solution(\"20 10 2 20 2 10\") == \"12.74 127.83\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\n\"\"\"\n\nw, l = map(int, stdin.readline().split())\n\nd, theta = map(float, stdin.readline().split())\n\nr = [float(x) for x in stdin.readline().split()]\n\nx1, y1 = [float(x) for x in stdin.readline().split()]\nx2, y2 = [float(x) for x in stdin.readline().split()]\nx3, y3 = [float(x) for x in stdin.readline().split()]\n\nx12, y12 = [x1, x2]\nx23, y23 = [x2, x3]\nx31, y31 = [x3, x1]\n\n\"\"\"\n| x |   | y |\n|----| + |----|\n|0   |   |1   |\n|2   |   |3   |\n|4   |   |5   |\n|6   |   |7   |\n|8   |   |9   |\n|10  |   |11  |\n|12  |   |13  |\n|14  |   |15  |\n|16  |   |17  |\n|18  |   |19  |\n|20  |   |21  |\n|22  |   |23  |\n|24  |   |25  |\n|26  |   |27  |\n|28  |   |29  |\n|30  |   |31  |\n|32  |   |33  |\n|34  |   |35  |\n|36  |   |37  |\n|38  |   |39  |\n|40  |   |41  |\n|42  |   |43  |\n|44  |   |45  |\n|46  |   |47  |\n|48  |   |49  |\n|50  |   |51  |\n|52  |   |53  |\n|54  |   |55  |\n|56  |   |57  |\n|58  |   |59  |\n|60  |   |61  |\n|62  |   |63  |\n|64  |   |65  |\n|66  |   |67  |\n|68  |   |69  |\n|70  |   |71  |\n|72  |   |73  |\n|74  |   |75  |\n|76  |   |77  |\n|78  |   |79  |\n|80  |   |81  |\n|82  |   |83  |\n|84  |   |85  |\n|86  |   |87  |\n|88  |   |89  |\n|90  |   |91  |\n|92  |   |93  |\n|94  |   |95  |\n|96  |   |97  |\n|98  |   |99  |\n|100|   |101|\n|102|   |103|\n|104|   |105|\n|106|   |107|\n|108|   |109|\n|110|   |111|\n|112|   |113|\n|114|   |115|\n|116|   |117|\n|118|   |119|\n|120|   |121|\n|122|   |123|\n|124|   |125|\n|126|   |127|\n|128|   |129|\n|130|   |131|\n|132|   |133|\n|134|   |135|\n|136|   |137|\n|138|   |139|\n|140|   |141|\n|142|   |143|\n|144|   |145|\n|146|   |147|\n|148|   |149|\n|150|   |151|\n|152|   |153|\n|154|   |155|\n|156|   |157|\n|158|   |159|\n|160|   |161|\n|162|   |163|\n|164|   |165|\n|166|   |167|\n|168|   "
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n\"\"\"\n\n\nimport numpy as np\nfrom math import tan, degrees, sqrt\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n\"\"\""
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open('a.in').read()) == open('a.out').read()\nprint('All tests passed.')\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n\"\"\"\n\nw, l = [int(x) for x in stdin.split()]\nr = [int(x) for x in stdin.split()[1:]]\nx1, y1, x2, y2, x3, y3, h = [int(x) for x in stdin.split()[2:]]"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n2\n3\n2\n1 2 2 3 2 1 4 0\n0\n1\n2\n3\n2\n0\n3\n2\n0\n1\n2\n0\n0\n1\n1\n0\n1\n1\n1\n0\n1\n0\n2\n2\n1\n1\n0\n1\n1\n2\n1\n0\n\n2\n1\n1\n1\n0\n\n1\n1\n1\n0\n1\n0\n0\n1\n0\n0\n1\n0\n0\n1\n0\n1\n1\n0\n1\n1\n0\n0\n0\n1\n0\n1\n1\n1\n0\n0\n0\n1\n1\n0\n1\n0\n1\n1\n1\n0\n0\n1\n0\n1\n1\n1\n1\n0\n0\n0\n1\n1\n0\n1\n1\n0\n0\n0\n\n3\n2\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\\n\") == \"12.74 127.83\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1106\") == \"0116\"\nassert solution(\"111\") == \"1111\"\nassert solution(\"9\") == \"99\"\nassert solution(\"100\") == \"1110\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"110\\n6\") == \"0116\"\n\"\"\""
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"2\\n110\\n6\"\n) == \"0116\"\nassert solution(\n\"3\\n0111\\n1222\\n9361\"\n) == \"9361\"\nassert solution(\n\"5\\n1101111\\n122221\\n531122\\n932131\\n223132\"\n) == \"932131\"\nassert solution(\n\"1\\n\"\n) == \"0\"\nassert solution(\n\"3\\n123\\n110\\n122\"\n) == \"110\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110\") == \"101\"\nassert solution(\"101\") == \"101\"\nassert solution(\"10111\") == \"1011\"\nassert solution(\"10111110\") == \"10111\"\nassert solution(\"11011101010\") == \"110111010\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"110\\n6\") == \"0116\"\nassert solution(\"110\\n1\") == \"110\"\nassert solution(\"110\\n9\") == \"1109\"\nassert solution(\"110\\n7\") == \"1170\"\nassert solution(\"110\\n8\") == \"1180\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('110\\n6') == '0116'\nassert solution('110\\n09') == '0181'\nassert solution('110\\n000') == '1110'\nassert solution('110\\n111') == '1110'\nassert solution('110\\n8\\n9') == '0808'\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n110\\n6') == '0116'\n\"\"\"\n\nfrom sys import stdin\nimport itertools\n\nn = int(stdin.readline().strip())\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('110\\n6') == '0116'\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"110\\n6\") == \"0116\"\n\"\"\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 3\n4 4 4''') == '0 2 4', 'error message'\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"0 2 3\"\nassert solution(\"4 2\\n2 2 2\") == \"0 1 2\"\nassert solution(\"8 3\\n4 4 4\") == \"0 1 4\"\n\"\"\""
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n4 4 4\") == \"0 2 4\"\nassert solution(\"8 2\\n3 2 3\") == \"0 1 2\"\n\n------Hint------\nThe problem is equivalent to finding the longest balanced subarray, which is easier to solve using the sliding window algorithm.\n\nYou will need to keep track of the total number of breaks in the current solution. Whenever the number of breaks in the solution changes, it means that a change has occurred and the longest subarray is updated.\n\nYou will also need to keep track of which musician is on the stage. When the number of breaks in the solution changes, it means that a new musician has entered the stage and the stage is re-shuffled.\n\nThe longest balanced subarray is defined as the subarray that exists in the sliding window when there are $k$ breaks in the solution and when there are at most $l$ breaks in the solution.\n\nYou can find the longest balanced subarray with the help of the sliding window algorithm.\n\nNote that you can start from the beginning of the input string if the subarray does not start at position 0.\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n4 4 4\") == \"0 2 4\""
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 3\n4 4 4''') == '0 2 4'\n\nassert solution('''8 2\n4 4''') == '0 2 4'\n\nassert solution('''8 2\n4 4\n2 4''') == '0 2 4'\n\nassert solution('''8 1\n1''') == '0'\n\nassert solution('''8 3\n1 1 1''') == '0 2 4'"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n4 4 4\") == \"0 2 4\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''4\n''') == '''0\n2\n4\n'''\n\nassert solution(\n'''8\n4 4 4\n''') == '''0\n2\n4\n'''\n\nassert solution(\n'''5\n4 3 2 1\n''') == '''0\n1\n2\n3\n4\n'''\n\nassert solution(\n'''5\n1 2 1 1\n''') == '''1\n2\n3\n4\n5\n'''\n\nassert solution(\n'''1\n1\n''') == '''0\n'''"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n8 3\n4 4 4\n''') == '0 2 4'\n\nassert solution('''\n8 3\n2 1 2\n''') == '0 0 2'\n\nassert solution('''\n8 3\n1 1 2\n''') == '0 0 2'\n\nassert solution('''\n8 3\n1 1 1\n''') == '0 0 0'\n\nassert solution('''\n8 3\n2 1 1\n''') == '0 2 0'"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n4 4 4\") == \"0 2 4\"\nassert solution(\"6 2\\n3 3 4\") == \"3 4\"\n\"\"\"\n\n\nT, N = map(int, input().split())\nbreaks = list(map(int, input().split()))\nbreaks.sort()\nprint(*breaks[:2])\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n4 4 4\") == \"0 2 4\"\nassert solution(\"8 3\\n1 1 1\") == \"0 0 1\"\nassert solution(\"8 3\\n2 3 4\") == \"0 0 2\"\n\nimport json\nassert json.loads(solution(\"8 3\\n4 4 4\")) == ['0', '2', '4']\n\"\"\""
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"6\\n4\\n4\\n1 1\\n1 2\\n2 3\\n2 4\\n3 4\") == \"possible\"\n\n\"\"\""
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n5\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n5\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\nassert solution(\"4\\n5\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\nassert solution(\"4\\n5\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7') == 'impossible'"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5''') == 'impossible'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\nassert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 10\\n0 0\") == \"4.00000\"\nassert solution(\"0 0\\n10 10\") == \"impossible\"\nassert solution(\"0 10\\n4 0\") == \"impossible\"\nassert solution(\"0 10\\n0 0\") == \"4.00000\"\nassert solution(\"0 0\\n10 10\") == \"impossible\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\n\"\"\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n'''\n\nimport sys\nimport math\nimport typing\nfrom typing import List\n\n\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __str__(self) -> str:\n        return f'{self.x},{self.y}'\n\n    def __eq__(self, other: 'Point') -> bool:\n        if self.x!= other.x or self.y!= other.y:\n            return False\n\n        return True\n\n    def __hash__(self) -> int:\n        return self.x ^ self.y\n\n    def distance(self, other: 'Point') -> int:\n        return math.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)\n\n\nclass Path:\n    def __init__(self, points: List[Point]):\n        self.points = points\n        self.length = len(points)\n        self.distance = points[-1].distance(points[0])\n\n    def __len__(self) -> int:\n        return self.length\n\n    def __str__(self) -> str:\n        return'-> '.join([str(p) for p in self.points])\n\n    def __eq__(self, other: 'Path') -> bool:\n        if self.length!= other.length:\n            return False\n\n        for i in range(self.length):\n            if self.points[i]!= other.points[i]:\n                return False\n\n        return True\n\n    def __hash__(self) -> int:\n        return hash(self.points[0]) ^ self.length\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n1\\n4\\n1\\n4\\n4\\n') == '4.00000'\nassert solution('1\\n2\\n3\\n1\\n4\\n1\\n4\\n4\\n') == 'impossible'\nassert solution('1\\n2\\n3\\n1\\n4\\n1\\n4\\n1\\n') == 'impossible'\nassert solution('1\\n2\\n3\\n1\\n4\\n1\\n4\\n1\\n') == 'impossible'\nassert solution('1\\n2\\n3\\n1\\n4\\n1\\n4\\n4\\n') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0\\n0 10\\n2\\n4 10\\n4 0\") == \"4.00000\"\n\"\"\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4 10\\n4 0\\n') == '4.00000'\nassert solution('2\\n0 0\\n0 10\\n2\\n4 10\\n4 0\\n') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0 10') == 'impossible'\nassert solution('0 0') == 'impossible'\n\nSample Case 0\n\nIn the first sample, Misha has to deliver the package to Nadia in four moves. He is at the origin and the destination is at the point (4, 10), so the total time is\n\n4 + 0 + 4 + 10\n= 14.\n\nIn the second sample, Misha has to deliver the package to Nadia in six moves. Misha starts at the origin and makes the first move. The package is then at the point (4, 10), but he moves only until the second point. The first move, which brings him to the point (2, 10), takes him four moves, so he reaches the destination in six moves.\n\n2 + 0 + 2 + 10 + 4 + 10\n= 18.\n\n-----Constraints-----\n\n1 <= n <= 50000\n0 <= x_i, y_i <= 30000\n1 <= t <= 10^6\n\n\"\"\""
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == 'impossible'\nassert solution('5 3') == '6.00000'\nassert solution('6 5') == '9.00000'\nassert solution('5 5') == '10.00000'\nassert solution('0 10') == '10.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\n\"\"\"\n\nimport sys\nimport math\n\nlines = sys.stdin.readlines()\n\nmisha_path = []\nnadia_path = []\n\nfor line in lines[1:]:\n    line = line.rstrip('\\n')\n    line = line.split(' ')\n    line = list(map(int, line))\n    misha_path.append(line)\n\nfor line in lines[3:]:\n    line = line.rstrip('\\n')\n    line = line.split(' ')\n    line = list(map(int, line))\n    nadia_path.append(line)\n\ntime = 0\nwhile misha_path:\n    time += 1\n    misha_first_location = misha_path[0]\n    nadia_first_location = nadia_path[0]\n\n    for i in range(len(misha_path)):\n        if misha_path[i][0] == misha_first_location[0] and misha_path[i][1] == misha_first_location[1] and nadia_path[i][0] == nadia_first_location[0] and nadia_path[i][1] == nadia_first_location[1]:\n            del misha_path[i]\n            del nadia_path[i]\n            break"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 5\\n1 1\\n1 3\\n3 1\\n3 3\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == \"1\"\n\n-----Notes-----\nThe solution must use O(n) time and O(1) space.\n\"\"\""
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == '1'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2') == '1'\n\"\"\""
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == \"1\"\nassert solution(\"3 2 5\\n3 1\\n3 3\\n2 2\") == \"0\"\nassert solution(\"3 2 5\\n3 3\\n2 2\") == \"1\"\nassert solution(\"3 2 5\\n2 1\\n2 2\") == \"1\"\nassert solution(\"3 2 5\\n3 2\\n2 1\") == \"0\"\n\nprint(\"Tests passed!\")\n"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\"\"\") == \"1\"\nassert solution(\"\"\"3 2 5\n1 3\n3 1\n3 3\n2 2\"\"\") == \"0\"\nassert solution(\"\"\"3 2 5\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\"\"\") == \"0\"\nassert solution(\"\"\"3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\"\"\") == \"0\"\nassert solution(\"\"\"3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2\n2 3\n1 3\n3 1\n3 3\n2 2"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2') == 1\n"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2') == '1'\nassert solution('3 2 5\\n3 2\\n1 2\\n1 1\\n3 1\\n3 3\\n2 2') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n') == '5 3\\n1 0\\n2 4'\n\"\"\"\n\nfrom math import ceil\n\nclass Solution:\n    def parseInput(self, stdin):\n        self.N = int(stdin.readline())\n        self.M = int(stdin.readline())\n\n    def createTranslators(self):\n        self.translators = {}\n        for i in range(self.M):\n            id, languages = map(int, stdin.readline().split())\n            self.translators[id] = languages\n        self.translators = list(self.translators.items())\n        self.translators = sorted(self.translators, key = lambda x: x[0])\n\n    def createMatch(self):\n        self.matches = {}\n        for i in range(self.M):\n            for j in range(i + 1, self.M):\n                if self.translators[i][1] == self.translators[j][1]:\n                    self.matches[(i, j)] = 0\n                else:\n                    self.matches[(i, j)] = 1\n\n    def createMap(self):\n        self.remainingTranslators = []\n        for i in range(self.M):\n            self.remainingTranslators.append(i)\n\n    def findTranslation(self, pair):\n        if self.matches[pair] == 0:\n            self.matches[pair] = pair[0]\n            self.remainingTranslators.remove(pair[0])\n            self.findTranslation(pair)\n        else:\n            self.matches[pair] = pair[1]\n            self.remainingTranslators.remove(pair[1])\n            self.findTranslation(pair)\n\n    def findPair(self):\n        self.createTranslators()\n        self.createMatch()\n        self.createMap()\n        while len(self.remainingTranslators) > 0:\n            pair = min(self.remainingTranslators, key = lambda x: self.translators[x][1])\n            self.findTranslation(pair)\n\n    def printPair(self):\n        for k, v in self.matches.items():\n            print(v, end ='')\n        print()\n\n    def main(self):\n        self.findPair()\n        self.printPair()"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n\") == \"5 3\\n1 0\\n2 4\"\n\nassert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n\") == \"impossible\"\n\nassert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n\") == \"5 3\\n1 0\\n2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5 3\\n1 0\\n2 4\"\n\nassert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"impossible\"\n\nassert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"impossible\"\n\nassert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5 3\\n1 0\\n2 4\"\n\nassert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5 3\\n1 0\\n2 4\""
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n----"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3\\n1 0\\n2 4'\nassert solution('5 5\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n1 2\\n1 3\\n2 3') == 'impossible'\nassert solution('5 3\\n0 1\\n0 2\\n1 3\\n2 3') == 'impossible'\nassert solution('5 4\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2') == 'impossible'\nassert solution('5 5\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n\") == \"5 3\\n1 0\\n2 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\"\"\") == \"\"\"5 3\n1 0\n2 4\"\"\"\nassert solution(\"\"\"5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\"\"\") == \"\"\"impossible\"\"\"\nassert solution(\"\"\"3 2\n0 1\n2 1\n1 0\"\"\") == \"\"\"impossible\"\"\""
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n1\\n2\\n0\") == '2\\n1\\n0\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n') == '5 3\\n1 0\\n2 4\\n'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3''') == '5\\n1 0\\n2 4'\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 1') == '2'\nassert solution('5 5') == '5'\nassert solution('10 3') == '3'\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '2\\n1 2'"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\n\nassert solution(\"5 5\\n0 0\\n1 0\\n2 1\\n2 2\\n3 0\\n3 2\\n3 3\\n4 2\\n4 4\") == \"2\\n2 4\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == 2\nassert solution('3 1\\n-1 1\\n-1 1') == 1\n\nassert solution('4 2\\n0 0\\n0 1\\n1 0\\n1 1') == 2\nassert solution('5 1\\n-1 1\\n-1 1') == 1\nassert solution('3 2\\n1 1\\n0 1') == 2\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\nassert solution(\"4 5\\n2 -1\\n0 -2\\n3 1\\n-1 2\") == \"0\\n1 2\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\nassert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\\n1 2 3\"\nassert solution(\"4 1\\n0 0\\n1 0\\n1 1\") == \"1\\n1 2\"\nassert solution(\"5 1\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\") == \"1\\n1 2\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '2\\n1 2'\nassert solution('5 1\\n-100 -100\\n100 100') == '4\\n1 2 3 4'\nassert solution('8 1\\n0 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7') == '3\\n2 3 4 5 6 7'\n\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Set\nimport math"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0 1') == '1 2'\nassert solution('2 2\\n-10 -10\\n-10 -10') == '1 2'\n\"\"\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10 2\n1 3 5 7 9 11 13 15 17 16''') == '1'\nprint('Test Success!')\n\n\"\"\"\n\nimport numpy as np\nimport itertools\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\na.sort()\na = np.array(a)\n\ndiff = a[-1] - a[0]\nfor i in range(n - k + 1):\n    diff = min(diff, a[i+k-1] - a[i])\n\nprint(diff)"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3 5 7 9\") == 1\n\"\"\"\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().split()]\na = [int(x) for x in sys.stdin.readline().split()]\na.sort()\n\nm = []\nfor i in range(k - 1):\n    m.append(a[i + 1] - a[i])\n\nm.sort()\n\nprint(m[0])\n"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 5 7 9 11 13 15 17 16') == '1', \"case1\"\nassert solution('1 3 5 7 9 11 13 15 17 16') == '1', \"case2\"\nassert solution('1 3 5 7 9 11 13 15 17 16') == '1', \"case3\"\n\n'''"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 4\\n') == '0'\nassert solution('10 2\\n1 3 5 7 9 11 13 15 17 16\\n') == '0'\nassert solution('4 3\\n1 2 4\\n') == '1'\nassert solution('10 2\\n1 3 5 7 9 11 13 15 17 16\\n') == '1'\n\nSample Input:\n3 4\n1 2 3\nSample Output:\n-1\n"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2 3 4') == '0'\n\"\"\""
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 3 5 7') == 1\nassert solution('4 3\\n1 3 5 7') == 0\nassert solution('4 3\\n1 3 5 6') == 0\nassert solution('4 5\\n1 3 5 7 9') == 1\nassert solution('4 6\\n1 3 5 7 9 10') == 0\n"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 5 7 9 11 13 15 17 16') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\n\n\"\"\""
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 3 5 7''') == '2'\n\nassert solution('''5 2\n4 6 8 2 5''') == '0'\n\nassert solution('''7 6\n1 2 3 4 5 6 7''') == '0'\n\nassert solution('''10 10\n1 2 3 4 5 6 7 8 9 10''') == '0'\n\nassert solution('''20 10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '1'"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\\n1 3 5 7 9 11 13 15 17 16\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\na.sort()\n\nprint(a[k - 1] - a[k - 2])\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\\n') == '7 4'\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\\n\") == \"7 4\"\nassert solution(\"7 5\\nBACDB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\\n\") == \"7 10\"\n\"\"\""
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\nassert solution(\"8 5\\nABCD\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == \"1 3\"\nassert solution(\"7 5\\nABC\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == \"1 3\"\nassert solution(\"7 5\\nAB\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == \"1 3\"\nassert solution(\"7 5\\nA\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == \"1 3\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\nassert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\n\"\"\"\n\nfrom collections import namedtuple\nfrom itertools import cycle\n\nPlant = namedtuple('Plant', ['x', 'y'])"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7''') == '7 4'\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\nassert solution(\"7 5\\nCBDACB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\nassert solution(\"7 5\\nCBDACB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\n\n\"\"\"\nimport sys\nimport time\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlog = logging.getLogger(__name__)"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\nassert solution(\"7 5\\nA\\nB\\nC\\nD\\nB\\nA\\nB\\nC\\nD\") == \"7 3\"\nassert solution(\"7 5\\nA\\nB\\nC\\nD\\nC\\nA\\nB\\nC\\nD\") == \"7 2\"\nassert solution(\"7 5\\nA\\nB\\nC\\nD\\nC\\nA\\nB\\nC\\nD\") == \"7 1\"\nassert solution(\"7 5\\nC\\nA\\nB\\nD\\nC\\nA\\nB\\nC\\nD\") == \"4 4\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nassert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nDONE'\nassert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nDONE'\nassert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nDONE'\nassert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nprint(solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\"))\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(text_trap) == text_trap.rstrip()"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"HELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\"\"\""
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\"\"\"\n\nprint('Success')"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"10 LET A = 1\") == \"A = 1\"\nassert solution(\"10 LET A = 2\") == \"A = 2\"\nassert solution(\"10 LET A = 3\") == \"A = 3\"\nassert solution(\"10 LET A = 4\") == \"A = 4\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('input_01.txt').read()) == open('output_01.txt').read()\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == \"\"\"HELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\"\"\"\n\nassert solution('''10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == \"\"\"HELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\"\"\"\n\n\"\"\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1 LET A = 10\n2 PRINT A\n3 PRINTLN A\n4 LET A = A + 1\n5 IF A <= 5 THEN GOTO 2\n6 PRINTLN \"DONE\"\n\"\"\") == \"\"\"\n1 10\n2 11\n3 12\n4 13\n5 14\n6 DONE\n\"\"\"\n\nprint(solution(\n\"\"\"\n1 LET A = 10\n2 PRINT A\n3 PRINTLN A\n4 LET A = A + 1\n5 IF A <= 5 THEN GOTO 2\n6 PRINTLN \"DONE\"\n\"\"\"), \"\"\"\n1 10\n2 11\n3 12\n4 13\n5 14\n6 DONE\n\"\"\")"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 0 1\\n0 1\\n') == 3\n\"\"\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 0 1\\n0 1') == 3\nassert solution('2 0 1\\n1 1') == 2\nassert solution('2 0 1\\n0 1') == 1\n\n---------------------"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1') == '3'\n\"\"\"\n\nimport sys\n\nassert solution('3\\n0 1') == '3'\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 1\\n0 1\") == 3\nassert solution(\"3 0 1\\n0 0\") == 1\nassert solution(\"3 0 1\\n2 2\") == 0\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n0 1\n''') == '3'\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 0 1\\n0 1\\n') == '3'\nassert solution('1 1 1\\n0 1\\n') == '0'\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nnums = list(map(int, sys.stdin.readline().rstrip().split(' ')))\nmodulo = 1000000007\n\ndp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    num = nums[i - 1]\n    for j in range(n + 1):\n        dp[i][j] = dp[i - 1][j]\n        if j >= num:\n            dp[i][j] = (dp[i][j] + dp[i - 1][j - num]) % modulo\nprint(dp[n][nums[-1]])\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 1\\n0 1\") == 3\nassert solution(\"2 2 2\\n0 1\") == 2\n\n\"\"\"\n\n\n\"\"\"\nWrong solution\n\"\"\"\n\nimport itertools\nfrom functools import reduce"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n3 0 1\n0 1''') == '3'\n\n'''\n3\n3 0 1\n0 1\n3\n0 1 0\n1 1\n1 1\n'''\n\nassert solution('''6\n1 1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '8'\n\n'''\n6\n1 1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '11'\n\n'''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n'''\n\nassert solution('''4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '8'\n\n'''\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n'''\n\nassert solution('''6\n1 1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '9'\n\n'''\n6\n1 1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1\\n\") == \"3\"\n\nSample Input:\n3\n0 1 2\n1 1\nSample Output:\n3\n\nSample Input:\n4\n0 1 1 1\n1 0\nSample Output:\n2\n\nSample Input:\n4\n0 1 1 1\n1 0\nSample Output:\n1\n\nSample Input:\n7\n0 1 1 1 1 2 3\n1 0\nSample Output:\n7\n\nSample Input:\n10\n0 1 1 1 1 2 2 2 2\n0 1\nSample Output:\n21\n\nSample Input:\n10\n0 1 1 1 1 2 2 2 2 3\n0 1\nSample Output:\n38\n\"\"\""
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == 'LLRRRRLL'\nassert solution('4\\n1 2\\n2 3\\n3 4\\n1 3') == 'impossible'\n\"\"\""
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LLRRRRLL'\nassert solution('1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'impossible'\n\"\"\"\n\nfrom __future__ import print_function\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LLRRRRLL'\nassert solution('6\\n4 5\\n5 6\\n5 7\\n3 7\\n1 2\\n2 3\\n3 4') == 'LLRLRRLR'\nassert solution('2\\n1 1\\n1 2') == 'impossible'\nassert solution('3\\n1 2\\n2 3\\n1 3') == 'impossible'\nassert solution('4\\n1 2\\n1 3\\n3 4') == 'impossible'\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRRRRLL\"\nassert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"impossible\"\nassert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"impossible\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport string\nfrom collections import Counter\nfrom typing import Iterator\n\n\nclass Solution:\n    def count_edges(self, edges: Iterator[tuple[int, int]]) -> Counter[int]:\n        count = Counter()\n        for u, v in edges:\n            count[u] += 1\n            count[v] += 1\n        return count\n\n    def is_valid(self, edges: Counter[int]) -> bool:\n        count = self.count_edges(edges)\n        for u, v in count.items():\n            if v % 2!= 0:\n                return False\n        return True\n\n    def connected_components(self, edges: Counter[int]) -> list[list[int]]:\n        count = self.count_edges(edges)\n        return [\n            [edge[0] for edge in edges if edge[0] == v]\n            for v in range(1, len(count) + 1)\n            if count[v] % 2 == 0\n        ]\n\n    def connected_components_depth_first_search(\n        self, edges: Counter[int]\n    ) -> list[list[int]]:\n        count = self.count_edges(edges)\n        n = len(count)\n        visited = [False] * (n + 1)\n        components = []\n        for v in range(1, n + 1):\n            if not visited[v]:\n                component = []\n                self.dfs(edges, visited, v, component)\n                components.append(component)\n        return components\n\n    def dfs(\n        self, edges: Counter[int], visited: list[bool], v: int, component: list[int]\n    ) -> None:\n        visited[v] = True\n        component.append(v)\n        for w in edges[v]:\n            if not visited[w]:\n                self.dfs(edges, visited, w, component)\n\n    def solve(self, n: int, edges: list[tuple[int, int]]) -> str:\n        components = self.connected_components_depth_first_search(edges)\n        if not components:\n            return \"impossible\"\n        for component in components:\n            component.sort()\n            if component!= [1, 2, 3, 4, 5]:\n                return \"impossible\"\n        return \"LL\" * (n - 1)\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\") == \"LLRRRRLL\"\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n3 5\\n3 6\\n4 6\\n5 6\") == \"impossible\""
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LLRRRRLL'\nassert solution('2 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'impossible'\n\n-----Problem-----\nA program that computes the tree-balancing problem when given an incomplete, connected union of two binary trees.\n-----Test case-----\nTest case: Given the following input, your program should output the correct answer.\n\n4\n1 2\n2 3\n2 4\n1 3\n3 4\n2 2\n1 3\n2 4\n3 4\n4 1\n2 4\n1 3\n2 2\n1 2\nSample Test:\nInput:\n    1 2\n    2 3\n    2 4\n    1 3\n    3 4\n    2 2\n    1 2\n    2 4\n    3 4\n    4 1\n    2 4\n    1 3\n    2 2\n    1 2\nOutput:\n    RRLL\n    LLRR\n    LLRR\n    LLRR\n\n-----Hint---\nThis problem can be solved by using DFS.\n\n------Bibliography------\n\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.root = None\n\n    def solve(self, root, left, right):\n        if not root:\n            return self.root == None\n        if left == right:\n            self.root = left\n        if left < right:\n            self.solve(root.right, left + 1, right)\n            self.solve(root.left, left, right - 1)\n\n    def solve_recursive(self, root, left, right):\n        if not root:\n            return self.root == None\n        if left == right:\n            self.root = left\n        self.solve_recursive(root.right, left + 1, right)\n        self.solve_recursive(root.left, left, right - 1)\n\n    def solve_dfs(self, root, left, right):\n        if not root:\n            return self.root == None\n        visited = set()\n        visited.add(root)\n        stack = [root]\n        while stack:\n            current_node = stack.pop()\n            if left <= current_node.val <= right:\n                self.root = current_node.val\n            if left < current_node.val:\n                if current_node.left and current_node.left not in visited:\n                    stack.append(current_node.left)\n                    visited.add(current_node.left)\n            if current_node.val < right:\n                if current_node.right and current_node.right not in visited:\n                    stack.append(current_node.right)\n                    visited.add(current_node.right)\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('2\\n1 2\\n2 5\\n2 3\\n1 3') == 'LLRRRRLL'\nassert solution('1\\n1 2\\n2 5\\n2 3\\n1 3') == 'impossible'\nassert solution('5\\n4 3\\n2 3\\n1 4\\n1 5\\n2 4\\n2 5') == 'RRLLRRLL'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'impossible'\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4') == 'LLRRRRLL'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4') == 'impossible'\n-----Problem-----\nGiven:\n\nn, a positive integer, the number of points\nedges, a list of edges in the graph\n\nReturn:"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LLRRRRLL'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4') == 'impossible'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5') == 'impossible'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5') == 'LLRRLLRR'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5') == 'LLRRLLRR'\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\"\n) == \"LLRRRRLL\"\nassert solution(\n    \"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\"\n) == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1009 2011') == 1\nassert solution('2\\n1017 2011') == 2011\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1009 2011\\n1017 2011\") == \"1\\n2011\"\n\n-----Instructions-----\nWrite the code that will be given to the students.\n\n\"\"\"\n\nm = int(input())\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\nassert solution(\"4\\n1234 5678\\n1234 5678\\n1234 5678\\n1234 5678\") == \"3\\n1234\\n1234\\n5678\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1009 2011\\n1017 2011\") == \"1\\n2011\"\nprint('Success')\n\n-----Notes-----\n\nhttps://edabit.com/challenge/H6bJNskxAvvKx5wjE"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == '1\\n2011'\n\"\"\""
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\n\"\"\"\n\nn = int(input())\n\ndata = []\nfor i in range(n):\n    data.append(input().split(\" \"))\n\nresult = []\nfor i in range(len(data)):\n    if data[i][0] == \"1009\":\n        if data[i][1] not in result:\n            result.append(data[i][1])\n        if data[i][2] not in result:\n            result.append(data[i][2])\n    else:\n        if data[i][2] not in result:\n            result.append(data[i][2])\n        if data[i][1] not in result:\n            result.append(data[i][1])\n\nprint(len(result))\nfor i in range(len(result)):\n    print(result[i])"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin_lines) == expected_output\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\nprint(solution(stdin.read()))\n\n-----Problem-----\nFind the smallest number of employees that must be invited to meet the requirements above.\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import ceil\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2\n1009 2011\n1017 2011\"\"\") == \"\"\"1\n2011\"\"\"\nassert solution(\"\"\"3\n1009 2011\n1017 2011\n2017\"\"\") == \"\"\"1\n1017\"\"\"\nassert solution(\"\"\"4\n1009 2011\n1017 2011\n2017\n1008 2017\nSample Output:\n1\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 100\\n0 1 100\\n2 3 100\\n0 3\\n0 1\") == \"0 3\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3') == '0 3'\n\"\"\""
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\") == '0 3'\nassert solution(\"3 3\\n0 1 100\\n0 2 100\\n1 2 100\\n2 3 100\") == '0 1 2'\nassert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 2 100\\n2 3 100\\n3 0 100\\n0 3\") == '0 2 1 3'\nassert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 2 100\\n2 3 100\\n3 0 100\\n0 3\") == '0 1 2 3'\nassert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 2 100\\n2 3 100\\n3 0 100\\n0 3\") == '0 1 2 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\") == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == '0 3'\nassert solution(\"4 4\\n0 1 200\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == '0 3'\nassert solution(\"3 3\\n0 1 100\\n1 2 100\\n2 3 100\\n0 3\\n\") == '0 3'\nassert solution(\"5 10\\n0 1 100\\n1 2 100\\n2 3 100\\n3 4 100\\n4 5 100\\n0 3\\n\") == '0 3'\nassert solution(\"5 10\\n0 1 100\\n1 2 200\\n2 3 100\\n3 4 100\\n4 5 100\\n0 3\\n\") == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == \"0 3\"\n\"\"\"\n\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == \"0 3\"\nassert solution(\"2 3\\n0 1 100\\n0 2 100\\n1 3 100\\n0 3\\n\") == \"0 1\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == \"0 3\"\nprint(solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == \"0 3\")\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0\") == \"20\"\n\"\"\"\nfrom __future__ import annotations\n\nimport math\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0\") == '20'\n\"\"\""
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0\") == \"20\"\n\n-----Solution-----\n\nfrom math import *\na, m = list(map(float, stdin.split()))\ns = [list(map(int, stdin.split())) for _ in range(3)]"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n\"\"\"\n\n\na, m = map(float, stdin.readline().split())\n\nH, W = map(int, stdin.readline().split())\nX, Y = map(int, stdin.readline().split())\n\nh_array = [int(h) for h in stdin]\n\nseen = set()"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0\") == \"20\"\nassert solution(\"2.0 10.0\\n3 3 0 0\\n1000 1000 100\\n100 0 0\") == \"10\"\nassert solution(\"2.0 10.0\\n3 3 0 0\\n100 0 0\") == \"10\"\nassert solution(\"2.0 10.0\\n3 3 0 0\\n100 1000 100\") == \"8\"\nassert solution(\"2.0 10.0\\n3 3 0 0\\n100 1000 100\\n100 0 0\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'\n\"\"\""
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'\nassert solution('2.0 10.0\\n3 3 0 0\\n5 5 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'\n\"\"\"\n\nfrom math import cos, sin, pi\n\nfrom rich import traceback\n\ntraceback.install()\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 2 3\\n3 0 1 2') == '4', 'WA'\nassert solution('3\\n1 2 3\\n2 1 3') == '2', 'WA'\nassert solution('3\\n1 2 3\\n1 2 3') == '2', 'WA'"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1\\n0 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\n\nimport sys\nimport itertools\n\nsys.setrecursionlimit(10000)\n\nn = int(sys.stdin.readline())\n\npreference_list = []\nfor i in range(n):\n    line = list(map(int, sys.stdin.readline().split()))\n    preference_list.append(line[1:])"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 1 2 3 4 5 6\\n0 1 3 4 5 6\") == '4'\nassert solution(\"2\\n0 1 3 4 5 6\\n0 1 4 5 6\") == '2'\nassert solution(\"2\\n0 1 2 3 4 5 6\\n0 2 3 4 5 6\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\n\nassert solution('''\n3\n0 2 3\n0 1 3\n1 3 2\n''') == '0'\n\nassert solution('''\n5\n0 2 3 4 5\n0 1 3 4 5\n1 4 5 2 3 1\n2 4 5 3 1 2\n1 2 5 3 4 0\n3 1 2 4 5 0\n''') == '0'\n\nassert solution('''\n5\n0 2 3 4 5\n0 1 3 4 5\n1 4 5 2 3 1\n2 4 5 3 1 2\n1 2 5 3 4 0\n3 1 2 4 5 0\n''') == '2'\n\nassert solution('''\n5\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 4 2 3 0 1\n2 3 4 0 1 2\n3 4 0 1 2 3\n''') == '0'"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == 4\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\n\n'''\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7') == '4'\nassert solution('4\\n1 1\\n1 2 3\\n2 3 4\\n3 4 5') == '4'\nassert solution('4\\n1 2\\n2 3\\n3 4\\n4 1') == '3'\nassert solution('4\\n1 2\\n2 1\\n2 3\\n3 4\\n4 1') == '3'\nassert solution('4\\n1 1\\n1 2 1\\n1 2 3\\n2 3 4\\n4 1') == '4'\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7') == 4\n\n\"\"\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\nassert solution(\"2\\n1 1\\n1 1\") == \"1\"\nassert solution(\"3\\n1 1\\n1 1\\n1 1\") == \"1\"\n\n----\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\nassert solution(\"4\\n2 3 4 5\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\nassert solution(\"4\\n2 3 4 5\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\nassert solution(\"4\\n3 4 5 6\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\n\n-----Constraints-----\n* 2 <= N <= 1500\n* 1 <= R, C <= N\n* 1 <= petals[i] <= 1000000\n* There are no two adjacent flowers with the same number of petals\n* The grasshopper can move in any direction\n\n\"\"\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == 4\n\"\"\""
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7') == '4'\n\n-----\nSample Input:\n4\n2 2\n1 2 3 4\n3 2 1\n1 1\n1 1\nSample Output:\n4\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == 4\nprint(solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\n\n-------\n\n>>>\n>>>\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nA grasshopper is in a flower field. The field contains $N \\cdot N$ flowers arranged in $N$ rows and $N$ columns. For each flower in the field, we know how many petals it has.\n\nThe grasshopper is initially on the flower in row $R$ and column $C$. Its goal is to visit as many flowers as possible while obeying these rules:\n - It can only jump into an adjacent row or column. If it jumps into the adjacent row, it must jump at least two columns, and if it jumps into the adjacent column, it must jump at least two rows. In other words, it can jump from flower $(r_1, c_1)$ to flower $(r_2, c_2)$ if:\n - $|r_1 -r_2| = 1$ and $|c_1 -c_2 |> 1$ or\n - $|c_1 -c_2| = 1$ and $|r_1 -r_2 |> 1$\n - The number of petals on the next flower must be strictly larger than the number of petals on the previous flower.\n\nWrite a program that calculates the largest number of flowers the grasshopper can visit.\n\n-----Input-----\nThe first line contains the integer $N$ ($1 \\le N \\le 1500$), the size of the field.\n\nThe second line contains integers $R$ ($1 \\le R \\le N$) and $C$ ($1 \\le C \\le N$), the grasshopper\u2019s initial position.\n\nThe next $N$ lines contain $N$ positive integers separated by spaces, each at most $1000000$, the numbers of petals on the flowers.\n\n-----Output-----\nOutput a single integer \u2013 the largest number of flowers the grasshopper can visit.\n\n-----Examples-----\nSample Input:\n4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\nSample Output:\n4\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1 2 3 4\\n') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2\\n3\\n4\\n') == ''\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\n\"\"\""
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nprint('Passed')\n\n------\n-----Input-----\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\nSample Output:\n6\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution_tester.TestCase(input)) == output\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == 6\n\n\"\"\""
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1''') == '6'\nprint('Passed')\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\n'''"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\n\n-------------\n\n\"\"\""
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\n\"\"\""
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == 6\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\"\"\"\n1. Have all points within the range covered by one tower.\n2. Sort towers by x coordinate.\n3. Find the upper bound of the area covered by the towers.\n\"\"\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n2\\n2\") == \"5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\") == \"4\"\nassert solution(\"1\\n2\\n2\") == \"3\"\nassert solution(\"3\\n2\\n2\\n2\") == \"4\"\n\nimport os, io, unittest\nfrom collections import Counter\n\nclass SolutionTest(unittest.TestCase):\n    def test(self):\n        with open(os.path.join(os.path.dirname(__file__), \"resources/input3.txt\"), \"r\") as f:\n            stdin = f.read()\n        with io.StringIO() as buf, redirect_stdout(buf):\n            solution(stdin)\n            stdout = buf.getvalue()\n        with io.StringIO() as buf, redirect_stdout(buf):\n            solution(stdin)\n            solution_best_effort(stdin)\n            best_effort = buf.getvalue()\n        self.assertEqual(stdout, best_effort)"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2\\n2\\n2\\n') == '5'\nassert solution('3\\n1\\n2\\n2\\n') == '6'\nassert solution('3\\n1\\n1\\n2\\n') == '6'\n\nassert solution('3\\n2\\n2\\n2\\n') == '5'\nassert solution('3\\n1\\n2\\n2\\n') == '6'\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2\\n2\\n2') == '5'\nassert solution('3\\n1\\n1\\n1') == '3'\nassert solution('1\\n1\\n1') == '1'\nassert solution('2\\n2') == '2'\nassert solution('2\\n1') == '2'\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n'''\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nk = int(input[0])\n\ndurations = []\n\nfor i in range(1, len(input)):\n    durations.append(int(input[i]))"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n2\\n2') == '5'\nassert solution('1\\n2') == '1'\n\"\"\"\n\nimport math\nimport sys\nimport os"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n1 2\") == \"5\"\nassert solution(\"1 2\\n2 1\") == \"1\"\nassert solution(\"1 2\\n2 2\") == \"0\""
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"7\"\nassert solution
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2\\n2\\n2\\n1\\n') == 5\nassert solution('3\\n3\\n3\\n1\\n') == 3\nassert solution('1\\n2\\n3\\n2\\n') == 4\nassert solution('1\\n1\\n1\\n1\\n') == 1\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2\\n2\\n2\") == \"5\"\n\nassert solution(\"3\\n2\\n1\\n2\") == \"4\"\n\nassert solution(\"3\\n2\\n1\\n2\\n1\\n3\\n3\") == \"3\"\n\nassert solution(\"3\\n2\\n1\\n2\\n1\\n2\\n3\\n3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\n\nassert solution('1 3\\n2 2 2 1\\n2 2 2 1') == '2 2'\n\nassert solution('1 3\\n2 2 2 1\\n2 2 2 1\\n2 2 2 1') == '2 2'\n\nassert solution('1 3\\n2 2 2 1\\n2 2 2 1\\n2 2 2 1') == '2 2'\n\nassert solution('1 3\\n2 2 2 1\\n2 2 2 1\\n2 2 2 1') == '2 2'"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 3\n2 2 2 1''') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('./pikeman.input.txt')) == '1 1'\n\"\"\"\n\n\"\"\"\n- Inputs:\n    1 3\n    2 2 2 1\n- Outputs:\n    1 1\n\"\"\"\n\n\"\"\"\n- Inputs:\n    1 3\n    4 5 3 1\n- Outputs:\n    0\n\"\"\""
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 2 2 1\\n\") == \"1 1\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2 1\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 2\\n1 2 2 3 1\") == \"5 3\"\n\"\"\""
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 2 1') == '1 1'\nassert solution('10 2 10 1') == '2 2'\nassert solution('1 3') == '1 1'\nassert solution('10 3 10 1') == '2 2'\nassert solution('10 4 10 1') == '2 2'\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2 1') == '1 1'\nassert solution('1 3') == '1 1'\nassert solution('2 2 2 1') == '1 1'\nassert solution('1 3') == '1 1'\nassert solution('2 2 2 1') == '1 1'\n\nprint(solution(stdin))\n\n'''"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 3 1 2\\n2 2 2 1') == '1 1'\nassert solution('6 10\\n1 2 3 4 5 6 7 8\\n5 5 6 7 8 9 10') == '1 1'\nassert solution('12 100\\n3 4 7 10 9 15\\n5 7 9 10 15 15') == '2 1'\n\"\"\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(samples.problem(1)) == samples.solution(1)\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 10\n\n\"\"\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '10'\n\"\"\""
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 10\nassert solution('2') == 82\nassert solution('3') == 729\nassert solution('4') == 689\nassert solution('5') == 763\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '10'\n\"\"\"\n\nfrom math import factorial, pow"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"6\"\nassert solution(\"3\") == \"10\"\n\"\"\""
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 10\n\"\"\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 10\n\n-----------------\nSample Input:\n2\nSample Output:\n8\n\n-----------------\nSample Input:\n3\nSample Output:\n24\n\n-----------------\nSample Input:\n4\nSample Output:\n50\n\n-----------------\nSample Input:\n5\nSample Output:\n38\n\n-----------------\nSample Input:\n6\nSample Output:\n84\n\n-----------------\nSample Input:\n7\nSample Output:\n128\n\n-----------------\nSample Input:\n8\nSample Output:\n276\n\n-----------------\nSample Input:\n9\nSample Output:\n356\n\n-----------------\nSample Input:\n10\nSample Output:\n584\n\n-----------------\nSample Input:\n11\nSample Output:\n982\n\n-----------------\nSample Input:\n12\nSample Output:\n1134\n\n-----------------\nSample Input:\n13\nSample Output:\n1286\n\n-----------------\nSample Input:\n14\nSample Output:\n1698\n\n-----------------\nSample Input:\n15\nSample Output:\n2520\n\n-----------------\nSample Input:\n16\nSample Output:\n4120\n\n-----------------\nSample Input:\n17\nSample Output:\n4842\n\n-----------------\nSample Input:\n18\nSample Output:\n8970\n\n-----------------\nSample Input:\n19\nSample Output:\n14142\n\n-----------------\nSample Input:\n20\nSample Output:\n246952\n\n-----------------\nSample Input:\n21\nSample Output:\n306938\n\n-----------------\nSample Input:\n22\nSample Output:\n374858\n\n-----------------\nSample Input:\n23\nSample Output:\n532798\n\n-----------------\nSample Input:\n24\nSample Output:\n681246\n\n-----------------\nSample Input:\n25\nSample Output:\n1057373\n\n-----------------\nSample Input:\n26\nSample Output:\n1135941\n\n-----------------\nSample Input:\n27\nSample Output:\n1198976\n\n-----------------\nSample Input:\n28\nSample Output:\n1366164\n\n-----------------\nSample Input:\n29\nSample Output:\n1411939\n\n-----------------\nSample Input:\n30\nSample Output:\n1856207\n\n-----------------\nSample Input:\n31\nSample Output:\n2386671\n\n-----------------\nSample Input:\n32\nSample Output:\n3076387\n\n-----------------\nSample Input:\n33\nSample Output:\n3405349\n\n-----------------\nSample Input:\n34\nSample Output:\n3232523\n\n-----------------\nSample Input:\n35\nSample Output:\n3374701\n\n-----------------\nSample Input:\n36\nSample Output:\n3589367\n\n-----------------\nSample Input:\n37\nSample Output:\n3852591\n\n-----------------\nSample Input:\n38\nSample Output:\n390785\n\n-----------------\nSample Input:\n39\nSample Output:\n4275\n\n-----------------\nSample Input:\n40\nSample Output:\n44\n\n-----------------\nSample Input:\n41\nSample Output:\n45\n\n-----------------\nSample Input:\n42\nSample Output:\n455542\n\n-----------------\nSample Input:\n43\nSample Output:\n462619\n\n-----------------\nSample Input:\n44\nSample Output:\n470342\n\n-----------------\nSample Input:\n45\nSample Output:\n50\n\n-----------------\nSample Input:\n46\nSample Output:\n49\n\n-----------------\nSample Input:\n47\nSample Output:\n51\n\n-----------------\nSample Input:\n48\nSample Output:\n527423\n\n-----------------\nSample Input:\n49\nSample Output:\n52\n\n-----------------\nSample Input:\n50\nSample Output:\n55\n\n-----------------\nSample Input:\n51\nSample Output:\n58\n\n-----------------\nSample Input:\n52\nSample Output:\n61\n\n-----------------\nSample Input:\n53\nSample Output:\n63\n\n-----------------\nSample Input:\n54\nSample Output:\n66\n\n-----------------\nSample Input:\n55\nSample Output:\n68\n\n-----------------\nSample Input:\n56\nSample Output:\n70\n\n-----------------\nSample Input:\n57\nSample Output:\n73\n\n-----------------\nSample Input:\n58\nSample Output:\n75\n\n-----------------\nSample Input:\n59\nSample Output:\n78\n\n-----------------\nSample Input:\n60\nSample Output:\n81\n\n-----------------\nSample Input:\n61\nSample Output:\n84\n\n-----------------\nSample Input:\n62\nSample Output:\n87\n\n-----------------\nSample Input:\n63\nSample Output:\n90\n\n-----------------\nSample Input:\n64\nSample Output:\n93\n\n-----------------\nSample Input:\n65\nSample Output:\n96\n\n-----------------\nSample Input:\n66\nSample Output:\n99\n\n-----------------\nSample Input:\n67\nSample Output:\n102\n\n-----------------\nSample Input:\n68\nSample Output:\n105\n\n-----------------\nSample Input:\n69\nSample Output:\n108\n\n-----------------\nSample Input:\n70\nSample Output:\n111\n\n-----------------\nSample Input:\n71\nSample Output:\n114\n\n-----------------\nSample Input:\n72\nSample Output:\n117\n\n-----------------\nSample Input:\n73\nSample Output:\n120\n\n-----------------\nSample Input:\n74\nSample Output:\n123\n\n-----------------\nSample Input:\n75\nSample Output:\n126\n\n-----------------\nSample Input:\n76\nSample Output:\n129\n\n-----------------\nSample Input:\n77\nSample Output:\n132\n\n-----------------\nSample Input:\n78\nSample Output:\n135\n\n-----------------\nSample Input:\n79\nSample Output:\n138\n\n-----------------\nSample Input:\n80\nSample Output:\n141\n\n-----------------\nSample Input:\n81\nSample Output:\n144\n\n-----------------\nSample Input:\n82\nSample Output:\n147\n\n-----------------\nSample Input:\n83\nSample Output:\n150\n\n-----------------\nSample Input:\n84\nSample Output:\n153\n\n-----------------\nSample Input:\n85\nSample Output:\n156\n\n-----------------\nSample Input:\n86\nSample Output:\n159\n\n-----------------\nSample Input:\n87\nSample Output:\n162\n\n-----------------\nSample Input:\n88\nSample Output:\n165\n\n-----------------\nSample Input:"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '55'\nassert solution('3') == '220'\nassert solution('4') == '2660'\nassert solution('5') == '63650'\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\") == 10\n\"\"\""
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '70'\nassert solution('3') == '150'\nassert solution('4') == '588'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1000 1 0\\n1 1000 1') == '0.001'\nassert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\nassert solution('1 2\\n100 1 1\\n1 100 1') == '0.01'\nassert solution('1 2\\n100 1 1\\n1 100 1') == '0.01'\nassert solution('1 2\\n10 1 1\\n1 10 1') == '0.1'\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1000 1 0\\n1 1000 1\") == \"0.001\"\nassert solution(\"2 6\\n1001 200 1 1\\n1 1001 2 1\\n1 1001 3 1\\n1 1001 4 1\\n1 1001 5 1\\n1 1001 6 1\") == \"0.500\"\nassert solution(\"1 8\\n1 1000 1\\n1 1001 1\\n1 1001 2\\n1 1001 3\\n1 1001 4\\n1 1001 5\\n1 1001 6\\n1 1001 7\") == \"0.667\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 1 0\\n1 1000 1\") == \"0.001\""
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 5\n1000 1 0\n1000 1 0\n1000 1 1\n1000 1 1\n1000 1 1\n\"\"\") == \"0.001\"\nprint(\"Passed\")\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1000 1 0\\n1 1000 1\") == 0.001\n\"\"\"\n\nimport math"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1000 1 0\\n1 1000 1\\n') == '0.001'\n\"\"\"\nimport sys\n\nclass Solution:\n    def compute(self, cand_dict: dict):\n        # store each candidate's (salary, productivity, rec_num) in a list\n        # sort this list by productivity in desc order\n        sorted_list = sorted(cand_dict.values(), key=lambda x: x[1], reverse=True)\n        # Initialize variables\n        max_value = 0\n        min_rec_num = 0\n        max_salary = sorted_list[0][0]\n        # Assign each candidate to the team, keeping in mind that candidates can only be assigned to a team if their rec_num is higher than the minimum rec_num that is assigned to the team\n        for candidate in sorted_list:\n            if candidate[2] > min_rec_num:\n                min_rec_num = candidate[2]\n                max_value += candidate[1] / candidate[0]\n            # Increment min_rec_num if a higher rec_num is assigned to the team\n            else:\n                min_rec_num += 1\n        return max_value\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1000 1 0\\n1 1000 1\") == \"0.001\"\nassert solution(\"1 2\\n1000 1 0\\n100 1000 1\") == \"1000.0\"\nassert solution(\"1 2\\n1000 1 0\\n1000 100 1\") == \"1000.0\"\nassert solution(\"1 2\\n1000 1 0\\n100 100 1\") == \"1000.0\"\nassert solution(\"1 2\\n1000 1 0\\n100 1000 1\\n1000 100 1\") == \"1000.0\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n2000 3 10\\n1000 4 15\") == \"0.333\"\n\"\"\"\n\n\nfrom math import prod\nfrom typing import List\nfrom typing import Tuple\n\nEmployee = Tuple[int, float, int]\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == expected_result_1"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 2 10000\\n1 2\\n2 3\\n3 4') == '0'\nassert solution('4 4 3 10000\\n1 2\\n2 3\\n3 4') == '0'\nassert solution('4 4 2 10000\\n1 2\\n2 2\\n3 3') == '1'\nassert solution('4 4 2 10000\\n1 2\\n2 2\\n3 3\\n3 4') == '0'\n\"\"\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == '0'"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"0\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom typing import Callable, DefaultDict, List, Set, Tuple\nfrom copy import deepcopy\n\nsys.setrecursionlimit(10 ** 9)"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2\\n1 3') == '1'\nassert solution('2\\n3 3\\n1 2\\n1 3\\n1 1\\n1 3') == '0'\nassert solution('2\\n3 3\\n1 2\\n1 2\\n1 2\\n1 2\\n1 3') == '0'\nassert solution('3\\n1 2\\n1 3\\n2 3\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == '0'\nassert solution('3\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == 0\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'\n\"\"\"\n\nimport sys\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n') == '1'\nassert solution('2\\n2\\n') == '0'\nassert solution('3\\n2\\n') == '2'\nassert solution('4\\n3\\n') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3\\n') == '0'\n'''\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == 0\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == 26\n'''\nimport sys"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == 26\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n2 3 4') == '8'"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input_string) == output_string\n\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\\n1 2 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == 26\n\"\"\"\n\n\"\"\"\nIntuition\n\nGiven a graph G = (V, E), we can construct a graph where each edge is replaced with the color of its current edge, and we remove all nodes that do not have any outgoing edges. In this graph, we can represent a node as a set of all colors that have edges to it. We can define the set of all nodes N(V) as the set of all nodes that have outgoing edges.\n\nIn the above example, N(V) = {1, 2, 3}. We can then construct a graph where each node represents a set of colors and each edge is the color of the edge between its parent node and its child node.\n\nFor example, in the above graph, the following graphs are possible:\n\nG_a = (V, E_a) = (3, {1: {0}, 2: {1}, 3: {2}})\nG_b = (V, E_b) = (3, {1: {0, 1}, 2: {2}, 3: {0, 3}})\nG_c = (V, E_c) = (3, {1: {0, 1}, 2: {2}, 3: {0, 2}})\nG_d = (V, E_d) = (3, {1: {0}, 2: {1}, 3: {0, 2}})\nG_e = (V, E_e) = (3, {1: {0}, 2: {1}, 3: {2}})\n\nA graph can be uniquely uniquely represented as a list of edges: [ (u, v), (u, v),... ].\n\nA graph can also be uniquely uniquely represented as a list of edges and a list of nodes: [ (u, v), (u, v),... ], [1, 2, 3].\n\nIn the above example, G_a = [ (1, 0), (1, 2), (1, 3) ], N_a = [1, 2, 3], and so G_a = N_a = {1, 2, 3}.\n\nA graph can be uniquely uniquely represented as a list of edges and a list of sets: [ (u, v), (u, v),... ], [{1, 2}, {3}.\n\nA graph can also be uniquely uniquely represented as a list of edges and a list of sets: [ (u, v), (u, v),... ], [{1, 2}, {1, 3}.\n\nA graph can also be uniquely uniquely represented as a list of edges and a list of sets: [ (u, v), (u, v),... ], [{1, 2}, {2, 3}.\n\nWe can see that in G_d, N_d = {1, 2, 3} and E_d = [(1, 2), (1, 3)], so G_d = N_d = E_d = {(1, 2), (1, 3)}.\n\nRecursive Solution\n\nOne way to iteratively construct these graphs from the input is as follows:\n\nFrom the first line of input, construct a list of edges and a list of nodes: G = [ (u, v),... ].\nFrom the second line of input, construct a list of edges and a list of nodes: N = [ (u, v),... ].\nFor each edge in N:\nConstruct G_i = [ (u, v),... ] from G_i and N_i: N_i_edges = [(u, v),...], N_i_nodes = {u, v}.\nFor each node in N_i, add N_i_nodes to G_i_nodes.\nReturn the list of nodes in G_i_nodes.\nThe recursion is also trivial:\n\nG = [ (u, v),... ]\nG_1 = [ (u, v),... ]\nG_2 = [ (u, v),... ]\nG_3 = [ (u, v),... ]\nG_1_nodes = [u, v]\nG_2_nodes = [u, v]\nG_3_nodes = [u, v]\nreturn G_1_nodes + G_2_nodes + G_3_nodes.\n\nWe can now see that we can reach G_a and G_b from G_d.\n\nTo construct G_a, we add the following edges:\n\nG_a = [ (1, 0), (1, 2), (1, 3) ]\n\nG_a_nodes = {1, 2, 3}\n\nG_a_edges = {(1, 0), (1, 2), (1, 3)}\n\nG_a_nodes = {1, 2, 3}\n\nG_a_edges = {(1, 0), (1, 2), (1, 3)}\n\nG_a_edges.union(G_a_nodes) = {(1, 0), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3)}\n\nG_a_edges = {(1, 0), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3)}\n\nG_a_nodes = {1, 2, 3}\n\nG_a_edges = {(1, 0), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3)}\n\nG_a_edges.union(G_a_nodes) = {(1, 0), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3)}\n\nG_a_edges = {(1, 0), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4\\n2 0 2 2') == '4'\nassert solution('1 1 1 1\\n1 1 1 1') == '0'\n'''\n"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == 26\n\n---Problem---\nThe Birkhoff-von-Neumann theorem states that the number of edges for a graph is equal to the sum of the maximum of the number of edges from a given node to all other nodes, minus the number of edges from the given node to all other nodes.\n\nFor instance, the number of edges from a node is equal to the number of edges from the given node to all other nodes. If there are $n$ nodes and $m$ edges in the graph, then the number of edges from each node is $m/n + (n-1)/n$.\n\nSuppose we have a graph with $n$ nodes and $m$ edges. Since the number of edges from each node is equal to the number of edges from the given node to all other nodes, we can compute the number of edges from each node $m/n + (n-1)/n$ times.\n\nWhen we compute the number of edges from each node, we can compute the number of edges from each node $m/n + (n-1)/n$ times. Then, if we compute the number of edges from each node $k$ times, we get $m + (n-1)k$. Since $m + (n-1)k$ is an integer, we get $m + (n-1)k = k(m + (n-1))$. Since $m + (n-1)k$ is divisible by $n$, we get $k(m + (n-1))$ divisible by $n$.\n\nAs a result, we get that the number of edges from each node in the graph is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nSuppose we have a graph with $n$ nodes and $m$ edges. When we compute the number of edges from each node, we get $m/n + (n-1)/n$ times. When we compute the number of edges from each node $k$ times, we get $m + (n-1)k$. Since $m + (n-1)k$ is divisible by $n$, we get $k(m + (n-1))$ divisible by $n$.\n\nAs a result, the number of edges from each node in the graph is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nIn particular, let $n=2^{x+y} - 1$. Then, let $k$ be any integer and let $m$ be the sum of the sequence $k, k+1, k+2,...$ up to $n$, which is $m = (n-1)k$. Then $m + (n-1)k = k(m + (n-1))$ is divisible by $n$, and we get $k(m + (n-1))$ divisible by $n$.\n\nTherefore, since the graph has $n=2^{x+y} - 1$ nodes, the number of edges from each node is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nIn general, for $n=2^x + 1$, let $k$ be any integer and let $m$ be the sum of the sequence $k, k+1, k+2,..., k+(n-1)$ up to $n$. Then $m + (n-1)k = k(m + (n-1))$ is divisible by $n$, and we get $k(m + (n-1))$ divisible by $n$.\n\nTherefore, the number of edges from each node is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nIn particular, let $n=2^{x+y} - 1$. Then the number of edges from each node is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nIn general, for $n=2^x + 1$, let $k$ be any integer and let $m$ be the sum of the sequence $k, k+1, k+2,..., k+(n-1)$ up to $n$. Then $m + (n-1)k = k(m + (n-1))$ is divisible by $n$, and we get $k(m + (n-1))$ divisible by $n$.\n\nTherefore, the number of edges from each node is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nIn particular, for $n=2^{x+y} - 1$, the number of edges from each node is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nSo, for any graph, we can compute the number of edges from each node using the following formula:\n\nThe number of edges from each node $f(n)$ is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nIn general, for $n=2^x + 1$, the number of edges from each node $f(n)$ is equal to the number of edges from the given node to all other nodes, modulo $n$.\n\nSince the number of edges from each node $f(n)$ is equal to the number of edges from the given node to all other nodes, modulo $n$, we have $f(n) = n$.\n\n###Solution:"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.333333333\\n0.666666667'\nprint(solution(stdin))\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1 0\\n1 1\\n1 1\\n0 1\\n0 1\\n\"\nassert solution(\"3 4\") == \"2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n0 2\\n0 2\\n\"\nassert solution(\"2 2\") == \"1 1\\n0 0\\n1 0\\n1 0\\n1 0\\n\"\nassert solution(\"3 3\") == \"1 1\\n1 1\\n0 1\\n1 1\\n1 1\\n\"\nassert solution(\"3 3\", \"1 1\") == \"1 1\\n0 1\\n1 1\\n1 1\\n1 1\\n\"\n\"\"\""
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\") == \"0.3333333333333333 0.6666666666666666\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\") == '0.3333333333333333333333333333'\n\"\"\"\n\nfrom math import log\n\ninput_size = input().split()\n\ngrid_w = int(input_size[0])\ngrid_h = int(input_size[1])\n\nline_1 = input()\nline_2 = input()\nline_3 = input()\nline_4 = input()"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\") == \"0.3333333333333333 0.6666666666666666\"\nprint(solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\"))\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\") == \"0.333333333 0.666666667\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n.X\\nT.T\\n\") == \"0.66666667\"\nassert solution(\"5 5\\nX...X\\n....T\\n...X.\\nTT...\") == \"0.05555556\"\n\n\"\"\"\n\nfrom math import gcd\nfrom typing import List"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 10\") == \"0.25\"\nassert solution(\"1 1 1 1\") == \"0.25\"\nassert solution(\"4 2 10 5\") == \"0.25\"\nassert solution(\"5 1 1 1 1\") == \"0.25\"\nassert solution(\"3 2 10 3\") == \"0.50\"\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.333333333\\n0.666666667'\nprint(solution(stdin))\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\") == \"0.3333333333333333 0.6666666666666666\"\n\"\"\"\n\nfrom typing import List\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('0 0 90 90') == '0.0'\nassert solution('10 10 10 10') == '1.0'\nassert solution('1 1 1 1') == '0.25'\nassert solution('2 2 2 2') == '0.5'\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"30 -45 0 90\") == \"0.75\"\nassert solution(\"45 30 0 90\") == \"1.0\"\n\"\"\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\n\n\"\"\"\n\na, b, c, d = map(float, stdin.split())"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\n\"\"\"\n\na, b, c, d = map(float, stdin.split())\n\nA = a * c\nB = a * d\nC = b * c\nD = b * d\n\narea = (A + B + C + D) / 2\nprint(area * 2)\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"45 45 0 0\") == '0.75'\nassert solution(\"10 50 10 50\") == '0.24'\nassert solution(\"60 60 20 20\") == '0.28'\n\"\"\""
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\n\"\"\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"10 10 10 10\") == \"1.0\"\nassert solution(\"10 10 20 10\") == \"0.3\"\nassert solution(\"0 0 0 10\") == \"1.0\"\n\n\"\"\""
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\n\"\"\""
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('45 45 0 0') == 0.75\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('ABC') == ''\n\nassert solution('''\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nassert solution('''\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9''') == '4'\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\\n\") == \"4\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == 0\nassert solution(\"10 2\") == 10\nassert solution(\"1 1\") == 0\nassert solution(\"10 2\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == 4\n\nimport sys\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\n\"\"\""
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\nassert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\nassert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n10 10 0 5') == '100'\nassert solution('2\\n10 10 10 10') == '20'\nassert solution('3\\n10 10 10 10') == '10'\nassert solution('4\\n10 10 10 10') == '20'\nassert solution('5\\n10 10 10 10') == '20'\n\"\"\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n10 10 0 5\") == \"100\"\nassert solution(\"2\\n10 10 0 5\\n10 10 0 5\") == \"200\"\nassert solution(\"3\\n10 10 0 5\\n10 10 0 5\\n10 10 0 5\") == \"300\"\nassert solution(\"4\\n10 10 0 5\\n10 10 0 5\\n10 10 0 5\\n10 10 0 5\") == \"400\"\n\n\"\"\""
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10 0 5\\n') == '100'\n\"\"\""
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 7 0 7\") == \"100\"\nassert solution(\"7 9 0 7\") == \"100\"\nassert solution(\"7 7 0 10\") == \"101\"\nassert solution(\"7 7 0 7\") == \"100\"\nassert solution(\"7 7 0 9\") == \"101\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n10 10 0 5\\n\") == \"100\"\n\"\"\""
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 0 5\") == \"100\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10 10 0 5\") == \"100\"\nassert solution(\"2\\n1000 100 0 100\\n10000 10 0 1000\") == \"10001\"\nassert solution(\"3\\n1000 100 0 100\\n10000 10 0 1000\\n1000 10 0 1000\") == \"10000\"\n\"\"\""
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n5\\n3\\n1\\n4\\n3\\n0\\n10\\n3') == '35'\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 0 5\\n\") == 100\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"2\\n\"\n\"1 1 2 2\\n\"\n\"2 2 2 1\"\n) == 1\nassert solution(\n\"2\\n\"\n\"1 1 4 2\\n\"\n\"2 2 1 3\"\n) == 0\n"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == 1\n\"\"\"\n\n\"\"\"\nPROGRAM:\nGiven N axis-aligned rectangles where N <= 10^5, return the number of pairs of overlapping rectangles.\n\nThe input is comprised of N lines, each containing 4 integers, the coordinates of the left and right edges of a rectangle.\n\"\"\""
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\") == \"1\"\n\n-----Solution-----\n\nn = int(stdin.readline())\nrectangles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\nprint(0)\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (rectangles[i][0] <= rectangles[j][0] < rectangles[i][2] or\n                rectangles[i][0] < rectangles[j][2] <= rectangles[i][2] or\n                rectangles[i][1] <= rectangles[j][1] < rectangles[i][3] or\n                rectangles[i][1] < rectangles[j][3] <= rectangles[i][3]):\n            print(1)\n            break\n    else:\n        continue\n    break\n\nimport math\n"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n0 0 3 3\\n1 1 4 5\\n4 4 6 8') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 1 3 4\\n5 7 6 8') == '1'\n'''\n\nimport sys"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\") == 1\n\"\"\"\n\nimport math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __eq__(self, o: object) -> bool:\n        if isinstance(o, Point):\n            return self.x == o.x and self.y == o.y\n        return False"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n7 6\\n5 8\\n0 5\\n2 5\\n5 8\\n7 0\\n2 2\\n5 1\\n4 2\\n2 3\\n4 0\\n0 0\\n1 1\\n4 3\\n2 2\\n0 4\\n0 4\\n0 0\\n0 1\\n1 1\\n0 2\\n1 3\\n1 2\\n0 0') == 1\nassert solution('5 7\\n7 6\\n5 8\\n0 5\\n2 5\\n5 8\\n7 0\\n2 2\\n5 1\\n4 2\\n2 3\\n4 0\\n0 0\\n1 1\\n4 3\\n2 2\\n0 4\\n0 4\\n0 0\\n0 1\\n1 1\\n0 2\\n1 3\\n1 2\\n0 0') == 0\nassert solution('5 8\\n7 6\\n5 8\\n0 5\\n2 5\\n5 8\\n7 0\\n2 2\\n5 1\\n4 2\\n2 3\\n4 0\\n0 0\\n1 1\\n4 3\\n2 2\\n0 4\\n0 4\\n0 0\\n0 1\\n1 1\\n0 2\\n1 3\\n1 2\\n0 0') == 0\n\n'''\nfrom typing import List"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '1'"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n') == 17\n'''\n\nimport sys"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3 3\\n1 2 3\\n6 6 6\\nS S S') == '6'\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass CliffWalking:\n    def __init__(self, rows: int, cols: int):\n        self.rows = rows\n        self.cols = cols\n        self.grid = defaultdict(list)\n        self.obstacles = set()\n        self.start = None\n\n    def load(self, input_str: str) -> None:\n        for r, line in enumerate(input_str.split('\\n')):\n            if r == 0:\n                for c, ch in enumerate(line):\n                    if ch == 'S':\n                        self.start = (r, c)\n            else:\n                for c, ch in enumerate(line):\n                    if ch!= 'E':\n                        self.obstacles.add((r, c))\n                    if ch == 'E':\n                        self.grid[(r, c)].append((r, c))\n\n    def is_valid_position(self, r: int, c: int) -> bool:\n        return (0 <= r < self.rows) and (0 <= c < self.cols) and (r, c) not in self.obstacles\n\n    def is_valid_path(self, path: list) -> bool:\n        return len(path) == self.cols and path[0] == self.start and path[-1] == self.start\n"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9''') == '17'\n\n'''\nOn a single row, we can travel from left to right (at least 0 energy required) or right to left (at least 0 energy required). On a single column, we can travel up (at least 0 energy required) or down (at least 0 energy required). For every other point, we can travel right or up or left or down, so there are four possible moves.\n\nWhen we travel to a point that's already been traveled to, we'll gain negative energy. We can save the minimum of these energy values and add it to the energy remaining.\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == 17\nassert solution('3 3\\n2 3 2\\n9 8 5\\n8 9 7\\n9 9 9\\nS S S\\nS S S') == 23\nassert solution('2 2\\n1 1 1\\n9 8 7\\n7 9 7\\n9 9 9\\nS S S\\nS S S') == 16\n'''\n\nimport sys"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9') == '17'\n\"\"\"\n\nr, c = map(int, stdin.readline().split())\n\ngrid = [list(map(int, stdin.readline().split())) for _ in range(r)]\n\nstart = stdin.readline().split()\n\ndp = [[float('inf') for _ in range(c)] for _ in range(r)]\n\ndp[0][0] = 0\n\nfor i in range(r):\n    for j in range(c):\n        if i == 0 and j == 0:\n            continue\n        if i == 0:\n            dp[i][j] = dp[i][j - 1] + grid[i][j]\n        elif j == 0:\n            dp[i][j] = dp[i - 1][j] + grid[i][j]\n        else:\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n\nfor _ in range(int(stdin.readline())):\n    x, y = stdin.readline().split()\n    x = int(x) - 1\n    y = int(y) - 1\n    if dp[x][y] == float('inf'):\n        print(-1)\n    else:\n        print(dp[x][y])\n"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9') == '17'\nassert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '-3'\nassert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\nS S S S S') == '-3'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\") == \"17\"\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\") == 17\n\"\"\"\n\nimport sys\n\nR, C = map(int, sys.stdin.readline().split())\nm = []\nstart = []\nfor i in range(R):\n    m.append(list(sys.stdin.readline().strip()))\n    start.append(m[i].index('S'))\n\ndp = [[0 for _ in range(C)] for _ in range(R)]\ndp[start[0]][start[1]] = -1\n\ndx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\"\"\") == \"17\"\nprint(solution(\"\"\"5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\"\"\"), \"17\")\n\n-----Problem-----\nA logarithm is another way to determine the amount of energy needed to complete a solo climb, and the equation for determining the logarithm is the following:\n\n$\\log(X) = X - 1$\n\nThe minimum amount of energy required to complete a solo climb is the energy needed to travel from the starting position.\n\nWrite a program to determine the minimum amount of energy required to complete a solo climb.\n\n-----Explanation-----\nThe starting position is the first character of the input string.\n\nEvery other character in the string is treated as energy taken from the position.\n\nEvery time the character is a positive number, it is subtracted by one.\n\nEvery time the character is a negative number, it is added to the position.\n\nThis process is repeated until the character is a zero.\n\nThe amount of energy needed to travel from the starting position is the sum of the positions.\n\nNote that the starting position does not need to be added to the sum.\n\nFor example, the string $\"5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\"$\n\nshould output 17.\n\n-----Test Cases-----\nInput:\n4 5\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n4 4\n0 0 0 0 0\n0 0 0 0 0\nOutput:\n8\n\n-----Solution-----\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\n\"\"\""
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == '1 4 3 5 2', 'test1'\nassert solution(\"5\\n3 2 3 1 1\") == '1 4 3 5 2', 'test2'\nassert solution(\"5\\n3 2 3 1 1\") == '1 4 3 5 2', 'test3'\nassert solution(\"5\\n3 2 3 1 1\") == '1 4 3 5 2', 'test4'\nassert solution(\"5\\n3 2 3 1 1\") == 'impossible', 'test5'\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"5\\n3 2 5 1 4\") == \"impossible\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"impossible\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 4 3 5 2\"\nassert solution(\"5\\n2 3 1 4 5\") == \"2 3 5 1 4\"\nassert solution(\"5\\n4 3 2 1 5\") == \"impossible\"\nassert solution(\"5\\n5 2 3 1 4\") == \"impossible\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('2\\n1 2') == 'impossible'\nassert solution('5\\n1 2 3 4 5') == 'impossible'\n\n'''\n\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('4\\n1 2 3 4') == 'impossible'\nassert solution('2\\n2 3 1') == '2 3 5 1 4'\nassert solution('3\\n1 2 3') == 'impossible'\nassert solution('2\\n3 1 2') == 'impossible'\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"5\\n2 3 1 1\") == \"impossible\"\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('5\\n1 2 3 4 5') == 'impossible'\nassert solution('5\\n3 2 3 1 4') == 'impossible'\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"impossible\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\n3 0 1\n1 4\n''') == '0.76772047'\n\nassert solution('''2\n3 0 1\n1 4\n''') == '0.36652273'\n\nassert solution('''3\n2 1 2\n2 4\n''') == '0.5'\n\nassert solution('''3\n0 4 1\n1 4\n''') == '1.0'\n\nassert solution('''2\n3 0 1\n4 4\n''') == '0.9375'"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3 0 1\\n1 4\") == '0.76772047'\nassert solution(\"1\\n5 0 3\\n5 0 3\") == '0.33333333'\nassert solution(\"1\\n5 0 3\\n5 0 1\") == '0.25'\nassert solution(\"1\\n5 0 3\\n5 1 3\") == '0.25'\nassert solution(\"1\\n5 0 3\\n5 1 1\") == '0.25'\n\n\"\"\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n3 0 1\\n1 4\") == '0.76772047'\n\"\"\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\n\"\"\"\n\nfrom sys import stdin\nfrom math import sqrt\nfrom random import uniform"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1\n3 0 1\n1 4\n''') == '0.76772047'\nassert solution('''1\n0 0 1\n1 4\n''') == '0.1111111111111111'\nassert solution('''1\n0 0 1\n0 2\n''') == '0.1111111111111111'\nassert solution('''1\n0 0 1\n1 4\n1 1\n''') == '0.7727272727272727'\nassert solution('''1\n0 0 1\n1 4\n1 1\n5 5\n''') == '0.1111111111111111'\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\n\n-----Problem-----\n\nSolution:\n\n-----Notes-----\n\n\"\"\"\n\nfrom random import uniform"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n3 0 1\n1 4\n\"\"\") == '0.76772047'\n\nassert solution(\"\"\"\n1\n2 1 2\n1 2\n\"\"\") == '0.5'\n\nassert solution(\"\"\"\n2\n1 2 2\n2 1\n\"\"\") == '0.5'\n\nassert solution(\"\"\"\n1\n3 -1 2\n1 2\n\"\"\") == '0.0'\n\nassert solution(\"\"\"\n1\n3 0 1\n2 1\n\"\"\") == '0.0'"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == '0.9296875'\nassert solution(\"2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == '0.1134375'\n\nassert solution('2\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '0.1134375'\n\"\"\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\n"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''hello teams''') == '27'\nassert solution('''aaa abc aaa''') == '0'\nassert solution('''abcdefghijklmnop qrstuvwxyz''') == '26'\nassert solution('''a b c d e f g h i j k l m n o p q r s t u v w x y z''') == '0'\nassert solution('''aa bb cc dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz''') == '26'\n'''\n"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"hello world\") == \"3\"\nassert solution(\"a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a aa a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a aa a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a aa a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a aa a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a antence, the <wsep>-<core>_<sep>\n        \"\"\"\n        segs = []\n        segs = line.split('<sep>')\n        for i in range(len(segs)):\n            segs[i] = segs[i].split('_<core>')[1]\n        return segs\n\n    def get_segments(self, dataset_fp, seg_length):\n        segs = self.get_segments_from_line(self.read_line(dataset_fp))\n        return segs\n\n    def get_num_classes(self, dataset_fp):\n        return len(self.get_segments(dataset_fp, self.seg_length))\n\n\nclass ImgFeat:\n    def __init__(self, file_path, num_segs, seg_length):\n        self.file_path = file_path\n        self.num_segs = num_segs\n        self.seg_length = seg_length\n        self.segs = None\n\n    def get_num_classes(self):\n        return self.num_segs\n\n    def load_img_features(self, extractor, path=None):\n        if path is not None:\n            self.file_path = path\n\n        try:\n            self.segs = extractor.get_segments(self.file_path, self.seg_length)\n        except:\n            print(f\"error in feature load {self.file_path}\")\n            return\n\n    def get_image_segment_features(self, seg):\n        if self.segs is None:\n            print(\"no segments loaded\")\n            return None\n        try:\n            return self.segs[seg]\n        except:\n            print(f\"error in getting features for segment {seg} in image {self.file_path}\")\n            return None\n\n    def get_image_features(self):\n        if self.segs is None:\n            print(\"no segments loaded\")\n            return None\n        try:\n            return np.array(self.segs)\n        except:\n            print(f\"error in getting features for image {self.file_path}\")\n            return None\n\n\nclass ImgFeatExtractor(ImgFeat):\n    def __init__(self, file_path, num_segs, seg_length):\n        super().__init__(file_path, num_segs, seg_length)\n\n    def load_img_features(self, path=None):\n        super().load_img_features(self, path)\n\n    def get_image_features(self):\n        return super().get_image_features()\n\n\nclass W2V():\n    def __init__(self, embedding_dim, words_to_train=100000, word_min_count=5, context_len=20):\n        self.embedding_dim = embedding_dim\n        self.words_to_train = words_to_train\n        self.word_min_count = word_min_count\n        self.context_len = context_len\n        self.embedding_matrix = None\n\n    def init_embedding_matrix(self, file_path='./models/glove.6B.200d.txt'):\n        self.embedding_matrix = self.build_embedding_matrix(file_path)\n        return self.embedding_matrix\n\n    def get_num_classes(self):\n        return self.embedding_matrix.shape[0]\n\n    def get_segments"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hello teams') == 27\n"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('helo teams') == 27\nassert solution('hello teams') == 3\n\nimport math\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('helo teams'), 27)\n        self.assertEqual(solution('hello teams'), 3)\n\nunittest.main()"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hello teams\") == 27\n\"\"\"\n\n\n\nclass Solution:\n    def solution(self, stdin: str):\n        lst = stdin.split()\n        s1, s2 = lst[0], lst[1]\n        n = len(s1)\n        s1_ = s1\n        s2_ = s2\n        count = 0\n        \n        while True:\n            if s1 == s2:\n                break\n            \n            for i in range(n):\n                if s1[i] == 'z' and s2[i] == 'a':\n                    continue\n                if s1[i] == 'a' and s2[i] == 'z':\n                    continue\n                if s1[i] < s2[i]:\n                    s1 = s1[:i] + s2[i] + s1[i+1:]\n                    count += 1\n                    break\n                if s1[i] > s2[i]:\n                    s2 = s2[:i] + s1[i] + s2[i+1:]\n                    count += 1\n                    break\n        return count\n\ns = Solution()\nprint(s.solution(input()))"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hello teams') == 27\n"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hello teams\") == \"27\""
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hello teams\") == \"27\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\ns1, s2 = stdin.split()\nmoves = 0\n\nwhile s1!= s2:\n    if s1.count('z') == 0 and s2.count('z') == 0:\n        moves += len(s1)\n        s1, s2 = s2, s1\n    elif s1.count('z') > s2.count('z'):\n        if 'a' in s1:\n            if 'a' in s2:\n                moves += len(s1)\n                s1, s2 = s2, s1\n            else:\n                moves += s1.count('z') - s2.count('z')\n                s1 = s1[:s1.find('a')] + s2[s2.find('z'):]\n        else:\n            if 'a' in s2:\n                moves += s2.count('z') - s1.count('z')\n                s1 = s1[s1.find('a'):] + s2[:s2.find('a')]\n            else:\n                moves += len(s1)\n                s1, s2 = s2, s1\n    else:\n        if 'a' in s1:\n            if 'a' in s2:\n                moves += len(s1)\n                s1, s2 = s2, s1\n            else:\n                moves += s2.count('z') - s1.count('z')\n                s2 = s2[:s2.find('a')] + s1[s1.find('z'):]\n        else:\n            if 'a' in s2:\n                moves += s1.count('z') - s2.count('z')\n                s2 = s2[s2.find('a'):] + s1[:s1.find('a')]\n            else:\n                moves += len(s2)\n                s1, s2 = s2, s1\n\nprint(moves)\n\n\"\"\"\nSolution 2\n\"\"\"\n\ns1, s2 = stdin.split()\nmoves = 0\n\nwhile s1!= s2:\n    if s1.count('z') == 0 and s2.count('z') == 0:\n        moves += len(s1)\n        s1, s2 = s2, s1\n    elif s1.count('z') > s2.count('z'):\n        if 'a' in s1:\n            if 'a' in s2:\n                moves += len(s1)\n                s1, s2 = s2, s1\n            else:\n                moves += s1.count('z') - s2.count('z')\n                s1 = s1[:s1.find('a')] + s2[s2.find('z'):]\n        else:\n            if 'a' in s2:\n                moves += s2.count('z') - s1.count('z')\n                s1 = s1[s1.find('a'):] + s2[:s2.find('a')]\n            else:\n                moves += len(s1)\n                s1, s2 = s2, s1\n    else:\n        if 'a' in s1:\n            if 'a' in s2:\n                moves += len(s1)\n                s1, s2 = s2, s1\n            else:\n                moves += s2.count('z') - s1.count('z')\n                s2 = s2[:s2.find('a')] + s1[s1.find('z'):]\n        else:\n            if 'a' in s2:\n                moves += s1.count('z') - s2.count('z')\n                s2 = s2[s2.find('a'):] + s1[:s1.find('a')]\n            else:\n                moves += len(s2)\n                s1, s2 = s2, s1\n\nprint(moves)\n"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hello teams\") == \"27\"\nprint(solution(\"hello teams\"))\n\nimport fileinput\nimport collections\n\nfor line in fileinput.input():\n    pass\n\nassert solution(line) == \"27\""
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\") == \"2\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\n1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\") == 2\n'''"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 1\\n4 1\\n2 2\\n1 2\\n4 2\\n3 2\\n5 1\\n1 4\\n2 3\\n2 4\\n3 4\\n4 4\\n5 3\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\n\nimport math\nimport itertools\n"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n1\\n1\\n\") == \"2\"\nassert solution(\"7\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == \"1\"\nassert solution(\"6\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == \"2\"\nassert solution(\"7\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == \"0\"\nassert solution(\"7\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == \"3\"\n\"\"\"\n\nimport sys\nsys.path.append(\"../\")\n\nimport math\nfrom modules.adt.graph import Graph"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == e\n"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n') == 6\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '2'\n'''"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n4 5\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\") == 2\nassert solution(\"5 5\\n1 1\\n4 3\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\") == 3\n\"\"\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == 2\nprint('The local tests are done.')"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n2 4\\n5 6\") == 3\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\ncad\") == 26\n\"\"\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\ncad\") == 26\n\"\"\""
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\na\\nb\\nc\\nd\\ne\\nf\\n') == '2'\n\"\"\"\n\nn, k = map(int, input().strip().split())\ninitial_strings = sorted(input().strip() for _ in range(n))\ntest_string = input().strip()\n\ninitial_strings_index = {}\nfor string in initial_strings:\n    initial_strings_index[string] = initial_strings.index(string)\n\ninitial_strings_length = len(initial_strings)"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\nab\\nbc') == 3\n\"\"\"\nfrom collections import defaultdict, deque\nfrom typing import List, Set, Deque, Dict, Tuple\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\na\nb\nc\nd\ne\ncad''') == '26'\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\na\\nb\\nc\\nd\\ne\\n') == 2\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1 1\\na\\nb\\nc\\nd\\ne\\ncad\") == 26\nassert solution(\"5 2\\n1 1 1 1 1 1\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb\\na\\nb"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('b') == 'b'\nassert solution('ab') == 'b'\nassert solution('abc') == 'c'\nassert solution('abcd') == 'd'\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\ncad\") == 26\nassert solution(\"5 4\\nab\\nbc\\ncd\\nde\\nabcd\") == 47\nassert solution(\"5 3\\nab\\nbc\\ncd\\nde\\nabcd\") == 47\nassert solution(\"5 5\\nabcde\\nbcdea\\nbcdef\\nbcdefg\\nbcdefgh\") == 19\n\"\"\""
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 3\\n'\n    'a\\n'\n    'b\\n'\n    'c\\n'\n    'd\\n'\n    'e\\n'\n    'cad'\n) == '26'\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 10 30\\n10 5 3 1 3') == '3 5 2 1 4'\nassert solution('5 10 30\\n1 5 3 1 3') == 'impossible'\nassert solution('10 10 1\\n10 10 1') == '1 2 3 4 5 6 7 8 9 10'\n\n\"\"\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\nassert solution(\"5 10 30\\n2 1 5 3 1 3\") == \"impossible\"\nassert solution(\"5 10 30\\n3 1 3 1 3\") == \"impossible\"\nassert solution(\"5 10 30\\n3 3 1 3 1\") == \"impossible\"\nassert solution(\"5 10 30\\n3 1 3 3 1\") == \"3 5 2 1 4\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10 30\\n10 5 3 1 3') == '3 5 2 1 4'\nassert solution('5 10 30\\n1 5 3 1 3') == 'impossible'\nassert solution('5 10 30\\n3 5 1 3 1') == 'impossible'\nassert solution('1 5 3 1 3\\n5 10 30') == 'impossible'\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\n\nSample Input:\n5 10 30\n10 5 3 1 1\nSample Output:\nimpossible\n\n-------\n\nSample Input:\n5 10 30\n5 10 2 3 1\nSample Output:\n3 5 2 1 4\n\n-------\nSample Input:\n7 10 30\n5 10 3 1 1 5 7\nSample Output:\n3 5 2 1 4\n\n-------\nSample Input:\n7 10 30\n5 10 3 1 1 5 7\nSample Output:\nimpossible\n\"\"\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10 30\\n10 5 3 1 3') == '3 5 2 1 4'\nassert solution('7 10 21\\n7 3 2 1 1 3 3 2') == 'impossible'\nassert solution('3 5 10\\n3 1 5 2') == 'impossible'\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\n\nSample Input:\n6 10 20\n9 8 1 1 2 2\nSample Output:\nimpossible\n\"\"\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 2 1 3\") == \"impossible\"\nassert solution(\"3 10 3 9 3\") == \"3 1 4 2 5\"\n\"\"\"\n\nfrom math import ceil\nfrom random import shuffle, randint\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\nprint(\"Test pass.\")\n\n---\n\nThe second part of the homework is about finding a solution to the following problem:\nThe first problem is about finding a solution to the following problem:\n\nConsider a group of $n$ people, each of which has $k$ wishes to do: each wish can be viewed as an action or a description. For example, if the $i$th person has the $j$th wish to view a movie, then the $i$th person can say that they want to view a movie with the description $j$. There are $m$ people in the group, so $m$ actions and $m$ descriptions. The group decides to give these $m$ people a list of $m$ actions and $m$ descriptions, and the group decides to choose $k$ of these actions and descriptions randomly so that the $i$th person can only choose from the $k$ choices they desire. So the group decides that the $i$th person will choose from these $k$ actions and descriptions randomly, and then the group decides what happens if they are chosen.\n\nIt is important to note that the group members are not trying to follow this rule: they do not want to do all of the actions and descriptions they are supposed to do, they just want to choose randomly with the conditions of the problem. In the example above, the group members might think that they are trying to do more than the group does.\n\nIn this problem you are the group. You want to find a way to do all of the actions and descriptions the group members want to do. You will be given the $m$ actions and $m$ descriptions the group members want to do, and you should find a way to do all of them.\n\nInput\n\nThe first line of input contains two integers $n$ and $k$ ($1 \\leq n, k \\leq 10^4$), representing the number of people and the number of wishes the group members have. This is followed by $n$ lines of input. Each of these lines has two integers $m$ and $k$ ($1 \\leq m, k \\leq 10^4$), representing the number of actions and the number of descriptions the group members have. This is followed by $m$ lines of input. Each of these lines has two integers $i$ and $j$ ($1 \\leq i \\leq n$ and $1 \\leq j \\leq 10^4$), which represent the number of the people who have the $i$th action and the number of the descriptions that they have for the $j$th action. This is followed by $k$ lines of input. Each of these lines has two integers $i$ and $j$ ($1 \\leq i \\leq n$ and $1 \\leq j \\leq 10^4$), which represent the number of the people who have the $i$th action and the number of the descriptions that they have for the $j$th description.\nOutput\n\nIf there is a way to do all of the actions and descriptions, output $k$ integers $p_1, \\dots, p_ k$, where $p_i$ is the number of the people who have the $i$th action, and each of the $k$ numbers in the list is a permutation of the numbers $1, \\dots, n$. This list of integers should be a permutation such that the average score given by the group members will be exactly $k/n$. If there is no solution, output \u201cimpossible\u201d.\n\nIf there is no solution, output \u201cimpossible\u201d.\n\n-----Examples-----\nSample Input:\n5 4\n2 1\n3 0\n1 3\n2 0\n3 1\n2 1\n3 0\n4 3\n2 1\n0 1\n1 3\n1 2\n3 1\n3 1\n3 1\nSample Output:\n2 3 1 4\nimpossible\nimpossible\nimpossible\nimpossible\n\n---\n\nThe third part of the homework is about finding a solution to the following problem:\nThe first problem is about finding a solution to the following problem:\n\nGiven a list of $n$ students, each of them has $k$ grades. The group has decided to split into two groups, each with the same number of students. The students in the first group get to see the movie for free, and the second group will pay $t$ to see it. The students are also free to see a second movie, and the second group will pay $u$ to see it. The students also want to watch the same movies in the same order they see them, and they want to go to the cinema in groups of $m$ so that the average of their grades is equal to $a$. The group decides to split the students so that the first group will see the first $m$ movies, and the second group will see the remaining movies. How much will each group pay?\n\nIt is important to note that the group members are not trying to follow this rule: they do not want to do all of the actions and descriptions the group members want to do, they just want to choose randomly with the conditions of the problem.\n\nIn this problem you are the group. You want to find a way to split the students into two groups so that the average of the grades of the groups is equal to $a$. You will be given $n$ students and $k$ grades and $t$ and $u$ values. You should find a way to do it so that the students in the first group see the first $m$ movies and the students in the second group see the remaining movies.\n\nInput\n\nThe first line of input contains two integers $n$, $m$ ($1 \\leq n, m \\leq 10^5$), representing the number of students and the number of movies the first group will see. The second line has $n$ integers $k_1, \\dots, k_ n$ ($1 \\leq k_i \\leq 10^4$), representing the number of grades each of the students has. The third line has $n$ integers $t_1, \\"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 10 30\n10 5 3 1 3''') == '3 5 2 1 4'\n\nassert solution('''5 10 30\n1 1 1 1 1''') == 'impossible'\n\nassert solution('''5 10 30\n1 3 1 2 2''') == 'impossible'\n'''\nhttps://www.codewars.com/kata/55cbd4ba903825f7970000f5\n\nGiven a list of reviews and a word that needs to be removed from it, find the average number of characters in each of the remaining reviews.\n\nFor instance, if we remove the word \u201cI\u201d from the reviews we get the following list:\n\n['I love this movie', 'This is a really bad movie']\n\nThen, we can get the average number of characters from the following reviews:\n\n12\n19\n24\n29\n\nSo the average number of characters would be:\n\n12+19+24+29/4\n=62/4\n=17.5\n\nFor this kata, we will assume that the reviews contain only lowercase letters, numbers, spaces, and punctuation marks. \n\nAlso, we will assume that the word we need to remove is always in the same format: it consists of only one word and all letters are lowercase.\n\nAll reviews are guaranteed to be in English.\n'''"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\nassert solution(\"3 10 30\\n2 3 2\") == \"impossible\"\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\nscores = list(map(int, stdin.readline().split()))\n\nfor i in range(1, n):\n    if scores[i] > m:\n        continue\n    else:\n        scores[0] += scores[i]\n        scores[i] = m\n        if scores[0] >= k:\n            break\nprint(\" \".join(map(str, range(1, n + 1)))) if scores[0] >= k else print(\"impossible\")\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == 2\nassert solution('4\\n2 1\\n1 2\\n2 3\\n3 1') == \"shovel time!\""
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n2 3\") == 2\n\"\"\""
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n2 3\") == 2\n\"\"\""
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\") == \"shovel time!\"\n\"\"\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == \"shovel time!\"\n\"\"\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n2 3\") == \"shovel time!\"\n\"\"\""
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1\\n3 3') =='shovel time!'\nassert solution('2 3\\n1 1\\n3 3') == '2'\nassert solution('2 3\\n1 2\\n3 4') == '1'\nassert solution('3 3\\n2 3\\n1 3') == '0'\nassert solution('2 3\\n1 1\\n3 2') == '1'\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n2 3\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 1\") == \"shovel time!\"\nassert solution(\"4\\n1 2\\n2 2\\n3 2\") == \"shovel time!\"\n\"\"\"\n\nimport sys\n\nassert int(solution('2\\n1 1')) == 2\nassert int(solution('4\\n1 2\\n2 2\\n3 2')) == 2"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == '2'\n\"\"\""
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n1 2''') == '2'\nassert solution('''4\n5 2 6 7''') == '1'\nassert solution('''4\n1 9 6 2''') == '2'\nassert solution('''3\n5 10 1 6''') == '1'\nassert solution('''3\n10 1 5''') == '0'\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"3\"\nassert solution(\"4\\n5 6 7 8\") == \"2\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"3\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"3\\n10 20 30\") == \"1\"\nassert solution(\"3\\n10 20 100\") == \"2\"\nassert solution(\"3\\n10 100 20\") == \"2\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 1 2') == 3\n\"\"\"\nfrom math import ceil\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\narr = sorted(arr)\n\nlast = 0\n\nwhile n > 0:\n    tmp = 0\n    for i in range(ceil(n / 2)):\n        tmp += arr[i]\n    if tmp > last:\n        n -= 1\n        last = tmp\n\nprint(ceil(n / 2))\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 1 2\") == 3\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 1 2''') == 3\n\nassert solution('''6\n1 2 5 6 2 1''') == 2\n\nassert solution('''10\n1 3 4 4 5 2 1''') == 3\n\nassert solution('''29\n1 1 1 1 1 1 1 1 1 1 1''') == 29\n\nassert solution('''3000\n5 5 5 5 5 5 5 5 5 5 5''') == 3000\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\nassert solution('3\\n1 2 3') == '1'\nassert solution('7\\n1 2 3 4 5 6 7') == '2'\nassert solution('12\\n1 2 3 4 5 6 7 8 9 10 11 12') == '2'\nassert solution('5\\n2 2 1 1') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2 1 2''') == '3'\nassert solution('''5\n5 5 5 5 5''') == '1'\n'''"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\nassert solution('5\\n1 2 1 2 3') == '4'\nassert solution('6\\n1 1 1 1 1 1') == '1'\nassert solution('7\\n1 1 1 1 1 1 1') == '2'\n\n------Solution------\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ntest_cases = int(sys.stdin.readline())\nfor _ in range(test_cases):\n    n = int(sys.stdin.readline())\n    briefcases = deque(map(int, sys.stdin.readline().split()))\n    result = 1\n    while briefcases:\n        executives = deque(briefcases)\n        for _ in range(min(briefcases)):\n            executives.popleft()\n        result += 1\n    print(result - 1)\n\n\"\"\"\n------TEST CASES------\n\n4\n4\n1 2 1 2\nSample Output:\n3\n5\n6\n7\n\"\"\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\nassert solution('4\\n1 2 3 4') == '2'\nassert solution('3\\n10 3 4') == '1'\n\nimport sys"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 4 999999937\"\n) == \"79\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 999999937\") == '79'\n\"\"\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 999999937') == '79'\n\"\"\""
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\n-----Problem-----\nBob wants to prevent Alice from placing her block. To do this, he places obstacles in some of the grid cells. After Bob places his obstacles, all $2\\! \\times \\! 2$ subgrids of the grid should contain at least one obstacle. Bob wants to minimize the number of grid cells where he places obstacles.\n\nHelp Bob count the number of ways he can place the minimum number of obstacles to prevent Alice from placing her block. Output this number modulo a prime number $p$. Note that the answer is not the minimum number of obstacles, but rather the count of the number of ways Bob can place the minimum number of obstacles. For example, if $n=m=2$ for a $2\\! \\times \\! 2$ grid, Bob only has to place $1$ obstacle, but there are $4$ ways to place it, so the answer in this case is $4$.\n\n-----Input-----\nThe single line of input contains three space-separated integers $n$ ($2 \\leq n \\leq 25$), $m$ ($2 \\leq m \\leq 10^3$) and $p$ ($10^8 \\leq p \\leq 10^9+7$, $p$ is a prime number), where Alice\u2019s grid is of size $n\\! \\times \\! m$, and $p$ is a large prime modulus.\n\n-----Output-----\nOutput a single integer, which is the number of ways Bob can place the minimum number of obstacles in the $n\\! \\times \\! m$ grid to prevent Alice from placing her $2 \\! \\times \\! 2$ block. Since this may be very large, output it modulo $p$.\n\n-----Examples-----\nSample Input:\n4 4 999999937\nSample Output:\n79\n\"\"\"\n\nn, m, p = map(int, input().split())\n\nn = 2 * n\nm = 2 * m\n\ngrid = [[1] * m for _ in range(n)]\n\nfor j in range(m):\n    grid[n // 2][j] = 0\n\nfor i in range(n):\n    grid[i][m // 2] = 0\n\ncount = 0\n\nfor j in range(m):\n    for i in range(n):\n        if grid[i][j] == 1:\n            count += 1\n            if i == 0 or grid[i - 1][j] == 0:\n                if j == 0 or grid[i][j - 1] == 0:\n                    grid[i][j] = 0\n            else:\n                grid[i][j] = 0\n\nprint((count - 1) % p)\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\"\"\""
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n\"\"\"\n\nfrom functools import reduce\nfrom math import gcd\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 4 999999937\n''') == '79'\n\nassert solution('''2 2 7\n''') == '4'\n\nassert solution('''5 5 4\n''') == '0'\n\nassert solution('''6 1 6\n''') == '0'\n\nassert solution('''7 7 99999999\n''') == '0'"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 999999937') == '79'\n\"\"\"\nimport sys\nfrom math import gcd"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini mozzarella mushrooms\"\nassert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini mozzarella mushrooms\"\n\"\"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini mozzarella mushrooms artichoke\"\n\"\"\"\n\nfrom collections import Counter\nimport re\n\nclass Solution:\n    def solve(self, stdin):\n        group_size = int(stdin.readline())\n        toppings_dict = Counter(re.findall(r'[+-][a-zA-Z]{1,15}', stdin.read()))\n        possible_toppings = {t[1] for t in toppings_dict.items() if t[0] == '+'}\n        selected_toppings = {t for _, t in sorted(toppings_dict.items(), key=lambda x: (x[0], -x[1]), reverse=True)}\n        for topping in selected_toppings:\n            if topping not in possible_toppings:\n                selected_toppings.pop(topping)\n        return '\\n'.join(selected_toppings)\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n\") == \"zucchini mozzarella mushrooms artichoke\"\n\"\"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini mozzarella mushrooms artichoke'\n\nassert solution('''2\n4 +zucchini +mozzarella +mushrooms -artichoke\n4 +zucchini +mozzarella +mushrooms -banana\n''') == 'zucchini mozzarella mushrooms artichoke banana'\n\nassert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n4 +zucchini +mozzarella +mushrooms -banana\n''') == 'zucchini mozzarella mushrooms artichoke banana'\n\nassert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n4 +zucchini +mozzarella +mushrooms -banana\n4 +zucchini +mozzarella +mushrooms -olive oil\n''') == 'zucchini mozzarella mushrooms artichoke banana olive oil'\n\nassert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n4 +zucchini +mozzarella +mushrooms -banana\n4 +zucchini +mozzarella +mushrooms -olive oil\n4 +zucchini +mozzarella +mushrooms -tomato\n''') == 'zucchini mozzarella mushrooms artichoke banana olive oil tomato'"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini\\nmushrooms\\nartichoke\"\nassert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke +mushrooms +tomatoes\") == \"zucchini\\nmozzarella\\nmushrooms\\ntomatoes\"\n\"\"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2 +salad +tomatoes\\n3 +salad +tomatoes\\n4 +salad +tomatoes\") == \"salad +tomatoes\"\nassert solution(\"1\\n3 +salad +tomatoes\\n2 +salad +tomatoes\\n4 +salad +tomatoes\") == \"tomatoes\"\nassert solution(\"1\\n2 +salad +tomatoes\\n3 +salad +tomatoes\\n2 +salad +tomatoes\") == \"tomatoes\"\nassert solution(\"1\\n4 +salad +tomatoes\\n2 +salad +tomatoes\\n4 +salad +tomatoes\") == \"tomatoes\"\nassert solution(\"1\\n4 +salad +tomatoes\\n2 +salad +tomatoes\\n4 +salad +tomatoes\") == \"tomatoes\"\n\"\"\""
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4+tomato\\n4+carrot\") == \"tomato carrot\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 +zucchini +mozzarella +mushrooms -artichoke') == 'zucchini\\nmozzarella\\nmushrooms\\nartichoke'\n'''\n\nimport sys\nimport re\nfrom collections import Counter\nfrom typing import List\n\nsys.setrecursionlimit(1500)\n\ntoppings = {}\ntotal_toppings = {}\nwith open('toppings.txt') as file:\n    for line in file:\n        line = line.strip().split(' ')\n        toppings[line[0]] = line[1:]\n        total_toppings[line[0]] = 0"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n+peaches +banana -orange\n+peaches +banana -apple\n+peaches +banana -bananas\n''') == 'bananas'\n\nassert solution('''4\n+chocolate +milk +peanuts +strawberries\n+chocolate +milk +peanuts +almonds\n+chocolate +milk +peanuts +hazelnuts\n+chocolate +milk +peanuts +hazelnuts\n''') == 'hazelnuts'\n\nassert solution('''3\n+peaches +banana -orange\n+peaches +banana -apple\n+peaches +banana -bananas\n''') == 'peaches'\n\nassert solution('''4\n+chocolate +milk +peanuts +strawberries\n+chocolate +milk +peanuts +almonds\n+chocolate +milk +peanuts +hazelnuts\n+chocolate +milk +peanuts +hazelnuts\n''') == 'peaches'\n\nassert solution('''5\n+chocolate +milk +peanuts +strawberries\n+chocolate +milk +peanuts +almonds\n+chocolate +milk +peanuts +hazelnuts\n+chocolate +milk +peanuts +hazelnuts\n+chocolate +milk +peanuts +berries\n''') == 'chocolate'"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 +artichoke +pistachio +parsnip +parsnip -artichoke +tomatoes\") == \"artichoke tomatoes artichoke pistachio parsnip\"\nassert solution(\"1 +artichoke +pistachio +parsnip +parsnip -artichoke +tomatoes\") == \"artichoke tomatoes\"\n\"\"\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\\nSS\") == \"PS\"\nassert solution(\"3 4\\nPP\\nRR\\nPS\\nSS\\nPP\") == \"PP\"\nassert solution(\"3 4\\nPP\\nRR\\nPS\\nSS\\nRR\") == \"RR\"\nassert solution(\"3 4\\nPP\\nRR\\nPS\\nSS\\nRR\\nPS\") == \"PS\"\nassert solution(\"3 4\\nPP\\nRR\\nPS\\nRR\\nPS\\nPS\") == \"RR\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PS\\nPP\\nRR\\nSS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == 'PS\\nPP\\nRR'\nassert solution(\"3 4\\nPP\\nRR\\nSS\") == 'SS\\nPP\\nRR'\nassert solution(\"3 4\\nPP\\nRR\\nPS\") == 'PS\\nPP\\nRR'\n\nassert solution(\"1 1\\nR\") == 'R'\nassert solution(\"1 1\\nP\") == 'P'\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PS\\nPP\\nRR\\nSS'\nassert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PS\\nPP\\nRR\\nSS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == \"PS\"\nassert solution(\"3 4\\nPS\\nRP\\nRS\") == \"SS\"\n\"\"\""
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\\nSS\") == \"PS\\nPP\\nRR\\nSS\"\n\"\"\""
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == \"PS\\nPP\\nRR\"\nassert solution(\"3 4\\nPS\\nSS\\nPS\") == \"PS\\nPS\\nSS\"\nassert solution(\"3 4\\nRR\\nPS\\nRR\") == \"RR\\nRR\\nPS\"\nassert solution(\"3 4\\nSS\\nSS\\nSS\") == \"SS\\nSS\\nSS\"\n\"\"\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PS\\nPP\\nRR\\nSS'\n\n\"\"\""
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == \"PS\\nPP\\nRR\\n\"\nassert solution(\"3 4\\nRR\\nRR\\nPS\") == \"RR\\nRR\\nPS\\n\"\nassert solution(\"3 4\\nPS\\nSS\\nPS\") == \"PS\\nPS\\nSS\\n\"\nassert solution(\"3 4\\nPS\\nRR\\nPS\") == \"PS\\nPS\\nRR\\n\"\nassert solution(\"3 4\\nPS\\nPS\\nPS\") == \"PS\\nPS\\nPS\\n\"\n\n\"\"\"\n\nimport sys\nimport random\nimport copy\n\nn, s = list(map(int, sys.stdin.readline().split()))\n\npredicts = []\nfor i in range(s):\n    predicts.append(sys.stdin.readline().strip())\n\nresult = {}\nfor predict in predicts:\n    result[predict] = 1\n\npredict_index = list(result.keys())\npredict_index.sort(key=lambda x: predicts.index(x), reverse=True)\n\nfinal = []\nfor predict in predict_index:\n    final.append(predict)\n\nsolution = \"\"\nfor predict in final:\n    solution += predict\n    print(solution)"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PS\\nPP\\nRR\\nSS'\n\"\"\"\n\nimport math\nimport sys\nfrom collections import Counter\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n\") == '288'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"\n5\n0.1 2.0\n0\n0\n0\n0\n0\n\"\"\") == \"288\"\n\n\"\"\"\nReturn the least amount of rain and sweat you can get home and still be dry at the given time.\n\nThe rain is given for each minute interval in millilitres, indicating how wet you get from cycling through this \u2014 note that you can cycle just a fraction of a whole minute interval at the start and end of your trip: then only that fraction of the rain during that interval affects you. Sweating makes you wet at a rate of $s = c \\cdot v^2$ per minute where $v$ is your speed in $\\mathrm{km}/\\mathrm{h}$ and $c$ is a positive constant you have determined. You have to cover the distance to your home in a given time (you don't want to wait forever for it to become dry), but otherwise you can choose your strategy of when to leave and how fast to cycle (and even change speeds) as you wish. What is the least wet you can get from the combination of rain and sweat?\n\nInput Format\n\nThe first line contains a single integer T (1 <= T <= 10000) \u2014 the number of minutes from now you want to be home by at the latest.\nThe second line contains two floating point numbers C (0.01 <= C <= 10) and D (1 <= D <= 50) \u2014 the constant determining your sweating, and the distance from university to home in kilometres.\nThe next T lines each contain an integer R (0 <= R <= 100) the number of millilitres of rain during the current minute interval (zero-based).\n\nOutput Format\n\nPrint a single floating point number \u2014 the least amount of rain and sweat you can get wet from when optimally planning your cycle home. Your answer should be correct up to an absolute or relative precision of 10^\u22126.\n\nSample Input 0\n\n5\n0.1 2.0\n0\n0\n0\n0\n0\nSample Output 0\n\n288\nExplanation 0\n\nThe average speed in kilometers per hour is 2.25, so the sweat rate per minute is 1.75. At the end of the five-minute interval, you will get a total of 0.0 + 0.75 + 1.5 + 2.25 = 5.5m of sweat. If you leave at 3pm, you will get a total of 0.0 + 1.25 + 2.0 + 5.5 = 9m of sweat.\n\nYou have to cover the distance to your home in a given time (you don't want to wait forever for it to become dry), so at the end of the fifth minute of your trip you will leave home at 3pm, covering a distance of 0.9 km. To be home at 3pm, you need to cover a distance of 3.4 km. At a distance of 3.4 km, there will be a total of 0.9 + 0.8 + 0.7 + 0.6 + 0.5 = 7.6m of sweat. But, there is one thing that you have to remember: after the fifth minute, you will be cycling at your max speed. If you leave the fifth minute at a speed of 10 km/h, you will be cycling at 10.0 km/h for the next five minutes, then at the max 10.0 km/h again. So, in the end, you will get a total of 7.6 + 7.6 + 7.6 + 7.6 + 7.6 = 33.2m of sweat.\n\nTherefore, the least amount of rain and sweat you can get wet from when optimally planning your cycle home is 3.2m.\n\nSample Input 1\n\n5\n0.1 2.0\n1\n2\n3\n4\n5\nSample Output 1\n\n36\nExplanation 1\n\nIn the first sample case, you can leave at 3pm, covering a distance of 0.9 km. Then, you will have to cover the distance of 3.4 km, resulting in a total of 0.9 + 0.8 + 0.7 + 0.6 + 0.5 = 7.6m of sweat. At this speed, you will cover the distance to home in the end, resulting in a total of 7.6 + 7.6 + 7.6 + 7.6 + 7.6 = 36.0m of sweat.\n\nIn the second sample case, you will leave at 3pm, covering a distance of 1.2 km. Then, you will have to cover the distance of 2.4 km, resulting in a total of 1.2 + 1.2 + 1.2 + 1.2 + 1.2 = 8.8m of sweat. At this speed, you will cover the distance to home in the end, resulting in a total of 8.8 + 8.8 + 8.8 + 8.8 + 8.8 = 36.0m of sweat.\n\nIn the third sample case, you will leave at 3pm, covering a distance of 2.4 km. Then, you will have to cover the distance of 3.4 km, resulting in a total of 2.4 + 2.4 + 2.4 + 2.4 + 2.4 = 11.6m of sweat. At this speed, you will cover the distance to home in the end, resulting in a total of 11.6 + 11.6 + 11.6 + 11.6 + 11.6 = 36.0m of sweat.\n\nIn the fourth sample case, you will leave at 3pm, covering a distance of 4.8 km. Then, you will have to cover the distance of 5.6 km, resulting in a total of 4.8 + 4.8 + 4.8 + 4.8 + 4.8 = 19.2m of sweat. At this speed, you will cover the distance to home in the end, resulting in a total of 19.2 + 19.2 + 19.2 + 19.2 + 19.2 = 36.0m of sweat.\n\nIn the fifth sample case, you will leave at 3pm, covering a distance of 5.6 km. Then, you will have to cover the distance of 6.4 km, resulting in a total of 5.6 + 5.6 + 5.6 + 5.6 + 5.6 = 21.6m of sweat. At this speed, you will cover the distance to home in the end, resulting in a total of 21.6 + 21.6 + 21.6 + 21.6 + 21.6 = 36.0m of sweat.\n\nTherefore,"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n\") == 288\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n'\n) == '288'\n\nfrom typing import List\n\nfrom Helpers import helper as hlp"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288.0'\n\n-----Challenge-----\nWrite a solution for a problem similar to this, but in which you don't have to output the result, but instead have to compute it as part of the input processing.\n\n    def solution(stdin: str) -> None:\n        pass\n\n    assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == None\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0') == '288'\nprint('Cool!')\n\n----------"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n\") == \"288\"\nassert solution(\"5\\n0.1 2.0\\n1.0\\n0\\n0\\n0\\n0\\n\") == \"240\"\n\"\"\"\n\nimport sys\nimport math\n\nT = int(sys.stdin.readline())\nd, c, s = [float(x) for x in sys.stdin.readline().split()]\n\nr = [float(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\") == \"288\"\n\"\"\"\nimport sys\nfrom math import ceil"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\") == \"288\"\n\n-----Notes-----\nIf you start cycling just after midnight, it is possible that you will not even get any rain. In such a case, you should answer 0.\n\"\"\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n0.1 2.0\n0\n0\n0\n0\n0''') == 288\nprint(solution(stdin))\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pastimeofwhimsy\") == 1\n'''"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('pastimeofwhimsy') == 1\nassert solution('abracadabra') == 5\nassert solution('asdasdasdasd') == 3\nassert solution('leetcode') == 0\nassert solution('aaa') == 0\n\n'''\n\n'''\n\nAssumptions:\n- All input is valid\n- Input is a string consisting of lower case letters only\n- Input is not empty\n\nVariables:\n- S: input string\n- n: the length of input string\n- w: the word \"meow\"\n\n- Initialize the output to be 0\n- Initialize a count for the number of meow operations\n\n---\n\n---\n\nStep 1: Count the number of distinct characters in the string\n\nStep 2: Traverse the string\n    - if character c is the same as the next character,\n    increment the count\n    - if the character c is not the same as the next character,\n    decrement the count\n    - if the count is less than or equal to 0, return -1\n\nStep 3: If the count is greater than 0, return the count\n\n\n---\n\n'''\n\nfrom collections import Counter"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('pastimeofwhimsy') == 1"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pastimeofwhimsy\") == 1\n\"\"\"\n\nimport re"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('pastimeofwhimsy') == 1\nassert solution('allcatsaremeow') == 0\nassert solution('yarnyspycraft') == 3\nassert solution('catfoxandthechameleon') == 3\nassert solution('babyshark') == 2\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\"\nassert solution(\"irregulars\") == \"2\"\nassert solution(\"woo\") == \"1\"\nassert solution(\"meow\") == \"1\"\nassert solution(\"moo\") == \"1\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 1\nassert solution('meow') == 0\nassert solution('squeak') == 2\n\n\"\"\""
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nprint(solution(test_input_2))\nprint(solution(test_input_3))\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('spontaneousindiscretion') == '2'\nassert solution('withoutfearofdefecation') == '5'\nassert solution('thingsthatareofgreaterattentiontootherthings') == '6'\nassert solution('darkhoursyouarein') == '3'\n\"\"\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pastimeofwhimsy\") == 1\n\"\"\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4\n1 2 2 1''') == 'YES'\nassert solution('''1\n1''') == 'NO'\nassert solution('''2 6\n2 5 4''') == 'NO'\nassert solution('''1\n6''') == 'NO'\nassert solution('''2 1\n1 2''') == 'YES'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 2 1') == 'YES'\n\n'''\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n1') == 'NO'\nassert solution('1\\n1\\n1') == 'YES'\nassert solution('1\\n2\\n2') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n2') == 'YES'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4\n1 2 2 1 ''') == 'YES'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2 2 1') == 'YES'\nassert solution('4 4\\n1 2 3 4') == 'YES'\nassert solution('4 4\\n1 2 3 4') == 'YES'\nassert solution('4 4\\n1 2 3 4') == 'YES'\nassert solution('5 3\\n1 2 3 4') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == 'YES'\nassert solution(\"4 3\") == 'YES'\nassert solution(\"4 3\") == 'YES'\nassert solution(\"4 3\") == 'YES'\n\nassert solution(\"1 2 2 1\") == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n3 3 1 2 2\") == \"YES\"\nassert solution(\"4 5\\n3 3 1 2 1\") == \"NO\"\nassert solution(\"4 5\\n2 2 1 3\") == \"NO\"\nassert solution(\"5 3\\n2 1 2 3 4 5\") == \"NO\"\nassert solution(\"2 3\\n1 2 3\") == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"3 1\") == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 2 2 1\") == \"YES\"\nassert solution(\"4 5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"3 5\\n1 2 1 1\") == \"NO\"\nassert solution(\"3 6\\n1 2 1 1\") == \"NO\"\nassert solution(\"3 6\\n1 3 1 2\") == \"YES\"\n\nimport os, io, functools, itertools, collections, re,  array, bisect as bi, operator as op\nfrom collections import deque, defaultdict, OrderedDict, Counter, ChainMap, NamedTuple, Enum\nfrom functools import lru_cache, reduce\nfrom itertools import permutations\nfrom pprint import pprint, pformat\nfrom copy import deepcopy\n\n\nimport math\nfrom collections import defaultdict, OrderedDict, Counter\nfrom itertools import permutations, combinations\nfrom math import factorial, ceil, floor, gcd, sqrt\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom heapq import heappush as hp, heappop as hpop, heapify as hpop\nfrom functools import lru_cache\nfrom itertools import permutations, combinations\nfrom operator import add, mul, itemgetter\nfrom re import split, sub\nfrom copy import deepcopy\n\n\nimport math\nimport random\n\n\nimport re\n\nimport os\nimport io\n\nfrom collections import defaultdict, OrderedDict, Counter\n\nfrom itertools import permutations, combinations, product, accumulate\nfrom pprint import pprint, pformat\n\nimport numpy as np\n\nfrom copy import deepcopy\n\n\n\nclass Node:\n    def __init__(self, data, nextNode=None):\n        self.data = data\n        self.next = nextNode\n\nclass SingleLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beg(self, data):\n        newNode = Node(data)\n        newNode.next = self.head\n        self.head = newNode\n\n    def print_list(self):\n        temp = self.head\n        while temp:\n            print(temp.data)\n            temp = temp.next\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n1 2 2 1 ') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 1\\n3\\n3') == '3/1'\n\"\"\""
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"6/1\"\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.children = []\n        self.magic = 1\n\nclass Solution:\n    def __init__(self):\n        self.m = {}\n        self.m_min = float('inf')\n\n    def get_magic(self, node: TreeNode, acc):\n        acc *= node.magic\n        for child in node.children:\n            acc *= self.m[child]\n        if acc < self.m_min:\n            self.m_min = acc\n\n    def run(self, stdin: str):\n        self.magic = int(stdin.splitlines()[0])\n        lines = stdin.splitlines()[1:]\n        for i in range(0, len(lines), 2):\n            parent = self.m[int(lines[i])] if int(lines[i]) in self.m else TreeNode(int(lines[i]))\n            child = self.m[int(lines[i+1])] if int(lines[i+1]) in self.m else TreeNode(int(lines[i+1]))\n            parent.children.append(child)\n            if int(lines[i]) in self.m:\n                self.m[int(lines[i])].children.append(child)\n            else:\n                self.m[int(lines[i])] = child\n        for node in self.m.values():\n            self.get_magic(node, 1)\n        return str(self.m_min).rstrip('0').rstrip('.')"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\\\n1 3\") == \"7/2\"\nassert solution(\"3\\\\n2 3\") == \"5/1\"\nassert solution(\"4\\\\n2 4\") == \"8/1\"\nassert solution(\"3\\\\n4 3\") == \"9/1\"\nassert solution(\"2\\\\n5 1\") == \"5/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 2\n3\n4\n''') == '3/1'\nassert solution('''\n3\n1 2\n3\n4\n5\n''') == '7/3'\n\"\"\"\n\nclass Node:\n    def __init__(self, id, magic):\n        self.id = id\n        self.magic = magic\n        self.children = []\n        self.parents = []\n        \n    def is_child(self, child):\n        for node in self.children:\n            if node.id == child:\n                return True\n        return False\n        \n    def is_parent(self, parent):\n        for node in self.parents:\n            if node.id == parent:\n                return True\n        return False\n\nn = int(stdin.readline().strip())\ntree = []\nfor _ in range(n - 1):\n    a, b = map(int, stdin.readline().strip().split())\n    if not a in [n_node.id for n_node in tree]:\n        tree.append(Node(a, 0))\n    if not b in [n_node.id for n_node in tree]:\n        tree.append(Node(b, 0))\n    for node in tree:\n        if node.id == a:\n            node.children.append(Node(b, 0))\n            node.children[-1].parents.append(node)\n        if node.id == b:\n            node.children.append(Node(a, 0))\n            node.children[-1].parents.append(node)\n\nroot_nodes = [node for node in tree if not node.parents]\nroot_nodes.sort(key=lambda node: node.id)\n\nanswer = 1\nfor root_node in root_nodes:\n    for child_node in root_node.children:\n        if not child_node.is_child(root_node.id):\n            answer *= (child_node.magic + 1)\nprint(answer)\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2\n3\n4''') == '3/1'\n\nassert solution('''3\n1 2\n2 3\n3''') == '3/1'\n\nassert solution('''2\n1 2\n3\n4\n2\n1\n3''') == '3/2'\n\nassert solution('''2\n1 2\n1\n3\n3\n3\n2\n1\n3''') == '3/1'\n\nassert solution('''3\n1 2\n1\n3\n3\n3\n2\n1\n3''') == '3/1'"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3\\n4\\n\") == \"3/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 2\n3\n4\n''') == '3/1'\n\nassert solution('''\n2\n1 2\n3\n4\n''') == '7/3'\n\nassert solution('''\n2\n1 2\n3\n4\n''') == '7/3'\n\nassert solution('''\n2\n1 2\n3\n4\n''') == '7/3'\n\nassert solution('''\n2\n1 2\n3\n4\n''') == '7/3'"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3\\n4\") == \"3/1\"\nassert solution(\"2\\n1 1\\n1\") == \"5/4\"\n\"\"\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n4\\n6\") == \"2/1\"\n\"\"\"\nimport math\n\nfrom itertools import combinations"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n4\") == \"3/1\"\n\nprint(solution(\"2\\n3\\n4\"))\n\n\"\"\""
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1.2 10.2\\n2.2 15.2\") == '1.114672365'\n\"\"\"\n\nN = int(input())\nlines = []\nfor i in range(N):\n    lines.append(input().split())\nL = []\nR = []\nfor i in range(N):\n    L.append(float(lines[i][0]))\n    R.append(float(lines[i][1]))\nl = []\nr = []\nfor i in range(N):\n    if L[i] < L[i - 1]:\n        l.append(L[i - 1])\n    if R[i] > R[i - 1]:\n        r.append(R[i - 1])\nres = 0\nfor i in range(N):\n    if L[i] >= L[i - 1] and R[i] <= R[i - 1]:\n        res += (R[i] - L[i - 1]) * (r[i] - l[i])\n    elif L[i] <= L[i - 1] and R[i] >= R[i - 1]:\n        res += (R[i] - L[i - 1]) * (r[i] - l[i])\n    elif L[i] <= L[i - 1] and R[i] <= R[i - 1]:\n        res += (R[i] - L[i - 1]) * (R[i] - L[i - 1])\n    elif L[i] >= L[i - 1] and R[i] >= R[i - 1]:\n        res += (R[i] - L[i - 1]) * (R[i] - L[i - 1])\nprint(res/N**2)\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1.2 10.2\\n2.2 15.2\") == \"1.114672365\"\n\"\"\""
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1.2 10.2\\n2.2 15.2\") == '1.114672365'\nprint(solution(stdin_lines))\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1.2 10.2\") == '1.114672365'\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1.2 10.2\") == \"1.114672365\"\n\"\"\"\n\nN = int(stdin.readline())\nLs = []\nRs = []\nfor _ in range(N):\n    L, R = list(map(float, stdin.readline().split()))\n    Ls.append(L)\n    Rs.append(R)"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1.2 10.2\") == \"1.114672365\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n1.2 10.2\n2.2 15.2''') == '1.114672365'\n\n'''\nThe time complexity of the solution is O(N) and the space complexity is O(1).\n'''\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1.2 10.2') == '1.114672365'\n\"\"\"\n\nimport re\nimport sys\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1.2 10.2\n2.2 15.2\n\"\"\") == '1.114672365'\n\nprint(solution(\"\"\"\n2\n1.2 10.2\n2.2 15.2\n\"\"\"))"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1.2 10.2\") == \"1.114672365\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\\n\") == \"3\\n1 2 3 2\\n\"\n\nSample Input:\n4\n0 3\n1 1\n2 0\n2 1\nSample Output:\n3\n1 2 3 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\\n\") == \"3\\n1 2 3 2\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''4\n0 3\n1 1\n2 1\n2 0''') == '3\nassert solution(\n'''7\n0 2\n0 1\n0 3\n0 1\n0 5\n0 4\n0 6''') == '4\nassert solution(\n'''8\n0 5\n0 1\n0 3\n0 1\n0 2\n0 5\n0 7\n0 6\n0 8''') == '7\nassert solution(\n'''10\n0 2\n0 7\n0 1\n0 1\n0 2\n0 3\n0 1\n0 6\n0 6\n0 3\n0 5\n0 9''') == '4\nassert solution(\n'''5\n0 3\n0 2\n0 3\n0 4\n0 2''') == '4\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0\\n3\") == \"1 2 3 2\"\nassert solution(\"1\\n1\") == \"1 1 1 1\"\nassert solution(\"2\\n1\") == \"1 2 1 1\"\nassert solution(\"2\\n0\") == \"1 2 1 1\"\nassert solution(\"4\\n0\\n1\\n2\\n3\") == \"1 2 3 2 3\"\n\n------Hints------\n* This problem is a typical `smallest subarray problem` (please don't check out the relevant discussions on the internet)\n* Can you create an array of $2$ integers to store the index of the firing and hiring?\n\"\"\""
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\ntry:\n    assert solution('1\\n1') == '1\\n1'\n    assert solution('2\\n1\\n2\\n1\\n0\\n2') == '2\\n1\\n2\\n2\\n2'\n    assert solution('6\\n1\\n1\\n1\\n1\\n1\\n1') == '2\\n2\\n3\\n3\\n3'\nexcept AssertionError:\n    print('Tests failed')\nelse:\n    print('Tests passed')\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4\\n1\\n2\\n1\\n0\") == '3\\n1\\n2\\n2\\n3\\n2'\n\n-----Solution-----\n\nfrom queue import PriorityQueue\nimport sys\n\nn = int(input())\n\npq = PriorityQueue()\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    pq.put((a, b))\n\nh = 0\nm = 0\nwhile not pq.empty():\n    c, d = pq.get()\n    if c > m:\n        m = c\n    if d > h:\n        h = d\n    if c == m and d == h:\n        print(m)\n        print(c, d)\n        sys.exit()\n\n\"\"\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\") == \"3\\n1 2 3 2\"\n\nSample Input:\n8\n1 0\n2 1\n2 0\n3 1\n3 0\n4 2\n4 0\n5 2\n5 0\nSample Output:\n1\n0 2 1 2\n\nSample Input:\n10\n0 2\n1 2\n2 0\n3 1\n3 0\n4 2\n4 0\n5 2\n5 0\n6 1\n6 0\nSample Output:\n2\n1 2 0 3 1\n\nSolution:\n\"\"\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '3\\n1 2 3 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 0') == '1 2'\nassert solution('3\\n0 0') == '1 2 3'\nassert solution('4\\n0 1') == '1 2 3'\n\nassert solution('2\\n0 1') == '1 2'\nassert solution('3\\n0 1') == '1 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\\n\") == \"3\\n1 2 3 2\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\nhired = [0] * n\nfired = [0] * n\n\nfor i in range(n):\n    f, h = map(int, input().split())\n    for j in range(i):\n        hired[j] += f\n    for j in range(i, n):\n        fired[j] += h\n\nans = 0\nans += min(fired)\nfor i in range(n):\n    ans += fired[i] - hired[i]\n\nprint(ans)"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n') == '1\\n2\\n3'\nassert solution('4\\n1 1 2\\n') == 'none'\nassert solution('4\\n1 1 2\\n') == 'none'\nassert solution('4\\n1 1 2\\n') == 'none'\nassert solution('3\\n1 1 2\\n') == 'none'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 2 1 3\") == \"none\"\n\"\"\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 2') == '1\\n2\\n3'"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3\\n1 2 3\"\n) == \"1\\n2\\n3\"\nassert solution(\n\"4\\n1 2 1 3\"\n) == \"none\"\nassert solution(\n\"4\\n1 2 1 2\"\n) == \"none\"\nassert solution(\n\"4\\n1 2 3 1\"\n) == \"none\"\nprint('Passed!')\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 2\\n') == '1\\n2\\n3'\nassert solution('3\\n1 1 2\\n') == 'none'\nassert solution('3\\n1 1 2\\n') == 'none'\nassert solution('4\\n1 2 1 3\\n') == 'none'\nassert solution('3\\n1 1 1\\n') == '1\\n1'\n\nimport sys"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"3\n1 1 2\n\"\"\") == \"none\"\nassert solution(\n\"\"\"4\n1 2 1 3\n\"\"\") == \"none\"\nassert solution(\n\"\"\"4\n1 1 2 3\n\"\"\") == \"2\"\n\n\"\"\"\nSolution:\n\n1. Find all the numbers in the circle (taking in to account that any two numbers in the same \"ring\" of numbers may not appear twice)\n2. Take the numbers in the ring and find the difference between each pair\n3. Find the number of pairs that have the same value\n4. Divide the difference by 2 to get the number of numbers that are not in the same ring\n\n\"\"\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '1\\n2\\n3'\nassert solution('3\\n1 2 1') == 'none'\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 2\") == \"1\\n2\\n3\"\nassert solution(\"3\\n1 1 2 3\") == \"1\\n2\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\") == \"1\"\nassert solution(\"3\\n1 1 2\") == \"1\"\nassert solution(\"3\\n1 2 1\") == \"1\"\nassert solution(\"3\\n2 1 1\") == \"none\"\nassert solution(\"4\\n1 2 1 3\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 2\\n') == 'none'\nassert solution('3\\n1 2 3\\n') == '1'\nassert solution('4\\n1 2 1 3\\n') == 'none'\n\nfrom collections import defaultdict"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n2 1 0 1 2 3 3') == '5'\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str([2, 1, 0, 1, 2, 3, 3])) == 5"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2 1 0 1 2 3 3') == '5'\nassert solution('10\\n2 1 0 1 2 3 3 4 4') == '5'\nassert solution('100\\n2 1 0 1 2 3 3 4 4') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n2 1 0 1 2 3 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n2 1 0 1 2 3 3') == '5'"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2 1 0 1 2 3 3\") == \"5\"\nassert solution(\"7\\n2 1 0 1 2 3 4\") == \"7\"\nassert solution(\"7\\n2 1 2 2 4 3 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n2 1 0 1 2 3 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2 1 0 1 2 3 3\") == \"5\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 0 1') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n2 1 0 1 2 3 3') == '5'\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"-1 -1 -1 -1 -1\"\n\n\"\"\"\n\nimport collections\nfrom typing import List\nimport unittest\n\n\nclass Tests(unittest.TestCase):\n    def test_example_1(self):\n        self.assertEqual(solution(\n            \"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\"), \"-1 -1 -1 -1 -1\")\n\n    def test_example_2(self):\n        self.assertEqual(solution(\"5 6\\n#####\\n#.M.#\\n#_#.#\\n#.G.#\\n#####\"),\n                         \"3 2 1 2 -1\")\n\n    def test_example_3(self):\n        self.assertEqual(solution(\"5 6\\n#####\\n#_M.#\\n#_#.#\\n#.M.#\\n#####\"),\n                         \"-1 -1 -1 -1 -1\")\n\n    def test_example_4(self):\n        self.assertEqual(solution(\"5 6\\n#####\\n#_M.#\\n#_#.#\\n#.M.#\\n#####\"),\n                         \"1 2 1 2 -1\")\n\n    def test_example_5(self):\n        self."
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n#####\\n#..#\\n#_#\\n#__\\n#####\") == \"-1 -1 -1 -1 -1\"\nassert solution(\"5 6\\n#####\\n#_#\\n#__\\n#M\\n#####\") == \"0 1 2 3 -1\"\nassert solution(\"5 6\\n#####\\n#_#\\n#_#\\n#_#\\n#####\") == \"0 1 1 1 0\"\n\nprint(\"The strings above should be -1 -1 -1 -1 -1, 0 1 2 3 -1, and 0 1 1 1 0 respectively.\")\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n#####\\n#_###\\n#_M.#\\n#__.#\\n#####') == '-1 -1 -1 -1 -1'\n\n\"\"\""
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"-1 -1 -1 -1 -1\"\nassert solution(\"6 10\\n#..#\\n#...#\\n#_..#\\n#_.#M\\n#_.#_\\n#.###\\n#####\\n#_....\\n#..#.\") == \"3 3 3 3 3 3\"\nassert solution(\"5 4\\n#....\\n#....\\n#M.M\\n#####\\n#...#\") == \"0 0 0 0 0\"\nassert solution(\"6 9\\n#.....\\n#.....\\n#M.M.#\\n######\\n#.....\\n#.....\\n#.....\\n#.....\\n#.....\") == \"2 2 2 1 1 1 2 2 2 2\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n#####\\n#..#\\n#_#\\n#_#\\n#####') == '-1 -1 -1 -1 -1'\nassert solution('5 6\\n#####\\n#..#\\n#M#\\n#_#\\n#####') == '4 4 4 4 4'\nassert solution('5 6\\n#####\\n#.M#\\n#_#\\n#_#\\n#####') == '-1 -1 -1 -1 -1'\nassert solution('5 6\\n#####\\n#.m#\\n#_#\\n#_#\\n#####') == '4 4 4 4 4'\nassert solution('5 6\\n#####\\n#M.m\\n#_#\\n#_#\\n#####') == '-1 -1 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"-1 -1 -1 -1 -1\"\n\"\"\"\n\nm, n = [int(i) for i in input().split()]\nmaze = []\nfor _ in range(n):\n    maze.append([i for i in input()])"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n\") == \"6\"\nassert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n\") == \"impossible\"\n\n:param stdin:\n:return:\n\"\"\"\n\nimport sys\nimport math\n\nMAX_B = 100001\nMAX_D = 100001\nMAX_C = 100001\nB, D, C = [int(x) for x in stdin.readline().split()]\n\ndp = [[[math.inf for j in range(MAX_D)] for i in range(MAX_B)] for k in range(MAX_C)]\n\ninsecure = set(int(x) for x in stdin.readline().split())\nfor _ in range(D):\n    x, y, d = [int(x) for x in stdin.readline().split()]\n    dp[0][x][y] = d\n\nfor c in range(1, C):\n    for i in range(1, MAX_B):\n        for j in range(1, MAX_D):\n            dp[c][i][j] = min(dp[c][i][j], dp[c - 1][i][j])\n            if i in insecure or j in insecure:\n                dp[c][i][j] = min(dp[c][i][j], dp[c - 1][i][j])\n            else:\n                dp[c][i][j] = min(dp[c][i][j], dp[c - 1][i][j] + dp[c - 1][i - 1][j - 1])"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\nprint(solution(stdin))\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(example1) == '6'\nassert solution(example2) == 'impossible'"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\nprint(solution(stdin))\n\n----\n\n1\n6 1 1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n4\n4 3\n1 2 1\n2 3 2\n3 4 3\n\n6\n6\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n4\n4 3\n1 2 1\n2 3 2\n3 4 3\n\n2\n1\n1 2 1\n2 3 2\n3 4 3\n3\n4 3\n1 2 1\n2 3 2\n3 4 3\n\n1\n1\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n1\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n2\n3\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3\n1\n2\n1 2 1\n2 3 2\n3 4 3\n4\n4 3"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\"\nassert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('3\\n1 2 3\\n2 3 4') == '5'\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 2 1') == '01001'\nprint(solution('3 4 2 1'))\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"4 4 4 4\") == \"impossible\"\nassert solution(\"2 2 2 2\") == \"impossible\"\nassert solution(\"1 1 1 1\") == \"111111\"\nassert solution(\"1 1 1 1\") == \"111111\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"4 4 2 1\") == \"impossible\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\n\"\"\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('2 4 2 1') == '10100'\nassert solution('1 1 1 1') == 'impossible'\nassert solution('1 2 1 1') == '01110'\nassert solution('3 1 1 3') == '11110'\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"4 4 4 4\") == \"impossible\"\nassert solution(\"0 0 0 0\") == \"impossible\"\nassert solution(\"9 0 9 0\") == \"01010\"\nassert solution(\"0 1 0 0\") == \"impossible\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('1 1 1 1') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3,4,2,1) == \"01001\"\nassert solution(5,5,5,5) == \"impossible\"\n\"\"\""
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('7 9 1 1') == '11010'\nassert solution('10 10 1 1') == '11101'\nassert solution('10 10 10 1') == '11110'\nassert solution('10 10 10 10') == '11111'\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4 2 1''') == '01001'\nassert solution('''1 2 3 4''') == 'impossible'\nassert solution('''4 1 2 3''') == '10101'\nassert solution('''2 1 1 1''') == '11110'\nassert solution('''1 1 1 1''') == '11111'\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\\n\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\\n\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\\n\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\\n\"\n\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\\n\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4'\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport copy"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4'\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'possible'\nassert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'possible'\nassert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'possible'\nassert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'possible'\n\nassert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'possible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\n\nSample Input:\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\nSample Output:\nimpossible\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 6') == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3'\n\"\"\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\""
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4'\nassert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == 'impossible'\nassert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4'\nassert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == 'impossible'\nassert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\n\n\"\"\""
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n') == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\\n'\nassert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n') == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\\n'\n\nSample Input:\n3 4 6\n1 1\n2 3\n2 3\nSample Output:\nimpossible\n\"\"\""
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\"\"\"\n) == \"2.0\"\n\n\"\"\"\nExplanation:\nThe shortest path is 2.0 in which the spacecraft moves to (0, 0) and then (0, 1) and then (2, 3) and then (2, 1) and then returns to (0, 0).\n\"\"\"\n\n\"\"\"\nassert solution(\n\"\"\"4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\"\"\"\n) == \"2.0\"\n\n\"\"\"\nExplanation:\nThe shortest path is 2.0 in which the spacecraft moves to (0, 0) and then (0, 1) and then (2, 3) and then (2, 1) and then returns to (0, 0).\n\"\"\"\n\nassert solution(\n\"\"\"4\n1 0 2\n2 0 2\n1 1 2\n2 2 3\"\"\"\n) == \"2.8284271247461903\"\n\n\"\"\"\nExplanation:\nThe shortest path is 2.8284271247461903 in which the spacecraft moves to (1, 0) and then (2, 0) and then (1, 1) and then (2, 2) and then (2, 3).\n\"\"\"\n\nassert solution(\n\"\"\"8\n0 0 0\n0 1 0\n0 0 2\n1 0 2\n1 1 2\n2 0 2\n2 2 3\n0 0 0\n0 0 0\"\"\"\n) == \"5.385164807134504\"\n\n\"\"\"\nExplanation:\nThe shortest path is 5.385164807134504 in which the spacecraft moves to (0, 0) and then (0, 1) and then (0, 2) and then (1, 2) and then (2, 2) and then (2, 3).\n\"\"\"\n\nassert solution(\n\"\"\"4\n0 0 2\n1 0 1\n0 0 1\n1 0 1\"\"\"\n) == \"2.0\"\n\n\"\"\"\nExplanation:\nThe shortest path is 2.0 in which the spacecraft moves to (0, 0) and then (1, 0) and then (0, 0) and then (1, 0) and then (2, 0) and then (1, 1).\n\"\"\""
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0\\n0\\n1\\n2\\n2\\n3\\n2\\n3\\n0\\n1\\n0\\n1\\n2\\n0\\n0\\n2\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4 5') == '0.0'\n'''\n\nimport sys\nimport math\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\""
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\"\"\") == \"2.0\"\n\n\"\"\"\nfrom typing import List\nfrom math import sqrt"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == '2.0'\n\"\"\""
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n\n-----Solution-----\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n\n-----Notes-----\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\n\n\"\"\""
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4 3 2 1 6 7\\n5 5 1 1 3 4 7') == '4'\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\n\ncols = Counter(map(int, input().split()))\n\nres = 0\n\nfor i in range(1, N + 1):\n    if cols[i] == 1:\n        res += 1\n\nprint(N - res)\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 4 3 2 1 6 7\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5\\n1\\n1\\n3\\n4\\n7') == '4'"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 4 3 2 1 6 7\") == '4'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ntable = [list(map(int, sys.stdin.readline().split())) for _ in range(3)]\n\ncolumns = []\nfor i in range(n):\n    col = [row[i] for row in table]\n    columns.append(col)\n\ncolumns_unique = [set(column) for column in columns]\n\nuniques = [len(column) for column in columns_unique]\n\nfor i in range(len(uniques) - 1, -1, -1):\n    if uniques[i]!= len(uniques) - i - 1:\n        if len(uniques) - i - 1!= uniques[i]:\n            uniques.pop(i)\n\nanswer = len(uniques)\n\nsys.stdout.write(str(answer))\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\nassert solution(\n    '3\\n4 6 3 2 1 5\\n1 2 2 3 1 1\\n2 3 2 4 1 4\\n2 2 2 1 1 1') == '3'\nassert solution(\n    '7\\n1 1 1 1 1 1 1\\n2 2 2 2 2 2 2\\n3 3 3 3 3 3 3\\n4 4 4 4 4 4 4') == '0'\nassert solution(\n    '7\\n1 6 1 2 1 3 4\\n1 1 2 3 4 5 6\\n1 1 2 1 4 5 6\\n1 2 2 1 2 4 5\\n1 2 1 1 1 1 4\\n1 1 1 1 1 1 1') == '3'\nassert solution(\n    '8\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\\n3 7 1 4 5 6 2') == '1'\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2''') == '4'"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n-10 0\\n-10 10\") == \"2\"\nassert solution(\"4\\n-10 0\\n10 10\") == \"3\"\n\n-----Hint-----\nThe shortest chain length should be:\n\n$L + \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}$\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\n\n-----Explanation-----\nThe wall passes through the points (-10,0) and (-10,10). Hence the length of the chain is 2.\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\n\"\"\""
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n-10 0\\n-10 10\") == \"2\"\nassert solution(\"4\\n5 0\\n5 10\") == \"4\"\nassert solution(\"4\\n10 0\\n10 10\") == \"1\"\nassert solution(\"4\\n-5 10\\n-5 0\") == \"3\"\nassert solution(\"4\\n0 0\\n10 10\") == \"0\"\n\nSample Case 0:\n\nSample Input:\n4\n-10 0\n-10 10\nSample Output:\n2\n\nSample Case 1:\n\nSample Input:\n4\n5 0\n5 10\nSample Output:\n4\n\nSample Case 2:\n\nSample Input:\n4\n10 0\n10 10\nSample Output:\n1\n\nSample Case 3:\n\nSample Input:\n4\n-5 10\n-5 0\nSample Output:\n3\n\"\"\"\n\nL = int(input())\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\n\nx_diff, y_diff = x1 - x2, y1 - y2"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\n\"\"\""
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n-10 0\\n-10 10\") == \"2\"\nassert solution(\"3\\n-1 1\\n1 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\n\"\"\"\n\nfrom math import *\nimport math\nimport sys\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n-10 0\\n-10 10\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\n''') == '0'\nassert solution('''\n3 2\n''') == '0'\nassert solution('''\n3 5\n''') == '1'\nassert solution('''\n3 9\n''') == '0'\nassert solution('''\n3 8\n''') == '3'\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"0\"\n\"\"\"\n\nfrom typing import List\nfrom math import gcd\nfrom functools import reduce\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5') == 0\nassert solution('2 3') == 2\nassert solution('1 1') == 0\nassert solution('1 2') == 2\nassert solution('1 5') == 0\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == 0\n\"\"\""
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5\\n') == 0\nassert solution('1 1\\n') == 0\nassert solution('1 5\\n') == 0\nassert solution('2 5\\n') == 1\nassert solution('2 6\\n') == 1\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5\\n') == 0\nassert solution('2 3\\n') == 6\nassert solution('3 4\\n') == 4\nassert solution('100 4\\n') == 100\nassert solution('110 3\\n') == 1\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == 0\nassert solution(\"2 4\") == 2"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5\\n\") == \"0\"\nassert solution(\"1 5\\n\") == \"0\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5\\n') == '0'\nassert solution('2 10\\n') == '2'\nassert solution('1 1000000\\n') == '0'\n\"\"\"\n\nimport sys\n\nlines = iter(sys.stdin)\nk, n = next(lines).strip().split()\nk = int(k)\nn = int(n)\n\nf = [42]\nfor i in range(1, k):\n    f.append(2 * f[i - 1] - f[i - 2] + 10 * i)\n\nresult = 0\nfor _ in range(n):\n    rock_count = next(lines).strip()\n    if f[k - 1] % int(rock_count) == 0:\n        result += 1\n\nprint(result)\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5\\n') == 0\n\"\"\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0\\n1 1\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import *\nimport itertools\n\nINPUT_1 = \"\"\"2 2\n1 0\n0 1\"\"\"\n\nINPUT_2 = \"\"\"3 3\n1 0 0\n0 1 0\n0 0 1\"\"\"\n\nINPUT_3 = \"\"\"3 3\n1 1 1\n1 1 1\n1 1 1\"\"\"\n\nINPUT_4 = \"\"\"5 5\n0 1 1 1 0\n1 1 1 1 0\n0 0 1 1 1\n0 1 1 1 1\n0 1 1 1 1\n\"\"\"\n\nINPUT_5 = \"\"\"7 7\n0 0 0 0 0 0 0\n0 1 1 1 1 1 1\n0 1 1 1 1 1 1\n0 1 1 1 1 1 1\n0 1 1 1 1 1 1\n0 1 1 1 1 1 1\n0 1 1 1 1 1 1\"\"\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\\n1 0 0\\n0 1 0\\n0 0 1\\n0 0 0\\n0 1 0\\n0 0 0\\n0 1 0\") == '0 0\\n1 1\\n0 0\\n0 0\\n1 1\\n0 0'\n\n\"\"\"\n\n\n\nimport numpy as np\nimport math\nimport time\n\nstdin = [\n    [2, 2],\n    [4, 2],\n    [5, 3],\n    [6, 3],\n    [7, 4],\n]\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0\\n1 1\"\n\"\"\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n0 1 0 1 1\\n0 0 0 0 0\\n0 0 0 0 0\\n1 0 1 1 1\\n1 1 1 1 1\") == \"0 0 0 1 1\\n1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0\\n1 1\"\n\"\"\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"\n0 0\n1 1\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n1 0 0 0\n1 0 1 1\n1 0 1 1\n1 0 0 1\n\"\"\") == \"\"\"\n0 0\n1 1\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 1 0 0 0\n1 1 0 1 1\n1 1 0 1 1\n1 1 0 0 1\n1 1 0 0 1\n\"\"\") == \"\"\"\n0 0\n1 1\n\"\"\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n1 0 0\n0 1 0\n0 0 1\"\"\") == \"\"\"0 0\n1 1\n\"\"\"\n\nassert solution(\"\"\"2 2\n1 0\n0 1\"\"\") == \"\"\"0 0\n1 1\n\"\"\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0\\n1 1\\n2 2\"\nassert solution(\"5 6\\n0 1 0 1 0 0\\n1 1 1 1 1 1\\n0 1 1 0 1 0\\n0 0 1 1 1 1\\n0 1 1 1 1 1\\n0 1 1 1 1 1\\n0 1 1 1 1 1\") == \"1 2\\n1 3\\n3 4\\n4 5\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2\n1 0\n0 1\n0 0\n1 0\n0 0\n1 0\n0 0\n0 0\n1 1\n0 1\n1 1\n1 1''') == '0 0\\n1 1\\n2 2\\n3 3\\n'\n\nassert solution('''4 2\n0 0\n1 0\n0 0\n1 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n1 1\n1 1''') == '0 0\\n1 1\\n2 2\\n3 3\\n'\n\nassert solution('''2 3\n1 0 0\n0 1 0\n0 0 1\n0 1 0\n0 0 1\n0 1 0\n0 1 0\n0 1 0\n1 1\n0 1 0\n1 1\n0 1 0\n0 1 0\n0 1 0\n0 1 0\n0 1 0\n1 1\n1 1\n0 0 1\n1 1\n1 0 1\n0 1 0\n0 1 0\n1 0 1\n0 1 0\n0 1 0\n0 1 0\n1 1\n0 0 1\n0 1 0\n0 1 0\n0 0 1\n0 1 0\n1 1\n0 1 0\n1 0 1\n0 1 0\n0 1 0\n0 1 0\n1 0 1\n0 1 0\n0 1 0\n1 0 1\n1 1\n0 0 1\n1 0 1\n0 1 0\n0 0 1\n0 1 0\n1 0 1\n0 1 0\n0 1 0\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n1 1\n0 0 1\n0 1 0\n1 1\n0 0 1\n0 1 0\n1 0 1\n1 0 1\n0 0 1\n0 1 0\n1 0 1\n0 1 0\n0 0 1\n0 0 1\n1 0 1\n1 1\n1 1\n0 0 1\n1 1\n0 1 0\n0 1 0\n0 1 0\n0 1 0\n0 1 0\n0 0 1\n0 1 0\n1 0 1\n0 0 1\n1 1\n1 0 1\n1 0 1\n0 1 0\n0 0 1\n1 0 1\n0 0 1\n1 0 1\n1 0 1\n1 0 1\n0 0 1\n0 1 0\n0 0 1\n1 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 1\n0 1 0\n1 0 1\n1 0 1\n0 0 1\n0 0 1\n1 1\n0 1 0\n0 1 0\n1 0 1\n1 0 1\n0 0 1\n0 1 0\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n1 0 1\n0 1 0\n0 0 1\n0 1 0\n1 1\n0 1 0\n1 0 1\n0 0 1\n1 0 1\n0 1 0\n0 1 0\n0 1 0\n1 1\n1 1\n1 1\n1 1\n0 1 0\n1 1\n0 0 1\n1 0 1\n0 0 1\n0 1 0\n1 1\n1 0 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 1 0\n0 1 0\n0 0 1\n1 1\n0 1 0\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n1 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1\n0 0 1\n1 0 1\n1 1\n0 0 1\n0 1 0\n0 0 1\n0 0 1\n0 1 0\n1 0 1\n0 0 1\n0 0 1\n0 1 0\n1 1\n0 0 1\n0 1 0\n0 1 0\n0 0 1\n1 1\n1 1\n0 0 1\n0 1 0\n0 0 1\n1 1\n1 1\n1 0 1\n1 0 1\n1 1\n0 0 1\n0 1 0\n1 0 1\n1 1\n1 1\n1 1\n0 0 1\n0 0 1\n0 1 0\n0 0 1\n1 0 1\n0 1 0\n0 0 1\n0 0 1\n0 1 0\n1 0 1\n0 1 0\n0 0 1\n0 1 0\n0 0 1\n0 0 1\n0 1 0\n0 0 1\n1 0 1\n1 0 1\n1 0 1\n0 0 1\n1 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 1 0\n0 0 1\n1 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n0 1 0\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 1 0\n1 0 1\n1 0 1\n1 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n1 1\n0 0 1\n0 0 1\n0 1 0\n0 0 1\n0 0 1\n0 1 0\n1 1\n0 0 1\n1 1\n1 0 1\n0 1 0\n0 1 0\n1 0 1\n1 1\n0 0 1\n0 0 1\n1 0 1\n1 1\n0 0 1\n0 0 1\n1 0 1\n0 1 0\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 1 0\n1 1\n1 0 1\n0 0 1\n1 1\n1 0 1\n0 0 1\n0 0 1\n1 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 1 0\n0 0 1\n1 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 1 0\n1 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 1 0\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n1 0 1\n0 1 0\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1\n0 0 1\n0 0"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0 1 1\\n1 1'\n\n'''\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n\"\"\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == '44.975'\n\"\"\"\n\nB, T, f = map(float, input().split())\n\nbugs = []\n\nfor _ in range(B):\n    p, s = map(float, input().split())\n    bugs.append((p, s))\n\nfor i in range(T):\n    sum_severity = 0\n    for j in range(B):\n        sum_severity += bugs[j][1] * bugs[j][0] ** i\n    print(sum_severity * f)\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n\n---Problem---\nImplement a solution that solves the problem at hand. \n\nThe solution must be able to deal with a change in the number of bugs, the number of hours left until the release of the new version of the product, and the factor $f$ (the maximum possible factor that the bug fixing probability can be reduced by).\n\nPlease, do not use the built-in functions to solve this problem.\n\n----Solution---\n\n\"\"\"\n\nimport sys\nimport collections\nimport math"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 2 0.950000\n0.700000 50''') == '44.975'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(s)) == str(ans)\n\"\"\"\nfrom math import inf\nfrom math import log10\nfrom typing import List\nfrom typing import Tuple\n\nBugs: int = 0\nT: int = 0\nF: float = 0.0"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == \"44.975\"\nprint(solution(\"1 2 0.950000\\n0.700000 50\"))\n\"\"\"\n\nimport numpy as np\nimport random"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 0.950000') == '44.975'\nassert solution('0 2 0.950000') == '31.125'\nassert solution('1 2 0.990000') == '44.995'\nassert solution('0 2 0.990000') == '31.125'\n\n-----Explanation-----\nThe first line of input contains three numbers: $B$, $T$, and $f$. \n\nIn the second line of input, we have $B$ lines, each of which contains two numbers: the initial fix probability ($p$) and the severity ($s$) of the bug.\n\nThe third line of input contains $B$ lines, each of which contains two numbers: the initial fix probability ($p$) and the severity ($s$) of the bug.\n\nThe total expected value of the total severity of fixed bugs in the first case is exactly the sum of the two numbers in the first line of input.\n\nThe second case is similar. \n\nIn both cases, the value of the total expected value of the total severity of fixed bugs is the same, since it is possible to resolve all bugs in less than an hour, in which case the total expected value of the total severity of fixed bugs is simply the sum of the two numbers in the first line of input.\n\nThe only difference is that in the second case, the total expected value of the total severity of fixed bugs is multiplied by $f$, which in turn reduces the fix probability for each bug. This is consistent with the fact that in the second case the total expected value of the total severity of fixed bugs is the same as that in the first case, but in the second case the total expected value of the total severity of fixed bugs is multiplied by $f$.\n\nIf we work on any of the bugs with the highest fix probability and it fails, the fix probability of that bug will be multiplied by $f$. The fix probability of the other bugs will remain unchanged. The same applies to the severity of the bugs.\n\nIt is not clear whether it is better to work on the bugs with the highest fix probability, or those with the lowest severity. If we chose to work on the bugs with the highest fix probability, it is clear that we will fail to fix all of the bugs, since there will be no time left to work on the bugs with the lowest severity. If we chose to work on the bugs with the lowest severity, then the total expected value of the total severity of fixed bugs will be the same as in the first case, but it is clear that we will not have a chance to work on all of the bugs. In fact, it is clear that we will not have a chance to work on any of the bugs.\n\nHence, it is better to work on the bugs with the lowest severity, since it is clear that we will not have a chance to work on all of the bugs. Since each bug has a severity and a fix probability, the total expected value of the total severity of fixed bugs will be equal to the product of these two numbers.\n'''"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nprint(solution('1 2 0.950000\\n0.700000 50'))"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == \"44.975\"\n\nSample Input:\n3 100 0.980000\n0.080000 0\n0.180000 0\n0.060000 0\n0.040000 0\nSample Output:\n863.7675\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\") == \"2\"\n\nassert solution(\"4 1 2\\n2 2\\n4 1\\n1 2\\n1 3\\n4\\n2\\n2\\n1\") == \"2\"\n\nassert solution(\"4 1 2\\n2 2\\n4 1\\n1 2\\n1 3\\n4\\n2\\n2\\n1\") == \"IMPOSSIBLE\"\n\nassert solution(\"4 1 2\\n2 2\\n4 1\\n1 2\\n1 3\\n4\\n2\\n2\\n1\") == \"3\"\n\nassert solution(\"4 1 2\\n2 2\\n4 1\\n1 2\\n1 3\\n4\\n2\\n2\\n1\") == \"2\""
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\\n3\") == '2'\n\"\"\""
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1''') == '2'\n\nassert solution('''6 2 2\n1 5\n7 3\n1 3\n6\n3\n3\n3''') == '1'\n\nassert solution('''10 9 10\n1 1\n7 3\n1 4\n5\n4\n4\n3\n3\n3\n2\n1\n''') == '1'\n\nassert solution('''10 9 10\n1 1\n7 3\n1 4\n5\n4\n4\n3\n3\n3\n2\n1\n''') == '1'\n\nassert solution('''8 4 8\n1 1\n7 3\n1 4\n5\n4\n4\n3\n3\n3\n2\n1\n''') == '1'"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1') == '2'\n\"\"\""
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1''') == '2'\nassert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1''') == 'IMPOSSIBLE'\nassert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n2''') == '1'\nassert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n2\n1''') == '2'\nassert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n2\n1\n1\n2''') == '1'\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1''') == '2'\nassert solution('''9 5 2\n3 8\n5 7\n3 9\n3\n6\n6\n4\n9\n5\n1\n''') == '6'\nassert solution('''9 5 2\n3 8\n5 7\n3 9\n3\n6\n6\n4\n9\n5\n1\n''') == '6'\nassert solution('''9 5 2\n3 8\n5 7\n3 9\n3\n6\n6\n4\n9\n5\n1\n''') == 'IMPOSSIBLE'\nassert solution('''9 5 2\n3 8\n5 7\n3 9\n3\n6\n6\n4\n9\n5\n1\n''') == '5'\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n10 8 2\n1 1\n5 1\n1 3\n3\n3\n2\n1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n10 8 2\n1 1\n5 1\n1 3\n3\n3\n2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 8 2\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"2\""
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1\\n1 1\\n3\\n2\\n1\\n3\\n\") == \"2\"\n\"\"\"\n\nimport collections\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1') == '2'\nassert solution('3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1') == '2'\nassert solution('2 3 3\\n1 1\\n1 2\\n1 3\\n2\\n1\\n3') == 'IMPOSSIBLE'\nassert solution('2 3 3\\n1 1\\n1 2\\n1 3\\n2\\n2\\n3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'IMPOSSIBLE'\n\nassert solution('5 2 3\\n1 1\\n5 2\\n1 3\\n3\\n2\\n1\\n3') == '2'\n'''\n\n'''\nGiven a set of left and right gates with vertical positions and horizontal speed, compute the minimum time to finish the race.\n\nInput Format\nThe first line contains the three integers W, V, and N, separated by a space. W is the maximum horizontal speed, V is the maximum vertical speed, and N is the number of gates.\n\nThe following N lines each contain two integers X and Y, giving the horizontal and vertical position of the gates, with 0 <= X,Y <= W.\n\nThe last line contains S, the number of skis.\n\nThe following S lines each contain two integers S and V, giving the speed of the skis, with 1 <= S, V <= W.\n\nConstraints\n0 <= V <= W <= 10^6\n1 <= X,Y <= 10^8\n1 <= S <= 10^6\n1 <= V <= W <= 10^6\n\nOutput Format\nOutput one line containing the minimum time.\n\nSample Input 0\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\nSample Output 0\n1\nSample Input 1\n5 10 5\n7 5\n8 9\n5 4\n5\n5\n5\n2\n4\nSample Output 1\n4\nExplanation\n\nIn this example, we may choose the following pair of skis:\n\nSkis speed: 5 m/s, 5 m/s, 5 m/s\nSkis horizontal speed: 7 m/s, 8 m/s, 9 m/s\nSkis vertical speed: 5 m/s, 4 m/s, 5 m/s\nThe distance between the skis is 6.2 m, which is short enough for the skis to finish the race with speed 5 m/s.\n\nIn this example, we may choose the following pair of skis:\n\nSkis speed: 5 m/s, 5 m/s\nSkis horizontal speed: 5 m/s\nSkis vertical speed: 4 m/s\nThe distance between the skis is 2 m, which is short enough for the skis to finish the race with speed 5 m/s.\n'''"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\\n\") == \"4.0\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"4.0\"\n\n\"\"\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0''') == '4.0'\n\n'''\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0434\u043d\u0443 \u043d\u043e\u0432\u0443\u044e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u0437\u0430\u0431\u043e\u0442\u044b \u043e\u0431 \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0438\u0445: \u0434\u0432\u0430 \u0441\u0432\u043e\u0440\u0435\u043d\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043c\u0430 \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0432\u0441\u044e \u0433\u0435\u043d\u0435\u0440\u0430\u043b\u044c\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043e\u043a\u0435\u0430\u043d\u0430, \u0432 \u0432\u044b\u0431\u043e\u0440\u0430\u0445 \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439. \u041e\u0434\u043d\u0430 \u0447\u0430\u0441\u0442\u044c \u043e\u043a\u0435\u0430\u043d\u0430 \u0434\u043b\u0438\u043d\u043e\u0439 $L$ \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u043c\u0438\u0440\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043c\u043e\u0432. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435 \u0447\u0430\u0441\u0442\u0438 \u043e\u043a\u0435\u0430\u043d\u0430 \u043f\u043e\u043a\u0440\u044b\u0442\u044b \u0432\u043e\u0434\u043e\u0439, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u043e\u043a\u0435\u0430\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043d\u044b \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u0430 \u043c\u0435\u043d\u044c\u0448\u0435.\n\u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u043e\u043a\u0435\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $P$, $A$, $L$ \u0438 $Q$. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432:\n - $P = A = L$\n - $P < A < L$\n - $P < A > L$\n - $P > A > L$\n - $P = A = L, Q = 0$\n - $P = A > L$\n - $P = L, Q = 0$\n - $P < A = L, Q = 0$\n - $P = A < L, Q = 0$\n - $P < L, Q = 0$\n - $P > A = L, Q = 0$\n - $P > L, Q = 0$\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $Q$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $x_1$, $y_1$, $x_2$, $y_2$, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043d\u0443\u043b\u044f.\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $T$. \u0427\u0438\u0441\u043b\u043e $T$ \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432:\n - $T = P$\n - $T = A$\n - $T = L$\n - $T = P+A$\n\u0415\u0441\u043b\u0438 \u043e\u043a\u0435\u0430\u043d \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e -1.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $T$, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0435\u0435 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u043e\u043a\u0435\u0430\u043d\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n3 3 3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4\n'''\n\nP, A, L, Q = map(int, input().split())"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\n\nP, A = map(int, input().split())\n\narea = 0\n\nx = [0 for _ in range(P)]\ny = [0 for _ in range(P)]\nfor _ in range(P):\n    x[_], y[_] = map(float, input().split())\n\nx = sorted(x)\ny = sorted(y)"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == '4.0'\nassert solution(\"2 3\\n1.0 1.0\\n1.0 2.0\") == '3.0'\nassert solution(\"2 2\\n0.0 1.0\\n1.0 0.0\") == '1.5'\n\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"4.0\"\n\"\"\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0''') == '4.0'\nassert solution('''3 3\n0.0 1.0\n1.0 0.0\n1.0 1.0\n4.0 4.0\n4.0 10.0\n10.0 4.0\n4.0 4.0''') == '0.0'\nassert solution('''3 3\n0.0 1.0\n0.0 0.0\n1.0 1.0\n4.0 4.0\n4.0 10.0\n10.0 4.0\n4.0 4.0''') == '0.0'\nassert solution('''2 1\n0.0 5.0\n5.0 0.0\n5.0 5.0\n0.0 0.0\n0.0 5.0\n2.0 2.0\n2.0 2.0\n0.0 5.0\n5.0 0.0\n2.0 2.0\n0.0 0.0\n5.0 5.0\n2.0 2.0\n2.0 2.0\n5.0 5.0\n0.0 0.0\n2.0 2.0\n2.0 2.0\n2.0 2.0\n2.0 2.0\n2.0 2.0\n2.0 2.0\n5.0 5.0\n2.0 2.0\n2.0 2.0\n2.0 2.0\n2.0 2.0\n2.0 2.0\n5.0 5.0\n2.0 2.0\n5.0 5.0\n5.0 0.0\n5.0 5.0\n5.0 0.0\n5.0 0.0\n5.0 5.0\n0.0 0.0\n5.0 5.0\n0.0 0.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n5.0 0.0\n5.0 0.0\n0.0 0.0\n5.0 5.0\n5.0 5.0\n0.0 0.0\n5.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n5.0 5.0\n5.0 5.0\n0.0 0.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n5.0 0.0\n5.0 0.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 5.0\n5.0 5.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 0.0\n0.0 0.0\n5.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 0.0\n0.0 0.0\n0.0 0.0\n5.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0.0 0.0\n0"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\nassert solution('6 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\nassert solution('6 3\\n6.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\nfrom enum import Enum\nfrom typing import Dict, List, Optional, Tuple\n\n\nclass Point:\n    def __init__(self, x: float, y: float):\n        self.x = x\n        self.y = y\n\n    def __str__(self) -> str:\n        return f'{self.x}, {self.y}'\n\n    def __add__(self, other: Point) -> Point:\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: Point) -> Point:\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other: float) -> Point:\n        return Point(self.x * other, self.y * other)\n\n    def __truediv__(self, other: float) -> Point:\n        return Point(self.x / other, self.y / other)\n\n\nclass LineSegment:\n    def __init__(self, start: Point, end: Point):\n        self.start = start\n        self.end = end\n\n    def __str__(self) -> str:\n        return f'{self.start} to {self.end}'\n\n    def length(self) -> float:\n        return math.sqrt(\n            (self.end.x - self.start.x) ** 2 +\n            (self.end.y - self.start.y) ** 2\n        )\n\n\nclass Line(LineSegment):\n    def __init__(self, start: Point, end: Point, length: float):\n        super().__init__(start, end)\n        self.length = length\n\n\nclass Triangle:\n    def __init__(self, line: Line, line2: Line, line3: Line):\n        self.line = line\n        self.line2 = line2\n        self.line3 = line3\n\n    def __str__(self) -> str:\n        return f'{self.line} {self.line2} {self.line3}'\n\n\nclass Area(Triangle):\n    def __init__(self, triangle: Triangle, area: float):\n        super().__init__(triangle.line, triangle.line2, triangle.line3)\n        self.area = area\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\n\"\"\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n220 29\\n195 20\\n200 9\\n180 30\") == '18000'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n220 29\\n195 20\\n200 9\\n180 30\") == \"18000\"\n\"\"\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"220 29\\n195 20\\n200 9\\n180 30\") == \"18000\""
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\n\"\"\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\n\"\"\"\nimport sys"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30\\n') == '18000'\nassert solution('4\\n160 30\\n180 30\\n160 30\\n') == '16000'"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"220 29\\n195 20\\n200 9\\n180 30\") == \"18000\"\n\nprint(solution(\"220 29\\n195 20\\n200 9\\n180 30\"))\n\"\"\"\n\n\"\"\"\nWe can solve this by enumerating all possible partitions of the books into sets of 3. For each partition, we can calculate the area of the bookcase in each dimension. We can then find the minimum area of all the dimensions.\n\nAs a sanity check, we note that if a partition of the books had 4 shelves (3 with two books each), then the sum of the areas of the books on each shelf would be twice the area of the books on the top shelf.\n\nWe iterate over the possible partitions, keeping track of the sum of areas in each dimension. We then find the minimum area."
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n220 29\\n195 20\\n200 9\\n180 30\") == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"220 29\\n195 20\\n200 9\\n180 30\") == \"18000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(read_input()) == '28'\nprint(solution(read_input()))\n\"\"\""
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BUYSTICKERS\") == '28'\n\n\"\"\"\nimport sys\nimport collections\nfrom typing import List, Tuple, Dict\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"B\") == \"B\"\nassert solution(\"BBBBB\") == \"IMPOSSIBLE\"\nassert solution(\"BANANA\") == \"IMPOSSIBLE\"\nassert solution(\"BANANA\") == \"IMPOSSIBLE\"\nassert solution(\"BANANA\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BUYSTICKERS\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\n\"\"\"\n\nimport sys\n\ninput_data = sys.stdin.readlines()\n\nstickers = {}\n\nfor i in range(1, len(input_data)):\n    line = input_data[i].split()\n    stickers[line[0]] = int(line[1])\n\nmessage = input_data[0]"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('BUYSTICKERS') == 'BUYSTICKERS'\nassert solution('BUSH') == 'IMPOSSIBLE'\nassert solution('BUSHBUYSTICKERSERS') == '28'\nassert solution('BUSHBUYSTICKERSERSBUSH') == 'IMPOSSIBLE'"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BUYSTICKERS\") == \"IMPOSSIBLE\"\nassert solution(\"BUYSTICKERS\") == \"IMPOSSIBLE\"\nassert solution(\"BUYSTICKERS\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8''') == '28'\n\n---Problem---\nJessen wants to buy some stickers. She has to buy $m$ stickers. She bought the sticker of size $n$, and it costs $p_n$. She has $r$ pieces of other stickers, which cost each $p_r$. She wants to buy stickers of size $n$ and minimal cost $p_n$ such that she can assemble the message that is written on the sticker by using at most two stickers.\n\nJessen wants to buy stickers of size $n$ and minimal cost $p_n$ such that she can assemble the message that is written on the sticker by using at most two stickers. The output should be the minimum cost of buying stickers, $p_{m,n}$. If the message cannot be assembled by the sticker, the output should be IMPOSSIBLE.\n\n-----Input-----\nThe first line contains the message written as one word in capital letters. The second line contains $m$, the number of stickers bought by Jessen. The third line contains $n$, the size of each sticker Jessen bought. The fourth line contains $r$, the number of pieces of stickers that she has. Each of the next $r$ lines contains the size of each sticker ($n$) and the price ($p_r$) that Jessen bought of that sticker. The price is positive integer $\\leq 100000$ and the size is at most $20$. The length of the message is at most $1000$.\n\n-----Output-----\nThe output should be the minimal cost of buying stickers, $p_{m,n}$. If the message cannot be assembled by the sticker, the output should be IMPOSSIBLE.\n\n-----Examples-----\nSample Input:\nAQUARIUM\n2\n4\n3\n5\n3\n3 1\n10\n5\n5\n2 3\n5\nSample Output:\n8\n3\n3\n8\n3\n8\n3\n'''\nimport math"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BUYSTICKERS\", 4) == \"28\"\n\n-----Constraints-----\n1 <= |stdin| <= 1000\n1 <= n <= 500\n1 <= |sticker| <= 20\n1 <= price <= 100000\n\n\"\"\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\n'\n\n\"\"\""
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n\"\"\"\n\nR, S, L = [int(x) for x in stdin.split()]\n\nres = []\n\nfor _ in range(L):\n    a, b = [int(x) for x in stdin.split()]\n\n    if a > b:\n        res.append(\"INDV \" + str(a))\n        res.append(\"CORP \" + str(b))\n    else:\n        res.append(\"CORP \" + str(a))\n        res.append(\"INDV \" + str(b))\n\nprint(\"\\n\".join(res))\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n\"\"\""
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n\"\"\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"INDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\"\"\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"INDV 2\nINDV 3\nINDV 4\nCORP 1\nINDV 5\nCORP 2\"\"\"[1:]\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"CORP 1\nINDV 1\nCORP 2\nINDV 4\nCORP 3\nINDV 5\"\"\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"CORP 1\nINDV 1\nCORP 2\nINDV 4\nCORP 3\nINDV 5\"\"\"\n\"\"\""
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\\n') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\nSee https://www.codewars.com/kata/5b6e1c9f723cb004f6b0032b for more information.\n\"\"\""
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 1') == 'INDV 2'\nassert solution('1 1\\n1 2') == 'INDV 1'\nassert solution('1 1\\n2 1\\n3 1') == 'INDV 3'\nassert solution('1 1\\n1 2\\n2 3') == 'INDV 2'\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"INDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\"\"\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"INDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\"\"\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"INDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\"\"\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"INDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\"\"\"\n\n\"\"\"\nIt is pretty straightforward. For each lawsuit, determine what is the party that should be ruled in favor and what should be ruled against. For each lawsuit, rule in favor of the party which should win the case. Then, for each lawsuit, rule against the party which should lose the case.\n\"\"\""
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\nCORP 3\"\n\n------------------------------\n\n2. Backtracking\n\nKattis is very fond of backtracking. He calls it the \u201cBacktracking Game\u201d, because he is inspired by a standard backtracking game (see Juris Doctor - Part II for more info).\n\nThere is a game called \u201cKattis the Backtracking Game\u201d, and it\u2019s much like Kattis\u2019s \u201cBacktracking Game,\u201d only better, harder and sometimes more interesting.\n\nIn this game, Kattis is the \u201cBacktracking Knight\u201d and he needs to get all of his knights in the chess board. The knight can move either up, down, left or right. To win the game, he has to collect all of his knights.\n\nThere is a board where each position has a certain character: \u201c*\u201d means the position is empty and \u201c#\u201d means the position is occupied by a knight. The knight can also occupy positions in the diagonal, so there are eight possible moves for the knight.\n\nThe knight has to make moves until he collects all knights. For this, Kattis uses backtracking.\n\nWhen he gets stuck, Kattis makes a move that he thinks would get the knight to win, and then calls his friend to help him. Kattis always thinks that there will be a solution to his problem, so he doesn\u2019t have to do any searching for himself.\n\nIf he does not find a solution after calling his friend, Kattis starts to backtrack, trying to change some of his moves and try again.\n\nWhen the knight collects all the knights, he wins.\n\nYou are asked to help Kattis in writing a program that will do exactly that. You need to write a program that will determine if it is possible to win the game for the knight.\n\n-----Input-----\n\nThe first line of input contains three integers, $R$ ($1 \\leq R \\leq 2000$), $S$ ($1 \\leq S \\leq 2000$) and $L$ ($\\max (R, S) \\leq L \\leq 2000$), the number of individuals, the number of corporations and the number of lawsuits.\n\nThe next $L$ lines contain the descriptions of the lawsuits. In particular, the $i^\\text {th}$ of these lines contains two integers $A_ i$ ($1 \\leq A_ i \\leq R$) and $B_ i$ ($1 \\leq B_ i \\leq S$), denoting that the $i^\\text {th}$ lawsuit involves individual $A_ i$ and corporation $B_ i$.\n\nIt is guaranteed that each individual and corporation is involved in at least one lawsuit. Note that it is possible for the same pair of one individual and one corporation to be involved in more than one lawsuit.\n\n-----Output-----\n\nPrint $L$ lines, where the $i^\\text {th}$ of these lines describes whether Kattis can win the game using this move. If Kattis can win the game using this move, then print INDV$A_ i$ if he collects individual $A_ i$ and CORP$B_ i$ if he collects the corporation $B_ i$. Otherwise, print NO.\n\nThe knight can win the game in a few different ways, such as if he collects all knights, or if he collects some of the knights, or if he collects the knight in one position and a different knight in another position.\n\nThe knight cannot win the game if he collects no knights.\n\nWhen there is a tie for the number of knights that can be collected, print ALL.\n\nIf there are multiple correct answers, you can output any of them.\n\n-----Examples-----\nSample Input:\n5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\nSample Output:\nINDV 1\nINDV 2\nINDV 3\nCORP 1\nINDV 4\nINDV 5\nALL\n\n------------------------------\n\n3. Recursion\n\nBacktracking is a technique for solving problems. It is often used in computational problems, especially programming problems.\n\nAs we discussed earlier, the backtracking algorithm has no unique solution.\n\nThus, if a backtracking algorithm does not find a solution, it could mean that the problem has no solution.\n\nIn some cases, it is possible for a program to generate incorrect answers if it is not smart enough. In other cases, it is possible for the program to generate a solution, but it does not necessarily make sense.\n\nWhen we get a solution, we can test it. If it is not a valid solution, we can try something else.\n\nIf we are able to solve the problem, we can generate a solution. In some cases, we can generate a solution by a brute force method.\n\nIn some cases, we can generate a solution by a clever approach. In this case, we should try to think about the solution, then come up with a solution.\n\nAt the end, we should test the solution, in some cases, the test should show that the program is not smart enough and it has not found a solution.\n\nYou are asked to write a program to solve the Knight\u2019s Tour problem.\n\nThe knight\u2019s tour is a problem in chess, where the knight decides to visit each square exactly once. It is also a variation of the 15-puzzle problem"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10\\n') == '2.4142135624'\n\n---"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\n\"\"\""
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('10 1') == '2.4142135624'\nassert solution('4 10 1 0 10 10 1 0 10') == '12.857142857142857'\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n10 1\n1\n0\n10\n10''') == '2.4142135624'\nprint(solution(stdin))\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10') == '2.4142135624'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\") == \"2.4142135624\"\n\"\"\"\n\nimport sys\nimport os\nfrom math import sqrt\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\nfrom intcode.computer import Computer  # noqa: E402\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10\\n') == '2.4142135624'\n'''\nfrom decimal import Decimal\n\nN = int(stdin.readline().strip())\nL, W = map(int, stdin.readline().split())\nLs = [int(stdin.readline().strip()) for _ in range(N)]\nWs = [int(stdin.readline().strip()) for _ in range(N)]\n\nR = sum([(Ls[i] - Ls[i - 1]) * Ws[i - 1] for i in range(1, N)]) + sum([(L - Ls[i]) * Ws[i] for i in range(1, N)])\nprint(Decimal(R))\n\n'''\n\u8fd9\u9898\u5f88\u7279\u522b\uff0c\u6bcf\u6b21\u5230\u4e00\u4e2a\u70b9\u65f6\uff0c\u5c31\u8981\u628a\u521a\u521a\u51fa\u7684\u4e00\u68f5\u6811\u66f4\u65b0\uff0c\u7136\u540e\u628a\u4e0b\u4e00\u68f5\u6811\u7684\u4f4d\u7f6e\u8bb0\u5f55\u4e0b\u6765\n\u6240\u4ee5\u5176\u5b9e\u5c31\u662f\u7ed9\u4e00\u4e2a\u73af\uff0c\u7136\u540e\u6bcf\u6b21\u627e\u4e00\u4e2a\u70b9\u5230\u73af\u7684\u8ddd\u79bb\uff0c\u6700\u540e\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\uff0c\u90a3\u4e48\u5c31\u662f\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7ed3\u679c\n\u5982\u679c\u6ca1\u6709\u73af\uff0c\u5c31\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u6765\uff0c\u5148\u628a\u9760\u8fd1\u7684\u6811\u653e\u5728\u6700\u524d\u9762\uff0c\u540e\u9762\u7684\u6811\u653e\u5728\u6700\u540e\u9762\n\u4f46\u662f\u4e3a\u4e86\u8282\u7ea6\u7a7a\u95f4\uff0c\u8fd8\u662f\u5148\u653e\u5728\u73af\u4e0a\u9762\n'''"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution_capture_stdin(4)) == 2.4142135624\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\\n\") == '2.4142135624'\n'''\n\n'''\ntry:\n    L = int(stdin.readline())\n    W = int(stdin.readline())\nexcept:\n    print('invalid input')\n    exit()\n\nn = int(stdin.readline())\ndata = [int(stdin.readline()) for i in range(n)]\n\ncnt = 0\nleft = 0\nright = W\nfor d in data:\n    if d == left:\n        continue\n    if d < left:\n        cnt += (left - d)\n        left = d\n    elif d > right:\n        cnt += (d - right)\n        right = d\n\nprint(f'{cnt:.6f}')\n'''"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\\n\") == \"15\"\nassert solution(\"2\\n1 2\\n1 2\\n1 2\\n\") == \"6\"\n\"\"\"\n\nwith open('/DATACAMP/resources/abc123', 'r') as f:\n    s = f.readline()"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 5\\n3 1 5\\n2 1') == '15'\n"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3''') == '15'\n\nassert solution('''6\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n2 3\n3 2\n2 4\n4 0\n1 2\n1 1\n3 1\n2 2\n3 2\n4 1\n2 3\n2 4\n2 3\n2 3\n2 1\n4 1\n3 3\n2 1\n4 2\n3 3\n3 1\n2 3\n1 1\n2 2\n3 2\n4 2\n3 2\n2 2\n1 1\n2 1\n3 3\n2 4\n3 2\n2 3\n2 4\n1 2\n1 1\n2 4\n3 3\n3 3\n2 3\n2 4\n3 2\n2 3\n2 1\n1 1\n3 1\n2 2\n2 3\n3 2\n3 3\n3 3\n2 2\n1 1\n3 2\n3 1\n1 3\n3 1\n3 1\n2 3\n3 2\n2 2\n1 1\n2 1\n3 2\n2 2\n3 2\n4 2\n3 2\n1 1\n3 2\n3 1\n1 3\n1 1\n2 2\n3 1\n3 3\n2 3\n2 1\n2 2\n2 4\n3 1\n2 2\n2 4\n3 1\n3 3\n3 1\n3 1\n2 2\n3 1\n2 2\n1 1\n3 2\n2 4\n1 1\n1 1\n1 1\n1 1\n1 1\n3 1\n2 1\n1 1\n1 1\n2 2\n1 1\n1 1\n1 1\n1 1\n2 4\n2 1\n2 3\n3 1\n3 1\n3 1\n1 1\n1 1\n2 3\n2 1\n2 3\n2 1\n2 2\n3 3\n2 3\n2 1\n1 1\n1 1\n1 1\n2 2\n1 1\n1 1\n2 2\n3 2\n3 2\n3 2\n3 2\n3 2\n2 3\n2 1\n3 2\n2 2\n2 4\n1 1\n2 4\n2 1\n2 4\n1 1\n2 2\n1 2\n3 1\n3 1\n2 1\n2 2\n1 1\n2 1\n1 1\n3 1\n2 1\n2 2\n2 1\n2 3\n2 1\n2 3\n1 1\n1 1\n2 3\n2 3\n1 1\n1 1\n2 2\n1 2\n1 1\n3 1\n1 1\n2 1\n1 1\n3 1\n2 3\n3 1\n2 1\n3 2\n1 1\n2 1\n2 4\n3 1\n1 2\n3 1\n1 1\n1 1\n2 1\n1 1\n2 1\n1 1\n1 1\n2 2\n2 2\n3 1\n2 2\n2 1\n2 1\n1 1\n2 1\n1 1\n1 1\n2 2\n1 1\n2 3\n2 1\n2 1\n2 1\n1 1\n2 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2\n3 1\n2 3\n3 1\n2 2\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n2 3\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n2 3\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\") == \"15\"\n\nimport sys;"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\\n') == '15'\nassert solution('3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\\n') == '8'\nassert solution('3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\\n') == '7'\nassert solution('3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\\n') == '6'"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"15\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\") == \"18\"\n\n------BEGIN ASSIGNMENT-----"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n4 0\\n4 0') == '6'\nassert solution('1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '4'\nassert solution('1 2 5\\n3 1 5\\n2 1') == '15'"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n\nassert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '16'\n\nassert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n\nassert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '16'\n\nassert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '16'"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '5'\nassert solution('1 2 3\\n3 1 5') == '15'\nassert solution('1 2 3\\n3 4 5') == '16'\nassert solution('1 2 3\\n3 4 5\\n2 1\\n5 0') == '18'\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '\\n'.join([\n    '\\n',\n    '\\n',\n    '\\n',\n    '\\n',\n    '\\n'\n])\nassert solution('5 5 3 3 4') == '\\n'.join([\n    '....',\n    '...B',\n    '..C.',\n    '..A.',\n    '.....',\n])\nassert solution('6 6 3 3 4') == '\\n'.join([\n    '....@',\n    '..A..',\n    '..C..',\n    '...DD',\n    '..A..',\n    '..C..',\n])\nassert solution('6 6 3 3 5') == '\\n'.join([\n    '....A',\n    '..B..',\n    '..C..',\n    '...D',\n    '..A..',\n    '..C..',\n])\nassert solution('6 6 3 3 6') == '\\n'.join([\n    '..ABC',\n    '...D',\n    '..A..',\n    '..C..',\n    '...D',\n    '..A..',\n    '..C..',\n])\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\n\"\"\""
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\nassert solution('5 5 3 3 1') == '.....\\n..@.C\\n..A.C\\n....C\\n@DDDD'\nassert solution('2 5 2 2 1') == '...\\n..@\\n...'\n\"\"\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 3 3 4\") == \"...\\n..BBC\\n..A.C\\n....C\\n@DDDD\"\n\n-----Notes-----\nThe ice is initially colorless.\n\"\"\""
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A.C\\n....C\\n@DDDD\"\n\"\"\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 3 3 4\") == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\nassert solution(\"1 1 1 1 1\") == '@'\nassert solution(\"10 10 5 5 5 5 5 5 5 5 5\") == '@'\n\"\"\""
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n\", f\"Expected '.....\\\\n..BBC\\\\n..A.C\\\\n....C\\\\n@DDDD\\\\n' but got: {solution('5 5 3 3 4')}\"\nassert solution(\"5 5 4 5 4\") == \".....\\n..ABB\\n..AAB\\n....B\\n@ABC\\n\", f\"Expected '.....\\\\n..ABB\\\\n..AAB\\\\n....B\\\\n@ABC\\\\n' but got: {solution('5 5 4 5 4')}\"\n\n\"\"\""
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 3 3 4\") == \"...@\"\nassert solution(\"8 9 2 2 10\") == \"........@\"\nassert solution(\"5 5 3 3 4\") == \"...@\"\n\nSample Input:\n5 5 3 3 1\nSample Output:\n...P\n..BB\n..AA\n....@\n@DDDD\nassert solution(\"5 5 3 3 1\") == \"...P\"\nassert solution(\"8 9 2 2 10\") == \"........@\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"5 3\n111\n001\n000\n111\n000\"\"\"\n) == \"\"\"001\n001\n001\n111\n200\"\"\"\n\nassert solution(\n    \"\"\"5 3\n111\n100\n010\n111\n010\"\"\"\n) == \"\"\"010\n010\n010\n111\n010\"\"\"\n\nassert solution(\n    \"\"\"5 3\n111\n010\n010\n111\n010\"\"\"\n) == \"\"\"010\n010\n010\n010\n010\"\"\"\n\nassert solution(\n    \"\"\"5 3\n111\n110\n010\n110\n010\"\"\"\n) == \"\"\"010\n010\n010\n110\n010\"\"\"\n\nassert solution(\n    \"\"\"5 3\n110\n110\n010\n110\n010\"\"\"\n) == \"\"\"010\n010\n010\n110\n010\"\"\""
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n123\\n456\\n789\") == \"1234\"\nassert solution(\"4 3\\n111\\n110\\n101\\n110\") == \"110\"\n\n\"\"\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200'\nassert solution('5 3\\n111\\n011\\n010\\n111\\n010') == '010\\n010\\n010\\n111\\n111'\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\n\"\"\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n111\\n010\\n101') == '010'\n\nassert solution('2 3\\n11\\n01\\n10') == '010'\n\nassert solution('4 3\\n111\\n010\\n101\\n010') == '010\\n010\\n010\\n010'\n\nassert solution('4 3\\n101\\n010\\n010\\n010') == '010\\n010\\n010\\n010'\n\nassert solution('4 2\\n101\\n010\\n010\\n010') == '010\\n010\\n010\\n010'"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\nassert solution(\"3 3\\n111\\n010\\n101\") == \"010\\n010\\n010\\n010\\n010\"\nassert solution(\"3 5\\n1110\\n010\\n1010\") == \"010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n010\\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\nassert solution(\"2 5\\n11\\n11\") == \"11\\n11\"\nassert solution(\"2 5\\n101010\\n11101010\") == \"101010\\n101010\"\nassert solution(\"2 5\\n1111\\n1101010\") == \"1111\\n1111\\n1101010\"\nassert solution(\"2 5\\n11111\\n11101010\") == \"11111\\n1111\\n11101010\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\n\"\"\""
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17') == '19 20\\n17 15 14 13 7 2'\n\n----------------\nSample Input:\n15/12\\n9/2\\n15/13\\n9/1\\n18/15\\n18/16\\n9/12\\n10/15\\n18/4\\n18/6\\n18/12\\n10/1\\n10/3\\n15/3\\n15/5\\n10/2\\n10/4\\n7/6\\n7/7\\n10/2\\n17/5\\n18/12\\n10/5\\n17/2\\n16/10\\n6/9\\n9/1\\n9/4\\n10/14\\n10/6\\n9/1\\n9/9\\n10/1\\n16/9\\n16/8\\n15/9\\n16/10\\n12/10\\n17/10\\n16/6\\n7/13\\n15/7\\n15/10\\n6/8\\n6/13\\n17/8\\n17/6\\n7/1\\n17/1\\n17/13\\n9/9\\n17/5\\n17/12\\n10/13\\n9/1\\n12/13\\n9/13\\n8/12\\n9/4\\n12/9\\n16/12\\n12/12\\n9/3\\n9/12\\n10/13\\n12/7\\n12/17\\n16/8\\n15/1\\n10/10\\n6/6\\n12/1\\n12/3\\n12/10\\n6/14\\n16/7\\n15/7\\n6/10\\n6/3\\n6/5\\n10/17\\n6/4\\n9/9\\n17/4\\n6/14\\n6/15\\n9/5\\n17/6\\n10/9\\n17/14\\n6/8\\n17/12\\n17/11\\n6/7\\n7/12\\n8/9\\n17/4\\n16/6\\n17/9\\n12/13\\n12/3\\n15/4\\n9/10\\n9/12\\n13/17\\n8/5\\n6/3\\n8/10\\n16/9\\n16/8\\n12/5\\n16/13\\n9/5\\n16/10\\n12/9\\n7/4\\n16/9\\n8/1\\n16/10\\n16/7\\n10/8\\n16/14\\n16/9\\n12/17\\n16/13\\n10/13\\n8/12\\n15/15\\n13/6\\n17/12\\n17/9\\n17/2\\n17/5\\n12/9\\n10/6\\n16/12\\n16/8\\n15/14\\n6/12\\n6/5\\n17/17\\n10/2\\n13/14\\n14/12\\n13/1\\n17/13\\n17/10\\n12/1\\n17/9\\n9/5\\n6/6\\n16/8\\n14/4\\n13/10\\n12/6\\n17/12\\n12/9\\n16/7\\n6/6\\n12/8\\n15/6\\n13/13\\n17/8\\n6/1\\n14/6\\n14/14\\n15/13\\n9/2\\n6/13\\n17/3\\n17/1\\n7/1\\n6/2\\n10/17\\n6/10\\n9/17\\n6/14\\n9/5\\n6/15\\n6/9\\n14/3\\n15/2\\n15/9\\n9/14\\n17/2\\n10/2\\n10/11\\n6/17\\n17/3\\n15/6\\n17/3\\n9/10\\n10/8\\n7/2\\n17/12\\n12/14\\n6/17\\n13/14\\n13/8\\n16/1\\n13/10\\n9/3\\n12/6\\n17/9\\n6/17\\n13/5\\n9/8\\n9/3\\n9/8\\n13/12\\n17/1\\n9/10\\n6/9\\n17/10\\n17/11\\n10/9\\n6/3\\n9/1\\n6/14\\n6/12\\n16/15\\n14/5\\n16/5\\n15/5\\n7/17\\n6/13\\n17/3\\n16/5\\n14/2\\n6/3\\n17/5\\n6/12\\n16/3\\n9/6\\n6/6\\n14/6\\n7/11\\n6/8\\n6/13\\n14/14\\n10/14\\n7/5\\n8/2\\n8/4\\n13/17\\n13/8\\n12/8\\n8/14\\n10/6\\n7/15\\n16/4\\n16/5\\n12/10\\n6/15\\n6/13\\n10/1\\n12/17\\n15/10\\n6/10\\n17/13\\n6/8\\n14/6\\n8/13\\n9/12\\n10/5\\n10/13\\n8/12\\n9/17\\n13/15\\n17/14\\n10/9\\n9/5\\n10/17\\n17/9\\n10/17\\n9/3\\n8/1\\n10/10\\n17/6\\n15/1\\n6/1\\n10/11\\n17/7\\n17/1\\n6/4\\n8/12\\n14/10\\n15/13\\n7/7\\n14/17\\n6/16\\n17/1\\n9/13\\"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\n\"\"\"\nimport re\n\nregex = re.compile(r\"(?P<num1>\\d+)/(?P<num2>\\d+)\")\n"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17') == '19 20\\n17 15 14 13 7 2'\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\nassert solution(\"9/7\\n4/3\\n9/13\\n13/7\\n3/1\\n9/15\\n9/17\\n4/1\\n17/15\\n17/2\\n3/5\\n4/17\\n9/19\\n9/20\\n9/1\\n4/7\") == \"impossible\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == '19 20\\n17 15 14 13 7 2'\n\n\"\"\"\n\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17'\n) == '19 20\\n17 15 14 13 7 2'\n\nassert solution(\n'19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17'\n) == 'impossible'\nassert solution(\n'19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17'\n) == 'impossible'\nassert solution(\n'19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17'\n) == '19 20\\n17 15 14 13 7 2'\n\nassert solution(\n'19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17'\n) == 'impossible'\n"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\n\n\"\"\""
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''19/13\n10/1\n19/14\n4/3\n20/7\n19/7\n20/13\n19/15\n10/7\n20/17\n19/2\n19/17''') == '''19 20\n17 15 14 13 7 2'''\n\n'''\nimport math\n\na = input().split(\"/\")\nb = input().split(\"/\")\nc = []\nfor i in range(12):\n    x = math.floor(int(a[i])/int(b[i]))\n    c.append(x)\nprint(c[:2])\nprint(c[2:])\n'''"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\nprint(solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\"))"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(r\"a.txt\", \"r\").read()) == \"possible\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"impossible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"1 1\") == \"possible\"\nassert solution(\"2 3\") == \"impossible\"\nassert solution(\"3 5\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"possible\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"impossible\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3') == 'possible'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\n\nx = [0] * n\ny = [0] * n\nfor i in range(n):\n    x[i], y[i] = map(int, input().split())\n\nd = [[0] * n for i in range(n)]\nfor i in range(m):\n    s, t = map(int, input().split())\n    d[s - 1][t - 1] = 1\n    d[t - 1][s - 1] = 1\n\nfor i in range(n):\n    for j in range(n):\n        if d[i][j] == 0:\n            for k in range(n):\n                if d[j][k] == 1:\n                    d[i][k] = 1\n                    d[k][i] = 1\n\nfor i in range(n):\n    print(d[i].count(1))"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"impossible\"\n\n-----Notes-----\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import sqrt"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"impossible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"possible\"\n\"\"\"\nfrom typing import Dict, List\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3') == \"impossible\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\\n') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == 'impossible'\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n2\\n2\") == 4\n\"\"\""
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n2\\n2\") == 4\n\"\"\"\n\nimport sys\n\nstdin = open('test_files/Y11R5P1/A.in')\n\nn, m = map(int, stdin.readline().split())\n\nl = [0 for _ in range(n)]\n\nfor _ in range(m):\n    l[int(stdin.readline()) - 1] += 1\n\nans = 0\n\nfor i in range(n):\n    if l[i] > 1:\n        ans += l[i] * (l[i] - 1) // 2\n\nprint(ans)\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n2\\n2\\n\") == \"4\"\nprint(solution(\"4 2\\n2\\n2\\n\"))\n\nSolution.check(solution)\n\n\"\"\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n2\\n2') == 4\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2\\n2\") == \"4\"\n\"\"\"\n\nfrom collections import Counter\n\nnumber_of_comers = input().split()\nnumber_of_days = int(number_of_comers[0])\nnumber_of_lunch = int(number_of_comers[1])\n\norders = []\n\nfor i in range(number_of_days):\n    order = int(input())\n    orders.append(order)\n\nset_of_orders = set(orders)\ncounter = Counter(orders)\nunique_orders = []\nfor i in set_of_orders:\n    if counter[i] == number_of_lunch:\n        unique_orders.append(i)\n\nunique_orders = sorted(unique_orders)\nprint(len(unique_orders))"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2\\n2\") == 4\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 4\nassert solution(3) == 4\nassert solution(4) == 4\nassert solution(5) == 4\nassert solution(6) == 4\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2\\n2') == 4\n\"\"\"\n\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\narr = []\n\nfor _ in range(m):\n    arr.append(int(sys.stdin.readline()))\n\nprint(max(arr))\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n2\\n2') == '4'"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n2\\n2') == '4'\n\"\"\"\n\nn, m = input().split()\ncolleagues = [set() for _ in range(int(n))]\n\nfor _ in range(int(m)):\n    n_burgers = int(input())\n    colleagues[n_burgers - 1].add(len(colleagues))\n    for i in range(n_burgers, int(n)):\n        if i in colleagues[n_burgers - 1]:\n            colleagues[i].add(len(colleagues))\n\nprint(len(set.intersection(*colleagues)))\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\nassert solution(\"7\\n1 1\\n1 2\\n1 3\\n3 2\\n1 4\\n3 2\") == \"Mirko\"\nassert solution(\"9\\n1 1\\n1 2\\n1 3\\n3 2\\n1 4\\n3 2\\n5 5\\n1 1\\n1 2\\n1 3\") == \"Slavko\"\nassert solution(\"5\\n3 1\\n3 2\\n3 3\\n3 4\") == \"Mirko\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nlines = []\n\nfor i in range(N):\n    lines.append(sys.stdin.readline().split())\n\ns = set()\n\nfor i in range(N):\n    x, y = lines[i]\n    x = int(x)\n    y = int(y)\n    s.add((x, y))\n\nprint(\"Mirko\" if len(s) == N else \"Slavko\")\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3') == 'Mirko'\n\nSample Input:\n4\n1 1\n1 2\n3 1\n2 3\nSample Output:\nSlavko\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3''') == 'Mirko'\nassert solution('''5\n1 1\n2 2\n2 3\n3 4\n4 5''') == 'Mirko'\nassert solution('''7\n2 2\n3 4\n3 6\n4 5\n5 6\n6 7''') == 'Slavko'\nassert solution('''7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8''') == 'Mirko'\nassert solution('''9\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n4 4\n4 5\n5 5\n5 6\n6 6\n6 7\n7 7\n7 8\n8 8\n8 9''') == 'Mirko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\n\"\"\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 2\\n4 6\\n5 9') == 'Mirko'\nassert solution('3\\n2 1\\n2 2\\n2 3') == 'Slavko'\nassert solution('4\\n4 4\\n4 5\\n4 6') == 'Mirko'\nassert solution('3\\n2 1\\n2 2\\n3 3') == 'Slavko'\n\n-----Constraints-----\n$N$ will be an integer between $1$ and $10^4$.\nThe coordinates of the points will be integers between $1$ and $500$.\n\"\"\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3''') == 'Mirko'\nassert solution('''6\n1 1\n1 2\n2 2\n1 3\n1 4\n1 5''') == 'Slavko'\n'''\n\n'''\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\nassert solution(\"3\\n2 2\\n1 1\\n1 2\") == \"Slavko\"\nassert solution(\"3\\n3 3\\n1 1\\n1 2\") == \"Mirko\"\nassert solution(\"3\\n1 1\\n2 2\\n1 2\") == \"Slavko\"\nassert solution(\"3\\n2 2\\n3 3\\n1 2\") == \"Mirko\"\n\"\"\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1 2\\n1 3') == 'Mirko'\n\"\"\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3\\n') == 'Mirko'"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\") == \"1 2 4 5\"\nassert solution(\"3\\n1\\n3\\n5\") == \"1 3\"\nassert solution(\"6\\n11\\n12\\n14\\n16\\n26\\n30\\n31\\n32\") == \"6 1\"\nassert solution(\"2\\n3\\n6\\n7\\n8\\n9\\n10\") == \"1 2 3 10\"\n\nprint(\"Success\")\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n34\\n38\") == \"2 4\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('6 8 9 10') == '4 6'\nassert solution('5 8 2 5 3') == '2 3'\nassert solution('1 4 9 3 9 3 2 3 8 7 7 8 1 7 1') == '2 3 3'\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n34\\n38\") == \"2 4\"\nprint(solution(\"3\\n6\\n34\\n38\"))\n\n-----Explanation-----\nThe integers 6, 34, 38 will give the remainder of 36 when divided by 2. Since 36 is also 36, they all give the same remainder. Therefore, the output is \"2 4\".\n\nSample Input:\n4\n6\n7\n4\n8\n4\n9\nSample Output:\n3\n6\n6\n9\n6\n9\n\n-----Explanation-----\nThe integers 6, 7, 4, 8, 4, 9 will give the remainder of 36 when divided by 3. Since 36 is also 36, they all give the same remainder. Therefore, the output is \"3 6 6 9 6 9\".\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n6\\n34\\n38\\n') == '2 4'\nprint(solution('2\\n6\\n34\\n38\\n'))\n\n-----Explanation-----\nLuka reads off 2 integers, so he ends up with 2 integers on the paper. He tries to find an integer 2, such that the remainder of the division by 2 on all the integers on the paper is also a remainder of 2. He does this for all possible integers and finds 2. Luka then reads off the next two integers, so he ends up with 4 integers on the paper. He tries to find an integer 4, such that the remainder of the division by 4 on all the integers on the paper is also a remainder of 4. This time, all integers on the paper will have the remainder of 4 and Luka will end up with all integers on the paper being equal to 4.\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_2) == [2, 4]\n\nprint(solution(input_2))\n'''\n\nimport math"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\\n34\\n38\") == \"2 4\"\nprint(solution(\"3\\n6\\n34\\n38\"))\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n34\\n38\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\\n34\\n38\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n16\\n13\\n2\\n3\") == \"1\\n1\\n2\\n4\\n3\"\nassert solution(\"4\\n14\\n2\\n3\") == \"2\\n1\\n1\\n1\"\nassert solution(\"4\\n18\\n2\\n3\") == \"2\\n1\\n2\\n4\"\n\"\"\""
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n') == '1'\nassert solution('2\\n1\\n2\\n') == '1'\nassert solution('2\\n1\\n2\\n3\\n') == '3'\nassert solution('3\\n1\\n2\\n3\\n4\\n') == '3'\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\nassert solution('5\\n8 10 2 1000000 30556926000') == '12'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10000 400000 500000 900000\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"4\"\n) == '12'\nassert solution(\n    \"3\\n\"\n    \"2 3 5\"\n) == '14'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10000 400000 500000 900000\") == '12'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''5\n8 10 2 1000000 30556926000\n''') == '12'\n\n\"\"\"\nfrom time import time"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10000 400000 500000 900000') == 12\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10000 400000 500000 900000\\n\") == \"12\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\n\"\"\"\n\nimport math\n\nn = int(input())\narr = [int(i) for i in input().split()]\n\nans = 0\nfor i in range(n):\n    arr[i] = arr[i] / 10**5\n\narr.sort()\n\nwhile len(arr) > 0:\n    if arr[-1] > 0:\n        ans += arr.pop() + 1\n        arr[-1] = arr[-1] - 1\n        arr.sort()\n    else:\n        break\n\nprint(int(ans))\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\nassert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"NO\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n0\\n1 1 0\\n0 0 1\") == 'YES'\nassert solution(\"3 3\\n0\\n1 2 0\\n0 0 1\") == 'YES'\nassert solution(\"4 3\\n0\\n1 2 0\\n0 0 1\") == 'NO'\nassert solution(\"5 3\\n0\\n1 2 0\\n0 0 1\") == 'NO'\nassert solution(\"6 3\\n0\\n1 2 0\\n0 0 1\") == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 0\\n2 4 0\") == \"YES\"\nassert solution(\"0 1 0\\n0 0 0\") == \"NO\"\nassert solution(\"0 1 0\\n1 0 0\") == \"YES\"\nassert solution(\"0 1 0\\n1 0 0\\n1 0 0\") == \"NO\"\nassert solution(\"0 1 0\\n2 4 0\\n1 0 0\") == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\n\"\"\"\n\nm, n = input().split()\nm = int(m)\nn = int(n)\nl = []\nfor _ in range(m):\n    l.append([int(i) for i in input().split()])\nl.append([0 for _ in range(n)])\nl = [i for i in l if i!= [0 for _ in range(n)]]\nl = list(zip(*l))\nc = [i for i in l if len(set(i))!= 1]\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\n\"\"\""
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5 0\\n0\\n1 0 1 0 0 0\\n0 1 0 0 0 0\\n1 1 0 1 0 0\\n0 1 0 0 0 0\\n0 1 0 1 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\") == \"YES\"\nassert solution(\"2 5 0\\n0\\n1 0 1 0 0 0\\n0 1 0 0 0 0\\n1 1 0 1 0 0\\n0 1 0 0 0 0\\n0 0 0 0 0 0\") == \"NO\"\nassert solution(\"2 5 0\\n0\\n0 1 0 1 0 0\\n0 1 0 0 0 0\\n1 1 0 1 0 0\\n0 1 0 0 0 0\\n0 0 0 0 0 0\") == \"YES\"\nassert solution(\"2 5 0\\n0\\n0 1 0 1 0 0\\n0 1 0 0 0 0\\n1 1 0 1 0 0\\n0 1 0 0 0 0\\n0 0 0 0 0 0\") == \"NO\"\nassert solution(\"4 6 0\\n0\\n1 1 1 0 0 1 0\\n1 1 1 1 0 0 1 0\\n1 1 1 1 1 0 1 0\\n1 1 1 1 1 1 1 0\") == \"NO\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\nassert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"NO\"\n\"\"\"\n\n\"\"\"\n\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438:\nhttps://www.coursera.org/learn/interactive-coding/discussions/weeks/4/threads/wEzLzq6yEghXrzhYg9_0TA/comments/2uowg8j/\n\"\"\"\n\nm, n = [int(x) for x in input().split()]\n\nmas = []\nfor i in range(m):\n    mas.append([int(x) for x in input().split()])\n\nmas.append([0 for i in range(n)])\n\nn += 1\n\nanswer = 'YES'\n\nfor i in range(m):\n    for j in range(n - 1):\n        if mas[i][j] and mas[i][j + 1]:\n            answer = 'NO'\n\nfor j in range(n):\n    for i in range(m - 1):\n        if mas[i][j] and mas[i + 1][j]:\n            answer = 'NO'\n\nprint(answer)"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\nassert solution('4 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'NO'\nassert solution('1 5\\n0\\n2 3 0\\n4 1 2 0\\n0 0 0\\n0 0 0') == 'YES'\nassert solution('1 5\\n0\\n2 3 0\\n4 1 2 0\\n0 0 0\\n0 0 0') == 'NO'\nassert solution('5 6\\n0\\n3 1 2 0\\n1 3 0\\n4 2 3 0\\n4 5 0\\n5 4 0') == 'YES'\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\"\"\"\n\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().split()]\na = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == '5 6 1 2 3 4'\n\n\"\"\"\n\n\nfrom collections import defaultdict\nimport bisect\nimport heapq"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n3 1\\n\") == 'Impossible'\nassert solution(\"3 2\\n1 2\\n3 1\\n\") == 'Impossible'\nassert solution(\"3 2\\n1 2\\n3 3\\n\") == '3 6 1 2 3 4'\nassert solution(\"4 2\\n1 3\\n2 4\\n3 1\\n\") == 'Impossible'\nassert solution(\"3 2\\n1 2\\n3 1\\n\") == 'Impossible'\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 3 4 2') == 'Impossible'\n\nassert solution('5 5\\n1 2 3 4 5') == 'Impossible'\n\nassert solution('5 2\\n1 2 3 4 5') == '1 4 5 2 3'\n\nassert solution('6 2\\n1 2 3 4 5 6') == '1 6 2 5 4 3'\n\nassert solution('5 2\\n1 2 3 4') == '1 4 3 2'"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == '5 6 1 2 3 4'\nassert solution(\"6 2\\n1 1 2 2 3 4 5\") == 'Impossible'\nassert solution(\"6 2\\n1 2 1 2 3 4 5\") == 'Impossible'\nassert solution(\"6 2\\n1 2 1 2 3 4 5\\n6 1 2 3 4 5\") == '5 6 1 2 3 4'\n\nSolution with visual inspection"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n\n---\n\nThere are 2 types of people: first is 'tall' and second is'short'.\n\nI only need to take 20 turns.\n\n'''\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n\nimport unittest\nclass TestConvertFromDecimal(unittest.TestCase):\n    def test_convert_from_decimal(self):\n        pass"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\n\"\"\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2 8 4''') == '''20512'''\nassert solution('''3 2 1 9''') == '''IMPOSSIBLE'''\nassert solution('''1 1 1 1''') == '''IMPOSSIBLE'''\nassert solution('''7 2 1 9''') == '''IMPOSSIBLE'''\nassert solution('''5 4 2 7''') == '''45217'''\n"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\""
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 8 4''') == '20512'\nassert solution('''5 2 8 10''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"5 1 8 4\") == \"208\"\nassert solution(\"6 2 8 4\") == \"IMPOSSIBLE\"\nassert solution(\"7 2 8 4\") == \"IMPOSSIBLE\"\nassert solution(\"8 2 8 4\") == \"4208\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\n\"\"\""
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 2 8 4''') == '20512'\nassert solution('''4 3 3 5''') == 'IMPOSSIBLE'\nassert solution('''7 8 9 0''') == '89090'\nassert solution('''0 0 0 0''') == '0'\n\n'''\n7 8 9 0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n7 8 9 0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n7 8 9 0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n5 2 8 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n5 2 8 4\n1\n2\n3\n4"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\n\"\"\"\n\nm, n, p, q = [int(i) for i in input().split()]\n"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 8 4') == '20512'\n\"\"\"\n\nm, n, p, q = list(map(int, input().split()))"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"5 2 8 4\") == \"20512\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\nBAC\\nABC') == '2'\nassert solution('3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE') == '3'"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\nBAC\\nABC') == '2'\nassert solution('3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3\nBAC\nABC''') == '2'\nassert solution('''3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE''') == '3'"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE\") == 3"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\nBAC\\nABC') == '2'\nassert solution('3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE') == '3'\n\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def __init__(self, n: int, k: int) -> None:\n        self.n = n\n        self.k = k\n\n    def solution(self) -> str:\n        dp: List[List[int]] = [ [0 for _ in range(self.k + 1)] for _ in range(self.n)]\n        # print(dp)\n        for i in range(1, self.n):\n            for j in range(1, self.k + 1):\n                if self.t[i][j] == self.t[i - 1][j]:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i][j - 1])\n        return dp[-1][-1]\n        "
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\nBAC\\nABC') == 2\nassert solution('3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE') == 3\n\"\"\"\n\n\n\"\"\"\nInput:\n3\nABC\nACB\nABC\n\nOutput:\n3\n\nInput:\n3\nABC\nBABC\nCABB\n\nOutput:\n4\n\"\"\"\n\n\n\"\"\"\n\u601d\u8003\uff1a\n\u5b57\u4e32\u7684\u5927\u5c0f\u662f\u7531\u5169\u500b\u539f\u56e0\u7d2f\u7a4d\u800c\u4f86\u7684\uff1a\n1. \u4e00\u500b\u5b57\u4e32\u7684\u9577\u5ea6\u6bd4\u53e6\u4e00\u500b\u5b57\u4e32\u9577\u5ea6\u591a\u4e00\u500b\uff0c\u56e0\u70ba\u5c11\u4e86\u6700\u5f8c\u4e00\u500b\u5b57\u6bcd\n2. \u4e00\u500b\u5b57\u4e32\u7684\u5b57\u6bcd\u9806\u5e8f\u6bd4\u53e6\u4e00\u500b\u5b57\u4e32\u9806\u5e8f\u5c11\u4e00\u500b\uff0c\u56e0\u70ba\u6700\u5f8c\u4e00\u500b\u5b57\u6bcd\u7684\u9806\u5e8f\u6bd4\u4e0b\u4e00\u500b\u5b57\u6bcd\u9806\u5e8f\u5927\n\n\u7531\u9019\u5169\u500b\u539f\u56e0\uff0c\u7d50\u5408\u5728\u4e00\u8d77\uff0c\u5c31\u5f97\u5230\u4e86\u4ee5\u4e0b\u9019\u5169\u500b\u89e3\u6cd5\uff1a\n\n1. \u628a\u7b2c\u4e00\u500b\u5b57\u4e32\uff0c\u7528\"_\" \u9032\u884c\u8868\u793a\n2. \u628a\u7b2c\u4e8c\u500b\u5b57\u4e32\uff0c\u7528\"_\" \u9032\u884c\u8868\u793a\n3. \u5c07\u5169\u500b\u5b57\u4e32\u7684\u7b2c\u4e00\u500b\u5b57\u6bcd\u76f8\u540c\u7684\u90e8\u5206\uff0c\u8f49\u6210_1_2\uff0c\u4ee5\u6b64\u985e\u63a8\uff0c\u7b2c\u4e00\u500b\u5b57\u4e32\u6210\u5206\u9577\u5ea6=\u7b2c\u4e8c\u500b\u5b57\u4e32\u6210\u5206\u9577\u5ea6+1\n\n\u9019\u500b\u89e3\u6cd5\u7684\u4e3b\u8981\u9677\u9631\uff0c\u5728\u65bc\u65b0\u589e\u7684_1_2\uff0c\u6703\u767c\u751f\u65bc\u4efb\u610f\u7b2c\u4e00\u500b\u5b57\u6bcd\u7684\u60c5\u6cc1\uff0c\n\u5c0d\u7b2c\u4e00\u500b\u5b57\u4e32\u7684\u5207\u5206\uff0c\u6703\u767c\u751f\u4e00\u500b_1_2\u7b49\u65bc\u7b2c\u4e00\u500b\u5b57\u4e32\uff0c\u9019\u6a23\u5c31\u6703\u8b93\u7b2c\u4e00\u500b\u5b57\u4e32\u4e0d\u6b63\u78ba\uff0c\n\u6545\u5728\u7b2c\u4e8c\u500b\u6b65\u9a5f\u4e2d\uff0c\u8981\u628a\u7b2c\u4e00\u500b\u5b57\u4e32\u8f49\u63db\u6210\u6b63\u78ba\u7684\uff0c\u624d\u80fd\u8dd1\u9019\u500b\u6b65\u9a5f\n\"\"\"\n\n\n\n\"\"\"\nThis is the first problem on DP for strings, as it is a problem that has a solution which is based on DP. The challenge is to solve for the longest common subsequence of the strings.\n\nFirst, let's compute the length of the longest common subsequence for the first string and the second string.\n\nFor each index i in the first string, we will compare the letter at the i-th index with the j-th index of the second string.\n\nIf the i-th index and j-th index are different, then we need to create a new string by adding a space between the two letters.\n\nNow we will compute the longest common subsequence between the first string and the new string. The longest common subsequence is just the longest common subsequence between the first string and the second string.\n\nThis problem can be solved with dynamic programming.\n\nLet's consider the first string as the first row of a matrix, and the second string as the first column.\n\nLet's say that the ith index in the first string corresponds to the jth index in the second string.\n\nThen we need to calculate the longest common subsequence for the first string and the first column of the matrix.\n\nLet's say that the ith index in the first string corresponds to the jth index in the second string.\n\nIf the ith index and jth index are the same, then we can add the string[i] to the current column, otherwise we need to add a space between the strings.\n\nAfter we added the column, we can compare the current column with the column that we added. The longest common subsequence is just the longest common subsequence of the current column and the column that we added.\n\nWe can keep on doing this and finally we can obtain the longest common subsequence of the first string and the second string.\n\nThe time complexity is O(m * n), where m and n are the length of the first string and the second string respectively.\n\nThe space complexity is O(m * n) for the DP table.\n\nLet's look at the example and see what the solution is.\n\nWe can see that the longest common subsequence between the first string and the second string is the longest common subsequence between the first string and the string obtained by adding a space between the two letters.\n\nThe longest common subsequence between the first string and the string obtained by adding a space between the two letters is just the longest common subsequence between the first string and the second string.\n\nSo we can start from the first row, and the first column of the matrix, and compute the longest common subsequence of the first string and the second string, and the longest common subsequence of the second string and the first string, and so on.\n\nThis solution is simple and easy to understand, and does not require us to use DP table to solve this problem.\n\nBelow is the implementation of this solution.\n\"\"\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE') == 3\n\"\"\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('AB') == 1\nassert solution('ABC') == 2\nassert solution('ABAC') == 2\nassert solution('ABACD') == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\nBAC\\nABC\") == 2\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('1 2') == '1'\nassert solution('3 4') == '4'\nassert solution('4 2') == '0'\nassert solution('2 2') == '0'\n'''\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"9\"\nassert solution(\"1 3\") == \"9\"\nassert solution(\"3 1\") == \"3\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n\nclass Solution:\n    def poly_count(self, chocolates):\n        chocolates_grid = []\n        for row in range(chocolates[0]):\n            row = []\n            for col in range(chocolates[1]):\n                row.append('.')\n            chocolates_grid.append(row)\n        for row in range(chocolates[0]):\n            for col in range(chocolates[1]):\n                if row == 0 or row == chocolates[0] - 1:\n                    chocolates_grid[row][col] = 'x'\n                elif col == 0 or col == chocolates[1] - 1:\n                    chocolates_grid[row][col] = 'x'\n                else:\n                    chocolates_grid[row][col] = '.'\n        return chocolates_grid"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3''') == 3\nassert solution('''2 2''') == 2\nassert solution('''3 5''') == 23\n\nassert solution('3 5') == 23\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2') == 3\nassert solution('2 2') == 1\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == 3\n\n\nSolution1:\nfor r in range(int(input().split()[0])):\n    for c in range(int(input().split()[0])):\n        if ((c == 0) or (c == int(input().split()[0]) - 1)) and ((r == 0) or (r == int(input().split()[0]) - 1)):\n            print(1, end=\" \")\n        elif (c == 0) or (r == 0):\n            print(1, end=\" \")\n        else:\n            print(0, end=\" \")\n    print()\n\n\nSolution2:\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 2') == '6'\n\"\"\"\n\nimport sys\nimport math\n\nnumRows, numCols = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2') == 3\nassert solution('2 2') == 1\nassert solution('1 1') == 1\nassert solution('3 3') == 3\nassert solution('4 4') == 8\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == 3\nassert solution('1 1') == 1\nassert solution('2 2') == 9\nassert solution('2 2') == 9\n\nassert solution('3 3') == 27\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 3') == '6'\nassert solution('2 4') == '10'\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2') == 3\n\nassert solution('3 4') == 6\n\nassert solution('2 2') == 2\n\nassert solution('2 1') == 1\n\nassert solution('2 0') == 1\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\n\"\"\"\n\n\n\"\"\"\n@parameters: stdin -> list(int) -> int\n@return: str\n\"\"\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\n\"\"\"\n\n\"\"\"\nThe logic is that:\n\nEach i-th person will have a list of i+1 of disagreeing with the rest people, where each element represents another person that disagrees with him.\n\nAlso, each person will have a list of people who they disagree with, and they will have a list of people who they disagree with, and so on.\n\nHowever, I don't know how to do it.\n\nThe logic is:\n\n1. If the list of people who disagrees with i-th person is 0, then the i-th person does not know who disagrees with him.\n2. If the list of people who disagrees with i-th person is not 0, then the i-th person does know who disagrees with him.\n3. The len(disagreeing_list_with_i) is the number of people that disagrees with the i-th person.\n4. The len(disagreeing_list_i) is the number of people that i-th person disagrees with.\n5. If disagreeing_list_with_i is 0, then i-th person does not know who disagrees with him.\n6. If disagreeing_list_with_i is not 0, then i-th person does know who disagrees with him.\n\nIt's a simple way to use BFS.\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2 3 0 1 4\\n3 0 1 4') == 3\n\"\"\"\n\nimport sys\nimport unittest\n\nsys.setrecursionlimit(10000)\n\nclass Node:\n    def __init__(self, data, left, right):\n        self.data = data\n        self.left = left\n        self.right = right\n\n    def __str__(self):\n        return f'{self.data}, {self.left}, {self.right}'"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == '3'\n\"\"\""
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 1 3\\n2 1 2\\n2 3 4\") == 3\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\n\nalready_spoken_for = [[] for i in range(n)]\nfor i in range(n):\n    disagreement_count = list(map(int, stdin.readline().split()))\n    for j in range(n):\n        if disagreement_count[j]!= 0:\n            already_spoken_for[i].append(j)\n\nans = 0\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n3 4\\n2 3\\n2 1\\n1 3\\n1 1') == 3\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 3, [2, 1, 2], [3, 0, 2, 3], [3, 0, 1, 4], [2, 1, 4]) == 3\nassert solution(5, 3, [2, 1, 2], [3, 0, 2, 3], [3, 0, 1, 4], [2, 1, 4]) == 3\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('1 1\\n1 2') == 'YES'\n\"\"\""
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 2\\n1 1\") == \"YES\"\n\nassert solution(\"1\\n2 1\") == \"YES\"\n\nassert solution(\"1\\n2 3\") == \"NO\"\n\n\"\"\"\nimport sys\nsys.setrecursionlimit(1_000_000)\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 1\\n1 2\\n2 2\\n3 3\\n3 4\\n4 4\\n5 5\\n5 6\\n\") == \"YES\"\nassert solution(\"9\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n\") == \"NO\"\nassert solution(\"5\\n1 1\\n2 2\\n3 3\\n4 4\\n\") == \"YES\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\") == \"YES\"\nassert solution(\"7\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3 4\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 3\\n6 1\\n6 2\\n6 3\\n7 1\\n7 2\\n7 3\\n7\") == \"NO\"\nassert solution(\"1\\n2\\n2\\n1\") == \"NO\""
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n1 1\\n1 2\\n2 1\\n3 1\\n3 2\\n3\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"2\\n4\\n1 1\\n2 2\\n1 2\\n3 2\\n1 1\\n1 2\\n2 1\\n1 2\\n3 2\") == \"YES\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3''') == 'YES'\nassert solution('''6\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3''') == 'NO'\nassert solution('''6\n1 1\n1 2\n2 1\n2 3\n3 1\n3 2\n3''') == 'YES'\nassert solution('''6\n1 1\n1 2\n2 1\n2 3\n3 1\n3 2\n3''') == 'YES'\nassert solution('''6\n1 1\n1 2\n2 1\n2 3\n3 1\n3 2\n3''') == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\\n1 1\\n1 2\\n2 1') == 'YES'\nassert solution('6\\n2 3\\n1 2\\n3 2\\n3 1\\n1 1\\n2 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\") == \"YES\"\nassert solution(\"3\\n1 1\\n2 2\\n3 1\") == \"NO\"\n\n\"\"\"\n\nfrom typing import Dict, Set, Tuple, List\nimport sys\nimport math\n\nclass Point:\n    def __init__(self, x: int, y: int) -> None:\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other: 'Point') -> bool:\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self) -> int:\n        return hash((self.x, self.y))\n\nclass Segment:\n    def __init__(self, a: Point, b: Point) -> None:\n        self.a = a\n        self.b = b"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n2\\n2\\n3\\n3\\n4\\n5\") == \"YES\"\nassert solution(\"1\\n1\\n2\\n2\\n3\\n3\\n4\\n5\") == \"NO\"\n\nimport sys\nfrom dataclasses import dataclass\nfrom typing import List\n\n\n@dataclass\nclass Coord:\n    x: int\n    y: int\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\") == \"YES\"\n\n-----Notes-----\n- The output is guaranteed to be \u201cYES\u201d if there is a loop that goes through all the points; otherwise, the output is \u201cNO\u201d.\n- The input is guaranteed to be a valid test case.\n\n\"\"\"\n\nfrom math import acos, atan2, sin, cos, pi\nfrom fractions import Fraction"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3.0\"\nassert solution(\"1\") == \"1.0\"\n\"\"\"\n\n\n\"\"\"\nSolution Approach:\n\n1. If the size of the family is N, then there are N^2+N-1 gifts.\n2. If the size of the family is N and every gift is for one person, then there are (N+1)^2+N-1 gifts.\n3. If the size of the family is N and there is a person who gets their gift for N times, then there are N+1!+N^2+N-1 gifts.\n\"\"\"\n\nn = int(input())\nprint(sum(range(2, n+1)))\n"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"3.000000000\"\nprint(solution(\"2\"))\n\n-----Explanation-----\nThe initial size of the Kattis family is 2. The expected total number of gifts taken out of the bag for this size is 3.\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3.0\"\nprint(solution(\"2\"))\n"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 3\nprint(solution(stdin))"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '3.0'\nassert solution('10') == '7.676470588'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '3.000000'\nassert solution('3') == '9.50000'\nassert solution('4') == '15.04167'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\n"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '3.000000000'\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\n\nsample input: 2\n\nsample output: 3\n\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 3.0\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 3.0\n\"\"\"\n\nn = int(stdin.readline().strip())"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 10\") == \"4\"\n\"\"\""
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n3') == '1'\nassert solution('4 3\\n10 10 10 10') == '0'\nassert solution('1 5\\n100 100 100 100') == '3'\nassert solution('2 2\\n2 1') == '3'\n\n----\n\nn, k = [int(i) for i in stdin.split()]\n\narr = [int(i) for i in stdin.split()]\n\narr.sort()\n\ncnt = 0\n\nfor i in range(n - 1):\n    if arr[i + 1] - arr[i] <= k:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\\n3\") == \"2\"\nassert solution(\"1 2\\n3\\n1\") == \"2\"\nassert solution(\"1 2\\n3\\n1\\n1\") == \"3\"\nassert solution(\"1 2\\n3\\n1\\n1\\n1\") == \"3\"\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple\nfrom collections import Counter"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n3 3\\n3 2\\n4 4\\n2 4') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3') == '1'\n\nassert solution('2 10\\n3 1 2 1 1 1 1 2 3 2 2 1 1 1 2 1 1') == '4'\n\n\"\"\""
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3') == '1'\nassert solution('1 2\\n4') == '1'\nassert solution('1 2\\n5') == '2'\nassert solution('1 2\\n6') == '2'\nassert solution('1 2\\n7') == '3'\n"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 3 4') == '2'\nassert solution('4 2\\n3 2 2 2') == '1'\nassert solution('4 2\\n2 2 3 4') == '0'\nassert solution('4 2\\n1 2 2 2') == '0'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 2 2 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3') == '1'"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n3 4 2\\n0 2 2 3 2\\n1 3 2\\n1 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0 1 1 2 2 3 3') == '1'\nassert solution('1 2 2 3 3') == '2'\nassert solution('0 1 1 2 3 3') == '1'\nassert solution('0 1 2 2 3 3') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\") == '3'\nassert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\") == '3'\nassert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\") == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\") == \"3\\n2\\n3\\n1\\n1\"\nassert solution(\"6 2 6\\n1 4 6\\n0 2 3 4 1 2 3\\n3 2\\n1 3\") == \"1\\n1\\n1\\n1\"\nassert solution(\"6 2 6\\n1 4 6\\n0 2 3 4 1 2 3\\n3 2\\n1 3\") == \"1\\n3\\n3\"\n\n-----Problem-----\nT0C1W4_H_S_1_0\nLink: https://codeforces.com/problemset/problem/469/A\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2''') == '3\\n2\\n3\\n1\\n1'\n\"\"\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n-----Notes-----\nN and M are integers within the range [1 \u2026 10^5].\nQ is an integer within the range [1 \u2026 10^5].\nFor each type 0 query, a value x and k will follow in the input.\nFor each type 1 query, a value d and x will follow in the input.\n\"\"\"\n\nfrom typing import List\nimport unittest\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\") == \"3\"\nassert solution(\"8 8 9\\n0 2 2 3 2\\n1 3 2\\n0 3 2 4 2\\n0 2 3 2 4\\n1 3 3\\n0 3 3 4 3\\n0 2 4\\n0 2 4\") == \"2\"\n\n\"\"\"\n\n\nfrom collections import defaultdict, deque\nfrom typing import List\nimport sys\nimport math\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\") == \"3\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 3 5') == '3'\nassert solution('5 4 3') == '5'\nassert solution('10 4 6') == '6'\nassert solution('2 3 4') == '4'\n\"\"\"\n\nimport sys\n\nN, M, Q = [int(x) for x in sys.stdin.readline().split()]\nT = {i:i for i in range(1, N+1)}\nfor _ in range(Q):\n    op = sys.stdin.readline()\n    op = [int(x) for x in op.split()]\n    if op[0] == 0:\n        T[op[1]] = op[2]\n    else:\n        print(T[op[1]])\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 4, 5) == 3\nassert solution(1, 3, 4) == 2\nassert solution(0, 2, 2, 3, 2) == 3\nassert solution(1, 3, 2) == 1\nassert solution(1, 2, 4) == 1\n\"\"\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() {\\nprintf(\\\"Hello %d\\\", i);\\n}\") == \"def solution(stdin: str) -> str:\\n    pass\\n\\nassert solution('HelloWorld.c\\nint Main() {\\nprintf(\\\"Hello %d\\\", i);\\n}') == 'def solution(stdin: str) -> str:\\n    pass\\n\\nassert solution('HelloWorld.c\\nint Main() {\\nprintf(\\\"Hello %d\\\", i);\\n}') == 'def solution(stdin: str) -> str:\\n    pass\\n\\nassert solution('HelloWorld.c\\nint Main() {\\nprintf(\\\"Hello %d\\\", i);\\n}') == 'def solution(stdin: str) -> str:\\n    pass\\n\\nassert solution('HelloWorld.c\\nint Main() {\\nprintf(\\\"Hello %d\\\", i);\\n}') == 'def solution(stdin: str) -> str:\\n    pass\\n\\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() {\\n    printf(\"Hello %d\\n\",i);\\n}***END***\") == \"2 HelloWorld.c\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n''') == '2 HelloWorld.c'\n\nassert solution('''\nint Main() {\n    for (int i=0; i<10; i++)\n    sum += i;\n    printf(\"SUM %d\", sum);\n}\n''') == '2 Add.c'\n\nassert solution('''\nint Main() {\n    printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n''') == '0'\n\nassert solution('''\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n''') == '0'\n\nassert solution('''\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n\n''') == '0'"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('int main(){print(\"Hello\");}') == 'def solution(stdin: str) -> str:'\nassert solution('int main(){printf(\"Hello\");}') == 'def solution(stdin: str) -> str:'\nassert solution('int main(){for(int i=0; i<10; i++) printf(\"Hello %d\\n\",i);}') == 'def solution(stdin: str) -> str:'\nassert solution('int main(){sum=0; for(int i=0; i<10; i++) sum += i; printf(\"SUM %d\", sum);}') == 'def solution(stdin: str) -> str:'\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('a\\n') == 0\nassert solution('a b\\n') == 0\nassert solution('a\\n') == 0\nassert solution('a b\\n') == 0\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('***END***\\n') == 0\nassert solution('***END***') == 0\nassert solution('HelloWorld.c\\nint Main() {\\n    printf(\"Hello %d\\n\",i);\\n}***END***\\n') == 0\nassert solution('Add.c\\nint Main() {\\n  for (int i=0; i<10; i++) sum += i;\\n  printf(\"SUM %d\", sum);\\n}***END***\\n') == 0\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {\\nprintf(\\\"Hello %d\\\")\\n}\\n***END***\\nAdd.c\\nint Main() {\\n  for (int i=0; i<10; i++) sum += i;\\nprintf(\\\"SUM %d\\\", sum)\\n}\\n***END***\\nint Main() {\\nprintf(\\\"Hello %d\\\")\\nprintf(\\\"THE END\\\")\\n}\\n***END***\") == '2 HelloWorld.c\\ndef solution(stdin: str) -> str:\\n    pass\\n***END***'\n\n\n\n-----Explanation-----\nThe repository contains two fragments of code:\n\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nThe snippet to find matches for is:\n\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n\nThe repository contains three fragments of code:\n\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++) sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n    printf(\"Hello %d\\n\",i);\n    printf(\"THE END\\n\");\n}\n***END***\nThe snippet to find matches for is:\n\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n\nThe repository contains two fragments of code:\n\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++) sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nThe snippet to find matches for is:\n\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n\nNo fragment matches, so the answer is 0.\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() { \\n\\tprintf(\\\"Hello %d\\\", i);\\n}\") == 2"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HelloWorld.c int Main() { printf('Hello %d\\\\n',i); }***END*** int Main() { for (int i=0; i<10; i++) sum += i; printf('SUM %d', sum); }***END*** int Main() { printf('Hello %d\\\\n',i); printf('THE END\\\\n'); }***END***\") == \"2 HELLO WORLD.c\"\n\n-----Notes-----\nThis problem is a variation of a problem from a previous Kata.\n\"\"\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() {\\n\\tprintf(\\\"Hello %d\\\\n\\\",i);\\n}***END***\") == \"HelloWorld.c\\ndef solution(stdin: str) -> str:\\n\\tpass\"\nassert solution(\"Add.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\\\"SUM %d\\\", sum);\\n}***END***\") == \"Add.c\\ndef solution(stdin: str) -> str:\\n\\tpass\"\nassert solution(\"int Main() {\\n\\tprintf(\\\"Hello %d\\\",i);\\n  printf(\\\"THE END\\\");\\n}***END***\") == \"int Main() {\\n\\tprintf(\\\"Hello %d\\\",i);\\n\\tprintf(\\\"THE END\\\");\\n}***END***\"\nassert solution(\"int Main() {\\n\\tprintf(\\\"Hello %d\\\",i);\\n  printf(\\\"THE END\\\");\\n}***END***\") == \"int Main() {\\n\\tprintf(\\\"Hello %d\\\",i);\\n\\tprintf(\\\"THE END\\\");\\n}***END***\"\nassert solution(\"int Main() {\\n\\tprintf(\\\"Hello %d\\\",i);\\n  printf(\\\"THE END\\\");\\n}***END***\") == \"int Main() {\\n\\tprintf(\\\"Hello %d\\\",i);\\n\\tprintf(\\\"THE END\\\");\\n}***END***\""
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\\n4 2 1\\n4 4 1\") == \"1\\n2\\n2\"\nassert solution(\"2 2 2\\n4 2 1\\n4 4 1\\n2 2 2\\n2 2 1\\n4 4 1\\n4 4 1\") == \"1\\n1\\n1\\n1\"\nassert solution(\"2 2 2\\n4 2 1\\n4 4 1\\n2 2 2\\n2 2 1\\n4 4 1\\n4 4 1\\n2 2 1\\n2 2 1\\n4 4 1\\n4 4 1\") == \"1\\n1\\n1\\n1\"\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"1\\n1\\n1\"\nassert solution(\"2 2 2\\n4 2 1\\n4 4 1\\n2 2 2\\n2 2 1\\n4 4 1\\n4 4 1\\n2 2 1\\n2 2 1\\n4 4 1\\n4 4 1\") == \"1\\n2\\n1\\n2\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3\n2 2 2\n4 2 1\n4 4 1''') == '''1\n2\n2'''\n\nassert solution('''4 3\n6 7 5\n6 6 4\n7 4 3\n3 6 6\n3 7 7\n6 2 3\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4 5\n6 3 6\n6 4 6\n2 5 2\n7 7 5\n4 4"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == \"1 2 2\"\nassert solution(\"2 2\\n4 2 1\\n4 4 1\") == \"2 2\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == \"1\\n2\\n2\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == \"1 2 2\"\n\"\"\"\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(aoc_16_12) == solution(open(input_file_path, 'r'))\n\n---\n\nThe description of this problem is very misleading. The input is bad. The input is bad, bad. This problem is actually asking about the best possible rank, not the best possible score.\n\nThe solution to this problem is to limit the input to a certain number of players and holes. We will also be using a set to store the total scores.\n\nThe solution is to iterate through each line of input. For each line, we will remove each element if the element is greater than the maximum element in our set and then check the total score. We will also use a set to store the player's total score. Once the loop is complete, we will return the number of players in the set.\n\nWe will also have to create a deep copy of the set to store our results.\n\nThe complexity of this solution is O(n^2) where n is the number of players.\n\nfrom copy import copy"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n2 2 2\n4 2 1\n4 4 1''') == '''1\n2\n2'''\n\nassert solution('''2 3\n1 1 1\n1 1 1\n1 1 1''') == '''2\n2\n1'''\n\nassert solution('''3 2\n2 4\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '''3\n2\n2\n1'''\n\nassert solution('''4 3\n1 1\n1 1\n1 1\n2 1\n2 2\n2 2\n2 2\n1 1\n2 2\n2 1\n1 1\n1 1\n2 1\n1 1\n1 1\n2 1\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 1\n1 1\n2 2\n1 2\n2 1\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n1 1\n1 2\n1 1\n1 1\n2 1\n2 2\n1 1\n1 2\n2 1\n2 1\n1 1\n1 2\n1 2\n2 2\n2 1\n2 2\n1 1\n2 1\n1 1\n1 2\n1 1\n2 1\n1 1\n1 2\n2 1\n2 1\n1 1\n1 1\n1 2\n2 2\n1 1\n2 1\n2 2\n1 2\n2 2\n2 1\n2 2\n1 2\n2 1\n2 1\n2 1\n1 1\n1 2\n1 2\n1 1\n1 2\n2 2\n2 1\n2 1\n1 2\n1 1\n2 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 2\n2 2\n2 1\n2 1\n2 1\n2 2\n2 1\n1 1\n1 1\n1 1\n2 1\n1 2\n2 1\n2 2\n1 2\n2 1\n2 1\n1 2\n2 2\n2 1\n2 1\n2 1\n1 1\n2 1\n1 2\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 1\n1 2\n2 1\n2 2\n2 2\n2 1\n1 1\n1 2\n2 1\n1 1\n1 1\n1 1\n1 1\n2 1\n1 1\n2 1\n1 2\n2 1\n2 1\n1 1\n1 1\n2 2\n1 1\n2 1\n1 1\n2 2\n1 1\n2 2\n1 1\n1 2\n1 1\n2 1\n1 2\n2 1\n1 1\n1 1\n1 2\n2 2\n1 2\n2 2\n1 1\n2 1\n2 1\n2 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 2\n1 2\n1 2\n1 2\n1 2\n1 1\n1 2\n1 1\n1 1\n1 1\n1 1\n1 2\n1 1\n1 1\n1 1\n2 2\n2 1\n2 1\n2 1\n2 1\n2 2\n1 2\n1 1\n2 2\n1 1\n1 1\n2 2\n1 1\n1 1\n1 2\n2 2\n1 1\n1 1\n2 1\n2 2\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n2 1\n1 1\n2 2\n1 1\n2 1\n1 1\n1 2\n2 2\n2 1\n2 1\n1 1\n2 2\n1 1\n1 1\n2 1\n2 1\n2 1\n1 1\n1 2\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 1\n1 1\n1 1\n1 2\n1 1\n2 2\n1 1\n2 1\n2 1\n1 2\n1 1\n2 2\n2 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 1\n2 1\n2 1\n2 2\n1 1\n1 1\n1 2\n2 1\n1 2\n2 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 2\n2 1\n1 1\n1 1\n1 2\n1 1\n1 1\n2 1\n2 1\n1 1\n2 2\n2 1\n2 1\n1 1\n1 1\n1 2\n1 1\n1 1\n1 1\n2 1\n1 2\n1 2\n1 1\n1 2\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n1 2\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 2\n2 1\n1 1\n1 1\n2 2\n2 1\n1 2\n1 1\n1 1\n1 1\n1 1\n2 1\n1 2\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 2\n2 1\n1 1\n1 2\n2 2\n1 2\n1 1\n1 1\n2 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n2 2\n1 2\n2 1\n1 1\n1 1\n1 1\n2 1\n1 2\n1 1\n1 1\n1 1\n2 1\n2 2\n1 1\n2 1\n1 1\n2 1\n2 2\n1 1\n1 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 2\n1 2\n2 1\n1 2\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n1 2\n1 1\n2 1\n2 2\n1 1\n2 1\n1 1\n1 1\n2 1\n1 2\n1 1\n1 2\n1 1\n2 1\n1 1\n1 2\n1 1\n2 1\n1 1\n2 1\n2 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 3\n2 2 2\n4 2 1\n4 4 1\"\"\") == \"1\\n2\\n2\\n\"\nprint(\"Tests passed.\")\n\n-------\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n4 2 1\\n4 4 1\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == \"1\\n2\\n2\"\nprint(\"Passed\")\n\nprint(\"-\" * 32)\nprint(\"All test cases passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 20\\n50 70 10\\n100 110 4\\n150 190 16\") == \"5\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import deque\nfrom typing import Deque, List, Tuple, Iterable, cast\n\nfrom icontract import require, ensure\n\n\n@ensure(lambda result, buffer: len(buffer) == result)\n@ensure(\n    lambda result, buffer: sum(buffer) == result,\n    \"sum of buffer equal to result\",\n)\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 20\\n50 70 10\\n100 110 4\\n150 190 16\") == \"5\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\n\"\"\"\n\nn, c = map(int, input().split())\n\narr = []\nfor _ in range(n):\n    p, b, u = map(int, input().split())\n    arr.append([p, b, u])\n\narr.sort()"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 20\\n50 70 10\\n100 110 4\\n150 190 16\") == \"5\"\n\"\"\""
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 20\n50 70 10\n100 110 4\n150 190 16''') == '5'\nprint(solution(stdin))\n\n\"\"\"\n\n\n\nimport math\nimport random\nimport time\nimport unittest"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('50 70 10\\n100 110 4\\n150 190 16') == '5'\n\"\"\""
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 20\\n50 70 10\\n100 110 4\\n150 190 16\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".#..#.\\n\"\n                 \"...##\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##..\\n\") == \"Impossible\"\n\nassert solution(\".#..#.\\n\"\n                 \"...##\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##..\\n\"\n                 \"4 5\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...##\\n\"\n                 \".##..\\n\") == \"4\"\n\nassert solution(\"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...##\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"1 2\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\") == \"20\"\n\nassert solution(\"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...##\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"1 2\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\") == \"20\"\n\nassert solution(\"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...##\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"1 2\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \"...#..\\n\"\n                 \"....#\\n\"\n                 \"....#\\n\"\n                 \".##.#\\n\") == \"Impossible\"\n\n\"\"\"\n100%\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str):\n        data = stdin.strip().split('\\n')\n        data = list(map(list, data))\n        data_1 = []\n        for i in data:\n            data_1.append(i[1:-1])\n        data_1.pop(0)\n        data_2 = [list(map(int, i.split())) for i in data_1]\n        # for i in data:\n        #     data_1.append(i[1:-1])\n        # data_1.pop(0)\n        # data_2 = [list(map(int, i.split())) for i in data_1]\n\n        data_2.pop(0)\n        data_2.pop(-1)\n        # data_2.pop(-1)\n        data_2 = [list(map(int, i)) for i in data_2]\n\n        row = len(data)\n        column = len"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.#.\\n..#\\n..#') == 'IMPOSSIBLE'\nassert solution('#.\\n..#\\n#..') == 'IMPOSSIBLE'\nassert solution('.#.\\n..#\\n#..\\n..#') == 'IMPOSSIBLE'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == '26'\n\"\"\"\n\nfrom collections import deque\nfrom itertools import chain"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == '26'\nassert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n7 (5 4) (5 4) (3 3) (3 3) (1 3) (1 3)\n1\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)\n(1 1)"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == '26'\n\"\"\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'\n\nassert solution('''\n4 4\n(2 2) (2 3) (3 3) (4 4)\n.....\n....#\n..##.\n.##.#\n.###.\n1\n(1 3) (3 3) (3 2) (2 2) (2 2) (1 1)\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'\n\n\"\"\"\nWe can iterate over the two input strings to find the initial coordinates of the master and the child. Then we iterate through the master's path to find the coordinates that lie on the path. \n\nAt each location, we check if the location is walkable or not. If it is walkable, we check if the master can be at the location without being seen by the child. This is because the master can move to the location even if it is not walkable on their next turn. \n\nIf the child reaches the fridge in the kitchen, we return the number of turns. Otherwise, we return IMPOSSIBLE.\n\nTime complexity: O(MN), where M and N are the number of rows and columns in the school.\nSpace complexity: O(MN)\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3) (3 3) (2 3) (1 3) (1 2)') == '26'\n\"\"\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'\n\nassert solution('''\n2 3\n(1 3) (1 2)\n''') == 'IMPOSSIBLE'\n\n\"\"\"\nThe school's master have been caught and want to flee. \n\nThe master's path is (r, c) representing their current position. \n\nThe school's master has a \"rabbit hole\" in the school. \n\nThe master can teleport to any location not currently being patrolled. \n\nYou are given the full school's map, \n\n\"rabbit hole\" coordinates and the number of patrolling masters. \n\nYour task is to output the minimum number of turns that the master must take to reach the \"rabbit hole\", \n\nor to output IMPOSSIBLE if the master cannot reach the \"rabbit hole\" in the given number of turns. \n\nThe master is located at the bottom-right corner. \n\nYour task is to solve the problem using the Breadth First Search (BFS) algorithm.\n\nExample\n\nFor\n\nr = 5\n\nc = 5\n\nrabbits = [(2, 4), (4, 2), (4, 4)]\n\nholes = [(1, 2)]\n\np = 1\n\nand\n\nthe output is\n\n4\n\nThere are four possible ways the master can reach the \"rabbit hole\":\n\n\nThe minimum number of turns is 4, which is:\n\n\nIf the master is at the bottom-right corner, \n\nhe/she can walk to (1, 3) or to (3, 1) in the first turn, \n\nor to (3, 3) in the second turn. \n\nWhen the master gets to the \"rabbit hole\", \n\nhe/she can teleport to (2, 3). \n\nThus, the master needs at most 4 turns to reach the \"rabbit hole\".\n\nFor\n\nr = 3\n\nc = 3\n\nrabbits = [(1, 1), (2, 2), (2, 1)]\n\nholes = []\n\np = 1\n\nthe output is\n\nIMPOSSIBLE\n\"\"\"\nfrom collections import deque\nfrom itertools import islice\nfrom copy import deepcopy"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == '26'\n\n\"\"\""
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\") == \"26\"\nassert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\") == \"IMPOSSIBLE\"\n\nSample Input:\n5 5\n(1 1) (1 5)\n.....\n.....\n.....\n.....\n.....\n1\n6 (1 1) (3 3) (5 1) (2 2) (4 3) (5 2) (3 3) (1 2)\nSample Output:\n26\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List, Set\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0\\n1 0\\n-1 1\\n0 2\\n0 0\") == \"success\"\nassert solution(\"5\\n-1 1\\n0 2\\n0 0\") == \"failure\"\nassert solution(\"1\\n1 2\\n2 3\\n3 4\\n3 5\\n2 6\\n1 7\") == \"success\"\nassert solution(\"1\\n0 0\\n-1 1\") == \"failure\"\nassert solution(\"5\\n0 0\\n1 1\\n1 1\\n1 2\\n0 2\") == \"success\"\n\n-----Explanation-----\nIn this case, it is possible to hit all targets with two shots, one shot on each line of the input. The first shot is shot on line 1, hits the target at (0,0) and moves to (-1,0). The second shot is shot on line 2, hits the target at (0,0) and moves to (0,0).\n\nIn the next case, there is no possibility to hit all targets with at most two shots.\n\"\"\"\n\nn = int(input())\npoints = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    points.append([x, y])\n\npoints.sort(key=lambda x: x[1])\npoints.sort(key=lambda x: x[0])\n\npoints_set = set(tuple(p) for p in points)"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"success\"\nassert solution(\"5\\n-2 -1\\n0 1\\n0 2\\n1 1\\n3 2\") == \"failure\"\nassert solution(\"5\\n2 -1\\n2 0\\n1 0\\n3 0\\n1 1\") == \"success\"\nassert solution(\"5\\n0 -1\\n0 0\\n-1 0\\n0 2\\n1 1\") == \"failure\"\nassert solution(\"7\\n2 -3\\n2 -2\\n3 0\\n-1 2\\n-2 1\\n0 -2\\n0 0\\n-3 2\") == \"success\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\ntargets = []\nfor _ in range(n):\n    targets.append(tuple(map(int, input().split())))\n\ntargets = sorted(targets)\n\nsuccess = True\nfor i in range(1, len(targets)):\n    if abs(targets[i][0] - targets[i - 1][0]) > 2 or abs(targets[i][1] - targets[i - 1][1]) > 2:\n        success = False\n        break\n\nprint(\"success\" if success else \"failure\")\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') =='success'\nassert solution('1 0\\n0 0') =='success'\nassert solution('2 0\\n0 0\\n1 0') == 'failure'\nassert solution('3 0\\n0 0\\n1 0\\n2 0') =='success'\nassert solution('4 0\\n0 0\\n1 0\\n2 0\\n3 0') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\nassert solution(\"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\n\nExplanation:\nAssume line up is the function that will do the job. The two lines below are a correct solution.\nline_up(1, 0, 1, 0)\nline_up(0, 1, -1, 1)\n\nHowever, the second solution is also correct. It might not be clear what the optimal solution is, so you may want to use line up() in a different way.\n\n-----Notes-----\nYou have enough charge left to fire two shots.\n\n-----Hints-----\nYou may want to study the relationship between slope and distance.\n\"\"\"\n\n\nfrom typing import Tuple\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n1 0\\n-1 1\") == \"failure\"\nassert solution(\"0 0\\n-1 1\\n-1 1\") == \"success\"\n\"\"\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2') == \"success\"\nassert solution('6\\n-1 1\\n-1 1') == \"failure\"\nassert solution('4\\n1 1\\n2 1\\n2 1\\n3 1') == \"failure\"\nassert solution('4\\n2 1\\n2 1\\n3 1\\n3 1') == \"success\"\nassert solution('5\\n3 1\\n4 1\\n4 1\\n5 1') == \"success\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == \"failure\"\nassert solution(test_input_2) == \"success\"\nassert solution(test_input_3) == \"success\"\nassert solution(test_input_4) == \"success\"\nassert solution(test_input_5) == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('7\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n-1 0') =='success'\nassert solution('7\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n-1 2') == 'failure'\nassert solution('7\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n-1 2\\n2 3') =='success'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\npoints = []\nfor _ in range(n):\n    x, y = map(int, sys.stdin.readline().split())\n    points.append((x, y))\npoints = sorted(points)\n\nfor i in range(n - 1):\n    x1, y1 = points[i]\n    x2, y2 = points[i + 1]\n    if abs(x1 - x2) <= 2 and abs(y1 - y2) <= 2:\n        print('success')\n        sys.exit(0)\nprint('failure')\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"possible\"\nassert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"impossible\"\n\n-----Constraints-----\n - The number of downlink windows is in the range [1\u202630].\n - Each queue size is in the range [1\u2026100].\n - The number of sensors is in the range [1\u202630].\n - The number of sensors is in the range [1\u2026100].\n - The size of the space between two downlink windows is in the range [1\u20261000].\n - The size of the space between two downlink windows is in the range [1\u2026100].\n - Each downlink window represents one day.\n - The number of megabytes to transfer to Earth is in the range [1\u202610^6].\n - The amount of data generated by each sensor is in the range [1\u202610^6].\n - The number of megabytes to transfer to Earth is in the range [1\u202610^6].\n - The amount of data generated by each sensor is in the range [1\u202610^6].\n\"\"\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'possible'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'possible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 2 2\n1 2\n3 3\n5 2 2\n5 2 2''') == 'possible'\nassert solution('''2 2 2\n1 2\n3 3\n5 2 2\n5 2 2''') == 'impossible'\nassert solution('''2 2 2\n1 2\n3 3\n5 2 2\n5 2 2''') == 'impossible'\n\nSample Input:\n3 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n1\n1\n5 2 2\n5 2 2\nSample Output:\nimpossible\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"possible\"\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'possible'\n\nassert solution('3 2 1\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'impossible'\n\nassert solution('2 2 1\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'impossible'\n\nassert solution('4 2 1\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'possible'\n\nassert solution('1 1 1\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'impossible'"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"possible\"\n\nSample Input:\n3 2 2\n1 2\n3 3\n5 2 2\n5 2 2\nSample Output:\nimpossible\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'possible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2 2\n1 2\n3 3\n5 2 2\n5 2 2''') == 'possible'\nassert solution('''2 2 2\n1 2\n3 3\n5 2 2\n5 2 2''') == 'impossible'\n'''\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'possible'\n\"\"\""
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 1 2\\n1 2 1\\n-1 1 2') == 0\n\nSample Input:\n1 1\n-2 1 3\nSample Output:\n2\n\n-----Notes-----\nAssume that the starting location is the school, not necessarily.\n\n\"\"\""
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == 0\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 3\") == \"0\"\nassert solution(\"-3 -1 3\") == \"0\"\nassert solution(\"3 1 3\") == \"2\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"1 2 2\") == \"1\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 1 2\\n1 2 1\\n-1 1 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == '0'\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"0\"\nassert solution(\"5 1\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"1\"\nassert solution(\"4 3\\n2 1 1\\n1 2 1\\n0 0 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"0\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 2, 1, 1, 2, -1, 1) == 0\nassert solution(1, 2, 1, 2, 1, 1, 1) == 0\nassert solution(2, 2, 1, 2, 1, 1, 2) == 1\n\"\"\"\n\n\"\"\"\n[HomeWork#2-B] : Ants visiting a 5*5 grid\n\"\"\""
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"0\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nn, m = [int(i) for i in sys.argv[1].split()]"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"532211\") == \"4\"\nassert solution(\"1313\") == \"4\"\nassert solution(\"4321\") == \"2\"\nassert solution(\"1234\") == \"1\"\nassert solution(\"2341\") == \"3\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('123') == '123'\nassert solution('12345') == '12345'\nassert solution('1234567') == '1234567'\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n353\") == \"3\\n1313\"\nassert solution(\"4 2\\n1234\") == \"4\\n1313\"\n\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nx = list(map(int, stdin.readline().split()))\n\nx.sort()"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n353\\n') == '3\\n353'\nassert solution('4 2\\n1234\\n') == '4\\n1313'\nassert solution('4 4\\n2222\\n') == '4\\n2222'\nassert solution('1 4\\n1234\\n') == '4'\nassert solution('5 2\\n333\\n') == '5\\n3313'\n\nprint(solution(\"4 3\\n1234\\n\"))\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n353\\n') == '4\\n1313\\n'\nassert solution('4 2\\n1234\\n') == '4\\n1313\\n'\nassert solution('5 5\\n9999\\n') == '5\\n1111\\n'\nassert solution('10 8\\n999999\\n') == '10\\n111111\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1234\") == \"4\\n1313\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"1313\"\nassert solution(\"353\") == \"1313\""
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1234\") == \"4\\n1313\"\n\"\"\"\n\nn, k = map(int, input().split())\nx = list(map(int, input()))\n\nfor i in range(n - 1 - k):\n    if x[i]!= x[i + k]:\n        break\n\nelse:\n    i += 1\n\nprint(n - i)\nprint(\"\".join(map(str, x[:i])))\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"353\", 2) == \"1313\"\nassert solution(\"1234\", 2) == \"1313\"\nassert solution(\"1234\", 1) == \"2334\"\nassert solution(\"1234\", 0) == \"1234\"\nassert solution(\"2313\", 0) == \"2313\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 30 45 3 11\") == 'NO'\nassert solution(\"12 0 1 12 1\") == 'YES'\nassert solution(\"3 47 0 4 9\") == 'YES'\n\n\n-----Solution-----"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\n\"\"\"\n\nh, m, s, t_1, t_2 = [int(c) for c in stdin.split()]\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"12 30 45 3 11\"\n) == \"NO\"\nassert solution(\n    \"12 0 1 12 1\"\n) == \"YES\"\nassert solution(\n    \"3 47 0 4 9\"\n) == \"YES\"\nassert solution(\n    \"3 47 0 4 9\"\n) == \"YES\"\nassert solution(\n    \"4 47 0 4 9\"\n) == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\n\"\"\"\nimport math\n\nimport sys"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == 3\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == 2\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == 0\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20') == '3'\nassert solution('1 1 2 3 1 0\\n15 27 26') == '2'\nassert solution('1 1 2 3 1 0\\n2 2 1') == '0'\n\n---Problem---\n\n@Weeks\n\n---Solution---\n\"\"\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == '3'\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == '2'\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == '0'\n\"\"\""
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == 3\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == 2\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == 0\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == 0\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == 2\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\""
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('15 27 26') == '2'\nassert solution('2 2 1') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1 1 2 3 1 0\n2 4 20\n\"\"\"\n) == '3'\n\nassert solution(\n\"\"\"\n1 1 2 3 1 0\n15 27 26\n\"\"\"\n) == '2'\n\nassert solution(\n\"\"\"\n1 1 2 3 1 0\n2 2 1\n\"\"\"\n) == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 2 3 1 0\\n2 2 1') == '0'\nassert solution('1 1 2 3 1 0\\n15 27 26') == '2'\nassert solution('1 1 2 3 1 0\\n2 2 1') == '0'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == '4'\nassert solution(\"3\\n0 0 2\\n3 0 2\\n6 0 2\") == '6'\nassert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == '8'\n\nprint(solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\"))\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 1\\n2 0 1\\n4 0 1') == '4'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2') == '6'\n\"\"\"\n\nn = int(input())\npoints = []\nboundary = []\nfor i in range(n):\n    x, y, r = map(int, input().split())\n    points.append((x, y))\n    boundary.append((x - r, x + r, y - r, y + r))\n\nprint(len(set(boundary)))\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0 2\\n2 0 2\\n1 1 2') == '8'\nassert solution('3\\n-10 -10 1\\n2 -10 1\\n-1 -1 2') == '8'\nassert solution('3\\n-10 -10 1\\n2 -10 1\\n-1 -1 2') == '6'\nassert solution('3\\n0 0 2\\n2 0 2\\n1 1 2') == '4'\nassert solution('3\\n0 0 2\\n2 0 2\\n1 1 2') == '4'\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == '6'\nassert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == '4'\nassert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == '8'\nassert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == '8'\n\n\"\"\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == \"4\"\n\nassert solution(\"3\\n0 0 2\\n3 0 2\\n6 0 2\") == \"6\"\n\nassert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == \"8\"\n\n\n\n----\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 1\\n2 0 1\\n4 0 1\") == '4'\nassert solution(\"0 0 2\\n3 0 2\\n6 0 2\") == '6'\nassert solution(\"0 0 2\\n2 0 2\\n1 1 2\") == '8'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == \"6\"\nassert solution(\"3\\n0 0 2\\n3 0 2\\n6 0 2\") == \"8\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == \"8\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == \"4\"\nassert solution(\"3\\n0 0 2\\n3 0 2\\n6 0 2\") == \"6\"\nassert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == \"8\"\nprint(\"Passed\")\n\n\"\"\"\n\n\nfrom math import pi"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == \"4\"\nassert solution(\"3\\n0 0 2\\n3 0 2\\n6 0 2\") == \"6\"\nassert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == \"8\"\nassert solution(\"2\\n0 0 1\\n3 0 1\") == \"2\"\n\n\"\"\"\n\nimport sys\n\nn = int(input())"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'NO'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7') == 'YES'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7') == 'NO'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7') == 'YES'\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'NO'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7') == 'YES'\n\"\"\""
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"NO\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"YES\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"YES\"\n\"\"\"\nimport math"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\") == \"YES\"\nassert solution(\"1 3 3 5 5 3 3 1\") == \"NO\"\nassert solution(\"6 0 6 6 0 6 0 0\") == \"YES\"\nassert solution(\"7 4 4 7 7 10 10 7\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == \"YES\"\n\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"NO\"\n\nassert solution(\"0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7\") == \"YES\"\n\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"NO\"\n\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"YES\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"NO\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"YES\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 3 5 5 3 3 1\\n7 3 9 5 11 3 9 1\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"NO\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == 'YES'\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == 'NO'\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\") == \"sjfnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n0\") == \"cslnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 1\") == \"sjfnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\nassert solution(\"1\\n0\") == \"cslnb\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 2\") == \"cslnb\"\nassert solution(\"1 0\") == \"cslnb\"\nassert solution(\"1 1\") == \"sjfnb\"\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().strip().split(\" \")\n\na = [int(x) for x in a]"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == \"sjfnb\"\nassert solution(\"3\\n0 1 2\") == \"cslnb\"\nassert solution(\"3\\n1 0 2\") == \"sjfnb\"\nassert solution(\"3\\n1 1 2\") == \"sjfnb\"\nassert solution(\"1\\n0\") == \"cslnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 1') =='sjfnb'\nassert solution('3\\n1 2 1') =='sjfnb'\nassert solution('2\\n2 1 1') == 'cslnb'\nassert solution('1\\n1') == 'cslnb'\nassert solution('3\\n2 2 1') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n0') =='sjfnb'\nassert solution('2\\n1 0') == 'cslnb'\nassert solution('3\\n2 3 1') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0\") == \"cslnb\"\nassert solution(\"2 2\") == \"sjfnb\"\nassert solution(\"3 2 1\") == \"sjfnb\"\nassert solution(\"2 2\") == \"sjfnb\"\nassert solution(\"3 3 1\") == \"cslnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3 1') =='sjfnb'\nassert solution('4\\n2 4 0') == 'cslnb'\nassert solution('5\\n3 4 1 2') =='sjfnb'\nassert solution('5\\n4 3 2 3') == 'cslnb'\nassert solution('10\\n9 8 7 6 5 4 3 2 1') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\") == \"sjfnb\"\nassert solution(\"2\\n2 2\") == \"cslnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\nassert solution(\"2\\n2 2\") == \"cslnb\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        pass\n\n    def test_one(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n1 5 3\\n\") == \"2\"\nassert solution(\"1 2\\n1\\n\") == \"1\"\nassert solution(\"1 1\\n1\\n\") == \"0\"\nassert solution(\"10 10\\n1\\n1\\n\") == \"10\"\nassert solution(\"10 10\\n2\\n2\\n\") == \"10\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 5 3\") == 2\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n1 5 3') == 2\nassert solution('1 2\\n1') == 1\nassert solution('1 1\\n1') == 0\nassert solution('3 1\\n1') == 1\nassert solution('3 10\\n1 1 2') == 2\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n1 5 3\") == 2\nassert solution(\"1 2\\n1\") == 1\nassert solution(\"1 1\\n1\") == 0\nassert solution(\"1 2\\n2\") == 0\nassert solution(\"3 6\\n1 1 2 3\") == 0\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 3\\n1 1') == '0'\n\nassert solution('1 1\\n1') == '1'\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n1 5 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n1 5 3') == '2'\n\"\"\"\n\nimport math\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5\n1 5 3\n''') == 2\nassert solution('''1 2\n1\n''') == 1\nassert solution('''1 1\n1\n''') == 0\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n1 5 3\\n\") == 2\n\"\"\""
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 3\") == \"2\"\nassert solution(\"1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\\n0 1\"\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1 0 1\"\nassert solution(\"2\") == \"-1 0 1\"\nassert solution(\"3\") == \"1 0 1 0 1\"\nassert solution(\"4\") == \"1 0 1 0 0 1 0 1\"\nassert solution(\"5\") == \"1 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2 -1 0 1\"\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2 1 0 1'\nassert solution('5') == '1 0 1 1 0 1'\nassert solution('20') == '5 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 1 1'\n\"\"\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"3\", \"The degree of the polynomial should be greater than the degree of the second polynomial, the leading coefficients should be equal to 1\"\nassert solution(\"2\") == \"1 0 1 0\", \"The degree of the polynomial should be greater than the degree of the second polynomial, the leading coefficients should be equal to 1\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1 0 1\", \"Test 1\"\nassert solution(\"4\") == \"2 -1 0 1\", \"Test 2\"\nassert solution(\"5\") == \"3 -2 0 1\", \"Test 3\"\n\nassert solution(\"1\") == \"1 0\", \"Test 4\"\nassert solution(\"2\") == \"1 0\", \"Test 5\"\n\"\"\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2 -1 0 1\"\nassert solution(\"1\") == \"1 0 1\"\nassert solution(\"2\") == \"-1 0 1\"\nassert solution(\"3\") == \"-1 0 1\"\n\n\"\"\"\n\nimport sys\nimport unittest\n\n\nclass Solution:\n    def __init__(self):\n        self._n = 0\n        self._x = 0\n        self._A = 0\n        self._B = 0\n        self._C = 0\n        self._D = 0\n\n    def read(self):\n        self._n = int(sys.stdin.readline())\n        A = []\n        B = []\n        for _ in range(self._n):\n            a, b = map(int, sys.stdin.readline().split())\n            A.append(a)\n            B.append(b)\n        self._A = A\n        self._B = B\n        return self._n\n\n    def compute(self):\n        self._D = self._A[0]\n        for i in range(self._n):\n            self._D = self._A[i] * self._D + self._B[i]\n        self._C = self._B[0]\n        for i in range(1, self._n):\n            self._C = self._A[i] * self._C + self._B[i]\n\n    def write(self):\n        if self._D < 0:\n            self._D = -self._D\n            self._C = -self._C\n        self._x = 0\n        while self._C < self._D:\n            self._D = self._D / self._C\n            self._x += 1\n        self._x = -self._x\n        self._x = str(self._x)\n        sys.stdout.write(self._x + \"\\n\")\n        for i in range(self._n):\n            self._x = self._A[i] * self._x + self._B[i]\n            sys.stdout.write(str(self._x) + \"\\n\")\n\n    def solve(self):\n        self.read()\n        self.compute()\n        self.write()\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        s = Solution()\n        s.solve()\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1 0\\n0 1\"\nassert solution(\"2\") == \"2 -1 0 1\"\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1 0\"\nassert solution(\"2\") == \"2 -1 0 1\"\nassert solution(\"3\") == \"-1 0 1\"\nassert solution(\"4\") == \"0 1\"\nassert solution(\"5\") == \"1 0 1\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 5 4\\n1 2 1 3\\n\") == '1 3 3'\nassert solution(\"3 1 5 3\\n1 3 1\\n\") == '2 3 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3 1 5 4\n1 2 1 3\n''') == '''\n1 3 3\n'''\n\nassert solution('''\n3 1 5 3\n1 3 1\n''') == '''\n2 3 2\n'''\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 5 4\\n1 2 1 3\") == \"1 3 3\"\n\"\"\"\n\nn, k, m, a = map(int, input().split())\nvotes = list(map(int, input().split()))\n\nelected = set()\nvotes.sort()\nfor v in votes:\n    if len(elected) < k:\n        if v not in elected:\n            elected.add(v)\n        else:\n            elected.remove(v)\n    else:\n        break\n\nfor i in range(m - a):\n    if votes[i] not in elected:\n        if i + 1 < m:\n            if votes[i + 1] in elected:\n                print(2, votes[i + 1])\n            else:\n                print(1, votes[i + 1])\n        else:\n            print(3)\n    else:\n        print(1, votes[i])\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3\\n') == '1 3 3'\nprint('Test pass.')\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3') == '1 3 3'\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 2 3') == '1 1 2 3'\n\"\"\""
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3\\n') == '1 3 3'\nassert solution('3 1 5 3\\n1 3 1\\n') == '2 3 2'\n\n\"\"\""
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 1 5 4\n1 2 1 3''') == '1 3 3'\nassert solution('''3 1 5 3\n1 3 1''') == '2 3 2'\nassert solution('''3 1 5 3\n1 3 1''') == '1 2 2'\n\nprint('Success')"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 5 3\\n1 3 1') == '1 3 3'\nassert solution('3 1 5 3\\n1 3 1') == '2 3 2'\nassert solution('3 2 5 3\\n1 3 1') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 5 4\\n1 2 1 3\") == \"1 3 3\"\nprint('OK')\n\nassert solution(\"3 1 5 3\\n1 3 1\") == \"2 3 2\"\nprint('OK')\n\nassert solution(\"3 2 5 3\\n1 3 1\") == \"1 2 2\"\nprint('OK')"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1100\") == 1\nassert solution(\"1100\") == 1\n\nassert solution(\"11010\") == 2\nassert solution(\"11010\") == 2\n\nassert solution(\"11110\") == 3\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(110) == 3\nassert solution('111111011') == 169\n\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11011101') == '169'\nassert solution('11111111') == '0'\n\nimport unittest\nimport math\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        assert solution('110011001100') == '0'\n        assert solution('101111011100') == '13'\n        assert solution('111111101111') == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110\") == 3\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"110\") == 3\nassert solution(\"111111011\") == 169\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111000111\") == 169\nassert solution(\"111011110\") == 22\nassert solution(\"111011110\") == 22\n\nassert solution(\"111011110\") == 22\nassert solution(\"111011110\") == 22\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"110\") == 3\nassert solution(\"111111011\") == 169\n\"\"\""
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111111011\") == 169\nassert solution(\"1101010\") == 4\nassert solution(\"111111111\") == 1\nassert solution(\"11001100\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('110') == 3\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"110\") == \"3\"\n\nassert solution(\"111111011\") == \"169\"\n\nprint(\"Successfully solved!\")\n\n\"\"\""
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\n\"\"\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\n\nassert solution('''5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\n\nimport io, pytest\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\n\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\""
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\nassert solution(\"5 3 5 2 1 1\") == \"33.121375178000\"\nassert solution(\"5 4 2 1 2 1\") == \"33.121375178000\"\n\n\"\"\"\n\nimport math\nimport sys\nimport unittest\n\n\nclass Node:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __repr__(self):\n        return f\"({self.x}, {self.y})\"\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n\nclass Graph:\n    def __init__(self, n):\n        self.nodes = {i: Node(i, i) for i in range(1, n + 1)}\n        self.adj_list = {i: set() for i in range(1, n + 1)}\n\n    def connect(self, node1, node2):\n        node1, node2 = self.nodes[node1], self.nodes[node2]\n        if node1 == node2:\n            return False\n        self.adj_list[node1].add(node2)\n        self.adj_list[node2].add(node1)\n        return True\n\n    def dijkstra(self, node1, node2):\n        node1, node2 = self.nodes[node1], self.nodes[node2]\n        queue = [node1]\n        dist = {node1: 0}\n        prev = {}\n\n        while len(queue) > 0:\n            u = queue.pop(0)\n            for v in self.adj_list[u]:\n                if v not in dist:\n                    dist[v] = dist[u] + 1\n                    prev[v] = u\n                    queue.append(v)\n\n        path = []\n        v = node2\n        while v!= node1:\n            path.append(v)\n            v = prev[v]\n        path.append(node1)\n        path.reverse()\n        return path\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\n\"\"\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 0 0 0') == '8.094427190999916'\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\nassert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\n\"\"\"\n\nimport math\n\na, b, c, d, e = map(int, stdin.split())\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\n\"\"\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n8 5\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n8 15\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n7 20\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n1000000000000 1000000000001\n\"\"\"\n) == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\nassert solution(\"1000000000000000 1000000000000\") == \"500000000010\"\n\nfrom collections import Counter"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 5\") == 2\nassert solution(\"8 15\") == 1\nassert solution(\"7 20\") == 0\nassert solution(\"1000000000000 1000000000001\") == 500000000000\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '8 5\\n'\n) == '2'\nassert solution(\n    '8 15\\n'\n) == '1'\nassert solution(\n    '7 20\\n'\n) == '0'\nassert solution(\n    '1000000000000 1000000000001\\n'\n) == '500000000000'\nassert solution(\n    '10000000000000 1000000000000001\\n'\n) == '50000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10001100\") == 4\nassert solution(\"10000\") == 3\nassert solution(\"11111\") == 0\nassert solution(\"01110\") == 3\nassert solution(\"11011\") == 3\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('11') == 0\nassert solution('1101') == 1\nassert solution('11010') == 2\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('01010') == 0\nassert solution('101') == 1\nassert solution('11110') == 0\nassert solution('111111111111111111111111111111') == 0\nassert solution('11111110110111101101111011011') == 1\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('011011100') == 11\nassert solution('11011000') == 11\nassert solution('11100010') == 2\n\"\"\""
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0110111') == '0'\nassert solution('100100') == '0'\nassert solution('1111100') == '1'\n\"\"\""
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01010\") == \"0\"\nassert solution(\"11010\") == \"1\"\nassert solution(\"11110\") == \"2\"\nassert solution(\"111110\") == \"2\"\nassert solution(\"101010\") == \"2\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"011\") == \"0\"\nassert solution(\"0110\") == \"0\"\nassert solution(\"1111\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"101010\") == \"1\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0110111\") == \"0\"\nassert solution(\"01101110\") == \"2\"\nassert solution(\"0110111010\") == \"5\"\nassert solution(\"111111010\") == \"0\"\nassert solution(\"1110111010\") == \"5\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('01010') == '1'\nassert solution('11100') == '0'\nassert solution('11111') == '0'\nassert solution('01110') == '2'\nassert solution('11110') == '2'\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 2\\n') == '19 5'\nassert solution('3 1 1\\n') == '2 1'\nassert solution('4 1 1\\n') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2') == '19 5'\nassert solution('3 1 1') == '2 1'\nassert solution('100 2 1') == '-1'\n\n\n\n\n\n\n\n-----\n\n\u0414\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $a_1, a_2, \\ldots, a_n$.\n\u0418\u0437 \u044d\u0442\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b $b_1, b_2, \\ldots, b_n$, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c:\n\n$0 < b_1 < a_1 < b_2 < a_2 < \\ldots < b_n < a_n$.\n$b_i + b_{i + 1} = a_i + a_{i + 1}$ for all $i \\neq n - 1$.\n\u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $b_0, b_1, \\ldots, b_n$, \u0442\u0430\u043a\u0438\u0445 \u0447\u0442\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b $a_0, a_1, \\ldots, a_n$.\n\n-----Input-----\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0441 \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n1 2 1\n\n-----Output-----\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0441 \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n1 3 3 4\n\n\n-----Example-----\nInput\n1 1 1\n\nOutput\n1 2 3 4\n\nInput\n1 1 2\n\nOutput\n1 2 3 4\n\n\n-----Note-----\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c \u0431\u0435\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432, \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 if."
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\\n\") == \"2 1\"\nassert solution(\"5 1 2\\n\") == \"19 5\"\n\"\"\"\n\n\n\nfrom collections import deque"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\\n\") == \"2 1\"\n\"\"\""
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n\"\"\"\nimport sys\nfrom collections import deque\n\nstdin = sys.stdin\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 1\") == \"2 1\"\nassert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n\nassert solution(\"6 1 2\") == \"19 5\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2\") == \"4\"\n\"\"\"\n\n\nfrom typing import Dict, List, Tuple"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 1\") == \"6\"\n\nassert solution(\"10 2\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 1') == '6'\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 1\\n') == '6'\n\nassert solution('10 2\\n') == '4'\n\"\"\"\nimport math\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 1\") == \"6\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 1\") == '6'\nassert solution(\"10 2\") == '4'\n\"\"\""
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1') == '6'\nassert solution('5 2') == '4'\nassert solution('5 3') == '0'\nassert solution('5 4') == '0'\nassert solution('5 5') == '0'\n\n\"\"\"\n\n\nfrom math import gcd, floor, ceil\nimport sys\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\nassert solution('5 5') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 1') == '6'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('192.168.0.0/24\\n') == '0.0.0.0/0\\n'\nassert solution('192.168.0.0/24\\n-192.168.0.0/24\\n+192.168.0.0/24\\n') == '0.0.0.0/0\\n'\nassert solution('192.168.0.0/24\\n-192.168.0.0/24\\n+192.168.0.0/24\\n-192.168.0.0/24\\n') == '0.0.0.0/0\\n'\nassert solution('192.168.0.0/24\\n-192.168.0.0/24\\n+192.168.0.0/24\\n-192.168.0.0/24\\n-192.168.0.0/24\\n') == '0.0.0.0/0\\n'\nassert solution('192.168.0.0/24\\n-192.168.0.0/24\\n+192.168.0.0/24\\n-192.168.0.0/24\\n-192.168.0.0/24\\n') == '0.0.0.0/0\\n'\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.4/31\") == \"\"\"1\n0.0.0.0/0\n149.154.167.99\n149.154.167.120/29\n\"\"\", solution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.4/31\")\n\n\"\"\""
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-149.154.167.99\\n149.154.167.100/30\") == \"1\\n0.0.0.0/0\"\nassert solution(\"-149.154.167.99\\n+149.154.167.100/30\") == \"1\\n0.0.0.0/0\"\nassert solution(\"-149.154.167.99\\n+149.154.167.128/25\") == \"1\\n0.0.0.128/27\"\nassert solution(\"-149.154.167.99\\n+149.154.167.128/25\\n-149.154.167.120/29\") == \"1\\n0.0.0.120/27\\n0.0.0.128/27\"\nassert solution(\"-149.154.167.99\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.6/31\") == \"1\\n0.0.0.120/27\\n0.0.0.128/27\\n0.0.0.240/31\\n0.0.0.96/31\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29') == '2\\n149.154.167.99\\n149.154.167.120/29'\nassert solution('5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31') == '2\\n195.0.0.0/8\\n127.0.0.4/30'\nassert solution('1\\n-149.154.167.99') == '1'\nassert solution('2\\n+127.0.0.1/32\\n-127.0.0.1') == '-1'\n\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\") == '195.0.0.0/8\\n127.0.0.4/30'\n\nprint(solution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\"))"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '-1'\nassert solution('+') == '0.0.0.0/0'\nassert solution('-') == '0.0.0.0/0'\nassert solution('-1') == '0.0.0.0/0'\nassert solution('0.0.0.0/0') == '0.0.0.0/0'\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n-149.154.167.99\") == \"1\\n0.0.0.0/0\"\nassert solution(\"1\\n+149.154.167.99\") == \"1\\n0.0.0.0/0\"\nassert solution(\"1\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\") == \"2\\n195.0.0.0/8\\n127.0.0.4/30\\n\"\nassert solution(\"2\\n+127.0.0.1/32\\n-127.0.0.1\") == \"1\\n-1\\n\"\nassert solution(\"3\\n-127.0.0.1\\n+127.0.0.1\") == \"-1\\n\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-149.154.167.99\") == \"1\\n0.0.0.0/0\"\nassert solution(\"+149.154.167.100/30\") == \"1\\n149.154.167.100/30\"\nassert solution(\"+149.154.167.128/25\") == \"1\\n149.154.167.0/24\"\nassert solution(\"-149.154.167.120/29\") == \"2\\n149.154.167.120/29\"\nassert solution(\"-127.0.0.4/31\") == \"2\\n195.0.0.0/8\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-149.154.167.99\") == \"1\"\nassert solution(\"+149.154.167.100/30\") == \"1\"\nassert solution(\"+149.154.167.128/25\") == \"1\"\nassert solution(\"-149.154.167.120/29\") == \"1\"\n\"\"\"\n\nimport math\nfrom itertools import product"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.4/31\\n+127.0.0.8\\n-127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n\") == \"2\\n195.0.0.0/8\\n127.0.0.4/30\\n\"\nassert solution(\"-1\\n-1\") == \"-1\"\nassert solution(\"-1\\n-1\\n-1\") == \"-1\"\nassert solution(\"-1\\n-1\\n-1\\n-1\\n-1\") == \"-1\"\nassert solution(\"-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\") == \"-1\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"31415926535\") == \"0\"\nassert solution(\"3141592653567\") == \"0\"\nassert solution(\"31415926535678\") == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"1\"\n\"\"\"\n\nn = int(input())\ncards = input()"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"31415926535\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '1'\nassert solution('22') == '2'\nassert solution('11') == '1'\nassert solution('31415926535') == '0'\nassert solution('31415926535') == '0'\n\n-----Problem-----\nYou have n cards, but you can only use each card once.\n\nYou need to generate the minimal possible number of groups of cards so that in each group, the number of cards used is as large as possible.\n\n---\nInput\n[1,1,2,2,2]\n\nOutput\n3\n---\n[1,1,1,2,2]\n\n[1,2,2,2,2]\n\n[1,1,2,2,2]\n\nYou can make three groups: [1], [2], [2].\n\nIn each group, the number of cards is the largest, so the answer is 3.\n\n---\nInput\n[3,3,3,3,3]\n\nOutput\n1\n---\n[3,3,3,3,3]\n\nThere's only one group [3,3,3,3,3].\n\nIn this example the number of cards used is 1, so the answer is 1.\n\n---\nInput\n[1,1,2,2,2]\n\nOutput\n2\n---\n[1,1,2,2,2]\n\n[1,1,2,2,2]\n\nYou can make two groups: [1,1] and [2,2,2].\n\nIn each group, the number of cards is the largest, so the answer is 2.\n\nIn this example the number of cards used is 2, so the answer is 2.\n\nThe naive solution is to check every possible combination. For the example above, the naive solution will have 2^5 possibilities.\n\n---\nInput\n[1,1,2,2,2,3,3,3,3,3,3]\n\nOutput\n3\n---\n[1,1,2,2,2,3,3,3,3,3,3]\n\n[1,1,2,2,2,3,3,3,3,3,3]\n\n[1,1,2,2,2,3,3,3,3,3,3]\n\nYou can make three groups: [1,1,2,2,2], [3,3,3,3,3] and [3,3,3,3,3].\n\nIn each group, the number of cards is the largest, so the answer is 3.\n\nIn this example the number of cards used is 3, so the answer is 3.\n\nThe time complexity of the naive solution is O(2^n).\n\nThe optimal solution uses dynamic programming. Let $S(n, m)$ be the number of ways we can make groups with $n$ cards, each of which has $m$ cards. Then\n$S(n, m) = S(n-1, m) + S(n-1, m-1)$,\nwhere $S(0, m) = 1$, for any $m$ and $S(n, 0) = 0$, for any $n$.\n\nThe space complexity of this solution is O(n).\n\n---\nInput\n[1,1,2,2,2,3,3,3,3,3,3]\n\nOutput\n3\n---\n[1,1,2,2,2,3,3,3,3,3,3]\n\n[1,1,2,2,2,3,3,3,3,3,3]\n\n[1,1,2,2,2,3,3,3,3,3,3]\n\nYou can make three groups: [1,1,2,2,2], [3,3,3,3,3] and [3,3,3,3,3].\n\nIn each group, the number of cards is the largest, so the answer is 3.\n\nIn this example the number of cards used is 3, so the answer is 3.\n\nThe time complexity of the optimal solution is O(n).\n\nThe space complexity of this solution is O(n).\n\nYou can also use dynamic programming for this problem.\n\n---\nInput\n[1,1,2,2,2,3,3,3,3,3,3]\n\nOutput\n3\n---\n[1,1,2,2,2,3,3,3,3,3,3]\n\n[1,1,2,2,2,3,3,3,3,3,3]\n\n[1,1,2,2,2,3,3,3,3,3,3]\n\nYou can make three groups: [1,1,2,2,2], [3,3,3,3,3] and [3,3,3,3,3].\n\nIn each group, the number of cards is the largest, so the answer is 3.\n\nIn this example the number of cards used is 3, so the answer is 3.\n\nThe time complexity of the optimal solution is O(n).\n\nThe space complexity of this solution is O(n).\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1 1') == '11'\nassert solution('1 1 2') == '12'\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '11'\nassert solution('22') == '22'\nassert solution('111') == '111'\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"31415926535\") == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"1\"\nassert solution(\"31415926535\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"80000000000\") == \"1\"\nassert solution(\"80123456789\") == \"2\"\nassert solution(\"31415926535\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"11111111111\") == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11' '00000000008') == '1'\nassert solution('22' '0011223344556677889988') == '2'\nassert solution('11' '31415926535') == '0'\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\"\nassert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\\n\") == \"-1\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\""
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\"\nassert solution(\"2 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n\") == \"4\"\nassert solution(\"2 3\\n0 0 0\\n0 1 0\\n0 0 0\\n\") == \"-1\"\n\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"3\\nrow 1\\nrow 2\\nrow 3\"\n\n\"\"\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0 0 0\\n0 1 0\\n0 0 0') == '-1'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\n\nimport re"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"3\\nrow 1\\nrow 2\\nrow 3\"\nassert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\") == \"-1\""
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n\") == \"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\\nrow 1\\nrow 2\\nrow 3\"\nassert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\\n\") == \"-1\"\nassert solution(\"3 3\\n1 1 1\\n0 0 0\\n0 0 0\\n\") == \"3\\nrow 1\\nrow 2\\nrow 3\""
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"-1\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\"\nassert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\") == \"3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"1\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"0\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"-1\"\nassert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\") == \"3\\nrow 1\\nrow 2\\nrow 3\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1') == '4'\nassert solution('3 3\\n0 0 0\\n0 1 0\\n0 0 0') == '-1'\n\"\"\""
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'NO'\nassert solution('4 2 1 4') == 'YES'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6 4 5\\n') == 'YES'\nassert solution('8 6 4 6\\n') == 'NO'\nassert solution('4 2 1 4\\n') == 'YES'\nassert solution('4 2 1 5\\n') == 'NO'\nassert solution('8 5 3 4\\n') == 'NO'"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\""
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\nassert solution(\"8 5 8 2 5\") == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\nassert solution(\"5 4 1 3\") == \"NO\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == 6\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\nn, m = map(int, inputs[0].split())"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == 6\n\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == 12\n\nassert solution(\"4 2\\n1 3\\n1 4\") == 6\n\nassert solution(\"4 2\\n1 3\\n1 4\") == 6\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"1 1\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\n\"\"\""
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"-\"\nassert solution(\"2 2\\n1 2\\n3 2\") == \"-\"\nassert solution(\"2 2\\n1 1\\n2 1\") == \"-\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\n\"\"\""
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"-1\"\n\"\"\"\n\nimport sys\nimport collections\n\nfrom collections import deque"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"4 2\\n1 3\\n1 4\") == \"12\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"-1\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"-1\"\nassert solution(\"2 1\\n2 1\") == \"2\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"1\"\nassert solution(\"2 2\\n1 2\\n2 1\\n1 2\") == \"1\"\nassert solution(\"2 2\\n1 2\\n2 1\\n1 2\\n1 2\") == \"1\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n\") == \"NO\"\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\\n\") == \"YES\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"NO\"\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\") == \"YES\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"NO\"\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 0 1 1 0\\n1 1 0 0 1\\n1 0 0 0 1\\n1 0 0 0 1\\n1 0 0 0 1\") == \"NO\"\nassert solution(\"4 3\\n0 0 0 0 1\\n1 1 0 1 1\\n1 0 1 1 1\\n1 0 1 1 1\\n1 0 1 1 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"NO\"\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"NO\"\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\") == \"YES\"\n\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 0\\n1 1\\n0 1\\n\") == \"YES\"\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\\n\") == \"NO\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"NO\"\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\") == \"YES\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0') == 'NO'\nassert solution('3 2\\n1 0\\n1 1\\n0 1') == 'YES'\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingBCCYHV-3EN/"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n\") == \"NO\"\n\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\\n\") == \"YES\"\n\n\n\n\n-----Big O-----\n\nTime complexity : O(n)\n\nSpace complexity : O(1)\n\n\"\"\""
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n2 3 5 12') == \"Yes\"\nassert solution('2 7\\n2 3') == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 3 5 12\") == \"Yes\"\nassert solution(\"2 7\\n2 3\") == \"No\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n2 3 5 12') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 7\\n2 3\") == \"No\"\nassert solution(\"4 5\\n2 3 5 12\") == \"Yes\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5 12\") == 'Yes'\nassert solution(\"2 3 5 12\") == 'Yes'\nassert solution(\"2 3 5 12\") == 'Yes'\n\nassert solution(\"2 3 5 12\") == 'Yes'\nassert solution(\"2 3 5 12\") == 'Yes'\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n2 3 5 12') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'\n\nprint('Success')"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 3 5 12\") == \"Yes\"\nassert solution(\"2 7\\n2 3\") == \"No\"\nprint('Success')"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 3 5 12') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n2 3 5 12') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nflag = True\nfor i in range(n):\n    if k % a[i]!= 0:\n        flag = False\n        break"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 5 12\") == \"Yes\"\nassert solution(\"2 3 5 6\") == \"No\""
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"4 2 1\") == \"4\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\nassert solution('3 4 1') == '6'\nassert solution('7 8 3') == '-1'\n\n---"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 1\") == 6\n\nassert solution(\"6 4 2\") == 8\n\nassert solution(\"2 3 4\") == -1"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 1\") == 6\nassert solution(\"6 4 2\") == 8\nassert solution(\"2 3 4\") == -1\nassert solution(\"1 1 1\") == -1\nassert solution(\"7 1 5\") == -1\n\n\"\"\""
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 1\") == 6\n\"\"\""
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4\\n0 3 0 4\") == \"0\"\nassert solution(\"4\\n0 3 0 4\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\""
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"3\\n4 1 1\") == \"2\"\nassert solution(\"4\\n0 3 0 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 1') == '2'\nassert solution('4 2 1') == '2'\nassert solution('2 1 4') == '3'\nassert solution('1 2 3') == '-1'\nassert solution('1 3 2') == '1'\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == '2'\nassert solution(\"3\\n4 1 1\") == '0'\nassert solution(\"4\\n0 3 0 4\") == '0'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 4 3\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 2 4 3\n''') == '2'\nassert solution('''\n3\n4 1 1\n''') == '0'\nassert solution('''\n4\n0 3 0 4\n''') == '-1'\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 2\\n') == '1'\nassert solution('4\\n1 1 1\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 2 4 3') == '2'\nassert solution('4\\n0 3 0 4') == '0'\nassert solution('3\\n4 1 1') == '2'"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == 2\n\n\"\"\"\nimport numpy as np\nfrom random import sample"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000011\") == \"5\"\nassert solution(\"01\") == \"2\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10000011') == 5\nassert solution('111001010') == 4\nassert solution('111001011') == 2\nassert solution('11100101111001011') == 4\nassert solution
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101110111010') == 5\nassert solution('10111010') == 3\nassert solution('1111101') == 4\nassert solution('10111010') == 3\nassert solution('11101011') == 4\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11101110\") == 6\n\"\"\""
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10000011') == '5'\nassert solution('01') == '2'"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"01\") == 2\nassert solution(\"10011\") == 4\nassert solution(\"10011011\") == 8\nassert solution(\"100110111\") == 4\nassert solution(\"1001110011\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10101010\") == \"4\"\nassert solution(\"11001100\") == \"1\"\nassert solution(\"11010011\") == \"2\"\nassert solution(\"11101010\") == \"2\"\nassert solution(\"10011010\") == \"3\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10000011') == 5\n\nassert solution('01') == 2\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11101101') == 4\nassert solution('0111010') == 2\nassert solution('11101110') == 4\n\"\"\""
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 1 4 3') == '1'\nassert solution('4\\n4 4 4 4') == '-1'\nassert solution('4\\n2 1 4 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 1 4\") == \"3\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"1\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ncrushes = sys.stdin.readline().split()\n\ncrushes = [int(x) - 1 for x in crushes]\ncrushes = {i: i for i in range(n)}\ncrushes.update(dict(zip(crushes.values(),crushes.keys())))\n\ncrushes = {v:k for k,v in crushes.items()}\n\nans = 0\n\nfor x in range(n):\n    for y in range(x+1,n):\n        if x not in crushes:\n            break\n        elif y not in crushes:\n            continue\n        elif x == y:\n            ans += 1\n\nprint(ans)"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"1\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"3\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"1\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"3\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 4 3\") == '1'\nassert solution(\"4\\n4 4 4 4\") == '-1'\n\"\"\""
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 4 4\") == '-1'\nassert solution(\"2 1 4 3\") == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 1 4\") == \"3\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"1\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 4 4\") == \"-1\"\nassert solution(\"2 1 4 3\") == \"1\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1\") == \"3\"\nassert solution(\"4 4 4 4\") == \"-1\"\nassert solution(\"4 2 1 4 3\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 0\") == \"2\"\nassert solution(\"7\\n1 3 3 2 1 2 3\") == \"0\"\nassert solution(\"2\\n2 2\") == \"1\""
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 2 0') == 2\nassert solution('1 3 2 1 2 3') == 0\nassert solution('1 3 3 2 1 2 3') == 1\n\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 2') == '0'\nassert solution('3 3') == '0'\nassert solution('1 3') == '2'\nassert solution('1 3 2') == '2'\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2 0') == 2\nassert solution('1 2 3 0') == 2\nassert solution('2 2') == 1\nassert solution('3 3') == 0\nassert solution('1 3 3 2 1 2 3') == 0\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 3 2 0\n''') == '2'\nassert solution('''7\n1 3 3 2 1 2 3\n''') == '0'\nassert solution('''2\n2 2\n''') == '1'"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == 2\n\nassert solution('7') == 0\n\nassert solution('2') == 1\n\n\"\"\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2 1') == '2'\nassert solution('7 3 2 1 2 3') == '0'\nassert solution('2 2') == '1'"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"1 3 3 2 1 2 3\") == 0\nassert solution(\"1 1\") == 1\nassert solution(\"0\") == 1\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == str(result)\n\n\"\"\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2 0\") == \"2\"\nassert solution(\"7\\n1 3 3 2 1 2 3\") == \"0\"\nassert solution(\"2\\n2 2\") == \"1\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(9) == \"504\"\nassert solution(7) == \"210\"\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n\"\"\"\n\nimport sys\nimport math\nimport unittest"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\nassert solution(\"11\") == \"14280\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"504\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(9) == 504\nassert solution(7) == 210\n\"\"\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\n') == '504'\nassert solution('7\\n') == '210'\n\"\"\""
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '504'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == '12'\nassert solution('9') == '216'\nassert solution('10') == '252'\nassert solution('18') == '342'\nassert solution('22') == '468'\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"504\"\nassert solution(\"3\") == \"6\"\nassert solution(\"7\") == \"210\"\n\"\"\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\\n\") == \"3 4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == \"3 4\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == '1 1'\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == '1 1'\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 0 1 1\\n1 1 2 2\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == \"3 4\"\n\"\"\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\") == '1 1'\nassert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n4 0 4 1\") == '1 1'\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == '1 1'\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == '3 4'\n\n\"\"\""
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\\n\") == \"3 4\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == \"3 4\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == \"3 4\""
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n') == '1 1'\nassert solution('4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\\n') == '1 1'\nassert solution('5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\\n') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\\n\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\\n\") == \"3 4\"\n\"\"\""
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\""
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n18 55 16 17') == \"YES\"\nassert solution('6\\n40 41 43 44 44 44') == \"NO\"\nassert solution('8\\n5 972 3 4 1 4 970 971') == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n18 55 16 17') == 'YES'\nassert solution('6\\n40 41 43 44 44 44') == 'NO'\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'YES'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n\nprint('Success')"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n18 55 16 17''') == \"YES\"\nassert solution('''6\n40 41 43 44 44 44''') == \"NO\"\nassert solution('''8\n5 972 3 4 1 4 970 971''') == \"YES\"\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\u00a0\u2014\u00a0X, Y, Z.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 X \u0434\u043e Z \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 X < Y < Z, \u0438\u043b\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\nSample Input:\n\n2\n3\n4\n\nSample Output:\n\n2 3 4\n\n\"\"\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 16 17\") == \"YES\"\nassert solution(\"6 40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8 5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == '9'\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == '10'\nprint(\"Well done!\")\n\n\"\"\"\n\n\"\"\"\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == \"9\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\"\n\"\"\"\n\nn, m = map(int, input().split())\ny = [int(y) for y in input().split()]\ny += [int(y) for y in input().split()]\n\ncount = 0\nfor i in range(n):\n    if y[i] % 2 == 1:\n        count += 1\n    for j in range(i+1, m):\n        if y[j] % 2 == 1:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == \"9\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5\") == \"9\"\nassert solution(\"7 9\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5\") == \"10\"\nassert solution(\"7 9\\n1 2 3 4 5 6 7 8\\n1 2 3 4 6 7\") == \"8\"\nassert solution(\"7 9\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5\") == \"10\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == \"9\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 9\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\"\nprint(\"PASS\")\n\"\"\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == '9'\n\"\"\"\n\nfrom collections import Counter\n\nn, m = map(int, input().split())\n\ny_1 = list(map(int, input().split()))\ny_2 = list(map(int, input().split()))"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''\n5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == \"9\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n\"\"\""
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"8\") == \"Petya\"\nassert solution(\"9\") == \"Vasya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 'Vasya'\nassert solution('1') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n\"\"\"\nimport sys"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == \"Petya\"\nassert solution(1) == \"Vasya\"\nassert solution(8) == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n\"\"\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"Petya\"\n\"\"\""
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n\n\"\"\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 3\\n1 2\\n2 2\\n2 1') == '0'\nassert solution('1 5 3\\n1 3\\n1 1\\n1 5\\n') == '2'\n\n\"\"\"\n\n\"\"\"\nThe first line contains three integers n, m, q (1 \u2264 n, m \u2264 200 000; 0 \u2264 q \u2264 min(n\u00b7m, 200 000)), the chemical table dimensions and the number of elements scientists already have.\nThe following q lines contain two integers r_{i}, c_{i} (1 \u2264 r_{i} \u2264 n, 1 \u2264 c_{i} \u2264 m), each describes an element that scientists already have. All elements in the input are different.\n\n\"\"\"\nn, m, q = list(map(int, input().split()))"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == '1'\nassert solution(\"1 2\\n2 2\\n2 1\\n1 1\") == '0'\nassert solution(\"2 2 3\\n1 2\\n2 2\\n2 1\") == '1'\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '0'\nassert solution('1 2\\n2 2') == '1'\nassert solution('1 5\\n2 2\\n2 1') == '2'\n\nassert solution('1 3\\n1 1') == '2'\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 3 2') == '1'\nassert solution('1 2 2 1') == '1'\nassert solution('1 1 1 1') == '0'\nassert solution('3 3 3 3') == '1'\nassert solution('3 3 3 2') == '2'\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\\n1 2\\n2 2\\n2 1\") == \"0\"\nassert solution(\"1 5 3\\n1 3\\n1 1\\n1 5\") == \"1\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\nassert solution(\"4 3 4\\n4 3\\n2 2\\n2 3\\n2 3\") == \"0\"\n\nsolution(\"4 4 4\\n4 4\\n4 4\\n4 4\")\n    1\n    1\n    1\n    1\n    2\n    2\n    2\n    2\n    3\n    3\n    3\n    3\n    4\n    4\n    4\n    4\n    4\n    4\n    4\n    4\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    "
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 3\\n1 2\\n2 2\\n2 1\\n1 3\\n3 3\") == '1'\nassert solution(\"4 5 3\\n1 2\\n1 2\\n2 2\\n2 1\\n3 1\\n3 3\") == '2'\nassert solution(\"4 5 3\\n1 2\\n1 2\\n2 2\\n2 1\\n3 1\\n3 3\") == '2'\nassert solution(\"4 5 3\\n1 2\\n1 2\\n2 2\\n2 1\\n3 1\\n3 3\") == '2'\nassert solution(\"4 5 3\\n1 2\\n1 2\\n2 2\\n2 1\\n3 1\\n3 3\") == '2'\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\\n1 2\\n2 2\\n2 1\") == \"0\"\nassert solution(\"1 5 3\\n1 3\\n1 1\\n1 5\") == \"1\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\""
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n2 1\\n2 2\\n2 3\") == \"2\"\nassert solution(\"1 2\\n1 2\\n1 2\\n1 2\") == \"0\"\nassert solution(\"4 4 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\nassert solution(\"4 4 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\nassert solution(\"4 4 6\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\\nB\\nB\\nA\") == 2\n\"\"\"\n\nfrom typing import List\n\nfrom collections import Counter\nfrom sys import stdin\n\n\nclass Solution:\n\n    def solve(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4A1B2A3\") == 2\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4ABAB\") == 2\n\"\"\"\n\nn = int(stdin.readline().strip())\ns = \"\"\nss = \"\"\n\nfor i in range(n):\n    ss += stdin.readline().strip()\n\nfor i in range(1, n):\n    for j in range(1, n):\n        if (\n            ss[i] == \"A\" and ss[j] == \"A\"\n            or ss[i] == \"B\" and ss[j] == \"B\"\n        ):\n            continue\n\n        s += \"AB\"\n        break\n\nprint(s.count(\"AB\"))\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4A2B1A\") == \"2\"\nassert solution(\"5B4A1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABBB\") == 2\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nfirst_letters = {\n    \"A\": \"AB\",\n    \"B\": \"BA\"\n}\n\nnum_strings = {\n    \"A\": 0,\n    \"B\": 0\n}\n\nfor _ in range(n):\n    prev, curr = sys.stdin.readline().strip(), sys.stdin.readline().strip()\n    \n    if prev in first_letters and curr in first_letters:\n        if prev == \"A\":\n            num_strings[curr] += 1\n        else:\n            num_strings[curr] += 1\n    else:\n        if prev == \"A\" or prev == \"B\":\n            num_strings[prev] += 1\n        else:\n            num_strings[curr] += 1\n\ntotal_strings = 1\n\nfor key, value in num_strings.items():\n    if key == \"A\":\n        total_strings *= value + 1\n    else:\n        total_strings *= value + 1\n\nprint(total_strings % (10**9+7))"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AB\") == \"AB\"\nassert solution(\"BA\") == \"BA\"\nassert solution(\"AA\") == \"ABABA\"\nassert solution(\"BB\") == \"ABBB\"\nassert solution(\"ABB\") == \"ABBB\"\n\"\"\""
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nA\\nB\\nB\\nA\\n\") == 2\n\"\"\"\n\nN = int(input())\n\naa, ab, ba, bb = input().strip(), input().strip(), input().strip(), input().strip()\n\na_count, b_count = 0, 0\n\nfor i in range(N):\n    if aa[i] == \"A\" and ab[i] == \"A\" and ba[i] == \"A\" and bb[i] == \"A\":\n        a_count += 1\n    elif aa[i] == \"B\" and ab[i] == \"B\" and ba[i] == \"B\" and bb[i] == \"B\":\n        b_count += 1\n\nprint((a_count * b_count) % (10 ** 9 + 7))\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4A2B\") == 2\n\"\"\"\n\n\n\"\"\"\nGiven an integer N and four characters c_{\\mathrm{AA}}, c_{\\mathrm{AB}}, c_{\\mathrm{BA}}, and c_{\\mathrm{BB}}. Here, it is guaranteed that each of those four characters is A or B. Snuke has a string s, which is initially AB. Let |s| denote the length of s. Snuke can do the four kinds of operations below zero or more times in any order: Choose i such that 1 \\leq i < |s|, s_{i} = A, s_{i+1} = A and insert c_{\\mathrm{AA}} between the i-th and (i+1)-th characters of s. Choose i such that 1 \\leq i < |s|, s_{i} = A, s_{i+1} = B and insert c_{\\mathrm{AB}} between the i-th and (i+1)-th characters of s. Choose i such that 1 \\leq i < |s|, s_{i} = B, s_{i+1} = A and insert c_{\\mathrm{BA}} between the i-th and (i+1)-th characters of s. Choose i such that 1 \\leq i < |s|, s_{i} = B, s_{i+1} = B and insert c_{\\mathrm{BB}} between the i-th and (i+1)-th characters of s. Find the number, modulo (10^9+7), of strings that can be s when Snuke has done the operations so that the length of s becomes N.\n-----Constraints-----\n - 2 \\leq N \\leq 1000\n - Each of c_{\\mathrm{AA}}, c_{\\mathrm{AB}}, c_{\\mathrm{BA}}, and c_{\\mathrm{BB}} is A or B.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nc_{\\mathrm{AA}}\nc_{\\mathrm{AB}}\nc_{\\mathrm{BA}}\nc_{\\mathrm{BB}}\n\n-----Output-----\nPrint the number, modulo (10^9+7), of strings that can be s when Snuke has done the operations so that the length of s becomes N.\n\n-----Sample Input-----\n4\nA\nB\nB\nA\n\n-----Sample Output-----\n2\n\n - There are two strings that can be s when Snuke is done: ABAB and ABBB.\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('B') == 'B'\nassert solution('AB') == 'AB'\nassert solution('BA') == 'BA'\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3 4') == '2'\n\nassert solution('5\\n2 3 4 6 7') == '3'\n\n\"\"\""
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 4 6 7\") == \"3\"\nassert solution(\"2 3 4\") == \"2\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\""
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 3 4 6 7') == '3'\nassert solution('5\\n2 3 4 6 7') == '3'\nassert solution('5\\n2 3 4 6 7') == '3'\n\n\"\"\""
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\n\"\"\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\"\n\"\"\""
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\""
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 4\") == 2\nassert solution(\"5\\n2 3 4 6 7\") == 3\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\n\"\"\""
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABAAC\") == 11\n\"\"\"\n\nfrom itertools import combinations\nfrom collections import Counter\n\nn = int(input())\nS = list(input())\nS = Counter(S)\n\ncount = 0\nfor k in S:\n    for comb in combinations(S, 2):\n        if comb[0] == comb[1] and comb[0]!= k:\n            count += 1\nprint((count + 1) % (10 ** 9 + 7))\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(ABAAC) == 11\nprint(solution(ABAAC))\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABAAC\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABAAC\") == 11\nassert solution(\"CABAA\") == 27\nassert solution(\"AABCA\") == 27\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def solution(self, stdin):\n        string = stdin\n        mod = 10**9 + 7\n        \n        res = 0\n        for i in range(len(string)):\n            if string[i]!= string[i+1]:\n                res += 1\n        \n        return res % mod\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AABAABC\") == 8\n\"\"\""
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AAAA') == 'A'\nassert solution('AAABC') == 'A'\nassert solution('ABCAA') == 'ABACA'\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AB') == 'A'\nassert solution('ABC') == 'A'\nassert solution('AC') == 'A'\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABAAC\") == 11\n\"\"\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABAABC\") == 14\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABAAC\") == 11\n\"\"\""
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2\\n1 0\\n1 2\\n1 1\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"-1\"\n\n\n\"\"\"\nimport math"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1\\n0 1\\n2 3\\n\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\\n\") == \"-1\"\n\n\n\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n1 0\\n1 2\\n1 1\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"0\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\") == 3\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"sample/1.in\").read()) == \"3\"\nprint(solution(open(\"input.txt\").read()))\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\") == '3'\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == '-1'\n\n\"\"\""
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 2\\n1 1\\n0 1\\n2 3') == '3'\n\"\"\"\nimport math\nfrom typing import List"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(0) == 0\nassert solution(1) == -1\nassert solution(2) == -1\nassert solution(3) == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n\") == \"2\"\nassert solution(\"2 4\\n\") == \"1\"\nassert solution(\"3 3\\n\") == \"0\"\nassert solution(\"4 6\\n\") == \"3\"\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n') == '2'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\n\nimport numpy as np\n\nfrom utils import get_ints_from_stdin\n\nfrom numpy.random import randint\nfrom numpy.random import permutation\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n4 5') == '2'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4 5') == '2'\nassert solution('3\\n4 5') == '1'\nassert solution('4\\n4 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"2\"\n\"\"\"\n\nimport math\n\nMAX_CARD = 10 ** 7\nMIN_CARD = 1\nMAX_DIFF = MAX_CARD - MIN_CARD\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4 5\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == '2'\nassert solution('2 5') == '2'\nassert solution('3 5') == '3'\nassert solution('2 1 2') == '4'\n\"\"\""
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n4 5') == '2'\nassert solution('3\\n1 2 3') == '0'\nassert solution('4\\n9 8 7 6') == '4'\nassert solution('10\\n8 7 6 5 4 3 2 1') == '8'\n\"\"\"\n\n\"\"\"\nBrute force method:\n    for each prime p >= 3:\n        find all x in the range (1, N) such that gcd(x, p) == 1\n        keep track of the number of consecutive integers that are coprime to p\n        if there are no such integers, return the current number of operations\n        else, update the number of operations\n    return the number of operations\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\nprint(\"Successfully passed all tests\")\n\n\"\"\""
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\nassert solution(\"2 1 2 1\") == \"NO\"\nassert solution(\"4 3 3 2\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter\n\na, b, c, d = map(int, input().split())"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\n\"\"\"\n\n\nclass Solution:\n    def solution(self, numbers: str) -> str:\n        if not numbers:\n            return \"NO\"\n\n        numbers = list(map(int, numbers.split(\" \")))\n        if not len(numbers) == 4:\n            return \"NO\"\n\n        # print(numbers)\n        diff = [numbers[i + 1] - numbers[i] for i in range(len(numbers) - 1)]\n        diff = list(filter(lambda x: x == 1, diff))\n        if not diff:\n            return \"NO\"\n\n        return \"YES\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 2 1') == 'YES'\nassert solution('2 2 3 1') == 'NO'\nassert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 1') == 'YES'\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2 3\") == 'YES\\n0 1 2 3 4'\nassert solution(\"1 2 2 1\") == 'YES\\n0 1 1 2 3'\nassert solution(\"1 2 3 4\") == 'NO'\nassert solution(\"2 2 2 1\") == 'NO'\n\n\"\"\"\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(\n            solution(\"2 2 2 1\"),\n            \"NO\"\n        )\n        self."
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 4\n1 3 2 4\n1 3 4 2''') == 'YES'\n\nassert solution('''4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3''') == 'NO'\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 4\n1 3 2 4\n1 3 4 2\n''') == 'YES'\nassert solution('''\n3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5\n''') == 'YES'\nassert solution('''\n4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n''') == 'NO'\nassert solution('''\n3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5\n''') == 'YES'\nassert solution('''\n2 2\n1 2\n1 2\n''') == 'YES'\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n''') == 'YES'\nassert solution('''2 4\n1 3 2 4\n1 3 4 2\n''') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2 4\n1 3 2 4\n1 3 4 2\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\"\"\") == \"YES\"\nassert solution(\"\"\"3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5\n\"\"\") == \"YES\"\nassert solution(\"\"\"3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5\n\"\"\") == \"NO\"\nassert solution(\"\"\"3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n\") == \"YES\"\nassert solution(\"6 6\\n1 2 3 4 5 6\\n2 3 4 1 5 6\\n3 4 1 2 5 6\\n4 1 2 3 5 6\\n5 1 2 3 4 6\\n6 1 2 3 4 5\") == \"YES\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n1 3 2 4') == 'YES'\nassert solution('4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'NO'\nassert solution('3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n2 3 4 1 5 6') == 'YES'\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\") == \"NO\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n2 3 4 1 5 6\\n3 4 1 2 5 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\"\n\"\"\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1\n''') == '0'\nassert solution('''\n1 2 1\n''') == '666666672'\n\"\"\"\nimport math\nimport itertools\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(1) +'' + str(1) +'' + str(1)) == '0'\n\nassert solution(str(1) +'' + str(2) +'' + str(1)) == '666666672'\n\nassert solution(str(1) +'' + str(1) +'' + str(2)) == '0'\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"666666672\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"\nfrom itertools import product\nfrom collections import defaultdict\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n\"\"\"\nfrom collections import Counter\nfrom math import factorial"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\\n\") == \"0\"\nassert solution(\"1 2 1\\n\") == \"666666672\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nfrom. import utility\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 1\\n') == '666666672'\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == '0'\nassert solution(\"1 2 1\") == '666666672'\n\"\"\"\n\nf, w, h = map(int, input().split())\n\nresult = 0\nfor i in range(f):\n    result = result * pow(2, f - 1, (10 ** 9) + 7) * (f - i) % (10 ** 9 + 7)\n    result = result * pow(2, w - 1, (10 ** 9) + 7) * (w - i) % (10 ** 9 + 7)\n    result = result * pow(2, h - 1, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n    result = result * pow(2, f + w - 2, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n    result = result * pow(2, f + w - 1, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n    result = result * pow(2, f + w, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n    result = result * pow(2, f + w + h - 2, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n    result = result * pow(2, f + w + h - 1, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n    result = result * pow(2, f + w + h, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n    result = result * pow(2, f + w + h + 1, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n    result = result * pow(2, f + w + h + 2, (10 ** 9) + 7) * (h - i) % (10 ** 9 + 7)\n\nprint(result)\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\"\n\"\"\"\n\nf, w, h = map(int, input().split())\nf_1, f_2 = 0, 0\nw_1, w_2 = 0, 0\nfor i in range(f):\n    f_1 += 1\nfor j in range(w):\n    w_1 += 1\nfor k in range(h):\n    f_2 += 1\n    w_2 += 1\nprint((f_1 * f_2 + w_1 * w_2) % (10 ** 9 + 7))"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 2 3 1') == '2'\n\"\"\""
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n7 2 3 1 5 6\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 2 3\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 3 1 5 6\") == \"5\"\n\nassert solution(\"3 3 1\") == \"0\"\n\nassert solution(\"7 6 7 7 7 7 7 7 7 7\") == \"7\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2 5 1 2') == '2'\nassert solution('1 1 2 2') == '1'\nassert solution('1 2 3 4 5') == '0'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n 1 2 3 4\") == \"2\"\nassert solution(\"4\\n 1 3 3 4\") == \"4\"\nassert solution(\"3\\n 1 3 4\") == \"2\"\n\"\"\"\n\nfrom tools import timing"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == '5'\n\"\"\""
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 3 1 5 6\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n7 2 3 1 5 6\") == \"5\"\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u0435\u0442\u0441\u044f \u0444\u0430\u0439\u043b \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 TSV \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0440\u043e\u0441\u0442\u0435 \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0438 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u043e\u0441\u0442 \u0443\u0447\u0430\u0449\u0435\u0433\u043e\u0441\u044f.\n\n\u0424\u0430\u0439\u043b \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0442\u0440\u0438 \u043f\u043e\u043b\u044f:\n\u041a\u043b\u0430\u0441\u0441 \u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0420\u043e\u0441\u0442\n\n\u041a\u043b\u0430\u0441\u0441 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u043e\u043c. \u0411\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f. \u041d\u043e\u043c\u0435\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0442 1 \u0434\u043e 11 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e. \u0412 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u043d\u0435\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432, \u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u043e\u0441\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u043e \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0440\u043e\u0441\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 (\u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e \u043e\u0434\u0438\u043d\u043d\u0430\u0434\u0446\u0430\u0442\u044b\u0439). \u0415\u0441\u043b\u0438 \u043f\u0440\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043a\u043b\u0430\u0441\u0441 \u043d\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u043f\u0440\u043e\u0442\u0438\u0432 \u043d\u0435\u0433\u043e \u043f\u0440\u043e\u0447\u0435\u0440\u043a, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n\nSample Input:\n\n6    \u0412\u044f\u0445\u0445\u0438    159\n11    \u0424\u0435\u0434\u043e\u0442\u043e\u0432    172\n7    \u0411\u043e\u043d\u0434\u0430\u0440\u0435\u0432    158\n6    \u0427\u0430\u0439\u043a\u0438\u043d\u0430    153\n\nSample Output:\n\n1 -\n2 -\n3 -\n4 -\n5 -\n6 156.0\n7 158.0\n8 -\n9 -\n10 -\n11 172.0\n\n\n-----\n\"\"\"\n\nimport math\n\n\nclass Student:\n    def __init__(self, class_number, name, height):\n        self.class_number = class_number\n        self.name = name\n        self.height = height\n\n\nstudents_list = []\nwith open(\"dataset_3380_5.txt\", \"r\") as file:\n    for line in file:\n        line = line.split(\"\\t\")\n        student = Student(int(line[0]), line[1], int(line[2]))\n        students_list.append(student)\n\nstudents_dict = {}\nfor student in students_list:\n    if student.class_number not in students_dict:\n        students_dict[student.class_number] = [student]\n    else:\n        students_dict[student.class_number].append(student)\n\nfor key in students_dict:\n    students_dict[key].sort(key=lambda x: x.height)\n\nfor i in range(1, 12):\n    if i in students_dict:\n        students_dict[i].sort(key=lambda x: x.height)\n        print(i, \" - \", sep=\"\", end=\"\")\n        for j in range(len(students_dict[i])):\n            print(\"\\t\", students_dict[i][j].height, end=\"\")\n        print()\n    else:\n        print(i, \" - \", sep=\"\", end=\"\")\n        print(\"\\t\", \" - \", sep=\"\", end=\"\")\n        print()\n\nprint(\"----------------------------------------\")\n\nfor key in students_dict:\n    sum_height = 0\n    n = 0\n    for i in range(len(students_dict[key])):\n        sum_height += students_dict[key][i].height\n        n += 1\n    average = sum_height / n\n    print(key, \" \", round(average, 2), sep=\"\", end=\"\")\n\nprint(\"----------------------------------------\")\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"4\\n2 4 4 1\") == \"1\"\nassert solution(\"4\\n4 2 5 1\") == \"3\"\n\n-----\n4\n2 3 1 5 6\n\n5\n4 2 5 1\n\n3\n1 2 3\n\n3\n3 3 3\n\n5\n7 2 3 1 5 6\n\n6\n\n-----\n5\n7 2 3 1 5 6\n\n6\n\n-----\n6\n7 2 3 1 5 6\n\n5\n\n-----\n7\n7 2 3 1 5 6\n\n6\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1 8') == 2\n\n\"\"\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1 8') == 2\nassert solution('4 2 2 6') == 3\nassert solution('3 7 4 6') == 1\n\nprint(solution(stdin))\n\n\n\n'''"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\nassert solution('5 10 15 10') == '1'\n\n\"\"\"\nimport sys\nfrom collections import Counter\n\n\"\"\"\nFind minimum number of letters in s\n\ns = \"abcdefghijklmnopqrstuvwxyz\"\nl = 6\nr = 10\n\noutput: 2\n\"\"\""
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1 8') == 2\nassert solution('4 2 2 6') == 3\nassert solution('3 7 4 6') == 1\n\n\"\"\"\nfrom collections import Counter\nfrom copy import copy\n\na, b, l, r = [int(i) for i in stdin.split(' ')]\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 8\") == 2\nassert solution(\"4 2 2 6\") == 3\nassert solution(\"3 7 4 6\") == 1\n\"\"\"\n\na, b, l, r = (int(i) for i in input().split())\n\ns = []\nfor i in range(a):\n    s += chr(ord('a') + i)\nfor i in range(b):\n    s += chr(ord('a') + i)\ns = sorted(list(set(s)))\n\nprint(len(s[s.index(chr(ord('a') + l - 1)):s.index(chr(ord('a') + r))]))\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 8') == 2\nassert solution('4 2 2 6') == 3\nassert solution('3 7 4 6') == 1\nassert solution('8 4 7 6') == 2\nassert solution('5 4 4 5') == 0\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n\n\n\ns = input()\na, b, l, r = s.split()\na, b, l, r = int(a), int(b), int(l), int(r)\nstring = 'a' * l + 'b' * b + 'a' * (r - b - l)\nprint(len(set(string)))\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\nassert solution(\"1 1 1 8\") == \"2\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\nprint(\"Passed\")\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n\n\"\"\""
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"0 -1 5\") == \"-1\"\nassert solution(\"-1 4 15\") == \"4\"\n\n\"\"\"\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 15\") == \"2\"\nassert solution(\"0 -1 5\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 5\\n\") == \"2\"\nassert solution(\"-1 4 15\\n\") == \"4\"\nassert solution(\"0 -1 5\\n\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-\"\nassert solution(\"0 0 5\") == \"-\"\n\"\"\""
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"0 -1 5\") == \"4\"\nassert solution(\"-1 4 15\") == \"-1\"\nassert solution(\"0 0 5\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"0 -1 5\") == \"4\"\nassert solution(\"0 -1 15\") == \"-1\"\n\"\"\"\n\nfrom collections import namedtuple\n\nx, y, m = [int(x) for x in input().split()]"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-\""
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n\"\"\"\nimport math"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('0 -1 5') == '-1'\nassert solution('-1 4 15') == '4'\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == \"2\"\nassert solution(\"6 2\\n2 1 2 3 4 3\") == \"0\"\nassert solution(\"6 1\\n1 1 2 2 3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == \"2\"\nassert solution(\"6 2\\n2 1 2 3 4 3\") == \"0\"\nassert solution(\"6 1\\n1 1 2 2 3 3\") == \"2\"\n\"\"\"\nimport math\n\nn, I = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\nmin_changes = 2 * n\nsorted_a = sorted(a)\nl = 0\nr = n\n\nfor i in range(n):\n    if sorted_a[i]!= a[i]:\n        l = min(l, sorted_a[i])\n        r = max(r, sorted_a[i])\n\nk = int(math.ceil(math.log(r - l + 1, 2)))\n\nprint(k)\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == 2\nassert solution('6 2\\n2 1 2 3 4 3') == 0\nassert solution('6 1\\n1 1 2 2 3 3') == 2\nassert solution('6 2\\n1 1 2 2 3 3') == 0\n\n\nimport sys\n\n_, I = map(int, sys.stdin.readline().split())\narray = list(map(int, sys.stdin.readline().split()))\n\ncount = 0\n\nfor i in range(len(array)):\n    for j in range(i+1, len(array)):\n        if abs(array[i] - array[j]) > I:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"0\"\nassert solution(\"6 2\") == \"0\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"6 2\") == \"0\"\nassert solution(\"6 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == '2'\nassert solution(\"6 2\\n2 1 2 3 4 3\") == '0'\nassert solution(\"6 1\\n1 1 2 2 3 3\") == '2'\n\"\"\"\n\nn, I = map(int, input().split())\na = list(map(int, input().split()))\n\ndic = {a[0]: a[0]}\nfor i in range(1, n):\n    if a[i] in dic:\n        dic[a[i]] = max(dic[a[i]], a[i])\n    else:\n        dic[a[i]] = a[i]\n\nx = n\nfor k in dic.keys():\n    if dic[k] + 1 < k:\n        x = min(x, n - k + dic[k] + 1)\n    if dic[k] - 1 > k:\n        x = min(x, k - dic[k] + 1)\nprint(x)\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == 2\nassert solution(\"6 2\\n2 1 2 3 4 3\") == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == \"2\"\nassert solution(\"6 2\\n2 1 2 3 4 3\") == \"0\"\nassert solution(\"6 1\\n1 1 2 2 3 3\") == \"2\"\nassert solution(\"6 2\\n1 1 2 2 3 3\") == \"0\"\n\n\n-----Test data\n-----\n\n-----Challenge-----\n\nCan you use further compression?"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == 2\nassert solution(\"6 2\\n2 1 2 3 4 3\") == 0\nassert solution(\"6 1\\n1 1 2 2 3 3\") == 2\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2 3 4 3\") == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 2 2 3 3\") == '2'\nassert solution(\"2 1 2 3 4 3\") == '0'\nassert solution(\"1 1 2 2 3 3\") == '2'\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sunday\") == \"YES\"\nassert solution(\"tuesday\") == \"NO\"\n\"\"\"\n\ns1 = input().strip()\ns2 = input().strip()\n\nprint(\"YES\" if s1 == \"monday\" and s2 == \"tuesday\" else \"NO\")\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\nassert solution(\"thursday\") == \"NO\"\nassert solution(\"friday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"monday\\ntuesday\"\n) == \"NO\"\n\nassert solution(\n    \"sunday\\nsunday\"\n) == \"YES\"\n\nassert solution(\n    \"saturday\\ntuesday\"\n) == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sunday', 'tuesday') == 'YES'\nassert solution('saturday','sunday') == 'YES'\nassert solution('saturday', 'tuesday') == 'YES'\nassert solution('monday', 'tuesday') == 'NO'\nassert solution('monday','monday') == 'NO'\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"sunday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\nassert solution(\"thursday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('monday') == 'NO'\nassert solution('tuesday') == 'YES'\nassert solution('wednesday') == 'NO'\nassert solution('thursday') == 'YES'\nassert solution('friday') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"monday\") == \"YES\"\nassert solution(\"tuesday\") == \"NO\"\n\nassert solution(\"sunday\") == \"YES\"\nassert solution(\"saturday\") == \"YES\"\nassert solution(\"friday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"sunday\") == \"YES\"\nassert solution(\"tuesday\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('monday') == 'NO'\nassert solution('tuesday') == 'YES'\nassert solution('wednesday') == 'NO'\n\"\"\""
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123') == '6'\nassert solution('0') == '0'\n\nassert solution('10000000000') == '91'\n\"\"\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\""
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '0'\nassert solution('12') == '3'\nassert solution('100') == '8'\nassert solution('1000') == '9'\nassert solution('10000000') == '98'\n\"\"\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n\"\"\"\nimport collections"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\"\n\"\"\""
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"35\") == \"17\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(A) == \"YES\"\nassert solution(X) == \"NO\"\nassert solution(Z) == \"NO\"\nassert solution(O) == \"YES\"\nassert solution(AA) == \"YES\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('XO') == 'NO'\nassert solution('ABCDEFGHI') == 'YES'\nassert solution('YZ') == 'YES'\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\nprint(\"All tests passed.\")\n\n'''\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('XO') == 'NO'\nassert solution('AHA') == 'YES'\n\"\"\""
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nassert solution('AB') == 'YES'\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n\"\"\"\n\nimport sys\nsys.path.append('../../')\n\nfrom utils.utils import random_string, random_float"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Z') == 'NO'\nassert solution('AHA') == 'YES'\n\nprint(solution(input()))"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 5') == 0\nassert solution('3\\n1 2 5') == 1\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 5') == '0'\nassert solution('3\\n1 2 5') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 5\") == \"0\"\nassert solution(\"3\\n1 2 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 5') == 0\nassert solution('3\\n1 2 5') == 1\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 5') == '0'\nassert solution('3\\n1 2 5') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 5\") == \"0\"\nassert solution(\"3\\n1 2 5\") == \"1\"\n\"\"\"\n\nn = int(input())\nstdin = input()\n\nstdin = list(map(int, stdin.split(\" \")))\nstdin.sort()\n\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if stdin[j] >= stdin[i]:\n            break\n        if stdin[j] < stdin[i]:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 5\") == \"0\"\nassert solution(\"3\\n1 2 5\") == \"1\""
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5\") == \"0\"\nassert solution(\"3\\n1 2 5\") == \"1\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom typing import Dict, List, Optional\n\nsys.stdin = open('input.txt')\n\nk = int(sys.stdin.readline())\nnums = [int(sys.stdin.readline()) for _ in range(k)]\n\nnums.sort()\n\ni = 0\nj = len(nums) - 1\n\nwhile i < j:\n    if nums[j] - nums[i] < 0:\n        i += 1\n    else:\n        j -= 1\n\nprint(j + 1)\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 5\") == '0'\n\nassert solution(\"3\\n1 2 5\") == '1'\n\nassert solution(\"4\\n1 2 5 6\") == '3'\n\nassert solution(\"5\\n1 2 3 4 5\") == '2'\n\nassert solution(\"6\\n1 2 5 6 7 9 10\") == '4'"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RDRLRRUDRU\") == 'Yes'\nassert solution(\"UUURDRRUUDRRDRRRUUUDRDRLRRUDRRDLLDRDRR\") == 'Yes'\nassert solution(\"DRRUUDRUDRRDRRUDUUUDDRRUDRRDRD\") == 'No'\n\"\"\""
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RDRLLU') == 'Yes'\nassert solution
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"RD\") == \"No\"\nassert solution(\"LRDUULR\") == \"Yes\"\nassert solution(\"LULLLLLLU\") == \"Yes\"\nassert solution(\"LRDUULR\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"RD\") == \"No\"\nassert solution(\"DRURUURD\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"RLR\") == \"Yes\"\nassert solution(\"RRLRUU\") == \"Yes\"\nassert solution(\"RRLRUUDRD\") == \"No\"\nassert solution(\"RRRRRRRRUUUDRD\") == \"Yes\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRUUDD\") == \"Yes\"\nassert solution(\"LL\") == \"No\"\nassert solution(\"UD\") == \"Yes\"\nassert solution(\"RUULRL\") == \"Yes\"\n\na, b = map(int, stdin.split())\ns = stdin\nprint([\"No\", \"Yes\"][s.count(\"R\") % 2 == 0 and s.count(\"U\") % 2 == 0 and s.count(\"D\") % 2 == 0 and s.count(\"L\") % 2 == 0])"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RU') == 'Yes'\nassert solution
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(RU) == \"Yes\"\nassert solution(LRRLU) == \"Yes\"\nassert solution(D) == \"Yes\"\nassert solution(0, 0, D) == \"Yes\"\nassert solution(0, 0, \"D\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"RD\") == \"No\"\nassert solution(\"RDUDDD\") == \"Yes\"\nassert solution(\"RUUUDRDDDUUUUDDDDDDDUUUUDUDDUUUDDUUDDDRRRDDRRRDDRRUDRRUDRRUDRRDDRRRRDRRUDRUDRDUUUDDUDDRDRRDRDRRUDDDRRRDRRDRUDRUUUUUUUDRDDRRRDRRDDRDDRRDDDRRUDRUDDDRDDRRRRDRRRRRRRUDRUUUUDDRRDRRRRDDRDDRRDRRUDRRDDRDDRRRDRRDDRRUDDDUUDDRUDRRDRUDRRRDDRDRDRDDRDRDRDRDRDRDDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"RD\") == \"Yes\"\nassert solution(\"RD\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('3141592653589793238462643383279502884197169399375105820974944592') == '1'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3 7\") == 1\nassert solution(\"10   3   7\") == 1\nassert solution(\"314159265358\") == 0\nassert solution(\"22 19 3\") == 1\nassert solution(\"\") == 0\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3 7\") == '1'\nassert solution(\"10   3   7\") == '1'\nassert solution(\"314\") == '0'\nassert solution(\"159 265\") == '0'\nassert solution(\"22 19 3\") == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('159 265') == '1'\nassert solution('358') == '0'\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159265 358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"   60  \") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159265358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n\n-----Problem-----\nGood as Goldbach\nYou and your friend have decided to play a game that consists of three rounds. The first of the game is the contestants\u2019 task: They have to enter an even positive number less than or equal to $10^9$. The numbers that are divisible by $3$ (and not by $2$) will be considered as prime numbers. After that, the contestants will enter two positive prime numbers that sum to the number entered previously.\n\nTo help you determine the number entered, you have been given the following formulas:\n\n$x$ is divisible by $3$ if $x$ is divisible by $3,2,6,9,10,12,...$\n$x$ is divisible by $2$ if $x$ is not divisible by $3$\n$x$ is not divisible by $2$ if $x$ is not divisible by $3,2,6,9,10,12,...$\n$x$ is not divisible by $3$ if $x$ is not divisible by $2$\nGiven the number $x$ and the two prime numbers $a$ and $b$, determine whether $x$ can be expressed as the sum of two primes.\n\n-----Solution-----\nimport sys"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159265358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3 7\") == 1\nassert solution(\"10   3   7\") == 1\nassert solution(\"314\") == 0\nassert solution(\"159 265\") == 1\nassert solution(\"358\") == 0\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159265358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"22  19  3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159265 358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\""
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"9\"\nprint(solution(\"1\"))\n\n\"\"\"\nfrom typing import List\nimport math\nfrom decimal import Decimal\n\n\nclass Solution:\n    def solution(self, n: str) -> str:\n        s: int = int(n)\n        f: List[int] = [0] * 10\n        f[0] = 1\n        for i in range(1, s + 1):\n            for j in range(10):\n                f[j] = f[j] + f[j - 1]\n        res = 0\n        for i in range(9, -1, -1):\n            while f[i] <= s:\n                f[i] *= 10\n            res += f[i] // (10 ** i)\n        return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '9'\nassert solution('3') == '0'\nassert solution('7') == '8'\n\nprint('Success')"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"1\"\n\"\"\"\n\n\"\"\"\nSample Input\n10\nSample Output\n1\n\"\"\""
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"6\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '9'\n\"\"\"\nimport sys"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '9'\n\n----"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"9\"\nprint(solution(\"1\"))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '6'\nassert solution('3') == '6'\nassert solution('4') == '10'\nassert solution('5') == '10'\n\"\"\""
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '9'\n\"\"\""
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\\n3 6 28 9\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\\n5 12 9\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\\n\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\\n5 12 9\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 28 9\") == \"4\"\nassert solution(\"5 12 9 16 48\") == \"3\"\nassert solution(\"4 6 28 9\") == \"4\"\nassert solution(\"1 2 4 8\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"1\"\n\"\"\"\n\n\"\"\"\nInput\n4\n3 6 28 9\n\nOutput\n4\n\nInput\n5\n5 12 9 16 48\n\nOutput\n3\n\nInput\n4\n1 2 4 8\n\nOutput\n-1\n\"\"\"\n\nn = int(input())\n\nnums = list(map(int, input().split(' ')))"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 6 28 9') == '4'\nassert solution('5\\n5 12 9 16 48') == '3'\nassert solution('4\\n1 2 4 8') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 6 28 9\") == 4\nassert solution(\"5\\n5 12 9 16 48\") == 3\nassert solution(\"4\\n1 2 4 8\") == -1\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 12 9 16 48\\n') == '3'\nassert solution('1 2 4 8\\n') == '-1'\nassert solution('5 12 9 16 48\\n') == '3'\nassert solution('4 2 4 8\\n') == '-1'\nassert solution('1 2 4 8\\n') == '-1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == 2\nassert solution(\"7\\n1 0 0 5 0 0 2\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == 2\nassert solution(\"7\\n1 0 0 5 0 0 2\") == 1\n\"\"\"\n\nimport sys\nimport math\nimport queue\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 0 0 5 0 0 2') == '1'\nassert solution('6\\n0 1 0 5 0 0 2') == '2'\nassert solution('5\\n0 5 0 2 3') == '2'\nassert solution('5\\n0 5 2 3 0') == '1'\nassert solution('5\\n0 5 0 2 3') == '0'\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n0 5 0 2 3') == '2'\nassert solution('7\\n1 0 0 5 0 0 2') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5\\n0 5 0 2 3'\n) == '2'\n\nassert solution(\n    '7\\n1 0 0 5 0 0 2'\n) == '1'\n\nassert solution(\n    '7\\n0 5 0 0 2 3'\n) == '0'\n\nassert solution(\n    '7\\n0 0 5 0 0 2'\n) == '0'\n\nassert solution(\n    '7\\n0 0 0 5 0 0 2'\n) == '0'"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\") == \"1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\") == \"1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\") == \"1\"\nassert solution(\"5\\n0 5 1 0 2 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043a\u043b\u0435\u0442\u043a\u0430\n\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0430. \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u0438 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nSample Input 1:\n\n2 1 2 1 3 2 1 2 3\nSample Output 1:\n\n2 2 2 3\nSample Input 2:\n\n1 2 3\nSample Output 2:\n\n1 1 1\n\nimport collections"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n0 5 0 2 3') == '2'\nassert solution('7\\n1 0 0 5 0 0 2') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\") == \"1\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '5'\nassert solution('6') == '5'\nassert solution('7') == '4'\nassert solution('8') == '3'\n\"\"\""
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 2\n\"\"\""
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == 2\n\"\"\"\nimport math\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"5\") == 5\nassert solution(\"1\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(4) == 2\nassert solution(5) == 5\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 2\n\"\"\""
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 2\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_cases[0]) == 2\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 2\\n1 3 4 5 2\\n5 3 2 1 4') == '18\\n3 4\\n1 5'\n\"\"\"\n\nn, p, s = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nprint(sum([a[i] for i in range(n) if i % 2 == 0]) + sum([b[i] for i in range(n) if i % 2 == 1]))\nprint(\" \".join([str(i) for i in range(1, n + 1) if i % 2 == 0]))\nprint(\" \".join([str(i) for i in range(1, n + 1) if i % 2 == 1]))\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\"\nassert solution(\"4 2 2\\n10 8 8 3\\n10 7 9 4\") == \"31\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\\n3 4\\n1 5\\n\"\nassert solution(\"5 3 1\\n5 2 5 1 7\\n6 3 1 6 3\") == \"23\\n1 3 5\\n4\\n\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 2 2\\n\"\n    \"1 3 4 5 2\\n\"\n    \"5 3 2 1 4\\n\"\n) == \"18\\n3 4\\n1 5\\n\", \"Simple\"\n\nassert solution(\n    \"4 2 2\\n\"\n    \"10 8 8 3\\n\"\n    \"10 7 9 4\\n\"\n) == \"31\\n1 2\\n3 4\\n\", \"Small input\"\n\nassert solution(\n    \"5 3 1\\n\"\n    \"5 2 5 1 7\\n\"\n    \"6 3 1 6 3\\n\"\n) == \"23\\n1 3 5\\n4\\n\", \"Large input\"\n\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\\n3 4\\n1 5\\n\"\n\"\"\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 2 2\n1 3 4 5 2\n5 3 2 1 4\n\"\"\") == \"18\"\n\nassert solution(\"\"\"5 3 1\n5 2 5 1 7\n6 3 1 6 3\n\"\"\") == \"23\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\\n\") == \"18\\n3 4\\n1 5\\n\"\nassert solution(\"4 2 2\\n10 8 8 3\\n10 7 9 4\\n\") == \"31\\n1 2\\n3 4\\n\"\nassert solution(\"5 3 1\\n5 2 5 1 7\\n6 3 1 6 3\\n\") == \"23\\n1 3 5\\n4\\n\"\n\nprint(\"Success!\")\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == '18\\n3 4\\n1 5\\n', 'incorrect'\nprint('test passed')\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\\n3 4\\n1 5\"\nassert solution(\"4 2 2\\n10 8 8 3\\n10 7 9 4\") == \"31\\n1 2\\n3 4\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbbccc\") == \"abbbccc\"\nassert solution(\"abbbcccaa\") == \"abbbccc\"\nassert solution(\"abbbcccb\") == \"No\"\nassert solution(\"abbbcccbb\") == \"No\"\n\nassert solution(\"aabbcccb\") == \"aabbcccb\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 3\") == \"Yes\\naa\"\nassert solution(\"1 2\\n1 4\") == \"Yes\\naa\"\nassert solution(\"1 2\\n3 4\") == \"No\"\nassert solution(\"1 2\\n4 3\") == \"No\"\nassert solution(\"2 2\\n1 2\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'No'\nassert solution('1 2\\n1 3') == 'Yes\\naa'\nassert solution('1 2\\n1 3\\n1 4') == 'Yes\\naaa'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n\n'''\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'aa'\nassert solution('1 2\\n3 4') == 'ab'\nassert solution('1 2\\n3 4\\n5 6') == 'ac'\nassert solution('1 2\\n3 4\\n5 6\\n7 8') == 'bb'\nassert solution('1 2\\n3 4\\n5 6\\n7 8\\n9 10') == 'bc'\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aa\") == \"aa\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"ba\") == \"ab\"\nassert solution(\"bb\") == \"bb\"\nassert solution(\"bc\") == \"bb\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n2 3\") == \"Yes\\nab\"\nassert solution(\"2 1\\n1 3\") == \"No\"\nassert solution(\"3 1\\n1 3\\n1 4\") == \"Yes\\nac\"\nassert solution(\"4 1\\n1 3\\n1 4\\n2 4\") == \"Yes\\nac\"\nassert solution(\"3 2\\n1 3\\n1 4\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\naa\\nbb\\ncc') == 'aa'\nassert solution('4 3\\n1 2\\n1 3\\n1 4') == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\") == \"No\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"Yes\"\nassert solution(\"4 3\\n1 2\\n1 4\\n1 3\") == \"Yes\"\nassert solution(\"4 3\\n1 2\\n3 4\\n1 2\") == \"Yes\"\nassert solution(\"4 3\\n1 2\\n2 4\\n3 4\") == \"No\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3') == '7'\nassert solution('0 2 2\\n1 0 100\\n1 2 0\\n3') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '0 1 1\\n1 0 1\\n1 1 0\\n3'\n) == '7'\n\nassert solution(\n    '0 2 2\\n1 0 100\\n1 2 0\\n3'\n) == '19'\n\n\"\"\"\n\nimport copy"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\\n\") == \"7\"\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == \"7\"\n\"\"\""
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3\\n') == '7'\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == '7'\nassert solution(\"0 2 2\\n1 0 100\\n1 2 0\\n3\") == '19'\nassert solution(\"0 2 1\\n1 0 100\\n1 2 0\\n5\") == '87'\n\"\"\""
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3') == '7'\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3') == '7'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == \"7\"\nassert solution(\"0 2 2\\n1 0 100\\n1 2 0\\n3\") == \"19\"\nassert solution(\"0 2 1\\n1 0 100\\n1 2 0\\n5\") == \"87\"\n\"\"\""
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('F') == 0\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\nassert solution(\"bulbasaur\") == 1\nassert solution(\"F\") == 0"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Bulbasaur\") == 1\nassert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n\"\"\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aB') == 0\nassert solution('aBB') == 0\nassert solution('aBb') == 0\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Bulbasaur') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\n\nassert solution('F') == 0\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('F') == 0\nassert solution('FfF') == 0\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('F') == 0\nassert solution('Fff') == 0\nassert solution('FffF') == 0\nassert solution('Ffff') == 0\nassert solution('Fffff') == 1\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Bulbasaur\") == 1\nassert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"arc\") == \"YES\"\nassert solution(\"rac\") == \"YES\"\nassert solution(\"ssac\") == \"NO\"\nassert solution(\"ssaa\") == \"YES\"\nassert solution(\"sa\") == \"NO\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\narc\\rac') == 'YES'\nassert solution('2 3\\nabs\\abz') == 'NO'\n\"\"\"\nfrom __future__ import annotations\n\nimport sys\n\nfrom typing import List, Tuple"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nar\\rac\") == \"YES\"\n\"\"\"\n\nh, w = list(map(int, input().split()))\nrows = input().split()\n\nsymmetric_grid = True"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\nar\\rac') == 'YES'\nassert solution('2 3\\narc\\rac') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\na\\rc\") == \"YES\"\nassert solution(\"2 3\\nr\\ac\") == \"NO\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n12\\n1 3\") == \"YES\"\nassert solution(\"3 3\\nar\\narc\\nrac\") == \"YES\"\nassert solution(\"3 3\\nab\\nac\\nbc\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    [\n        '2 3',\n        'arc',\n        'rac'\n    ]\n) == 'YES'\n\nassert solution(\n    [\n        '5 5',\n        'cba',\n        'cbc',\n        'dde',\n        'def',\n        'efg',\n        'hij',\n        'hik',\n        'ijk',\n        'lmn',\n        'lmo',\n        'nop',\n        'qrs',\n        'qrv',\n        'uvw',\n        'vwx',\n        'wzy',\n        'xzz',\n        'yyz',\n        'zzz',\n    ]\n) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\na\\rc') == 'YES'\n\"\"\"\n\nfrom sys import stdin\nimport unittest\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\narc\\rac\") == \"YES\"\nassert solution(\"4 4\\nabcb\\naacb\") == \"YES\"\nassert solution(\"4 4\\nabcb\\ncbaa\") == \"NO\"\nassert solution(\"5 5\\nabcb\\nbaac\\nacba\\nbcab\\ncaab\") == \"YES\"\nassert solution(\"5 5\\nabcb\\nbaac\\nacba\\nbcab\\ncaab\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"arc\") == \"YES\"\nassert solution(\"rac\") == \"YES\"\nassert solution(\"dab\") == \"NO\"\nassert solution(\"ccd\") == \"YES\"\nassert solution(\"dd\") == \"NO\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 111') == 4\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1111 1111 1111 1111 1111 1111 1111 1111 1111 1111\") == '20'\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 111\\n1111\\n10111\\n10010\") == \"4\"\n\n\"\"\"\n\nfrom tools import timing\n@timing\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 111\\n1111\\n10111\\n10010') == '4'\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 111111') == '6'\nassert solution('5 10001010') == '5'\nassert solution('6 10111010') == '5'\nassert solution('7 10111010') == '7'\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 111\\n1111\\n10111\\n10010\") == \"4\"\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 111\\n1111\\n10111\\n10010\") == \"4\"\n\"\"\"\nfrom typing import Callable, List, Any, Dict, Set, Tuple, TypeVar\nfrom collections import deque\nfrom sys import stdin\nfrom functools import reduce\nfrom operator import xor\n\n\nclass Tree:\n    def __init__(self, data: Any):\n        self.left: Tree = None\n        self.right: Tree = None\n        self.data = data\n        self.count: int = 1\n\n    def __repr__(self):\n        return f\"Tree({self.data})\"\n\n    def __str__(self):\n        return f\"Tree({self.data})\"\n\n    def __add__(self, other: 'Tree'):\n        return self.count + other.count\n\n    def add_to_count(self) -> None:\n        self.count += 1\n\n    def add_to_count_recursively(self) -> None:\n        self.count += 1\n        if self.left is not None:\n            self.left.add_to_count_recursively()\n        if self.right is not None:\n            self.right.add_to_count_recursively()\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 111\n1111\n10111\n10010''') == '4'"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 111\\n1111\\n10111\\n10010\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == '5'\nassert solution('4 5') == '2'\nassert solution('1 1') == '1'\n\"\"\""
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == -1\nassert solution('1 2 0') == 1\nassert solution('1 1 1') == 1\nassert solution('10 10 5') == 1\nassert solution('0 0 0') == 1\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(11 2 3) == -1\nassert solution(11 11 5) == 1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '-1'\nassert solution('2 2 2') == '-1'\nassert solution('1 1 2') == '2'\nassert solution('1 1 2') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 11 5') == 1\nassert solution('11 2 3') == -1\nassert solution('11 10 4') == 0\nassert solution('10 10 5') == 0\nassert solution('4 1 2') == 0\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 5') == 1\nassert solution('2 3') == -1\n\"\"\"\n\nk, a, b = map(int, input().split())\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 5') == '-1'\nassert solution('1 5 1') == '2'\nassert solution('11 5 3') == '1'\nassert solution('1 1 1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n\"\"\"\n\nk, a, b = map(int, input().split())\nres = 0\nwhile True:\n    if a < k and b < k:\n        if (a + b) % 2 == 0 and (a + b) >= 2 * k:\n            a = a - k\n            b = b - k\n            res += 1\n        else:\n            break\n    else:\n        break\nprint(res)\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == -1"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 2 3\") == \"1\"\nassert solution(\"11 1 3\") == \"2\"\nassert solution(\"11 1 2\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"1 1 1\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"abacaba\"\n) == \"YES\"\nassert solution(\n    \"jinotega\"\n) == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'abacaba'\n) == 'YES'\nassert solution(\n    'jinotega'\n) == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 2 6\"\n) == \"6.5\"\nassert solution(\n\"4 2 20\"\n) == \"20.0\"\n\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\nassert solution(\"7 3 5\") == \"9.0\"\n\nprint('The solution is correct!')\n\n'''\n\nimport math\nk, d, t = [int(i) for i in input().split()]\nprint(math.ceil((k * t) / (d + 1)))\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\n\"\"\"\nfrom typing import List\nimport math"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 20\") == 20\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\n\"\"\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n\"\"\"\nfrom math import *\n\nk, d, t = map(int, stdin.split())\nprint(2 * t / (d - k))\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\nassert solution('3 2 6') == '6.5'\n\"\"\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n\"\"\"\nfrom typing import List, Tuple, Dict\nfrom math import ceil, log10\nfrom fractions import Fraction\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"6 5\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n..\\n..') == '2'\nassert solution('4 4\\n....\\n#.#.\\n....\\n.#..') == '1'\nassert solution('3 4\\n....\\n.##\\n....\\n') == '2'\n\n------'''"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n.##\\n....\\n#..\\n\") == \"2\"\nassert solution(\"2 2\\n..\\n..\\n\") == \"1\"\n\nassert solution(\"3 4\\n.##\\n....\\n#..\\n\") == \"2\"\nassert solution(\"4 4\\n.##\\n....\\n#..\\n\") == \"1\"\n\nassert solution(\"3 4\\n...\\n#.#\\n....\\n#..\\n\") == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n..\\n..\\n\") == \"2\"\nassert solution(\"4 4\\n....\\n#.#.\\n....\\n.#..\\n\") == \"1\"\nassert solution(\"3 4\\n....\\n.##\\n....\\n\") == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n..\\n..\") == 2\nassert solution(\"4 4\\n....\\n#.#.\\n....\\n.#..\") == 1\nassert solution(\"3 4\\n....\\n.##\\n....\") == 2\n\"\"\"\nimport re\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".##....#..#..#.#..#.####...#\") == \"2\"\nassert solution(\".####..#.....#....#..#..##.###...#...#.##..##.\") == \"2\"\nassert solution(\".#..##.####...#.####..#.#####.#####.###.#.##.#..##.####.##.#..#..##\") == \"6\"\nassert solution(\".#..##.####...#.####..#.#####.#####.###.#.##.#..##.####.##.#..#..##\") == \"7\"\n\n-----Problem-----\n\nSample Input:\n3 4\n.#..\n..#.\n.#..\n\nSample Output:\n1\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"2\"\nassert solution(\"4 4\\n....\\n#.#.\\n....\\n.#..\") == \"1\"\nassert solution(\"3 4\\n....\\n.##\\n....\\n\") == \"2\"\nassert solution(\"1 1\\n.\\n\") == \"0\"\nassert solution(\"3 4\\n#.#\\n....\\n.#.\\n\") == \"2\"\n\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"2\"\nassert solution(\"4 4\\n....\\n#.#.\\n....\\n.#..\") == \"1\"\nassert solution(\"3 4\\n....\\n.##.\\n....\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n..\\n..\\n') == '2'\nassert solution('4 4\\n....\\n#.#.\\n....\\n.#..\\n') == '1'\nassert solution('3 4\\n....\\n.##\\n....\\n') == '2'\nassert solution('4 4\\n....\\n#.#.\\n....\\n.#..\\n') == '1'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\") == \"6\"\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1\\n\") == \"6\"\nassert solution(\"3\\n1 1 3\\n\") == \"6\"\nassert solution(\"3\\n1 2 3\\n\") == \"6\"\nassert solution(\"3\\n2 1 3\\n\") == \"6\"\nassert solution(\"3\\n3 1 3\\n\") == \"0\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 3\") == 6\nassert solution(\"5\\n1 2 3 4 5\") == 20\nassert solution(\"7\\n1 2 3 4 5 6 7\") == 70\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == 350\n"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 3\") == 6\n"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 2 2\\n\") == \"6\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n1 1 3') == '6'\nassert solution('2\\n1 1 3') == '2'\nassert solution('3\\n1 1 3') == '3'\nassert solution('4\\n1 1 3') == '1'\n"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 3\") == 6\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nd = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 3\\n1 1 3') == '6'\nassert solution('4 1 6\\n1 1 3') == '0'\nassert solution('4 1 6\\n1 1 1') == '0'\nassert solution('4 4 2\\n1 1 2') == '6'\nassert solution('4 4 2\\n1 2 2') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4 3 7 5\") == \"11\"\nassert solution(\"5 4 3 7 1\") == \"11\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 3 7 5\") == \"11\\n3\"\n\"\"\"\n\nn = int(stdin.readline().strip())\na = [int(x) for x in stdin.readline().split()]\n\nops = 0\n\nwhile len(a) > 1:\n    ops += 1\n    # if len(a) == 2:\n    #     a[0] = a[0] + a[1]\n    #     a = [a[0]]\n    #     continue\n    # else:\n    a[0] = a[0] + max(a[1], a[-1])\n    a.pop(1)\n    a.pop()\n\nprint(a[0])\nprint(ops)\nfor i in range(1, ops + 1):\n    if ops % i == 0:\n        print(i)\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\\n1\\n4\\n2\"\nassert solution(\"4\\n1 4 3 7 5\") == \"11\\n1\\n1\\n4\\n2\"\nassert solution(\"1\\n1\") == \"1\\n0\"\n\"\"\"\n\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3\\n1\\n4\\n2'\n\"\"\""
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3'\n\"\"\""
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\\n1\\n4\\n2\"\nassert solution(\"3\\n2\\n3\\n4\\n5\") == \"9\\n3\\n2\\n4\\n3\"\nassert solution(\"10\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n1\\n2\") == \"15\\n6\\n7\\n5\\n6\\n7\\n6\\n5\"\n\n\"\"\"\n\n\"\"\"\nThought process\n\nAt each step, we have a number 'x' that we can choose to keep, or delete, or replace.\nIf we choose to keep 'x', then we take the next step, and we have one less number to choose from.\nIf we choose to delete 'x', we take the next step, and we have one more number to choose from.\nIf we choose to replace 'x', then we have multiple ways to go. We could replace 'x' with the sum of the next two numbers.\nSo we have one more number to choose from, or we could just delete the next two numbers.\n\nWe have the following cases:\n- x is at the beginning\n- x is in the middle\n- x is at the end\n\n\"\"\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\"\n\"\"\""
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\n\nfrom math import ceil"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 100\") == \"9.2\"\nassert solution(\"1 10\") == \"1.1\"\nassert solution(\"6 1\") == \"10.25\"\n\n\"\"\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 100\\n9.2') == '9.2'\nassert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\n\"\"\"\n\nn, t = map(int, input().split())\ngrade = float(input())\n\nn_digits = len(str(grade).split('.')[-1])\n\ndecimal_places = n + n_digits - 1"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\n\nprint(solution(\"3 100\\n9.2\"))\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\nassert solution('3 100\\n9.2') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10.245 1\") == \"10.25\"\nassert solution(\"10.245 2\") == \"10.3\"\nassert solution(\"10.245 3\") == \"10.245\"\nassert solution(\"10.245 4\") == \"10.25\"\nassert solution(\"10.245 5\") == \"10.245\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\nassert solution('6 3\\n9.2') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1\\n10.45\") == \"10.45\"\nassert solution(\"7 2\\n10.45\") == \"10.5\"\nassert solution(\"7 100\\n10.45\") == \"10.45\"\n\nimport functools"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1.5\n2.0\n2.5\n3.0\n3.5\n5.0\n''') == '3.5\nassert solution('''1.5\n1.5\n1.5\n1.5\n1.5\n1.5\n''') == '1.5\nassert solution('''10.25\n10.25\n10.25\n10.25\n10.25\n10.25\n''') == '10.25'\nassert solution('''0.25\n0.25\n0.25\n0.25\n0.25\n0.25\n''') == '0.25'\nassert solution('''100.0\n100.0\n100.0\n100.0\n100.0\n100.0\n''') == '100.0'\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n10.245\") == \"10.25\"\nassert solution(\"3 100\\n9.2\") == \"9.2\"\n\"\"\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\n\nassert solution(\"1 2 2 1\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"2 1 2 2\") == \"0111\"\nassert solution(\"0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\n\"\"\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"0 0 0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"1 2 1 4\") == \"0110\"\nassert solution(\"4 2 3 4\") == \"0110\"\n\"\"\"\n\na_00, a_01, a_10, a_11 = [int(s) for s in stdin.split(' ')]"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(input())\nprint(solution(str(input())))\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n*..P*P*\") == \"3\"\nassert solution(\"10\\n.**PP.*P.*\") == \"2\"\nassert solution(\"10\\n.P*P**.*\") == \"4\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n.*\\nP*\") == \"1\"\nassert solution(\"4\\n.*\\n*P*\\n.*\") == \"1\"\nassert solution(\"10\\n.**PP.*P.*\") == \"2\"\nassert solution(\"10\\n.***P*P.*\") == \"5\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n*..P*P*\") == \"3\"\nassert solution(\"10\\n.**PP.*P.*\") == \"2\"\nassert solution(\"5\\nP***P.*\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"..P*P*P*\") == \"3\"\nassert solution(\"..**P**P*\") == \"2\"\nassert solution(\"*..P*P*\") == \"4\"\nassert solution(\"**P**P*\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n*..P*P*\") == \"3\"\nassert solution(\"10\\n.**PP.*P.*\") == \"2\"\n\n-----Notes-----\n\nYou can use the following assumptions about the game field:\n\nn is an integer within the range [2..100,000];\neach of the n rows of the game field is a string of n characters, each of them being either \".\" or \"P\";\nthere is at least one Packman;\nthere is at least one asterisk;\nthe game field is rectangular, and each row is the same length.\n\"\"\""
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n\"\n    \"..P.\\n\"\n) == \"4\"\nassert solution(\n    \"5\\n\"\n    \".P..P.\\n\"\n) == \"2\"\nassert solution(\n    \"7\\n\"\n    \"..P.P.\\n\"\n) == \"3\"\nassert solution(\n    \"10\\n\"\n    \".PPPPPPP.\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.**PP.*P.*') == 2\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n.*..P.*P.*') == '3'\nassert solution('10\\n.**PP.*P.*') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n.*.*P*\\n\") == \"3\"\nassert solution(\"10\\n.**PP.*P.*\\n\") == \"2\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\n.*..P*P*\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n''') == '2'\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"8\"\nassert solution(\"4\") == \"16\"\nassert solution(\"6\") == \"26\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\"\n\"\"\""
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\nprint(\"Success\")\n\n\n\"\"\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 4\nassert solution(\"2\") == 8\nassert solution(\"3\") == 16\nassert solution(\"4\") == 0\n\"\"\""
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"16\"\nassert solution(\"2\") == \"8\"\nassert solution(\"1\") == \"4\"\nassert solution(\"0\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '8'\nassert solution('3') == '16'\nassert solution('4') == '32'\nassert solution('5') == '64'\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"2\\n\"\n) == \"8\""
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == 8\nassert solution(3) == 16\nassert solution(4) == 25"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\n\"\"\"\nimport collections\n\nn, m, x, y, a, b = map(int, input().split())\n\nd = collections.defaultdict(list)\nfor i in range(n):\n    for j in range(m):\n        if i - x / a < 0 or j - y / b < 0:\n            continue\n        d[i - x / a].append(j - y / b)\n\nans = float('inf'), float('inf'), float('inf'), float('inf')\nfor i in range(n):\n    for j in range(m):\n        if i - x / a < 0 or j - y / b < 0:\n            continue\n        if d[i - x / a] == [j - y / b]:\n            ans = min(ans, [i - x / a, j - y / b, i, j])"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\nprint(solution(\"9 9 5 5 2 1\"))\n\n\"\"\"\nimport re"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 7 3 3 4 6\") == \"7 1 3 5 7\"\nassert solution(\"12 4 1 12 12\") == \"12 4 11 11\"\nassert solution(\"12 11 5 11 11\") == \"12 11 4 11\"\nassert solution(\"12 11 3 11 11\") == \"12 11 2 11\"\nassert solution(\"6 5 1 5 11\") == \"6 1 4 5\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 7 1 1 2') == '1 3 7 7'\n\"\"\"\n\nimport math\n\nn, m, x, y, a, b = list(map(int, input().split()))\n\nans = None\n\nleft = -1\nright = n\n\nwhile left < right:\n    mid = (left + right) // 2\n    \n    if math.gcd(m, mid) == 1:\n        if m * (mid - x + 1) / (mid - y + 1) == a / b:\n            ans = mid\n            left = mid\n        else:\n            right = mid\n    else:\n        left = mid + 1\n\nleft = -1\nright = m\n\nwhile left < right:\n    mid = (left + right) // 2\n    \n    if math.gcd(n, mid) == 1:\n        if n * (y + mid) / (mid - x + 1) == a / b:\n            ans = mid\n            right = mid\n        else:\n            left = mid + 1\n    else:\n        right = mid\n\nprint(ans, x, y, x + ans - 1, y + ans - 1)\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('12345') == '1234'\nassert solution('abc') == 'abc'\nassert solution('123456789') == '12345'"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\n\"\"\""
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\nassert solution(\"100 100 52 50 46 56\") == \"17 8 86 92\"\n\"\"\"\n\nfrom collections import deque, namedtuple"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\n\"\"\""
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 5 7') == '3 1 4 5'\nassert solution('7 7 7 7 1 1') == '1 1 7 7'\n\"\"\"\nimport sys\nfrom typing import Tuple\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTFTTFFF\") == \"No\"\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('F') == 'F'\nassert solution('FTFTF') == 'Yes'\nassert solution('FFFTFT') == 'No'\n\"\"\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"F T F F T F T F T F T F\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"TTFFTFFF\") == \"No\"\nassert solution(\"FFF\") == \"Yes\"\nassert solution(\"FTTFFFTF\") == \"No\"\nassert solution(\"F\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FFF\") == \"Yes\"\nassert solution(\"FF\") == \"No\"\n\n-----Explanation-----\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTA\") == \"Yes\"\nassert solution(\"FTFFFTFFF\") == \"No\"\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FFFTFFFT\") == \"No\"\n\"\"\"\n\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"FFFF\") == \"Yes\"\nassert solution(\"FFFTFTF\") == \"Yes\"\nassert solution(\"FFTFTFF\") == \"No\"\nassert solution(\"FFTTFFF\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '5'\n\nprint(solution('3'))"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 3\nassert solution(\"3\") == 5\n\"\"\"\n\nfrom typing import List\n\nfrom utils import read_input_numbers\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\""
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"10\""
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 3\nassert solution(\"3\") == 5\nassert solution(\"4\") == 6\n\nassert solution(\"4\") == 6\n\n\"\"\"\nimport math"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '6'\n\nassert solution('7') == '12'\n\nassert solution('9') == '18'\n\nassert solution('10') == '27'\n\nassert solution('11') == '45'"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n3') == '1.3333333333'"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\""
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3\\n3') == '1.3333333333'\n\"\"\""
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n3') == '1.3333333333'\nassert solution('3\\n1 2 3\\n4') == '1.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n\") == \"1.3333333333\"\nassert solution(\"3\\n1 3 2\\n3\\n\") == \"0.83333333333\"\nassert solution(\"4\\n1 3 2 4\\n4\\n\") == \"0.75\"\n\"\"\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3\n3\n''') == '1.3333333333'\nassert solution('''\n3\n1 2 3\n3\n''') == '1.3333333333'\nassert solution('''\n4\n1 1 1 1\n5\n''') == '1.25'\nassert solution('''\n3\n1 2 3\n3\n''') == '1.3333333333'\nassert solution('''\n1\n1\n3\n''') == '0.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 2\\n9 7 11 15 5') == '13 7'\nassert solution('2 100000 569\\n605 986') == '986 605'\n\n------END------\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 2') == '0 2'\nassert solution('5 2 2') == '0 5'\nassert solution('5 1 2') == '2 0'\n\"\"\"\n\nn, k, x = [int(i) for i in input().split(' ')]\nstr = [int(i) for i in input().split(' ')]\n\nmax_s, min_s = 0, 0\nfor i in range(n):\n    if i % 2 == 0:\n        str[i] ^= x\n        if str[i] > max_s:\n            max_s = str[i]\n    else:\n        if str[i] < min_s:\n            min_s = str[i]\n\nprint(min_s, max_s)\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 1 2\\n9 7 11 15 5\"\n) == \"13 7\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 5\\n3 1 5\") == \"3 1 4\"\nassert solution(\"5 1 2\\n9 7 11 15 5\") == \"13 7\"\n\n\"\"\""
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2\\n9 7 11 15 5\\n') == '13 7'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 6\\n9 7 11 15 5\") == \"13 7\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2\\n9 7 11 15 5') == '13 7'\nassert solution('2 100000 569\\n605 986') == '986 605'\n\"\"\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2\\n9 7 11 15 5') == '13 7'\nassert solution('2 100000 569\\n605 986') == '986 605'\n\"\"\"\n\nn, k, x = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\n\nnums = sorted(a)\n\nmax_strength = 0\nmin_strength = 999999999999\n\nfor i in range(len(nums)):\n    if i % 2 == 0:\n        nums[i] = nums[i] ^ x\n        max_strength = max(max_strength, nums[i])\n        min_strength = min(min_strength, nums[i])\n    else:\n        nums[i] = nums[i] ^ x\n        max_strength = max(max_strength, nums[i])\n        min_strength = min(min_strength, nums[i])\n\nprint(max_strength, min_strength)\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 65\\n9 11 15\") == \"11 11 11\"\nassert solution(\"7 1 1\") == \"1 1 1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 7 11 15 5') == '13'\nprint('Test pass.')"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 4 4\\n2 5 4 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"3\"\n\n'''\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"5 5 1 2 3\") == \"3\"\nassert solution(\"3 4 1 1 3\") == \"3\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"-1\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"3\"\n\"\"\"\n\na, b, h, w, n = map(int, input().split())\n\na_n = []\nfor i in range(n):\n    a_n.append(int(input()))\n\nres = 0"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 1 2 3\") == \"3\"\nassert solution(\"3 3 1 1 3\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"-1\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"5 5 1 2 3\") == \"3\"\nassert solution(\"3 4 1 1 3\") == \"3\"\nassert solution(\"5 5 1 2 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('B2 G2 G1 R1') == '0'\nassert solution('G4 G4 G4 B2 B2 Y1') == '2'\nassert solution('B2 G2 G1 R1') == '0'\nassert solution('W3 G2 G1 W1 R1 G1 B1 R1 B1 G1 B1') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"G3 G3\") == 0\nassert solution(\"R4 R3 B3\") == 2\nassert solution(\"G4 R4 R3 B3\") == 4\nassert solution(\"B1 Y1 W1 G1 R1\") == 4\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4R4G3B3') == 2\nassert solution('W1G1R1') == 4\n\"\"\""
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"G3 G3\") == \"0\"\nassert solution(\"R4 R3 B3\") == \"2\"\nassert solution(\"B1 Y1 W1 G1 R1\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4G4G4R4G3G3G3G3\") == \"4\"\nassert solution(\"5Y1Y1W1W1Y1W1G1W1R1R1R1Y1R1W1G1\") == \"5\"\n\n---\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\nG3 G3\") == '0'\nassert solution(\"4\\nG4 R4 R3 B3\") == '2'\nassert solution(\"5\\nB1 Y1 W1 G1 R1\") == '4'\nassert solution(\"6\\nG2 G4 G3 G2 G1 G5 R1 G3 R3 R1 R2 Y2 W2 Y3 Y4 W4\") == '3'\nassert solution(\"7\\nR1 G1 Y1 R4 W1 R1 W2 Y3 G4 G5 G1 G3 Y2 G3 Y3 Y1 W2 Y1 Y3 Y2\") == '6'\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2\nG3 G3\n''') == '0'\nassert solution('''\n4\nR4 R3 B3\n''') == '2'\nassert solution('''\n5\nB1 Y1 W1 G1 R1\n''') == '4'\nassert solution('''\n5\nB1 R1 G1 B1\n''') == '0'\n\n-----Bigger data sets-----\nInput\n3\nY5 W3 Y5 W2\n\nOutput\n3\n\nInput\n9\nG1 R4 R2 G3 R3 R1 G2 R5 G4 R2\n\nOutput\n2\n\n\n-----Hint-----\n\nThe number of distinct colors in the game is always 5 (Y, G, B, R and W).\n\nThe number of distinct values in the game is always 5 (1, 2, 3, 4 and 5).\n\nThe number of distinct colors and values in Borya's cards is always 25.\n\nYou can use the hint twice in one turn.\n\nA person who gets a hint can choose to give a hint to another person only once in the same turn.\n\nIt is possible to give the same hint multiple times in a turn.\n\nThe problem is equivalent to finding a minimum number of hints that Borya should give to other players so that he can guess each card's color and value.\n\nWhat we want is to find a minimum number of color and value hints Borya needs to get the result.\n\nThere are 2^25 possible colors and values. So, we need to find the minimum number of color and value hints Borya needs to get the result.\n\nLet's denote the number of hints by k.\n\nWe have 2^k combinations of color and value hints.\n\nLet's denote the number of such combinations by k'.\n\nThen we have 2^(k') possible values of k'.\n\nIt is easy to see that if k' = k + 1 then we can possibly get a valid solution.\n\nSo, the problem is reduced to finding a minimum number of color and value hints Borya needs to get the result.\n\nLet's denote the number of hints by k and let's denote the number of valid combinations of color and value hints by k'.\n\nSo, the total number of valid combinations of color and value hints is 2^(k') = 2^k.\n\nThen, if we take a binary representation of k', we can iterate through all possible binary representations of k' and count the number of valid solutions.\n\nWe can use the following idea:\n\nlet's denote the number of valid solutions by f(k) (where k is a binary representation of k')\n\nthen\n\nf(k) = f(k') + f(k') - f(k') - f(k')\n\nwhere k' is obtained by flipping k' with respect to the rightmost digit\n\nSo, to find the minimum number of color and value hints we can perform binary search on the range [0, 2^k] and check if any k in the range gives a valid solution.\n\nIt is not hard to notice that there are only two possible values of k, and we can use binary search to find the solution.\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n\nassert Solution().solve('''\n2\nG3 G3\n''') == '0'\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 R3 R3 B3') == 2\n\"\"\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"G3 G3\") == 0\nassert solution(\"R4 R3 B3\") == 2\nassert solution(\"G4 R4 R3 B3\") == 2\nassert solution(\"B1 Y1 W1 G1 R1\") == 4\n\"\"\"\n\nfrom typing import Iterator\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('G3 G3') == '0'\nassert solution('R4 R3 B3') == '2'\nassert solution('B1 Y1 W1 G1 R1') == '4'"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 4 3\") == '2 6'\nassert solution(\"5 10 5 6 24\") == '3 11'\nassert solution(\"2 1 1\") == '1 1'\nassert solution(\"1 1\") == '1 1'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('../../input/p2_i_1.txt', 'r')"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3 4\") == '2 6'\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\n\nclass Solution:\n    \"\"\"\n    Compute the minimal number of bottles to store all remaining soda and the minimal time to pour all the remaining soda into it.\n    \"\"\"\n    def solution(self, a: str) -> Tuple[int, int]:\n        a = [int(x) for x in a.split(' ')]\n        b = a[1:]\n        total_soda = sum(a)\n        b.sort(reverse=True)\n        print(b)\n        print(total_soda)\n        print()\n        total_bottles = len(b)\n        if total_soda <= total_bottles:\n            return total_soda, 1\n\n        total_time = 0\n        count = Counter(b)\n        bottles_to_pour = Counter()\n        for bottle, cnt in count.items():\n            cnt = min(cnt, total_soda)\n            total_soda -= cnt\n            total_time += cnt * bottle\n            bottles_to_pour[bottle] = cnt\n\n        print(bottles_to_pour)\n        print(total_time)\n        print()\n\n        remaining_soda = total_soda\n        bottles_to_pour = sorted(bottles_to_pour, key=lambda x: bottles_to_pour[x])\n        for bottle in bottles_to_pour:\n            if remaining_soda <= 0:\n                break\n            cnt = min(bottles_to_pour[bottle], remaining_soda)\n            remaining_soda -= cnt\n            total_time += cnt * bottle\n\n        return total_soda, total_time\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abc'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 4 3\\n4 7 6 5\\n\") == \"2 6\"\n\nassert solution(\"5 10 30 5 6 24\\n10 41 7 8 24\\n\") == \"3 11\"\n\n\"\"\""
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n3 3 4 3\n4 7 6 5\n''') == '2 6'\nassert solution('''5\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\n\n\"\"\""
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 4 3') == '2 6'\nassert solution('5 10 5 6 24') == '3 11'"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 4 3\") == \"2 6\"\nassert solution(\"5 10 5 6 24\") == \"3 11\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 4 3\") == \"2 6\"\nassert solution(\"10 30 5 6 24\") == \"3 11\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 4 3\") == \"2 6\"\n\"\"\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 4 3\") == '2 6'\nassert solution(\"4 7 6 5\") == '2 6'\nassert solution(\"5 10 6 24\") == '3 11'\nassert solution(\"10 41 7 8 24\") == '3 11'\nassert solution(\"5 10 10 20\") == '1 1'\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\nassert solution('1 1') == '1A1B'\nassert solution('2 4') == '2A3B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\nassert solution(\"3 4\") == \"1A1B\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1A1B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('1 10') == 'Impossible'\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == t\n\na, b = [int(i) for i in stdin.split()]\nprint(solution(str(a)+' '+str(b)))\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == 'Impossible'\nassert solution('1 4') == '3B'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n\"\"\"\n\nimport collections\n\nx, y = list(map(int, input().split()))"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"1B2A\"\nassert solution(\"1 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\""
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == '25'\n\"\"\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == 3\nassert solution(\"5 4\") == 25\n\"\"\"\n\nfrom functools import reduce\nfrom operator import xor\nfrom math import gcd"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4') == '25'\n\n\n\n-----Solution-----\n\n\n\n\"\"\"\n\nfrom typing import List\n\nMOD = 10 ** 9 + 7"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == 3\n\"\"\"\n\nfrom math import gcd\nfrom sys import stdin"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"2 10\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == 3\n\n\"\"\""
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 3\nassert solution(\"5 4\") == 25\n\"\"\"\n\nimport math"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n') == 3\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n''') == '1'\nassert solution('''2 2\n1 1\n0 0\n''') == '0'\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.o.\\n..T\\n.S.\") == \"2\"\nassert solution(\"3 3\\n.o.\\no.\\n.T\\no.\\nS.\") == \"0\"\nassert solution(\"3 3\\n.o.\\no.\\nS.\\no.\\nT.\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\nS.o\\n:o.\\no.T\") == \"2\"\nassert solution(\"4 4\\nS.o.\\no.S\\no.T\\no.T\") == \"0\"\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(example) == \"2\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\nS.o\\n.:\\no.T') == '2'\nassert solution('4 4\\nS.o\\no.T\\n.:\\n:') == '-1'\nassert solution('4 4\\n.o.\\nS.T\\n:.\\nT') == '2'\nassert solution('2 2\\n.o\\no') == '-1'\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\nS.o\\n.o.\\no.T') == '2'\nassert solution('3 3\\n.o.\\no.T') == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"o.S\") == \"1\"\nassert solution(\"o.S.o\") == \"0\"\nassert solution(\"o.S.S\") == \"1\"\nassert solution(\"o.S.T\") == \"2\"\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('S.o\\n.o.\\no.T') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('.o.\\n..o') == '2'\n\"\"\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nS.o\\n.o.\\no.T\") == \"2\"\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"S.o\") == \"2\"\nassert solution(\"S.o.o\") == \"3\"\nassert solution(\"S.S.S.S\") == \"0\"\nassert solution(\"S.o.o.o.o.o.o.o.o.T\") == \"15\"\n\"\"\""
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('199 200') == '200'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"199 200\") == \"200\"\nassert solution(\"1 2\") == \"2\""
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution([\"1 1\"]) == \"1\"\nassert solution([\"3 2\"]) == \"3\"\nassert solution([\"199 200\"]) == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\"\"\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\"\"\""
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == 1\n\nassert solution('3 2') == 3\n\"\"\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"2\\n1 1\\n1 2\") == \"Takahashi\"\nassert solution(\"2\\n5 2\\n2 1\") == \"Aoki\"\nassert solution(\"2\\n2 2\\n3 3\") == \"Takahashi\"\nassert solution(\"1\\n5 2\\n1 1\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n3 3') == 'Aoki'\nassert solution('2\\n4 6') == 'Aoki'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == 'Aoki'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n3 3\\n\") == \"Aoki\"\nassert solution(\"2 3\\n4 6\\n\") == \"Takahashi\"\nassert solution(\"2 1\\n5 1\\n\") == \"Takahashi\"\nassert solution(\"4 4\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == \"Takahashi\"\nassert solution(\"1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n3 3\") == \"Aoki\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n5 2\\n3 3') == \"Aoki\"\nassert solution('1\\n4 3\\n2 2') == \"Takahashi\"\nassert solution('3\\n2 1\\n4 3') == \"Takahashi\"\nassert solution('3\\n2 1\\n4 3\\n3 1\\n1 3') == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\") == \"Aoki\"\nassert solution(\"3 3\") == \"Takahashi\"\n\"\"\""
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2\n5 2\n3 3''') == 'Aoki'\nassert solution('''2\n5 2\n3 1''') == 'Takahashi'\nassert solution('''2\n5 2\n2 2''') == 'Takahashi'\nassert solution('''2\n5 2\n1 1''') == 'Takahashi'\nassert solution('''4\n3 2\n1 1\n2 2\n3 3''') == 'Takahashi'\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"2\\n5 1\\n3 3\") == \"Takahashi\"\nassert solution(\"1\\n2 2\\n3 3\") == \"Takahashi\"\nassert solution(\"1\\n2 1\\n3 3\") == \"Aoki\"\n\n----------------------\nimport re"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\n5 1\n5 2\n3 4\n2 3\n2 2\n''') == 'Aoki'\nassert solution('''\n7\n3 2\n5 1\n5 2\n3 4\n2 3\n2 2\n''') == 'Takahashi'\n\n'''\nN = int(input())\nA_K = [tuple(map(int, stdin.readline().split())) for _ in range(N)]"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n\"\"\""
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\"\n\"\"\""
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\""
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\""
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == 0\nassert solution('3 3') == 8\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == '0'\nassert solution(\"3 3\") == '8'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '0'\n\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == 0\nassert solution('3 3') == 8\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3') == '8'\nassert solution('2 2') == '0'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '0'\nassert solution('3 3') == '8'\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0435 \u043f\u043e\u0431\u043e\u0447\u043d\u0443\u044e \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430:\n\n1 2 3\n4 5 6\n7 8 9\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0443:\n\n6 9\n8 5\n7 4\n\n\u041f\u043e\u0431\u043e\u0447\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u044e \u043d\u0430\u0434 \u044d\u0442\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0438\u0437 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0434\u0443\u0449\u0438\u0445 \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e.\n\n\u0414\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u043e\u0431\u043e\u0447\u043d\u0430\u044f \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c \u2014 \u044d\u0442\u043e \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e, \u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u2014 \u044d\u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043f\u043e \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0438 \u043f\u043e\u0431\u043e\u0447\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044f\u0445.\n\nSample Input 1:\n\n1 2 3\n4 5 6\n7 8 9\nSample Output 1:\n\n6 9\n8 5\n7 4\nSample Input 2:\n\n1\n2\n3\nSample Output 2:\n\n2 1\n3 6\nSample Input 3:\n\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nSample Output 3:\n\n10 9\n11 8\n12 13\nSample Input 4:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nSample Output 4:\n\n10 13\n14 9\n15 12\nSample Input 5:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nSample Output 5:\n\n16 19\n18 17\n20 13\n21 18\n22 14\n23 17\n24 20\n25 21\n26 16\n27 20\n28 24\n29 25\n30 19\n31 23\n32 28\n33 26\n34 30\n35 29\n36 32\n37 33\n38 31\n39 34\n40 36\n41 33\n42 34\n43 35\n44 40\n45 41\n46 36\n47 43\n48 37\n49 38\n50 40\n51 41\n52 42\n53 44\n54 45\n55 46\n56 47\n57 48\n58 49\n59 50\n60 51\n61 52\n62 53\n63 54\n64 55\n65 56\n66 57\n67 58\n68 59\n69 60\n70 61\n71 62\n72 63\n73 64\n74 65\n75 66\n76 67\n77 68\n78 69\n79 70\n80 71\n81 72\n82 73\n83 74\n84 75\n85 76\n86 77\n87 78\n88 79\n89 80\n90 81\n91 82\n92 83\n93 84\n94 85\n95 86\n96 87\n97 88\n98 89\n99 90\n100 91\n101 92\n102 93\n103 94\n104 95\n105 96\n106 97\n107 98\n108 99\n109 100\n110 101\n111 102\n112 103\n113 104\n114 105\n115 106\n116 107\n117 108\n118 109\n119 110\n120 111\n121 112\n122 113\n123 114\n124 115\n125 116\n126 117\n127 118\n128 119\n129 120\n130 121\n131 122\n132 123\n133 124\n134 125\n135 126\n136 127\n137 128\n138 129\n139 130\n140 131\n141 132\n142 133\n143 134\n144 135\n145 136\n146 137\n147 138\n148 139\n149 140\n150 141\n151 142\n152 143\n153 144\n154 145\n155 146\n156 147\n157 148\n158 149\n159 150\n160 151\n161 152\n162 153\n163 154\n164 155\n165 156\n166 157\n167 158\n168 159\n169 160\n170 161\n171 162\n172 163\n173 164\n174 165\n175 166\n176 167\n177 168\n178 169\n179 170\n180 171\n181 172\n182 173\n183 174\n184 175\n185 176\n186 177\n187 178\n188 179\n189 180\n190 181\n191 182\n192 183\n193 184\n194 185\n195 186\n196 187\n197 188\n198 189\n199 190\n200 191\n201 192\n202 193\n203 194\n204 195\n205 196\n206 197\n207 198\n208 199\n209 200\n210 201\n211 202\n212 203\n213 204\n214 205\n215 206\n216 207\n217 208\n218 209\n219 210\n220 211\n221 212\n222 213\n223 214\n224 215\n225 216\n226 217\n227 218\n228 219\n229 220\n230 221\n231 222\n232 223\n233 224\n234 225\n235 226\n236 227\n237 228\n238 229\n239 230\n240 231\n241 232\n242 233\n243 234\n244 235\n245 236\n246 237\n247 238\n248 239\n249 240\n250 241\n251 242\n252 243\n253 244\n254 245\n255 246\n256 247\n257 248\n258 249\n259 250\n260 251\n261 252\n262 253\n263 254\n264 255\n265 256\n266 257\n267 258\n268 259\n269 260\n270 261\n271 262\n272 263\n273 264\n274 265\n275 266\n276 267\n277 268\n278 269\n279 270\n280 271\n281 272\n282 273\n283 274\n284 275\n285 276\n286 277\n287 278\n288 279\n289 280\n290 281\n291 282\n292 283\n293 284\n294 285\n295 286\n296 287\n297 288\n298 289\n299 290\n300 291\n301 292\n302 293\n303 294\n304 295\n305 296\n306 297\n307 298\n308 299\n309 300\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"4 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"4 2\\n1 2 3 4\\n1 2 1 3 2 3\") == \"-1\"\nassert solution(\"1 2\\n1 2 1 2\") == \"0\"\n\nassert solution(\"4 2\\n1 2 3 4\\n1 5 6 4\\n1 2 1 3 2 3\") == \"1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 2 3 4\\n1 5 3 4') == '1'\nassert solution('2 2\\n1 2 3 4\\n1 5 6 4') == '0'\nassert solution('2 3\\n1 2 4 5\\n1 2 1 3 2 3') == '-1'\nassert solution('2 2\\n1 2 3 4\\n1 5 6 7') == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"solutions/problem_077_test.txt\")) == \"1\"\nassert solution(open(\"solutions/problem_077_test_2.txt\")) == \"0\"\nassert solution(open(\"solutions/problem_077_test_3.txt\")) == \"-1\"\nassert solution(open(\"solutions/problem_077_test_4.txt\")) == \"0\"\nassert solution(open(\"solutions/problem_077_test_5.txt\")) == \"1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\\n\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\\n\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 2 1 3 2 3\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"-\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 7\") == \"0\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\""
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\n\"\"\"\nimport sys\nimport collections\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"00\"\nassert solution(\"24\") == \"00\"\nassert solution(\"12\") == \"00\"\nassert solution(\"24\") == \"00\"\nassert solution(\"12\") == \"00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"24\") == \"00:00\"\nassert solution(\"12\") == \"12:00\"\nassert solution(\"12\") == \"12:00\"\nassert solution(\"12\") == \"12:00\"\n\nassert solution(\"24\") == \"00:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"09:09\"\nassert solution(\"12\") == \"17:30\"\nassert solution(\"12\")!= \"17:30\"\nassert solution(\"24\")!= \"17:30\"\nassert solution(\"24\")!= \"17:30\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"00:00\"\nassert solution(\"24\") == \"00:00\"\nassert solution(\"12\") == \"12:00\"\nassert solution(\"24\") == \"12:00\"\nassert solution(\"12\") == \"12:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"12:00\"\nassert solution(\"24\") == \"12:00\"\nassert solution(\"12\")!= \"12:01\"\nassert solution(\"24\")!= \"12:01\"\nassert solution(\"12\")!= \"13:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '09:09'\nassert solution('12') == '07:30'\n\"\"\""
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12') == '00'\nassert solution('24') == '12'\n\nassert solution('12') == '00'\nassert solution('24') == '12'\n\nassert solution('12') == '00'\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"24\"\n    \"17:30\"\n) == \"07:30\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"12:00\"\n\nassert solution(\"24\") == \"00:00\"\n\nassert solution(\"12:00\") == \"12:00\"\n\nassert solution(\"23:59\") == \"11:59\"\n\nassert solution(\"11:59\") == \"11:59\""
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24\") == \"00:00\"\nassert solution(\"12\") == \"12:00\"\nassert solution(\"24\") == \"00:00\"\nassert solution(\"12\") == \"12:00\"\nassert solution(\"24\") == \"00:00\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2\\n1 2 1\\n2 3 1\\n3 1 1\") == \"6\"\n\"\"\"\n\nfrom collections import defaultdict\nimport math\n\n\nclass DisjointSet:\n    def __init__(self, size: int):\n        self.size = size\n        self.father = list(range(size))\n\n    def find(self, x: int) -> int:\n        if self.father[x] == x:\n            return x\n        self.father[x] = self.find(self.father[x])\n        return self.father[x]\n\n    def union(self, x: int, y: int) -> bool:\n        fx, fy = self.find(x), self.find(y)\n        if fx == fy:\n            return False\n        self.father[fx] = fy\n        return True\n\n\nclass Graph:\n    def __init__(self):\n        self.edges = defaultdict(list)\n        self.edges_weight = dict()\n        self.size = 0\n\n    def add_edge(self, u: int, v: int, w: int) -> None:\n        self.edges[u].append(v)\n        self.edges[v].append(u)\n        self.edges_weight[(u, v)] = w\n        self.edges_weight[(v, u)] = w\n        self.size += 1\n\n    def add_edge_from_list(self, l: list) -> None:\n        for i in range(0, len(l), 3):\n            self.add_edge(l[i], l[i + 1], l[i + 2])\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n2\\n2 3 1\\n3 1 1\\n1 2 2\") == 6\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2\\n1 2 1\\n2 3 1\\n3 1 1\") == '6'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\nedges_count, vertex_count, min_weight = map(int, input().split())\n\nvertex_from, vertex_to, weight = [], [], []\nfor i in range(edges_count):\n    vertex_from.append(int(input()))\n    vertex_to.append(int(input()))\n    weight.append(int(input()))\n\nedges = dict()\nfor i in range(edges_count):\n    u, v, w = vertex_from[i], vertex_to[i], weight[i]\n    edges[u] = edges.get(u, []) + [(v, w)]\n    edges[v] = edges.get(v, []) + [(u, w)]\n\nmin_spanning_tree_weight = 99999999\nmin_spanning_tree_weight_edges = []\nmin_spanning_tree_weight_edges_idx = []\n\nmin_spanning_tree_edges = []\nmin_spanning_tree_edges_idx = []\n\nmin_spanning_tree_edges_vertex_from = []\nmin_spanning_tree_edges_vertex_to = []\nmin_spanning_tree_edges_vertex_weight = []\nmin_spanning_tree_edges_vertex_color = []\n\nmin_spanning_tree_edges_idx = []\nmin_spanning_tree_edges_weight = []\nmin_spanning_tree_edges_color = []\n\nparent = [i for i in range(edges_count + 1)]\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 1\\n3 4 1\\n4 1 1\") == \"4\"\n\"\"\"\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n2\\n1 2 1\\n2 3 1\\n3 1 1\\n\") == \"6\"\n\"\"\"\n\n\"\"\"\nfrom sys import stdin, stdout"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2\\n1 3 1\\n3 1 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n2\n1 2 1\n2 3 1\n3 1 1''') == '6'\n\nassert solution('''3 3\n2\n1 2 1\n2 3 1\n3 1 1''') == '6'\n\nassert solution('''3 3\n1\n1 2 1\n2 3 1\n3 1 1''') == '6'\n\nassert solution('''3 3\n2\n2 3 1\n1 2 1\n3 1 1''') == '6'\n\nassert solution('''4 4\n2\n1 3 1\n3 1 1\n1 2 1\n2 3 1''') == '8'"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n3\\n1 2 1\\n2 3 1\\n3 4 1\\n4 5 1\\n5 1 1\") == \"6\"\nassert solution(\"3 3\\n2\\n1 2 1\\n2 3 1\") == \"6\"\nassert solution(\"1 1\\n1\\n1\") == \"0\"\nassert solution(\"1 2\\n1 1\") == \"0\"\nassert solution(\"1 1\\n2 1\\n2\") == \"0\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 1\\n2 3 1\\n3 1 1\") == 6\n\"\"\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2 1\\n2 3 1\\n3 1 1\") == \"6\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n2 0 3 0 1 1\") == \"5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6\"\nassert solution(\"1\\n0\") == \"0\\n\"\nassert solution(\"6\\n3 2 2 2 1 1\") == \"-1\\n\"\nassert solution(\"6\\n2 2 2 1 1\") == \"-1\\n\"\nassert solution(\"6\\n3 2 2 2 1 1\") == \"-1\\n\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 2 2 1 1\") == \"5\\n2 1\\n2 5\"\nassert solution(\"1\") == \"0\\n\"\nassert solution(\"6\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n\n\"\"\""
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 0 3 0 1 1') == '5'\nassert solution('3 2 2 2 1 1') == '-1'\nassert solution('1 0') == '0'\nassert solution('6 2 2 2 1 1') == '-1'\n\n'''\n\nimport sys"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_stdin) == test_solution\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n2 0 3 0 1 1') == '5\\n2 1'\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2 0 3 1 1') == '5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6'\nassert solution('1 0') == '0\\n'\nassert solution('6 3 2 2 1 1') == '-1'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6\n2 0 3 0 1 1''') == '5\nassert solution('''1\n0''') == '0'\nassert solution('''6\n3 2 2 2 1 1''') == '-1'''\nassert solution('''6\n2 2 2 2 1 1''') == '5\n\n'''\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n2 0 3 0 1 1\\n\") == \"5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6\"\nassert solution(\"1\\n0\\n\") == \"0\\n\"\nassert solution(\"6\\n3 2 2 2 1 1\\n\") == \"-1\"\nassert solution(\"6\\n1 1 1 1 1 1\\n\") == \"6\\n3 3\\n3 6\\n5 6\"\n\nprint(\"Teste ok!\")"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 2 2 1 1\") == \"5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6\"\nassert solution(\"6 1 1 2 2 2\") == \"4\\n3 2\\n3 5\\n6 6\\n6 7\"\nassert solution(\"1 0\") == \"0\\n\"\nassert solution(\"6 4 4 5 3 2\") == \"-1\"\nassert solution(\"6 3 2 3 1 1\") == \"5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 8\\n12 20') == '2'\nassert solution('3 10\\n10 20 30') == '1'\n\"\"\""
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_one) == \"2\"\nassert solution(test_input_two) == \"1\"\n\"\"\"\n\n\n\n\"\"\"\n-----Problem Description-----\n\nAt the last moment you realized that the Martians are very happy. So you decided to give them a free trip to Mars. You don't need any money for this trip.\n\nYou've got an unlimited amount of banknotes of each available denomination. You want to give the Martians as many as possible, but don't want to mess up their happiness.\n\nYou have to maximize the number of the given banknotes that you can use to maximize the number of the banknotes that Martians will be happy.\n\nThe number of banknotes that you use to maximize the number of the banknotes that Martians will be happy is a solution to the problem.\n\nNote: The number of the banknotes that you use to maximize the number of the banknotes that Martians will be happy is unique.\n\n-----Input-----\n\nThe first line of the input file contains three integers $n, m, k$ (1\u2009\u2264\u2009$n$,\u2009$m$,\u2009$k$\u2009\u2264\u2009100\u2009000$) \u2014 the number of banknotes in your possession, the number of possible denominations of banknotes, and the base of the number system on Mars.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ (1\u2009\u2264\u2009$a_i$,\u2009$i$\u2009\u2264\u2009$n$) \u2014 the denominations of banknotes in your possession.\n\nAll numbers in the input are given in decimal notation.\n\nAll numbers in the input are given in decimal notation.\n\n-----Output-----\n\nThe first line of the output file should contain one integer \u2014 the maximal number of banknotes you can use to maximize the number of the banknotes that Martians will be happy.\n\nThe second line should contain the $n$ numbers $a_1, a_2, \\ldots, a_n$ (1\u2009\u2264\u2009$a_i$,\u2009$i$\u2009\u2264\u2009$n$) \u2014 the denominations of banknotes in your possession.\n\nAll numbers in the output are given in decimal notation.\n\n-----Example-----\nInput\n1 10 3\n1 2 3\n\nOutput\n2\n0 2 \n\n-----Hint-----\n\nA brute force way would be to try all the possible banknotes and try to maximize the number of banknotes you have with the given base.\n\"\"\""
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 8\\n12 20') == '2\\n0 4\\n'\nassert solution('3 10\\n10 20 30') == '1\\n0\\n'\n\"\"\"\n\nn, k = [int(s) for s in stdin.split()]\ndenominations = [int(s) for s in stdin.splitlines()[1].split()]\n\nresult = []\ncount = 0\nfor i, d in enumerate(denominations):\n    if d == 0:\n        continue\n    if d == k:\n        count += 1\n        result.append(i)\n        continue\n    base = k\n    while base > 1:\n        quotient, remainder = divmod(d, base)\n        if remainder == 0:\n            count += quotient\n            result.append(i)\n            base = 1\n            break\n        base -= 1\n    if base == 1:\n        count += 1\n        result.append(i)\n\nprint(count)\nprint(*result, sep='\\n')\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 8\\n12 20') == '2'\nassert solution('3 10\\n10 20 30') == '1'\nassert solution('2 8\\n12 20') == '2'\nassert solution('3 10\\n10 20 30') == '1'\n\n----"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 20\") == \"1\"\n\"\"\"\nfrom math import log10\n\nn, k = tuple(map(int, input().split()))\na = tuple(map(int, input().split()))\n\nd = {2 ** (log10(i) % k): i for i in range(2 ** (k - 1), 2 ** k)}\n\nl = 0\nfor i in a:\n    x = i // k\n    y = i % k\n    l += x * d.get(y, 0)\n\nprint(l)\n\nfor i in d.keys():\n    print(d.get(i), end=' ')"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 8\\n12 20\") == \"2\"\n\"\"\"\n\nimport sys\n\nn, k = tuple(map(int, sys.stdin.readline().split()))\ndenominations = list(map(int, sys.stdin.readline().split()))\n\ndenominations.sort(reverse=True)\n\ncount = 0\ncurrent_sum = 0\nindex = 0\nwhile current_sum <= k:\n    current_sum += denominations[index]\n    if current_sum == k:\n        count += 1\n    index += 1\nprint(count)\n\nfor index in range(len(denominations)):\n    if current_sum + denominations[index] <= k:\n        count += 1\n        current_sum += denominations[index]\nprint(denominations)\nprint(current_sum)"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 8\\n\"\n    \"12 20\"\n) == \"2\\n0 4\"\nassert solution(\n    \"3 10\\n\"\n    \"10 20 30\"\n) == \"1\\n0\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n12 20\n''') == '2\n0 4\n\nassert solution('''\n9 10 20 30\n''') == '1\n0\n\nassert solution('''\n9 10 20 30\n''') == '0\n4\n'''\n)\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == res\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10') == '1'\n\"\"\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n') == '3.729935587093555327'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n-1 0') == '3.729935587093555327'\n\"\"\""
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == \"3.729935587093555327\"\nassert solution(\"0 0 0 1000\\n100 1000\\n-50 0\\n50 0\") == \"11.547005383792516398\"\n\n\n'''\n\nx1, y1, x2, y2 = [int(i) for i in input().split()]\n\nv_max, t = [int(i) for i in input().split()]\n\nvx, vy = [int(i) for i in input().split()]\n\nwx, wy = [int(i) for i in input().split()]\n\nt1 = t * vx\nt2 = t * vy\n\nt3 = (x2 - x1) / vx\nt4 = (y2 - y1) / vy\n\nt5 = (x2 - x1) / wx\nt6 = (y2 - y1) / wy\n\nd = min(t5, t6) + min(t3, t4)\n\nprint(d)"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == \"3.729935587093555327\"\nprint(solution(\"0 0 0 1000\\n100 1000\\n-50 0\\n50 0\"))\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"0 0 5 5\", \"3 2\", \"-1 -1\", \"-1 0\", \"-1 0\"]) == \"3.729935587093555327\"\n\"\"\"\n\n\nimport itertools\nimport math"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input_14.txt\").read()) == '3.637348645419554424'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == '3.729935587093555327'\nassert solution(\"0 0 0 1000\\n100 1000\\n-50 0\\n50 0\") == '11.547005383792516398'\n\"\"\"\n\nimport sys\n\nfrom math import sqrt\n\nclass Solution:\n    def __init__(self):\n        self.MAX_DISTANCE = 100_000\n        self.MAX_SPEED = 100_000\n        self.DELTA_TIME = 1\n        self.FORECAST_DELTA_TIME = 1\n        self.FORECAST_WIND_MAX_DISTANCE = 100_000\n        self.FORECAST_WIND_MAX_SPEED = 100_000\n        self.FORECAST_WIND_DELTA_TIME = 1\n        self.FORECAST_WIND_TEMPERATURE = 1\n        self.FORECAST_WIND_TEMPERATURE_MAX_DISTANCE = 100_000\n        self.FORECAST_WIND_TEMPERATURE_MAX_SPEED = 100_000\n        self.FORECAST_WIND_TEMPERATURE_DELTA_TIME = 1\n\n    def parse_input(self):\n        self.x_1, self.y_1 = [int(x) for x in input().split()]\n        self.x_2, self.y_2 = [int(x) for x in input().split()]\n        self.wind_speed_limit = int(input())\n        self.delta_time = int(input())\n        self.wind_forecast_speed_limit = int(input())\n        self.wind_forecast_delta_time = int(input())\n        self.wind_forecast_temperature_limit = int(input())\n        self.wind_forecast_temperature_max_distance = int(input())\n        self.wind_forecast_temperature_max_speed = int(input())\n        self.wind_forecast_temperature_delta_time = int(input())\n\n    def solve(self):\n        distance_to_destination = self.calculate_distance_to_destination()\n        speed_to_destination = self.calculate_speed_to_destination()\n        return distance_to_destination + speed_to_destination\n\n    def calculate_distance_to_destination(self):\n        distance_to_destination = self.x_2 - self.x_1 + self.y_2 - self.y_1\n        return distance_to_destination\n\n    def calculate_speed_to_destination(self):\n        speed_to_destination = self.calculate_speed_to_destination_solution_1()\n        if speed_to_destination == 0:\n            speed_to_destination = self.calculate_speed_to_destination_solution_2()\n        return speed_to_destination\n\n    def calculate_speed_to_destination_solution_1(self):\n        # https://www.geeksforgeeks.org/distance-bw-2-points/\n        distance_to_destination = self.calculate_distance_to_destination()\n        if distance_to_destination == 0:\n            return 0\n        return self.MAX_SPEED / distance_to_destination\n\n    def calculate_speed_to_destination_solution_2(self):\n        if self.delta_time == 0:\n            return 0\n        if self.delta_time == 1:\n            if self.calculate_speed_to_destination_solution_1() == 0:\n                return 0\n            return self.MAX_SPEED / self.delta_time\n        else:\n            speed = 0\n            for i in range(self.delta_time):\n                if i == self.delta_time - 1:\n                    speed += self.MAX_SPEED * self.delta_time\n                else:\n                    speed += self.MAX_SPEED / self.delta_time\n            return speed\n\n    def calculate_distance_to_destination_for_wind(self):\n        distance_to_destination = self.x_2 - self.x_1 + self.y_2 - self.y_1\n        forcast_speed = self.calculate_speed_to_destination_for_wind_solution_1()\n        if forcast_speed == 0:\n            return distance_to_destination\n        if forcast_speed == self.MAX_SPEED:\n            return self.MAX_SPEED * distance"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n-1 0\\n') == '3.729935587093555327'\nprint(solution(stdin))\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n-1 0') == '3.729935587093555327'\n\"\"\"\n\nx1, y1, x2, y2 = list(map(int, input().split()))\nv_max, t = list(map(int, input().split()))\nx_wind, y_wind = list(map(int, input().split()))\nx_wind_prev, y_wind_prev = list(map(int, input().split()))\nx_wind_next, y_wind_next = list(map(int, input().split()))\nx_wind_prev = x_wind_prev ** 2\ny_wind_prev = y_wind_prev ** 2\nx_wind_next = x_wind_next ** 2\ny_wind_next = y_wind_next ** 2\n\nres = t\nfor i in range(1, t + 1):\n    res += min(abs(x1 + i * x_wind_next - x2), abs(x1 + i * x_wind_prev - x2)) + min(abs(y1 + i * y_wind_next - y2), abs(y1 + i * y_wind_prev - y2))\nprint(round(res, 6))\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == '3.729935587093555327'\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n'\n) == 'Second'\nassert solution(\n    '3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n'\n) == 'Second'\nassert solution(\n    '3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n'\n) == 'Second'\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom itertools import chain\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == 'First'\nassert solution(\"1\\n1\\n1\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"First\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\") == \"First\"\nassert solution(\"2\\n10\\n2\\n1 2\") == \"Second\"\n\n\"\"\""
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\") == \"Second\"\n\"\"\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n1\\n10\\n2\\n1 2\") == \"Second\"\nassert solution(\"2\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n1\\n10\\n2\\n1 2\") == \"First\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n1\\n10\\n2\\n1 2\") == \"Second\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n1\\n10\\n2\\n1 2\") == \"First\"\n\n-----Problem-----\nTaro and Jiro are playing a game. The rules of the game are as follows:\n\u2022 Taro starts the game by picking a positive integer N (1 \u2264 N \u2264 10^9) randomly and writing it down.\n\u2022 Jiro the next player chooses a positive integer K (1 \u2264 K \u2264 10^9) randomly and writes it down.\n\u2022 Taro then takes K steps in the game. Each step, he chooses one of the following two options:\n - He can choose a positive integer A (1 \u2264 A \u2264 10^9) randomly and write it down.\n - He can choose a positive integer B (1 \u2264 B \u2264 10^9) randomly and write it down.\nIn each step, Taro can do the following:\n - He can choose a bag that contains coin(s). In this case, he puts all of the coins in this bag on the chosen dish.\n - He can choose a dish that contains coin(s). In this case, he removes one or more coins from this dish.\nThe game ends when Taro is unable to make a move. Determine whether Taro wins the game.\n\n-----Problem-----\nTaro and Jiro are playing a game. The rules of the game are as follows:\n\u2022 Taro starts the game by picking a positive integer N (1 \u2264 N \u2264 10^9) randomly and writing it down.\n\u2022 Jiro the next player chooses a positive integer K (1 \u2264 K \u2264 10^9) randomly and writes it down.\n\u2022 Taro then takes K steps in the game. Each step, he chooses one of the following two options:\n - He can choose a positive integer A (1 \u2264 A \u2264 10^9) randomly and write it down.\n - He can choose a positive integer B (1 \u2264 B \u2264 10^9) randomly and write it down.\nIn each step, Taro can do the following:\n - He can choose a bag that contains coin(s). In this case, he puts all of the coins in this bag on the chosen dish.\n - He can choose a dish that contains coin(s). In this case, he removes one or more coins from this dish.\nThe game ends when Taro is unable to make a move. Determine whether Taro wins the game.\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\n1 10\\n2 7\") == \"First\"\nassert solution(\"4\n1 10\\n2 7\") == \"Second\"\nassert solution(\"3\n1 2\\n21\") == \"Second\"\nassert solution(\"4\n1 10\\n2 7\") == \"First\"\nassert solution(\"4\n1 10\\n2 7\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\nassert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\n\n-----Problem-----\nRudu the Security Guard\nRudu is a security guard in a building. He is keeping track of the number of visitors he has seen.\n\nAt the end of each day, he adds a new visitor to his count.\nA visitor can be either an employee, or a visitor coming in or out of the building.\nHe then decides to grant entry to everyone who has been in the building for strictly more than a day.\nHe then goes to sleep.\n\nYou are given the number of visitors, and whether or not they are employees.\n\nWrite a function solution(visitors, employees), which returns the number of people who were granted entry.\n\n-----Solution-----\n\n-----Explanation-----\n\n\"\"\""
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1\\n2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n1\") == \"Second\"\nassert solution(\"10\\n1\\n2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n2\") == \"First\"\n\"\"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 2\\n4 3 1 5 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1 5 2\") == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\nassert solution(\"7 5 2\\n3 5 7 10 11 2 8 9 4\") == \"2\"\nassert solution(\"5 5 6\\n2 4 3 5 2 4\") == \"1\"\n\n\"\"\"\n\nfrom functools import reduce\nimport operator"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\nassert solution(\"5 3 1\\n4 3 1 5 2\") == \"3\"\nassert solution(\"5 3 2\\n4 3 1 5 2\\n4 3 1 5 2\") == \"1\"\nassert solution(\"5 3 3\\n4 3 1 5 2\") == \"2\"\nassert solution(\"5 3 3\\n4 3 1 5 2\\n4 3 1 5 2\\n4 3 1 5 2\") == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\n\"\"\"\n\n\n\"\"\"\n----- Challenge 3 - Sliding Window Maximum -----\nGiven an array of integers A of size N and an integer K.\n\nYou can pick exactly one index i where 1 <= i <= N, then remove that element and \nall elements to the right of i in the array.\n\nAt the end, the size of the array must be smaller than or equal to K.\n\nFind the minimum possible value of maximum element in the resulting array.\n\nInput Format:\nThe first argument given is the integer array A.\nThe second argument given is the integer K.\nOutput Format:\nReturn the minimum possible value of maximum element in the resulting array.\n\n----- Example 0 -----\nInput 1:\nA = [2, 2, 3]\nK = 2\n\nOutput 1:\n3\nExplanation 1:\n- Remove i=1 => A = [2, 3]\n- Remove i=2 => A = [3]\n- Remove i=1 => A = []\nMaximum element in the array is 3.\n\nInput 2:\nA = [2, 2, 1]\nK = 2\n\nOutput 2:\n1\nExplanation 2:\n- Remove i=1 => A = [2, 1]\n- Remove i=2 => A = [1]\n- Remove i=1 => A = []\nMaximum element in the array is 1.\n\nInput 3:\nA = [2, 1, 3, 4]\nK = 3\n\nOutput 3:\n2\nExplanation 3:\n- Remove i=1 => A = [2, 1, 3, 4]\n- Remove i=2 => A = [1, 3, 4]\n- Remove i=3 => A = [2, 1, 4]\nMaximum element in the array is 2.\n\n----- Challenge 3 - Sliding Window Maximum -----\n\nGiven an array of integers A of size N and an integer K.\n\nYou can pick exactly one index i where 1 <= i <= N, then remove that element and \nall elements to the right of i in the array.\n\nAt the end, the size of the array must be smaller than or equal to K.\n\nFind the minimum possible value of maximum element in the resulting array.\n\nInput Format:\nThe first argument given is the integer array A.\nThe second argument given is the integer K.\nOutput Format:\nReturn the minimum possible value of maximum element in the resulting array.\n\nConstraints:\n - 1 <= N <= 1000\n - 1 <= K <= N\n - 1 <= A[i] <= 10^9\n\nExample:\nInput 1:\nA = [2, 2, 3]\nK = 2\n\nOutput 1:\n3\nExplanation 1:\n- Remove i=1 => A = [2, 3]\n- Remove i=2 => A = [2]\n- Remove i=1 => A = []\nMaximum element in the array is 3.\n\nInput 2:\nA = [2, 2, 1]\nK = 2\n\nOutput 2:\n1\nExplanation 2:\n- Remove i=1 => A = [2, 1]\n- Remove i=2 => A = [2]\n- Remove i=1 => A = []\nMaximum element in the array is 1.\n\nInput 3:\nA = [2, 1, 3, 4]\nK = 3\n\nOutput 3:\n2\nExplanation 3:\n- Remove i=1 => A = [2, 1, 3, 4]\n- Remove i=2 => A = [1, 3, 4]\n- Remove i=3 => A = [1, 3]\nMaximum element in the array is 2.\n\"\"\""
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 2\\n4 3 1 5 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == '1'\n\"\"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == '1'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '8'\nassert solution('1 1') == '1'\nassert solution('3 2') == '24'\nassert solution('4 2') == '72'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n\"\"\""
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n\"\"\""
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\nassert solution(\"3 1\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\nassert solution('10 500') == '16282712'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n\"\"\"\n\n\"\"\"\n\"\"\"\n\nsolution:\nO(n * (n + 1) / 2 * k)\n\n\"\"\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == 3\nassert solution('7 3') == 1196\n\"\"\""
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\nassert solution(\"31 8\") == \"64921457\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == 6\nassert solution('4 4') == 3\nassert solution('7 3') == 1196\nassert solution('31 8') == 64921457\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"3\"\n\"\"\"\nfrom copy import deepcopy\n\nn, m = [int(n) for n in stdin.split()]\nadj = [[] for _ in range(n+1)]"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n\") == \"6\"\nassert solution(\"4 4\\n\") == \"3\"\nassert solution(\"7 3\\n\") == \"1196\"\n\"\"\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n7 3\") == \"1196\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'\nassert solution('4 4') == '3'\nassert solution('7 3') == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1196\"\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\na = inputs[0].strip().split(\" \")\nn, m = int(a[0]), int(a[1])"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == \"#.X#\\nX.#.\\n#...\\n\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\\n\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\\n\"\nassert solution(\"1 1 1\\n#\\n\") == \"#\\n\"\nassert solution(\"4 5 4\\n#.#.#\\n#.#.#\\n#.#.#\\n.#.#.\\n\") == \"#.XX#\\nXX.X\\n#.#.#\\n.#.X#\\n#.#.#\\n\"\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\"), \"#.X#\\nX.#.\\n#...\\n\")\n        self."
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == '#.X#\\nX.#.\\n#...\\n'\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\\n\") == '#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\") == \"#.X#\\nX.#.\\n#...\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\""
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\") == \"#.X#\\nX.#.\\n#...\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\") == \"##.X\\nXX#.\\n#...\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\") == \"##XXX\\n#X#.\\nX#..\\n...#\\n#.#.\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\") == \"#.X#\\nX.#.\\n#...\""
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == \"#.X#\\nX.#.\\n#...\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == \"#.X#\\nX.#.\\n#...\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"3 4 2\"\n) ==\n\"#.X#\"\nassert solution(\n\"5 4 5\"\n) ==\n\"#XXX\"\n\n-----Solution-----\n\n\"\"\"\n\nimport sys\nimport copy"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\") == \"#.X#\\nX.#.\\n#...\\n\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\"\nassert solution(\"3 4 0\\n#.#\\n.##\\n##.\") == \"#.#\\n#.#\\n#.#\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"5 2 2 2\") == \"3\"\nassert solution(\"18 1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\") == \"4\"\n\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\") == \"1\"\nassert solution(\"5\\n1 2 2 2\") == \"3\"\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\") == \"4\"\nassert solution(\"19\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 9 10 10 4\") == \"4\"\nassert solution(\"20\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 9 10 10 4\") == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n\") == \"1\"\nassert solution(\"5\\n1 2 2 2\\n\") == \"3\"\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\\n\") == \"4\"\n\nprint(solution(\"3\\n1 1\\n\"))\nprint(solution(\"5\\n1 2 2 2\\n\"))\nprint(solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\\n\"))\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\") == \"1\"\nassert solution(\"5\\n1 2 2 2\") == \"3\"\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\") == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n') == '1'\nassert solution('5\\n1 2 2 2\\n') == '3'\nassert solution('18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\\n') == '4'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1') == '1'\nassert solution('5\\n1 2 2 2') == '3'\nassert solution('18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4') == '4'\n\n\n\"\"\""
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 2') == '1'\nassert solution('2 1') == '0'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1') == '1'\nassert solution('5\\n1 2 2 2') == '3'\nassert solution('18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4') == '4'\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 2 2\") == \"3\"\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\") == \"4\"\nassert solution(\"3\\n1 1\") == \"1\"\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nlist_ = Counter(map(int, input().split()))\n\nprint(list_[1] + list_[2])\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\") == \"1\"\nassert solution(\"5\\n1 2 2 2\") == \"3\"\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 2') == '2 4 1'\nassert solution('5 3 2') == '2 4 1 5'\nassert solution('5 5 2') == '-1'\nassert solution('3 3 2') == '-1'\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\\n\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 2\\n') == '2 4 1 5 3'\n\"\"\""
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 2\\n') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n\"\"\""
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2\\n\") == \"2 4 1 5 3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\""
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6\n3 6 9 18 36 108''') == 'Yes'\nassert solution('''2\n7 17''') == 'No'\nassert solution('''9\n4 8 10 12 15 18 33 44 81''') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"7 17\") == \"No\""
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"7 17\") == \"No\"\nassert solution(\"9 4 8 10 12 15 18 33 44 81\") == \"Yes\"\n\nprint(solution(\"3 6 9 18 36 108\"))"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"2\\n7 17\") == \"No\"\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\") == \"Yes\"\n\n\n\nimport math\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6 9 18 36 108') == 'Yes'\nassert solution('7 17') == 'No'\nassert solution('9 4 8 10 12 15 18 33 44 81') == 'Yes'\nassert solution('4 8 10 12 15 18 33 44 81') == 'No'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"7 17\") == \"No\"\nassert solution(\"9 4 8 10 12 15 18 33 44 81\") == \"Yes\"\n\n\n\"\"\""
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"2\\n7 17\") == \"No\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\nassert solution(\"9 4 8 10 12 15 18 33 44 81\") == \"Yes\"\n\"\"\"\nimport math\nfrom collections import deque\n\n\nclass Node:\n    def __init__(self, value, parent=None, l_child=None, r_child=None):\n        self.value = value\n        self.parent = parent\n        self.l_child = l_child\n        self.r_child = r_child\n\n    def __repr__(self):\n        return f\"Node(value={self.value}, parent={self.parent}, l_child={self.l_child}, r_child={self.r_child})\"\n\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def add_node(self, value, parent=None, l_child=None, r_child=None):\n        new_node = Node(value, parent=parent, l_child=l_child, r_child=r_child)\n        if self.root is None:\n            self.root = new_node\n            return\n        curr_node = self.root\n        while curr_node is not None:\n            if curr_node.value > value:\n                if curr_node.l_child is None:\n                    curr_node.l_child = new_node\n                    return\n                else:\n                    curr_node = curr_node.l_child\n            else:\n                if curr_node.r_child is None:\n                    curr_node.r_child = new_node\n                    return\n                else:\n                    curr_node = curr_node.r_child\n\n    def find(self, value):\n        curr_node = self.root\n        while curr_node is not None:\n            if curr_node.value > value:\n                curr_node = curr_node.l_child\n            elif curr_node.value < value:\n                curr_node = curr_node.r_child\n            else:\n                return curr_node\n        return None\n\n    def print_tree(self):\n        # print(self.root)\n        q = deque()\n        q.append(self.root)\n        while len(q) > 0:\n            curr_node = q.popleft()\n            if curr_node.l_child is not None:\n                q.append(curr_node.l_child)\n            if curr_node.r_child is not None:\n                q.append(curr_node.r_child)\n            print(curr_node)\n\n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n            return\n        curr_node = self.root\n        while curr_node is not None:\n            if curr_node.value > value:\n                if curr_node.l_child is None:\n                    curr_node.l_child = Node(value, parent=curr_node)\n                    return\n                else:\n                    curr_node = curr_node.l_child\n            else:\n                if curr_node.r_child is None:\n                    curr_node.r_child = Node(value, parent=curr_node)\n                    return\n                else:\n                    curr_node = curr_node.r_child\n\n    def rebalance(self):\n        self.root = self.fix_tree(self.root)\n\n    def fix_tree(self, node, is_l_child=True):\n        if node is None:\n            return None\n        if is_l_child:\n            if node.r_child is None:\n                node.r_child = Node(node.value, parent=node)\n                return node.r_child\n            else:\n                return self.fix_tree(node.r_child, False)\n        else:\n            if node.l_child is None:\n                node.l_child = Node(node.value, parent=node)\n                return node.l_child\n            else:\n                return self.fix_tree(node.l_child, True)\n\n    def traverse(self, node):\n        if node is None:\n            return\n        self.traverse(node.l_child)\n        print(node)\n        self.traverse(node.r_child)\n\n    def find_greatest_common_divisor(self, node1, node2):\n        if node1 is None or node2 is None:\n            return\n        return self.find_greatest_common_divisor(node1.l_child, node2.r_child) if node1.value > node2.value \\\n            else self.find_greatest_common_divisor(node1.r_child, node2.l_child) if node1.value < node2.value \\\n            else node1.value\n\n    def find_largest_and_smallest(self):\n        if self.root is None:\n            return\n        return self.find_largest_and_smallest(self.root.l_child) if self.root.value > self.root.r_child.value \\\n            else self.find_largest_and_smallest(self.root.r_child) if self.root.value < self.root.r_child.value \\\n            else (self.root.value, self.root.value)\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n6\n3 6 9 18 36 108\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n7\n17\n\"\"\") == \"No\"\n\nassert solution(\"\"\"\n9\n4 8 10 12 15 18 33 44 81\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n9\n4 8 10 12 15 18 33 44 81\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n2\n7 17\n\"\"\") == \"No\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3 9 18 36 108') == 'Yes'\nassert solution('2 7') == 'No'\nassert solution('9 4 8 10 12 15 18 33 44 81') == 'Yes'\n\"\"\""
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\\n0\"\n\"\"\""
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 -6 4 5 3\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 -3 -4') == '4'\nassert solution('6\\n1 2 -6 4 5 3') == '12'\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 -6 4 5 3\") == 12\n\"\"\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"5\\n3 1 -1 2 3\") == \"3\"\nassert solution(\"5\\n2 1 -2 3 4\") == \"3\"\nassert solution(\"3\\n1 -1 1\") == \"2\"\nassert solution(\"2\\n2 1\") == \"0\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2 -6 4 5 3') == '12'\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 -6 4 5 3') == 12\n\"\"\""
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n-1 0 2 2\") == \"2\", \"Test 1 Failed\"\nassert solution(\"3\\n-1 0 1\") == \"1\", \"Test 2 Failed\"\nassert solution(\"8\\n1 -3 1 4 3 2 1\") == \"0\", \"Test 3 Failed\"\nprint(\"All tests passed\")\n\"\"\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 -6 4 5 3\") == \"12\"\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\n\ndp = [-float('inf')] * (max(a)+1)\ndp[0] = 0\nfor i in range(n):\n    dp[a[i]] = max(dp[a[i]], dp[a[i] - 1]) + a[i]\n    for j in range(1, a[i] + 1):\n        dp[j] = max(dp[j], dp[j - 1])\nprint(dp[-1])\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n-1 2 -4 3') == '-4'\nassert solution('5\\n-2 1 4 1 2') == '-2'\nassert solution('3\\n2 1 0') == '1'\n\"\"\"\n\nN = int(stdin.readline().strip())\nnums = list(map(int, stdin.readline().strip().split()))\n\nmax = 0\nfor n in nums:\n    if n > max:\n        max = n\n\ncnt = 0\nfor n in nums:\n    cnt += max - n\n\nprint(cnt)\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n3 1 4 2') == '5'\nprint('Test success!')\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n3 1 4 2\") == 5"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n3 1 4 2\") == 5\nassert solution(\"7 5\\n1 2 3 3 2 1 4\") == 2\nassert solution(\"5 5\\n1 2 3 3 2 1 4\") == 3\nassert solution(\"5 10\\n1 2 3 3 2 1 4\") == 2\nassert solution(\"5 10\\n1 2 3 3 2 1 4\\n3 5 2 4 1\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 1 4 2') == 5\n\"\"\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 1 4 2') == '5'\nassert solution('1 1\\n1') == '1'\nassert solution('4 4\\n1 2 1 3 4') == '5'\nassert solution('1 10\\n1') == '1'\nassert solution('1 10\\n1\\n1') == '1'\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 1 4 2') == 5\n\n\"\"\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n3 1 4 2') == 5\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n3 1 4 2\\n\") == 5\n\"\"\"\nimport sys\n\nn, t = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\n\ndp = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    dp[i] = 1\n    for j in range(i):\n        if a[j] >= a[i] - t and dp[i] < dp[j] + 1:\n            dp[i] = dp[j] + 1\n\nprint(max(dp))\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 1 4 2') == 5\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n3 1 4 2') == '5'\n\"\"\"\n\nn, T = list(map(int, input().strip().split()))\na = list(map(int, input().strip().split()))\n\nwindow = max(a[0], a[1])\n\nfor i in range(2, n):\n    window = max(a[i] - a[i - 1] + window, a[i])\n\nprint(window)\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\") == \"0 1\"\n\"\"\"\n\nn = int(input())\n\nlst = list(map(int, input().split()))"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '0 0'\nassert solution('3\\n2 3 1') == '0 1'\nassert solution('3\\n3 2 1') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"3\\n3 2 1\") == \"2 1\"\n\nassert solution(\"3\\n1 3 2\") == \"0 1\"\nassert solution(\"3\\n2 1 3\") == \"0 1\"\nassert solution(\"3\\n1 2 3\") == \"0 1\""
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '0 0'\nassert solution('3\\n2 3 1') == '0 1'\nassert solution('3\\n3 2 1') == '2 1'"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == '0 0'\nassert solution('4\\n3 2 1') == '0 1'\n\"\"\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"2 1\"\nassert solution(\"3\") == \"0 0\"\nassert solution(\"3 2 1\") == \"0 1\"\nassert solution(\"3 2 1\") == \"2 1\"\nassert solution(\"3 2 1\") == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"3\\n3 2 1\") == \"2 1\"\nassert solution(\"3\\n1 2 3\") == \"0 0\"\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0 0\"\nassert solution(\"3\\n3 2 1\") == \"0 1\"\nassert solution(\"3\\n1 2 3\") == \"0 0\"\n\nassert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"3\\n3 2 1\") == \"0 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0 0\"\nassert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"3\\n3 2 1\") == \"2 1\"\n\n------end------\n\n'''"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0 0\"\nassert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"3\\n3 1 2\") == \"2 1\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbb baaa\") == 8\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aa\") == \"6\"\nassert solution(\"aba\") == \"8\"\nassert solution(\"bba\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aa bb\") == \"6\"\nassert solution(\"aba bba\") == \"8\"\nassert solution(\"aab bb\") == \"8\"\nassert solution(\"aaa bb\") == \"8\"\nassert solution(\"aaa b\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aa\\nbb\") == 6\nassert solution(\"aba\\nbba\") == 8\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaa\") == 3\nassert solution(\"abab\") == 1\nassert solution(\"aba\") == 2\nassert solution(\"baa\") == 1\nassert solution(\"baaba\") == 2\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s1) == e1\nassert solution(s2) == e2\nassert solution(s3) == e3\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaa\") == 1\n\nassert solution(\"aba\") == 2\n\nassert solution(\"abb\") == 3\n\nassert solution(\"abbb\") == 4\n\nassert solution(\"baaa\") == 5"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\\n bba\") == 8\n\n\"\"\""
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aa\") == \"6\"\nassert solution(\"ab\") == \"8\"\nassert solution(\"ba\") == \"6\"\nassert solution(\"bb\") == \"6\"\nassert solution(\"aab\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == 3\nassert solution(\"aba\") == 2\nassert solution(\"aa\") == 2\nassert solution(\"baa\") == 2\nassert solution(\"baabbab\") == 4\n\"\"\""
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 1\\n1 0 1\\n1 1 1\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\n\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n1 1 1\\n1 1 1\\n0 1 1\\n0 0 1\\n0 0 1\\n1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 1 1\\n1 1 1\\n1 1 1'\n\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1') == 'NO'\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == 'YES'\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\\n0 1 1\\n0 1 1\\n0 0 0\") == \"YES\\n0 1 1\\n1 1 1\"\nassert solution(\"1 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\n\n\"\"\"\n\n\nimport itertools"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n1 0 1\\n0 0 1\\n1 0 1\\n0 1 1\\n1 1 1\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n1 1 1\n1 1 1''') == 'YES'\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'NO'\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'YES'\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'YES'\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'YES'\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1') == 'YES\\n0 0 0\\n0 1 0\\n1 0 0\\n1 0 1\\n1 1 1\\n1 1 1'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1') == 'YES\\n1 0 1\\n1 0 1\\n0 1 1\\n0 0 0\\n0 1 1'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 6 7') == 'YES'\nassert solution('6 15 35 77 22') == 'YES'\nassert solution('6 10 15 1000 75') == 'NO'\n\nprint(solution('2 3 6 7'))\nprint(solution('6 15 35 77 22'))\nprint(solution('6 10 15 1000 75'))\n\n\"\"\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5\\n6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\nassert solution(\"5\\n6 10 15 1000 75\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 6 7') == 'YES\\n2 2 1 1'\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5 6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\nassert solution(\"5 6 15 1000 75\") == \"NO\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == \"YES\"\nassert solution(4) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(6) == \"YES\"\nassert solution(10) == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 6 7') == 'YES'\nassert solution('6 15 35 77 22') == 'YES'\nassert solution('6 10 15 1000 75') == 'NO'\n\"\"\""
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 7 8\") == \"YES\\n2 2 1 1\"\nassert solution(\"5 6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\nassert solution(\"5 6 15 1000 75\") == \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 10 15 1000 75\") == \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5\\n6 15 35 77 22\") == \"YES\\n2 1 2 1 1\""
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5\\n6 10 15 1000 75\") == \"NO\\n2 1 2 1 1\"\nassert solution(\"4\\n1 2 3 4\") == \"YES\\n1 1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\nassert solution(\"40\\n1\\n3\") == \"4\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 60 70\") == \"40\"\n\"\"\"\nimport math"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 10\\n1 20\\n1 50') == '4'\nassert solution('60 70\\n1 60\\n1 70') == '0'\nassert solution('100 100\\n50 100\\n20 100') == '0'\nassert solution('100 50\\n50 100\\n20 100') == '3'\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\\n60\\n70\") == '40'\nassert solution(\"410\\n55\\n70\") == '5'\nassert solution(\"600\\n60\\n70\") == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    100\n    60\n    70\n    \"\"\"\n) == \"40\"\n\nassert solution(\n    \"\"\"\n    410\n    55\n    70\n    \"\"\"\n) == \"5\"\n\nassert solution(\n    \"\"\"\n    600\n    60\n    70\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"40\"\nassert solution(\"410\") == \"5\"\nassert solution(\"600\") == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\\n1 1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 34 3 3\") == \"12 34 3 3\"\nassert solution(\"1 2 3 4 5 6\") == \"12 34 3 3\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12\\n3 1 4 1 5 9 2 6 5 3 5 8') == '12\\n3 4'\n\nprint(solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\"))\n\na = [[1,2,3], [4,5,6], [7,8,9], [0,1,2], [3,4,5]]\na.reverse()\nprint(a)"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\"\n\"\"\""
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 34 56 78 9 10 11 22 33 44 55 66 77') == '12\\n3 4'\nassert solution('3 1 4 1 5 9 2 6 5 3 5 8') == '12\\n3 4'\nassert solution('5 1 1 1 1') == '1\\n1 1'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\"\n\nassert solution(\"5\\n1 1 1 1 1\") == \"1\\n1 1\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 1 4 1 5 9 2 6 5 3 5 8\") == \"12\"\nassert solution(\"5 1 1 1 1\") == \"1\"\nassert solution(\"5 3 1 1\") == \"3\"\nassert solution(\"10 3 1\") == \"4\"\nassert solution(\"5 7 3 1\") == \"3\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 3 3\") == \"6\"\nassert solution(\"5 5\\n1 3 3\\n2 4 2\") == \"12\"\nassert solution(\"7 3\\n4 2 3\\n5 6 1\") == \"72\"\n\"\"\"\nimport unittest\nfrom math import factorial\nfrom typing import List"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 3 3\") == 6\n\"\"\"\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1 3 3') == '6'\n\"\"\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 3 3') == '6'\nassert solution('3 3\\n1 3 3') == '6'\nassert solution('10 10\\n1 2 3\\n2 4 3') == '6'\nassert solution('10 10\\n1 2 3\\n5 7 3') == '0'\nassert solution('5 3\\n1 3 3\\n2 4 2') == '0'\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 3 3\\n') == '6'\nassert solution('2 2\\n1 1 1\\n') == '1'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 3 3\\n\") == 6\n\"\"\"\n\nfrom math import factorial\nfrom decimal import Decimal\n\nN, M = map(int, input().split())\nL = {i: 0 for i in range(1, N + 1)}\nX = {i: 0 for i in range(1, M + 1)}\n\nfor i in range(1, N + 1):\n    l, r, x = map(int, input().split())\n    L[i] = l\n    L[i + 1] = r\n    X[1] += x"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 3 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1 3 3') == '6'\n\"\"\""
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 1\n1 3 3\n\"\"\") == \"6\"\nassert solution(\"\"\"5 2\n1 2 3\n2 3 3\n2 4 2\n4 5 4\n5 4 2\n\"\"\") == \"8\"\nassert solution(\"\"\"5 2\n2 3 1\n2 4 4\n4 5 4\n5 4 1\n\"\"\") == \"8\"\nassert solution(\"\"\"1 1\n1 1\n\"\"\") == \"1\"\n\"\"\""
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 3 3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('87654\\n30') == '10'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\"\n\nimport sys\nfrom typing import Iterable"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\"\n\nimport sys\n\nfrom typing import Callable"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('87654\\n30') == '10'\n\"\"\""
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\nprint(solution(\"87654\\n30\"))\n\"\"\"\nimport unittest\n\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    Time: O(b^2) | O(b^2) for the while loop\n    Space: O(1)\n    \"\"\"\n    def f(self, b: int, n: int) -> int:\n        return (n % b) if n < b else (self.f(b, n // b) + n % b)\n\n    def solution(self, stdin: str) -> str:\n        n, s = int(stdin.split(\"\\n\")[0]), int(stdin.split(\"\\n\")[1])\n\n        b = 2\n        while True:\n            if self.f(b, n) == s:\n                return str(b)\n            elif self.f(b, n) > s:\n                b += 1\n            else:\n                return \"-1\"\n\n\nclass TestSolution(unittest.TestCase):\n    solution = Solution().solution\n\n    def test_solution(self):\n        self.assertEqual(self.solution(\"87654\\n30\"), \"10\")\n        self.assertEqual(self.solution(\"1234\\n2\"), \"1\")\n        self.assertEqual(self.solution(\"1234\\n5\"), \"-1\")\n        self.assertEqual(self.solution(\"1\\n1\"), \"-1\")\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(87654) == 10\n\"\"\"\n\n\nfrom collections import defaultdict\n\nn, s = map(int, stdin.split())"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('87654\\n30') == '10'\n\"\"\"\n\nfrom sys import stdin\n\ns, n = map(int, stdin.readline().split())\n\nfor i in range(2, n):\n    if i * s % n == 0:\n        print(i)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"abca\") == \"First\"\nassert solution(\"abcb\") == \"Second\"\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"abcb\") == \"First\"\nassert solution(\"aabbbc\") == \"First\"\nassert solution(\"aabbcc\") == \"Second\"\nassert solution(\"abbbcc\") == \"Second\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'First'\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"Second\"\nprint(solution(\"aba\"))\n\"\"\"\n\ns = input()"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"aab\") == \"First\"\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"aab\") == \"First\"\nassert solution(\"abb\") == \"Second\"\nassert solution(\"aab\") == \"First\"\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'First'\nassert solution('b') == 'Second'\nassert solution('ab') == 'Takahashi'\nassert solution('c') == 'Takahashi'\n\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'First'\n\n\"\"\"\n\n\"\"\"\nstrategy:\n1. s[i]!= s[i+1] for all i in range(0, n-1)\n\"\"\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'First'\nassert solution('abca') == 'Second'\n\"\"\""
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12345\") == \"6\"\n\"\"\"\n\nimport re\nimport math\n\nn = int(input())\ns = input()\n\ncount = 0\n\nfor i in range(1, n):\n    for j in range(i+1, n+1):\n        count += sum(int(x) for x in re.findall(r'\\d+', s[i:j])) == n\n\nprint(count)\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12345') == 5\nassert solution('439873893693495623498263984765') == 40\n\"\"\""
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n12345') == '6'\n\"\"\""
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('12345') == 1\nassert solution('1234567') == 2\nassert solution('12345678') == 6\nassert solution('123456789') == 10\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12345\") == 6\nassert solution(\"439873893693495623498263984765\") == 40"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"40\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12345') == 6\n\"\"\""
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12345\") == \"12345\"\nassert solution(\"439873893693495623498263984765\") == \"40\"\n\n\"\"\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12345') == 6\nprint(solution('439873893693495623498263984765'))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12345') == 5\nassert solution('439873893693495623498263984765') == 40\n\"\"\"\n\na = int(input())\ns = input()\n\nres = 0\n\nfor i in range(len(s) - 3):\n    for j in range(i + 1, len(s) - 2):\n        for k in range(j + 1, len(s) - 1):\n            for l in range(k + 1, len(s)):\n                if (int(s[i]) * int(s[j])) + (int(s[k]) * int(s[l])) == a:\n                    res += 1\nprint(res)"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1\\n1\\n2\\n3\\n') == '974061117'\nassert solution('4 2\\n1\\n1\\n1\\n2\\n') == '3'\nassert solution('4 3\\n1\\n0\\n1\\n2\\n') == '-1'\nassert solution('4 2\\n1\\n1\\n1\\n2\\n') == '3'\nassert solution('4 3\\n0\\n1\\n1\\n2\\n') == '332748119'\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1\\n1\") == \"3\"\nassert solution(\"2 1\\n2\\n1\") == \"2\"\nassert solution(\"3 1\\n3\\n1\") == \"1\"\nassert solution(\"3 3\\n1 1 1\\n1 2\\n2 1\") == \"160955686\"\nassert solution(\"3 3\\n1 1 1\\n1 2\\n2 1\") == \"185138929\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''3 3\n0 1 1\n4 3 5''') == '160955686'"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nlikes = [int(i) for i in sys.stdin.readline().split()]\nweights = [i for i in range(1, len(likes) + 1)]\n\nfor _ in range(M):\n    for i in range(len(likes)):\n        if likes[i] == 1:\n            weights[i] += 1\n        else:\n            weights[i] -= 1\n        weights[i] %= 998244353\n\nprint(\" \".join([str(i) for i in weights]))\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"1 2\\n1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\\n\") == \"332748119\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\\n\") == \"160955686\"\n\"\"\"\nimport sys\nfrom math import gcd, lcm\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, num_pictures: int, num_visits: int, weights: List[int]):\n        self.num_pictures = num_pictures\n        self.num_visits = num_visits\n        self.weights = weights\n        self.normalized_weights = self.normalize_weights()\n\n    def normalize_weights(self):\n        nonzero_weights = [w for w in self.weights if w!= 0]\n        if len(nonzero_weights) == 0:\n            return []\n        lcm_weight = lcm(*nonzero_weights)\n        return [lcm_weight // w for w in self.weights]\n\n    def multiply_mod_big_int(self, a: int, b: int, mod: int) -> int:\n        return (a * b) % mod\n\n    def solve(self) -> List[int]:\n        positive_visits = self.num_visits - self.num_visits // 2\n        ans = sum(\n            [\n                self.normalized_weights[i] * self.num_visits\n                for i in range(self.num_pictures)\n            ]\n        )\n        ans = self.multiply_mod_big_int(ans, positive_visits, 998244353)\n        return [ans % 998244353, (ans * self.num_visits - ans * self.num_visits // 2) % 998244353]\n\n    def solve_naive(self) -> List[int]:\n        ans = 0\n        for i in range(self.num_pictures):\n            if self.weights[i] == 0:\n                continue\n            ans += self.normalized_weights[i] * self.num_visits\n        return [ans % 998244353, (ans * self.num_visits - ans * self.num_visits // 2) % 998244353]\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n3\\n4\") == \"1\"\nassert solution(\"2 1\\n3\\n4\") == \"3\"\nassert solution(\"3 1\\n3\\n4\") == \"8\"\nassert solution(\"2 3\\n3\\n3\\n4\\n4\") == \"8\"\n\nassert solution(\"3 1\\n3\\n3\\n3\\n4\") == \"9\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n1 1 1\\n5 3 4\") == '1 2 3'\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\\nOZ\") == 'ORZ'\nassert solution(\"AA\\nA\\nA\\n\") == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\", \"OVGURWZLWVLUXTH\", \"OZ\") == \"ORZ\"\nassert solution(\"AJKEOIRUDGNCVF\", \"NNFACNADFOVABG\", \"NAD\") == \"NAD\"\nassert solution(\"EVQOPHWYGX\", \"LXGQHPSW\", \"GQ\") == \"GQ\"\nassert solution(\"ACJSD\", \"VYU\", \"N\") == 0\nassert solution(\"ZZ\", \"ZZ\", \"X\") == 0\n\n\"\"\""
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\", \"OVGURWZLWVLUXTH\", \"OZ\") == \"ORZ\"\n\"\"\""
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''AJKEQSLOBSROFGZ\nOVGURWZLWVLUXTH\nOZ''') == 'ORZ'\nassert solution('''AJKEQSLOBSROFGZ\nAJKEQSLOBSROFGZ\nOZ''') == 'AJKEQSLOBSROFGZ'\nassert solution('''AJKEQSLOBSROFGZ\nAJKEQSLOBSROFGZ\nAZ''') == 'AJKEQSLOBSROFGZ'\n\n\"\"\"\n\n\n\n\"\"\""
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\", \"OVGURWZLWVLUXTH\", \"OZ\") == \"ORZ\"\nassert solution(\"AA\", \"A\", \"A\") == \"0\"\nassert solution(\"AAA\", \"AA\", \"A\") == \"0\"\nassert solution(\"AAA\", \"AAA\", \"A\") == \"AAA\"\nassert solution(\"AAAA\", \"AAAB\", \"A\") == \"AB\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AJKEQSLOBSROFGZ', 'OVGURWZLWVLUXTH', 'OZ') == 'ORZ'\nassert solution('AA', 'A', 'A') == 0\nassert solution('ABCDE', 'AEBCD', 'AC') == 'AB'\nassert solution('ABCD', 'ABC', 'ABC') == 'ABC'\nassert solution('AAAB', 'ABA', 'AB') == 'AB'\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\\nOVGURWZLWVLUXTH\\nOZ\") == \"ORZ\"\nassert solution(\"AA\\nA\\nA\\n\") == \"0\"\n\n\"\"\"\n\nfrom typing import List\nfrom itertools import combinations"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\", \"OVGURWZLWVLUXTH\", \"OZ\") == \"ORZ\"\nassert solution(\"AA\", \"A\", \"A\") == \"0\"\nassert solution(\"A\", \"A\", \"A\") == \"A\"\nassert solution(\"AJKEQSLOBSROFGZ\", \"VZPLFXOIDW\", \"OZ\") == \"0\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 2 1\n1 100 1\n1 100 100''') == '99'\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\n\"\"\"\nimport re"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\n\"\"\"\n\nimport sys\n\nHP_Y, ATK_Y, DEF_Y = map(int, sys.stdin.readline().split())\nHP_M, ATK_M, DEF_M = map(int, sys.stdin.readline().split())\nHP_Y, ATK_Y, DEF_Y = HP_Y, ATK_Y, DEF_Y\nHP_M, ATK_M, DEF_M = HP_M, ATK_M, DEF_M\n\ncost_HP, cost_ATK, cost_DEF = map(int, sys.stdin.readline().split())\n\nmin_cost = 0\n\nHP_cost = min(HP_Y, HP_M)\nATK_cost = min(ATK_Y, ATK_M)\nDEF_cost = min(DEF_Y, DEF_M)\n\nwhile HP_Y >= 0 and HP_M >= 0:\n    HP_Y -= HP_cost\n    HP_M -= ATK_cost\n    if HP_Y > HP_M:\n        HP_Y -= ATK_cost\n    elif HP_M > HP_Y:\n        HP_M -= DEF_cost\n    if HP_Y <= 0 and HP_M <= 0:\n        break"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"100 100 100\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\n\"\"\"\nimport sys\n\nHP, ATK, DEF = map(int, sys.stdin.readline().split())\nHP_M, ATK_M, DEF_M = map(int, sys.stdin.readline().split())\nh, a, d = map(int, sys.stdin.readline().split())\n\nsum = 0\nwhile HP > 0 and HP_M > 0:\n    HP = max(0, ATK - DEF_M)\n    HP_M = max(0, ATK_M - DEF)\n    sum += 1\n\nprint(sum)\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\nassert solution(\"1 2 100\\n100 100 1\") == \"0\"\nassert solution(\"1 2 1\\n100 100 100\") == \"99\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"100 100 100\") == \"0\"\n\"\"\"\n\nHP_Y, ATK_Y, DEF_Y = map(int, stdin.readline().split())\nHP_M, ATK_M, DEF_M = map(int, stdin.readline().split())\nprice_hp, price_atk, price_def = map(int, stdin.readline().split())\n\nhp = min(ATK_M - DEF_Y, ATK_Y - DEF_M) * price_hp\natk = min(HP_M - DEF_Y, HP_Y - DEF_M) * price_atk\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\n\"\"\"\n\nhp_y, atk_y, def_y = map(int, stdin.readline().split())\nhp_m, atk_m, def_m = map(int, stdin.readline().split())\nprice = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == '99'\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == '0'\n\n'''\n\nfrom typing import List, Dict\nimport sys\n\nclass Solution:\n    def solution(self, in_hp: int, in_atk: int, in_def: int, shop_hp: int, shop_atk: int, shop_def: int, h: int, a: int, d: int) -> int:\n        # calculate the need of hp, ATK, DEF\n        need_hp = in_atk - in_def\n        need_atk = in_hp\n        need_def = in_atk - in_def\n        # the number of possible combination\n        num_combinations = int(need_hp / shop_hp) + int(need_atk / shop_atk) + int(need_def / shop_def)\n        # if the number of combinations is greater than possible combination, return 0\n        if num_combinations > sys.maxsize:\n            return 0\n        # else return the minimum cost\n        else:\n            return num_combinations\n\nsolution = Solution()\n\nassert solution.solution(\"1 2 1\\n1 100 1\\n1 100 100\") == '99'\nassert solution.solution(\"100 100 100\\n1 1 1\\n1 1 1\") == '0'"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == '1'\nassert solution(\"3 2\") == '1'\nassert solution(\"3 3\") == '0'\nassert solution(\"1000000000000 1048576\") == '118606527258'"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\n\nassert solution('1000000000000 1048576') == '118606527258'"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"3 2\\n\") == \"1\"\nassert solution(\"3 3\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == 1\nassert solution('3 2\\n') == 1\nassert solution('3 3\\n') == 0\nassert solution('1000000000000 1048576\\n') == 118606527258\n"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\nprint('The local tests are done. Try to solve the mission. '\n      'Click on \"Check\" to earn cool rewards!')\n\"\"\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '1'\n\nassert solution('3 2\\n') == '1'\n\nassert solution('3 3\\n') == '0'\n\nassert solution('1000000000000 1048576\\n') == '118606527258'"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n3 2\") == \"1\""
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == '1'\n\"\"\""
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '1'\n\"\"\"\n\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\n\nans = 0\nfor m in range(1, n + 1):\n    xor_count = 0\n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            if i ^ j == t:\n                xor_count += 1\n\n    ans += xor_count\n\nsys.stdout.write(str(ans))\n"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\""
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"--\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+') == \"Yes\"\nassert solution('-') == \"No\"\nassert solution('++') == \"Yes\"\nassert solution('-') == \"No\"\nassert solution('+-') == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('++') == 'Yes'\nassert solution('-') == 'No'\nassert solution('-++') == 'No'\n\"\"\""
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"--\") == \"No\"\nassert solution(\"+\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\nassert solution(\"+\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+\") == \"Yes\"\nassert solution(\"-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\nassert solution(\"+-\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+-\") == \"Yes\"\nassert solution(\"++\") == \"No\"\nassert solution(\"-\") == \"No\"\n\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"+\") == \"Yes\"\nassert solution(\"-\") == \"No\"\n\n\"\"\"\n\n\n\nfrom collections import deque\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\nassert solution(\"+-\") == \"No\""
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\\n\") == '12.566370614359172464'\n\nassert abs(solution(\"4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\\n\") - 21.991148575128551812) < 10**(-6)\n\nprint('Test pass.')"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 0 0\\n0 1\\n-1 2\\n1 2\\n') == '12.566370614359172464'\n\n\"\"\""
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 0 0\\n0 1\\n-1 2\\n1 2\\n') == '12.566370614359172464'\n\nassert solution('4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\\n') == '21.991148575128551812'\n\n\"\"\"\n\nimport math\nimport random\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\") == \"12.566370614359172464\"\n\n\n\n\"\"\"\n\nimport math\n\nclass Polygon:\n    def __init__(self, vertices):\n        self.vertices = vertices\n        self.cross_products = []\n        self.convex_hull = []\n        self.sides = []\n        self.vertices_mul = []\n        self.perimeters = []\n        self.area = 0\n        self.signed_area = 0\n        self.coord = [None for i in range(self.vertices)]\n        self.coord_hash = {tuple(self.coord[i]): i for i in range(self.vertices)}\n        self.points_dict = dict()\n\n\n    def add_coord(self, coord):\n        self.coord[len(self.coord_hash)] = coord\n        self.coord_hash[tuple(coord)] = len(self.coord_hash)\n\n    def polygon_cross_products(self):\n        for i in range(self.vertices - 1):\n            a = self.coord[i]\n            b = self.coord[i+1]\n            self.cross_products.append(\n                tuple(\n                    (b[j] - a[j]) * (a[(j+1)%3] + b[(j+1)%3] - a[(j+1)%3]) \n                    for j in range(3)\n                )\n            )\n\n        self.cross_products.append(\n            tuple(\n                (self.coord[self.vertices-1][j] - self.coord[0][j]) * (self.coord[0][(j+1)%3] + self.coord[self.vertices-1][(j+1)%3] - self.coord[0][(j+1)%3]) \n                for j in range(3)\n            )\n        )\n        self.cross_products = list(set(self.cross_products))\n\n    def cross_product_sign(self, a, b):\n        return 1 if a[0]*b[1] - a[1]*b[0] > 0 else -1\n\n    def cross_products_signs(self):\n        for i in range(len(self.cross_products)):\n            a = self.cross_products[i]\n            sign = self.cross_product_sign(a, self.coord[i+1])\n            self.cross_products[i] = (a, sign)\n\n    def convex_hull_alg(self):\n        while len(self.cross_products)!= 0:\n            start = self.cross_products[0]\n            hull = []\n            hull.append(start[0])\n            i = 1\n            while i < len(self.cross_products):\n                if self.cross_product_sign(start, self.cross_products[i]) == start[1]:\n                    hull.append(self.cross_products[i][0])\n                    del self.cross_products[i]\n                    i -= 1\n                i += 1\n            self.convex_hull.append(hull)\n            del self.cross_products[0]\n            if len(self.cross_products) > 1:\n                self.cross_products[0] = (self.cross_products[0][0], self.cross_products[1][1])\n\n\n    def all_convex_hull_sides(self):\n        for i in range(len(self.convex_hull)):\n            for j in range(len(self.convex_hull[i])):\n                a = self.convex_hull[i][j]\n                b = self.convex_hull[(i+1)%len(self.convex_hull)][j]\n                c = self.convex_hull[(i+1)%len(self.convex_hull)][(j+1)%len(self.convex_hull[i])]\n                d = self.convex_hull[i][(j+1)%len(self.convex_hull[i])]\n                self.sides.append(((a, b), (c, d)))\n        self.sides.append(((self.convex_hull[0][0], self.convex_hull[0][1]), (self.convex_hull[len(self.convex_hull)-1][0], self.convex_hull[len(self.convex_hull)-1][1])))\n\n    def convex_hull_points_mul(self):\n        for i in range(len(self.sides)):\n            a = self.sides[i][0]\n            b = self.sides[i][1]\n            self.vertices_mul.append(\n                tuple(\n                    (a[j] - b[j]) * (a[(j+1)%3] + b[(j+1)%3] - a[(j+1)%3]) \n                    for j in range(3)\n                )\n            )\n        self.vertices_mul = list(set(self.vertices_mul))\n\n    def perimeters_from_sides(self):\n        for i in range(len(self.sides)):\n            a = self.sides[i][0]\n            b = self.sides[i][1]\n            self.perimeters.append((a[0]*b[1] - a[1]*b[0]))\n        self.perimeters.append(self.perimeters[0])\n\n    def sum_of_perimeters(self):\n        self.area = sum(self.perimeters) * 0.5\n\n    def signed_area_from_cross_products(self):\n        for i in range(len(self.cross_products)):\n            a = self.cross_products[i]\n            self.signed_area += self.cross_product_sign(a, self.coord[i+1]) * (a[0"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\") == \"12.566370614359172464\"\n\"\"\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\") == \"12.566370614359172464\"\nassert solution(\"4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\") == \"21.991148575128551812\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 0 0\n0 1\n-1 2\n1 2\n\"\"\") == '12.566370614359172464'\n\nassert solution(\n\"\"\"\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\"\"\") == '21.991148575128551812'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 0 0\\n0 1\\n-1 2\\n1 2\\n') == '12.566370614359172464'\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\") == \"12.566370614359172464\"\n\"\"\""
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\\n\") == \"12.566370614359172464\"\nassert solution(\"4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\\n\") == \"21.991148575128551812\"\n\n\"\"\"\nfrom collections import Counter\n\nimport numpy as np\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 4\"\nassert solution(\"6\") == \"2 6\"\nassert solution(\"10\") == \"4 8\"\nassert solution(\"100\") == \"8 32\"\nassert solution(\"1000\") == \"20 96\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"4 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('48') == '9 42'\n\"\"\""
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\nassert solution(\"69\") == \"6 21\"\nassert solution(\"12\") == \"12 6\"\nassert solution(\"3\") == \"3 3\"\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"48\") == \"9 42\"\n\"\"\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') == '6 6'\nassert solution('48') == '9 42'\n\"\"\"\n\nimport sys\nfrom functools import reduce\nimport math"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\") == (3, 42)\nassert solution(\"2\") == (2, 2)\nassert solution(\"2\") == (2, 2)\nassert solution(\"8\") == (3, 42)\nassert solution(\"2\") == (2, 2)\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"48\") == \"9 42\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('48') == '9 42'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()())\") == \"Yes\"\nassert solution(\"((()())\") == \"Yes\"\nassert solution(\"(((((((((((((((((()))))))))))))))))))\") == \"Yes\"\nassert solution(\"()))()())\") == \"No\"\nassert solution(\"()()(()()()\") == \"No\""
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()\") == \"Yes\"\nassert solution(\"()()\") == \"Yes\"\nassert solution(\"(())\") == \"Yes\"\nassert solution(\"((()))\") == \"Yes\"\n\nassert solution(\"())\") == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"())\") == \"Yes\"\nassert solution(\"(((\") == \"No\"\nassert solution(\"())(\") == \"Yes\"\nassert solution(\"()))(\") == \"No\"\n\nassert solution(\"((()))\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(')') == 'No'\nassert solution('()') == 'Yes'\nassert solution('())') == 'No'\nassert solution('((()()((((((((((((((((((()))))))))))))))))))') == 'Yes'\n\nassert solution('((((((((((((((((((((((((()))))))))))))))))))))))') == 'No'\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(')(') == 'Yes'\nassert solution('())') == 'Yes'\nassert solution(')(()') == 'No'\nassert solution('((())())') == 'Yes'\n\"\"\""
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\")(\") == \"Yes\"\nassert solution(\")(()\") == \"Yes\"\nassert solution(\"())\") == \"No\"\nassert solution(\"((()))\") == \"Yes\"\nassert solution(\"((())\") == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(()())\") == 'Yes'\nassert solution(\"()\") == 'Yes'\nassert solution(\"((()))\") == 'Yes'\nassert solution(\"(()()(()))\") == 'No'\nassert solution(\"(()())\") == 'Yes'\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()\") == \"Yes\"\nassert solution(\")(\") == \"No\"\nassert solution(\"(()())\") == \"Yes\"\nassert solution(\"())(\") == \"No\"\nassert solution(\"()()(\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(()())\") == \"Yes\"\nassert solution(\"())(\") == \"No\"\nassert solution(\"(()())\") == \"Yes\"\nassert solution(\"()()()\") == \"Yes\"\nassert solution(\"(()())()\") == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"))((((\") == \"No\"\nassert solution(\"()\") == \"Yes\"\n\nassert solution(\")(\") == \"No\"\nassert solution(\"())(((\") == \"No\"\n\nassert solution(\"))((((\") == \"No\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 50\\n50') == '1'\nassert solution('2 50\\n50 50') == '2'\nassert solution('1 50\\n100') == '1'\nassert solution('1 100\\n100') == '-1'\nassert solution('1 100\\n50 50') == '2'\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 50\\n50\\n') == '1'\nassert solution('2 50\\n50 50\\n') == '-1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 50\\n50\\n\") == \"1\"\nassert solution(\"2 50\\n50 100\\n\") == \"5\"\nassert solution(\"3 100\\n50 100\\n100 50\\n50 50\\n\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(x) for x in sys.stdin.readline().split()]\n\ndp = [0] * (k + 1)\ndp[0] = 1\n\nfor i in range(n):\n    for j in range(w[i], k + 1):\n        dp[j] += dp[j - w[i]]\n\nprint(dp[k])\nprint(dp[k] % 1000000007)\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 50\\n50 50\") == \"5\"\nassert solution(\"3 100\\n50 50 100\") == \"2\"\nassert solution(\"2 50\\n50 50\") == \"1\"\nassert solution(\"1 50\\n50\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 100\\n50 50 50 50\\n\") == 1\nassert solution(\"4 100\\n50 50 50\\n\") == 2\nassert solution(\"4 100\\n50 50 50\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 50\\n50\") == \"1\"\nassert solution(\"3 100\\n50 50 100\") == \"5\"\nassert solution(\"2 50\\n50 50\") == \"-1\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 50\\n50\") == \"1\"\nassert solution(\"1 50\\n50\\n100\") == \"2\"\nassert solution(\"1 50\\n50\\n100\\n50\") == \"2\"\nassert solution(\"1 50\\n50\\n100\\n50\\n50\") == \"5\"\nassert solution(\"1 50\\n50\\n100\\n50\\n50\\n50\\n100\") == \"3\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 50\\n50\") == \"1\\n1\"\nassert solution(\"2 100\\n100\\n100\") == \"1\\n1\"\nassert solution(\"3 100\\n100 100 100\") == \"3\\n2\"\nassert solution(\"3 100\\n100 100 100\\n100 100 100\") == \"3\\n1\"\n\nassert solution(\"1 50\\n50\") == \"1\\n1\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 50\n50\n''') == '1'\n\nassert solution('''3 100\n50 50 100\n''') == '5'\n\nassert solution('''2 50\n50 50\n''') == '-1'\n\nassert solution('''1 50\n50\n''') == '0'\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 50\\n50 50 100\\n50 50') == '5\\n2'\nassert solution('1 50\\n100') == '-1'\nassert solution('4 100\\n50 50 50 50') == '0'\nassert solution('4 100\\n50 50 100') == '2'\nassert solution('4 100\\n50 100 50') == '-1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6 8\\n') == '2'\n\nassert solution('2 3 4 9 12\\n') == '4'\n\nassert solution('5 7 2 9\\n') == '1'\n\nassert solution('4 7 2 9\\n') == '1'\n\nassert solution('4 9 4 9\\n') == '0'"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 6 8') == 2\n\nassert solution('5\\n2 3 4 9 12') == 4\n\nassert solution('4\\n5 7 2 9') == 1\n\n\"\"\"\nfrom copy import deepcopy\n\nclass Solution:\n    def __init__(self, boxes, num_actions):\n        self.boxes = boxes\n        self.num_actions = num_actions\n        self.num_piles = len(boxes)\n        self.piles = {}\n        for i in range(1, num_actions + 1):\n            for j in range(1, num_actions + 1):\n                if i * j >= num_actions + 1:\n                    break\n                for k in range(1, num_actions + 1):\n                    if i * j * k >= num_actions + 1:\n                        break\n                    self.piles[(i, j, k)] = (i * j - 1) * (j * k - 1)\n\n    def max_piles(self):\n        piles = self.piles\n        piles = {k: v for k, v in piles.items() if v!= 0}\n        return len(piles)\n\n    def backtracking(self, piles, num_actions):\n        if num_actions == self.num_actions:\n            return self.max_piles()\n        else:\n            max_piles = self.max_piles()\n            for i in range(1, num_actions + 1):\n                for j in range(1, num_actions + 1):\n                    for k in range(1, num_actions + 1):\n                        if i * j * k >= num_actions + 1:\n                            break\n                        if (i, j, k) in piles and (i * j - 1) * (j * k - 1) in self.piles:\n                            piles[(i, j, k)] = (i * j - 1) * (j * k - 1)\n                            max_piles = max(max_piles, self.backtracking(deepcopy(piles), num_actions + 1))\n                            piles[(i, j, k)] = 0\n            return max_piles\n\n    def solution(self):\n        return self.backtracking({}, 1)"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'\n\n\n-----Practical Examples-----\nInput\n3\n2 6 8\n\nOutput\n2\n\nInput\n5\n2 3 4 9 12\n\nOutput\n4\n\nInput\n4\n5 7 2 9\n\nOutput\n1\n\n\n\n-----Challenge-----\n\nCan you solve this problem in time $O(n \\log n)$ or less?\n\n\"\"\"\n\nfrom collections import Counter\nimport numpy as np"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n2 6 8''') == '2'\nassert solution('''5\n2 3 4 9 12''') == '4'\nassert solution('''4\n5 7 2 9''') == '1'\nassert solution('''4\n2 3 4 9 12''') == '1'\nassert solution('''4\n2 3 4 9 12''') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n\"\"\""
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n\n\"\"\"\n\n\nimport sys\nimport itertools"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 6 8\") == 2\nassert solution(\"5\\n2 3 4 9 12\") == 4\nassert solution(\"4\\n5 7 2 9\") == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n17 18\\n15 24\\n12 15\") == \"6\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n17 18\\n15 24\\n12 15\") == \"6\"\nassert solution(\"2\\n10 16\\n7 17\") == \"-1\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\n\nprint(\"The local tests are done. Click on 'Check' to submit your solution and get the final results.\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n17 18\\n15 24\\n12 15\") == \"6\"\nassert solution(\"2\\n10 16\\n7 17\") == \"-1\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n17 18\\n15 24\\n12 15\") == \"6\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\nassert solution(\"2\\n10 16\\n7 17\") == \"-1\"\n\"\"\"\nimport math"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n17 18\\n15 24\\n12 15\\n') == '6'\n\"\"\""
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n17 18\\n15 24\\n12 15') == '6'\n\nassert solution('5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30') == '5'\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n17 18\\n15 24\\n12 15\") == \"6\"\nassert solution(\"2\\n10 16\\n7 17\") == \"-\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\n\"\"\""
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n17 18\\n15 24\\n12 15\") == \"6\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\nassert solution(\"2\\n10 16\\n7 17\") == \"-1\""
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n17 18\\n15 24\") == 6\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n10 16\n7 17''') == '-1'\nassert solution('''3\n17 18\n15 24\n12 15''') == '6'\nassert solution('''2\n10 16\n7 17''') == '-1'\nassert solution('''5\n90 108\n45 105\n75 40\n165 175\n33 30''') == '5'"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abbab') == '0'\nassert solution('bbabb') == '0'\nassert solution('baabb') == '1 0'\nassert solution('babab') == '2 1 2'\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bab\") == \"2 1 0\"\nassert solution(\"bb\") == \"1 0\"\nassert solution(\"bbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == \"2 1 0\"\nassert solution(\"bb\") == \"1 0\"\nassert solution(\"aabb\") == \"0\"\nassert solution(\"ba\") == \"0\"\nassert solution(\"baa\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abb\") == 1\nassert solution(\"bb\") == 0\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"2 1 0 1 3\"\nassert solution(\"bb\") == \"0\"\nassert solution(\"bbaa\") == \"3 0 1 1 3\"\n\n\"\"\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bab\") == \"2\\n1 0\"\nassert solution(\"bb\") == \"0\"\nassert solution(\"bbbb\") == \"0\"\nassert solution(\"aaa\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bab') == '2'\nassert solution('bb') == '0'\n\"\"\""
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''bab\nbb''') == '2\\n1 0'\n\nassert solution('''bbbb\naaa''') == '0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bab\") == \"2\\n1 0\"\nassert solution(\"bb\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abab\") == \"0\"\nassert solution(\"bbbb\") == \"0\"\nassert solution(\"bbbab\") == \"2\"\nassert solution(\"ababb\") == \"1 0\"\nassert solution(\"aabbb\") == \"2 1\"\n\"\"\""
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\nassert solution(\"2\\n1 1\\n2 2\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 3 2\\n1 1 1 1\") == \"POSSIBLE\"\nassert solution(\"2\\n1 1\\n1 1\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3 2\\n1 2 3 1\\n\") == 'POSSIBLE'\n\n-----\n4 1 3 2\n1 2 3 1\n\nPOSSIBLE\n\n-----\n5 2 6 1\n1 1 1 1 1\n\nIMPOSSIBLE\n\n-----\n3 2\n1 1\n1 3\n\nIMPOSSIBLE\n\n-----\n4 1 2\n1 1\n1 3\n\nPOSSIBLE\n\n-----\n3 3\n1 1\n2 2\n3 3\n\nPOSSIBLE\n\n-----\n3 2\n1 1\n1 3\n\nIMPOSSIBLE\n\n-----\n5 2 6 1\n1 1 1 1 1\n\nIMPOSSIBLE\n\n\"\"\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str_io(\"3\\n1 1\\n4 3 2\")) == \"POSSIBLE\"\n\"\"\"\n\nimport sys\nimport pprint\n\nsys.stdin = open('input.txt')\ninput = sys.stdin.readline\n\nN = int(input())\nparents = list(map(int, input().split()))\nweights = list(map(int, input().split()))"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3\\n3\\n1\\n1\\n\") == 'POSSIBLE'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n-----Problem Description-----\nSnuke has a tree of N vertices in his possession, and he has two favorite colors, black and white.\nIn this problem, we will use the same color for each vertex.\nSnuke has a sequence of N non-negative integers, X_1, X_2,..., X_N, which he wants to allocate to the vertices in his tree such that:\n - The total weight of the vertices with the same color as Snuke's favorite color among the vertices contained in the subtree whose root is v is X_v.\n - The color of the root of the subtree is Snuke's favorite color.\nWe are to determine whether it is possible to allocate the weights in this way.\n\n-----Problem Constraints-----\n1 <= N <= 100000\n1 <= X_i <= 50000\n\n-----Input Format-----\nFirst line contains T, number of test cases.\nEach of the next T lines contains:\nN\nP_2 P_3... P_N\nX_1 X_2... X_N\n\nThe root of the tree is Vertex 1, the parent of vertex i is vertex P_i, and the color of the root of the subtree is Snuke's favorite color.\n\n-----Output Format-----\nPrint POSSIBLE if it is possible to allocate weights in the way described, else print IMPOSSIBLE.\n\n-----Sample Input-----\n1\n3 1\n2 2 1\n\n-----Sample Output-----\nPOSSIBLE\n\nThere are only two possible allocations for the weights:\n - Set the color of Vertex 1 to black and its weight to 1.\n - Set the color of Vertex 2 to white and its weight to 2.\nThis is a valid allocation since:\n - The total weight of the vertices with the same color as Snuke's favorite color among the vertices contained in the subtree whose root is Vertex 1 is 2.\n - The color of the root of the subtree is Snuke's favorite color.\n\n-----Sample Input-----\n2\n4 1\n1 1 1 1\n4 2 4 3\n\n-----Sample Output-----\nPOSSIBLE\nIMPOSSIBLE\n\n-----Sample Input-----\n4\n3 1\n1 2 1\n4 1 2\n5 1 4\n4 1 2\n\n-----Sample Output-----\nPOSSIBLE\nIMPOSSIBLE\nIMPOSSIBLE\nIMPOSSIBLE\n\n-----Explanation-----\nThe following are the valid allocations:\n - Set the color of Vertex 1 to black and its weight to 1.\n - Set the color of Vertex 2 to white and its weight to 2.\n - Set the color of Vertex 3 to black and its weight to 1.\n - Set the color of Vertex 4 to white and its weight to 2.\n - Set the color of Vertex 5 to black and its weight to 1.\nSince the total weight of the vertices with the same color as Snuke's favorite color among the vertices contained in the subtree whose root is Vertex 1 is 1 + 2 + 1 = 4,\nand the color of the root of the subtree is Snuke's favorite color, it is possible to allocate the weights in this way.\nIn other words, it is possible to allocate the weights in this way.\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 1\n4 3 2''') == 'POSSIBLE'\n\"\"\"\n\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/s10-simulated-annealing\n\nTime Complexity: O(n * n * (n * n - 1))\nSpace Complexity: O(n * n * (n * n - 1))\n\n\"\"\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\n\"\"\""
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1000000007\\n') == '2'\n\"\"\""
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1000000007\\n\") == '3'\nassert solution(\"3 1000000007\\n\") == '6'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 1000000007\n''') == 2\n\nassert solution('''\n5 1000000007\n''') == 2\n\nassert solution('''\n3 5\n''') == 1\n\nassert solution('''\n6 10000000007\n''') == 3\n\nassert solution('''\n3 2\n''') == 0"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10000000007\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_solution_1\nassert solution(test_input_2) == test_solution_2\nassert solution(test_input_3) == test_solution_3"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1000000007') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == solution(test_input_2)\n\n----\n\nIn \"Takahashi-ya\", a ramen restaurant, basically they have one menu: \"ramen\", but N kinds of toppings are also offered. When a customer orders a bowl of ramen, for each kind of topping, he/she can choose whether to put it on top of his/her ramen or not. There is no limit on the number of toppings, and it is allowed to have all kinds of toppings or no topping at all. That is, considering the combination of the toppings, 2^N types of ramen can be ordered.\nAkaki entered Takahashi-ya. She is thinking of ordering some bowls of ramen that satisfy both of the following two conditions:\n - Do not order multiple bowls of ramen with the exactly same set of toppings.\n - Each of the N kinds of toppings is on two or more bowls of ramen ordered.\nYou are given N and a prime number M. Find the number of the sets of bowls of ramen that satisfy both of the conditions, disregarding order, modulo M. Since she is in extreme hunger, ordering any number of bowls of ramen is fine.\n\n-----Constraints-----\n - 2 \\leq N \\leq 3000\n - 10^8 \\leq M \\leq 10^9 + 9\n - N is an integer.\n - M is a prime number.\n\n-----Subscores-----\n - 600 points will be awarded for passing the test set satisfying N <= 50.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint the number of the sets of bowls of ramen that satisfy the conditions, disregarding order, modulo M.\n\n-----Sample Input-----\n2 1000000007\n\n-----Sample Output-----\n2\n\nLet the two kinds of toppings be A and B. Four types of ramen can be ordered: \"no toppings\", \"with A\", \"with B\" and \"with A, B\". There are two sets of ramen that satisfy the conditions:\n - The following three ramen: \"with A\", \"with B\", \"with A, B\".\n - Four ramen, one for each type.\n\nSOLUTION\n\nFor each prime, we will check whether the set of prime factorization of that prime could satisfy the constraints.\n\n1) Prime factorization of p\np = a^m * b^k * c^j *... * d^0\np's prime factorization is\n[(a, m), (b, k), (c, j),..., (d, 0)]\n\n2) Prime factorization of q\nq = a^m * b^k * c^j *... * d^0\nq's prime factorization is\n[(a, m), (b, k), (c, j),..., (d, 0)]\n\n3) Let p = a^m * b^k * c^j *... * d^0 and q = a^m * b^k * c^j *... * d^0.\nIn the process of finding the prime factorization of p, it can be shown that it must not contain a prime in the range [m, k]. Because q contains all primes in the range [m, k], one of the prime divisors of p must be a prime in the range [m, k]. Therefore, one of the prime divisors of p must be a prime in the range [m, k].\n\n4) Let p = a^m * b^k * c^j *... * d^0 and q = a^m * b^k * c^j *... * d^0.\nIn the process of finding the prime factorization of p, it can be shown that it must not contain a prime in the range [m, k] and [m, m + k].\n\nWhen the set of prime divisors of p = (a, m) and q = (a, m), (b, k) and (c, j)..., (d, 0) is found, we have to divide the set of prime divisors of p and q by a, b, c,..., d.\n\nThen, we can use the result of this division to calculate the number of sets of ramen that satisfy the conditions.\n\nFor a prime p, the set of ramen that satisfy the conditions is\n{(a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..., (a, 0), (b, 0), (c, 0),..."
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1000000007\\n') == '2'\n"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1000000007\") == 2\n\"\"\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10000000007') == '4'\nassert solution('3 10000000007') == '2'\n\"\"\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 5 1\\n-\") == \"999999228\"\nassert solution(\"4 1 5 3\\n-\") == \"99999957\"\nassert solution(\"4 1 5 3\\n+\") == \"7\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3 3\\n+ - -\") == '7'\nassert solution(\"4 1 5 1\\n- - -\") == '999999228'\n\n\n-----Tests-----\n\n1.1.1\n1.1.2\n1.2.1\n1.2.2\n1.2.3\n1.2.4\n1.3.1\n1.3.2\n1.3.3\n1.3.4\n1.3.5\n1.3.6\n1.3.7\n1.3.8\n1.3.9\n1.3.10\n1.3.11\n1.3.12\n1.3.13\n1.3.14\n1.3.15\n1.3.16\n1.3.17\n1.3.18\n1.3.19\n1.3.20\n1.3.21\n1.3.22\n1.3.23\n1.3.24\n1.3.25\n1.3.26\n1.3.27\n1.3.28\n1.3.29\n1.3.30\n1.3.31\n1.3.32\n1.3.33\n1.3.34\n1.3.35\n1.3.36\n1.3.37\n1.3.38\n1.3.39\n1.3.40\n1.3.41\n1.3.42\n1.3.43\n1.3.44\n1.3.45\n1.3.46\n1.3.47\n1.3.48\n1.3.49\n1.3.50\n1.3.51\n1.3.52\n1.3.53\n1.3.54\n1.3.55\n1.3.56\n1.3.57\n1.3.58\n1.3.59\n1.3.60\n1.3.61\n1.3.62\n1.3.63\n1.3.64\n1.3.65\n1.3.66\n1.3.67\n1.3.68\n1.3.69\n1.3.70\n1.3.71\n1.3.72\n1.3.73\n1.3.74\n1.3.75\n1.3.76\n1.3.77\n1.3.78\n1.3.79\n1.3.80\n1.3.81\n1.3.82\n1.3.83\n1.3.84\n1.3.85\n1.3.86\n1.3.87\n1.3.88\n1.3.89\n1.3.90\n1.3.91\n1.3.92\n1.3.93\n1.3.94\n1.3.95\n1.3.96\n1.3.97\n1.3.98\n1.3.99\n1.3.100\n1.3.101\n1.3.102\n1.3.103\n1.3.104\n1.3.105\n1.3.106\n1.3.107\n1.3.108\n1.3.109\n1.3.110\n1.3.111\n1.3.112\n1.3.113\n1.3.114\n1.3.115\n1.3.116\n1.3.117\n1.3.118\n1.3.119\n1.3.120\n1.3.121\n1.3.122\n1.3.123\n1.3.124\n1.3.125\n1.3.126\n1.3.127\n1.3.128\n1.3.129\n1.3.130\n1.3.131\n1.3.132\n1.3.133\n1.3.134\n1.3.135\n1.3.136\n1.3.137\n1.3.138\n1.3.139\n1.3.140\n1.3.141\n1.3.142\n1.3.143\n1.3.144\n1.3.145\n1.3.146\n1.3.147\n1.3.148\n1.3.149\n1.3.150\n1.3.151\n1.3.152\n1.3.153\n1.3.154\n1.3.155\n1.3.156\n1.3.157\n1.3.158\n1.3.159\n1.3.160\n1.3.161\n1.3.162\n1.3.163\n1.3.164\n1.3.165\n1.3.166\n1.3.167\n1.3.168\n1.3.169\n1.3.170\n1.3.171\n1.3.172\n1.3.173\n1.3.174\n1.3.175\n1.3.176\n1.3.177\n1.3.178\n1.3.179\n1.3.180\n1.3.181\n1.3.182\n1.3.183\n1.3.184\n1.3.185\n1.3.186\n1.3.187\n1.3.188\n1.3.189\n1.3.190\n1.3.191\n1.3.192\n1.3.193\n1.3.194\n1.3.195\n1.3.196\n1.3.197\n1.3.198\n1.3.199\n1.3.200\n1.3.201\n1.3.202\n1.3.203\n1.3.204\n1.3.205\n1.3.206\n1.3.207\n1.3.208\n1.3.209\n1.3.210\n1.3.211\n1.3.212\n1.3.213\n1.3.214\n1.3.215\n1.3.216\n1.3.217\n1.3.218\n1.3.219\n1.3.220\n1.3.221\n1.3.222\n1.3.223\n1.3.224\n1.3.225\n1.3.226\n1.3.227\n1.3.228\n1.3.229\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 3 3\\n+-\\n') == '7'\n\"\"\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 5 1\") == \"999999228\"\nassert solution(\"2 2 3 3\") == \"7\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 3 3\\n+-') == '7'\nassert solution('4 1 5 1\\n-') == '999999228'\n\"\"\""
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 5 1') == '999999228'\nassert solution('4 1 5 3') == '999999228'\nassert solution('4 1 5 5') == '999999228'\nassert solution('4 1 5 6') == '999999228'\nassert solution('4 1 5 7') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 5 1\\n-\") == \"999999228\""
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 3 3\\n+-') == '7'\nassert solution('4 1 5 1\\n--') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 5 1\\n+\\n\") == \"999999228\"\nassert solution(\"2 2 3 3\\n+-\\n\") == \"7\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n\"\"\""
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == answer\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0\nassert solution('10 2 1 0') == 1\n\n\"\"\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 1 7\") == 0\nassert solution(\"1 1 1 2\") == 4\n\"\"\"\n\na, b, c, l = map(int, input().split())\ns = [[a, b, c]]\nfor _ in range(l):\n    s.append([x + 1 for x in s[-1]])\ns.pop()\nans = 0\nfor i in range(2, len(s)):\n    for j in range(i):\n        ans += s[i][j] >= s[j][j]\nprint(ans)\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 2\") == 4\n\nassert solution(\"1 2 3 1\") == 2\n\nassert solution(\"10 2 1 7\") == 0\n\nassert solution(\"3 3 3 1\") == 0\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(20000)\n\nn, m = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == '6'"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == '6'\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in input().split(' ')]\n\nmod = 1000000009"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == '6'\n\"\"\"\n\nn, m = map(int, stdin.split())\nans = 2 ** n\nfor i in range(1, m + 1):\n    ans -= (1 << i) * (2 ** i - 1)\nprint(ans % 1000000009)\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == 6\n\"\"\""
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"6\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == 6\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\"\"\"\n\nimport collections\n\nfrom util.helpers import read_lines, test_solution\n\nMAX_VALUE = 10 ** 9 + 7\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\na_1 b_1\\n\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n''') == 1\nassert solution('''\n5\n1 2\n1 3\n2 4\n3 5\n''') == 3\nassert solution('''\n3\n1 1\n1 2\n2 3\n''') == 0\n\n'''\nTime: O(N)\nSpace: O(N)\n'''\n'''\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == 2\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 2\n1 3\n1 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n1 2\n2 3\n2 4\n3 4\n\"\"\") == \"8\"\n\n\"\"\"\nSolution:\n- x, y: the niceness of painting different colors\n- m: number of vertices\n- n: number of edges"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 4 1\") == \"2\"\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n\nfrom collections import Counter\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == 2\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\na_1 b_1\\n\") == 2\n\"\"\"\n\n\"\"\"\nGiven is a tree with N vertices numbered 1 to N, and N-1 edges numbered 1 to N-1. Edge i connects Vertex a_i and b_i bidirectionally and has a length of 1.\nSnuke will paint each vertex white or black.\nThe niceness of a way of painting the graph is \\max(X, Y), where X is the maximum among the distances between white vertices, and Y is the maximum among the distances between black vertices.\nHere, if there is no vertex of one color, we consider the maximum among the distances between vertices of that color to be 0.\nThere are 2^N ways of painting the graph. Compute the sum of the nicenesses of all those ways, modulo (10^{9}+7).\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^{5}\n - 1 \\leq a_i, b_i \\leq N\n - The given graph is a tree.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 b_1\n\\vdots\na_{N-1} b_{N-1}\n\n-----Output-----\nPrint the sum of the nicenesses of the ways of painting the graph, modulo (10^{9}+7).\n\n-----Sample Input-----\n2\n1 2\n\n-----Sample Output-----\n2\n\"\"\""
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 1\") == \"2\"\nassert solution(\"11 0 0 5 0 0 0 4 0 0 11\") == \"18\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 0 1') == 4\nassert solution('11 0 0 5 0 0 0 4 0 0 11') == 18\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 2 0\\n3 0 1') == '2'\n\nassert solution('11\\n0 0 0 5 0 0 0 4 0 0 11') == '18'\n\n\n----\n>>> print(solution('3\\n0 2 0\\n3 0 1'))\n2\n>>> print(solution('11\\n0 0 0 5 0 0 0 4 0 0 11'))\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')\n18\n>>> solution('11\\n0 0 0 5 0 0 0 4 0 0 11')"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 2 0\\n3 0 1\") == '2'\nassert solution(\"11\\n0 0 0 5 0 0 0 4 0 0 11\\n9 2 6 0 8 1 7 0 3 0 10\") == '18'\nprint('test passed')\n\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '2\\n'\nassert solution('3\\n') == '3\\n'\nassert solution('1\\n2\\n') == '2\\n1\\n'\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == \"2\"\nassert solution(11) == \"18\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 2 0\\n3 0 1\") == \"2\"\nassert solution(\"11\\n0 0 0 5 0 0 0 4 0 0 11\") == \"18\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 2 0\\n1 0 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 2 0\\n1 0 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 2 0\\n1 0 3\") == \"2\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"abazzzaba\") == \"YES\"\nassert solution(\"ababa\") == \"NO\"\nassert solution(\"abcaaba\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\", \"abcd\") == \"YES\"\nassert solution(\"abcd\", \"abc\") == \"NO\"\nassert solution(\"abc\", \"abc\") == \"YES\"\nassert solution(\"abc\", \"bca\") == \"NO\"\nassert solution(\"abc\", \"dab\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba*aba') == 'YES'\nassert solution('aba*aba') == 'YES'\nassert solution('aba*aba') == 'YES'\nassert solution('aba*aba') == 'YES'\nassert solution('aba*aba') == 'YES'\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"vk*cup\") == \"YES\"\nassert solution(\"vkcup\") == \"YES\"\nassert solution(\"vk\") == \"NO\"\n\"\"\"\n\nn, m = [int(s) for s in input().split()]\ns = input()\nt = input()"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba*aba\") == 'YES'\nassert solution(\"vk*cup\") == 'YES'\nassert solution(\"gfgf*gfgf\") == 'NO'\nassert solution(\"gfgfgf\") == 'NO'\n\"\"\""
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba*aba') == 'YES'\nassert solution('aba?aba') == 'YES'\nassert solution('ab?a') == 'NO'\nassert solution('abacaba') == 'YES'\nassert solution('codeforces') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba*a\") == \"NO\"\nassert solution(\"aba*a\") == \"NO\"\nassert solution(\"aba*a*a\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba*b\") == \"NO\"\nassert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba*bcaba\") == \"YES\"\nassert solution(\"ab*cba\") == \"NO\""
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"vk*cup\") == \"YES\"\nassert solution(\"vkcup\") == \"YES\"\nassert solution(\"gfgf*gfgf\") == \"NO\"\nassert solution(\"gfgfgf\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba1aba\") == \"NO\"\nassert solution(\"aba?aba\") == \"NO\"\nassert solution(\"aba*aba*aba\") == \"YES\""
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0.1 0.2 0.3\") == \"0.3\"\nassert solution(\"4 0.1 0.2 0.3 0.8\") == \"0.8\"\nassert solution(\"2 0.1 0.2\") == \"0.26\"\n\"\"\""
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.8'\nassert solution('2\\n0.1 0.2') == '0.26'\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\n\nassert solution(\"2\\n0.1 0.2\") == \"0.260000000000\"\n\n\"\"\""
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.8'\nassert solution('2\\n0.1 0.2') == '0.26'\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.8\"\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.8'\nassert solution('2\\n0.1 0.2') == '0.26'\n\"\"\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\nassert solution(\"2\\n0.1 0.2\") == \"0.260000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\nassert solution(\"2\\n0.1 0.2\") == \"0.260000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1.0\"\nassert solution(\"10 10 1 2 5\") == \"5.0\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10 1 2 5') == '5.0'\nassert solution('3 6 1 2 1') == '4.7142857143'\n\n\"\"\"\n\nimport math\nimport sys\nimport os\nfrom typing import List\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 10 1 2 5') == '5.0'\nassert solution('3 6 1 2 1') == '4.7142857143'\nassert solution('1 1 1 1 1') == '1.0'\nassert solution('1 1 1 1 1') == '0.0'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10 1 2 5') == '5'\nassert solution('3 6 1 2 1') == '4.7142857143'\n\nimport math\n\n\"\"\""
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"5 10 1 2 5\"\n) == \"5.0000000000\"\n\nassert solution(\n\"3 6 1 2 1\"\n) == \"4.7142857143\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\nassert solution(\"1 1 1 1 1\") == \"1.0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10 1 2 5') == '5.0'\nassert solution('3 6 1 2 1') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('10 1 2 5') == '5'\nassert solution('3 6 1 2 1') == '4.7142857143'\n'''"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\") == \"0.279\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(float, sys.stdin.readline().split()))"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'\n\"\"\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\") == \"0.279\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\") == \"0.279\"\n\nprint(solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\"))\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 0.500 0.750 1.000 2.000 3.000') == '0.250'\nprint('Test passed')\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000''') == '0.250'\n\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896''') == '0.279'\n\nassert solution('''1\n0.111''') == '0.111'\n\nassert solution('''2\n0.000 0.500 0.750 1.000 2.000 3.000''') == '0.250'\n\nassert solution('''5\n0.000 0.500 0.750 1.000 2.000 3.000''') == '0.250'"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0.250\"\nassert solution(\"3\") == \"0.250\"\n\"\"\"\n\n\n\n\"\"\"\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430\n\n3\n0.0 0.5 0.75 1.0 2.0 3.0\n\n0.25\n\"\"\""
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5\\n5 2') == '18'\n\"\"\""
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'\n\n\"\"\""
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5\\n5 2') == '18'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5\\n5 2\") == \"18\"\n\"\"\"\n\nx1, y1 = input().split()\nx2, y2 = input().split()"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5\\n5 2\") == \"18\"\nassert solution(\"0 1\\n0 0\") == \"8\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5\\n5 2\") == 18\nassert solution(\"0 1\\n0 0\") == 8\nassert solution(\"-1 -5\\n-5 -1\") == 8\n\"\"\"\n\n\"\"\"\n3\n5 2\n5 1\n-1 -5\n-5 -1\n\"\"\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5\\n5 2') == '18'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom itertools import permutations\nfrom typing import List, Dict\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5\\n5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5\\n5 2\") == '18'\n\nprint(solution(\"0 1\\n0 0\"))\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1\\n0 0\") == \"8\"\nassert solution(\"1 5\\n5 2\") == \"18\"\nassert solution(\"5 5\\n3 4\") == \"8\"\nassert solution(\"1 1\\n1 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('10') == '244'\nassert solution('100') == '1000'"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"10\") == \"44\"\n\n\"\"\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 10\nassert solution(\"3\") == 24\nassert solution(\"4\") == 35\nassert solution(\"5\") == 60\n\nassert solution(\"6\") == 62\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('3') == '40'\nassert solution('4') == '141'\nassert solution('5') == '441'\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '4'\nassert solution('2') == '10'\nassert solution('6') == '15'\nassert solution('1') == '4'\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"4\"\n\nassert solution(\"2\") == \"10\"\n\nassert solution(\"3\") == \"35\"\n\nassert solution(\"4\") == \"44\"\n\nassert solution(\"5\") == \"45\""
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('3') == '40'\nassert solution('4') == '90'\nassert solution('5') == '490'\n\n\"\"\""
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"40\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"50\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"2\") == 10\n\"\"\""
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('3') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == 0\nassert solution(\"4\\n1 1 2 2\") == 2\nassert solution(\"5\\n1 4 1 4 9\") == 2\n\"\"\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == 0\nassert solution('4\\n1 1 2 2') == 2\nassert solution('5\\n1 4 1 4 9') == 2\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 2 2') == '0'\nassert solution('5\\n1 4 1 4 9') == '2'\nassert solution('1\\n2') == '0'\nassert solution('1\\n3') == '1'\nassert solution('2\\n1 2') == '1'\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == 0\nassert solution(4) == 2\nassert solution(5) == 2\nassert solution(6) == 2\n\"\"\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2 2') == 0\nassert solution('1 4 1 4 9') == 2\nassert solution('1 4 1 4 9') == 2\nassert solution('1 4 1 4 9') == 2\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 1 2 2\") == \"2\"\nassert solution(\"1 4 1 4 9\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == 0\nassert solution(\"1 1 2 2\") == 2\nassert solution(\"1 4 1 4 9\") == 2\n\n\nimport heapq\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 1 2 2\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 1 2 2\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 1 2 2\") == \"2\"\nassert solution(\"1 4 1 4 9\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n\n'''\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n\n\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaabccc') == \"YES\"\nassert solution('bbacc') == \"NO\"\nassert solution('aabc') == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaabccc\") == 'YES'\nassert solution(\"bbacc\") == 'NO'\nassert solution(\"aabc\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\""
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(aaabccc) == 'YES'\nassert solution(bbacc) == 'NO'\nassert solution(aabc) == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\nassert solution(\"4\\n4 1 3 2\") == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 5 3\") == \"2\"\nassert solution(\"4 1 3 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\nassert solution(\"4\\n4 1 3 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 5 3\") == 2\nassert solution(\"4 1 3 2\") == 2\nassert solution(\"4 2 1 3\") == 2\nassert solution(\"4 3 1 2\") == 2\n\n\"\"\""
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 5 3\") == \"2\"\nassert solution(\"4 1 3 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\nassert solution(\"4\\n4 1 3 2\") == \"2\"\n\nprint(solution(\"5\\n4 1 2 5 3\"))\nprint(solution(\"4\\n4 1 3 2\"))\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"3.5\", \"First\"\nassert solution(\"6 1\") == \"3.5\", \"Second\"\n\"\"\"\n\nm, n = [int(x) for x in input().split()]"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\") == \"3.5\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.75\"\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n\") == \"1.5\"\n\n\"\"\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1.0\"\nassert solution(\"2 1\") == \"0.5\"\nassert solution(\"4 5\") == \"0.9375\"\nassert solution(\"6 2\") == \"1.75\"\n\"\"\"\n\nfrom math import factorial as fact\n\nclass Solution:\n    def solve(self, stdin):\n        m, n = [int(x) for x in stdin.split(\" \")]\n        return f\"{sum(fact(i) / fact(j) * (m - i) / m for i in range(n + 1) for j in range(i + 1)) / n:.5f}\"\n        \n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"4.5\"\nassert solution(\"2 1\") == \"1.5\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1\\n') == '3.5'\nassert solution('6 3\\n') == '4.958333333333'\nassert solution('2 2\\n') == '1.75'\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1.75'\nassert solution('2 3') == '4.958333333333'\nassert solution('2 4') == '5.5'\n\n\"\"\""
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == '4.958333333333'\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"2.0\"\nassert solution(\"2 3\") == \"3.83333333333\"\nassert solution(\"5 3\") == \"4.83333333333\"\n\"\"\"\n\n\nfrom collections import defaultdict\nimport math\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 1') == '3.5'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.75'\nassert solution('2 4') == '2.083333333333'\nassert solution('8 4') == '2.083333333333'\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>') == '3'\nassert solution('4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>') == '3'\nassert solution('4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>') == '3'\n\n\"\"\"\n\n\nimport string\nimport math\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>') == '3'\nassert solution('4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>') == '5'\nassert solution('4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>') == '3'\n\n\n'''\n\nfrom typing import List\nimport time\n\nclass Solution:\n    def solution(self, n: int, s: List[str]) -> int:\n        return 0"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n>>>>>\\n5\\n>>>>>\\n3\\n>>>>>\\n2\\n<-\\n<-\\n<-\\n1\") == 3\nassert solution(\"4\\n>>>>>\\n5\\n>>>>>\\n3\\n<-\\n<-\\n<-\\n1\") == 5\nassert solution(\"4\\n>>>>>\\n5\\n<-\\n<-\\n<-\\n1\") == 0\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<--\\n2\\n<>\") == 3\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>\") == \"3\"\nassert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>\") == \"3\"\nassert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>\") == \"3\"\nassert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>\") == \"3\""
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<--\\n2\\n<>') == '3'\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == '3'\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == '5'\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == '5'\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n>>>>>\\n5\\n<<<<<\\n3\\n<<<\\n2\\n<>') == 3\nassert solution('4\\n>>>>>\\n5\\n<<<<<\\n3\\n<<<\\n2\\n-') == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">-<\") == 1\nassert solution(\"-><\") == 0\n\"\"\"\n\n\nimport sys\nimport math\n\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    left = [i for i in range(n) if s[i] == \">\"]\n    right = [i for i in range(n) if s[i] == \"<\"]\n    res = 0\n    for i in range(n):\n        if left:\n            left.pop()\n            res += 1\n        if right:\n            right.pop(0)\n            res += 1\n    print(res)\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>\") == '3'\nassert solution(\"5\\n<->\\n3\\n>>>>\\n4\\n<->\\n5\\n<->\\n2\\n<>\") == '5'\nassert solution(\"3\\n<->\\n2\\n<->\\n3\\n<->\\n4\\n<->\\n5\\n<->\\n2\\n<>\") == '0'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>\\n\") == \"3\"\nassert solution(\"3\\n<->\\n2\\n<>\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 5\\n4 10\") == \"16\\n9 9 10\"\nassert solution(\"4 5\\n4 5\\n4 10\") == \"16\\n9 9 10\"\nassert solution(\"1 1\\n100 100\\n1 1\\n100 100\") == \"202\\n101 101 101 101\"\nassert solution(\"4 1\\n1 1\\n1 1\\n1 1\") == \"202\\n101 101 101 101\"\nassert solution(\"4 1\\n1 1\\n1 1\\n1 1\") == \"202\\n101 101 101 101\"\n\"\"\""
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n4 5\\n4 10\") == \"16\"\nassert solution(\"1 100\\n100 1\\n1 100\\n100 1\") == \"202\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n4 5\\n4 10\") == \"16\"\nassert solution(\"1 100\\n100 1\\n1 100\\n100 1\") == \"202\"\nassert solution(\"1 1\\n100 100\\n1 1\\n100 1\") == \"101 101 101 101\"\n\"\"\"\n\nn = int(input())\n\nlawns = list()\nfor i in range(n):\n    lawns.append(tuple(map(int, input().split())))\n\nmax_s = max(map(lambda x: x[0], lawns))\nmax_g = max(map(lambda x: x[1], lawns))\n\ntotal_lawn = sum(map(lambda x: x[1], lawns))\nres = total_lawn\n\nlawns = sorted(lawns, key=lambda x: x[1], reverse=True)\n\nfor s, g in lawns:\n    for s_ in range(s - 1, max_s):\n        for g_ in range(g - 1, max_g):\n            if abs(s_ + 1 - s_) <= 1 and abs(g_ + 1 - g_) <= 1:\n                res -= g - s\n                break\n\nprint(res)\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n4 5\\n4 10\") == \"16\\n9 9 10\"\nassert solution(\"4\\n1 100\\n100 1\\n1 100\\n100 1\") == \"202\\n101 101 101 101\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n4 5\\n4 10') == 16\nassert solution('1 100\\n100 1\\n1 100\\n100 1') == 202\n\n\"\"\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 5\\n4 5\\n4 10\") == \"16\\n9 9 10\"\nassert solution(\"4\\n4 5\\n4 10\") == \"-1\"\nassert solution(\"1\\n100 100\\n1 1\\n1 100\") == \"202\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n4 5\\n4 10\") == \"16\\n9 9 10\""
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n4 5\\n4 10\") == \"16\\n9 9 10\"\nassert solution(\"1 100\\n100 1\\n1 100\\n100 1\") == \"202\\n101 101 101 101\"\nassert solution(\"4 1\\n1 100\\n1 1\\n1 1\\n1 1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 5\\n4 5\\n4 10\") == \"16\"\nassert solution(\"4\\n1 100\\n100 1\\n1 100\\n100 1\") == \"202\"\nassert solution(\"4\\n1 1\\n100 100\\n1 1\\n100 1\") == \"-1\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n4 5\\n4 10') == 16\nassert solution('1 100\\n100 1\\n1 100\\n100 1') == 202"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\nassert solution(\"5\\n2 3 4 5 6\") == \"0 1 3\"\nassert solution(\"3\\n2 3 4\") == \"0 1 3\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5) == '1 2 2'\n\"\"\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1 2 2'\nassert solution('3\\n1 2 3') == '0 2'\n\n\"\"\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0 2\"\nassert solution(\"5\\n1 2 3 2 2\") == \"0 1 3\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\") == \"0 2\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, [1, 1, 1, 1, 1]) == \"1 2 2\"\nassert solution(3, [1, 2, 3]) == \"0 2\"\nassert solution(5, [1, 2, 3, 2, 2]) == \"0 1 3\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1 2 2'\nassert solution('5\\n1 2 3 2 2') == '0 1 3'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 1 1 1\\n\") == \"1 2 2\"\n\"\"\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == '1 2 2'\nassert solution(\"3\\n1 2 3\") == '0 2'\nassert solution(\"5\\n1 2 3 2 2\") == '0 1 3'\n\"\"\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '0 1 3'\nassert solution('5\\n1 2 3 2 2') == '0 1 3'\nassert solution('5\\n1 2 3 2 2') == '0 1 3'\n\n\"\"\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1 1 1\n''') == '1 2 2'\nassert solution('''\n1 2 3 2 2\n''') == '0 1 3'\nassert solution('''\n1 2 3 2 1\n''') == '0 1 3'\nassert solution('''\n1 2 3 2 3\n''') == '0 1 3'\nassert solution('''\n1 2 3 4 3\n''') == '0 1 3'\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\n\n\n----\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\n\n---\n'''\n\nfrom collections import Counter\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101101') == '110110'\nassert solution('110') == '01'\nassert solution('10010110') == '01100011'\nassert solution('100011') == '01100011'\nassert solution('10') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 1\\n0 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0\\n1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3 4 1\\n1 0 0 0\\n0 1 1 1\\n1 0 0 1\") == \"1\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 2\") == '1'\nassert solution(\"3 4 1\") == '-1'"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '-1'\nassert solution('3 4 1') == '0'\n\n\"\"\"\n\nn, m, k = map(int, input().split())\narr = []\nfor _ in range(n):\n    arr.append(list(map(int, input().split())))\n\nans = float('inf')\nfor i in range(1 << n):\n    col = []\n    for j in range(m):\n        s = 0\n        for x in range(n):\n            s = (s << 1) | arr[x][j]\n        col.append(s)\n    \n    #print(col)\n    \n    cnt = 0\n    for j in range(m):\n        for x in range(j+1, m):\n            if col[j] & col[x] == col[j]:\n                cnt += 1\n    \n    for j in range(1, m):\n        for x in range(j):\n            if col[j] & col[x] == col[j]:\n                cnt += 1\n\n    if cnt <= k:\n        ans = min(ans, n + m - 2 * cnt)\n    \nprint(ans)\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1\") == \"0\"\nassert solution(\"3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '1'\nassert solution('3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1') == '-1'\nassert solution('3 4 1\\n1 0 0 0\\n0 1 1 1\\n1 0 0 0') == '0'"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '-1'\nassert solution('1,1,1') == '1'\nassert solution('1,1,1,1,1') == '1'\nassert solution('1,1,1,0,1') == '0'\nassert solution('0,1,1,1,1') == '0'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3 4 1\\n1 0 0 0\\n0 1 1 1\\n1 0 0 1\") == \"0\"\nassert solution(\"3 4 1\\n1 0 0 0\\n0 1 1 1\\n1 0 0 1\") == \"0\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == expected_result\nprint(solution(input))\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '1'\nassert solution('3 4 1\\n1 0 0 0\\n0 1 1 1\\n1 0 0 1') == '-1'\nassert solution('3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1') == '0'\n\"\"\"\n\nimport sys\nimport collections\n\nDEBUG = False\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '-1'\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0') == '2 2 3 1 2'\nprint(solution('5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0'))"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\\n\") == \"2 2 3 1 2\"\nprint(solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\\n\"))\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\\n\") == '2 2 3 1 2'\nassert solution(\"3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\\n\") == '9999 10000 9998'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 2 2 3 1 2\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = [0] * n\nfor i in range(n):\n    a[i] = [int(s) for s in sys.stdin.readline().split()]\n\nb = list(a)\nfor j in range(n):\n    b[j][j] = 0\n    for i in range(n):\n        b[j][i] = a[j][i] * a[j][i]\n\nfor i in range(n):\n    print(*b[i])\n"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\\n\") == \"2 2 3 1 2\"\n\"\"\"\n\n\"\"\"\n\u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043f\u0438\u0440\u0430\u043b\u044c\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $m$.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c $n \\times m$, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0432 \u0435\u0451 \"\u0437\u043c\u0435\u0439\u043a\u043e\u0439\" \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $m$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u043c.\n\nSample Input 1:\n\n5\n5\nSample Output 1:\n\n1 2 3 4 5\n16 17 18 19 6\n15 24 25 20 7\n14 23 22 21 8\n13 12 11 10 9\n\nSample Input 2:\n\n3\n4\nSample Output 2:\n\n1 2 3 4\n12 13 14 5\n11 16 15 6\n10 9 8 7\n\nSample Input 3:\n\n7\n6\nSample Output 3:\n\n1 2 3 4 5 6 7\n16 17 18 19 6 7\n15 24 25 20 7 8\n14 23 22 21 8 9\n13 12 11 10 9 8\n12 11 10 9 8 7\n11 10 9 8 7 6\n10 9 8 7 6 5\n9 8 7 6 5 4\n\n\"\"\"\n\nn, m = int(input()), int(input())\n\nmatrix = [[i + j * m for i in range(1, m + 1)] for j in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        print(matrix[i][j], end=\" \")\n    print()"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n0\\n0\\n0\\n0') == '0 0 0 0'\nassert solution('2\\n0 1\\n0 1') == '0 0 0'\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == \"2 2 3 1 2\"\nassert solution(\"3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\") == \"9999 10000 9998\"\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 3 4\") == \"2 2 3 1 2\"\nassert solution(\"3 5 6 7 9\") == \"9 7 6 5 3\"\n\nprint(\"Ok!\")\n\n\n\n\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0') == '2 2 3 1 2'"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9') == '22'\nassert solution('5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1') == '103'\nassert solution('3\\n00 5000\\n00 5000\\n00 5000') == '0'\nassert solution('1\\n00 5000\\n00 5000') == '0'\nassert solution('1\\n11 1\\n01 1\\n00 100') == '103'\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == \"103\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == \"103\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n\") == \"22\"\n\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\n\nassert solution(\"00 5000\\n00 5000\\n00 5000\") == \"0\"\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == \"103\"\n\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == \"103\"\nassert solution(\"3\\n00 5000\\n00 5000\\n00 5000\") == \"0\"\n\n-------TESTING-------\n\nsolution('5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1')\nsolution('3\\n00 5000\\n00 5000\\n00 5000')\nsolution('6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9')\nsolution('7\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\nsolution('8\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\n\n\n\n\n------- TESTING: DETAILS-------\n\nsolution('3\\n00 5000\\n00 5000\\n00 5000')\nNo one will get out of the room by this method because the total influence of the room will be 0.\n\nsolution('7\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\n2 will get out by this method.\n\nsolution('6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9')\n1 will get out by this method.\n\nsolution('5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1')\nAll the people will get out by this method.\n\nsolution('3\\n00 5000\\n00 5000\\n00 5000')\nAll the people will get out by this method.\n\nsolution('8\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\n2 will get out by this method.\n\nsolution('7\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\n1 will get out by this method.\n\nsolution('6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9')\n0 will get out by this method.\n\nsolution('5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1')\n0 will get out by this method.\n\nsolution('3\\n00 5000\\n00 5000\\n00 5000')\n0 will get out by this method.\n\n\n\n\n------- TESTING: DETAILS-------\n\nsolution('3\\n00 5000\\n00 5000\\n00 5000')\nNo one will get out of the room by this method because the total influence of the room will be 0.\n\nsolution('7\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\n2 will get out by this method.\n\nsolution('6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9')\n1 will get out by this method.\n\nsolution('5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1')\nAll the people will get out by this method.\n\nsolution('3\\n00 5000\\n00 5000\\n00 5000')\nAll the people will get out by this method.\n\nsolution('8\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\n2 will get out by this method.\n\nsolution('7\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\n1 will get out by this method.\n\nsolution('6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9')\n0 will get out by this method.\n\nsolution('5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1')\n0 will get out by this method.\n\nsolution('3\\n00 5000\\n00 5000\\n00 5000')\n0 will get out by this method.\n\n\n\n\n\n------- TESTING: DETAILS-------\n\nsolution('3\\n00 5000\\n00 5000\\n00 5000')\nNo one will get out of the room by this method because the total influence of the room will be 0.\n\nsolution('7\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n10 10\\n10 10\\n10 10')\n2 will get out by this method.\n\nsolution('6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9')\n1 will get out by this method.\n\nsolution('5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1')\nAll the people"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == \"103\"\nassert solution(\"00 5000\\n00 5000\\n00 5000\") == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 1\\n10 1\\n00 100\\n10 1\\n01 1\\n') == '103'\nassert solution('11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\\n') == '105'\nassert solution('11 1\\n01 1\\n00 100\\n10 1\\n01 1\\n') == '103'\nassert solution('11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\\n') == '105'\nassert solution('11 1\\n01 1\\n00 100\\n10 1\\n01 1\\n') == '103'\n\"\"\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"00 5000\\n00 5000\\n00 5000\") == \"0\"\n\"\"\""
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == \"103\"\nassert solution(\"3\\n00 5000\\n00 5000\\n00 5000\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9') == '22'\nassert solution('11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28') == '105'\nassert solution('11 0\\n10 0\\n00 5000\\n11 5000\\n10 5000') == '0'\nassert solution('11 2\\n10 1\\n00 100\\n11 1\\n01 1') == '103'\n\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\\n\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\\n\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\\n\") == \"NO\"\nassert solution(\"2 4 10\\n2 1 3\\n4 3 6\\n\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\n\"\"\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 9\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\") == \"NO\"\nassert solution(\"3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n3 3 2 3\"\nassert solution(\"3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6\\n5 3 7\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6') == 'YES\\n2 3 2 3'\nassert solution('3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6') == 'YES\\n1 3 1 3'\nassert solution('3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6') == 'NO'\n\n\n'''\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\") == \"NO\"\n\n---"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4 9\n2 3 1 2\n2 1 3\n4 3 6\n\"\"\") == \"YES\\n2 3 2 3\"\n\nassert solution(\"\"\"\n3 4 10\n2 3 1 2\n2 1 3\n4 3 6\n\"\"\") == \"YES\\n1 3 1 3\"\n\nassert solution(\"\"\"\n3 4 5\n1 3 1 2\n2 1 3\n5 3 6\n\"\"\") == \"NO\"\n\n\nassert solution(\"\"\"\n3 4 9\n1 3 1 2\n2 1 3\n4 3 6\n\"\"\") == \"YES\\n3 3 2 3\"\n\nassert solution(\"\"\"\n3 4 10\n2 3 1 2\n2 1 3\n4 3 6\n\"\"\") == \"YES\\n1 3 1 3\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\\n\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\\n2 1 4 3\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\nassert solution(\"5 1\\n4 3 1 2 5\\n2 3 4 1 5\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == \"YES\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().strip().split()))\nq = list(map(int, sys.stdin.readline().strip().split()))\nm = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n2 3 4 1\\n1 2 3 4') == 'NO'\nassert solution('4 1\\n4 3 1 2\\n3 4 2 1') == 'YES'\nassert solution('4 3\\n4 3 1 2\\n2 1 4 3') == 'YES'\nassert solution('4 2\\n4 3 1 2\\n2 1 4 3') == 'NO'\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u0437\u043d\u0430\u0447\u043a\u0438 \u0438\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\n\n1) \u0435\u0441\u043b\u0438 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c, \u0442\u043e \u0442\u043e\u0433\u0434\u0430 \u043c\u044b \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\n2) \u0435\u0441\u043b\u0438 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c, \u0442\u043e \u0442\u043e\u0433\u0434\u0430 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u044d\u0442\u043e \u043d\u0430\u0448\u0435 \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\"\"\""
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n2 3 4 1') == 'NO'\nassert solution('4 1\\n4 3 1 2') == 'YES'\nassert solution('4 3\\n4 3 1 2') == 'YES'\nassert solution('4 2\\n4 3 1 2') == 'YES'\n\"\"\"\n\nn, k = map(int, input().split())\nq = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\nfor i in range(k):\n    if s[i]!= q[i]:\n        print('YES')\n        exit()\n\nprint('NO')\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\\n2 1 4 3\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 1\n4 3 1 2\n3 4 2 1''') == \"NO\"\nassert solution('''4 1\n4 3 1 2\n2 1 4 3''') == \"YES\"\nassert solution('''4 1\n4 3 1 2\n2 1 4 3''') == \"YES\"\n\n'''\n\nimport collections"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n2 3 4 1\\n1 2 3 4') == 'NO'\nassert solution('4 1\\n4 3 1 2\\n3 4 2 1') == 'YES'\nassert solution('4 3\\n4 3 1 2\\n2 1 4 3') == 'YES'\nassert solution('4 2\\n4 3 1 2\\n2 1 4 3') == 'NO'\n\"\"\""
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\\n2 1 4 3\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n2 3 4 1\\n1 2 3 4') == 'NO'\nassert solution('4 1\\n4 3 1 2\\n3 4 2 1') == 'YES'\nassert solution('4 2\\n4 3 1 2\\n2 1 4 3') == 'YES'\nassert solution('4 1\\n4 3 1 2\\n2 1 4 3') == 'NO'"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4) == \"1 1\\n3 1\"\nassert solution(7) == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nassert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n\"\"\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"1 1\"\nassert solution(\"7\") == \"2 1\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == [1, 1], \"Case 1 failed\"\nassert solution(\"7\") == [2, 1], \"Case 2 failed\"\n\n\"\"\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"\"\"1 1\n3 1\n1 5\n4 4\"\"\"\n\nassert solution(\"7\") == \"\"\"2 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\"\"\"\n\nassert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"2 1\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1 1\"\nassert solution(\"7\") == \"2 1\"\n\"\"\""
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '1 1\\n3 1\\n1 5\\n4 4'\nassert solution('7') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n\n\"\"\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\"\n\"\"\"\n\nfrom itertools import combinations\nfrom collections import defaultdict\n\nN = int(stdin.readline())\nassert 1 <= N <= 10 ** 3"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"1 1\"\nassert solution(\"7\") == \"2 1\"\n\n\"\"\""
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('3\\n1 1 3') == '2'\nassert solution('3\\n2 3 1') == '3'\nassert solution('3\\n1 3 2') == '-1'\nassert solution('2\\n1 1') == '1'\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\nassert solution('1') == 1\nassert solution('1 2 3') == -1\nassert solution('1 2') == 2\nassert solution('1 2 3 4 5') == 2\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3''') == '-1'\nassert solution('''1\n1''') == '3'\n\"\"\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('3\\n1 2 3\\n') == '-1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"2\\n1\\n2\") == \"1\"\nassert solution(\"3\\n1\\n2\\n3\") == \"3\"\nassert solution(\"3\\n1\\n2\\n3\\n1\\n2\") == \"3\"\nassert solution(\"1\\n1\\n1\") == \"-1\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('4\\n1 2 4 1') == '4'\n\"\"\""
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3\\n2\") == \"3\"\nassert solution(\"1\\n3\\n2\\n1\") == \"1\"\nassert solution(\"1\\n2\\n3\") == \"1\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n3') == '1'\nassert solution('1\\n2\\n3') == '2'\nassert solution('1\\n1\\n1') == '-1'\nassert solution('1\\n3\\n1\\n3') == '2'\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n3') == '-1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"2 3 4 5\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"0 1\") == \"-1\"\nassert solution(\"0 0\") == \"1\"\nassert solution(\"0 0 2\") == \"1\"\n\n\"\"\"\nimport sys\n\nclass Polynomial:\n    def __init__(self, coeffs):\n        self.coeffs = coeffs\n\n    def __repr__(self):\n        return \"Polynomial(\" + \", \".join(str(c) for c in self.coeffs) + \")\"\n\n    def __add__(self, other):\n        return Polynomial([\n            a + b\n            for a, b in zip(self.coeffs, other.coeffs)\n        ])\n\n    def __sub__(self, other):\n        return Polynomial([\n            a - b\n            for a, b in zip(self.coeffs, other.coeffs)\n        ])\n\n    def __eq__(self, other):\n        return self.coeffs == other.coeffs\n\n    def __call__(self, x):\n        y = 0\n        for a, b in zip(self.coeffs, range(len(self.coeffs))):\n            y = y + a * x**b\n        return y % (10**9+7)"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"46 2\") == \"7 0 0 1 1 1 1\"\nassert solution(\"2018 214\") == \"3 92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"46 2\\n\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\\n\") == \"3\\n92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('46 2') == '7\\n0 1 0 0 1 1 1'\nassert solution('2018 214') == '3\\n92 205 1'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('46 2') == '7\\n0 1 0 0 1 1 1'\nassert solution('2018 214') == '3\\n92 205 1'\nassert solution('45 0') == '0'\n\"\"\"\n\n\nimport math\n\nfrom bisect import bisect_left, bisect_right"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"46 2\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n\"\"\"\n\np, k = map(int, input().split())\n\nmax_a = k - p\n\nx = max_a + 1\ny = p + 1\nd = 0"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\nassert solution(\"2 2\") == \"2 1 0 1\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"1 0\") == \"-1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"0 10\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"6 2\") == \"0 1 0 1 0 1 1\"\nassert solution(\"9 10\") == \"9\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"46 2\") == '7\\n0 1 0 0 1 1 1'\nassert solution(\"2018 214\") == '3\\n92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('46 2\\n') == '7\\n0 1 0 0 1 1 1'\nassert solution('2018 214\\n') == '3\\n92 205 1'\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 20 20\\n6 2\\n1 3\\n2 6') == '5.000000000000000'\n\n\"\"\""
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.0\"\n\"\"\"\n\nn, p, q = map(int, input().split())\n\na = [0] * n\nb = [0] * n\n\nfor i in range(n):\n    a[i], b[i] = map(int, input().split())\n\nprint(min(\n    sum(a[i] * 2.5 for i in range(n)) / sum(b[i] * 2.5 for i in range(n)),\n    sum(a[i] for i in range(n)) / sum(b[i] for i in range(n))\n))\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 20 20\n6 2\n1 3\n2 6''') == '5.0'\nassert solution('''4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 20 20\\n6 2\\n1 3\\n2 6') == '5.0'\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 20 20\\n6 2\\n1 3\\n2 6') == '5.0'\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.0\"\n\"\"\""
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 20 20\\n6 2\\n1 3\\n2 6') == '5.000000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == '5.0'\nassert solution(\"4 1 1\\n2 3\\n3 2\\n2 3\\n3 2\") == '0.4'\n\nimport math\nimport functools"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.000000000000000\"\nassert solution(\"4 1 1\\n2 3\\n3 2\\n2 3\\n3 2\\n3 2\") == \"0.400000000000000\"\n\n-----Constraints-----\n3 \u2264 n \u2264 10 000\n1 \u2264 p, q \u2264 1 000 000\na_i, b_i are integers\n\"\"\""
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == 4\nassert solution(\"8 2\") == 5\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\nassert solution(\"8 2\") == \"5\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 10\") == \"1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 2') == '5'\nassert solution('2 3') == '4'\n\n'''"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"4\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\nassert solution('8 10') == '8'\nassert solution('8 100') == '8'\nassert solution('9 100') == '9'\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == 4\nassert solution(\"8 2\") == 5\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2, 3) == 4\nassert solution(8, 2) == 5\n\"\"\"\n\na, b = map(int, stdin.readline().split())"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\nassert solution('2\\n1 1') == 'Agasa'"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"2\\n1 1\") == \"Agasa\"\n\"\"\""
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\nassert solution('2\\n1 1') == 'Agasa'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ncards = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\nassert solution('2\\n1 1') == 'Agasa'\n\"\"\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\nassert solution('2\\n1 1') == 'Agasa'\n\"\"\"\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\nconan = [0] * n\nagasa = [0] * n\n\nconan[0] = arr[0]\nagasa[0] = arr[0]\n\nfor i in range(1, n):\n    conan[i] = max(conan[i - 1], arr[i])\n    agasa[i] = min(agasa[i - 1], arr[i])\n\nfor i in range(n - 1):\n    if conan[i] > agasa[i]:\n        print('Conan')\n        exit(0)\n\nprint('Agasa')\n"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"Agasa\"\nassert solution(\"3 1 2\") == \"Conan\"\n\"\"\"\n\n\n\"\"\"\nIn the first example, Conan can just choose the card having number 7 on it and hence remove all the cards. After that, there are no cards left on Agasa's turn.\n\nIn the second example, no matter which card Conan chooses, there will be one one card left, which Agasa can choose. After that, there are no cards left when it becomes Conan's turn again.\n\"\"\""
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n4 5 7\n''') == 'Conan'\nassert solution('''\n2\n1 1\n''') == 'Agasa'\nassert solution('''\n5\n1 5 4 7 10\n''') == 'Agasa'\nassert solution('''\n4\n4 5 7 10\n''') == 'Conan'\nassert solution('''\n4\n5 4 7 10\n''') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4 5 7') == \"Conan\"\nassert solution('2\\n1 1') == \"Agasa\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7\") == 'Conan'\nassert solution(\"1 1\") == 'Agasa'\nprint(\"Passed all test cases!\")\n"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"2\\n1 1\") == \"Agasa\"\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n..#\\n#.#') == '3 3\\n##.\\n..#\\n#.#'\nassert solution('2 2\\n.#\\n#.') == '2 2\\n.#\\n#.'\n\"\"\""
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '\\n'.join([\n    '..#',\n    '.#.',\n    '#.#',\n])\n\nassert solution('1 1') == '\\n'.join([\n    '..',\n    '..',\n])\n\"\"\"\n\n\"\"\"\nimport collections\nimport itertools\nfrom math import gcd"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == \"\"\"3 3\n##.\n..#\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n..#\\n#.#\") == \"2 3\\n#.#\\n#.#\"\nprint(solution(\"2 3\\n..#\\n#.#\"))\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '.'\nassert solution('0\\n') == '#'\nassert solution('111\\n') == '#.'\nassert solution('11\\n') == '#.#'\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"\"\"3 3\n..#\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 3\n..#\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 3\n\"\"\") == \"\"\"\n3 3\n..#\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(A=1, B=2) == '3 3\\n##.\\n..#\\n#.#'\n\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3 3\\n##.\\n..#\\n#.#\"\n\n-----Notes-----\nExplanation for the example from the sample input:\nThere are two connected components, one of them is painted black and the other one is painted white.\n\"\"\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\\n\") == \"4\\n1 3 4 5 \"\nassert solution(\"3 2\\n+ 1\\n- 2\\n+ 2\\n- 1\\n\") == \"1\\n3 \"\nassert solution(\"2 4\\n+ 1\\n- 1\\n+ 2\\n- 2\\n\") == \"0\\n\"\nassert solution(\"5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\\n\") == \"3\\n2 3 5 \"\nassert solution(\"2 4\\n+ 1\\n- 1\\n+ 2\\n- 2\\n\") == \"0\\n\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1''') == '4\\n1 3 4 5'\nassert solution('''3 2\n+ 1\n- 2\n+ 2\n- 1''') == '1\\n3'\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1''') == '0\\n'\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 4\n+ 1\n+ 2\n- 2\n- 1\n\"\"\") == 4, 'wrong result'\nassert solution(\n\"\"\"\n3 2\n+ 1\n- 2\n+ 2\n- 1\n\"\"\") == 1, 'wrong result'\nassert solution(\n\"\"\"\n5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n\"\"\") == 3, 'wrong result'\nassert solution(\n\"\"\"\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\"\"\") == 0, 'wrong result'\nprint('Success')"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\") == \"4\\n1 3 4 5\"\n\n\"\"\"\n\nfrom typing import Dict\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\\n\") == \"4\\n1 3 4 5 \"\n\n\"\"\"\n\n\"\"\"\n\nn, m = [int(i) for i in stdin.readline().split(' ')]\n\nstdin.readline()\n\nleader = []\n\nfor i in range(m):\n    op = stdin.readline().split(' ')\n    if op[0] == '+':\n        leader.append(int(op[1]) - 1)\n    elif op[0] == '-':\n        try:\n            leader.remove(int(op[1]) - 1)\n        except:\n            pass\n\nprint(len(leader))\nprint(' '.join([str(i) for i in leader]))\n\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\\n\") == \"4\\n1 3 4 5\"\nassert solution(\"3 2\\n+ 1\\n- 2\\n+ 2\\n- 1\\n\") == \"1\\n3\"\nassert solution(\"2 4\\n+ 1\\n- 1\\n+ 2\\n- 2\\n\") == \"0\\n\"\nassert solution(\"5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\\n\") == \"3\\n2 3 5\"\nassert solution(\"3 2\\n+ 1\\n- 2\\n+ 2\\n- 1\\n\") == \"1\\n3\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 1 2') == '1 3'\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\") == \"4\\n1 3 4 5\"\nassert solution(\"3 2\\n+ 1\\n- 2\") == \"1\\n3\"\nassert solution(\"2 4\\n+ 1\\n- 2\\n+ 2\\n- 1\") == \"0\"\nassert solution(\"5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\") == \"3\\n2 3 5\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''5 4\n+ 1\n+ 2\n- 2\n- 1'''\n) == '4\\n1 3 4 5'\nassert solution(\n'''3 2\n+ 1\n- 2\n- 1'''\n) == '1\\n3'\nassert solution(\n'''2 4\n+ 1\n- 1\n+ 2\n- 2'''\n) == '0\\n3'\nassert solution(\n'''5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4'''\n) == '3\\n2 3 5'\nassert solution(\n'''2 4\n+ 1\n- 1\n+ 2\n- 2'''\n) == '0\\n3'\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\") == \"4\\n1 3 4 5\"\nassert solution(\"3 2\\n+ 1\\n- 2\") == \"1\\n3\"\nassert solution(\"2 4\\n+ 1\\n- 1\\n+ 2\\n- 2\") == \"0\\n\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n1 2 3\\n9\") == \"4\"\n\nassert solution(\"5 1\\n5 4 2 4 5\\n2\\n5\") == \"1\"\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\nTest cases:\n\n2 2\n1 3\n5\n\n1\n5\n5\n5\n0\n\n\n4 4\n1 5 10 20 30\n15\n6\n\n0\n\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n2 2\n1 2\n2\n0\n\n\n1\n1\n1\n1\n1\n\n\n3 2\n1 2\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n2 2\n1 2\n2\n1\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n\n2 2\n1 2\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n1\n1\n1\n1\n1\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n0"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3\\n9\\n\") == \"4\"\nassert solution(\"3 3\\n1 2 3\\n9\\n\") == \"1\"\nassert solution(\"5 1\\n5 4 2 4 5\\n2\\n5\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n1 2 3\\n9') == '4'\nassert solution('1 2 3\\n1 2 3\\n9\\n8') == '0'\nassert solution('5 1\\n5 4 2 4 5\\n2\\n5\\n') == '1'\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2 3\\n9') == '4'\nassert solution('5 1\\n5 4 2 4 5\\n2') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n1 2 3\\n9\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 3 1 5\\n9\\n\") == \"0\"\nassert solution(\"1 2 3\\n1 2 3\\n1\\n\") == \"0\"\nassert solution(\"1 2 3 4\\n1 2 3 4\\n2\\n\") == \"1\"\nassert solution(\"1 2 3 4\\n1 2 3 4\\n3\\n\") == \"0\"\nassert solution(\"1 2 3 4\\n1 2 3 4\\n4\\n\") == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 3\\n9') == '4'\nassert solution('4 3\\n1 2 3\\n9\\n1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4 5\\n9\") == \"1\"\nassert solution(\"2 2\\n2 2\\n3\") == \"0\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 2 4 5\\n5 4 2 4 5\\n9\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 4 2 4 5\") == \"1\"\nassert solution(\"5 4 2 4 5\") == \"1\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cba') == 'cbd'\n\nsolution('abcd')\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcd') == 'abda'\nassert solution('cba') == 'cbd'\nassert solution('zzz') == 'aaaa'\nassert solution('aaaa') == 'zzzz'\nassert solution('qwer') == 'qwert'\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cba\") == \"cbd\"\nassert solution(\"abcd\") == \"abda\"\nassert solution(\"c\") == \"a\"\nassert solution(\"bb\") == \"ab\"\nassert solution(\"bbbb\") == \"abba\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cba\") == \"cbd\"\nassert solution(\"bcc\") == \"bbc\"\nassert solution(\"abc\") == \"abd\"\nassert solution(\"aab\") == \"abb\"\nassert solution(\"abcd\") == \"abda\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cba\") == \"cbd\"\nassert solution(\"abcd\") == \"abda\"\nassert solution(\"abdacba\") == \"abdacbd\"\nassert solution(\"cba\") == \"cbd\"\nassert solution(\"abdacba\") == \"abdacbd\"\n\n\"\"\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cba') == 'cbd'\nassert solution('abc') == 'abcd'\nassert solution('abcd') == 'abda'\nassert solution('aaaa') == 'aaaab'\nassert solution('aabaa') == 'abdab'\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cba') == 'cbd'\nassert solution('abcd') == 'abda'\nassert solution('cba') == 'cbd'\n\"\"\"\n\n\nfrom typing import List, Dict\nfrom collections import deque\n\n\nclass Solution:\n    def __init__(self):\n        self.tolerable_pairs = {\n            i: {char: deque(list()) for char in range(ord('a'), ord('z') + 1)}\n            for i in range(1, 26)\n        }\n        self.lexicographically_larger_tolerable_strings = {\n            i: {char: deque(list()) for char in range(ord('a'), ord('z') + 1)}\n            for i in range(1, 26)\n        }\n\n    def is_palindrome(self, s: str) -> bool:\n        return s == s[::-1]\n\n    def is_tolerable(self, s: str, p: int) -> bool:\n        return (\n                all(\n                    self.is_palindrome(chunk) for chunk in\n                    map(\n                        str,\n                        zip(s[:p], s[p:]))\n                ) and\n                len(s) == p\n        )\n\n    def add_tolerable_pairs(self, s: str, p: int) -> None:\n        for i in range(p):\n            if self.is_palindrome(s[:p]):\n                self.tolerable_pairs[p][chr(ord(s[i]) - ord('a'))].append(s[:p])\n        for i in range(p):\n            if self.is_palindrome(s[p:]):\n                self.tolerable_pairs[p][chr(ord(s[i]) - ord('a'))].append(s[p:])\n\n    def add_lexicographically_larger_tolerable_strings(self, s: str, p: int) -> None:\n        for i in range(p):\n            self.lexicographically_larger_tolerable_strings[p][chr(ord(s[i]) - ord('a'))].append(s[:p])\n\n    def lexicographically_larger_tolerable_string(self, s: str, p: int) -> str:\n        if len(s) == p:\n            return s\n        for i in range(p):\n            if self.is_palindrome(s[:p]):\n                for j in range(ord('a'), ord('z') + 1):\n                    if chr(j) in self.tolerable_pairs[p]:\n                        for chunk in self.tolerable_pairs[p][chr(j)]:\n                            self.lexicographically_larger_tolerable_strings[p][chr(j)].append(s[:p] + chunk)\n        for i in range(p):\n            if self.is_palindrome(s[p:]):\n                for j in range(ord('a'), ord('z') + 1):\n                    if chr(j) in self.tolerable_pairs[p]:\n                        for chunk in self.tolerable_pairs[p][chr(j)]:\n                            self.lexicographically_larger_tolerable_strings[p][chr(j)].append(s[p:] + chunk)\n        for i in range(p):\n            if self.is_palindrome(s[i:]):\n                for j in range(ord('a'), ord('z') + 1):\n                    if chr(j) in self.tolerable_pairs[p]:\n                        for chunk in self.tolerable_pairs[p][chr(j)]:\n                            self.lexicographically_larger_tolerable_strings[p][chr(j)].append(chunk + s[p:i] + chunk)\n        return self.lexicographically_larger_tolerable_strings[p][chr(ord(s[p]) - ord('a'))][0]\n\n    def solution(self, stdin: str) -> str:\n        n, p = [int(i) for i in stdin.split(' ')]\n        s = stdin.split('\\n')[1]\n        self.add_tolerable_pairs(s, p)\n        self.add_lexicographically_larger_tolerable_strings(s, p)\n        for j in range(len(self.lexicographically_larger_tolerable_strings[p][chr(ord('a') - ord('a'))])):\n            print(self.lexicographically_larger_tolerable_string(s, p))\n\n\nSolution().solution(input())\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cba') == 'cbd'\nassert solution('abcd') == 'abda'\nassert solution('ab') == 'ab'\nassert solution('cd') == 'NO'\nassert solution('bc') == 'NO'\n\"\"\""
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cba') == 'cbd'\nassert solution('abcd') == 'abda'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cba\") == \"cbd\"\nassert solution(\"abcd\") == \"abda\"\nassert solution(\"abcc\") == \"abdd\"\nassert solution(\"abca\") == \"abdb\"\nassert solution(\"abcd\") == \"abdc\""
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0101\") == \"once again\"\nassert solution(\"010101\") == \"tokitsukaze\"\nassert solution(\"0100\") == \"once again\"\nassert solution(\"01010\") == \"quailty\"\nassert solution(\"010111101101\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"010\") == \"tokitsukaze\"\nassert solution(\"010101\") == \"once again\"\nassert solution(\"0101010\") == \"tokitsukaze\"\n\"\"\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0101') == 'once again'\nassert solution('010101') == 'tokitsukaze'\nassert solution('0011') == 'once again'\nassert solution('11010') == 'quailty'\nassert solution('11010') == 'once again'"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(0,1) == \"once again\"\nassert solution(0,2) == \"tokitsukaze\"\nassert solution(0,3) == \"quailty\"\nassert solution(0,4) == \"once again\"\nassert solution(0,5) == \"tokitsukaze\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0100\") == \"tokitsukaze\"\nassert solution(\"101010\") == \"quailty\"\nassert solution(\"11101\") == \"once again\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"010\") == \"quailty\"\nassert solution(\"1101010\") == \"tokitsukaze\"\nassert solution(\"11101010\") == \"once again\"\nassert solution(\"11101101010\") == \"once again\"\nassert solution(\"11101101010\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0101\") == \"quailty\"\nassert solution(\"010101\") == \"once again\"\nassert solution(\"0111\") == \"tokitsukaze\"\nassert solution(\"11111\") == \"once again\"\nassert solution(\"11101\") == \"tokitsukaze\"\n\n\"\"\"\n\n\nimport itertools\nimport collections\nimport typing\n\n\nclass Poker:\n    def __init__(self, cards: str):\n        self._cards = cards\n        self.cards = cards\n\n    def flip(self, n: int, k: int) -> None:\n        for i, j in zip(itertools.islice(self._cards, 0, n, k), itertools.islice(self._cards, k, n, k)):\n            self._cards = self._cards.replace(i, \"1\", 1)\n            self._cards = self._cards.replace(j, \"0\", 1)\n            self._cards = self._cards.replace(\"1\", j)\n            self._cards = self._cards.replace(\"0\", i)\n\n    def count(self) -> int:\n        return collections.Counter(self._cards)[\"1\"]\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0101\") == \"tokitsukaze\"\nassert solution(\"010101\") == \"once again\"\nassert solution(\"110111\") == \"once again\"\nassert solution(\"101010\") == \"quailty\"\nassert solution(\"111011\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0101') == 'tokitsukaze'\nassert solution('010101') == 'once again'\nassert solution('01010101') == 'once again'\nassert solution('0101010') == 'tokitsukaze'\n\n\"\"\""
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80') == '7'\nassert solution('1 2 10\\n11\\n15 7') == '7'\n\n---\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80') == '50'\nassert solution('2 3 10\\n8 2 5') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\\n\") == \"50\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 50\\n20 100\\n60 10 40 80\\n') == '7'\nassert solution('1 2 10\\n11\\n15 7\\n') == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == \"50\"\n\"\"\"\n\n\"\"\"\nn, k, p = list(map(int, input().split()))\narr = list(map(int, input().split()))\nkeys = list(map(int, input().split()))\n\npairs = [arr[i:i + 2] for i in range(0, len(arr), 2)]\n\ndist = []\nfor i in pairs:\n    dist.append(abs(i[0] - i[1]))\n\nprint(min(dist))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\\n\") == \"50\"\n\nassert solution(\"1 2 10\\n11\\n15 7\\n\") == \"7\"\n\n\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == '50'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10\\n4 6\\n8 7\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\\n\") == \"50\"\nassert solution(\"1 2 10\\n11\\n15 7\\n\") == \"7\"\n\"\"\"\n\nimport sys\n\nn, k, p = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\na.sort()\nb.sort()\n\ni = 0\nj = 0\ntime = 0\n\nwhile i < n:\n    if a[i] <= b[j]:\n        time += b[j] - a[i] + 1\n        i += 1\n    else:\n        j += 1\nprint(time)"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1\") == \"1 6\"\n\"\"\"\n\nn, k = map(int, input().split())\na, b = map(int, input().split())\na %= k\nb %= k\nprint(min(n*k-b, n*k-a+1)) if a > 0 else print(min(a, n*k-b))\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 3\n1 1\n\"\"\") == \"1 6\"\nassert solution(\"\"\"3 2\n0 0\n\"\"\") == \"1 3\"\nassert solution(\"\"\"1 10\n5 3\n\"\"\") == \"5 5\"\n\"\"\""
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 1\\n\") == \"1 6\"\nassert solution(\"3 2\\n0 0\\n\") == \"1 3\"\nassert solution(\"1 10\\n5 3\\n\") == \"5 5\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 1\") == \"1 6\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1\\n\") == \"1 6\"\nassert solution(\"3 2\\n0 0\\n\") == \"1 3\"\nassert solution(\"1 10\\n5 3\\n\") == \"5 5\"\n\nprint('The script is working')"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == '1 6'\nassert solution(\"3 2\") == '1 3'\nassert solution(\"1 10\") == '1 5'\nassert solution(\"10 2\") == '1 4'\n\n\"\"\"\n\nn, k = map(int, input().split())\na, b = map(int, input().split())\nprint(min(n - 1 + 1, (n - 1) * k + 1) - max(a, b))\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1 6'\nassert solution('10 3') == '1 3'\nassert solution('2 1') == '1 2'\nassert solution('2 2') == '1 2'\n\n\"\"\"\n\nfrom math import ceil\n\na, b = [int(x) for x in stdin.split()]"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1\") == \"1 6\"\nassert solution(\"3 2\\n0 0\") == \"1 3\"\nassert solution(\"1 10\\n5 3\") == \"5 5\"\n\"\"\""
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"3 5\"\n\"\"\"\n\nn, k = (int(num) for num in stdin.split(\" \"))\n\ns, a, b = (int(num) for num in stdin.split(\" \"))\n\nx = (n * k - (2 * a)) + 1\ny = (n * k - (2 * b)) + 1\n\nprint(x, y)\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n0 0\") == \"1 3\"\nassert solution(\"1 10\\n5 3\") == \"5 5\"\nassert solution(\"1 10\\n0 0\") == \"1 6\"\n\n'''\n\nimport sys\nimport itertools"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5 -1\\n') == '2\\n2 3\\n3 3'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 -1\") == \"2\\n2 3\"\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n-2 5 -1\\n') == '2\\n2 3\\n3 3'\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 -2 5 -1\\n') == '2 2 3\\n3 3 3'\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n-2 5 -1') == '2\\n2 3'\n\"\"\"\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\"\nprint(\"PASSED\")\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2 5 -1\n\n-----\n3\n-2"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-2 5 -1\") == '2\\n2 3'\n\"\"\""
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 -2 5 -1\") == \"2 2 3\"\nassert solution(\"4 1 5 -10\") == \"3 3 4\"\n\"\"\""
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\"\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('-10') == '-10'\nassert solution('2 1 -1') == '2 1'\nassert solution('5 5 5') == '5 5'\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\nassert solution(\"1\\n0 4\") == \"1\"\n\"\"\"\n\nfrom math import log\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 3\\n3 4\") == \"1\"\nassert solution(\"1\\n0 4\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\nassert solution(\"1\\n0 4\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 3 5\") == \"3\"\nassert solution(\"1\\n0 4\") == \"1\"\nassert solution(\"2\\n1 10 2\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 3\\n1 5') == '3'\nassert solution('1 10\\n2 2') == '3'\nassert solution('2 10\\n2 2') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\nassert solution(\"1\\n0 4\") == \"1\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 10\\n2 2') == '3'\nassert solution('1\\n0 4') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 4\\n1 5\") == \"3\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\"\nassert solution(\"1\\n0 4\") == \"1\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 3\\n1 5\") == \"3\"\n\nassert solution(\"1 10\\n2 2\") == \"1\"\n\nassert solution(\"2 10\\n2 2\") == \"2\"\n\"\"\"\nfrom collections import Counter\nimport math"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == 3\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 18\\n5 6 1 10 12 2\") == \"16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18\"\nassert solution(\"3 50\\n25 25 50\") == \"3\\n0 25 50\"\nassert solution(\"1 2\\n0\") == \"1\\n0\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10\\n25 25 50') == '3'\n\"\"\"\n\nn, k = map(int, input().split())\ncoins = list(map(int, input().split()))\ncoins.sort()\n\nq = 0\nx = 0\nfor i in range(n):\n    if x + coins[i] < k:\n        x += coins[i]\n        q += 1\n    else:\n        break\nprint(q)\nprint(' '.join([str(i) for i in range(q + 1)]))\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\n8 25 12 2\") == \"1\\n0 25\"\nassert solution(\"4 8\\n8 25 12 2\") == \"1\\n0 25\"\nassert solution(\"4 8\\n8 25 12 2\") == \"1\\n0 25\"\nassert solution(\"4 8\\n8 25 12 2\") == \"1\\n0 25\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 18\\n5 6 1 10 12 2') == '16'\n\n'''\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''6 18\n5 6 1 10 12 2\n'''\n) == '''16\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 '''\n\nassert solution(\n'''3 50\n25 25 50\n'''\n) == '''3\n0 25 50'''\n\nassert solution(\n'''5 3\n2 3 1 2 3\n'''\n) == '''2\n0 1 2'''\n\nassert solution(\n'''5 5\n1 3 2 5 3\n'''\n) == '''3\n0 1 2 3'''\n\nassert solution(\n'''5 5\n2 3 2 2 3\n'''\n) == '''3\n0 1 2 3'''"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 18\\n5 6 1 10 12 2\") == \"16\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"6 18\\n5 6 1 10 12 2\"\n) == \"16\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 50\\n25 25 25 25\\n\") == \"3\\n0 25 50\\n\"\nassert solution(\"6 18\\n5 6 1 10 12 2\\n\") == \"16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18\\n\"\n\"\"\""
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n3 5 1 4\") == \"0 1 2 3\"\nassert solution(\"4 6\\n1 5 3 2 4\") == \"0 1 2 3\"\n\"\"\""
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n6\\n1\\n10\\n12\\n2') == '16'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6') == 3\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n\n\nclass Solution:\n    def minimum_num_of_coins(self, n: int) -> int:\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        coins = [1, 5, 10, 25]\n        for i in range(4):\n            for j in range(coins[i], n + 1):\n                dp[j] = min(dp[j], dp[j - coins[i]] + 1)\n        return dp[-1]\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == 3\nassert solution('2') == 2\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('10') == '0'\nassert solution('11') == '1'\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '5'\nassert solution('6') == '6'\nassert solution('10') == '6'\n\"\"\"\n\n\nfrom collections import Counter, deque\n\nclass Solution:\n    def minPackets(self, N: int) -> int:\n        if N < 6:\n            return N\n\n        s = set()\n        while N!= 0:\n            if N in s:\n                break\n            s.add(N)\n            for i in range(6, 0, -1):\n                if N >= i * i:\n                    N -= i * i\n\n        return len(s)\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 2\nassert solution(\"5\") == 3\nassert solution(\"10\") == 4\n\nassert solution(\"2\") == 2\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10\") == \"50\"\nassert solution(\"3 1\") == \"21\"\n\"\"\"\nimport sys\nimport os\nfrom functools import reduce\nfrom operator import mul"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n2 2\\n4 3\") == \"21\"\nassert solution(\"1 10\\n\") == \"50\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '6'\n\nassert solution('3\\n1 1\\n2 2\\n3 3') == '6'\n\nassert solution('1\\n5 10') == '5'\n\n\"\"\""
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n10 1\\n20 2\\n30 3') == '180'\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\n\"\"\""
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"1\\n5 10\") == \"50\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n2 2\\n4 3\") == \"21\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10\\n20\\n30\") == \"50\"\nassert solution(\"2\\n3 1\\n2 2\\n4 3\") == \"21\"\n\"\"\"\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nf = int(input())\ng = int(input())\nh = int(input())\ni = int(input())\n\na1 = a * b\na2 = c * d\na3 = e * f\na4 = g * h\na5 = i * g\na6 = a1 + a2 + a3 + a4 + a5\n\nprint(a6)"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 1\\n20 2\\n30 3') == '180'\nassert solution('3\\n3 1\\n2 2\\n4 3') == '21'\n\"\"\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0 10\") == \"2\"\nassert solution(\"5\\n0 1 2 3 4\") == \"1\"\nassert solution(\"9\\n0 1 0 2 0 1 1 2 10\") == \"3\"\nassert solution(\"10\\n0 1 0 2 0 1 1 2 10\") == \"2\"\nassert solution(\"100\\n0 1 0 2 0 1 1 2 10\") == \"2\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [0] * n\ndp[0] = 1\n\nfor i in range(1, n):\n    count = 0\n    for j in range(i + 1):\n        if a[i] <= a[j]:\n            count = max(count, dp[j])\n    dp[i] = count + 1\n\nprint(dp[n - 1])\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 10') == 2\nassert solution('5\\n0 1 2 3 4') == 1\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0 10\") == 2\nassert solution(\"5\\n0 1 2 3 4\") == 1\nassert solution(\"9\\n0 1 0 2 0 1 1 2 10\") == 3\n\"\"\""
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 3 3') == '1'\nassert solution('0 0 1 2 3') == '2'\n\"\"\""
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 10\") == 2\nassert solution(\"5\\n0 1 2 3 4\") == 1\nassert solution(\"4\\n0 0 0 0\") == 4\nassert solution(\"9\\n0 1 0 2 0 1 1 2 10\") == 3\n\n\"\"\""
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''3\n0 0 10'''\n) == '2'\n\nassert solution(\n'''5\n0 1 2 3 4'''\n) == '1'\n\nassert solution(\n'''9\n0 1 0 2 0 1 1 2 10'''\n) == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\n\nassert solution('0 0 10') == 2\n\nassert solution('0 1 2 3 4') == 1\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 0 10') == '2'\nassert solution('5 0 1 2 3 4') == '1'\nassert solution('9 0 1 0 2 0 1 1 2 10') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0 10\") == 2\nassert solution(\"5\\n0 1 2 3 4\") == 1\nassert solution(\"9\\n0 1 0 2 0 1 1 2 10\") == 3\n\"\"\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0 10') == 2\nassert solution('5\\n0 1 2 3 4') == 1\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == 3\n\"\"\"\n\nfrom math import floor, sqrt"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4\n0 0\n0 1\n1 0\n1 1\"\"\") == '5'\nassert solution(\"\"\"2\n1 1\n1 1\"\"\") == '0'\nassert solution(\"\"\"3\n0 0\n0 1\n1 0\"\"\") == '2'\nassert solution(\"\"\"4\n0 0\n0 1\n1 0\n1 1\"\"\") == '1'\nassert solution(\"\"\"7\n0 0\n0 1\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\"\"\") == '7'\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n\"\"\"\n\nimport math\nimport sys\nimport re\nimport functools"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\nassert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\nassert solution(\"3\\n0 0\\n1 1\\n0 0\") == \"1\"\n\nassert solution(\"5\\n0 0\\n0 1\\n1 0\\n1 1\\n0 0\") == \"10\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0\\n0 1\\n1 0\\n1 1\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n''') == '4'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == '4'\nassert solution(\"1\\nW 1\\nB 2\\nW 3\\nB 1\\n\") == '4'\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\n\"\"\"\nfrom itertools import zip_longest"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\nassert solution(\"1\\nW 1\") == \"0\"\nassert solution(\"1\\nB 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nW 1\\nB 2') == '4'"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n''') == '4'\nassert solution('''\n1\nB 1\n''') == '0'\nassert solution('''\n5\nB 1\nW 2\nW 3\nB 4\nW 5\n''') == '8'\nprint('Success')"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nW 1\\nB 2\\nW 3\\nB 1\") == \"4\"\n\n\"\"\"\n\n\nfrom typing import List\nfrom collections import namedtuple\n\nTestCase = namedtuple(\"TestCase\", [\"N\", \"balls\"])\nBall = namedtuple(\"Ball\", [\"color\", \"num\"])\n"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2''') == '4'\nassert solution('''1\nB\nW''') == '0'\nassert solution('''1\nW\nB''') == '0'\nassert solution('''1\nB\nB''') == '0'\nassert solution('''1\nW\nW''') == '0'\n"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n\"\"\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n6\\n3') == '4'\n\"\"\"\n\nimport sys\n\nb = int(sys.stdin.readline())\ng = int(sys.stdin.readline())\nn = int(sys.stdin.readline())\n\nk = 0\nwhile b + g!= n:\n    if b > g:\n        g += 1\n    else:\n        b += 1\n    k += 1\n\nprint(k)\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\nassert solution(\"5\\n3\\n5\") == \"4\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n6\n3''') == '4'\nassert solution('''5\n3\n5''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\nassert solution(\"5\\n3\\n5\") == \"4\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n6\\n3') == '4'\nassert solution('5\\n3\\n5') == '4'\nassert solution('4\\n2\\n2') == '1'\n\"\"\""
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\nassert solution(\"5\\n3\\n5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\n\n-----\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6 3') == '4'\nassert solution('5 3 5') == '4'\n\"\"\"\n\n\"\"\"\nimport sys\n\nb, g, n = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5, 6, 3) == 4\nassert solution(5, 3, 5) == 4\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\n\"\"\""
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n4\\n') == '2'\n\nassert solution('8\\n1 2 4 8 16 32 64 576\\n') == '32'"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 2 4 8 16 32 64 576\") == '32'\n\"\"\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3''') == '1'\nassert solution('''1\n5''') == '5'\nassert solution('''8\n1 2 4 8 16 32 64 576''') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2''') == '1'\nassert solution('''1 2 3 4''') == '1'\nassert solution('''2 4 6 8 10''') == '3'\nassert solution('''2 4 6 8 10 16 32 64 576''') == '32'\nassert solution('''8 1 2 4 8 16 32 64 576''') == '1'\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"8 2\") == \"7\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"2\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\n\n\"\"\"\n\nfrom math import sqrt\n\nfrom fractions import Fraction\nimport math"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '2'\nassert solution('8 1') == '32'\n\"\"\""
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"400 4\\n100 300 450 500\") == \"2\"\nassert solution(\"50 2\\n100 25\") == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"400 4\\n100 300 450 500\\n\") == \"2\"\nassert solution(\"50 2\\n100 25\\n\") == \"3\"\nassert solution(\"10 10\\n1 1 1\\n\") == \"-1\"\nassert solution(\"50 2\\n100 25\\n\") == \"3\"\nassert solution(\"50 2\\n100 25\\n\") == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"100 300 450 500\") == \"2\"\nassert solution(\"50 2\") == \"3\"\n\"\"\"\n\nimport sys\nimport re\n\np = re.compile(\"(?P<coke_concentration>[0-9]+)\")\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"400 4\\n100 300 450 500\") == \"2\"\nassert solution(\"50 2\\n100 25\") == \"3\""
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('400 4\\n100 300 450 500') == '2'\nassert solution('50 2\\n100 25') == '3'\nassert solution('400 4\\n100 300 450 500') == '2'\nassert solution('50 2\\n100 25') == '3'\n\n-----Solution-----\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 300 450 500\") == \"2\"\nassert solution(\"100 25\") == \"3\"\nassert solution(\"10 5\") == \"3\"\nassert solution(\"100 100\") == \"1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"400 4\\n100 300 450 500\") == \"2\"\nassert solution(\"50 2\\n100 25\") == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"400 4\\n100 300 450 500\") == \"2\"\nassert solution(\"50 2\\n100 25\") == \"3\"\nassert solution(\"400 4\\n100 10\\n100 10\") == \"2\"\nassert solution(\"50 4\\n100 10\\n100 10\\n100 10\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n400 4\n100 300 450 500\n    \"\"\") == 2\n\nassert solution(\n    \"\"\"\n50 2\n100 25\n    \"\"\") == 3\n\n\"\"\"\n\n\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0441\u043b\u043e\u0432\u0430 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u0431\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439.\n\nSample Input:\n\none two three four five six seven\nSample Output:\n\none seven two six three four\n\n\"\"\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('400 4\\n100 300 450 500') == '2'\nassert solution('50 2\\n100 25') == '3'\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n\") == \"6\"\n\"\"\"\n\n\"\"\"\nSolution Approach\n\n-----Overview-----\n\n-----Implementation-----\n\n-----Special Notes-----\n\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '6'\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 2''') == '6'\nassert solution('''1 1''') == '1'\nassert solution('''10 10''') == '3628800'\nassert solution('''1 1000000000''') == '1'\nassert solution('''2 2''') == '2'\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n') == '6'\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 1 1 1\") == 6\n\"\"\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == 6\n\"\"\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 1 3 2\") == \"6\"\nprint(solution(\"4 2\\n1 2 1 3 2\"))\n\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n') == 6\n\"\"\"\n\n\"\"\"\nRead input from STDIN. Print output to STDOUT\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '6'\n\"\"\"\nimport sys"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n------\nN, K = map(int, stdin.readline().split())\nl = [1] * N\nr = [0] * N"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"499122178\"\nassert solution(\"5\\n\") == \"461396113\"\n\"\"\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n''') == \"499122178\"\n\"\"\"\n\n\"\"\"\n\nfrom decimal import Decimal, getcontext\nfrom fractions import Fraction\n"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"499122178\"\n\n\"\"\""
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n\nimport random\nfrom functools import reduce"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '499122178'\nassert solution('1\\n') == '500256314'\nassert solution('2\\n') == '250416068'\nassert solution('4\\n') == '500256314'\nassert solution('5\\n') == '500256314'\n"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n\n\"\"\"\nSecond part\n\n\"\"\"\n\n\"\"\"\n--- Part Two ---\nIn the beginning, Shin and Shiro were not very bright. After a few days of thinking, they realized they had made a mistake in how they colored the stones. They only wanted to color the stones so that there was a equal amount of black and white squares. They decided to change the rules of the game.\n\nThe new rules are as follows:\n\n- Before any moves are made, Square s has a color equal to the color of the square to its immediate right.\n- After the first move is made, Square s has a color equal to the average color of the two squares to its immediate left and right.\n- All squares are colorless except Square s and have a color equal to their position in the sequence n, n \\dots, 1, 0, n, n \\dots, 2n.\n- It is guaranteed that there is no stone of the same color as Square s.\n\nFor example, if the first move is played on Square s, then:\n- Square 1 has color 1.\n- Square 2 has color 3.\n- Square 3 has color 2.\nSquare s has color 3, and it is the only square of color 3.\nSquare 1 has color 1, and Square 2 has color 3, and Square 3 has color 2.\nSquare 1 has color 1, and Square 2 has color (1+3)/2=2, and Square 3 has color (3+2)/2=2.\nSquare 1 has color 1, and Square 2 has color 2, and Square 3 has color 2.\nSquare 1 has color 1, and Square 2 has color 3, and Square 3 has color 3.\n\nThe average color of Square 1, Square 2, and Square 3 is (1+3+2)/3=2. The answer is 2, which is the only integer such that 2 \\dots\\ d \\leq 2n for some integer n.\n\nShin and Shiro are confused. They have played the game for too long, and their memory is foggy. They need a refresher. Given the initial position of the stones, they need a refresher.\n\nInput Specification\n\nEach input file contains one test case. For each case, the first line gives a positive integer n (1 \\leq n \\leq 2\\times 10^5), the number of the squares on the board. Then n lines follow. Each line contains a single integer s (0 \\leq s \\leq n), the position of the black stone on that line.\n\nOutput Specification\n\nFor each test case, print n values in a line, the expected number of black stones at the end of the game for each square s = 1, \\dots, n.\n\nSample Input\n\n3\n1\n2\n3\n\nSample Output\n\n2\n2\n2\n\nExplanation\n\nCase 1:\n\nFirst, the black stone is put on the leftmost square of color 1.\nAfter that, there are two possible boards:\n\nWWW\nWWW\n\nand\n\nWBB\nWBB\n\nThe average color of the first two squares is (1+2)/2=1. The average color of the last two squares is (3+2)/2=2. So the answer is 2.\n\nCase 2:\n\nFirst, the black stone is put on the rightmost square of color 2.\nAfter that, there are two possible boards:\n\nWBW\nWBW\n\nand\n\nBWW\nBWW\n\nThe average color of the first two squares is (2+3)/2=2. The average color of the last two squares is (1+3)/2=2. So the answer is 2.\n\nCase 3:\n\nFirst, the black stone is put on the rightmost square of color 3.\nAfter that, there are two possible boards:\n\nWWB\nWWB\n\nand\n\nBWW\nBWW\n\nThe average color of the first two squares is (2+3)/2=2. The average color of the last two squares is (1+3)/2=2. So the answer is 2.\n\"\"\""
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"10\") == \"10742075\"\nassert solution(\"5\") == \"11484560\"\n\"\"\""
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '499122178'"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"5\") == \"54321\"\nassert solution(\"8\") == \"95876\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '6'\nassert solution('3\\n') == '6669'\nassert solution('10\\n') == '-1'\n\nassert solution('2\\n') == '6'\nassert solution('3\\n') == '6669'\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"6669\"\n\"\"\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6669'\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\"\n\na = int(stdin.readline())\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == '6'\nassert solution(\"3\") == '6669'\nassert solution(\"10\") == '-1'\nassert solution(\"100\") == '599991'\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '-1'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\nassert solution('2') == '6'\nassert solution('3') == '6669'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 6\nassert solution('3') == 6669\nassert solution('10') == -1\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\n\nassert solution('2') == '6'\nassert solution('3') == '6669'\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"7\") == \"2 4 0 1 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n') == '1 4 3 2 0\\n1 0 2 4 3\\n2 4 0 1 3\\n'\n\"\"\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    2\n    \"\"\") == \"\"\"\n    -1\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    5\n    \"\"\") == \"\"\"\n    1 4 3 2 0\n    1 0 2 4 3\n    2 4 0 1 3\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    5\n    \"\"\") == \"\"\"\n    1 4 3 2 0\n    1 0 2 4 3\n    2 4 0 1 3\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    6\n    \"\"\") == \"\"\"\n    1 5 4 2 3 0\n    1 0 2 5 4 3\n    2 5 0 1 4 3\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4\n    \"\"\") == \"\"\"\n    -1\n    \"\"\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"0 1 2 4\"\nassert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"0 1 2 4\"\nassert solution(\"5\") == \"1 4 3 2 0\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2\\n4 3') == '-1'\nassert solution('4\\n1 3 2 4') == '1 4 3 2'\nassert solution('1\\n0 1') == '0 1'\nassert solution('3\\n2 1 3') == '2 1 3'\nassert solution('4\\n3 2 0 1') == '3 2 0 1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \" -1\"\nassert solution(\"7\") == \"6 5 4 2 3 1 0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\\n1 0 2 4 3\\n2 4 0 1 3\"\nassert solution(\"2\") == \"-1\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5\\n\"\n) == \"1 4 3 2 0\\n1 0 2 4 3\\n2 4 0 1 3\"\nassert solution(\n    \"2\\n\"\n) == \"-1\"\nassert solution(\n    \"7\\n\"\n) == \"-1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'No'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'Yes'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 3 2 4') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 3 2 4') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\n\"\"\"\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\n\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\""
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3') == 'No'\n\nassert solution('4\\n1 2\\n1 3\\n2 3\\n1 2 3') == 'No'\nassert solution('4\\n1 2\\n1 3\\n2 3\\n1 3 2') == 'No'\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == \"24500\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-\"\nassert solution(\"1 1 2\\n1 1 0\\n\") == \"0\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000') == '24500'\nassert solution('2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000') == '-1'\n\"\"\"\n\nn, m, k = map(int, input().split())\nflights = []\n\nfor _ in range(m):\n    a, b, c, d = map(int, input().split())\n    flights.append([a, b, c, d])\n\nflights.sort(key=lambda x: x[3])\ndp = [0] * (n+1)\ndp[0] = 0\n\nfor a, b, c, d in flights:\n    if b == 0:\n        dp[a] = d\n    else:\n        dp[a] = min(dp[a], d + dp[b])\n\nprint(dp[k]) if dp[k]!= 0 else print(\"-1\")\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == '24500'\nassert solution(\"1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500') == '24500'\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500') == '24500'\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500''') == '24500'\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n') == '-1'\nassert solution('2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\\n') == '24500'\n\"\"\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-\"\nassert solution(\"1 1 1\\n2 0 0\\n2 1 0\\n1 1 1\") == \"1\"\nassert solution(\"1 2 3\\n0 1 1\\n0 2 1\\n0 3 1\\n1 2 3\\n1 3 3\\n2 1 3\\n2 2 3\\n2 3 3\\n3 1 3\\n3 2 3\") == \"1\"\nassert solution(\"1 1 1\\n2 0 0\\n2 1 0\\n1 1 1\") == \"1\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 45\") == '0.828427125'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 45\") == \"0.828427125\"\nassert solution(\"6 4 30\") == \"19.668384925\"\n\"\"\""
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\nassert solution(\"6 4 30\") == \"19.668384925\"\n\"\"\"\n\nfrom math import sin, cos, radians\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 45\\n\") == '0.828427125'\nprint(solution(\"6 4 30\\n\"))\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 45') == '0.828427125'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\", \"First\"\nassert solution(\"6 4 30\") == \"19.668384925\", \"Second\"\n\n\"\"\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\n\n\"\"\""
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6 -30') == '18.4'\nassert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.66838090'\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\", \"First\"\nassert solution(\"6 4 30\") == \"19.668384925\", \"Second\"\nprint(\"It is all good. Let's check it now\")\n\"\"\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == '3000'\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == '992'\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\") == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\n\nassert solution('''\n3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n''') == '992'\nassert solution('''\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1'\nassert solution('''\n1 1\n1\n1\n''') == '0'\nassert solution('''\n2 2\nATK 1\nDEF 0\n0\n0\n''') == '0'\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\"\"\"\n) == '3000'\n\nassert solution(\n    \"\"\"3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\"\"\"\n) == '992'\n\nassert solution(\n    \"\"\"2 4\nDEF 0\nATK 0\n0\n0\n1\n1\"\"\"\n) == '1'\n\nassert solution(\n    \"\"\"1 1\nDEF 0\"\"\"\n) == '0'\n\nassert solution(\n    \"\"\"3 3\nATK 10\nATK 10\nATK 10\"\"\"\n) == '10'"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == \"992\"\n\n\"\"\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == '3000'\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == '992'\n\"\"\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == 3000\n\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == 992\n\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\") == 1\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin):\n        n, m = map(int, stdin.readline().split())\n\n        attack = set()\n        defense = set()\n        for _ in range(n):\n            attack.add(tuple(map(int, stdin.readline().split())))\n\n        for _ in range(m):\n            defense.add(tuple(map(int, stdin.readline().split())))\n\n        attack.update(defense)\n\n        return max(sum(card[0] - card[1] for card in attack) - 1, 0)\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == \"992\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n\") == 1\nassert solution(\"4 3\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\\n\") == 992\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\\n\") == 992\n\"\"\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500') == 3000\nassert solution('3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001') == 992\nassert solution('2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1') == 1\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n\") == \"1\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\\n\") == \"992\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n4 3 2 1 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\") == \"2\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == \"6\"\n\"\"\"\n\nimport sys\n\n\"\"\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\") == \"2\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\") == \"2\"\n\nprint(\"The problem doesnt't count for the second problem\")\n\n\n\n\n\n3.4 \u0418\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430\n\u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u0442, \u0447\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0441\u0435\u0431\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u043d\u0438\u0436\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b, \u043d\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0438\u0437 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.\n\n\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c \u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u043c. \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u0412 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043d\u0435\u043b\u044c\u0437\u044f \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435.\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0435\u043f\u0443\u0441\u0442\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438 $n$ \u0441\u0442\u0440\u043e\u043a."
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == '6'\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9') == 6\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == \"2\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\") == \"62\"\n\n-----\n\nn, m = [int(s) for s in input().split()]\nl = [int(s) for s in input().split()]\ns = [int(s) for s in input().split()]\nc = [int(s) for s in input().split()]\n\nans = 0\nfor i in range(n):\n    while i < n and l[i] == l[i + 1]:\n        ans += s[i] + s[i + 1]\n        s[i + 1] = -1\n        i += 2\n\nans += sum(s)\n\nfor i in range(m):\n    while i < m and c[i] == c[i + 1]:\n        ans += c[i]\n        c[i + 1] = -1\n        i += 2\n\nans -= sum(c)\nprint(ans)\n\n\"\"\""
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\") == \"2\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\") == \"2\""
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == \"6\"\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == \"2\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\\n\") == \"62\"\nassert solution(\"1 1\\n1 1\\n0 0\\n2 1 -100 -100\\n\") == \"2\"\nassert solution(\"1 2\\n0 0\\n1 1\\n0 0\\n2 1 -100 -100\\n\") == \"2\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == \"6\"\nassert solution(\n    \"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == \"2\"\nassert solution(\n    \"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\\n\") == \"62\"\n\"\"\""
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == 6\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == 2\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\\n\") == 62\n\n\"\"\""
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"aabb\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"baab\") == \"NO\"\nassert solution(\"aabbbbabab\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaabb\") == \"YES\"\nassert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaba\") == 'YES'\nassert solution(\"aabb\") == 'NO'\nassert solution(\"abaa\") == 'YES'\nassert solution(\"baaa\") == 'YES'\nassert solution(\"aaaa\") == 'YES'\n"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('abab') == 'YES'\nassert solution('aa') == 'YES'\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_case1(self):\n        self."
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"aa\") == \"YES\"\nassert solution(\"ab\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"abab\") == \"YES\"\n\nassert solution(\"aabb\") == \"YES\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"aaa\") == \"YES\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aa\") == \"YES\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"aabb\") == \"YES\"\nassert solution(\"abb\") == \"YES\"\nassert solution(\"aab\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == 'NO'\nassert solution('1\\n1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 'NO'\nassert solution('1') == 'YES'\n\"\"\""
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == 'YES\\n2 1\\n3 0'\nassert solution('1\\n2') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 'NO'\nassert solution('1') == 'YES'\nassert solution('2') == 'NO'\n"
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"NO\"\nassert solution(\"3 2 1\") == \"YES\\n1 2\\n3 2\""
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == 'YES\\n1 2\\n2 3\\n'"
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"YES\\na b\"\n\n\"\"\""
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"NO\"\nassert solution(\"3 2 1\") == \"YES\\n1 1\"\nassert solution(\"2 3 1\") == \"YES\\n1 1\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('1') == 'NO'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\n\nassert solution('1 2 3') == 'NO'\n"
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n1\") == \"YES\\n1 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('b') == ''\nassert solution('c') == ''\nassert solution('d') == ''\n"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\nab\\nac\\nd') == 'Yes\\na?\\n'\nassert solution('5 3\\ntest\\ntezt\\ntest.\\n.est\\ntes.') == 'Yes\\?es?\\n?'\nassert solution('4 4\\na\\nb\\nc\\ndd\\n1 2 3 4') == 'Yes\\?es?\\n?'\nassert solution('6 3\\n.svn\\ngit\\n....\\n...\\n..\\n.\\n1 2 3') == 'Yes\\?es?\\n.???'"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\nab\\nac\\ncd\\n1 2\\n') == 'Yes\\na?\\n'\nassert solution('5 3\\ntest\\ntezt\\ntest.\\n.est\\ntes.\\n1 4 5\\n') == 'Yes\\?es?\\n'\nassert solution('4 4\\na\\nb\\nc\\ndd\\n1 2 3 4\\n') == 'No\\n'\nassert solution('6 3\\n.svn\\n.git\\n....\\n...\\n..\\n.\\n1 2 3\\n') == 'Yes\\?\\?es?\\n'\nprint(\"Ok!\")\n"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\nab\\nac\\ncd\\n1 2\\n\") == \"Yes\\na?\\n\"\nassert solution(\"5 3\\ntest\\ntezt\\n.est\\ntes.\\n1 4 5\\n\") == \"Yes\\?es?\\n\"\nassert solution(\"4 4\\na\\nb\\nc\\ndd\\n1 2 3 4\\n\") == \"No\\n\"\nassert solution(\"6 3\\n.svn\\ngit\\n....\\n...\\n..\\n.\\n1 2 3\\n\") == \"Yes\\?es?\\n\"\n\"\"\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\nab\\nac\\ncd\\n1 2\\n') == 'Yes\\na?\\n'\n"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\\nc\\nd\\n\") == \"Yes\\na?\\nb?\\nc?\\nd?\"\nassert solution(\"ab\\nc\\nd\\ne\\nf\\ng\\n\") == \"Yes\\na?\\nb?\\nc?\\nd?\\ne?\\nf?\\ng?\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\nab\\nac\\ncd\\n1 2\\n\") == \"Yes\\na?\\n\"\nassert solution(\"5 3\\ntest\\n.tezt\\n.test.\\n.est\\ntes.\\n1 4 5\\n\") == \"Yes\\?es?\\n\"\nassert solution(\"4 4\\na\\nb\\nc\\ndd\\n1 2 3 4\\n\") == \"Yes\\?es?\\n\"\n\"\"\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\nab\\nac\\ncd\\n1 2\\n\") == \"Yes\\na?\\n\"\n\"\"\""
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n.git\\n.gitignore\\n.gitmodules\\n.idea\\n\") == \"Yes\\n???\\n\"\nassert solution(\"4 2\\n.git\\n.gitignore\\n.gitmodules\\n.idea\\n\") == \"Yes\\n.gitignore?\\n.gitmodules?\\n.idea?\\n\"\nassert solution(\"4 2\\n.git\\n.gitignore\\n.gitmodules\\n.idea\\n\") == \"Yes\\n.gitignore?\\n.gitmodules?\\n.idea?\\n\"\nassert solution(\"4 2\\n.git\\n.gitignore\\n.gitmodules\\n.idea\\n\") == \"Yes\\n.gitignore?\\n.gitmodules?\\n.idea?\\n\"\nassert solution(\"6 3\\n.svn\\n.git\\n.gitignore\\n.gitmodules\\n.idea\\n1 4 5\\n\") == \"Yes\\n.gitignore?\\n.gitmodules?\\n.idea?\\n\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '2'\n\"\"\""
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('3\\n2 1 3') == '2'\nassert solution('3\\n1 3 2') == '2'\n\"\"\"\n\nimport sys\nfrom random import randint\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '2'\n\"\"\""
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == 2\n\"\"\""
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\\n\", \"Check your solution\"\n\"\"\"\n\nfrom math import factorial\n\nN = int(stdin)\nA = list(map(int, stdin.split()))\n\nmax_LIS_length = 0\nfor x in range(1, N):\n    max_LIS_length += factorial(A[x]) % 1000000007\n\nprint(max_LIS_length % 1000000007)\n"
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"2\"\nassert solution(\"2 3 1\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 3 2\") == \"2\"\nassert solution(\"3 2 1\") == \"2\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\"\n\"\"\"\n\nimport re\nimport math\nimport sys\n\npattern = re.compile(r'\\d+')\n\nN = int(input())\nA = list(map(int, pattern.findall(input())))\nX = list(map(int, pattern.findall(input())))\n\nE = 0\nfor i in range(0, N):\n    if X[i] == 1:\n        E = E + 1\n    else:\n        E = E + A[i]\n\nprint(E // 1000000007)\n"
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == 2\n\"\"\"\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\"\n\"\"\"\n\n\"\"\"\nThis is a dynamic programming problem.\n\nBase Case: \nWhen N = 1, there are only one way to form a pair. \nWhen N = 2, there are only two ways to form a pair: 1-2 or 2-1.\nWhen N > 2, there are 2N - 1 ways to form a pair.\n\nDynamic Programing:\ndp[i] = number of ways to form a pair of size 2i.\n\nTime Complexity: O(N)\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == 2\n'''"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == 2\n'''\nfrom collections import deque"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\"\n\n-------------------------\nSample Input:\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n\nSample Output:\n6\n\nExplanation:\nThe tree is as follows:\n      1\n     / \\\n    2   3\n   / \\\n  4   5\n / \\\n6   7\n\nThere are six possible ways to divide the vertices into pairs, as shown below:\n1) 1 2, 5 6\n2) 1 2, 4 5\n3) 1 2, 3 4\n4) 1 3, 2 4\n5) 1 3, 5 4\n6) 1 3, 6 5\n6) 1 4, 2 5\n7) 1 4, 3 5\n\nSo the answer is 6.\n\n-------------------------\nSample Input:\n7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n\nSample Output:\n28\n\nExplanation:\nThe tree is as follows:\n      1\n     / \\\n    2   3\n   / \\\n  4   5\n / \\\n6   7\n/  /\n8\n\nThere are 28 possible ways to divide the vertices into pairs, as shown below:\n1) 1 2, 6 7\n2) 1 2, 5 6\n3) 1 2, 4 5\n4) 1 2, 3 4\n5) 1 2, 2 3\n6) 1 2, 1 4\n7) 1 2, 8\n8) 1 4, 2 5\n9) 1 4, 3 5\n10) 1 4, 4 5\n11) 1 4, 5 6\n12) 1 4, 6 7\n13) 1 5, 2 6\n14) 1 5, 3 6\n15) 1 5, 4 6\n16) 1 5, 5 6\n17) 1 5, 6 7\n18) 1 5, 7 8\n19) 1 6, 2 7\n20) 1 6, 3 7\n21) 1 6, 4 7\n22) 1 6, 5 7\n23) 1 6, 6 7\n24) 1 6, 7 8\n25) 1 7, 2 8\n26) 1 7, 3 8\n27) 1 7, 4 8\n28) 1 7, 5 8\n\nSo the answer is 28.\n\n-------------------------\nSample Input:\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n\nSample Output:\n55\n\nExplanation:\nThe tree is as follows:\n      1\n     / \\\n    2   3\n   / \\\n  4   5\n / \\\n6   7\n/  /\n8  9\n/  /\n10\n\nThere are 55 possible ways to divide the vertices into pairs, as shown below:\n1) 1 2, 9 10\n2) 1 2, 8 9\n3) 1 2, 7 8\n4) 1 2, 6 7\n5) 1 2, 5 6\n6) 1 2, 4 5\n7) 1 2, 3 4\n8) 1 2, 2 3\n9) 1 2, 1 4\n10) 1 2, 10\n11) 1 2, 9\n12) 1 2, 8\n13) 1 2, 7\n14) 1 2, 6\n15) 1 3, 4 5\n16) 1 3, 3 4\n17) 1 3, 2 4\n18) 1 3, 1 4\n19) 1 3, 10\n20) 1 3, 9\n21) 1 3, 8\n22) 1 3, 7\n23) 1 3, 6\n24) 1 3, 5\n25) 1 3, 4\n26) 1 4, 2 5\n27) 1 4, 3 5\n28) 1 4, 4 5\n29) 1 4, 5 6\n30) 1 4, 6 7\n31) 1 4, 7 8\n32) 1 4, 8 9\n33) 1 4, 9 10\n34) 1 5, 2 6\n35) 1 5, 3 6\n36) 1 5, 4 6\n37) 1 5, 5 6\n38) 1 5, 6 7\n39) 1 5, 7 8\n40) 1 5, 8 9\n41) 1 5, 9 10\n42) 1 6, 2 7\n43) 1 6, 3 7\n44) 1 6, 4 7\n45) 1 6, 5 7\n46) 1 6, 6 7\n47) 1 6, 7 8\n48) 1 6, 8 9\n49) 1 6, 9 10\n50) 1 7, 2 8\n51) 1 7, 3 8\n52) 1 7, 4 8\n53) 1 7, 5 8\n54) 1 7, 6 8\n55) 1 7, 7 8\n\nSo the answer is 55.\n\n-------------------------\nSample Input:\n5\n1 2\n2 3\n3 4\n4 5\n\nSample Output:\n8\n\nExplanation:\nThe tree is as follows:\n      1\n     / \\\n    2   3\n   / \\\n  4   5\n\nThere are 8 possible ways to divide the vertices into pairs, as shown below:\n1) 1 2, 4 5\n2) 1 2, 3 4\n3) 1 2, 2 3\n4) 1 2, 1 4\n5) 1 2, 5\n6) 1 2, 4\n7) 1 3, 2 4\n8) 1 3, 3 4\n\nSo the answer is 8.\n\n-------------------------\nSample Input:\n3\n1 2\n2 3\n3 1\n\nSample Output:\n0\n\nExplanation:\nThe tree is as follows:\n      1\n     / \\\n    2   3\n   / \\\n  1   2\n\nThere are 0 possible ways to divide the vertices into pairs, as shown below:\nSo the answer is 0.\n\n-------------------------\nSample Input:\n7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n\nSample Output:\n55\n\nExplanation:\nThe tree is as follows:\n      1\n     / \\\n    2   3\n   / \\\n  4   5\n / \\\n6   7\n\nThere are 55 possible ways to divide the vertices into pairs, as shown below:\n1) 1 2, 6 7\n2) 1 2, 5 6\n3) 1 2, 4 5\n4) 1 2, 3 4\n5) 1 2, 2 3\n6) 1 2, 1 4\n7) 1 2, 8\n8) 1 4, 2 5\n9) 1 4, 3 5\n10) 1 4, 4 5\n11) 1 4, 5 6\n12) 1 4, 6 7\n13) 1 5, 2 6\n14) 1 5, 3 6\n15) 1 5, 4 6\n16) 1 5, 5 6\n17) 1 5, 6 7\n18) 1 5, 7 8\n19) 1 6, 2 7\n20) 1 6, 3 7\n21) 1 6, 4 7\n22) 1 6, 5 7\n23) 1 6, 6"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\""
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == 2\n\"\"\""
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 5\") == '4'\nassert solution(\"10 3 10\") == '5'\n\nassert solution(\"6 100 100\") == '100'\nassert solution(\"100 2 100\") == '0'\nassert solution(\"7 100 100\") == '7'"
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 5\") == 4\nassert solution(\"10 3 10\") == 5\nassert solution(\"20 1 20\") == 0\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 2 1\") == 1\n"
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n\"\"\""
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\nassert solution
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 5\") == '4'\nassert solution(\"10 3 10\") == '5'\nassert solution(\"10 5 1\") == '0'\nassert solution(\"11 7 21\") == '1'\nassert solution(\"10 100 100\") == '0'\n"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\") == \"2\\n2 3\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\") == \"1\\n1\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4 4\\n1 2\\n1 3\\n1 4\\n3 4\\n') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\") == \"1\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\") == \"1\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\") == \"2\\n2 3\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\") == \"1\\n1\"\n\"\"\"\n\nimport sys\nimport math\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\n\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4''') == '1'\n\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4''') == '1'\nassert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\nassert solution('''6 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n5 6''') == '1'\n\n'''\n"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\\n\") == \"2\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\\n\") == \"1\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nfriend = [set() for _ in range(n)]\nfor _ in range(m):\n    u, v = map(int, input().split())\n    friend[u - 1].add(v)\n    friend[v - 1].add(u)\n\nvisited = set()\n\nnum = 0\nvisited.add(0)\nfor _ in range(n - 1):\n    cur = set()\n    for f in friend[0]:\n        if f not in visited:\n            cur.add(f)\n    for f in cur:\n        visited.add(f)\n    if not cur:\n        break\n    num += 1\n    friend[0] = cur"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\") == \"2\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\") == \"1\"\nassert solution(\"4 4\\n1 2\\n1 3\\n3 4\") == \"1\"\n\nassert solution(\"5 5\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\") == \"0\"\nassert solution(\"4 5\\n1 2\\n1 3\\n3 4\\n4 5\") == \"0\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\n\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4''') == '1'\n\nassert solution('''5 5\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '0'\n\nassert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '1'\n\nassert solution('''3 4\n1 2\n1 3\n2 3\n2 5''') == '3'"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5') == '2\\n2 3'\nassert solution('4 4\\n1 2\\n1 3\\n1 4\\n3 4') == '1'\nprint('The solution is correct!')\n\"\"\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\") == \"2\\n2 3\\n\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\") == \"1\\n1\\n\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n75 150 75 50\") == \"Yes\"\nassert solution(\"3\\n100 150 250\") == \"No\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n75 150 75 50') == 'Yes'\nassert solution('3\\n100 150 250') == 'No'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n75 150 75 50\") == \"Yes\"\nassert solution(\"3\\n100 150 250\") == \"No\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n75 150 75 50\") == \"Yes\"\nassert solution(\"3\\n100 150 250\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n75 150 75 50') == 'Yes'\nassert solution('3\\n100 150 250') == 'No'\n\"\"\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n75 150 75 50\") == \"Yes\"\nassert solution(\"3\\n100 150 250\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '''4\n    75 150 75 50\n    '''\n) == 'Yes'\nassert solution(\n    '''3\n    100 150 250\n    '''\n) == 'No'\nassert solution(\n    '''4\n    75 150 75\n    '''\n) == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n75 150 75 50\") == \"Yes\"\nassert solution(\"3\\n100 150 250\") == \"No\"\nprint(\"Success\")\n\"\"\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n75 150 75 50\") == \"Yes\"\nassert solution(\"3\\n100 150 250\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n75 150 75 50\") == \"Yes\"\nassert solution(\"3\\n100 150 250\") == \"No\"\n\"\"\""
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n50 50 50') == 150\nassert solution('2\\n-1 -100 -1') == 100\nassert solution('3\\n1 1 1 1') == 4\nassert solution('4\\n1 1 1 1 1') == 4\nassert solution('5\\n1 1 1 1 1 1') == 4\n"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n50 50 50') == 150\nassert solution('2\\n-1 -100 -1') == 100\nassert solution('3\\n1 2 3 4 5') == 12\nassert solution('3\\n-1 -2 -3') == -6\nassert solution('3\\n-1 -1 -1') == -3\n"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n-1 -100 -1\") == \"100\"\nassert solution(\"2\\n50 50 50\") == \"150\"\nassert solution(\"2\\n-1 -100 -1\") == \"100\"\nassert solution(\"2\\n5 -5 5\") == \"10\"\nassert solution(\"2\\n5 -5 -5\") == \"0\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 50 50') == '150'\nassert solution('-1 -100 -1') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 20 30 40\") == \"50\"\nassert solution(\"6\\n-10 20 -10 10 -10 10\") == \"0\"\nassert solution(\"2\\n-1 -1\") == \"0\"\nassert solution(\"1\\n-1\") == \"-1\"\nassert solution(\"2\\n0 0\") == \"0\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"50 50 50\") == \"150\"\nassert solution(\"-1 -100 -1\") == \"100\"\nassert solution(\"50 -50 50\") == \"150\"\nassert solution(\"-1 100 -1\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n50 50 50') == 150\nassert solution('2\\n-1 -100 -1') == 100\n"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n50 50 50\\n') == 150\nassert solution('2\\n-1 -100 -1\\n') == 100\n"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n50 50 50') == '150'\nassert solution('2\\n-1 -100 -1') == '100'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nmax_sum = sum(a)\nmax_sum *= -1\n\nfor i in range(n):\n    max_sum += a[i]\n    max_sum *= -1\n\nprint(max_sum)"
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 50 50\") == \"150\"\nassert solution(\"-1 -100 -1\") == \"100\""
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ab a') == 4\nassert solution('cc c') == 1\nassert solution('ca a') == 4\nassert solution('ee c') == 1\nassert solution('ff d') == 0\n"
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\nab a\ncc c\nca a\nee c\nff d''') == '4'\nassert solution('''3 2\naa e\ncc c\nba a''') == '0'\n\"\"\""
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abb\") == \"a\"\nassert solution(\"cab\") == \"a\"\nassert solution(\"cca\") == \"a\"\nassert solution(\"eea\") == \"a\"\nassert solution(\"fff\") == \"f\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abb') == 'a'\nassert solution('cab') == 'ab'\nassert solution('cca') == 'ca'\nassert solution('eea') == 'ca'\n\nassert solution('a') == 'a'\n"
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bb a\") == 0\nassert solution(\"af e\") == 1\nassert solution(\"dc d\") == 1\nassert solution(\"cc f\") == 0\nassert solution(\"bc b\") == 0\n"
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\nab a\\ncc c\\nca a\\nee c\\nff d\") == \"4\"\nassert solution(\"2 8\\naf e\\ndc d\\ncc f\\nbc b\\nda b\\neb a\\nbb b\\nff c\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\nab a\\ncc c\\nca a\\nee c\\nff d\") == \"4\"\nassert solution(\"2 8\\naf e\\ndc d\\ncc f\\nbc b\\nda b\\nbb b\\nff c\") == \"1\"\nassert solution(\"6 2\\nbb a\\nba a\") == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\nab a\\ncc c\\nca a\\nee c\\nff d\") == \"4\"\nassert solution(\"2 8\\naf e\\ndc d\\ncc f\\nbc b\\nda b\\neb a\\nbb b\\nff c\") == \"1\"\nassert solution(\"6 2\\nbb a\\nba a\") == \"0\"\nassert solution(\"7 8\\nba a\\naa a\") == \"0\"\nassert solution(\"9 5\\nccc c\\nccd c\\ndcd d\\ncdc c\\ncca a\\ncca c\\nccb a\\nccd a\\nccc b\") == \"7\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab a\") == 4\nassert solution(\"bb a\") == 0\nassert solution(\"cc c\") == 1\nassert solution(\"ca a\") == 4\nassert solution(\"ee c\") == 1\n\n\"\"\""
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\nba a\") == \"0\"\nassert solution(\"5 1\\nbb a\") == \"1\"\nassert solution(\"5 1\\nbc a\") == \"1\"\nassert solution(\"6 1\\ncc a\") == \"1\"\nassert solution(\"6 1\\ncc c\") == \"2\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '10'\n\"\"\"\n\nn = int(input())\n\nfrom collections import defaultdict"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\n\"\"\""
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == 10\nassert solution(\"2\") == 3\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '10'\nassert solution('2') == '3'\nassert solution('1') == '1'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nnumber = 0\nfor i in range(1, n + 1):\n    for j in range(i, n + 1):\n        number += 1\n\nprint(number % (10**9 + 7))\n"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\nassert solution('4') == '18'\nassert solution('5') == '33'\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == '1.000000000000'\n\"\"\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\n\"\"\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n\n\"\"\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1.0\"\nassert solution(\"2 1\") == \"1.5\"\nassert solution(\"3 1\") == \"2.0\"\nassert solution(\"4 1\") == \"2.25\"\nassert solution(\"5 1\") == \"3.0\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == '1.25'\nassert solution(\"3 1\") == '-1'\nassert solution(\"5 5\") == '1'\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('4 1') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"1.250000000000\"\nassert solution(\"3 1\") == \"-1\"\nassert solution(\"1 3\") == \"1.5\"\nassert solution(\"1 1\") == \"1.0\"\nassert solution(\"1 2\") == \"1.0\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n\"\"\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == '1.000000000000'\nassert solution('2 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\n11 8\\n7 5\\n\") == \"10.0000000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12\\n11 8\\n7 5\") == \"10.0000000000\"\n\"\"\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == -1\nassert solution('2 3 3 5 6') == 85.48\nassert solution('1 2 3 4 5 6') == -1\nassert solution('4 6 3 6 5 3') == 85.48\nassert solution('4 6 3 6 5 3') == 85.48\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n12\\n11 8\\n7 5\") == \"10.0\"\n\nassert solution(\"3\\n1\\n1 4 1\\n2 5 3\") == \"-1\"\n\nassert solution(\"6\\n2\\n4 6 3 3 5 6\\n2 6 3 6 5 3\") == \"85.5\"\n\nassert solution(\"6\\n2\\n4 6 3 3 5 6\\n2 6 3 6 5 3\") == \"85.48\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n12\\n11 8\\n7 5') == '10.0000000000'\n\nassert solution('3\\n1\\n1 4 1\\n2 5 3') == '-1'\n\nassert solution('6\\n2\\n4 6 3 3 5 6\\n2 6 3 6 5 3') == '85.4800000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\n\"\"\") == \"10.0000000000\"\nassert solution(\"\"\"3\n1\n1 4 1\n2 5 3\n\n\"\"\") == \"-1\"\nassert solution(\"\"\"6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\n\"\"\") == \"85.4800000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n    2\n    12\n    11 8\n    7 5\n    \"\"\") == '10.0'\n\nassert solution(\"\"\"\n    3\n    1\n    1 4 1\n    2 5 3\n    \"\"\") == '-1'\n\nassert solution(\"\"\"\n    6\n    2\n    4 6 3 3 5 6\n    2 6 3 6 5 3\n    \"\"\") == '85.48'\n\nprint(solution(\"\"\"\n    6\n    2\n    4 6 3 3 5 6\n    2 6 3 6 5 3\n    \"\"\"))\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n12\n11 8\n7 5\n\"\"\") == '10.0000000000'\n\nassert solution(\"\"\"\n3\n1\n1 4 1\n2 5 3\n\"\"\") == '-1'\n\nassert solution(\"\"\"\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\"\"\") == '85.4800000000'\n\n\n\"\"\"\ninput:\n4\n10\n1 1 2 3\n3 1 2 2\n\"\"\"\n\n\"\"\"\noutput:\n2\n4\n1.0\n0.5\n\"\"\"\n\n\"\"\"\ninput:\n4\n12\n11 8\n7 5\n2 6 3 6 5 3\n2 6 3 6 5 3\n\"\"\"\n\n\"\"\"\noutput:\n10.0000000000\n-1\n0.5\n0.333333333\n\"\"\"\n\n\"\"\"\ninput:\n5\n1\n1 2 3 4\n2 2 4 4\n\noutput:\n2\n\"\"\"\n\n\"\"\"\ninput:\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\noutput:\n85.4800000000\n\ninput:\n6\n1\n1 1 1 1 1\n2 2 2 2 2\n\noutput:\n1.0\n\ninput:\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\noutput:\n-1\n\"\"\"\n\n\"\"\"\ninput:\n3\n1\n1 4 1\n2 5 3\n\noutput:\n-1\n\ninput:\n3\n1\n4 4\n2 5 3\n\noutput:\n2\n\"\"\"\n\n\"\"\"\ninput:\n5\n2\n1 1 1 1\n2 2 2 2\n\noutput:\n2\n\ninput:\n4\n9\n1 1 1 1\n2 2 2 2\n\noutput:\n0.5\n\"\"\"\n\n\"\"\"\ninput:\n3\n2\n1 2\n1 1\n\noutput:\n-1\n\ninput:\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\noutput:\n-1\n\ninput:\n2\n3\n1 2\n1 1\n\noutput:\n2\n\"\"\"\n\n\"\"\"\ninput:\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\noutput:\n85.4800000000\n\ninput:\n6\n1\n1 1 1 1 1\n2 2 2 2 2\n\noutput:\n1.0\n\ninput:\n5\n1\n1 2 3 4\n2 2 4 4\n\noutput:\n-1\n\"\"\"\n\n\"\"\"\ninput:\n4\n9\n1 1 1 1\n2 2 2 2\n\noutput:\n0.5\n\ninput:\n4\n9\n1 1 1 1\n2 2 2 2\n\noutput:\n1.0\n\ninput:\n4\n5\n1 1 1 1\n2 2 2 2\n\noutput:\n-1\n\"\"\"\n\n\"\"\"\ninput:\n4\n1\n1 1 1 1\n2 2 2 2\n\noutput:\n2\n\ninput:\n5\n5\n1 1 1 1\n2 2 2 2\n\noutput:\n2\n\"\"\"\n\n\"\"\"\ninput:\n6\n1\n1 1 1 1 1\n2 2 2 2 2\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\n11 8\\n7 5\\n\") == \"10.0000000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 3 3 5 6\\n2 6 3 6 5 3\") == \"85.4800000000\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\n\"\"\""
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 0\n\"\"\"\n\nn = int(input())\n\ntotal_cost = 0\nfor i in range(1, n + 1):\n    for j in range(1, i + 1):\n        total_cost += (i + j) % (n + 1)\n\nprint(total_cost)\n"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 0\nassert solution(\"10\") == 4\n"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 0\nassert solution(\"10\") == 4\n\"\"\"\n\nn = int(input())\ncost = 0\nfor i in range(1, n + 1):\n    for j in range(1, i):\n        cost += (i + j) % (n + 1)\nprint(cost)\n"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 0\nassert solution(\"10\") == 4\n\"\"\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '4'\nassert solution('2') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\nfrom collections import deque, defaultdict\nfrom math import gcd"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Wh\"\nassert solution(\"1 2\") == \"abdef\"\nassert solution(\"1 111111111111\") == \"Wh\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == 'Wh.'\nassert solution(\"1 2\") == 'abdef'\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"b\"\nassert solution(\"3 1\") == \"a\"\nassert solution(\"3 2\") == \"d\"\n\nassert solution(\"5 1\") == \"abdef\"\nassert solution(\"5 2\") == \"adf\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abdef') == 'Abdef'\nassert solution('what are you doing while sending \"what are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"what are you doing at the end of the world? Are you busy? Will you save us?\"?') == 'Wh'\n\"\"\"\nimport sys\n\nassert sys.stdin.readline().strip() == 'abdef'"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '.'\nassert solution('1 1') == 'Wh'\n\n\"\"\"\nimport sys\n\nsys.path.insert(1, './')\n\nfrom input_validation import *\nfrom collections import deque"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"How are you? Are you doing? Are you busy? Are you saving us?\") == 'Wh. What are you doing at the end of the world? Are you busy? Will you save us?'\nassert solution(\"How are you doing? Are you doing? Are you busy? Are you saving us? Are you saving us?\") == 'Areyoubusy'\nassert solution(\"How are you doing? Are you doing? Are you busy? Are you saving us? Are you saving us?\") == 'Areyoubusy'\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n1 2\") == \"Wh\"\nassert solution(\"1 1\\n1 2\\n1 111111111111\") == \"abdef\"\nassert solution(\"1 1\\n1 2\\n1 111111111111\\n1 1\\n1 2\\n1 111111111111\") == \"Areyoubusy\"\n\n\n\"\"\"\n\nfrom typing import Tuple\n\nINPUT_LINES = int(input())\n\nQUERY = []\nfor _ in range(INPUT_LINES):\n    n, k = list(map(int, input().split()))\n    QUERY.append((n, k))\n\nprint(QUERY)\n"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"1 1\"\n) == \"Wh\"\nassert solution(\n\"1 2\"\n) == \"Areyoubusy\"\nassert solution(\n\"1 111111111111\"\n) == \"abdef\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11111\\n22\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"Areyoubusy\"\nassert solution(\"11111\\n22\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"Areyoubusy\""
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '?'\nassert solution('1 2') == '?'\n\n-----\n>>>nephren.solution()\n'Wh.\\nAreyoubusy'\n\"\"\"\n\nfrom collections import deque\n\nimport sys\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"? +? -? +? +? = 42\") == \"Possible\\n9 + 13 - 39 + 28 + 31 = 42\"\nassert solution(\"? -? = 1\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"? +? -? +? +? = 42\") == '9 + 13 - 39 + 28 + 31 = 42'\nassert solution(\"? +? -? +? +? =? +? -? +? +?\") == '1 + 2 - 3 + 4 + 5 = 2 + 1 - 3 + 4 + 5'\nassert solution(\"? -? =? +? +?\") == '1 - 2 = 1 + 2 + 3 + 4'\nassert solution(\"? = 1000000\") == '1000000 = 1000000'\n"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"? +? -? +? +? = 42\") == \"Possible\\n9 13 39 28 31 42\"\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \n\n\u0414\u0430\u043d\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u043b\u044f \u0440\u0435\u0431\u0443\u0441\u043e\u0432 \u0441 \u043e\u0434\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c. \n\u041e\u0442\u0432\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u043b\u044f \u0440\u0435\u0431\u0443\u0441\u043e\u0432 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438.\n\"\"\"\n\nfrom itertools import combinations, product\n\ninput = \"\"\"? +? -? +? +? = 42\n1 + 2 - 3 + 4 + 5 = 42\n1 + 2 - 3 + 4 - 5 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 + 8 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 + 11 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 + 14 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 + 16 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 + 18 + 19 + 20 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 + 24 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 + 26 + 27 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 + 28 + 29 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 + 30 + 31 + 32 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 + 33 + 34 + 35 + 36 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 + 35 + 36 + 37 + 38 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 + 38 + 39 + 40 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 - 38 + 39 + 40 + 41 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 - 38 + 39 + 40 - 41 + 42 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 - 38 + 39 + 40 - 41 - 42 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 - 38 + 39 + 40 - 41 - 42 + 43 + 44 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 - 38 + 39 + 40 - 41 - 42 + 43 - 44 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 - 38 + 39 + 40 - 41 - 42 + 43 - 44 + 45 + 46 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 - 38 + 39 + 40 - 41 - 42 + 43 - 44 + 45 - 46 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 - 28 + 29 - 30 + 31 + 32 - 33 + 34 - 35 + 36 + 37 - 38 + 39 + 40 - 41 - 42 + 43 - 44 + 45 - 46 + 47 + 48 = 42\n1 + 2 - 3 + 4 - 5 + 6 + 7 - 8 + 9 + 10 - 11 + 12 + 13 - 14 + 15 - 16 + 17 - 18 + 19 + 20 - 21 + 22 + 23 - 24 + 25 - 26 + 27 -"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? = 42') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"? +? -? +? = 42\") == \"Possible\\n9 + 13 - 39 + 28 + 31 = 42\"\nassert solution(\"? -? = 1\") == \"Impossible\"\nassert solution(\"? +? = 1000000\") == \"Possible\\n1000000 = 1000000\"\nassert solution(\"? = 1000000\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"? +? -? +? +? = 42\") == '9 + 13 - 39 + 28 + 31 = 42'\nassert solution(\"? -? = 1\") == 'Impossible'\nassert solution(\"? = 1000000\") == 'Possible\\n1000000 = 1000000'\nprint(\"Checked!\")\n\n\"\"\"\nimport re\nfrom collections import Counter"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(?) == \"Possible\"\n\"\"\""
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"? +? -? +? +? = 42\") == \"9 + 13 - 39 + 28 + 31 = 42\"\n\"\"\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? =?') == 'Impossible'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"? +? -? +? +? = 42\") == \"Possible\\n9 13 39 28 31\\n\"\nassert solution(\"? +? -? +? +? = 42\") == \"Possible\\n9 13 39 28 31\\n\"\nassert solution(\"? +? -? +? +? = 42\") == \"Possible\\n9 13 39 28 31\\n\"\nassert solution(\"? +? -? +? +? = 42\") == \"Possible\\n9 13 39 28 31\\n\"\n\"\"\"\n\ns = input()\ncount = s.count(\"?\")\n"
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\") == '7 4 5'\n\"\"\"\n\nN = int(input())\nmatrix = [list(map(int, input().split())) for _ in range(N)]\n\nzero, one, two = 0, 0, 0\nfor i in range(N):\n    for j in range(N):\n        if matrix[i][j] == 1:\n            one += 1\n        elif matrix[i][j] == 2:\n            two += 1\n        elif matrix[i][j] == 0:\n            zero += 1\n\nprint(zero, one, two, sep=\" \")\n"
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\\n\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\") == \"7 4 5\"\nassert solution(\"3\\n1 2 0\\n0 1 2\") == \"3 4 4\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\") == \"7 4 5\"\nassert solution(\"4\\n1 2 3 2\\n0\\n0\\n0\") == \"7 4 3\"\nassert solution(\"4\\n1 2 3 2\\n0 0 0 0\") == \"7 4 3\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    4\n    1 2 0 2\n    0\n    0\n    0\n    \"\"\"\n    ) == \"7 4 5\"\n\n\"\"\"\n[1, 2, 0, 2]\n[0, 1, 2, 0]\n[0, 2, 0, 1]\n[0, 1, 2, 0]\n\n0 2 2\n0 1 2\n0 0 1\n\"\"\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\") == \"7 4 5\"\nassert solution(\"4\\n1 2 0 2\\n0\\n1\\n0\") == \"6 4 5\"\nassert solution(\"3\\n0 2 0\\n0\\n2\") == \"3 2 1\"\n\"\"\""
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\") == \"7 4 5\"\n\"\"\""
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 0 2\\n0\\n0\\n0\\n') == '7 4 5'\n\"\"\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 0 2\\n0\\n0\\n0') == '7 4 5'\n\"\"\""
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\") == \"7 4 5\"\nprint(\"Test Successful!\")"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabddc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"jjj\") == \"Yes\"\n\"\"\"\nfrom collections import Counter\nimport string"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_str) == answer\n"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabddc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"jjj\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabddc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"jjj\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabddc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"jjj\") == \"Yes\"\nassert solution(\"ababa\") == \"No\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabddc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"jjj\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abababc') == 'Yes'\nassert solution('aabbc') == 'No'\nassert solution('aabbcc') == 'No'\nassert solution('aabbccc') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabddc\") == 'Yes'\nassert solution(\"abc\") == 'No'\nassert solution(\"jjj\") == 'Yes'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ababcc') == 'Yes'\nassert solution('aabcc') == 'No'\n\"\"\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aabddc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"jjj\") == \"Yes\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == 54\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nprint(sum(range(k + 1, n + 1)))\n"
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == 14\nassert solution(\"5 2\") == 72\n\n\"\"\"\n\nfrom typing import List, NamedTuple, Optional, Set, Tuple, Callable, Iterator, Dict\nfrom collections import defaultdict\n\nimport sys\nimport functools"
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n') == 6\nassert solution('3 4\\n') == 4\nassert solution('1 3\\n') == 2\nassert solution('2 2\\n') == 1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == 9\n\"\"\"\nimport math\nimport random\n"
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"7 2\") == \"54\"\nassert solution(\"7 4\") == \"1728\"\n\"\"\""
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == 54\nassert solution('7 4') == 1728\n"
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\n\nimport sys; x = sys.stdin.readline().strip(); a, b = x.split(' '); print(solution(a))\n\"\"\""
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\n\"\"\""
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n') == '54'\nassert solution('7 4\\n') == '1728'\n"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3\\n\" + \"BWW\\n\" + \"WWW\\n\") == \"1 1\"\nassert solution(\n\"5\\n\" + \"WBBB\\n\" + \"WBWB\\n\" + \"WBBB\\n\" + \"WBWB\\n\" + \"BWBW\\n\" + \"WBWB\") == \"3 3\"\nassert solution(\n\"8\\n\" + \"BWWB\\n\" + \"WBWB\\n\" + \"WBBW\\n\" + \"BWWB\\n\" + \"WBWB\\n\" + \"WBBW\\n\" + \"BWWB\\n\" + \"WBWB\") == \"4 2\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\") == \"2 4\"\n\n\"\"\""
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\") == \"2 4\"\nassert solution(\"3 3\\nWWW\\nBWW\\nWWW\") == \"2 1\"\nassert solution(\"4 4\\nWBRB\\nWRWB\\nBWWB\\nBWRB\") == \"1 4\"\nassert solution(\"5 5\\nWBWBW\\nWBBWB\\nWBWBW\\nWBWBW\") == \"4 4\"\nassert solution(\"4 3\\nWRWW\\nBWWB\\nWRWW\") == \"1 2\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\") == '2 4'\nassert solution(\"3 3\\nWWW\\nBWW\\nWWW\") == '2 1'\n\"\"\"\n\nn, m = map(int, input().split())\n"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\") == \"2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\") == '2 4'\nassert solution(\"3 3\\nWWW\\nBWW\\nWWW\") == '2 1'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW') == '2 4'\nassert solution('3 3\\nWWW\\nBWW\\nWWW') == '2 1'"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\nWWBBW\\nWWBBW\\nWWBBW\\nWWWWW\\nWWWWW') == '2 4'\nassert solution('3 3\\nWWW\\nBWW\\nWWW') == '2 1'\nassert solution('3 3\\nWWW\\nWBB\\nWWW') == '2 1'\nassert solution('1 1\\nW') == '1 1'\nassert solution('1 1\\nW') == '1 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nW W W\\nB B B\\nW W W\") == \"2 1\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\"\"\") == \"2 4\"\n\nassert solution(\"\"\"3 3\nWWW\nBWW\nWWW\"\"\") == \"2 1\"\n\n\n\nsolution(\"\"\"5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\"\"\") == \"2 4\"\n\nsolution(\"\"\"3 3\nWWW\nBWW\nWWW\"\"\") == \"2 1\"\n\nsolution(\"\"\"4 4\nWWW\nBWW\nBWW\nWWW\"\"\") == \"1 1\"\n\nsolution(\"\"\"5 5\nBWWW\nBWWW\nBWWW\nWWWW\nWWWW\"\"\") == \"2 2\"\n\nsolution(\"\"\"3 3\nWWW\nWBB\nWWW\"\"\") == \"2 1\"\n\nsolution(\"\"\"3 3\nWWW\nBBW\nWWW\"\"\") == \"2 1\"\n\nsolution(\"\"\"1 1\nB\"\"\") == \"1 1\"\n\nsolution(\"\"\"3 2\nWW\nWW\"\"\") == \"1 1\"\n\nsolution(\"\"\"2 2\nWW\nB\"\"\") == \"1 1\"\n\nsolution(\"\"\"5 5\nBWBWB\nWBWBW\nWBWBW\nWBWBW\nBWBWB\"\"\") == \"2 2\"\n\nsolution(\"\"\"3 3\nWWW\nWWW\nWWW\"\"\") == \"1 1\"\n\nsolution(\"\"\"5 3\nBWW\nWWW\nBWW\"\"\") == \"1 1\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nWBBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"1 1\nW\"\"\") == \"1 1\"\n\nsolution(\"\"\"5 1\nWWB\"\"\") == \"2 1\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\"\") == \"2 4\"\n\nsolution(\"\"\"5 5\nBWBWB\nBWBWB\nBWBWB\nBWBWB\nBWBWB\"\""
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"10 9 10 9\"\nassert solution(\"2 3\") == \"5 6\""
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 1\\n3 4\\n4 1\\n5 3\\n3 5\") == \"10 9 10 9\"\n\n----- Expected Output-----\n\n5 9 10 9 \n"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3\n1 2\n1 2\n1 2\n''') == '6'\n\nassert solution('''2 3\n3 4\n3 5\n''') == '5'\n\n\nassert solution('''2 3\n1 2\n1 2\n1 2\n''') == '5'\n\nassert solution('''5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == '10 9 10 9 10'\n\nassert solution('''1 2\n1 2\n1 2\n1 2\n''') == '1'"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7\\n2 4\\n5 1\\n2 3\\n3 4\\n4 1\\n5 3\\n3 5\") == '10 9 10 10 9'\n\n\"\"\"\n\n\nimport sys\nimport os\nimport functools\nimport collections\n"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 9''') == '4 9 4 9 4 9'\nassert solution('''3 10''') == '3 10 3 10 3 10'\nassert solution('''3 3''') == '3 3 3'\n'''\n3 2\n2 1\n1 3\n3 2\n'''\nassert solution('''5 8\n1 2\n1 3\n2 3\n3 4\n4 5\n5 1\n5 2\n''') == '5 6 10 6 10 6 6 6'\nassert solution('''4 6\n2 3\n3 4\n1 4\n1 3\n''') == '4 4 4 4'\n"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 2\\n1 2\\n1 2') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7\\n2 4\\n5 1\\n2 3\\n3 4\\n4 1\\n5 3\\n3 5\") == '10 9 10 9 9'\nassert solution(\"2 3\\n1 2\\n1 2\\n1 2\\n\") == '5 6'\n\n\"\"\"\n\nimport sys\n\n\"\"\"\nt = int(stdin.readline().strip())\nfor i in range(t):\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    res = [0] * n\n    for i in range(m):\n        res[a[i]-1] = b[i]\n    for i in range(n):\n        print(sum(min(b[j], res[j]) for j in range(n) if res[j] > 0))\n\"\"\"\n\nn, m = list(map(int, sys.stdin.readline().strip().split()))\na = list(map(int, sys.stdin.readline().strip().split()))\nb = list(map(int, sys.stdin.readline().strip().split()))\nc = [[0 for _ in range(n)] for _ in range(m)]\nfor i in range(m):\n    for j in range(n):\n        if a[i] == j+1:\n            c[i][j] = b[i]\n        else:\n            c[i][j] = c[i-1][a[i]-1]\nfor i in range(n):\n    print(sum(min(c[j][i], c[j-1][i]) for j in range(m)))\n"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\\n2 4\\n5 1\\n2 3\\n3 4\\n4 1\\n5 3\\n3 5\") == \"10 9 10 10 9\"\nassert solution(\"2 3\\n1 2\\n1 2\\n1 2\") == \"5 6\"\n\n\"\"\"\nimport sys\nimport numpy as np\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7\\n2 4\\n5 1\\n2 3\\n3 4\\n4 1\\n5 3\\n3 5\\n\") == \"10 9 10 9 10\"\nassert solution(\"2 3\\n1 2\\n1 2\\n1 2\\n\") == \"5 6\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7\\n2 4\\n5 1\\n2 3\\n3 4\\n4 1\\n5 3\\n3 5') == '10 9 10 9'"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\nassert solution('''1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'\n\n\n\n=================\nThe binary search way.\n\ntime complexity: O(n * log n)\nspace complexity: O(1)\n\n\u601d\u8def:\n\u8bbe\u70b9A\u5728\u7b2c\u4e00\u8c61\u9650\u4e0b\u65b9, \u82e5B\u5728\u7b2c\u4e00\u8c61\u9650, \u70b9B\u5e94\u662f\u5728\u7b2c\u4e00\u8c61\u9650\u7684\u4e2d\u95f4\u70b9, \u6211\u4eec\u53ea\u8981\u628a\u70b9A\u6295\u77f3\u5b50, \u5c06\u70b9A\u6295\u5728\u7b2c\u4e8c\u8c61\u9650\u4e0b\u65b9, \u6bd4\u8f83\u7b2c\u4e8c\u8c61\u9650\u4e2d\u95f4\u70b9\u662f\u5426\u5728\u7b2c\u4e8c\u8c61\u9650\u4e2d, \u4ee5\u6b64\u7c7b\u63a8\n\n\u82e5\u70b9A\u5728\u7b2c\u4e00\u8c61\u9650, \u70b9B\u5728\u7b2c\u4e8c\u8c61\u9650, \u6295\u77f3\u5b50\u5728\u7b2c\u4e00\u8c61\u9650, \u7b2c\u4e8c\u8c61\u9650\u4e2d\u95f4\u70b9\u4e3a\u70b9B, \u70b9A\u5e94\u4e3a\u7b2c\u4e09\u8c61\u9650\u4e2d\u95f4\u70b9\n\u82e5\u70b9A\u5728\u7b2c\u4e8c\u8c61\u9650, \u70b9B\u5728\u7b2c\u4e00\u8c61\u9650, \u6295\u77f3\u5b50\u5728\u7b2c\u4e8c\u8c61\u9650, \u7b2c\u4e00\u8c61\u9650\u4e2d\u95f4\u70b9\u4e3a\u70b9B, \u70b9A\u5e94\u4e3a\u7b2c\u4e09\u8c61\u9650\u4e2d\u95f4\u70b9\n\ntime complexity: O(n * log n)\nspace complexity: O(1)\n\"\"\"\n\n\nimport math\n\n\nclass Solution:\n    def findPoint(self, a: int, b: int, c: int) -> tuple:\n        if abs(b) > abs(a):\n            a, b = b, a\n        if abs(c) > abs(a):\n            a, c = c, a\n        if b == 0:\n            return (0, c // a)\n        if c == 0:\n            return (a // b, 0)\n        r = a // b\n        q = c // b\n        if r == q:\n            return (r, 0)\n        if r < q:\n            return (r + 1, c - r * b)\n        return (r, c - r * b)\n\n    def findPointOnFirst(self, a: int, b: int, c: int) -> tuple:\n        if abs(b) > abs(a):\n            a, b = b, a\n        if abs(c) > abs(a):\n            a, c = c, a\n        if b == 0:\n            return (0, c // a)\n        if c == 0:\n            return (a // b, 0)\n        return (0, c // b)\n\n    def distance(self, a: int, b: int, c: int) -> int:\n        return (abs(a) + abs(b)) // 2 + (abs(c) - abs(a)) // 2\n\n    def solve(self, x: int, y: int) -> int:\n        pointA = self.findPoint(x, y, x)\n        pointB = self.findPointOnFirst(x, y, x)\n        return self.distance(pointA[0], pointA[1], pointB[0]) + self.distance(pointB[0], pointB[1], y)\n"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n') == '2'\nassert solution('1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n\") == \"2\"\n\nassert solution(\"1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\\n\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n1 1 -3\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\") == \"2\"\n\"\"\"\nfrom math import gcd\n\nINPUT_1 = \"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n1 1 -3\"\nINPUT_2 = \"1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\"\nOUTPUT_1 = \"2\"\nOUTPUT_2 = \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n2\\n1 0 0\\n1 0 0\\n\") == \"0\"\nassert solution(\"1 1\\n-1 -1\\n2\\n1 0 0\\n-1 1 0\\n-1 1 0\\n\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n2\\n1 0 0\\n1 0 0\\n\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n\") == \"1\"\n\"\"\"\n\n\nclass UnionFind():\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.rank = [1] * n\n        self.size = [1] * n\n\n    def find(self, i):\n        if self.parents[i]!= i:\n            self.parents[i] = self.find(self.parents[i])\n        return self.parents[i]\n\n    def union(self, i, j):\n        x = self.find(i)\n        y = self.find(j)\n        if x == y:\n            return\n        if self.rank[x] < self.rank[y]:\n            self.parents[x] = y\n            self.size[y] += self.size[x]\n        else:\n            self.parents[y] = x\n            self.size[x] += self.size[y]\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n\n    def get_size(self, i):\n        return self.size[self.find(i)]\n\n    def connected(self, i, j):\n        return self.find(i) == self.find(j)\n"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n\") == '2'\nassert solution(\"1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\\n\") == '2'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\\n\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n-1 -1\\n2\\n1 0 0\\n1 0 0\\n') == '2'\nassert solution('1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\\n') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n') == '2'\nassert solution('1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\\n') == '2'\nassert solution('1 1\\n-1 -1\\n0\\n0 1 0\\n') == '1'\n\"\"\"\n\nfrom sys import stdin\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\nH, W = map(int, stdin.readline().split())\nA, B = map(int, stdin.readline().split())\n\nroad_len = int(stdin.readline())\nroad_mat = np.zeros((road_len, 3))\nfor i in range(road_len):\n    tmp = list(map(int, stdin.readline().split()))\n    road_mat[i] = [tmp[0], tmp[1], tmp[2]]"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"3 4\") == \"Nicky\"\n\n'''"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"Nicky\"\nassert solution(\"2 1\") == \"Kevin\"\nassert solution(\"3 4\") == \"Kevin\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n3 4\") == \"Kevin\"\nassert solution(\"1 2\\n3\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"Nicky\"\nassert solution(\"1 2\") == \"Nicky\"\n\"\"\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 1\\n3 4\") == \"Kevin\"\nassert solution(\n    \"1 2\\n3\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n3 4') == 'Kevin'\nassert solution('1 2\\n3') == 'Nicky'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n3 4\") == \"Kevin\"\nassert solution(\"1 2\\n3\") == \"Nicky\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n3 4\") == \"Kevin\"\nassert solution(\"1 2\\n3\") == \"Nicky\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n3 2 4\") == \"Nicky\"\nassert solution(\"2 1\\n3 2\") == \"Kevin\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n3 4') == 'Kevin'\nassert solution('1 2\\n3') == 'Nicky'\n\"\"\""
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '3\\n1 2 3\\n1 2 3'\nassert solution('2\\n2 1') == '1\\n1 1\\n2'\nassert solution('3\\n2 2 2') == '1\\n1 1 1\\n2'\n\n\"\"\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\\n1 2 3\"\n\"\"\""
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '3'\n\nassert solution('''\n2\n2 1\n''') == '-1'\n\nassert solution('''\n1\n2\n''') == '1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == '1','solution'\nassert solution('4\\n2 2 3 4') == '-1','solution'\n\"\"\""
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('3\\n1 2 3') == '3'\nassert solution('3\\n2 2 2') == '1'\nassert solution('3\\n2 2 2') == '1'\nassert solution('2\\n2 1') == '1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\\n1 2 3\"\nassert solution(\"3\\n1 2 3\") == \"3\\n1 2 3\"\nassert solution(\"3\\n1 2 3\") == \"3\\n1 2 3\"\nassert solution(\"3\\n1 2 3\") == \"3\\n1 2 3\"\nassert solution(\"3\\n1 2 3\") == \"3\\n1 2 3\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == '3\\n1 2 3'\nassert solution(\"3\\n1 2 3\") == '3\\n1 2 3'"
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"3\\n2 2 2\") == \"1\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import Counter\n"
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == '-1'\nassert solution(\"3 1 2\") == '3'\nassert solution(\"3 2 3\") == '3'\n"
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('2\\n2 1') == '1'\nassert solution('3\\n1 2 3') == '3'\nassert solution('3\\n1 2 3') == '3'\nassert solution('3\\n1 2 3') == '3'\n"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == 6\n\"\"\"\n\na = input()\nprint(len(a) - a.count('0'))\n"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(bin(12)) == 6\nassert solution(bin(11)) == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"6\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\") == 6\n\"\"\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"6\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == 6\nassert solution(\"01\") == 2"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == 6\nassert solution(\"01\") == 2\n"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == 6\n\"\"\"\n\nfrom itertools import combinations\nfrom functools import reduce"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"6\"\n\nassert solution(\"01\") == \"2\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 6\nassert solution('101') == 2\n\"\"\"\n\nfrom operator import xor\nfrom functools import reduce"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == 1\nassert solution(\"5 7\") == 3\nassert solution(\"5 7 4\") == 4\n\n\"\"\"\n\nimport sys\nfrom functools import reduce\nimport operator\n"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 2') == '3'\nassert solution('3 5 7') == '4'\nassert solution('2 5 7') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7\") == \"4\"\nassert solution(\"1 1 2\") == \"3\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"2 5 7\") == \"3\"\nassert solution(\"3 1 1 2\") == \"3\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1\") == \"3\"\nassert solution(\"3\\n1 1 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5 7\") == \"3\"\nassert solution(\"1 2 3 4 5 6\") == \"1\"\nassert solution(\"1 2 3 4 5 7\") == \"6\"\nassert solution(\"1 2 3 4 5 8\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1 3 2') == '3'\nassert solution('6 1 3 5') == '4'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"4\"\nassert solution(\"5 7\") == \"4\"\nassert solution(\"1 1 2\") == \"3\"\nassert solution(\"2 5 7\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\") == 1\nassert solution(\"2 1 1\") == 1\nassert solution(\"3 3 3\") == 3\nassert solution(\"3 1 1\") == 1\nassert solution(\"1 1 1\") == 1\n\"\"\""
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == 1\n\nassert solution('5 7') == 4\n\nassert solution('1 1 2') == 3\n\n\n\"\"\"\n\n\n\"\"\"\nThe problem is that we need to find the number of ways of decomposing positive integer m into ordered multipliers modulo 1000000007 (10^9 + 7). We consider each number b1, b2,..., bn as a unique ordered multiplier. The number of distinct decompositions is equal to the number of distinct ways of arranging n distinct ordered multipliers, modulo 1000000007.\n\nIf we consider that the list of distinct ordered multipliers is a set of Catalan numbers, then the number of distinct decompositions of m into ordered multipliers is equal to the Catalan number C_n modulo 1000000007.\n\nWe can compute C_n using C_{n-1} + 2 C_{n-2} +... + 2 C_1.\n\nThe base case is n = 0, which means that there are no distinct ordered multipliers. This means that the number of distinct decompositions of m into ordered multipliers is equal to 1.\n\nThen, it follows that the number of distinct decompositions of m into ordered multipliers is equal to C_n modulo 1000000007.\n\nIn the end, we print C_n modulo 1000000007.\n\npublic int solution(int n, int[] m) {\n    int res = 1;\n    for (int i = 1; i <= n; i++) {\n        res = (res * (m[i] + 1)) % 1000000007;\n    }\n    return res;\n}\n\nComplexity analysis\n\nTime complexity: O(n), where n is the number of elements in m.\n\nSpace complexity: O(1).\n\"\"\"\n\nfrom math import factorial\n\nclass Solution:\n    def solution(self, m):\n        n = len(m)\n        res = 1\n        for i in range(1, n + 1):\n            res = res * (m[i - 1] + 1) % 1000000007\n        return res\n"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n15') == '1'\nassert solution('3\\n1 1 2') == '3'\nassert solution('2\\n5 7') == '4'\nassert solution('2\\n7 5') == '3'\nassert solution('1\\n15') == '1'\n"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 0 2\\n2 0 1') == 'YES'\nassert solution('2\\n1 0\\n0 1') == 'YES'\nassert solution('4\\n1 2 3 0\\n0 3 2 1') == 'NO'\nassert solution('4\\n1 2 3 0\\n0 3 2 1') == 'NO'"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2, [0, 1], [1, 0]) == 'YES'\nassert solution(4, [1, 2, 3, 0], [0, 2, 3, 1]) == 'YES'\nassert solution(4, [1, 2, 3, 0], [0, 2, 3, 1]) == 'YES'\nassert solution(4, [1, 2, 3, 0], [0, 2, 3, 1]) == 'YES'\n\n-----Big-O-----\n"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 0 2\\n2 0 1\") == \"YES\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 0\\n0 3 2 1\") == \"NO\"\nassert solution(\"1\\n1 0\") == \"YES\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 0\\n0 3 2 1') == 'YES'\nassert solution('1 0 2\\n0 3 2 1') == 'YES'\nassert solution('1 2 3 0\\n0 3 2 1') == 'YES'\nassert solution('1 2 3 0\\n0 0 3 2 1') == 'NO'\nassert solution('1 2 3 0\\n0 3 2 1') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3 0\\n0 3 2 1\") == 'YES'\nassert solution(\"2\\n1 0\\n0 1\") == 'YES'\nassert solution(\"4\\n1 2 3 0\\n0 3 2 1\") == 'NO'\n\"\"\"\n\nn = int(stdin.readline())\nr = [int(x) for x in stdin.readline().split()]\nc = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n0 2 1') == 'YES'\nassert solution('2\\n1 0\\n0 1') == 'YES'\nassert solution('4\\n1 2 3 0\\n0 3 2 1') == 'NO'\nassert solution('2\\n0 1\\n1 0') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 0 2\\n2 0 1') == 'YES'\nassert solution('2\\n1 0\\n0 1') == 'YES'\nassert solution('4\\n1 2 3 0\\n0 3 2 1') == 'NO'\n\n-----"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 0\\n0 3 2 1') == 'YES'\nassert solution('3\\n1 0 2\\n0 3 2') == 'YES'\nassert solution('2\\n1 0\\n0 1') == 'YES'\n\n\"\"\"\n\n\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n\n    def test1(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test2(self):\n        solution('3\\n1 0 2\\n0 3 2')\n\n    def test3(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test4(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test5(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test6(self):\n        solution('3\\n1 0 2\\n0 3 2')\n\n    def test7(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test8(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test9(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test10(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test11(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test12(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test13(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test14(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test15(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test16(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test17(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test18(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test19(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test20(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test21(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test22(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test23(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test24(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test25(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test26(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test27(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test28(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test29(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test30(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test31(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test32(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test33(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test34(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test35(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test36(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test37(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test38(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test39(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test40(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test41(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test42(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test43(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test44(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test45(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test46(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test47(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test48(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test49(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test50(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test51(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test52(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    def test53(self):\n        solution('2\\n1 0\\n0 1')\n\n    def test54(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test55(self):\n        solution('3\\n1 0 2\\n0 2 1')\n\n    def test56(self):\n        solution('4\\n1 2 3 0\\n0 3 2 1')\n\n    "
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 0 2\n2 0 1''') == 'YES'\nassert solution('''4\n1 2 3 0\n0 3 2 1''') == 'YES'\nassert solution('''2\n1 0\n0 1''') == 'YES'\nassert solution('''4\n1 2 3 0\n0 3 2 1''') == 'NO'\nassert solution('''4\n0 2 3 1''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 0 2\\n2 0 1\") == \"YES\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 0\\n0 3 2 1\") == \"NO\"\n\nprint('OK')\n\"\"\""
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\") == '9000'\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == '1160'\n\"\"\"\nimport math"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == \"1160\"\n\"\"\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10') == '1160'"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n\") == \"1160\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n\") == \"1160\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n10\\n10\\n10\\n10\\n10\\n10\") == '1160'\nassert solution(\"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6\n8 10 9 9 8 10''') == '9000'\nassert solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10''') == '1160'\n\"\"\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n\") == \"1160\"\n\"\"\"\nimport collections\n\nn = int(stdin.readline())\ncost = list(map(int, stdin.readline().split()))\ncount = list(map(int, stdin.readline().split()))\n\ncost = collections.Counter(cost)\ntotal = 0\nfor key, value in cost.items():\n    if value < 2:\n        continue\n    else:\n        total += key * value"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9000'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom itertools import permutations, combinations\nfrom typing import List\nfrom math import ceil\nfrom functools import reduce\n"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1') == '9000'\n\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 10 9 9 8 10') == '9000'\nassert solution('1 10 5 5 1 10') == '1160'\n\n\"\"\"\nimport sys\nimport math\n\nMAX = 10 ** 8"
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n1 2\n1 3\n2 3''') == 1\n\nassert solution('''5 2\n2 3\n1 4\n1 4\n2 1\n2 3\n2 4''') == 2\n\nassert solution('''1 1\n2 2''') == 0\n\nassert solution('''3 2\n3 1\n2 3\n2 1''') == 0\n\nassert solution('''4 4\n3 4\n4 3\n4 4\n3 3\n3 3''') == 6"
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n2 3\\n1 4\\n1 4\\n2 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n2 3\\n1 4\\n1 4\\n2 1\") == 6\n\"\"\"\nfrom math import factorial\nfrom typing import List\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n2 3\\n1 4\\n1 4\\n2 1') == 6\n\"\"\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 3\\n1 4\\n1 4\\n2 1\") == '6'\n\n\"\"\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2 3\\n1 4\\n1 4\\n2 1\") == \"6\"\nassert solution(\"8 6\\n5 6\\n5 7\\n5 8\\n6 2\\n2 1\\n7 3\\n1 3\\n1 4\") == \"1\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 3\\n1 4\\n1 4\\n2 1\\n\") == 6\n"
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2 3\\n1 4\\n1 4\\n2 1') == '6'\n"
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n2 3\\n1 4\\n1 4\\n2 1') == '6'\nassert solution('8 6\\n5 6\\n5 7\\n5 8\\n6 2\\n2 1\\n7 3\\n1 3\\n1 4') == '1'\n\nprint(\"OK\")\n\n'''\n"
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 3\\n1 4\\n1 4\\n2 1\") == '6'\nassert solution(\"8 6\\n5 6\\n5 7\\n5 8\\n6 2\\n2 1\\n7 3\\n1 3\\n1 4\") == '1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 4 6\") == \"5\"\nassert solution(\"2 6 9\") == \"4\"\nassert solution(\"2 6 9\") == \"4\"\nassert solution(\"2 6 9\") == \"4\"\nassert solution(\"2 6 9\") == \"4\"\n\"\"\""
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 2 3 4 6\") == \"5\"\nassert solution(\"4\\n2 4 6 8\") == \"-1\"\nassert solution(\"3\\n2 6 9\") == \"4\""
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 3 4 6') == '5'\nassert solution('2 6 9') == '-1'\nassert solution('2 6 9') == '4'\n\n\n\n----- Hints -----\n\nTry to do it in a greedy way.\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 6\") == \"5\"\nassert solution(\"4 6 8\") == \"-1\"\nassert solution(\"3 6 9\") == \"4\"\n\"\"\""
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == 4\nassert solution(\"2 4 6 8\") == -1\nassert solution(\"2 6 9\") == 4\n\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 2 3 4 6''') == '5'\nassert solution('''4\n2 4 6 8''') == '-1'\nassert solution('''3\n2 6 9''') == '4'\n'''\n"
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3 4 6') == '5'\nassert solution('4 2 6 8') == '-1'\nassert solution('3 2 6 9') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3 4 6\") == '5'\nassert solution(\"3 2 6 9\") == '4'\nassert solution(\"2 6 9\") == '-1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 2 3 4 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacabaca\") == \"3\\naca\\nba\\nc\\na\"\nassert solution(\"abaca\") == \"0\"\nassert solution(\"abc\") == \"0\"\nassert solution(\"a\") == \"0\"\nassert solution(\"aa\") == \"1\\na\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacabaca') == ['aca', 'ba', 'ca']\n\"\"\""
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacabaca') == 3\nassert solution('abaca') == 0\n"
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacabaca') == 3\nassert solution('abaca') == 0"
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacabaca') == ['aca', 'ba', 'ca']\nassert solution('abaca') == []\n"
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacabaca') == 3\nassert solution('abaca') == 0\n\"\"\"\n\ns = input()\n\nl = []\n\nfor i in range(len(s) - 2):\n    for j in range(i + 1, len(s) - 1):\n        if s[i]!= s[j]:\n            if s[i] == s[j + 1]:\n                continue\n            else:\n                l.append(s[i:j + 1])\nprint(len(l))\n\nprint(*sorted(l), sep='\\n')\n"
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacabaca\") == 3\nassert solution(\"abaca\") == 0\n"
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacabaca\") == \"3\\naca\\nba\\ncabaca\"\nassert solution(\"abaca\") == \"0\""
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacabaca\") == 3\n\n\"\"\""
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacabaca\") == 3\nassert solution(\"abaca\") == 0\n"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == 2\n\"\"\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == \"2\"\nassert solution(\"1 5\\n1#2#3\") == \"-1\"\n\"\"\"\n\nimport sys\n\nrow, col = map(int, sys.stdin.readline().split())\n\nm = []\nfor _ in range(row):\n    m.append(list(sys.stdin.readline()))\n\nfor i in range(row):\n    for j in range(col):\n        if m[i][j] == \".\":\n            m[i][j] = \"3\"\n            for k in range(row):\n                for l in range(col):\n                    if m[k][l] == \"#\":\n                        m[k][l] = \"0\"\n        if m[i][j] == \"#\":\n            m[i][j] = \"0\""
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == 2\n\"\"\"\n\nfrom collections import deque, defaultdict\nfrom itertools import product"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n11..2\\n#..22\\n#.323\\n.#333') == '2'\nassert solution('1 5\\n1#2#3') == '-1'\nassert solution('2 2\\n..\\n..') == '2'\nassert solution('3 2\\n.###\\n#.#\\n.###') == '-1'\nassert solution('4 5\\n11..2\\n#..22\\n#.323\\n.#333') == '2'\n"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == ''\nassert solution('4 5\\n11..2\\n#..22\\n#.323\\n.#333') == '2'\nassert solution('3 5\\n.22\\n#.323\\n.333\\n#.1\\n.#2') == '0'\nassert solution('4 5\\n.22\\n#.323\\n.333\\n#.1\\n.2') == '-1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == \"2\"\n\"\"\""
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == 2\n"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == '2'\n\"\"\"\n\nn, m = map(int, input().split())\nmatrix = [list(input()) for _ in range(n)]\n\nfor row in range(n):\n    for col in range(m):\n        if matrix[row][col] == '.':\n            matrix[row][col] = 0\n            for r in range(row+1, n):\n                if matrix[r][col] == '#':\n                    break\n                matrix[r][col] = 0\n            for r in range(row-1, -1, -1):\n                if matrix[r][col] == '#':\n                    break\n                matrix[r][col] = 0\n            for c in range(col+1, m):\n                if matrix[row][c] == '#':\n                    break\n                matrix[row][c] = 0\n            for c in range(col-1, -1, -1):\n                if matrix[row][c] == '#':\n                    break\n                matrix[row][c] = 0"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n11..2\\n#..22\\n#.323\\n.#333') == '2'\n"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"))((())(\") == 6\nassert solution(\"(())\") == 2\nassert solution(\"(()(()))\") == -1\nassert solution(\"(\") == -1\nassert solution(\"()(\") == 2\n"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"))((\").startswith('-1')\nassert solution(\"))((\").endswith('6')\n"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"))((()\") == 6\nassert solution(\"))((())\") == 6\nassert solution(\"(()))((()\") == -1\nassert solution(\"))(\") == -1\nassert solution(\"()))((()\") == -1\n"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(((()()))())\") == \"1\"\nassert solution(\"((()))\") == \"2\"\nassert solution(\"(((())))(\") == \"2\"\nassert solution(\"(())(())(())(()(()(()))(()())((())((())())))((())((()())(()((()())(()((((())(((((())))))))(()(((())))((()(())(()(())())(()(())())))(()(())())))((()())))((((((()))())))))((((())((()((((((((((((((()(()())((()((((((((((((((((())))((())(())))((((((((((((((((((((((((((())))(((((((((((((((((())))))((()(()(()(((((())())())())())))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))((()(()(()(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\")((()))\") == 6\nassert solution(\"))((()))\") == -1\n"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('))((())(') == 6\nassert solution('(())') == -1\nassert solution('())(') == -1\nassert solution('))(') == -1\nassert solution('()()())(()(()))(()())()()()') == 15\n\n\"\"\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"))((\") == 6\nassert solution(\"))(())(\") == -1\nassert solution(\"))())(\") == -1\n\"\"\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"))(\") == -1\nassert solution(\"))((\") == 6\nassert solution(\"))((()\") == 6\nassert solution(\"))((()()\") == 6"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"))((\") == 6\n"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"))((\") == 6\nassert solution
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\\n\") == \"1\\n3\"\nassert solution(\"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\\n\") == \"4\\n1 2 3 4\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import groupby"
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3') == '4\\n1 2 3 4'\nassert solution('4 3 2\\n1 4\\n3 2\\n3 1') == '4\\n1 2 3'\nassert solution('6 3 1\\n4 4\\n1 5\\n2 5\\n4 5\\n5 3\\n3 4') == '1 2 3 4'\nassert solution('6 3 1\\n4 4\\n1 5\\n2 5\\n4 5\\n5 3\\n3 4') == '1 2 3 4'\nassert solution('6 3 1\\n4 4\\n1 5\\n2 5\\n4 5\\n5 3\\n3 4') == '1 2 3 4'\n"
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\\n\") == \"1\"\nassert solution(\"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\\n\") == \"4\"\nassert solution(\"4 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\\n\") == \"1\"\nassert solution(\"4 4 5\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\\n\") == \"1\"\n\"\"\"\n\n\nfrom itertools import groupby"
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\") == \"1 2 3 4\"\nassert solution(\"3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\") == \"1 2 3\""
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1'\n) == '1\\n3'\n\nassert solution(\n    '4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3'\n) == '4\\n1 2 3 4'\n\"\"\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\") == \"1\\n3\\n\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\") == \"1\\n3\"\nassert solution(\"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\") == \"4\\n1 2 3 4\"\n\n\"\"\""
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\") == \"1\\n3\"\nassert solution(\"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\") == \"4\\n1 2 3 4\"\n\n\"\"\"\n\n\nimport sys\n\n\nclass Client(object):\n    def __init__(self, name, one, two):\n        self.name = name\n        self.one = one\n        self.two = two\n\n    def __repr__(self):\n        return \"Client(%r, %r, %r)\" % (self.name, self.one, self.two)\n"
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\") == \"4\\n1 2 3 4\"\nassert solution(\"3 3 5\\n4 4 0\\n1 3\") == \"1\\n3\"\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\") == \"1\\n3\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 8\n\"\"\"\nfrom typing import Tuple, List\n"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == 8\n\"\"\"\n\nn, m = list(map(int, input().split()))\n"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '8'\n'''\n"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n2 2') == 3\n\n\n\n>>> import itertools\n>>> list(itertools.permutations(['0','1','2','3','4','5'],6))\n[('0', '1', '2', '3', '4', '5'), ('0', '1', '2', '3', '5', '4'), ('0', '1', '2', '4', '3', '5'), ('0', '1', '2', '4', '5', '3'), ('0', '1', '3', '2', '4', '5'), ('0', '1', '3', '2', '5', '4'), ('0', '1', '3', '4', '2', '5'), ('0', '1', '3', '4', '5', '2'), ('0', '1', '4', '2', '3', '5'), ('0', '1', '4', '2', '5', '3'), ('0', '1', '4', '3', '2', '5'), ('0', '1', '4', '3', '5', '2'), ('0', '1', '4', '5', '2', '3'), ('0', '1', '4', '5', '3', '2'), ('0', '2', '1', '3', '4', '5'), ('0', '2', '1', '3', '5', '4'), ('0', '2', '1', '4', '3', '5'), ('0', '2', '3', '1', '4', '5'), ('0', '2', '3', '1', '5', '4'), ('0', '2', '3', '4', '1', '5'), ('0', '2', '3', '4', '5', '1'), ('0', '2', '4', '1', '3', '5'), ('0', '2', '4', '1', '5', '3'), ('0', '2', '4', '3', '1', '5'), ('0', '2', '4', '3', '5', '1'), ('0', '2', '4', '5', '1', '3'), ('0', '2', '4', '5', '3', '1'), ('0', '3', '1', '2', '4', '5'), ('0', '3', '1', '2', '5', '4'), ('0', '3', '1', '4', '2', '5'), ('0', '3', '2', '1', '4', '5'), ('0', '3', '2', '1', '5', '4'), ('0', '3', '2', '4', '1', '5'), ('0', '3', '4', '1', '2', '5'), ('0', '3', '4', '1', '5', '2'), ('0', '3', '4', '2', '1', '5'), ('0', '3', '4', '2', '5', '1'), ('0', '3', '4', '5', '1', '2'), ('0', '3', '4', '5', '2', '1'), ('0', '3', '5', '1', '2', '4'), ('0', '3', '5', '1', '2', '4'), ('0', '3', '5', '1', '4', '2'), ('0', '3', '5', '2', '1', '4'), ('0', '3', '5', '2', '4', '1'), ('0', '3', '5', '4', '1', '2'), ('0', '3', '5', '4', '2', '1'), ('0', '4', '1', '2', '3', '5'), ('0', '4', '1', '2', '5', '3'), ('0', '4', '1', '3', '2', '5'), ('0', '4', '1', '3', '5', '2'), ('0', '4', '1', '4', '2', '5'), ('0', '4', '1', '4', '3', '5'), ('0', '4', '1', '5', '2', '3'), ('0', '4', '2', '1', '3', '5'), ('0', '4', '2', '1', '5', '3'), ('0', '4', '2', '3', '1', '5'), ('0', '4', '2', '3', '5', '1'), ('0', '4', '2', '5', '1', '3'), ('0', '4', '3', '1', '2', '5'), ('0', '4', '3', '1', '5', '2'), ('0', '4', '3', '2', '1', '5'), ('0', '4', '3', '2', '5', '1'), ('0', '4', '3', '4', '1', '5'), ('0', '4', '3', '4', '5', '1'), ('0', '4', '3', '5', '1', '2'), ('0', '4', '3', '5', '2', '1'), ('0', '4', '5', '1', '2', '3'), ('0', '4', '5', '1', '2', '3'), ('0', '5', '1', '2', '3', '4'), ('0', '5', '1', '2', '4', '3'), ('0', '5', '1', '3', '2', '4'), ('0', '5', '1', '3', '4', '2'), ('0', '5', '1', '4', '2', '3'), ('0', '5', '1', '4', '3', '2'), ('0', '5', '2', '1', '3', '4'), ('0', '5', '2', '1', '4', '3'), ('0', '5', '2', '3', '1', '4'), ('0', '5', '2', '3', '4', '1'), ('0', '5', '2', '4', '1', '3'), ('0', '5', '2', '4', '3', '1'), ('0', '5', '3', '1', '2', '4'), ('0', '5', '3', '1', '4', '2'), ('0', '5', '3', '2', '1', '4'), ('0', '5', '3', '2', '4', '1'), ('0', '5', '3', '4', '1', '2'), ('0', '5', '3', '4', '2', '1'), ('0', '5', '4', '1', '2', '3'), ('0', '5', '4', '1', '2', '3'), ('0', '5', '4', '1', '3', '2'), ('0', '5', '4', '2', '1', '3'), ('0', '5', '4', '2', '3', '1'), ('0', '5', '4', '3', '1',"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '8'\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\nmodulo = 10 ** 9 + 7"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == 8\nassert solution(\"2 4\") == 16\nassert solution(\"3 4\") == 24\nassert solution(\"2 5\") == 40\nassert solution(\"3 5\") == 48\n"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 1\nassert solution('1 2') == 0\nassert solution('2 3') == 2\nassert solution('2 4') == 3\nassert solution('5 5') == 10\n\"\"\"\n\nn, m = map(int, input().split())\n\nMOD = 10 ** 9 + 7"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '8'\nassert solution('2 2') == '4'\nassert solution('1 1') == '1'\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom copy import deepcopy\n"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '2'\nassert solution('a') == '2'\nassert solution('aa') == '4'\nassert solution('aa\\naa') == '4'\nassert solution('aa\\nba') == '4'\n"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2\\n2 1\") == '5\\n'\n\"\"\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 3\\n1 2\\n1 1\\n2 1\\n3 1\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 2\\n2 3') == '5'\nassert solution('100 3\\n1 2\\n2 1\\n3 1') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 1\\n2 100') == '100'\nassert solution('100 1\\n1 100\\n2 100') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2\\n2 3') == '5'\nassert solution('100 3\\n1 2\\n2 1\\n3 1') == '100'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\n\nq = [0 for _ in range(n)]\nw = [0 for _ in range(n)]\n\nfor _ in range(m):\n    q_i, w_i = map(int, input().split())\n    q[q_i - 1] += 1\n    w[q_i - 1] += w_i\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][1] = w[0]\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], w[i])\n    dp[i][1] = dp[i - 1][0] + w[i]\n\nprint(max(dp[-1][0], dp[-1][1]))\n"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n2 3\") == \"5\"\nassert solution(\"1 1\\n2 100\") == \"100\"\nassert solution(\"1 2\\n2 1\\n3 1\") == \"4\"\n\n\n\"\"\"\n\nimport math\nimport collections\n"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 1\\n2 1\\n3 1\") == \"2\"\nassert solution(\"3 2\\n1 2\\n2 1\\n3 1\") == \"100\"\n\"\"\""
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 2\n1 2\n2 3\"\"\") == \"5\"\nassert solution(\"\"\"100 3\n1 2\n2 1\n3 1\"\"\") == \"100\"\nassert solution(\"\"\"1 2\n1 1\n2 100\"\"\") == \"100\""
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 2\\n2 3') == 5\n"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 2\\n2 1\\n3 1\") == \"5\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == output\n\"\"\""
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaabb\") == 6\nassert solution(\"usaco\") == 1\nassert solution(\"lol\") == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaabb\") == 6\nassert solution(\"usaco\") == 1\nassert solution(\"lol\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n\"\"\""
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('ab') == 0\nassert solution('aa') == 1\nassert solution('aaa') == 1\n"
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaabb\") == 6\nassert solution(\"usaco\") == 1\nassert solution(\"lol\") == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n\"\"\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaabb\") == \"6\"\nassert solution(\"usaco\") == \"1\"\nassert solution(\"lol\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaabb\") == 6\nassert solution(\"usaco\") == 1\nassert solution(\"lol\") == 2\n\"\"\""
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\nassert solution('asd') == 1\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"20\") == \"1\"\nassert solution(\"50\") == \"3\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '1'\nassert solution('13') == '3'\nassert solution('14') == '3'\nassert solution('15') == '3'\nassert solution('16') == '3'\n"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"9\") == \"1\"\nassert solution(\"27\") == \"3\"\nassert solution(\"100\") == \"4\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"4\") == '2'\nassert solution(\"3\") == '1'\nassert solution(\"10\") == '3'\nassert solution(\"16\") == '4'\n"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n\"\"\""
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == 1\nassert solution('11') == 2\nassert solution('12') == 2\nassert solution('13') == 2\nassert solution('14') == 3\n"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"3\"\n\"\"\""
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4\\n2 5\\n3 6\") == \"1 2\\n2 1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n1 4\n2 5\n3 6\n\"\"\") == \"\"\"1 2\n2 1\n1 2\"\"\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")\n"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 4\n2 5\n3 6\n''') == '1 2\\n2 1\\n1 2\\n'\n\"\"\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 4\\n2 5\\n3 6\\n') == '1 2\\n2 1\\n1 2\\n'\nassert solution('3\\n1 4\\n2 5\\n3 6\\n') == '1 2\\n2 1\\n1 2\\n'\nassert solution('3\\n1 2\\n2 3\\n3 1\\n') == '1 2\\n2 1\\n1 2\\n'\nassert solution('3\\n1 2\\n2 3\\n3 1\\n') == '1 2\\n2 1\\n1 2\\n'\nassert solution('3\\n2 3\\n3 1\\n') == '2 1\\n2 1\\n1 2\\n'\n"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 4\\n2 5\\n3 6') == '1 2\\n2 1\\n1 2'\n\"\"\"\n\n\"\"\"\nWrong answer\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 4\\n2 1\\n3 5\\n1 4\") == \"2 1\"\nassert solution(\"3\\n3 4\\n2 1\\n3 5\") == \"1 2\"\nassert solution(\"1\\n2\\n3\") == \"1 2\"\nassert solution(\"1\\n2\\n3\\n3\\n3\") == \"1 2\"\nassert solution(\"2\\n3\\n4\\n3\\n3\") == \"1 2\"\n\nimport math"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 4\\n2 5\\n3 6\") == '1 2\\n2 1\\n1 2'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nmen = [int(x) for x in sys.stdin.readline().strip().split()]\nwomen = [int(x) for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 4\\n2 5\\n3 6\") == \"1 2\\n2 1\\n1 2\"\nassert solution(\"2\\n1 4\\n2 5\") == \"1 2\\n2 1\"\n\"\"\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 4\\n2 5\\n3 6\") == '1 2\\n2 1\\n1 2'\nassert solution(\"3\\n1 3\\n2 4\\n3 5\") == -1\n\n-----Test1-----\nInput\n4\n1 2\n2 3\n3 4\n4 5\n\nOutput\n2 1\n1 2\n1 2\n2 1\n\n-----Test2-----\nInput\n1\n1 1\n\nOutput\n1 1\n\n-----Test3-----\nInput\n4\n1 1\n2 2\n3 3\n4 4\n\nOutput\n1 2\n2 1\n1 2\n2 1\n\n-----Test4-----\nInput\n5\n1 5\n2 4\n3 5\n4 3\n5 1\n\nOutput\n2 1\n1 2\n1 2\n2 1\n2 1\n\n-----Test5-----\nInput\n5\n3 2\n1 3\n4 1\n3 5\n2 4\n\nOutput\n-1\n\"\"\""
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 4\n2 5\n3 6''') == '1 2\\n2 1\\n1 2\\n'\n\nprint(solution(stdin))\n\n\n\n\n\"\"\""
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('8') == '4'\n\"\"\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1 1 1 2 3\"\nassert solution(\"8\") == \"2 1 1 2 3 2 1\"\nassert solution(\"15\") == \"3 1 1 2 3 2 2 1 1 3 2 3 1 3 2 1 2 3 3 2 1 2 3\"\n\"\"\"\nimport math"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2 1\"\nassert solution(\"8\") == \"4\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n2 1\\n3\\n3 1\\n3 2\\n3 2 1\\n4\\n4\\n4 1\\n4 2\\n4 2 1\") == \"2 1\\n3 2 1\\n3 2 1\\n4 4\\n4 4\\n4 4\\n4 4\"\n\"\"\"\n\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8''') == '4'\nassert solution('''1''') == '1'\nassert solution('''2''') == '2 1'\nassert solution('''3''') == '2 1 1'\nassert solution('''4''') == '2 1 1 2'\n"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"1 1\"\nassert solution(3) == \"2 1\"\nassert solution(8) == \"4\"\nprint('all tests passed')"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '1 2'\nassert solution('3\\n') == '2 1 2 1'\nassert solution('8\\n') == '4 2 2 1 1 1 2 2 1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nslimes = list(map(int, sys.stdin.readline().split()))\nres = []\nfor i in range(N - 1):\n    if i < len(slimes) - 1:\n        if slimes[i] == slimes[i + 1]:\n            slimes[i] = slimes[i] + 1\n            slimes[i + 1] = -1\n        else:\n            pass\n    else:\n        pass\nfor i in range(len(slimes)):\n    if slimes[i]!= -1:\n        res.append(slimes[i])\nprint(' '.join(map(str, res)))"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '2 1'\nassert solution('8') == '4'\n\n\"\"\"\n\nimport sys\nimport collections\nimport random\n"
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabaac') == 'aba aca'\nassert solution('0rTrT022') == '02TrrT20'\n"
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabaac\") == \"2\\naba aca\"\n\"\"\""
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabaac') == '2abaac'\nassert solution('0rTrT022') == '102TrrT20'\nassert solution('0rTrT022') == '1TrrT20'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaa\") == \"aaa\"\nassert solution(\"aabaac\") == \"aba\"\nassert solution(\"aabaa\") == \"aba\"\nassert solution(\"aabaa\") == \"aba\"\nassert solution(\"aabaac\") == \"aba\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabaac') == 2\nassert solution('0rTrT022') == 1\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabaac') == 2, 'Example #1'\nassert solution('0rTrT022') == 1, 'Example #2'\nassert solution('aA') == 2, 'Example #3'\n\nprint('Hooray!')"
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabaac') == 2, \"WA\"\nassert solution('0rTrT022') == 1, \"WA\"\nassert solution('aaaa') == 1, \"WA\"\nassert solution('aA') == 2, \"WA\"\nassert solution('aa') == 1, \"WA\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'abaac') == '2abaac'\nassert solution(\n    '0rTrT022') == '102TrrT20'\n\n\"\"\""
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabaac\") == \"2\"\nassert solution(\"0rTrT022\") == \"1\"\nassert solution(\"aA\") == \"2\"\n\"\"\""
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aabaac\") == 2\nassert solution(\"0rTrT022\") == 1\nassert solution(\"aA\") == 2"
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\na**d\\n2\\nabcd\\nacbd\") == '2'\n"
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4a**d') == '2'\nassert solution('2a*a') == '1'\nassert solution('5a**d') == '0'\nassert solution('3a*a') == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"a**d\") == 2\nassert solution(\"l*er\") == 0\nassert solution(\"lo*er\") == 1\nassert solution(\"lo*er\") == 1\n"
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\na*d') == '2'\nassert solution('5\\nlo*er') == '0'\nassert solution('3\\na*a') == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\na**d\\n2\\nabcd\\nacbd\") == \"2\"\nassert solution(\"5\\nlo*er\\n2\\nlover\\nloser\") == \"0\"\nassert solution(\"3\\na*a\\n2\\naaa\\naba\") == \"1\""
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\na**d\") == 2\nassert solution(\"5\\lo*er\") == 0\nassert solution(\"3\\a*a\") == 1"
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\na**d\\n2\\nabcd\\nacbd\") == 2\nassert solution(\"5\\nlo*er\\n2\\nlover\\nloser\") == 0\nassert solution(\"3\\na*a\\n2\\naaa\\naba\") == 1\nassert solution(\"5\\nlo*er\\n2\\nlover\\nloser\") == 0\nassert solution(\"4\\na**d\\n2\\nabcd\\nacbd\") == 2\n"
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\na**d\\n2\\nabcd\\nacbd\") == \"2\"\nassert solution(\"5\\nlo*er\\n2\\nlover\\nloser\") == \"0\"\nassert solution(\"3\\na*a\\n2\\naaa\\naba\") == \"1\"\n\"\"\""
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\na*a\\n2\\naaa\\naba\") == \"1\"\nassert solution(\"3\\na*a\\n2\\naba\\nab\") == \"0\"\nassert solution(\"4\\na**a\\n2\\nabcd\\nacbd\") == \"2\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\na**d\") == \"2\"\nassert solution(\"5\\lo*er\") == \"0\"\nassert solution(\"3\\a*a\") == \"1\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 1\\n1 0 0 0 4\") == 1\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 1\\n1 0 0 0 4\") == 1\nassert solution(\"4 1 2\\n3 8 0 1 0\") == 2\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 1\\n1 0 0 0 4\") == \"1\"\nassert solution(\"6 1 2\\n3 8 0 1 0 0\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 1\\n1 0 0 0 4\\n\") == \"1\"\nassert solution(\"6 1 2\\n3 8 0 1 0 0\\n\") == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4') == 1\nassert solution('6 1 2\\n3 8 0 1 0 0') == 2\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 0 0 0 4') == '1'\nassert solution('1 0 0 0 4\\n3 8 0 1 0 0\\n') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 1\\n1 0 0 0 4\") == \"1\"\nassert solution(\"6 1 2\\n3 8 0 1 0 0\") == \"2\"\n\n\n---\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 1\\n1 0 0 0 4\\n\") == \"1\"\nassert solution(\"6 1 2\\n3 8 0 1 0 0\\n\") == \"2\"\n\n\"\"\"\nfrom collections import deque\nimport itertools\nimport sys"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == '40'\n\n\"\"\""
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Palindromic tree is better than splay tree\"\nassert solution(\"1 42\") == \"172\"\n\"\"\"\n\nfrom typing import Dict, List, Set, Tuple\n"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '40'\nassert solution('1 42\\n') == '1'\nassert solution('6 4\\n') == '172'\n\"\"\"\n\nimport math\nimport sys\n\ntry:\n    A = int(input())\n    N = int(input())\n    if A == 0 or A < 0 or N < 1:\n        print(\"Palindromic tree is better than splay tree\")\n    else:\n        Q = math.floor(A*N)\n        if Q == 0:\n            print(1)\n        else:\n            print(Q)\nexcept:\n    print(\"Palindromic tree is better than splay tree\")\n"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\n\"\"\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 1) == 1\nassert solution(6, 42) == 172\nassert solution(1, 42) == 1\n\"\"\"\n\nimport math\n\np, q = map(int, input().split())"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 42') == '1'\nassert solution('1 1') == 'Palindromic tree is better than splay tree'\n"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n\") == \"Palindromic tree is better than splay tree\"\nassert solution(\"1 42\\n\") == \"1\"\nassert solution(\"6 4\\n\") == \"172\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Palindromic tree is better than splay tree'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"Palindromic tree is better than splay tree\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 4 1\") == \"6\"\nassert solution(\"5\\n3 1 4 1 5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 4\\n') == '5'\nassert solution('4 1 4 1\\n') == '6'\n\"\"\""
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 1 4') == '5'\nassert solution('4\\n3 1 4 1') == '6'\nassert solution('5\\n3 1 4 1 5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 4 1\") == '5'\n\nassert solution(\"4\\n3 1 4 1\") == '6'\n\nassert solution(\"4\\n3 1 4 1\") == '6'\n\nassert solution(\"5\\n3 1 4 1 5\") == '11'\n\nassert solution(\"4\\n3 1 4 1\") == '6'\n\n\"\"\""
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 4 1\") == \"6\"\nassert solution(\"5\\n3 1 4 1 5\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n2 1 4\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n4\n3 1 4 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n5\n3 1 4 1 5\n\"\"\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 4') == '5'\nassert solution('4\\n3 1 4 1') == '6'\nassert solution('5\\n3 1 4 1 5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 4') == '5'\nassert solution('4\\n3 1 4 1') == '6'\nassert solution('5\\n3 1 4 1 5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 4 1 5\") == \"11\"\nassert solution(\"4\\n3 1 4 1\") == \"6\""
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n3 1 4 1\n''') == '6'\nassert solution('''5\n3 1 4 1 5\n''') == '11'\nassert solution('''5\n4 1 4 1 5\n''') == '7'\nassert solution('''4\n3 1 4 1\n''') == '5'\nassert solution('''4\n3 1 1 2\n''') == '4'\n"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 -1') == 2\n\"\"\""
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 0 0 -1\\n\") == 1\n"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 -1\") == 2\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n1 0 0 -1''') == '1'\nassert solution('''2\n1 -1''') == '2'\n'''\n"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 0 0 -1\\n\") == \"1\"\nassert solution(\"2\\n1 -1\\n\") == \"2\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 0 0 -1') == '1'\nassert solution('2\\n1 -1') == '2'\n"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 0 0 -1') == '1'\n\"\"\"\n\nimport math\nn = int(input())\nA = list(map(int, input().split()))\nA = [A[i] + i for i in range(n)]\nmin_ = math.inf\nfor i in range(n):\n    for j in range(i + 1, n):\n        if i!= j:\n            min_ = min(min_, A[i] * A[j])\nprint(min_)\n"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 0 0 -1\n''') == 1\n"
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 0 0 -1') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 0') == '2'\nassert solution('2 5 7') == '1'\nassert solution('2 1 0') == '2'\nassert solution('2 0 0') == '0'\nassert solution('2 5 3') == '0'\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 0\") == 2\nassert solution(\"1 2\") == 2\nassert solution(\"2 5 7\") == 1\nassert solution(\"3 4\") == 1\nassert solution(\"14 4\") == 1\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"2 1 0\") == \"2\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0\") == 2\nassert solution(\"1 2\") == 2\nassert solution(\"2 3\") == 2\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 0\\n2 3\\n4 6') == '0'\nassert solution('4 2 0\\n2 3\\n2 4') == '2'\n\"\"\""
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 0\") == 2\nassert solution(\"2 5 7\") == 1\nassert solution(\"2 3\") == 0\nassert solution(\"1 1\") == 0\n\n----\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4 5 6') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 1 0\\n1 2\\n2 2\") == \"0\"\nassert solution(\"2 5 7\\n3 4\\n14 4\") == \"1\"\nassert solution(\"2 5 7\\n3 4\\n14 4\") == \"1\"\nassert solution(\"2 5 7\\n3 4\\n14 4\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 0\") == \"2\"\nassert solution(\"2 5 7\") == \"1\"\nassert solution(\"2 0 0\") == \"0\""
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 0\") == \"0\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\nassert solution(\"5 4 7\") == \"1\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01001\") == \"6\"\nassert solution(\"01100\") == \"5\"\n\n-----"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('010') == 2\nassert solution('0111110') == 5\nassert solution('110011100') == 13\nassert solution('10101010101010') == 46\nassert solution('101010101010') == 46\n"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"01001\") == 6\n\"\"\"\n\nfrom sys import stdin\n\nN, M = list(map(int, stdin.readline().split()))\nS = stdin.readline()\n\nres = 1\n\nfor i in range(M):\n    l, r = list(map(int, stdin.readline().split()))\n    res *= 2**(r-l+1)\n    res %= 1000000007\n\nprint(res)\n"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"010 10111\") == \"1110111010\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('011011\\n1 5\\n1 6') == '6'\nassert solution('010\\n1 5\\n1 6') == '6'\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2\n01001\n2 4\n3 5''') == 6\n\nassert solution('''5 2\n01010\n2 4\n3 5''') == 6\n\nassert solution('''5 2\n01100\n2 4\n3 5''') == 6\n\nassert solution('''5 2\n11001\n2 4\n3 5''') == 6\n\nassert solution('''5 2\n11010\n2 4\n3 5''') == 6"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"010\") == 2\nassert solution(\"0110\") == 3\nassert solution(\"11101\") == 6\nassert solution(\"11010\") == 7\nassert solution(\"11100\") == 12\n"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\nimport sys\n\ntest_input_0 = \"\"\"5 2\n01001\n2 4\n3 5\n\"\"\"\ntest_output_0 = 6\n\ntest_input_1 = \"\"\"4 2\n01010\n2 4\n3 5\n\"\"\"\ntest_output_1 = 3\n"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101100\") == \"11\"\nassert solution(\"10111010\") == \"11010\"\nassert solution(\"11010\") == \"1010\"\nassert solution(\"11010110\") == \"1010110\"\nassert solution(\"11111010\") == \"101110\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01001\\n2 4\\n3 5\") == 6\nassert solution(\"01110\\n2 4\\n3 5\") == 1\nassert solution(\"01010\\n2 4\\n3 5\") == 0\n"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n\"\"\"\nimport math"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1 1 1\") == '6'\nassert solution(\"1 2 1 2 1 2\") == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n\n\"\"\""
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n\n\nsolution('1 2 1 2 1 2')\n"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1 1 1\") == '6'\nassert solution(\"1 2 1 2 1 2\") == '13'\nassert solution(\"1 1 1 1 1 1\") == '6'\nassert solution(\"1 2 1 2 1 2\") == '13'\nassert solution(\"1 1 1 1 1 1\") == '6'\n"
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 3 4 6 9\") == 4\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\") == 4\n\n\n-----Solution-----\n\nwrite a program that can find the length of the longest good sequence in a given set of good integers\n\ninput:\n5\n2 3 4 6 9\n\noutput:\n4\n\ninput:\n9\n1 2 3 5 6 7 8 9 10\n\noutput:\n4\n\nand so on\n\ntodo:\n    use greedy approach\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 3 4 6 9\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\") == \"4\"\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 4 6 9') == '4'\nassert solution('3\\n2 3 4') == '3'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'\n\n\n-----Problem-----\nFor the sake of homework, it is allowed to replace the stub code with the final code.\n\"\"\"\n\nimport math"
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 3 4 6 9\") == \"4\"\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 3 4 6 9\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\") == \"4\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 3 4 6 9\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\") == \"4\"\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'"
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY COMPLETE\"\nassert solution(\"2\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY FAILED\""
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\") == \"SURGERY COMPLETE\"\nassert solution(\"3\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY FAILED\""
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'SURGERY COMPLETE'\nassert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'SURGERY FAILED'\nassert solution('2\\n8\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'DONE'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    '4\\n'\n                    '1 2 3 5 6 E 7\\n'\n                    '8 9 10 4 11 12 13\\n'\n                    '11\\n'\n                    '34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\n'\n                    'E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY COMPLETE'\n\n\"\"\"\nimport unittest\nimport os\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_case_1(self):\n        self.assertEqual(solution(    '4\\n'\n                                '1 2 3 5 6 E 7\\n'\n                                '8 9 10 4 11 12 13\\n'\n                                '11\\n'\n                                '34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\n'\n                                'E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n'), 'SURGERY COMPLETE')\n\n    def test_case_2(self):\n        self.assertEqual(solution('4\\n'\n                                '1 2 3 5 6 E 7\\n'\n                                '8 9 10 4 11 12 13\\n'\n                                '11\\n'\n                                '34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\n'\n                                'E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n'), 'SURGERY FAILED')\n        \n    def test_case_3(self):\n        self.assertEqual(solution('2\\n'\n                                '4\\n'\n                                '1 2 3 5 6 E 7\\n'\n                                '8 9 10 4 11 12 13\\n'\n                                '11\\n'\n                                '34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\n'\n                                'E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n'), 'SURGERY COMPLETE')\n"
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 5 6 E 7\") == \"SURGERY COMPLETE\"\nassert solution(\"8 9 10 4 11 12 13\") == \"SURGERY FAILED\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY COMPLETE\""
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY COMPLETE\\nIR\\nR SrS\\nS rr\\nI lldll\\nDONE\"\nassert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY COMPLETE\\nIR\\nR SrS\\nS rr\\nI lldll\\nDONE\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 5 6 E 7') == 'SURRGERY COMPLETE'\nassert solution('8 9 10 4 11 12 13') == 'SURRGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY COMPLETE\"\nassert solution(\"2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY COMPLETE\"\nassert solution(\"2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY COMPLETE\"\n\n\"\"\"\nimport collections\nimport itertools\n\nfrom typing import Dict, List, Set, Tuple\n\nTEST_CASES = [\n    # size, first row, second row, empty space position\n    (4, {1, 2, 3, 5, 6, 7}, {8, 9, 10, 4, 11, 12, 13}, 11),\n    (4, {1, 2, 3, 5, 6, 7}, {8, 9, 10, 4, 11, 12, 13}, 5),\n    (4, {1, 2, 3, 5, 6, 7}, {8, 9, 10, 4, 11, 12, 13}, 3),\n    (4, {1, 2, 3, 5, 6, 7}, {8, 9, 10, 4, 11, 12, 13}, 1),\n]\n"
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY COMPLETE\"\nassert solution(\"2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY FAILED\"\nassert solution(\"1\\n2\\nE 1 2 3\") == \"SURGERY FAILED\"\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 5') == '6 5 8 3 4 1 9 2 7'\nassert solution('3 2 1') == '1 2 3'\n\"\"\""
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 5') == '6 5 8 3 4 1 9 2 7'\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n"
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3 \"\nassert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7 \"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\nassert solution(\"3 2 1\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\nassert solution(\"3 2 1\") == \"1 2 3 \"\nassert solution(\"6 4 3\") == \"2 1 6 4 3\""
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1') == '1 2 3 4 5'\nassert solution('3 2 1') == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 5\") == \"6 5 8 3 4 1 9 2 7\"\nassert solution(\"3 2 1\") == \"1 2 3 \""
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 5\") == \"6 5 8 3 4 1 9 2 7\"\nassert solution(\"3 2 1\") == \"1 2 3 \"\n\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"4\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"5 1\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 0 1\\n') == '2'\n"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n3 2 1') == 3\nassert solution('5 1\\n1000000000 1000000000 1000000000 1000000000 1000000000') == 5000000000\nassert solution('4 4\\n2 8 4 1') == 4\n"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n3 2 1') == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"5\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"3 2 1\") == \"4\"\n\"\"\"\n\n\"\"\"\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u043d\u044f \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u0434\u044b \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435\n\nk = a_i + a_{i + 1} +... + a_{n - 1}\n\n\u0433\u0434\u0435 k \u2014 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u0434\u044b \u0432 \u0434\u0435\u043d\u044c, \u0430_{i} \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u0434\u044b, \u0432\u044b\u0440\u0430\u0449\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0435\u043d\u044c i. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 n = 3 \u0438 k = 1\n\na_0 = 1\n\na_1 = 1 + 0 + 0 = 2\n\na_2 = 2 + 1 + 1 = 5\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0430 \u0434\u043d\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c\u0441\u044f \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c:\n\nk = (a_0 + a_1 + a_2) + (a_1 + a_2 + a_3) + (a_2 + a_3 + a_4) +... + (a_{n - 2} + a_{n - 1} + a_n)\n\nk = (a_0 + a_1 + a_2 + a_3) + (a_1 + a_2 + a_3 + a_4) +... + (a_{n - 2} + a_{n - 1} + a_n)\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u0434\u044b \u043d\u0430 \u0434\u0435\u043d\u044c \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e\n\nk = (a_0 + a_1 + a_2 + a_3) + (a_1 + a_2 + a_3 + a_4) +... + (a_{n - 2} + a_{n - 1} + a_n)\n\nk = (a_0 + a_1 + a_2 + a_3 + a_4) +... + (a_{n - 2} + a_{n - 1} + a_n)\n\n\u042d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e \u043c\u0435\u0442\u043e\u0434\u0443 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0418\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u0434\u043d\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u0434\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e. \u041c\u044b \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c \u0432\u0430\u043c \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u043d\u0430\u0434 \u044d\u0442\u0438\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u044f. \u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0447\u0442\u043e \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e n (1 <= n <= 10^5) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_1, a_2,..., a_n (0 <= a_i <= 10^9) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u0434\u044b \u0432\u044b\u0440\u0430\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430 \u0434\u0435\u043d\u044c i.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0443\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0440\u0430\u0449\u0438\u0432\u0430\u0442\u044c \u0437\u0430 n \u0434\u043d\u0435\u0439.\n\nSample Input 1\n\n3 2\n1 0 1\n\nSample Output 1\n\n2\n\nSample Input 2\n\n4 4\n2 8 4 1\n\nSample Output 2\n\n4\n\nSample Input 3\n\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\nSample Output 3\n\n5000000000\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nsum = 0\nfor i in range(0, n):\n    sum += a[i]\n    a[i] = sum\n\nprint(a[-1] // k)"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 1\") == \"4\"\nassert solution(\"1 2 3 4 5 2\") == \"4\"\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n3 2 1\") == '3'\nassert solution(\"5 1\\n1000000000 1000000000 1000000000 1000000000 1000000000\") == '5000000000'\nassert solution(\"4 4\\n2 8 4 1\") == '4'\n\nprint(solution(input()))"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n3 2 1\") == \"3\"\nassert solution(\"5 1\\n1000000000 1000000000 1000000000 1000000000 1000000000\") == \"5000000000\"\nassert solution(\"4 4\\n2 8 4 1\") == \"4\"\nassert solution(\"2 10\\n1 0 1\") == \"2\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n3 2 1\n''') == 3\n\nassert solution('''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == 5000000000\n\nassert solution('''\n4 4\n2 8 4 1\n''') == 4\n\nassert solution('''\n1 0 1\n''') == 2\nassert solution('''\n3 2\n0 1 1\n''') == 3"
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n3 2 1') == 3\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nbag = k\ncount = 0\nwhile bag > 0:\n    count += a[0]\n    if count > n:\n        count = 0\n        break\n    bag -= 1\n    a.pop(0)\n    if len(a) == 0:\n        break\nprint(count)\n"
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bwwwbwwbw') == 5\nassert solution('bwwbwwb') == 3"
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bwwwbwwbw') == 5\nassert solution('bwwbwwb') == 3\n\n\n---- Problem 2 ----\n\nIn the zoo one of the workers had a piece of meat that was old and had a distinct hue. As usual, the zoo is incredibly messy and poor hygiene is a real problem. The zoo workers have a very limited amount of time to put away the animal pieces, so if there are too many of them there will surely be a decrease in quality.\n\nGiven a list of the color of the pieces (each element in the list is a string with either 'b' for black or 'w' for white), determine the minimum number of days that must be worked by the workers to get rid of all the pieces.\n\nInput\n\nThe only line of the input contains a single integer $N$ (1 \u2264 $N$ \u2264 10^4) that denotes the number of pieces, followed by $N$ lines with one piece each, each described by a string with either 'b' for black or 'w' for white.\n\nOutput\n\nThe only line of the output prints a single integer \u2014 the minimum number of days that must be worked by the workers.\n\n\n-----Input-----\n\n7\nbw\nbwb\nbbb\nbwb\nbwb\nbwb\nbbb\n\n-----Output-----\n\n2\n\n\n\n----- Note -----\n\nIn the first example the list contains three black pieces and two white pieces. If we put these pieces in the order {bw, bwb, bbb, bwb, bwb, bwb, bbb} the total number of days to get rid of all the pieces is 3.\n\nIn the second example the list contains four black pieces and three white pieces. If we put these pieces in the order {bw, bwb, bbb, bwb, bwb, bwb, bbb} the total number of days to get rid of all the pieces is 2.\n\nIn the third example the list contains four black pieces and four white pieces. If we put these pieces in the order {bw, bwb, bbb, bwb, bwb, bwb, bbb} the total number of days to get rid of all the pieces is 0."
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bwwwbwwwbw') == 3\nassert solution('bwwbwwb') == 3\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\nassert solution('bwbwbwbwb') == '1'\nassert solution('b') == '0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bwwwbwwbw') == 5\nassert solution('bwwbwwb') == 3\n\"\"\""
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bwwwbwwbw') == 5\nassert solution('bwwbwwb') == 3\n"
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bwwwbwwbw') == 5\nassert solution('bwwbwwb') == 3\n\n\"\"\""
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bwwwbwwbw\") == 5\nassert solution(\"bwwbwwb\") == 3\n\n\"\"\""
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bwwwbwwbw') == 5\nassert solution('bwwbwwb') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....') == '10'\n\nassert solution('4 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....') == '7'\n"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n3 2\\n1 2\\n....\\n.***\\n...**\\n*....\") == 10\n"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == \"10\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....\\n\") == 10\n\nassert solution(\"4 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....\\n\") == 7\n\nprint(solution(stdin))\n\n\n------\n3\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n------\n3\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n3\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n3 2\n1 1\n*\n\n6\n1 2\n*\n3 2\n1 1\n*\n3 2\n1 1"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....\\n') == '10'\nassert solution('4 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....\\n') == '7'\nassert solution('3 3\\n2 2\\n0 1\\n.**.\\n.***\\n') == '3'\n\n\"\"\""
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....\\n') == 10\n"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....\\n\") == 10\n"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....\") == \"10\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....\\n\") == \"10\"\n\nassert solution(\"4 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....\\n\") == \"7\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\"\n\"\"\"\n\nn = int(input())\nmasses = list(map(int, input().split()))\nm = sum(masses)\nk = m // 5\n"
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 4 2 2') == '2'\nassert solution('6\\n1 2 4 4 4 9') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\n\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2 2') == '2'\nassert solution('6 1 2 4 4 4 9') == '2'\n\"\"\""
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4 2 2\\n') == '2'\nassert solution('6\\n1 2 4 4 4 9\\n') == '2'\n\"\"\""
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 2 2\\n\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\\n\") == \"2\"\nprint('The code ran Correctly')\n\n\"\"\""
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 4 2 2') == '2'\nassert solution('6\\n1 2 4 4 4 9') == '2'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 4 2 2') == '2'\nassert solution('6\\n1 2 4 4 4 9') == '2'\n"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == 7\nassert solution(\"abbbc\") == 6\nassert solution(\"abcd\") == 4\nassert solution(\"aaaa\") == 12\n"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == 7\nassert solution(\"abcd\") == 4\nassert solution(\"aaaa\") == 12\n"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"aaaa\") == 12\n"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aba') == 7\nassert solution('aaaa') == 12\nassert solution('abcd') == 4\nassert solution('aaaaa') == 11\nassert solution('ab') == 2\n"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == 7\nassert solution(\"aaaa\") == 12\nassert solution(\"abcd\") == 4\n"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 7\nassert solution('aaaa') == 12\nassert solution('abcd') == 4\n"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 7\nassert solution('abcd') == 4\nassert solution('aaaa') == 12\n"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == 7\nassert solution(\"aaaa\") == 12"
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 7\nassert solution('aaaa') == 12\n\"\"\""
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 7\nassert solution('aaaa') == 12\n\nprint(solution(input()))\n"
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n\n\"\"\"\nimport sys\nimport collections\nfrom typing import Deque\n"
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\n\"\"\"\n\n\nfrom collections import deque\nfrom math import gcd\n"
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n') == '1'\nassert solution('4 1\\n') == '0'\nassert solution('4 2\\n') == '2'\nassert solution('4 3\\n') == '4'\nassert solution('4 4\\n') == '0'\n\"\"\"\n\nfrom collections import deque\nfrom itertools import count\nfrom math import factorial"
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n') == '1'"
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2, 1) == 1\n\"\"\"\n\nfrom collections import deque\n\nN, K = map(int, input().split())\n\ndq = deque()\nfor i in range(1, N + 1):\n    dq.append(i)\n\nfor i in range(N):\n    print(dq.popleft() if i == K - 1 else dq.pop())\n"
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n') == 1\n\"\"\""
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n\") == 1\n\"\"\""
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\""
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\nassert solution(\"8 3\") == \"2\"\nassert solution(\"5 -3 -5\") == \"3\"\nassert solution(\"4 -3 -5 -3\") == \"3\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n2 2 2 2\") == 8\n"
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected_result\n\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())\nlst = [int(i) for i in input().split()]\nd = {}\n\nfor i in range(n):\n    if i + 1 > n - 1:\n        break\n    d[lst[i]] = i\n\ncount = 0\nfor i in range(n):\n    if i + 1 > n - 1:\n        break\n    if lst[i] % k == 0:\n        count += 1\n        tmp = lst[i]\n        while tmp % k == 0:\n            tmp /= k\n        lst[i] = tmp\n    else:\n        tmp = lst[i]\n        while tmp % k!= 0:\n            tmp *= k\n        if tmp in d:\n            lst[d[tmp]] += tmp\n        else:\n            lst[i + 1] += tmp\n\nprint(count)"
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 2\n2 2 2 2''') == 8\nassert solution('''4 -3\n3 -6 -3 12''') == 3\nassert solution('''4 2\n2 2 2 2''') == 8\nassert solution('''4 -3\n3 -6 -3 12''') == 3\n\n\"\"\"\nimport numpy\n"
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == 8\nassert solution(\"4 -3\") == 3\nassert solution(\"1 1\") == 1\nassert solution(\"-1 -1\") == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n2 2 2 2') == 8\nassert solution('4 -3\\n3 -6 -3 12') == 3\n\"\"\""
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\n\"\"\"\n\nimport math\n\nn, k = map(int, stdin.split())\narr = list(map(int, stdin.split()))\n"
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3 1 8\") == '11'\nassert solution(\"4 2 1 300 1000\") == '5'\n\"\"\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n\"\"\""
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'\nassert solution('3 2 1 300 1000') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n\"\"\"\n\nn, a, b, k, f = [int(i) for i in stdin.split()]\nburles = a\ntrans = b\n\ncards = k\nmoney = f\n\nfor i in range(n):\n    if cards >= 1:\n        money -= trans\n        cards -= 1\n        burles += a\n    else:\n        money += burles\n        cards = k\n        burles = a\nprint(money)\n"
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n\nprint('Success')"
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 2 1 300 1000\"\n) == \"5\"\nassert solution(\n    \"3 5 3 1 8\"\n) == \"11\"\n\"\"\""
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 5 3 1 8\\nBerBank University\\nUniversity BerMall\\nUniversity BerBank\"\n) == \"11\"\nassert solution(\n    \"4 2 1 300 1000\\na A\\nA aa\\naa AA\\nAA a\\n\"\n) == \"5\"\n\"\"\""
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n''') == \"11\"\n\nassert solution('''\n4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n''') == \"5\"\n\n\"\"\"\nn, a, b, k, f = [int(x) for x in input().split()]\npaths = []\nfor _ in range(n):\n    paths.append(input().split())\n\ncurrent_bus = None\ncurrent_stop = None\nroutes = {}\n\nmin_sum = None\nmin_path = None\n\nfor path in paths:\n    if path[0] in routes:\n        routes[path[0]].append(path[1])\n    else:\n        routes[path[0]] = [path[1]]\n\n    if path[1] in routes:\n        routes[path[1]].append(path[0])\n    else:\n        routes[path[1]] = [path[0]]\n\nfor path in paths:\n    path = path[0], path[1]\n    if path[0] not in routes or path[1] not in routes:\n        continue\n    else:\n        if path[0] == current_bus:\n            cost = a if current_stop == path[1] else b\n            current_stop = path[1]\n            current_sum += cost\n        else:\n            if current_bus is not None:\n                if current_stop in routes[current_bus]:\n                    if path[1] in routes[current_bus]:\n                        cost = a if current_stop == path[1] else b\n                        current_sum += cost\n                        if min_sum is None or current_sum < min_sum:\n                            min_sum = current_sum\n                            min_path = current_path\n\n                    else:\n                        cost = a if current_stop == path[1] else b\n                        current_sum += cost\n                        if min_sum is None or current_sum < min_sum:\n                            min_sum = current_sum\n                            min_path = current_path\n                else:\n                    cost = a if current_stop == path[1] else b\n                    current_sum += cost\n                    if min_sum is None or current_sum < min_sum:\n                        min_sum = current_sum\n                        min_path = current_path\n\n            current_bus = path[0]\n            current_path = path\n            current_stop = path[1]\n            current_sum = 0"
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3 1 8\\nBerBank University\\nUniversity BerMall\\nUniversity BerBank\\n\") == \"11\"\nassert solution(\"4 2 1 300 1000\\na A\\naa\\naa\\na\\n\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3 1 8\\nBerBank University\\nUniversity BerMall\\nUniversity BerBank\") == \"11\"\nassert solution(\"4 2 1 300 1000\\na A\\nA aa\\naa AA\\nAA a\") == \"5\"\n\"\"\"\n\nfrom typing import Dict, List, Tuple\nfrom collections import deque, defaultdict\nfrom queue import PriorityQueue\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 1 4\") == 'YES'\nassert solution(\"5 1 1 5 2 1\") == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 4\") == \"YES\"\nassert solution(\"5\\n1 1 5 2 1\") == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 1 1 4''') == 'YES'\nassert solution('''5\n1 1 5 2 1''') == 'NO'\nassert solution('''4\n1 1 1 4\n\n5\n1 1 5 2 1\n''') == 'NO'\nassert solution('''4\n4 4 4 4\n\n5\n2 2 5 1 1\n''') == 'YES'\nassert solution('''4\n4 4 4 4\n\n5\n1 1 5 2 1\n''') == 'YES'\n"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 1 4\\n') == 'YES'\nassert solution('5\\n1 1 5 2 1\\n') == 'NO'"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 4') == 'YES'\nassert solution('5\\n1 1 5 2 1') == 'NO'\n\"\"\""
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 4') == 'YES'\nassert solution('5\\n1 1 5 2 1') == 'NO'\n\"\"\"\n\nn = int(stdin.readline())\ntree = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 1 5\") == \"YES\"\n\"\"\"\n\nstdin = input()\nl = list(map(int,stdin.split()))\nk = l[0]\nl.pop(0)\nl = sorted(l)\ncount = 0"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 4') == 'YES'\nassert solution('5\\n1 1 5 2 1') == 'NO'\n\n\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n\n    def test_isupper(self):\n        self.assertTrue('FOO'.isupper())\n        self.assertFalse('Foo'.isupper())\n\n    def test_split(self):\n        s = 'hello world'\n        self."
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 1 4') == 'YES'\nassert solution('5\\n1 1 5 2 1') == 'NO'\nassert solution('4\\n2 2 2 4') == 'YES'\nassert solution('4\\n1 1 1 4') == 'YES'\nassert solution('4\\n1 2 4 4') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 4\\n\") == \"YES\"\nassert solution(\"5\\n1 1 5 2 1\\n\") == \"NO\"\nassert solution(\"5\\n1 1 5 2 1\\n\") == \"YES\"\nassert solution(\"5\\n1 1 5 2 2\\n\") == \"YES\"\nassert solution(\"5\\n1 1 1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 5 0 -5 -10\\n\") == \"-\" \\\n    + str(-15)\nassert solution(\"4\\n1 1 1 1\\n\") == \"1\" \\\n    + str(1)\nassert solution(\"3\\n5 1 -5\\n\") == \"-\" \\\n    + str(-5)\nassert solution(\"2\\n900 1000\\n\") == \"1100\" \\\n    + str(1100)\nassert solution(\"4\\n1 1 1 1\\n\") == \"1\" \\\n    + str(1)\n"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n10 5 0 -5 -10\") == \"-15\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"3\\n5 1 -5\") == \"-5\"\nassert solution(\"2\\n900 1000\") == \"1100\"\nprint(\"Ok!\")\n\n-------\n7\n7 0 7 7 7 7\n-------\n\n-------\n6\n1 1 1 1 1\n-------\n\n-------\n5\n5 1 -5\n-------\n\n-------\n4\n1 1 1 1\n-------\n\n-------\n3\n5 1 -5\n-------\n\n-------\n2\n900 1000\n-------\n\n-------\n1\n1\n-------\n\n-------\n0\n10\n-------\n\n-------\n-1\n10\n-------\n\n-------\n-2\n10\n-------\n\n-------\n-3\n10\n-------\n\n-------\n-4\n10\n-------\n\n-------\n-5\n10\n-------\n\n-------\n-6\n10\n-------\n\n-------\n-7\n10\n-------\n\n-------\n-8\n10\n-------\n\n-------\n-9\n10\n-------\n\n-------\n-10\n10\n-------\n\n-------\n-11\n10\n-------\n\n-------\n-12\n10\n-------\n\n-------\n-13\n10\n-------\n\n-------\n-14\n10\n-------\n\n-------\n-15\n10\n-------\n\n-------\n-16\n10\n-------\n\n-------\n-17\n10\n-------\n\n-------\n-18\n10\n-------\n\n-------\n-19\n10\n-------\n\n-------\n-20\n10\n-------\n\n-------\n-21\n10\n-------\n\n-------\n-22\n10\n-------\n\n-------\n-23\n10\n-------\n\n-------\n-24\n10\n-------\n\n-------\n-25\n10\n-------\n\n-------\n-26\n10\n-------\n\n-------\n-27\n10\n-------\n\n-------\n-28\n10\n-------\n\n-------\n-29\n10\n-------\n\n-------\n-30\n10\n-------\n\n-------\n-31\n10\n-------\n\n-------\n-32\n10\n-------\n\n-------\n-33\n10\n-------\n\n-------\n-34\n10\n-------\n\n-------\n-35\n10\n-------\n\n-------\n-36\n10\n-------\n\n-------\n-37\n10\n-------\n\n-------\n-38\n10\n-------\n\n-------\n-39\n10\n-------\n\n-------\n-40\n10\n-------\n\n-------\n-41\n10\n-------\n\n-------\n-42\n10\n-------\n\n-------\n-43\n10\n-------\n\n-------\n-44\n10\n-------\n\n-------\n-45\n10\n-------\n\n-------\n-46\n10\n-------\n\n-------\n-47\n10\n-------\n\n-------\n-48\n10\n-------\n\n-------\n-49\n10\n-------\n\n-------\n-50\n10\n-------\n\n-------\n-51\n10\n-------\n\n-------\n-52\n10\n-------\n\n-------\n-53\n10\n-------\n\n-------\n-54\n10\n-------\n\n-------\n-55\n10\n-------\n\n-------\n-56\n10\n-------\n\n-------\n-57\n10\n-------\n\n-------\n-58\n10\n-------\n\n-------\n-59\n10\n-------\n\n-------\n-60\n10\n-------\n\n-------\n-61\n10\n-------\n\n-------\n-62\n10\n-------\n\n-------\n-63\n10\n-------\n\n-------\n-64\n10\n-------\n\n-------\n-65\n10\n-------\n\n-------\n-66\n10\n-------\n\n-------\n-67\n10\n-------\n\n-------\n-68\n10\n-------\n\n-------\n-69\n10\n-------\n\n-------\n-70\n10\n-------\n\n-------\n-71\n10\n-------\n\n-------\n-72\n10\n-------\n\n-------\n-73\n10\n-------\n\n-------\n-74\n10\n-------\n\n-------\n-75\n10\n-------\n\n-------\n-76\n10\n-------\n\n-------\n-77\n10\n-------\n\n-------\n-78\n10\n-------\n\n-------\n-79\n10\n-------\n\n-------\n-80\n10\n-------\n\n-------\n-81\n10\n-------\n\n-------\n-82\n10\n-------\n\n-------\n-83\n10\n-------\n\n-------\n-84\n10\n-------\n\n-------\n-85\n10\n-------\n\n-------\n-86\n10\n-------\n\n-------\n-87\n10\n-------\n\n-------\n-88\n10\n-------\n\n-------\n-89\n10\n-------\n\n-------\n-90\n10\n-------\n\n-------\n-91\n10\n-------\n\n-------\n-92\n10\n-------\n\n-------\n-93\n10\n-------\n\n-------\n-94\n10\n-------\n\n-------\n-95\n10\n-------\n\n-------\n-96\n10\n-------\n\n-------\n-97\n10\n-------\n\n-------\n-98\n10\n-------\n\n-------\n-99\n10\n-------\n\n-------\n-100\n10\n-------\n\n-------\n-101\n10\n-------\n\n-------\n-102\n10\n-------\n\n-------\n-103\n10\n-------\n\n-------\n-104\n10\n-------\n\n-------\n-105\n10\n-------\n\n-------\n-106\n10\n-------\n\n-------\n-107\n10\n-------\n\n-------\n-108\n10\n-------\n\n-------\n-109\n10\n-------\n\n-------\n-110\n10\n-------\n\n-------\n-111\n10\n-------\n\n-------\n-112\n10\n-------\n\n-------\n-113\n10\n-------\n\n-------\n-114\n10\n-------\n\n-------\n-115\n10\n-------\n\n-------\n-116\n10\n-------\n\n-------\n-117\n10\n-------\n\n-------\n-118\n10\n-------\n\n-------\n-119\n10\n-------\n\n-------\n-120\n10\n-------\n\n-------\n-121\n10\n-------\n\n-------\n-122\n10\n-------\n\n-------\n-123\n10\n-------\n\n-------\n-124\n10\n-------\n\n-------\n-125\n10\n-------\n\n-------\n-126\n10\n-------\n\n-------\n-127\n10\n-------\n\n-------\n-128\n10\n-------\n\n-------\n-129\n10\n-------"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 1 -5\") == \"-5\"\nassert solution(\"2 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"4 1 -5\") == \"-5\"\nassert solution(\"100 50 40 30 20 10\") == \"100\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 -5 -10\") == \"-15\"\nassert solution(\"4 1 1 1\") == \"1\"\nassert solution(\"3 5 1 -5\") == \"-5\"\nassert solution(\"2 900 1000\") == \"1100\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 5 0 -5 -10\") == '-15'\n\nassert solution(\"4\\n1 1 1 1\") == '1'\n\nassert solution(\"3\\n5 1 -5\") == '-5'\n\nassert solution(\"2\\n900 1000\") == '1100'\n\"\"\"\nfrom typing import List, Union\n\nfrom tools import timing\n\nINPUT_1 = '5\\n10 5 0 -5 -10'\nINPUT_2 = '4\\n1 1 1 1'\nINPUT_3 = '3\\n5 1 -5'\nINPUT_4 = '2\\n900 1000'\n"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 5 0 -5 -10\") == \"-15\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"3\\n5 1 -5\") == \"-5\"\nassert solution(\"2\\n900 1000\") == \"1100\""
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 5 1 -5\") == \"-5\"\nassert solution(\"3\\n5 1 -5\") == \"1\"\nassert solution(\"2\\n900 1000\") == \"1100\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 5 0 -5 -10\") == \"-15\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"3\\n5 1 -5\") == \"-5\"\nassert solution(\"2\\n900 1000\") == \"1100\"\n\n\"\"\""
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n10 5 0 -5 -10\") == \"-15\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"3\\n5 1 -5\") == \"-5\"\nassert solution(\"2\\n900 1000\") == \"1100\"\n\"\"\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 -5 -10\") == '-15'\nassert solution(\"4 1 1 1\") == '1'\nassert solution(\"3 5 1 -5\") == '-5'\nassert solution(\"2 900 1000\") == '1100'\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\") == \"YES\"\nassert solution(\"3\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\") == \"YES\"\n\n---\n\"\"\""
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\") == \"YES\"\nassert solution(\"3\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\") == \"YES\"\nassert solution(\"6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"NO\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2\n1 2\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n3\n1 2\n2 3\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n5\n1 2\n1 3\n1 4\n2 5\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n7\n1 2\n1 3\n1 4\n2 5\n2 6\n\"\"\"\n) == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4') == 'YES'\nassert solution('2\\n1 2') == 'YES'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n2 5') == 'NO'\nassert solution('6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6') == 'YES'\nassert solution('7\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7') == 'NO'\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\\n1 3\\n1 4\\n2 5\") == \"NO\"\nassert solution(\"3\\n1 2\\n2 3\\n1 4\") == \"YES\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\") == \"NO\"\nassert solution(\"6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"2 5\") == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"YES\"\nassert solution(\"3\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\") == \"YES\"\nassert solution(\"6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6') == \"YES\"\nassert solution('3\\n1 2\\n2 3') == \"NO\"\n\"\"\""
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == 'YES'\nassert solution('3\\n1 2') == 'NO'\nassert solution('6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6') == 'YES'\n\n\n\n\n    \n\"\"\"\n\n\"\"\"\n\nimport sys\nimport heapq\nsys.setrecursionlimit(1000000)\n\nclass Node:\n    def __init__(self, number):\n        self.number = number\n        self.neighbors = []\n\n    def __lt__(self, other):\n        return self.number < other.number\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"YES\"\nassert solution(\"6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"NO\"\nassert solution(\"6\\n1 2\\n2 3\\n1 4\\n2 5\\n2 6\") == \"YES\"\nassert solution(\"2\\n1 2\\n1 3\") == \"YES\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n\") == \"1\\n5\\n3\\n\"\nassert solution(\"6\\n2\\n3\\n4\\n5\\n6\") == \"0\\n2\\n3\\n4\\n5\\n\""
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\\n2\"\nassert solution(\"3\\n1 2 3\") == \"1\\n2\"\nassert solution(\"3\\n3 3 3\") == \"0\\n3\"\nassert solution(\"4\\n1 2 3 4\") == \"2\\n1 3\"\nassert solution(\"4\\n2 4 6 8\") == \"2\\n4 6\"\n\n\"\"\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n6\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"1\\n2\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1\\n2'\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\\n\") == \"0\\n0\"\nassert solution(\"1 2 3\\n\") == \"1\\n2\"\n\"\"\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 6') == '0'\nassert solution('2 6') == '0'\nassert solution('2 6 1') == '0'\nassert solution('2 6 2') == '1'\nassert solution('6 2 6') == '1'\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 6\\n') == '0'\nassert solution('3 1 2\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"3\\n1 2\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"2\\n2 6\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n2\\n2\\n1\\n1\") == \"2\\n2\"\nassert solution(\"1\\n1\\n2\\n2\\n2\\n2\") == \"0\\n2\\n2\\n2\\n2\\n2\\n2\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aab\\nccb\") == 6\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaa\") == 6\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aa\") == 1\nassert solution(\"aa\") == 1\nassert solution(\"aa\") == 1\nassert solution(\"aa\") == 1\nassert solution(\"aa\") == 1\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aab') == 6\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aab\") == 6\nassert solution(\"ccb\") == 6\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('a\\n') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aa\\n') == 'aa'\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaa\") == 6, \"Test 1 failed\"\nassert solution(\"aab\") == 4, \"Test 2 failed\"\nassert solution(\"ccb\") == 6, \"Test 3 failed\"\nassert solution(\"ccc\") == 6, \"Test 4 failed\"\n\n-----Note-----\n- This is a classic combinatorial problem and the solution is presented in O(N) time.\n- To solve the problem, we can simply calculate the number of ways of painting\nthe dominoes.\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aa\") == 6\nassert solution(\"ab\") == 10\nassert solution(\"a\") == 2\nassert solution(\"bb\") == 2\nassert solution(\"ba\") == 4\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aab\") == 6\nassert solution(\"ccb\") == 6\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aab') == 6\nassert solution('ccb') == 6\n\"\"\""
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 100 5\\n5 2 1 2 1\") == \"YES\"\nassert solution(\"100 100 7\\n1 2 3 4 5 6 7\") == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''100 100 5\n5 2 1 2 1''') == 'YES'\nassert solution('''100 100 7\n1 2 3 4 5 6 7''') == 'NO'\nassert solution('''100 100 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7''') == 'YES'\nassert solution('''100 100 5\n5 2 1 2 1\n1 1 1 1 1''') == 'NO'\nassert solution('''100 100 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7''') == 'YES'\n"
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1') == 'YES'\nassert solution('100 100 7\\n1 2 3 4 5 6 7') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1') == 'YES'\nassert solution('100 100 7\\n1 2 3 4 5 6 7') == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 100 5\\n5 2 1 2 1\") == \"YES\"\nassert solution(\"100 8 5\\n5 2 1 2 1\") == \"NO\""
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 100 5\\n5 2 1 2 1\") == \"YES\"\nassert solution(\"100 100 7\\n1 2 3 4 5 6 7\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 100 5\\n5 2 1 2 1\") == \"YES\"\nassert solution(\"100 8 5\\n5 2 1 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1') == 'YES'\nassert solution('100 8 5\\n5 2 1 2 1') == 'NO'\nassert solution('100 100 7\\n1 2 3 4 5 6 7') == 'NO'\n\n\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == expected_result\n\n\"\"\"\n\nfrom collections import Counter\n\nn, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nl = len(a)\n\nG = Counter([i % m for i in range(1, m + k)])\n\nflag = True\nfor j in range(0, m - k + 1):\n    if G[a[j]]!= 1:\n        flag = False\n        break\n    G[a[j] // m * m] -= 1"
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1 2 1') == 'YES'\nassert solution('100 8 5') == 'NO'\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\\n3 2 5 3\") == \"3\""
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n4 1 5 10\\n1 4 10 5\") == 4\nassert solution(\"7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\\n3 2 5 3\") == 3\nassert solution(\"7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\\n3 2 5 3\") == 3\n\"\"\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"10 2\n4 1 5 10\n1 4 10 5\n\"\"\") == \"4\"\n\n\"\"\"\n[Image]\n\"\"\"\n\nassert solution(\"\"\"7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\n\"\"\") == \"3\"\n\n\n[Image]\n\"\"\"\n[Image]\n\"\"\""
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 5 10\\n1 4 10 5\") == 4\n\"\"\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n4 1 5 10\\n1 4 10 5\\n\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 2\\n4 1 5 10\\n1 4 10 5\\n') == '4'\n\"\"\"\n\n\"\"\"\nThe idea is to count the color of the area that does not belong to the black cell\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\\n3 2 5 3\\n\") == \"3\"\nassert solution(\"10 9\\n3 1 2 4\\n7 7 6 9\\n1 3 4 7\\n5 1 5 2\\n5 8 6 2\\n5 6 6 5\\n5 9 4 2\\n1 5 2 3\\n7 1 8 4\\n9 2 6 4\\n3 4 9 4\\n\") == \"3\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\n\nassert solution('''10 3\n4 1 5 10\n1 4 10 5\n''') == '4'\n\nassert solution('''10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"10 2\n4 1 5 10\n1 4 10 5\n\"\"\") == '4'\n\nassert solution(\"\"\"7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\"\"\") == '3'\n\n\"\"\"\nIn the first sample, painting the whole square is the minimum cost.\n\nIn the second sample, painting the bottom-left rectangle, the top-right rectangle, and the whole rectangle is also the minimum cost.\n\nIn the third sample, painting the bottom-left rectangle, painting the whole rectangle, painting the top-right rectangle, and painting the bottom-left rectangle is also the minimum cost.\n\"\"\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2 5 10\\n2 4 10 5\\n1 4 10 5\") == \"4\"\nassert solution(\"7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\\n3 2 5 3\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\") == \"no\"\nassert solution(\"5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\\n10 3\\n1 2 3 4 5 6 7 8 9 10') == 'no yes yes no yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n3 2\\n1 2\\n1\\n3\") == \"no\"\nassert solution(\"3 3\\n1 2 3\\n2 2\\n1 2\\n1\\n3\") == \"yes\"\nassert solution(\"4 4\\n1 2 3 4\\n1 2 4 5\\n3 4\\n1 2 5 6\") == \"yes\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3\\n1 2 3\\n\"\n) == \"yes\"\nassert solution(\n\"3\\n1 2 3\\n\"\n) == \"no\"\nassert solution(\n\"1\\n1\\n\"\n) == \"yes\"\nassert solution(\n\"1\\n1\\n\"\n) == \"no\"\nassert solution(\n\"2\\n1 2\\n\"\n) == \"yes\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n2 2\") == \"yes\"\nassert solution(\"3 3\\n1 2 3\\n2 2\") == \"no\""
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3') == 'no'\nassert solution('5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3') == 'yes'\n\n\n\"\"\"\n\nimport sys\nimport itertools\nimport collections\nimport math\nimport heapq\n"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_string) == output_string\n"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\") == \"no\"\nassert solution(\"4 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\") == \"yes\"\nassert solution(\"5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\") == \"yes\"\nassert solution(\"5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\") == \"yes\"\nassert solution(\"5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\") == \"yes\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n2 3\\n3 1 2 3\") == 'no'\nassert solution(\"4 3\\n1 2 3 4\\n2 3\\n3 1 2 3\") == 'yes'\nassert solution(\"4 2\\n1 2 3 4\\n2 3\") == 'yes'\nassert solution(\"4 3\\n1 2 3 4\\n2 3\\n3 1 2 3\") == 'no'\nassert solution(\"4 2\\n1 2 3 4\\n2 3\\n3 1 2 3\") == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\\n10 3\\n1 2 3 4 5 6 7 8 9 10\") == \"no\\nyes\\nyes\\nno\\nyes\"\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 4\\n2 4\") == \"3\\n5 2 0 1\"\nassert solution(\"5 3\\n1 3\\n2 5\\n4 5\") == \"2\\n1 0 2 1 0\"\n\n\"\"\""
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 3\\n2 5\\n4 5') == '2\\n1 0 2 1 0'\nassert solution('4 2\\n1 4\\n2 4') == '3\\n5 2 0 1'"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 4\\n2 4') == '3\\n5 2 0 1'"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 3\\n2 5\\n4 5\") == \"2\\n1 0 2 1 0\\n\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 4\\n2 4\") == \"3\\n5 2 0 1\"\n\"\"\"\n\n\n\"\"\"\n\nSubtract the minimum to all the numbers, and then\nfind the minimum of the result.\n\n\"\"\"\n\n\"\"\"\nn = int(input())\nlst = []\n\nfor _ in range(n):\n    x, y = map(int, input().split())\n    lst.append((x, y))\n\nlst.sort()"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 3\\n2 5\\n4 5\\n') == '2\\n1 0 2 1 0'\nassert solution('4 2\\n1 4\\n2 4\\n') == '3\\n5 2 0 1'"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 4\\n2 4') == '3\\n5 2 0 1'\nassert solution('5 3\\n1 3\\n2 5\\n4 5') == '2\\n1 0 2 1 0'\n"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 3\\n2 5\\n4 5\") == \"2\\n1 0 2 1 0\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 3\\n2 5\\n4 5\") == '2'\nassert solution(\"4 2\\n1 4\\n2 4\") == '3'\n\n\"\"\""
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 3\\n2 5\\n4 5\") == \"2\\n1 0 2 1 0\"\nassert solution(\"4 2\\n1 4\\n2 4\") == \"3\\n5 2 0 1\"\n\"\"\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\\n\") == \"YES\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\\n\") == \"NO\"\n\nassert solution(\"4 3\\n1 0 1\\n2 1 3\\n3 1 4\\n4 1\\n\") == \"NO\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\\n\") == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\") == \"NO\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\") == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\") == 'NO'\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\") == \"NO\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3') == 'NO'\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3') == 'YES'\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3') == 'NO'\n\n\n-----Explanation-----\n\nIn the first example, after toggling switch 3, we get [0, 0, 0] that means all doors are locked.\n\nThen, after toggling switch 1, we get [1, 1, 1] that means all doors are unlocked.\n\nIt can be seen that for the first and for the third example inputs it is not possible to make all doors unlocked.\n\nIn the second example input, the initial statuses of the doors are [1, 0, 1] (0 means locked, 1\u00a0\u2014 unlocked).\n\nAfter toggling switch 3, we get [0, 0, 0] that means all doors are locked.\n\nThen, after toggling switch 1, we get [1, 1, 1] that means all doors are unlocked.\n\nIt can be seen that for the first and for the third example inputs it is not possible to make all doors unlocked.\n\n\"\"\""
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 2 3') == \"NO\"\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3') == \"YES\"\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3') == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3') == 'NO'\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3') == 'YES'\n\n\"\"\"\n\nimport sys\nimport logging\nimport typing\n\nlogging.basicConfig(level=logging.DEBUG)\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n2 1 3\") == \"NO\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\") == \"YES\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\") == \"NO\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n\") == \"NO\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n\") == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 0 1\n2 1 3 3\n2 1 2\n1 3\n2 1 3''') == \"NO\"\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3''') == \"YES\"\nassert solution('''3 3\n1 0 1\n3 1 2 3 3\n2 1 2\n1 3\n2 1 3''') == \"NO\"\nassert solution('''3 3\n1 0 1\n3 1 2 3 3\n2 1 2\n1 3\n2 1 3''') == \"YES\"\nassert solution('''3 3\n1 0 1\n3 1 2 3 3\n2 1 2\n1 3\n2 1 3''') == \"NO\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"((#)((#))\") == \"1\"\nassert solution(\"((#)((#))(\") == \"2\"\nassert solution(\"()((#((#(#()\")) == \"2\"\nassert solution(\"((#((#(#(#)\") == \"3\"\nassert solution(\"((#((#(#(#))\") == \"3\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(((#)((#)\") == 1\nassert solution(\"())\") == -1\nassert solution(\"()(((\") == 2\n\n\n----\n\n\n\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nFor example,\n\"A man, a plan, a canal: Panama\" is a palindrome.\n\"race a car\" is not a palindrome.\n\nNote:\nHave you consider that the string might be empty? This is a good question to ask during an interview.\n\nFor the purpose of this problem, we define empty string as valid palindrome.\n\n\n\n----\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        #s = ''.join(c.lower() for c in s if c.isalnum())\n        #return s == s[::-1]\n        return s == s[::-1]\n\n\n----\n\n\nGiven a string s, return the longest palindromic substring in s.\n\n\n\n----\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        # even string of length n has palindrome of length n\n        # odd string of length n has palindrome of length n - 1\n        if not s:\n            return \"\"\n        \n        result = \"\"\n        for i in range(len(s)):\n            # odd case\n            odd = self.checkPalindrome(s, i, i)\n            # even case\n            even = self.checkPalindrome(s, i, i+1)\n            \n            if len(odd) > len(result):\n                result = odd\n            if len(even) > len(result):\n                result = even\n            \n        return result\n    \n    def checkPalindrome(self, s, l, r):\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            l -= 1\n            r += 1\n        return s[l+1:r]\n            \n\n----\n\n\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\n\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\nExample 2:\n\nInput: \"cbbd\"\nOutput: \"bb\"\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        # Manacher's algorithm\n        # https://en.wikipedia.org/wiki/Longest_palindromic_substring\n        # TC: O(n), SC: O(n)\n        # https://www.youtube.com/watch?v=FvGLDTMkK5k\n        T = \"#\"\n        for c in s:\n            T += c + \"#\"\n        \n        # preprocess the string\n        # T = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\"\n        P = [0] * len(T)\n        C = R = 0\n        for i in range(1, len(T)-1):\n            mirror = 2*C - i\n            if R > i:\n                P[i] = min(R - i, P[mirror])\n            \n            # Attempt to expand palindrome centered at i\n            while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n                P[i] += 1\n            \n            # If palindrome centered at i expand past R,\n            # adjust center based on expanded palindrome.\n            if i + P[i] > R:\n                C = i\n                R = i + P[i]\n        \n        # Find the maximum element in P.\n        maxLen, centerIndex = max((n, i) for i, n in enumerate(P))\n        return s[(centerIndex  - maxLen)//2: (centerIndex  + maxLen)//2]\n\n\n----\n\n\nGiven a string s, find the longest substring without repeating characters.\n\n\n\n----\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # sliding window\n        # TC: O(n), SC: O(1)\n        res = 0\n        left = 0\n        for right in range(len(s)):\n            # if character dublicates\n            while s[right] in s[left: right]:\n                left += 1\n            res = max(res, right - left + 1)\n        \n        return res\n\n\n----\n\nGiven a binary tree, find the maximum path sum.\n\nThe path may start and end at any node in the tree.\n\n\n\n----\n\nclass Solution:\n    def maxPathSum(self, root: TreeNode) -> int:\n        # TC: O(n), SC: O(n)\n        def dfs(node):\n            if not node:\n                return 0\n            left = max(dfs(node.left), 0)\n            right = max(dfs(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left + right + node.val)\n            \n            return max(left, right) + node.val\n        \n        self.max_sum = float('-inf')\n        dfs(root)\n        return self.max_sum\n\n\n----\n\n\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\n\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\nExample 2:\n\nInput: \"cbbd\"\nOutput: \"bb\"\n\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        # Manacher's algorithm\n        # https://en.wikipedia.org/wiki/Longest_palindromic_substring\n        # TC: O(n), SC: O(n)\n        # https://www.youtube.com/watch?v=FvGLDTMkK5k\n        T = \"#\"\n        for c in s:\n            T += c + \"#\"\n        \n        # preprocess the string\n        # T = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\"\n        P = [0] * len(T)\n        C = R = 0\n        for i in range(1, len(T)-1):\n            mirror = 2*C - i"
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()((#((#(#())\"\n\"1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2"
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()((#()))\") == '2'\nassert solution(\"((#(#))\") == '2'\nassert solution(\"((((((((#())((((((((()(()(((((((()(((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n()((#((#(#()\n''') == \"1\\n2\\n-1\\n2\\n1\\n1\")\n\nassert solution('''\n((#)\n''') == \"0\\n0\\n0\\n1\")\n\nassert solution('''\n
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(((#)((#)\") == 1\nassert solution(\"()((#((#(#()\") == 2\nassert solution(\"(#)\") == -1\n\"\"\""
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((#)))(((#)))\") == \"1\\n2\\n1\\n2\\n0\\n\"\n\"\"\""
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(((#)((#)\") == 1\nassert solution(\"(((#)((#)\") == 2\nassert solution(\"(((#)((#)\") == -1\n\nassert solution(\"((#)((#)\") == 2\nassert solution(\"((#)((#)\") == 2\n"
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((#)((#)\") == \"1\\n2\"\nassert solution(\"()((#((#(#()\") == \"2\\n2\"\nassert solution(\"#\") == \"1\"\nassert solution(\"()\") == \"1\"\nassert solution(\"(((\") == \"2\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('(#)') == '-1'\nassert solution
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n\") == \"xoxox\"\n\"\"\""
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"xoxo\"\nassert solution(\"4 0\") == \"16\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '-1\\nxoxox'\nassert solution('4 0') == '16\\noooo'\nassert solution('0 4') == '-16\\nxxxx'\nassert solution('3 2') == '2\\nxx\\n'"
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == 'xxxx'\nassert solution('1 0') == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == '0'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nassert solution('4 1') == '4'\nassert solution('2 0') == '16'\n\"\"\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"2 3\"\n) == \"xoxox\"\nassert solution(\n\"4 0\"\n) == \"16\"\nassert solution(\n\"0 4\"\n) == \"-16\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution([\"2 3\"]) == '-1', 'Failed test 1'\nassert solution([\"4 0\"]) == '16', 'Failed test 2'\nassert solution([\"0 4\"]) == '-16', 'Failed test 3'\n\n\"\"\""
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nassert solution('4 4') == '-16'\nassert solution('4 0') == '16'\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 3\"\n) == \"xoxox\"\nassert solution(\n    \"4 0\"\n) == \"16\"\nassert solution(\n    \"0 4\"\n) == \"xxxx\"\nassert solution(\n    \"0 0\"\n) == \"16\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1\\n') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"3 10 3\") == \"49\"\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nDifficulty: Easy\nBinary Search Tree Level Order Traversal\n\nGiven the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\nExample 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n\nExample 2:\nInput: root = [1]\nOutput: [[1]]\n\nExample 3:\nInput: root = []\nOutput: []\n\nConstraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000\n\"\"\"\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> list:\n        \"\"\"\n        Time: O(n)\n        Space: O(n)\n        \"\"\"\n        from collections import deque\n        if not root:\n            return []\n        result = []\n        queue = deque()\n        queue.append(root)\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result\n\n\nclass Solution2:\n    def levelOrder(self, root: TreeNode) -> list:\n        \"\"\"\n        Time: O(n)\n        Space: O(n)\n        \"\"\"\n        from collections import deque\n        if not root:\n            return []\n        result = []\n        queue = deque()\n        queue.append(root)\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result\n"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"17\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('3 5 7') == '186'\nassert solution('1 0 0') == '1'\nassert solution('1 1 1') == '9'\nassert solution('4 2 1') == '22'\n"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '17'"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\") == \"8\"\nassert solution(\"2 1 1\") == \"7\"\nassert solution(\"3 1 1\") == \"12\"\nassert solution(\"5 2 3\") == \"204\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == '17'\n\n\"\"\""
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"17\"\n\"\"\""
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 2 1') == '11'\nassert solution('2 1 1') == '7'\nassert solution('3 1 1') == '4'\nassert solution('4 1 1') == '1'\n"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 1\n2 1 2''') == '2 2 2'\nassert solution('''\n1 2 1\n2 1 2''') == '2 2 2'\n\nassert solution('''\n1 2 1\n2 1 2''') == '2 2 2'\nassert solution('''\n1 2 1\n2 1 2''') == '2 2 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2 1\\n2 1 2\") == '2 2 2\\n2 2 2'\n\nprint(solution(\"2 2\\n1 2\\n3 4\"))\n\n\"\"\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 1\\n2 1 2\") == \"2 2 2\\n2 2 2\\n\"\nassert solution(\"2 2\\n1 2\\n3 4\") == \"2 3\\n3 2\\n\"\nassert solution(\"2 2\\n1 2\\n2 3\") == \"2 2\\n2 2\\n\"\nassert solution(\"2 2\\n1 2\\n3 4\") == \"2 3\\n3 2\\n\"\nassert solution(\"2 2\\n1 2\\n2 3\") == \"2 2\\n2 2\\n\"\n\n\"\"\"\n\nimport sys\nimport functools\nfrom collections import defaultdict"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 2 1\\n2 1 2\") == \"2 2 2\\n2 2 2\\n\"\nassert solution(\"2 2\\n1 2\\n3 4\") == \"2 3\\n3 2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 1\\n3 4 3\\n2 3 4\\n1 3 2\") == \"2 2 2\\n2 2 2\\n3 3\\n3 2\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 1\\n2 1 2\") == \"2 2 2\"\nassert solution(\"2 2\\n1 2\\n3 4\") == \"2 3\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 1\\n2 1 2\") == \"2 2 2\"\nassert solution(\"2 2\\n1 2\\n3 4\") == \"2 3\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\") == \"2 2 2\\n2 2 2\""
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\") == \"2 2 2\\n2 2 2\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\n\n---Problem---\n\nOne day Dora went to a new city. During the way she met an amazing city, which is formed by $n$ streets along the Eastern direction and $m$ streets along the Southern direction. Naturally, this city has $nm$ intersections. At any intersection of $i$-th Eastern street and $j$-th Southern street there is a monumental skyscraper. Dora instantly became curious and decided to explore the heights of the city buildings.\n\nWhen Dora passes through the intersection of the $i$-th Eastern and $j$-th Southern street she examines those two streets. After Dora learns the heights of all the skyscrapers on those two streets she wonders: how one should reassign heights to the skyscrapers on those two streets, so that the maximum height would be as small as possible and the result of comparing the heights of any two skyscrapers on one street wouldn't change.\n\nFormally, on every of $nm$ intersections Dora solves an independent problem. She sees $n + m - 1$ skyscrapers and for each of them she knows its real height. Moreover, any two heights can be compared to get a result \"greater\", \"smaller\" or \"equal\". Now Dora wants to select some integer $x$ and assign every skyscraper a height from $1$ to $x$. When assigning heights, Dora wants to preserve the relative order of the skyscrapers in both streets. That is, the result of any comparison of heights of two skyscrapers in the current Eastern street wouldn't change and the result of any comparison of heights of two skyscrapers in current Southern street wouldn't change as well. Note that skyscrapers located on the Southern street are not compared with skyscrapers located on the Eastern street only. However, the skyscraper located at the streets intersection can be compared with both Southern and Eastern skyscrapers. For every intersection Dora wants to independently calculate the minimum possible $x$.\n\nFor example, if the intersection and the two streets corresponding to it look as follows: [Image] \n\nThen it is optimal to replace the heights of the skyscrapers as follows (note that all comparisons \"less\", \"equal\", \"greater\" inside the Eastern street and inside the Southern street are preserved) [Image] \n\nThe largest used number is $5$, hence the answer for this intersection would be $5$.\n\nHelp Dora to compute the answers for each intersection.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 1000$)\u00a0\u2014 the number of streets going in the Eastern direction and the number of the streets going in Southern direction.\n\nEach of the following $n$ lines contains $m$ integers $a_{i,1}$, $a_{i,2}$,..., $a_{i,m}$ ($1 \\le a_{i,j} \\le 10^9$). The integer $a_{i,j}$, located on $j$-th position in the $i$-th line denotes the height of the skyscraper at the intersection of the $i$-th Eastern street and $j$-th Southern direction.\n\n\n-----Output-----\n\nPrint $n$ lines containing $m$ integers each. The integer $x_{i,j}$, located on $j$-th position inside the $i$-th line is an answer for the problem at the intersection of $i$-th Eastern street and $j$-th Southern street.\n\n\n-----Examples-----\nInput\n2 3\n1 2 1\n2 1 2\n\nOutput\n2 2 2 \n2 2 2 \n\nInput\n2 2\n1 2\n3 4\n\nOutput\n2 3 \n3 2 \n\n\n\n-----Note-----\n\nIn the first example, it's not possible to decrease the maximum used height for the problem at any intersection, hence we don't have to change any heights.\n\nIn the second example, the answers are as follows:   For the intersection of the first line and the first column [Image] For the intersection of the first line and the second column [Image] For the intersection of the second line and the first column [Image] For the intersection of the second line and the second column [Image]"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n0 1\\n2 1') == '332748119'\nassert solution('3 1\\n0 1\\n1 2') == '3'\nassert solution('1 2\\n4 3 5') == '160955686'\n\"\"\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\nassert solution(\"1 2\\n1\") == \"3\"\nassert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"1 2\\n1\\n1\") == \"3\"\n\n-----Explanation-----\nAt the first visit, there are two possibilities:\n\n1. the only picture is the first picture\n2. the only picture is the second picture\n\nSince the only picture is the first picture, the expected weight of the first picture is $\\frac1 3$, and the expected weight of the second picture is $\\frac2 3$.\n\nIn the second visit, the only picture is the first picture, so the expected weight of the first picture is increased by $1$ to $\\frac3 3$.\n\nSo, the expected weights of the pictures are $1+1=2$, $2+1=3$, $2+1=3$, $1+1=2$ and $1+1=2$.\n\nThe only picture that Nauuo does not like is the second picture, so the expected weight of the second picture is reduced by $1$ to $\\frac2 3$.\n\nSo, the expected weights of the pictures are $1+1=2$, $2+2=4$, $2+2=4$, $1+2=3$ and $1+2=3$.\n\nThe only picture that Nauuo does not like is the second picture, so the expected weight of the second picture is reduced by $1$ to $\\frac2 3$.\n\nSo, the expected weights of the pictures are $1+1=2$, $2+2=4$, $2+2=4$, $1+2=3$ and $1+2=3$.\n\nIt can be proved that the only picture that Nauuo does not like is the second picture, so the expected weight of the second picture is reduced by $1$ to $\\frac2 3$.\n\nSo, the expected weights of the pictures are $1+1=2$, $2+2=4$, $2+2=4$, $1+2=3$ and $1+2=3$.\n\nThe only picture that Nauuo does not like is the second picture, so the expected weight of the second picture is reduced by $1$ to $\\frac2 3$.\n\nSo, the expected weights of the pictures are $1+1=2$, $2+2=4$, $2+2=4$, $1+2=3$ and $1+2=3$.\n\nThe only picture that Nauuo does not like is the second picture, so the expected weight of the second picture is reduced by $1$ to $\\frac2 3$.\n\nSo, the expected weights of the pictures are $1+1=2$, $2+2=4$, $2+2=4$, $1+2=3$ and $1+2=3$.\n\nSo, the only picture that Nauuo does not like is the second picture, so the expected weight of the second picture is reduced by $1$ to $\\frac2 3$.\n\nSo, the expected weights of the pictures are $1+1=2$, $2+2=4$, $2+2=4$, $1+2=3$ and $1+2=3$.\n\nNauuo is very naughty so she did not give you any hint of the third example.\n\n\"\"\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"1 2\\n1\\n1\") == \"3\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\nassert solution(\"1 2\\n1\\n1\") == \"3\"\nassert solution(\"1 1\\n1\\n1\") == \"3\"\nassert solution(\"1 2\\n1\\n1\") == \"3\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n2 3\") == \"3\\n3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1\\n2 1') == '332748119'\n\"\"\"\n\nimport sys\nimport math\nimport bisect\n\nassert len(sys.argv) >= 2\nlines = sys.stdin.readlines()\n\nn, m = map(int, lines[0].split())\nl = list(map(int, lines[1].split()))\n\nexpected_weights = [1]\nprevious_weight = 0\nfor i in range(1, n):\n    weight = l[i] + previous_weight\n    expected_weights.append(weight)\n    previous_weight = weight\n\nfor i in range(0, m):\n    while True:\n        num = int(expected_weights[bisect.bisect_left(expected_weights, l[0] + i)])\n        if l[0] + i == num and num >= 0:\n            break\n        expected_weights.insert(bisect.bisect(expected_weights, l[0] + i) + 1, num)\n\n\nexpected_weights = list(map(lambda x: x % 998244353, expected_weights))\nexpected_weights.sort()\n"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\nassert solution(\"1 2\\n1\") == \"3\"\n\n\"\"\"\n\nfrom typing import Tuple, List\nimport sys\n\nread = lambda: map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n1\\n1') == '3'\nassert solution('2 1\\n0\\n1') == '3'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n0 1\\n2 1') == '332748119'\nassert solution('1 2\\n4 3 5') == '160955686'\nassert solution('3 3\\n0 1 1') == '974061117'\nassert solution('4 3\\n0 1 1') == '185138929'\n\"\"\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == 6\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 1 5 2 6\") == \"11\"\nassert solution(\"5\\n1 2 3 4 5\") == \"6\"\nassert solution(\"5\\n1 100 101 100 1\") == \"102\"\n\nimport math\n\nn = int(stdin.readline())\narr = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 5 2 6\") == \"11\"\nassert solution(\"1 2 3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 1 5 2 6') == 11\n\"\"\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('123\\n') == ''\nassert solution('123\\n45\\n') == ''\nassert solution('123\\n45\\n678\\n') == ''\nassert solution('123\\n45\\n678\\n9') == ''\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 5 2 6') == '11'\nassert solution('1 2 3 4 5') == '6'\nassert solution('1 100 101 100 1') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 1 5 2 6\") == \"11\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 5 2 6\") == 11\nassert solution(\"1 2 3 4 5\") == 6\nassert solution(\"1 100 101 100 1\") == 102\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '11'\nassert solution('1 100 101 100 1') == '102'\n"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 3\") == \"No\"\nassert solution(\"3 1\\n1 3\") == \"Yes\"\n\n\n---\n\n3. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u0434\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u043c \u0433\u0440\u0430\u0444\u043e\u043c\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0435\u0448\u0430\u0435\u0442 \u043f\u043e\u0434\u043e\u0431\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443:\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d n (1 \\le n \\le 100) \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0431\u0435\u0440 m (0 \\le m \\le n(n-1)/2). \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 m \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u0430\u0440\u044b \u0432\u0435\u0440\u0448\u0438\u043d, \u0441\u043e\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0445 \u0440\u0435\u0431\u0440\u043e\u043c. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0444 \u043d\u0435 \u0441\u0432\u044f\u0437\u043d\u044b\u0439, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \"\u041d\u0435\u0442 \u0441\u0432\u044f\u0437\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430\".\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0448\u0438\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043a\u0440\u0430\u0451\u0432\u0435, \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0435, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0435\u0441\u044f\u0442\u044c \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0451\u0431\u0435\u0440. \u041d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u0435\u0434\u0438\u043d\u0438\u0446\u044b. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u043d\u0435\u0442, \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u043e\u043b\u044c.\n\n\n---\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0433\u0440\u0430\u0444\u0435, \u0438 \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mm \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0451\u0431\u0435\u0440. \u0414\u0430\u043b\u0435\u0435 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b mm \u0440\u0435\u0431\u0435\u0440 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043f\u0430\u0440\u044b \u0432\u0435\u0440\u0448\u0438\u043d, \u0441\u043e\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0445 \u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438, \u0437\u0430\u0442\u0435\u043c \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043f\u0430\u0440\u044b \u0432\u0435\u0440\u0448\u0438\u043d, \u0441\u043e\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0445 \u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 nn \u0447\u0438\u0441\u0435\u043b \u2014 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0435\u0440\u0448\u0438\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043a\u0440\u0430\u0451\u0432\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u043d\u0435\u0442, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0435\u0434\u0438\u043d\u0438\u0446\u0443.\n\n\n---\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 9 2\n>>> 1 4\n>>> 2 4\n>>> 3 4\n>>> 4 13\n>>> 10 5\n>>> 11 5\n>>> 12 5\n>>> 14 5\n>>> 5 13\n>>> 6 7\n>>> 8 6\n>>> 13 6\n>>> 9 6\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n>>> 1 3 7 9\n\n\u0422\u0435\u0441\u0442 2\n>>> 3 1\n>>> 1 3\n>>> 2 3\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n>>> 0\n\n\u0422\u0435\u0441\u0442 3\n>>> 4 2\n>>> 1 4\n>>> 2 4\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n>>> 2\n\n-----\n\n\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n9 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n1 3 7 9\n\n\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n3"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2\\n1 2\\n1 3\\n2 3\\n3 4') == 'Yes'\nassert solution('4 2\\n1 3\\n2 3') == 'No'\n\n\n\nfrom collections import deque"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 3\\n2 3') == 'Yes'\nassert solution('3 1\\n1 3') == 'No'\nassert solution('3 1\\n1 2') == 'Yes'\nassert solution('3 1\\n2 1') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('14 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6\") == \"Yes\"\nassert solution(\"3 1\\n1 3\\n2 3\") == \"No\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n1 3\\n2 3') == 'No'\nassert solution('3 1\\n1 3') == 'No'"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Yes'\nassert solution('a') == 'Yes'\nassert solution('aa') == 'No'\nassert solution('aaa') == 'No'\n\nassert solution('''\n2 1\n1 2\n''') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"14 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6\") == \"Yes\"\nassert solution(\"3 1\\n1 3\\n2 3\") == \"No\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n2 3') == 'Yes'\nassert solution('3 1\\n2 3') == 'No'\nassert solution('6 1\\n2 3\\n5 4') == 'Yes'\nassert solution('6 1\\n2 3\\n5 4\\n5 13') == 'Yes'\nassert solution('14 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6\\n') == 'Yes'"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n##.\") == 1\nassert solution(\"4 2\\n##\\n.#\\n.#\\n##.\") == -1\nassert solution(\"4 5\\n....\\n####\\n.###\\n.#...\\n\") == 2\nassert solution(\"2 1\\n.#\\n#.\") == -1\nassert solution(\"3 5\\n.....\\n.....\\n.....\\n\") == 0\n"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n.#.\n###\n##.\n''') == 1\nassert solution('''\n4 2\n##\n.#\n.#\n##\n''') == -1\nassert solution('''\n4 5\n....#\n####.\n.###.\n.#...\n''') == 2\nassert solution('''\n2 1\n.\n"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n.#\\n###\\n##.\") == '1'\nassert solution(\"4 5\\n.....\\n.....\\n.....\\n\") == '0'\nassert solution(\"2 1\\n.\\n#\") == '-1'\nassert solution(\"3 5\\n....\\n....\\n....\\n\") == '0'\nassert solution(\"4 5\\n....#\\n....#\\n....#\\n....#\") == '0'\n"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 3\n.#.\n###\n##.\n\"\"\") == '1'\nassert solution(\"\"\"4 2\n##\n.#\n.#\n##\n\"\"\") == '-1'\nassert solution(\"\"\"4 5\n....#\n####.\n.###.\n.#...\n\"\"\") == '2'\nassert solution(\"\"\"2 1\n.\n"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n.\\n###\\n##.\") == 1\nassert solution(\"4 5\\n.#...\\n##..#\\n##.#.\\n###.#\") == -1\nassert solution(\"4 5\\n#.#.#\\n##...\\n#...#\\n#.#.#\") == 2\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        n, m = list(map(int, stdin.split()))\n        matrix = [stdin[i:i+m] for i in range(0, n*m, m)]\n        return 1\n"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".#..#.#####..#..#####.###..#.#.#.#####.###.#.###.######.#.\") == 8\nassert solution(\"####.###.#.###.####.###.#.###.###.#.###.###.####.#####.####.#\") == -1\nassert solution(\"#####...#.#.#####...#.#.#...#...#.#####.#.###.#...#.#.#.#...#\") == -1\nassert solution(\"#####.###.###.###.#####.#.####.#####.###.####.####.#####.####\") == -1\nassert solution(\"#######.###.####.###.###.#.#.###.#####.#.#.#####.#####.#######\") == 2\n"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n##.\") == '1'\nassert solution(\"4 2\\n##.\\n.#\\n.#\\n##.\") == '-1'\nassert solution(\"4 5\\n....#\\n####.\\n.###.\\n.#...\\n\") == '2'\nassert solution(\"2 1\\n..\\n.#\") == '-1'\nassert solution(\"3 5\\n.....\\n.....\\n.....\\n\") == '0'\n"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n##.\") == \"1\"\nassert solution(\"4 2\\n##\\n.#.\\n.#.\") == \"-1\"\nassert solution(\"4 5\\n.....\\n####.\\n.###.\\n.#...\\n\") == \"2\"\nassert solution(\"2 1\\n.\\n#\") == \"-1\"\nassert solution(\"3 5\\n.....\\n.....\\n.....\\n\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n##.\\n###\\n##.\") == \"1\"\nassert solution(\"4 2\\n##.\\n.#.\\n.#.\") == \"-1\"\nassert solution(\"4 5\\n....#\\n####.\\n.###.\\n.#...\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n.....\\n.....\\n.....\\n\") == \"0\"\nassert solution(\"4 2\\n##.\\n.#.\") == \"-1\"\nassert solution(\"4 5\\n...#\\n...#\\n.#.#\\n#...\\n\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 0 2 3\") == \"YES\\n1 2 2 3\"\nassert solution(\"3 10\\n10 10 10\") == \"YES\\n10 10 10\"\nassert solution(\"5 6\\n6 5 6 2 2\") == \"NO\"\nassert solution(\"3 5\\n0 0 0\") == \"YES\\n5 4 2\"\n\"\"\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 0 2 3\") == \"YES\\n1 2 2 3\"\nassert solution(\"3 10\\n10 10 10\") == \"YES\\n10 10 10\"\nassert solution(\"5 6\\n6 5 6 2 2\") == \"NO\"\nassert solution(\"3 5\\n0 0 0\") == \"YES\\n5 4 2\"\nassert solution(\"3 5\\n0 1 2\") == \"YES\\n5 4 2\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 0 2 3\") == \"YES\\n1 2 2 3\"\nassert solution(\"3 10\\n10 10 10\") == \"YES\\n10 10 10\"\nassert solution(\"5 6\\n6 5 6 2 2\") == \"NO\"\nassert solution(\"3 5\\n0 0 0\") == \"YES\\n5 4 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 0 2 3\") == \"YES\\n1 2 2 3\"\nassert solution(\"3 10\\n10 10 10\") == \"YES\\n10 10 10\"\nassert solution(\"5 6\\n6 5 6 2 2\") == \"NO\"\nassert solution(\"3 5\\n0 0 0\") == \"YES\\n5 4 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n6 5 6 2 2\") == \"YES\"\nassert solution(\"3 10\\n6 5 6 2 2\") == \"YES\"\nassert solution(\"3 10\\n6 10 10\") == \"YES\"\nassert solution(\"3 10\\n6 10 10 10\") == \"NO\"\nassert solution(\"3 10\\n
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 0 2 3\") == \"YES\\n1 2 2 3\"\nassert solution(\"3 10\\n10 10 10\") == \"YES\\n10 10 10\"\nassert solution(\"5 6\\n6 5 6 2 2\") == \"NO\"\nassert solution(\"3 5\\n0 0 0\") == \"YES\\n5 4 2\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10\") == \"YES\\n10 10 10\"\nassert solution(\"0 0 0\") == \"YES\\n5 4 2\"\nassert solution(\"6 5 6 2 2\") == \"NO\"\nassert solution(\"5 6 5 2 2\") == \"NO\"\nassert solution(\"6 5 4 2 2\") == \"NO\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 0 2 3\") == 'YES'\nassert solution(\"3 10\\n10 10 10\") == 'YES'\nassert solution(\"5 6\\n6 5 6 2 2\") == 'NO'\nassert solution(\"3 5\\n0 0 0\") == 'YES'\nassert solution(\"1 2\\n0 0\") == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 0 2 3\n''') == 'YES'\nassert solution('''3 10\n10 10 10\n''') == 'YES'\nassert solution('''5 6\n6 5 6 2 2\n''') == 'NO'\nassert solution('''3 5\n0 0 0\n''') == 'YES'\nassert solution('''5 6\n6 5 6 2 2\n''') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 0 2 3\\n\") == \"YES\\n1 2 2 3\"\nassert solution(\"3 10\\n10 10 10\\n\") == \"YES\\n10 10 10\"\nassert solution(\"5 6\\n6 5 6 2 2\\n\") == \"NO\"\nassert solution(\"3 5\\n0 0 0\\n\") == \"YES\\n5 4 2\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\") == \"4 3 6 2\"\nassert solution(\"1\\n42\") == \"42\"\nprint(solution(input()))"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(    \"4\"    ) == \"4 3 6 2\"\nassert solution(    \"1\"    ) == \"1 1\"\nassert solution(    \"2\"    ) == \"2 1 2\"\nassert solution(    \"3\"    ) == \"3 1 3\"\nassert solution(    \"4\"    ) == \"4 3 6 2\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\") == \"4 3 6 2\"\n\"\"\""
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\\n\") == '4 3 6 2'\n\"\"\""
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('a b c') == 'abc'\nassert solution('abc a') == 'abc a'\n"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\") == \"4 3 6 2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\") == '4 3 6 2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '1 1'\nassert solution('42') == '42'\nassert solution('1 1 1 1') == '1 1'\nassert solution('1 1 1 1 1') == '1 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2') == '4 3 6 2'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2') == '4 3 6 2'\nassert solution('1\\n42') == '42'\nassert solution('2\\n1 1 1 1') == '1 1'\nassert solution('1\\n1') == '1'\nassert solution('2\\n2 2') == '2 2'\n"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n2 1\\n3 1\") == \"3\"\nassert solution(\"3\\n1 1\\n2 2\\n3 1\") == \"6\"\nassert solution(\"4\\n2 1\\n2 2\\n3 1\\n3 2\") == \"6\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1\\n2 1\\n3 1\\n3 2') == 6\nassert solution('5\\n1 1\\n2 1\\n3 1\\n3 2') == 5\n\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == 3\n\nassert solution(\"4\\n2 1\\n2 2\\n3 1\\n3 2\") == 6\n\nassert solution(\"4\\n1 1\\n2 1\\n3 1\\n3 2\") == 6\n"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"3\"\nassert solution(\"3\\n2 1\\n2 2\\n3 1\\n3 2\") == \"6\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\npoints = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\npoints = list(set(points))\n\nprint(len(points))\n"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n2 1\\n3 1') == '3\\n'\nassert solution('3\\n1 1\\n2 1\\n3 2') == '6'\nassert solution('4\\n2 1\\n2 2\\n3 1\\n3 2') == '6'\n"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1\\n2 1\\n3 1') == '3'\nassert solution('3\\n1 1\\n2 2\\n3 1') == '6'\nassert solution('4\\n2 1\\n2 2\\n3 1\\n3 2') == '6'\n\"\"\""
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"3\"\nassert solution(\"4\\n2 1\\n2 2\\n3 1\\n3 2\") == \"6\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n2 2\\n3 1\\n3 2') == '6'\nassert solution('3 1\\n3 2\\n4 1\\n4 2') == '6'\n\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nl_n = [int(line.split()[0]) for line in lines[1:]]"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 1\\n2 1') == '3'\nassert solution('3\\n1 1\\n2 1\\n3 1') == '6'\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 1\\n3 1') == '3'\nassert solution('3\\n1 1\\n2 2\\n3 1') == '6'\nassert solution('4\\n2 1\\n2 2\\n3 1\\n3 2') == '6'\n"
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nEEE\\nE..\\nE.E\\nEE.E\") == \"1 1\\n2 2\\n3 3\"\nassert solution(\"3\\nEEE\\nE..\\nE.E\\nEE.E\") == \"3 3\"\nassert solution(\"3\\nEEE\\nE.E.\\nE..E\\nE.E.\\nE..E\\nEE.E\") == \"2 2\\n3 3\"\nassert solution(\"3\\nEEE\\nE.E.\\nE..E\\nE.E.\\nE..E\\nEE.E\") == \"1 3\\n3 3\"\nassert solution(\"3\\nEEE\\nE.E.\\nE..E\\nE.E.\\nE..E\\nEE.E\") == \"3 3\"\n\n\"\"\""
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nEEE\\nE..\\nE.E\\nEE.E\\n\") == \"3 3\\n1 3\\n2 2\\n4 4\\n5 3\"\nassert solution(\"3\\nEEE\\nE..\\nE.E\\n\") == \"-1\"\nassert solution(\"3\\nEEE\\nE..\\nE.E\\n\") == \"-1\"\nassert solution(\"5\\nEE.EE\\nE.EE.\\nE...E\\n.EE.E\\nEE.EE\\n\") == \"3 3\\n1 3\\n2 2\\n4 4\\n5 3\"\n\n\"\"\""
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n.E.\\nE.E\\n.E.\\n\") == \"1 1\\n2 2\\n3 3\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nEEE\\nE.E\\n.E.\\nEE.E\") == '3 3 1 3'\nassert solution(\"5\\nEE.EE\\nE.EE.\\nE...E\\n.EE.E\\nEE.EE\") == '3 3 1 3 2 4'\n"
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nEEE\\nE..\\nE.E\\nEE.E\") == \"3 3\\n1 3\\n2 2\\n4 4\\n5 3\"\nassert solution(\"5\\nEEE\\nE..\\nE.E\\nEE.E\") == \"3 3\\n1 3\\n2 2\\n4 4\\n5 3\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nEEE\\nE..\\nE.E\\nEE.E') == '1 1 3 3'\nassert solution('5\\nEE.EE\\nE.EE.\\nE...E\\n.EE.E\\nEE.EE') == '3 3 1 3 2 2'\nassert solution('5\\nEEEEEE\\nE.E.E.\\nE..EE.\\nE.E.EE') == '1 1 1 1 2 2'\n\"\"\""
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nEEE\\nE.E\\nE.E.\\n.EE.\\nEE.EE') == '3 3\\n1 3\\n2 2\\n4 4\\n5 3'\n\"\"\"\n\nn = int(input())\n\nT = [[int(j) for j in i if j == 'E'] for i in input().split()]\n\nE = [i for j in T for i in j]\n\nprint('-1' if 'E' in E else min([i for i in range(1, n+1) if i not in E]))\n"
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('.E.\\nE.E\\n.E.') == '1 1\\n2 2\\n3 3'\nassert solution('EEE\\nE..\\nE.E\\n') == '-1'\nassert solution('EE.E\\nE.EE\\nE.E.\\n.EE.\\nEE.EE') == '3 3\\n1 3\\n2 2\\n4 4'\n\"\"\""
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nEEE\\nE..\\nE.E\\nEE.E\") == \"3 3\\n1 3\\n2 2\\n4 4\\n5 3\"\nassert solution(\"3\\nEEE\\nE..\\nE.E\\nEE.E\")!= \"3 3\\n1 3\\n2 2\\n3 3\\n4 4\\n5 3\"\n\nassert solution(\"3\\nE.E\\nE.E\\nE.E\") == \"1 1\\n2 2\\n3 3\"\nassert solution(\"3\\nE.E\\nE.E\\nE.E\")!= \"1 1\\n2 2\\n3 2\"\nassert solution(\"3\\nE.E\\nE.E\\nE.E\")!= \"1 1\\n2 2\\n3 3\""
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nE.E\\nE.E\\n.E.\\n\") == \"1 1\"\nassert solution(\"3\\nEEE\\nE.E\\nE.E\\n\") == \"-1\"\nassert solution(\"5\\nEE.EE\\nE.EE.\\nE...E\\n.EE.E\\nEE.EE\\n\") == \"3 3\"\n\"\"\""
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2\\n10 -1 2 2 2 2 2 2 -1 10') == '32'\n\n\"\"\""
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2') == 32\nassert solution('10 1') == 10\nassert solution('5 10') == -1\n"
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2\\n10 -1 2 2 2 2 2 2 -1 10\") == 32\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\\n10 -1 2 2 2 2 2 2 -1 10\") == \"32\"\n\n\"\"\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n10 -1 2 2 2 2 2 2 -1 10\") == \"32\"\n\n\"\"\""
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10') == '4'\nassert solution('4 10') == '4'\nassert solution('4 10') == '4'\nassert solution('4 10') == '4'\nassert solution('4 10') == '4'\n"
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 3') == '6'\nassert solution
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\\n10 -1 2 2 2 2 2 2 -1 10\") == 32\n\"\"\""
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\\n10 -1 2 2 2 2 2 2 -1 10\") == 32\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0430\u0440\u044b \u0438\u0437 \u0434\u0432\u0443\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0447\u0430\u043b\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043a\u043e\u043d\u0435\u0446 \u0434\u0440\u0443\u0433\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0442\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1 1\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f:\n1 \u2264 n, m \u2264 200\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u0438\u0437 n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0447\u0430\u043b\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043a\u043e\u043d\u0435\u0446 \u0434\u0440\u0443\u0433\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0442\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n10 5\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n15\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f:\n1 \u2264 n, m \u2264 200\n\"\"\""
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == answer\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n1 2 4 8\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n1 1 1') == '3'\nassert solution('4 2 3\\n1 2 4 8') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n1 2 4 8\") == \"79\"\n\n\"\"\""
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\\n1 1 1\") == \"3\"\nassert solution(\"4 2 3\\n1 2 4 8\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\n\n\"\"\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2\\n1 1 1') == '3'\nassert solution('4 2 3\\n1 2 4 8') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\n\n\"\"\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 1 2\n1 1 1\"\"\") == \"3\"\nassert solution(\"\"\"4 2 3\n1 2 4 8\"\"\") == \"79\"\n\n-----Test-----\n\"\"\"\n    def test_solution():\n        # Check test cases\n        # assert solution(\"\"\"3 1 2\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1\\n1 2 4 8') == '3'\n\n\"\"\"\n\nn,k,x = map(int,stdin.split())\nl = list(map(int,stdin.split()))\na = max(l)\nl.remove(a)\nwhile True:\n    c = max(l)\n    if a*c < k:\n        print(a|c)\n        break\n    else:\n        l.remove(c)\n        k -= a*c\n        if l:\n            a = max(l)\n        else:\n            break\n"
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"7\"\n\"\"\"\n\n\n\"\"\"\nOPTIMAL SOLUTION 1\n\"\"\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3 3') == '7 7 4 7 7 7'\nassert solution('3 2') == '7 7 4'\nassert solution('3 1') == '7 4'\nassert solution('4 1') == '4'\n"
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"7\\n7\\n4\\n7\\n7\"\n\nassert solution(\"3 10\") == \"2\\n1\\n5\\n9\\n6\\n8\\n1\\n4\\n1\\n6\\n6\\n5\\n7\\n9\\n7\\n7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == '7\\n7\\n4\\n7\\n7'\n\"\"\""
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3') == '7\\n7\\n4\\n7\\n7'\n\"\"\"\n\nK, N = map(int, stdin.split())\nprint(K ** N % 998244353)\n"
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(r\"C:\\Users\\User\\Desktop\\_main_\\test_files\\3_1_sample.txt\", \"r\")) == \\\n    (1, 1, 1, 7, 7, 7, 4, 7, 7)\n\"\"\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == expected_result_1\nassert solution(test_input_2) == expected_result_2\n\"\"\""
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"7\\n7\\n4\\n7\\n7\"\n\"\"\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == '7\\n7\\n4\\n7\\n7'\n\"\"\""
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n') == '7\\n7\\n4\\n7\\n7'\n\"\"\"\n\nK, N = map(int, stdin.readline().split())\n\nres = 0\n\nfor k in range(2, 2*K, 2):\n    mod_k = (k-1)%998244353\n    res = (res + k*k)%998244353\n    if k == 2*K - 1:\n        res = (res + 2*K)%998244353\n\nprint(res)\n"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\"\"\") == \"6\"\nassert solution(\"\"\"9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\"\"\") == \"9\"\n\"\"\""
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"9\"\n\"\"\"\n\nimport sys\nimport collections\n\nclass Solution:\n    def get_graph(self, n, roads):\n        graph = collections.defaultdict(list)\n        for city1, city2 in roads:\n            graph[city1].append(city2)\n            graph[city2].append(city1)\n        return graph\n    \n    def union(self, u, v, union_city, graph, union_road):\n        u_root = self.find(u, union_city)\n        v_root = self.find(v, union_city)\n        if u_root == v_root:\n            return False\n        union_road[u_root].extend(union_road[v_root])\n        for city in union_road[v_root]:\n            union_city[city] = u_root\n        union_road.pop(v_root)\n        return True\n        \n    def find(self, city, union_city):\n        if city!= union_city[city]:\n            union_city[city] = self.find(union_city[city], union_city)\n        return union_city[city]\n    \n    def solution(self, n, k, roads):\n        if n == k:\n            return 0\n        roads = sorted(roads, key=lambda x: x[0])\n        graph = self.get_graph(n, roads)\n        union_city = {x:x for x in range(1, n + 1)}\n        union_road = collections.defaultdict(list)\n        for city1, city2 in roads:\n            if self.union(city1, city2, union_city, graph, union_road):\n                k -= 1\n                if k == 0:\n                    break\n        distances = set()\n        for city1, city2 in roads:\n            if city1 in union_city and city2 in union_city:\n                distances.add(union_road[union_city[city1]][union_city[city2]])\n        return max(distances)\n            \n"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('n1 n2 n3 n4 n5 n6 n7 n8 n9 n10') == '10'\nassert solution('n11 n12 n13 n14 n15 n16 n17 n18 n19 n20') == '20'\nassert solution('n21 n22 n23 n24 n25 n26 n27 n28 n29 n30') == '30'\nassert solution('n31 n32 n33 n34 n35 n36 n37 n38 n39 n40') == '40'\n"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 5 6 2\\n1 3\\n3 2\\n4 5\\n3 7\\n4 3\\n4 6\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 3\\n4 5\\n3 6\") == \"9\"\n\n---\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 5 6 2\\n1 3\\n3 2\\n4 5\\n3 7\\n4 3\\n4 6\\n\") == 6\nassert solution(\"9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\\n\") == 9\n"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\n\nassert solution('''\n9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3\\n3 2\\n4 5\\n3 7\\n4 3\\n4 6') == '6'\n\"\"\"\nimport sys\nimport itertools\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11101111001111111111010\") == \"3\"\nassert solution(\"11101111001111111111010\") == \"3\"\nassert solution(\"11101111001111111111010\") == \"3\"\nassert solution(\"11101111001111111111010\") == \"3\"\nassert solution(\"11101111001111111111010\") == \"3\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100') == -1\nassert solution('101') == 1\nassert solution('010') == 1\nassert solution('011') == 2\nassert solution('110') == 3\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end=\"\")\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101010\") == 1\n\"\"\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"01\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0011\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"-1\"\nassert solution(\"011\") == \"3\"\nassert solution(\"010\") == \"2\"\nassert solution(\"101\") == \"1\"\nassert solution(\"100\") == \"2\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('111') == -1\nassert solution('101010') == 2\nassert solution('101011') == 3\nassert solution('11111') == 1\nassert solution('0110111') == 1\n\nprint('Success')\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0010100\") == \"3\\n3 1 3 4\\n3 2 5 6\\n1 7\"\nassert solution(\"111\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11101010\") == \"1 2 4\", \"First\"\nassert solution(\"11100010\") == \"2 1 3\", \"Second\"\nassert solution(\"11101010\") == \"1 2 4\", \"Third\"\nassert solution(\"11011110\") == \"2 1 4\", \"Forth\"\nassert solution(\"11101011\") == \"1 2 4\", \"Fifth\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0010100\") == 3\n"
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 7\n2 1 2\n2 3 4\n3 5 6 7\"\"\") == \"24\"\nassert solution(\"\"\"2 4\n2 1 2\n3 2 3 4\"\"\") == \"1\"\nassert solution(\"\"\"2 2\n3 2 2 1\n2 1 2\"\"\") == \"1\"\n\n\"\"\"\n    The key idea is to find the number of distinct type changes in each gym.\n    If one Gym has some distinct type changes, then the count of distinct type changes in this Gym is equal to the sum of distinct type changes in all the other Gmms.\n    So if there is a Gym with a set of distinct type changes, there are no other Gyms with such a set of distinct type changes.\n    In the other way, if there is a Gym with no set of distinct type changes, there must be other Gyms with such a set of type changes.\n    To find the number of distinct type changes in each Gym, we can do two things:\n    1. Check the number of distinct type changes in the other Gmms. We can find it by using a hashset.\n    2. We can also use a map to keep track of how many distinct type changes we have seen so far in each Gmms.\n    \n    The solution is:\n    1. Initialize the hashmap, keeping track of the number of distinct type changes in each Gmms.\n    2. Iterate through each Gmms and update the hashmap by adding the new distinct type changes.\n    3. Return the sum of the number of distinct type changes in the hashmap.\n    \n    Time complexity: O(m * n), where m is the number of different types and n is the number of gyms.\n    Space complexity: O(m), where m is the number of different types.\n\"\"\"\n\nimport unittest\nimport collections\n\nclass Solution:\n    def solution(self, input_string):\n        lines = input_string.split('\\n')\n        gym_count = int(lines[0].split()[0])\n        pokemon_count = int(lines[0].split()[1])\n        gym_types = []\n        gym_types_counts = {}\n        for i in range(1, gym_count + 1):\n            gym_types.append(set(map(int, lines[i].split()[1:])))\n            gym_types_counts[i] = set()\n        \n        for type in range(1, pokemon_count + 1):\n            gym_types_counts[1].add(type)\n            \n        for i in range(1, gym_count):\n            for j in range(len(gym_types[i])):\n                if gym_types[i].__contains__(j + 1):\n                    for k in range(1, gym_count):\n                        if k!= i:\n                            if gym_types[k].__contains__(j + 1):\n                                gym_types[k].remove(j + 1)\n                if gym_types_counts[k].__contains__(j + 1):\n                    gym_types_counts[k].remove(j + 1)\n        \n        return sum(gym_types_counts.values())\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        stdin = \"2 3\\n2 1 2\\n3 2 3 4\"\n        expected = \"1\"\n        self.assertEqual(Solution().solution(stdin), expected)\n        \n        stdin = \"1 3\\n3 1 2 3\"\n        expected = \"6\"\n        self.assertEqual(Solution().solution(stdin), expected)\n        \n        stdin = \"2 2\\n3 2 2 1\"\n        expected = \"1\"\n        self."
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n2 1 2\\n2 2 3\") == 1\nassert solution(\"1 3\\n3 1 2 3\\n2 1 2\") == 2\nassert solution(\"2 4\\n2 1 2\\n3 2 3 4\") == 2\n"
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n2 1 2\\n2 2 3') == '1'\nassert solution('2 4\\n2 1 2\\n3 2 3 4') == '2'\nassert solution('3 7\\n2 1 2\\n2 3 4\\n3 5 6 7') == '24'\n"
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n2 1 2\\n2 2 3\") == \"1\"\nassert solution(\"1 3\\n3 1 2 3\") == \"6\"\nassert solution(\"2 4\\n2 1 2\\n3 2 3 4\") == \"2\"\nassert solution(\"2 2\\n3 2 2 1\\n2 1 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n2 1 2\\n2 2 3') == 1\nassert solution('1 3\\n3 1 2 3') == 6\nassert solution('2 4\\n2 1 2\\n3 2 3 4') == 2\nassert solution('2 2\\n3 2 2 1\\n2 1 2') == 1\nassert solution('3 7\\n2 1 2\\n2 3 4\\n3 5 6 7') == 24\n"
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n2 1 2\\n2 2 3\") == \"1\"\nassert solution(\"1 3\\n3 1 2 3\") == \"6\"\nassert solution(\"2 4\\n2 1 2\\n3 2 3 4\") == \"2\"\nassert solution(\"3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\") == \"24\"\nassert solution(\"1 2\\n3 1 2\") == \"1\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2 1 2\\n2 2 3\") == \"1\\n\"\nassert solution(\"1 3\\n3 1 2 3\\n\") == \"6\\n\"\nassert solution(\"2 4\\n2 1 2\\n3 2 3 4\\n\") == \"2\\n\"\nassert solution(\"2 2\\n3 2 2 1\\n2 1 2\\n\") == \"1\\n\"\nassert solution(\"3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\\n\") == \"24\\n\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution) == solution\n\n\"\"\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n2 1 2\\n2 2 3\") == \"1\"\nassert solution(\"1 3\\n3 1 2 3\") == \"6\"\nassert solution(\"2 4\\n2 1 2\\n3 2 3 4\") == \"2\"\nassert solution(\"2 2\\n3 2 2 1\\n2 1 2\") == \"1\"\nassert solution(\"3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\") == \"24\""
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n2 1 2\\n2 2 3\") == \"1\"\nassert solution(\"1 3\\n3 1 2 3\") == \"6\"\nassert solution(\"2 4\\n2 1 2\\n3 2 3 4\") == \"2\"\nassert solution(\"2 2\\n3 2 2 1\\n2 1 2\") == \"1\"\nassert solution(\"3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\") == \"24\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 5 4 7\") == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 4 2 3 1\") == \"3\"\nassert solution(\"4\\n1 5 4 7\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 4 2 3 1\") == \"3\"\nassert solution(\"4\\n1 5 4 7\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5 4 7\") == 6\n\"\"\""
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 4 2 3 1\") == 3\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5 4 7\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 4 2 3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 4 2 3 1\") == \"3\"\nassert solution(\"4\\n1 5 4 7\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'\n\n----\n\n\"\"\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2') == 4\nassert solution('4\\n1 1 2 3') == 20\nassert solution('5\\n1 1 1 1 1') == 62\nassert solution('3\\n1 1 2') == 3\n\nprint(solution('2\\n1 2'))\nprint(solution('4\\n1 1 2 3'))\nprint(solution('5\\n1 1 1 1 1'))\nprint(solution('3\\n1 1 2'))\n\n\"\"\""
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 2\") == \"4\""
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '4'\nassert solution('2\\n1 2\\n1 2') == '2'\nassert solution('4\\n1 1 2 3\\n1 2 3 4') == '21'\nassert solution('5\\n1 1 1 1 1\\n1 2 2 2 2\\n1 2 2 2 3\\n1 2 2 3 4') == '68'\n\nprint(solution('8\\n1 1 1 1 1 1 1 1 1\\n1 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2'))\n'''"
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '20'"
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == 4\n\nassert solution(\"4\\n1 1 2 3\") == 20\n\nassert solution(\"5\\n1 1 1 1 1\") == 62\n\n\"\"\""
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == 4\nassert solution(\"4\\n1 1 2 3\") == 20\nassert solution(\"5\\n1 1 1 1 1\") == 62\n\n\"\"\"\n\nn = int(input())\nnum = list(map(int, input().split()))\n\nk = 2\ncounter = 0\nfor i in num:\n    counter += i * k\n    k += 1\nprint(counter % 1000000007)"
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2') == '4'\n\nsolution('4\\n1 1 2 3')\nsolution('5\\n1 1 1 1 1')"
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 2 3\\n') == '20'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\na.insert(0, 0)\nb = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    b[i] = max(b[i], b[i - a[i]] + 1)\n    b[i] = max(b[i], b[i - a[i] + 1] + 1)\n\nprint(b[n] - 1)\n"
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 2 3\") == \"20\"\nassert solution(\"5\\n1 1 1 1 1\") == \"62\"\n\"\"\"\n\nfrom sys import stdin\n\nstdin = open(\"input.txt\")\n\nn = int(stdin.readline())\n\np = list(map(int, stdin.readline().split()))\n\nres = 0\n\nfor i in range(1, n):\n    if p[i] == i + 1:\n        res += 2\n    elif p[i]!= i + 1:\n        res += 1\n\nprint(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n1 1\\n1 1\") == \"6\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int, sys.stdin.readline().strip().split())))\n\nfrom collections import Counter\n\nd = Counter()\n\nfor i in range(n):\n    d[l[i][0] + l[i][1]] += 1\n\nans = 0\n\nfor x in d.values():\n    ans += x * (x - 1) // 2\n\nprint(ans)"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1\n1 1\n1 1\n''') == '6'\nassert solution('''4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\nassert solution('''1\n5 6\n''') == '7'\nassert solution('''4\n1 1\n2 1\n3 5\n5 3\n''') == '15'\n\n\"\"\"\n\nn = int(input())\nlrs = [list(map(int, input().split())) for _ in range(n)]\nprint(sum(x[0] + x[1] for x in lrs) + n)\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n1 1\") == \"6\"\nassert solution(\"1 1\\n2 1\\n2 1\") == \"8\"\nassert solution(\"1 1\\n2 1\\n2 1\\n2 1\") == \"12\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"6\"\nassert solution(\"1 1\\n1 1\") == \"6\"\nassert solution(\"1 1\\n1 1\\n1 1\") == \"6\"\nassert solution(\"1 1\\n1 1\\n1 1\\n1 1\") == \"6\"\nassert solution(\"1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"6\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1') == '7'\nassert solution('4 2') == '13'\nassert solution('5 3') == '15'\n\"\"\""
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n1 1\") == \"6\"\nassert solution(\"4\\n1 2\\n2 1\\n3 5\\n5 3\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"11\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"3 5\") == \"8\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n2 1') == '6'\n\nassert solution('4\\n1 2\\n2 1\\n3 5\\n5 3') == '15'\n\nassert solution('1\\n5 6') == '7'\n\nassert solution('5\\n4 3\\n2 2\\n1 1\\n6 2') == '8'\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n1 1\\n1 1\") == \"6\"\nassert solution(\"4\\n1 2\\n2 1\\n3 5\\n5 3\") == \"15\"\nassert solution(\"1\\n5 6\") == \"7\"\n\n'''\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n1\\n4\\n2\") == \"1\"\nassert solution(\"3\\n3\\n10 10 10\") == \"6\"\nassert solution(\"3\\n3\\n10 10 10\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n1\\n4\") == \"1\"\nassert solution(\"3\\n3\\n10 10 10\") == \"6\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n1\\n4') == '1'\nassert solution('3\\n1\\n3\\n3') == '6'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n4 4\\n2\\n') == '1'\nassert solution('3\\n3 3\\n10 10 10\\n17\\n') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\\n1\\n4\\n2\\n\") == \"1\"\nassert solution(\"3\\n3\\n1\\n10 10 10\\n17\\n\") == \"6\"\nassert solution(\"4\\n3\\n1\\n10 10 10\\n17\\n\") == \"2\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2\\n1 4') == '1'\nassert solution('2\\n1\\n4 4') == '3'\nassert solution('3\\n3\\n10 10 10') == '6'\nassert solution('3\\n3\\n17') == '6'\nassert solution('2\\n1\\n4 4') == '3'\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"5 1\") == \"0\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n2\n\n''') == '1'\nassert solution('''3\n3\n10 10 10\n17\n\n''') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2\\n1 2 3 4\\n4\") == \"3\"\nassert solution(\"3\\n3\\n9 9 9\\n17\") == \"6\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2'\nassert solution('1\\n2\\n2\\n4') == '0'\nassert solution('1\\n2\\n2\\n5') == '2'\nassert solution('1\\n2\\n2\\n10') == '2'\nassert solution('1\\n2\\n3\\n4') == '1'\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3 3 100\n1 1 1''') == 10\nassert solution('''3 6 5 1000000007\n1 2 1''') == 0\nassert solution('''3 5 6 11\n1 2 1''') == 0\nassert solution('''2 2 2 1000000007\n1 1 1''') == 1\nassert solution('''5 6 6 11\n1 1 1''') == 6\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 100\\n1 1 1\") == \"10\"\nassert solution(\"3 6 5 1000000007\\n1 2 3\") == \"0\"\n\"\"\"\n\nimport os\nimport sys\nfrom collections import Counter\n\nDEBUG = False\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\n\"\"\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\n\"\"\"\n\n\"\"\"\n---------------\n\"\"\"\n\n\"\"\"\nSolution:\n\n1. create all possible plans of number of bugs in each line\n2. sum up the plans\n3. check if the plans are good\n\nI just need to keep all the plans in a list and sum them up after\n\n\n- after I need to check for bad plans if they are not good I can check for the rest of the plans\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3 100\") == 10\nassert solution(\"3 6 5 1000000007\") == 0\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 5 11\") == \"6\"\nassert solution(\"5 3 6 11\") == \"6\"\nassert solution(\"5 3 6 5\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 3 3 100\") == \"6\"\n\"\"\"\n\nn, m, b, mod = map(int, input().split())\n\nbugs = [int(i) for i in input().split()]\n\nprint(m - sum(bugs))"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\\n1\\n\") == 1\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3 100\\n1 1 1\\n') == 10\nassert solution('3 6 5 1000000007\\n1 2 3\\n') == 0\nassert solution('3 6 5 1000000007\\n1 2 1\\n') == 0\nassert solution('5 4 3 1000000007\\n1 1 1\\n') == 0\nassert solution('6 5 6 11\\n1 2 1\\n') == 0\n"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 2 3\\nintel\") == 'YES'\nassert solution(\"4\\n1 2 3 1\\na\\nbcdefghi\\njklmnopqrstu\\nvwxyz\") == 'YES'\n\n\n\nhttps://www.codewars.com/kata/577bd8b4d758534c3c00035b/train/python"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 2 3\\nintel\\ncode\\nch allenge\\n\") == \"YES\"\nassert solution(\"4\\n1 2 3 1\\na\\nbdefghi\\njklmnopqrstu\\nvwxyz\\n\") == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n13 11 15 15\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles\") == \"YES\"\nassert solution(\"3\\n2 2 3\\nintel\\ncode\\nch allenge\") == \"YES\"\nassert solution(\"4\\n1 2 3 1\\na\\nbcdefghi\\njklmnopqrstu\\nvwxyz\") == \"NO\"\nassert solution(\"2\\n3 3\\na\\nb\\nc\") == \"NO\"\nassert solution(\"2\\n5 2\\nabc\\nxyz\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1') == 'YES'\nassert solution('3 3 2') == 'NO'\nassert solution('3 3 2') == 'NO'\nassert solution('2 2 3') == 'YES'\nassert solution('1 2 3 1') == 'YES'\n"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\\nintel\\ncode\\nch allenge\") == \"YES\"\nassert solution(\"4 1 3 1\\na\\nbcdefghi\\njklmnopqrstu\\nvwxyz\") == \"YES\"\nassert solution(\"4 1 3 1\\na\\nbcdefghi\\njklmnopqrstu\\nvwxyz\\n\") == \"NO\""
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 1\\nco-de\\nch al-len-ge\\njklmnopqrstu\\nvwxyz\") == \"YES\"\n\nassert solution(\"4\\n13 11 15 15\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles\") == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\\nintel\\ncode\\nch allenge\") == \"YES\"\n\nassert solution(\"4\\n1 2 3 1\\na\\nbcdefghi\\njklmnopqrstu\\nvwxyz\") == \"NO\""
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n13 11 15 15\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\n or to take arms against a sea of troubles\") == \"YES\"\n\n\"\"\"\n\n\nimport re\n\nn = int(input())\nm = input().strip().split()\np = list(map(int, input().strip().split()))\n\nv = re.compile(\"[aeiouy]\")\nc = re.compile(\"[^aeiouy]\")\n\nfor i in range(n):\n    x = v.findall(m[i])\n    y = c.findall(m[i])\n    if len(x) + len(y)!= p[i]:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_expected_result\n\"\"\"\n\nimport math\nimport re\n"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"intel\") == \"YES\"\nassert solution(\"code\") == \"YES\"\nassert solution(\"ch allenge\") == \"NO\""
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 5\") == \"26\"\n\n\"\"\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 5\") == \"26\"\nassert solution(\"1 10\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 5\") == \"26\"\nprint(\"Test 1 OK\")\n\nassert solution(\"1 10\") == \"10\"\nprint(\"Test 2 OK\")\n\nassert solution(\"1 10 1 10\") == \"17\"\nprint(\"Test 3 OK\")\n\nassert solution(\"1 10 1 1\") == \"16\"\nprint(\"Test 4 OK\")\n\nassert solution(\"3 10 1 1 10\") == \"29\"\nprint(\"Test 5 OK\")"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 5\") == \"26\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 5') == '26'\nassert solution('10') == '10'\n\"\"\"\n\n\nfrom itertools import groupby"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 5\") == \"26\"\n\n\"\"\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 5\") == \"26\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 10 10\") == \"12\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 5') == '26'\n\nassert solution('1 10') == '11'\n"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 5\") == 26\n"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 5') == '26'\nassert solution('10') == '10'\nassert solution('1') == '10'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 40\\n10 30 50') == 32\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == \"2\"\nassert solution(\"4 20\") == \"2\"\nassert solution(\"4 40\") == \"2\"\nassert solution(\"4 90\") == \"1\"\nassert solution(\"5 10\") == \"3\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n1 3 5') == '3'\nassert solution('3 40\\n10 30 50') == '32'\nassert solution('3 8\\n2 4 6') == '4'\n\n'''\n\nn, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 40\\n10 30 50\") == 32\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4') == 3\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\na.sort(reverse=True)\n\nans = 0\n\nfor d in a:\n    if d <= k:\n        k -= d\n        ans += 1\n        if k == 0:\n            break\nprint(ans)\n"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4\n1 3 5''') == '3'\n\nassert solution('''3 40\n10 30 50''') == '32'\n\nassert solution('''3 40\n10 30 40\n40 30 60\n30 70 50''') == '32'\n\nassert solution('''3 4\n1 3 5\n5 3 4''') == '3'\n\nassert solution('''2 7\n3 6\n9 7''') == '3'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 40\\n10 30 50') == '32'\nassert solution('3 4\\n1 3 5') == '3'\nassert solution('3 40\\n10 30 50') == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == 3\nassert solution(\"10 10\") == 6\nassert solution(\"1 3 5\") == 3\nassert solution(\"3 40\") == 32\nassert solution(\"3 40\") == 32\n"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 40\\n10 30 50\") == \"32\"\n\"\"\"\n\nimport sys\nimport math\n\nlines = iter(sys.stdin.readlines())\nn, k = list(map(int, next(lines).split()))\nl = list(map(int, next(lines).split()))\n\ndp = [[0 for _ in range(k+1)] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(k+1):\n        if j < l[i]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-l[i]]+1)\nprint(dp[n-1][k])\n"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 20') == '5'\nassert solution('3 40') == '32'\nassert solution('5 10') == '5'\nassert solution('5 100') == '5'\nassert solution('5 1000') == '5'\n"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([\n    [1, 1],\n    [5, 10],\n    [11, 14],\n    [5, 5],\n    [10, 10],\n    [3, 6],\n    [6, 12],\n    [7, 7],\n    [4, 11],\n])) == \"1 4 5 6 7 8 9\"\n\nassert solution(str([\n    [1, 1],\n    [3, 3],\n    [3, 3],\n    [4, 4],\n    [4, 4],\n    [5, 5],\n])) == \"1 2 4\"\n\nassert solution(str([\n    [1, 1],\n    [3, 3],\n    [3, 3],\n    [4, 4],\n    [4, 4],\n    [5, 5],\n])) == \"1 2 4\"\n\nassert solution(str([\n    [1, 1],\n    [3, 3],\n    [3, 3],\n    [4, 4],\n    [4, 4],\n    [5, 5],\n])) == \"1 2 4\"\n\nassert solution(str([\n    [1, 1],\n    [5, 5],\n    [5, 5],\n    [10, 10],\n    [3, 6],\n    [6, 12],\n    [7, 7],\n    [4, 11],\n])) == \"1 2 4\""
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\"\"\") == '1 4 5 6 7 8 9'\nassert solution(\"\"\"5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\"\"\") == '1 2 4'\nassert solution(\"\"\"9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\"\"\") == '1 2 4 5 6 7 8 9'\n"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == '1\\n'\nassert solution(2) == '1 4\\n'\nassert solution(3) == '1 2\\n'\nassert solution(4) == '1 2 4\\n'\nassert solution(5) == '1 2 4\\n'"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1 1\\n3 3\\n2 3\") == \"1 2\"\nassert solution(\"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\") == \"1 4 5 6 7 8 9\"\nassert solution(\"5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\") == \"1 2 4\"\nassert solution(\"5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n5 5\") == \"1 2 4\"\nassert solution(\"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\") == \"1 2 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\"\"\") == \"1 4 5 6 7 8 9\"\n\nassert solution(\"\"\"5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\"\"\") == \"1 2 4\"\n\nassert solution(\"\"\"5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\"\"\") == \"1 2 4\"\n\nassert solution(\"\"\"5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n1 2\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\"\"\") == \"1 2 4\"\n\nassert solution(\"\"\"5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n1 2\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 2\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\"\"\") == \"1 2 4\"\n\n\"\"\"\n1. Sort the input by entry time. We want to iterate through it starting at the latest people who enter.\n2. Go through the list, checking the entry time with the exit time for the same person. If the current person has not left and not yet been infected, then we know they will be infected at the start of the next day.\n3. If the person has left, check if it was infected today. If so, then print their index.\n4. If the person is still in the room, increment the infected count by one.\n5. Print the infected count.\n\nThis solution takes O(n) time in both space and time.\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\n\") == \"1 2 4\"\nassert solution(\"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\\n\") == \"1 4 5 6 7 8 9\"\nassert solution(\"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\\n\") == \"1 2 4\"\nassert solution(\"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\\n\") == \"1 2 4\"\nassert solution(\"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\\n\") == \"1 2 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n\"\"\") == \"1 4 5 6 7 8 9\"\nassert solution(\"\"\"\n9 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n4 4\n5 5\n\"\"\") == \"1 2 4\"\n\"\"\"\nclass Solution:\n    def solution(self, stdin):\n        n, m = stdin.readline().split()\n        l = stdin.readline().split()\n        arr = []\n        for i in range(0, int(n)):\n            temp = stdin.readline().split()\n            arr.append(temp)\n        arr = list(zip(*arr))\n        arr = list(map(int, arr[0]))\n        arr.sort()\n        stdin.readline()\n        arr1 = stdin.readline().split()\n        arr1 = list(map(int, arr1))\n        ans = []\n        for i in range(0, int(m)):\n            ans.append(list(filter(lambda x: x >= arr1[i], arr))[0])\n        return''.join(list(map(str, ans)))\n\"\"\"\n\"\"\"\nGiven the initial number of infected people, output the indices of people infected after D days.\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n3 3\\n2 3\\n1 2\\n3 4\") == \"1 2\"\nassert solution(\"1 1\\n3 3\\n3 3\\n4 4\\n4 4\") == \"1 2 3\"\nassert solution(\"1 1\\n2 2\\n2 2\\n3 3\\n3 3\") == \"1 2 3\"\nassert solution(\"1 1\\n2 2\\n2 2\\n3 3\\n4 4\\n4 4\") == \"1 2 3 4\"\nassert solution(\"2 1\\n2 2\\n2 2\\n3 3\\n4 4\\n4 4\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\\n\") == \"1 4 5 6 7 8 9\"\nassert solution(\"5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\n\") == \"1 2 4\"\nassert solution(\"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\\n\") == \"1 2 4 5 6 7 8 9\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 5.0\\n2 5.5\\n1 6.0') == '0'\nassert solution('6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 5.0\\n2 5.5\\n1 6.0\") == \"0\"\nassert solution(\"6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125\") == \"2\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 5.0\\n2 5.5\\n1 6.0\") == '1'\nassert solution(\"3 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\") == '0'\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 5.0\\n2 5.5\\n1 6.0') == '0'\nassert solution('3 3\\n1 5.0\\n2 5.5\\n3 6.0') == '0'\nassert solution('6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 5.0\\n2 5.5\\n1 6.0\") == \"1\"\nassert solution(\"3 3\\n1 5.0\\n2 5.5\\n3 6.0\") == \"0\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 5.0\\n2 5.5\\n1 6.0') == '1'\nassert solution('3 3\\n1 5.0\\n2 5.5\\n1 6.0') == '0'\nassert solution('6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\\n1 2.0\\n1 3.100\") == \"1\"\nassert solution(\"3 3\\n1 5.0\\n2 5.5\\n3 6.0\") == \"0\"\nassert solution(\"6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125\") == \"2\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 2.0\\n1 3.100\") == '1'\nassert solution(\"3 3\\n1 5.0\\n2 5.5\\n3 6.0\") == '0'\nassert solution(\"6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125\") == '2'\n\n\n\"\"\""
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''\n3 2\n1 5.0\n2 5.5\n1 6.0\n'''\n) == '1'\nassert solution(\n'''\n3 2\n1 5.0\n2 5.5\n1 6.0\n'''\n) == '0'\nassert solution(\n'''\n3 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n'''\n) == '2'\nassert solution(\n'''\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n'''\n) == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2 1\\n1 2.0\\n1 3.100\") == \"1\"\nassert solution(\"3 3\\n1 5.0\\n2 5.5\\n3 6.0\") == \"0\"\nassert solution(\"6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n2 3 6 5 4 10') == '3'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 6 5 4 10\") == \"3\"\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0430:\n\nclassmates - \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0438 \u0435\u0433\u043e \u043e\u0446\u0435\u043d\u043a\u0430.\n\nsub_list - \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0442\u0440\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432: \u043d\u043e\u043c\u0435\u0440, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430.\n\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432.\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0441 \u043e\u0446\u0435\u043d\u043a\u043e\u0439, \u0432\u044b\u0448\u0435 \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u044d\u0442\u043e\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0438 \u043e\u0446\u0435\u043d\u043e\u043a.\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0412\u0432\u043e\u0434:\n\nclassmates = [[1, 88], [2, 54], [3, 77], [4, 44], [5, 88], [6, 55], [7, 77], [8, 33], [9, 44], [10, 66], [11, 33]]\n\nsub_list = [[1, 'Physics', 87], [2, 'Math', 82], [3, 'English', 89]]\n\n\u0412\u044b\u0432\u043e\u0434:\n\nMath\n\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\nclassmates = [[1, 88], [2, 54], [3, 77], [4, 44], [5, 88], [6, 55], [7, 77], [8, 33], [9, 44], [10, 66], [11, 33]]\n\nsub_list = [[1, 'Physics', 87], [2, 'Math', 82], [3, 'English', 89]]\n\nclassmates_dict = {}\n\nclassmates_dict[1] = 88\nclassmates_dict[2] = 54\nclassmates_dict[3] = 77\nclassmates_dict[4] = 44\nclassmates_dict[5] = 88\nclassmates_dict[6] = 55\nclassmates_dict[7] = 77\nclassmates_dict[8] = 33\nclassmates_dict[9] = 44\nclassmates_dict[10] = 66\nclassmates_dict[11] = 33\n\nclassmates_dict = {1: 88, 2: 54, 3: 77, 4: 44, 5: 88, 6: 55, 7: 77, 8: 33, 9: 44, 10: 66, 11: 33}\n\nsub_list_dict = {}\n\nsub_list_dict[1] = 87\nsub_list_dict[2] = 82\nsub_list_dict[3] = 89\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nclassmates_dict = {1: 88, 2: 54, 3: 77, 4: 44, 5: 88, 6: 55, 7: 77, 8: 33, 9: 44, 10: 66, 11: 33}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77, 4: 44, 5: 88, 6: 55, 7: 77, 8: 33, 9: 44, 10: 66, 11: 33}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77, 4: 44, 5: 88, 6: 55, 7: 77, 8: 33, 9: 44, 10: 66, 11: 33}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77, 4: 44, 5: 88, 6: 55, 7: 77, 8: 33, 9: 44, 10: 66, 11: 33}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 87, 2: 82, 3: 89}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88, 2: 54, 3: 77}\n\nsub_list_dict = {1: 88,"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n2 3 6 5 4 10\") == \"3\"\n\n\n-----Test with HackerRank-----\n"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 6 5 4 10\") == \"3\"\nassert solution(\"1 1 1 1 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 3 6 5 4 10\") == 3\nassert solution(\"1 1\\n1\") == 0\nassert solution(\"4 2\\n2 3 6 5 4 10\") == 3\nassert solution(\"4 2\\n2 3 6 5 4 10\") == 3\nassert solution(\"4 1\\n2 3 6 5 4 10\") == 3\n"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"3\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '2'\nassert solution('2\\n1') == '1'\nassert solution('1\\n10') == '2'\nassert solution('10\\n10') == '1'\n"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 6 5 4 10') == '3'\nprint('Test 1: OK')\n\n\"\"\"\nfrom typing import List, Dict, Set\n\nfrom typing import List\n"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2') == 2\nassert solution('3\\n1 2 3') == 4\nassert solution('9\\n1 2 1 3 2 2 2 2 3') == 10\n"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 4 3 5') == '10'\nassert solution('6\\n1 2 2 3 3 3') == '6'\nassert solution('9\\n1 2 1 3 2 2 2 2 3') == '10'\nassert solution('1\\n1') == '1'\n"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2') == 2\nassert solution('3\\n1 2 3') == 4\nassert solution('9\\n1 2 1 3 2 2 2 2 3') == 10\n\"\"\"\nimport sys"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2''') == '2'\nassert solution('''1 2''') == '2'\nassert solution('''3 5''') == '6'\nassert solution('''3 2 1''') == '7'\nassert solution('''9 2 1 3 2 2 2 2 3''') == '10'\n\n\n\nimport io\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_1(self):\n        self."
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 3 1 2') == '4'\nassert solution('7\\n1 2 3 4 2 5 1') == '6'\nassert solution('9\\n1 2 1 3 2 2 2 3') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"3 1 2\") == \"3\"\nassert solution(\"9 1 2 1 3 2 2 2 3\") == \"10\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"9\\n1 2 1 3 2 2 2 2 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\ndp = [0] * n\nfor i in range(n):\n    for j in range(i):\n        if a[j] + 1 == a[i] or a[j] - 1 == a[i]:\n            dp[i] = max(dp[i], dp[j] + 1)\n\nprint(max(dp))\n"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([1, 2])) == 2\nassert solution(str([1, 2, 2])) == 3\nassert solution(str([1, 2, 2, 2])) == 4\nassert solution(str([1, 2, 2, 2, 3])) == 4\n"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 4\n\"\"\"\n\n\"\"\"\nIn a sequence A[1], A[2],..., A[n], find A[n] + 1 such that:\n\nA[i + 1] = A[i] + 2 if A[i] is odd;\nA[i + 1] = A[i] + 1 if A[i] is even.\nThe value of n in all test cases is less than 1000.\nThe value of n in all test cases is an integer and is given from Standard Input in the following format:\n\nn\n\nThe sequence is then given in the following format:\n\nA[1] A[2]... A[n]\n\nPrint the value of A[n] + 1 such that the conditions are met.\n\n-----Constraints-----\n - 1 \\leq n \\leq 1000\n\n-----Input-----\n10\n1\n\n-----Output-----\n3\n\n-----Input-----\n12\n1\n\n-----Output-----\n5\n\n-----Input-----\n6\n2\n\n-----Output-----\n7\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())"
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 4\n\"\"\"\n\nimport sys\n\n_, n = list(map(int, sys.stdin.readlines()))\n\nprint((n ** 2 + n) % (10 ** 9 + 7))\n"
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 4\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '4\\n'\nassert solution('1\\n') == '10\\n'\nassert solution('3\\n') == '4\\n'\nassert solution('4\\n') == '6\\n'\nassert solution('5\\n') == '10\\n'\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"8\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.n = int(sys.stdin.readline())\n        self.memo = {}\n    \n    def fibo_helper(self, n: int) -> int:\n        if n <= 1:\n            return 1\n        if n == 2:\n            return 2\n        if n in self.memo:\n            return self.memo[n]\n        self.memo[n] = self.fibo_helper(n-1) + self.fibo_helper(n-2)\n        return self.memo[n]\n    \n    def fibo(self) -> int:\n        n = self.n\n        numbers = [self.fibo_helper(i) for i in range(n+1)]\n        \n        ans = 0\n        modulo = 10 ** 9 + 7\n        for i in range(n+1):\n            for j in range(i+1, n+1):\n                if numbers[i] == numbers[j]:\n                    ans += 1\n        \n        ans = ans % modulo\n        return ans"
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == '4'\n\"\"\"\nfrom typing import List\n\n\"\"\"\n 1   2   3   4   5   6   7   8   9   10\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n\"\"\"\n\"\"\"\n1 2 3\n1 2 3\n2 1 3\n2 2 3\n3 1 3\n3 2 3\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '4'\nassert solution('1\\n') == '0'\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('2') == '4'\nassert solution('10') == '23'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '4'\nassert solution('1\\n') == '1'\nassert solution('10\\n') == '90'\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 4\n\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())\n\ncount = 0\n\nfor i in range(1, n + 1):\n    for j in range(1, i + 1):\n        if j!= i:\n            if j == 1:\n                count += 1\n            else:\n                if i % j == 0:\n                    count += 1\n                    break\n\nprint(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 6\n1 5 1 4\n''') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6\\n1 5 1 4') == 5\n\"\"\""
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6\\n1 5 1 4') == '5'\n\"\"\"\n\nfrom typing import Tuple\n\nN_MAX, M_MAX = 10 ** 5, 10 ** 5"
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\\n1 5 1 4\") == 5\n\"\"\"\n\nn, m = [int(s) for s in stdin.split()]\na = [int(s) for s in stdin.split()]\n\nnum_changes = 0\n\nfavorite_level = 0\n\nfor i in range(n):\n    if a[i] > m:\n        favorite_level = a[i] - m\n        break\n    if a[i] < a[i+1]:\n        num_changes += 1\n    else:\n        if a[i] == m:\n            num_changes += 1\n        if a[i] < a[i+1] and favorite_level:\n            num_changes += 1\n            favorite_level = 0\n\nprint(num_changes)\n"
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n1 5 1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 5 1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n1 5 1 4\\n\") == \"5\"\n\n------Comments------\nIt is important to realize that in the first change the favorite button is not pressed. It is not possible to press it before the second change.\nSo, Snuke should set the favorite brightness level to 1, then the forward button, then to 2, and so on.\nIn the second change, the favorite button is pressed once, then the forward button twice.\nIn the third change, the favorite button is pressed once, and the forward button once.\nIn the fourth change, the favorite button is pressed twice.\nIn the fifth change, the favorite button is pressed once.\nIn this case, Snuke needs to press the forward button twice and the favorite button once, i.e. 5 times.\nThe favorite brightness level is set to 1, 2, 3, 4, 5, 6, then to 1, 2, 3, 4, 5, and 6.\nTherefore, Snuke needs to press the forward button 4 times and the favorite button 6 times.\nIn this case, the favorite brightness level is set to 4, and Snuke needs to press the forward button 1 time and the favorite button 7 times.\nAs for the forward button, Snuke needs to press the forward button 4 times and the favorite button 9 times.\nIn this case, the favorite brightness level is set to 4, and Snuke needs to press the forward button 6 times and the favorite button 4 times.\nAs for the forward button, Snuke needs to press the forward button 4 times and the favorite button 10 times.\nIn this case, the favorite brightness level is set to 4, and Snuke needs to press the forward button 5 times and the favorite button 4 times.\nTherefore, Snuke needs to press the forward button 3 times and the favorite button 5 times.\nThe forward button and the favorite button are pressed 1 times.\nAs for the forward button, Snuke needs to press the forward button 3 times and the favorite button 5 times.\nIn this case, the favorite brightness level is set to 5, and Snuke needs to press the forward button 2 times and the favorite button 4 times.\nTherefore, Snuke needs to press the forward button 2 times and the favorite button 5 times.\nThe forward button and the favorite button are pressed 1 times.\nIn this case, the favorite brightness level is set to 6, and Snuke needs to press the forward button 1 times and the favorite button 5 times.\nTherefore, Snuke needs to press the forward button 1 times and the favorite button 6 times.\nIn this case, Snuke has done all the changes and the favorite brightness level is set to 6.\n\n\"\"\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\nassert solution('a b c') == ''\n\nassert solution('a a a') == ''\n\nassert solution('a 1 a 2') == ''\n\nassert solution('2 2') == ''"
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n1 5 1 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 5 1 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+-+-+\") == 1\nassert solution(\"-\") == 1\nassert solution(\"---\") == 1\nassert solution(\"+\") == 1\nassert solution(\"-+++-\") == 2\n"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+-+-+') == 1\nassert solution('---') == 3\nassert solution('+---') == 2\nassert solution('-+-+') == 2\nassert solution('+') == 1\n"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-+-+\") == 1\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+-+-+') == 1\nassert solution('-') == 1\nassert solution('-' * 20) == 1\nassert solution('+' * 20) == 1\nassert solution('-' * 30 + '+' * 20) == 21\n"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+++\") == 1\nassert solution(\"----\") == 3\nassert solution(\"+-\") == 1\nassert solution(\"-\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('+-+-+') == 1\n\n\"\"\"\n\ninput_ = input()\n\nvisitors = []\n\nfor c in input_:\n    if c == '+':\n        visitors.append(c)\n    elif c == '-':\n        visitors.append('-')\n\nprint(visitors.count('-'), end = '')"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+-+-+\") == 1\nassert solution(\"+--\") == 2\nassert solution(\"+++---+++\") == 3\n\"\"\""
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-+-+\") == 1\nassert solution(\"---\") == 3\n\nprint('Hooray!')"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('+-+-+') == 1\nassert solution('---') == 3\n\"\"\""
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-+-+\") == 1\nassert solution(\"-+-+\") == 2\nassert solution(\"++\") == 2\nassert solution(\"+\") == 0\nassert solution(\"\") == 0\n\n\"\"\""
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 AND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\nassert solution(\"6 AND 4\\nOR 4 6\\nXOR 6 5\\nAND 3 7\\nAND 4 8\\nAND 3 6\") == \"101110\"\nassert solution(\"1 AND 9\\nNOT 0\\nAND 1 2\\nXOR 0 1\\nAND 0 2\\nOR 4 1\") == \"101101\"\nassert solution(\"2 AND 8\\nOR 4 1\\nNOT 0\\nAND 3 2\\nOR 1 4\\nNOT 0\") == \"101110\"\nassert solution(\"3 AND 2\\nOR 4 1\\nOR 4 2\\nNOT 3\\nAND 3 2\\nNOT 1\\nAND 1 2\\nOR 3 1\\nXOR 1 4\") == \"1111\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == '10110'\n\"\"\"\n\nfrom collections import deque\n\ngraph = dict()\nn = int(input())\n\nfor i in range(n):\n    first, *rest = input().split()\n    if first == \"IN\":\n        graph[int(rest[0])] = int(rest[1])\n    else:\n        graph[int(rest[0])] = [int(x) for x in rest[1:]]"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8') == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8') == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == '10110'\nassert solution(\"10\\nIN 1\\nIN 1\\nAND 2 8\") == '10110'\nassert solution(\"10\\nNOT 1\\nAND 1 1\\nXOR 1 1\\nAND 1 1\\nNOT 1 1\\nXOR 1 1\\nIN 1\\nOR 1 1\\nAND 1 1\\nXOR 1 1\\nAND 1 1\") == '11010'\nassert solution(\"10\\nIN 1\\nIN 1\\nAND 1 1\\nIN 1\\nIN 1\\nAND 1 1\\nIN 1\\nXOR 1 1\\nAND 1 1\\nIN 1\\nAND 1 1\") == '10110'\n\"\"\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\""
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\n\"\"\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\nassert solution(\"5\\nAND 2 3\\nOR 3 2\\nXOR 1 4\\nXOR 4 1\") == \"10110\"\n\"\"\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 1') == 2\nassert solution('5 2 1') == 4\n\"\"\"\n\nn, m, p = [int(i) for i in stdin.readline().split()]\nA = [int(i) for i in stdin.readline().split()]\nB = [int(i) for i in stdin.readline().split()]\n\ns = set()\nfor i in range(m):\n    for j in range(i + 1, m):\n        s.add(A[j] - A[i] + p)"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 1\\n1 2 3 2 1\\n1 2 3\") == \"2\\n1 3\"\nprint(\"Test 1: \", solution(\"5 3 1\\n1 2 3 2 1\\n1 2 3\"))\nassert solution(\"6 3 2\\n1 3 2 2 3 1\\n1 2 3\") == \"2\\n1 2\"\nprint(\"Test 2: \", solution(\"6 3 2\\n1 3 2 2 3 1\\n1 2 3\"))\n"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2 1\\n1 2 3 2 1\\n1 2 3') == '2'\nassert solution('4 3 4\\n1 2 3 2 1\\n1 2 3') == '1 3'\nassert solution('5 5 5\\n1 2 3 4 5\\n1 2 3 4 5') == '0'\nassert solution('6 6 2\\n1 3 2 3 1 2\\n1 2 3') == '2'\n\nprint('Passed all tests')\n"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '2\\n1 3'\nassert solution('6 3 2\\n1 3 2 2 3 1\\n1 2 3') == '2\\n1 2'\nassert solution('4 4 6\\n3 4 5 4 3\\n3 3 4 5') == '1\\n3 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 2 1\") == 2\n"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == \"1 2\", \"Case 1\"\nassert solution(\"5 3 1\") == \"1 2 3\", \"Case 2\"\nassert solution(\"6 3 2\") == \"1 2\", \"Case 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 2\\n1 3 2 2 3 1\\n1 2 3\") == '2\\n1 2\\n'\nassert solution(\"5 3 1\\n1 2 3 2 1\\n1 2 3\") == '2\\n1 3\\n'\n"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '2\\n1 3'\nassert solution('6 3 2\\n1 3 2 2 3 1\\n1 2 3') == '2\\n1 2'"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '2\\n1 2\\n'\n"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 2\\n1 3 2 2 3 1\\n1 2 3\") == \"2\\n1 3\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2\\n1 3\\n1 2') == '2'\nassert solution('3 3 1\\n2\\n1 2\\n1 3') == '0'\n\"\"\""
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\\n1 3\\n1 2\") == \"2\"\n\"\"\"\n\nfrom collections import deque\n\nn, m, k = [int(x) for x in input().split()]\n\nnodes = [int(x) for x in input().split()]\n\nedges = []\n\nfor i in range(m):\n    u, v = [int(x) for x in input().split()]\n    edges.append((u, v))"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\\n2\\n1 2\\n1 3\\n2 3\") == \"0\"\nassert solution(\"4 1 2\\n1 3\\n1 2\") == \"2\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1\\n2 1 2\\n1 3\\n2 3\") == \"0\"\nassert solution(\"3 3 2\\n2 1 2\\n1 3\\n2 3\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\\n1 3\\n1 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2') == 2\nassert solution('3 3 1') == 0\n\"\"\"\nfrom itertools import combinations, permutations"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\\n1 3\\n1 2\") == \"2\"\nassert solution(\"3 3 1\\n2\\n1 2\\n1 3\\n2 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\\n1 3\\n1 2\") == 2\nassert solution(\"3 3 1\\n2\\n1 2\\n1 3\") == 0\n\"\"\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2') == 2\n\"\"\""
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2 3 5 4 2') == 3\nassert solution('100 100 100 100') == 1\nassert solution('7 6 5 4 3 2 2 3') == 4\nassert solution('8 7 6 5 4 3 2 2 3') == 4\n\n\"\"\"\nfrom collections import Counter\nfrom typing import List\nimport sys"
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n10 2 3 5 4 2\") == \"3\"\nassert solution(\"4\\n100 100 100 100\") == \"1\"\nassert solution(\"8\\n7 6 5 4 3 2 2 3\") == \"4\""
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n6\\n5\\n4\\n3\\n2\\n2\\n3') == '4'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == solution(\"\")\n"
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 3 5 4 2\") == \"3\"\nassert solution(\"100 100 100 100\") == \"1\"\nassert solution(\"8 7 6 5 4 3 2 2 3\") == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n10 2 3 5 4 2\") == \"3\"\nassert solution(\"4\\n100 100 100 100\") == \"1\"\nassert solution(\"8\\n7 6 5 4 3 2 2 3\") == \"4\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n10 2 3 5 4 2\") == \"3\"\nassert solution(\"4\\n100 100 100 100\") == \"1\"\nassert solution(\"8\\n7 6 5 4 3 2 2 3\") == \"4\"\nassert solution(\"7\\n7 6 5 4 3 2 2 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2 3 5 4 2') == '3'\nassert solution('100 100 100 100') == '1'\nassert solution('7 6 5 4 3 2 2 3') == '4'\n"
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 7 6 5 4 3 2 2 3\") == \"4\"\nassert solution(\"8 7 6 5 4 3 2 2 3\") == \"4\"\nassert solution(\"8 7 6 5 4 3 2 2 3\") == \"4\"\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\\n\") == \"Yes\\n0\\n2 3\"\nassert solution(\"6 5\\n2 1 2\\n2 1 2\\n3 1 2 3\\n2 1 5\\n2 4 4\\n2 4 4\\n\") == \"Yes\\n0\\n2 3\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\") == \"Yes\\n0\\n2 3\"\nassert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\nassert solution(\"6 5\\n2 1 2\\n2 1 2\\n3 1 2 3\\n2 1 5\\n2 4 4\\n2 4 4\") == \"Yes\\n0\\n2 3\"\n\"\"\"\n\n\"\"\"\nprint(0)\nprint(0)\nprint(0)\n\nprint(1)\nprint(2)\nprint(2)\n\nprint(1)\nprint(1)\nprint(0)\n\nprint(0)\nprint(0)\nprint(1)\n\nprint(0)\nprint(0)\nprint(0)\n\nprint(1)\nprint(0)\nprint(1)\n\nprint(1)\nprint(1)\nprint(0)\n\nprint(0)\nprint(0)\nprint(1)\n\nprint(0)\nprint(0)\nprint(0)\n\nprint(0)\nprint(1)\nprint(1)\nprint(1)\n\nprint(0)\nprint(1)\nprint(1)\nprint(1)\n\nprint(0)\nprint(0)\nprint(1)\nprint(1)\nprint(1)\n\nprint(1)\nprint(0)\nprint(1)\nprint(1)\nprint(1)\n\nprint(1)\nprint(1)\nprint(0)\nprint(1)\nprint(1)\n\nprint(0)\nprint(0)\nprint(0)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\n\nprint(0)\nprint(0)\nprint(0)\nprint(0)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\n\nprint(0)\nprint(0)\nprint(0)\nprint(0)\nprint(0)\nprint(0)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\n\nprint(1)\nprint(1)\nprint(1)\nprint(0)\nprint(0)\nprint(0)\nprint(0)\nprint(0)\nprint(1)\nprint(1)\nprint(1)\n\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(0)\nprint(1)\nprint(1)\nprint(1)\n\nprint(0)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(0)\nprint(0)\nprint(0)\n\nprint(0)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\n\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\n\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\n\nprint(0)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint(1)\nprint("
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1\") == \"Yes\"\nassert solution(\"4 3 2 2 1\") == \"Yes\"\nassert solution(\"4 3 2 2 1\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2 2 1\\n3 1 1 3\\n3 2 3 3') == 'Yes\\n0\\n2 3'\nassert solution('4 3 2 2 1\\n3 1 1 3\\n3 2 3 3') == 'No'\n"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"Yes\\n0\\n2 3\"\nassert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\nassert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"Yes\\n0\\n2 3\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 1 3 2 1\") == \"Yes\"\nassert solution(\"4 3 2 2 1\") == \"No\"\nassert solution(\"4 3 2 2 4 4\") == \"No\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\nassert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\nassert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\nassert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\nassert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\") == \"Yes\\n0\\n2 3\"\nassert solution(\"6 5\\n2 1 2\\n2 1 2\\n3 1 2 3\\n2 1 5\\n2 4 4\\n2 4 4\") == \"Yes\\n0\\n2 3\"\nassert solution(\"4 3\\n4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\") == \"Yes\\n2\\n2 3\"\n\"\"\""
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\\n') == 'Yes\\n0\\n2 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '20'\nassert solution('3') == '8'\n\n\"\"\"\nimport math\nimport timeit\nfrom termcolor import colored\n"
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"20 0 1 4 3\"\nassert solution(\"5\") == \"20 0 1 4 3\"\n\"\"\""
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"20 0 1 2 3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0 1\"\nassert solution(\"3\") == \"0 1 2\"\nassert solution(\"4\") == \"0 1 2 3\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"20 0 2 1 4 3\"\n\"\"\"\n\nn = int(input())\n\ns = 0\nfor i in range(n):\n    s = s ^ (i + 1)\n\ns = s ^ (2 ** n - 1)\n\nprint(s)\n\nprint(' '.join([str(i) for i in range(n)]))"
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"20\"\nassert solution(\"5\") == \"20\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == 20\n\"\"\"\n\nimport unittest\n\nfrom collections import Counter, defaultdict\nfrom functools import reduce\nfrom operator import xor\n\n\nclass Solution:\n    def solution(self, n: str) -> int:\n        return max([sum(xor(Counter(range(1, int(n) + 1)).get(i, 0), k) for i, k in enumerate(self.permutation(int(n))))\n                    for j in range(1, int(n) + 1)])\n\n    def permutation(self, n: int):\n        a = list(range(1, n + 1))\n        while True:\n            yield a\n            a = [a[-1]] + a[:-1]\n            a.reverse()\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution_0(self):\n        self.assertEqual(self.solution(\"4\"), 20)\n\n    def test_solution_1(self):\n        self.assertEqual(self.solution(\"10\"), 220)\n"
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == 20\nassert solution(\"10\") == 0\n\"\"\""
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"20\"\n\"\"\""
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '20\\n0 2 1 4 3'\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"NO\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\") == \"YES\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\\n\") == \"NO\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\\n\") == \"NO\"\n\n-----Notes-----\n\nWhen you manipulate the engines, you can repeat the process of manipulating until you get the initial situation.\n\nThe power sources in the second engine become $(-2, 0)$, $(0, 0)$, $(0, -2)$, and $(-1, -1)$.\n\nCheck if any power source in the first engine will be destroyed.\n\nCheck if any power source in the second engine will be destroyed.\n\n\"\"\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n0 0\\n1 1\") == \"YES\"\nassert solution(\"4 4\\n0 0\\n2 2\\n2 0\\n0 0\") == \"YES\"\nassert solution(\"4 4\\n0 0\\n2 2\\n0 0\\n2 2\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\") == \"YES\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\\n\") == 'YES'\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\\n\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"YES\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"YES\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"YES\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"NO\"\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\") == 'YES'\nassert solution(\"3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n0 0\") == 'NO'\nassert solution(\"4 3\\n0 0\\n0 2\\n2 0\\n2 0\\n1 1\\n2 0\\n1 1\") == 'NO'\n"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == [1, 3, 7]"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == [1, 3, 7]\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"TMO\"\nassert solution(\"111\") == \"TMO\"\n\nInput\n4\n0\n1\n0\n1\n\nOutput\n2\n5\n6\n8\n\"\"\"\n\nimport sys\n\nMOD = 10 ** 9 + 7\n"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"3\"\nassert solution(\"11101110\") == \"9\"\nassert solution(\"101\") == \"5\"\n\n-----Time limit-----\n3 seconds per test set.\n'''\n"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111\") == \"1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111') == \"3\"\nassert solution('11') == \"3\"\nassert solution('1') == \"1\"\nassert solution('0011') == \"4\"\nassert solution('0101') == \"4\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == [1, 3, 7]\n\"\"\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111\") == \"3\"\nassert solution(\"110\") == \"3\"\nassert solution(\"101\") == \"3\"\nassert solution(\"1100\") == \"3\"\nassert solution(\"111\") == \"3\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == [1, 3, 7]\nassert solution(\"100100111111100100\") == [1, 4, 10, 23, 43, 82, 164, 345, 604, 1208, 2161, 3341, 6046, 12064, 2346, 3445, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063, 2434, 4534, 6043, 12063"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0\\n6 2\\n1 2\\n2 3\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6\\n1 9\\n13 1\\n2 5\\n3 9\\n7 2\") == \"First\"\nassert solution(\"1 0\\n2 3\\n3 1\\n2 2\\n1\") == \"Second\"\n\n\"\"\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 0\\n6 2\\n1 2\\n2 3\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6\\n1 9\\n13 1\\n2 5\\n3 9\\n7 2\\n\") == \"First\"\nassert solution(\"3\\n3 0\\n6 2\\n1 2\\n2 3\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6\\n1 9\\n13 1\\n2 5\\n3 9\\n7 2\\n\") == \"Second\"\n\n\"\"\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_cases[0]) == 'First'\n"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0\\n6 2\\n1 2\\n2 3\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6\\n1 9\\n13 1\\n2 5\\n3 9') == 'First'\n\n-----\n3\n5 5\n1 2\n2 3\n3 4\n4 5\n4 5\n\n-----\n4\n7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n\n-----\n3\n3 2\n1 2\n2 3\n3 4\n5 6\n6 7\n7 8\n\n-----\n6\n8 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n\n-----\n7\n8 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n\n-----\n7\n14 15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n\n-----\n5\n3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n\n-----\n4\n4 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n4 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n4 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n3\n3 4\n1 2\n2 3\n3 4\n4 5\n\n-----\n3\n4 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n3\n4 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n3\n4 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n3\n4 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n4\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5\n5 5\n1 2\n2 3\n3 4\n4 5\n\n-----\n5"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0\\n6 2\\n1 2\\n2 3\") == \"First\"\nassert solution(\"15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6\") == \"Second\""
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0\\n6 2\\n1 2\\n2 3\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6\\n1 9\\n13 1\\n2 5\\n3 9\\n7 2\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n-----\n'''"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 0\\n6 2\\n1 2\") == \"First\"\nassert solution(\"3\\n3 0\\n6 2\\n1 2\\n12 6\") == \"Second\"\nassert solution(\"3\\n15 10\\n12 14\\n8 3\") == \"First\"\nassert solution(\"3\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6\") == \"Second\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == \"Ann\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 'Ann'\nassert solution('cba') == 'Ann'\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabb\") == \"Ann\"\nassert solution(\"abab\") == \"Mike\"\nassert solution(\"abc\") == \"Ann\"\nassert solution(\"abcd\") == \"Ann\"\nassert solution(\"aaa\") == \"Ann\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"Ann\"\nassert solution(\"bca\") == \"Mike\"\n\"\"\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abba') == 'Ann'\nassert solution('cba') == 'Mike'\nassert solution('ab') == 'Ann'\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"abc\") == \"Ann\"\nassert solution(\"ejcd\") == \"Ann\"\nassert solution(\"abcd\") == \"Ann\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"Ann\"\nassert solution(\"cba\") == \"Mike\"\n\"\"\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaa\") == \"Ann\"\nassert solution(\"abcd\") == \"Ann\"\nassert solution(\"aabc\") == \"Ann\"\nassert solution(\"aaab\") == \"Mike\"\nassert solution(\"aaab\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == \"Ann\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == \"Ann\"\nassert solution(\"cba\") == \"Mike\"\nassert solution(\"abcd\") == \"Ann\"\nassert solution(\"ccccc\") == \"Ann\"\nassert solution(\"abb\") == \"Ann\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n8 3 8\\n1 2\\n2 3\") == '2'\n\"\"\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n8 3 8\\n1 2\\n2 3\") == '0'\nassert solution(\"4 4\\n8 12 8\\n1 2\\n2 3\") == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n8 9 10 7\\n1 2\\n2 3') == '2'\nassert solution('4 3\\n8 9 10 7\\n1 2\\n2 3\\n2 4') == '2'\nassert solution('4 3\\n8 9 10 7\\n1 2\\n2 3\\n2 4\\n3 4') == '1'\nassert solution('4 3\\n8 9 10 7\\n1 2\\n2 3\\n2 4\\n3 4\\n4 4') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 8\\n1 2\\n2 3\") == '2'\n\"\"\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n2 3\") == \"0\"\nassert solution(\"1 2\\n1 3\") == \"1\"\nassert solution(\"1 2\\n2 3\") == \"2\"\nassert solution(\"8 3 8\\n1 2\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 2 1 2 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 2 1 2 1 1 2 1 1 1 1 1 2 2 1 1 1 1 2 1 2 2 1 1 2 1 2 2 2 1 1 2 1 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 2 1 2 1 1 1 1 1 2 2 1 2 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 2 1 1 2 2 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2\n8 12 8\n1 2\n2 3''') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 2\n8 3 8\n1 2\n2 3\n8 4 9\n1 4\n2 4\n3 4\n3 5\n4 5\n3 6\n4 6\n5 6\n6 6\n1 6\n2 6\n3 6\n4 6\n5 6\n6 6''') == '2'\n\nassert solution('''4 2\n8 3 8\n1 2\n2 3\n8 4 9\n1 4\n2 4\n3 4\n3 5\n4 5\n3 6\n4 6\n5 6\n6 6\n1 6\n2 6\n3 6\n4 6\n5 6\n6 6''') == '0'\n\nassert solution('''4 2\n8 3 8\n1 2\n2 3\n8 4 9\n1 4\n2 4\n3 4\n3 5\n4 5\n3 6\n4 6\n5 6\n6 6\n1 6\n2 6\n3 6\n4 6\n5 6\n6 6''') == '2'\n\n\"\"\""
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n8 3 8\\n1 2\\n2 3') == 2\n\"\"\""
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\") == \"1\\n1\"\n\nassert solution(\"4 2\\n1 2\\n2 3\") == \"1\\n2\"\n\nassert solution(\"4 2\\n1 2\\n1 3\") == \"1\\n1\"\n\nassert solution(\"4 2\\n1 2\\n1 3\\n2 3\") == \"1\\n2\\n2\"\n\nassert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n2 1\") == \"2\\n1\""
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"ababacd\"\nassert solution(\"4 7\") == \"-1\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nimport sys\nfrom typing import List, Set\n\nfrom utils import get_input_lines\nfrom utils.mathematics import gcd\n\nsys.setrecursionlimit(5000)\n"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7 4''') == 'ababacd'\nassert solution('''4 7''') == '-1'\nassert solution('''2 2''') == 'ab'\n\n'''\n7 4\n\naabaaba\n'''\n"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"ababacd\"\nassert solution(\"4 7\") == \"ababacd\"\nassert solution(\"4 8\") == \"-1\"\nassert solution(\"7 3\") == \"aabaaba\"\nassert solution(\"5 5\") == \"abacd\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7\") == \"ababacd\"\nassert solution(\"4 4\") == -1\nassert solution(\"7 4\") == \"ababacd\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 3''') == 'abac'\nassert solution('''4 7''') == 'ababacd'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '7 4'\n) == 'ababacd', 'The string is: ababacd'\nassert solution(\n    '7 4'\n)!= 'abaabcde', 'The string is: abaabcde'\nassert solution(\n    '4 7'\n) == '-1', 'The string is: -1'\nassert solution(\n    '10 7'\n) == 'aaabbaa', 'The string is: aaabbaa'\nassert solution(\n    '15 7'\n) == 'aababacd', 'The string is: aababacd'\n"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\") == \"ababacd\"\n\"\"\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4') == 'ababacd'\nassert solution('4 7') == '-1'\n\n\"\"\"\nfrom collections import Counter\n\nn, k = map(int, stdin.readline().split())"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4') == 'ababacd'\nassert solution('4 7') == '-1'\n"
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"9\"\nassert solution(\"1 1 2 2 1 1 2 2 1\") == \"9\"\nassert solution(\"1 1 2 2 1 2 2 1 1 2 2 1\") == \"9\"\nassert solution(\"1 1 2 2 2 1 1 2 2 1\") == \"4\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 2\") == 4\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nsys.stdin = open(\"test/0\")\n\nn = int(sys.stdin.readline().rstrip())\narr = list(map(int, sys.stdin.readline().rstrip().split()))\n\nd = deque([])\nd.append(arr[0])\nans = 1\n\nfor i in range(1, n):\n    if d[-1] >= arr[i]:\n        d.pop()\n        d.append(arr[i])\n    else:\n        d.append(arr[i])\n    ans = max(ans, len(d))\nprint(ans)\n"
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 1 2\") == \"4\"\nassert solution(\"10 1 1 2 2 2 1 1 2 2 1\") == \"9\"\n\"\"\""
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 1 2\") == \"4\"\nassert solution(\"10 1 1 2 2 2 1 1 2 2 1\") == \"9\""
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 1 2\\n') == '4'\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1\\n') == '9'\n\"\"\""
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 2\") == 4\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1\") == 9\n"
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == 4\n"
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 1 2') == 4\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1') == 9\n\n\"\"\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 1 2') == '4'\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1') == '9'"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\\n1 1 2\\n2 2 1\") == '2\\n-\\n2\\n+'\nassert solution(\"6 6 3\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\") == '6\\n++-\\n2\\n+-\\n'\nassert solution(\"7 7 4\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\\n2 2 7\\n1 6 7\") == '7\\n+--\\n2\\n-0\\n'\n\n\"\"\"\n\nfrom typing import Dict, List"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1\\n1 1 2\\n2 2 1\") == \"2\"\nassert solution(\"6 6 3\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\") == \"6\"\nassert solution(\"2 2 3\\n1 2 1\\n2 1 3\") == \"-\"\nassert solution(\"4 6 7\\n1 2 1\\n3 1 1\\n2 3 2\\n4 1 1\\n1 3 2\\n4 3 2\\n4 1 2\") == \"++\"\nassert solution(\"2 2 3\\n1 2 1\\n2 3 2\") == \"--\""
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3''') == '''6\n++-\n2\n+-'''\n\nprint(solution(stdin))"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == expected_result\n\n-----Notes-----\nA graph is a directed graph if every edge has a direction associated with it and an undirected graph is a graph that is neither directed nor oriented.\n\"\"\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1\\n1 1 2\\n2 2 1\") == \"2\\n-\\n2\\n+\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import chain"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\\n1 1 2\\n2 2 1\") == \"2\\n-\\n2\\n+\"\n\"\"\""
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\\n1 1 2\\n2 2 1\") == '2\\n-\\n2\\n+'\nassert solution(\"6 6 3\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\") == '6\\n++-\\n2\\n+-\\n'\n\"\"\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\\n1 1 2\\n2 2 1\\n\") == \"2\\n-\\n2\\n+\"\nassert solution(\"6 6 3\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\\n\") == \"6\\n++-\\n2\\n+-\\n\"\n\n\"\"\"\n\nfrom math import inf\n\nfrom pip._vendor.distlib.compat import raw_input\n"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\\n1 1 2\\n2 2 1\\n\") == \"2\\n-\\n2\\n+\"\nprint(\"HERE\")\nassert solution(\"6 6 3\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\\n\") == \"6\\n++-\\n2\\n+-\\n\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\ninput = sys.stdin.read()\nlines = input.split(\"\\n\")\nn, m, s = lines[0].split()\ns, n, m = int(s), int(n), int(m)"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\nassert solution('3\\n3\\n1\\n2\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n2\\n3\\n3\\n3\\n3\\n2\\n2\\n3\\n2\\n3\\n1\\n1\\n3\\n1\\n2\\n3\\n3\\n2\\n2\\n3\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n3\\n1\\n2\\n3\\n3\\n2\\n1\\n2\\n1\\n3\\n2\\n2\\n2\\n3\\n2\\n1\\n3\\n3\\n2\\n2\\n1\\n2\\n1\\n1\\n3\\n2\\n3\\n3\\n3\\n2\\n3\\n1\\n1\\n1\\n1\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n2\\n2\\n1\\n3\\n1\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n2\\n3\\n1\\n2\\n3\\n2\\n3\\n1\\n2\\n3\\n3\\n3\\n2\\n3\\n3\\n2\\n3\\n3\\n2\\n1\\n2\\n2\\n3\\n1\\n2\\n2\\n3\\n1\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n3\\n2\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n2\\n2\\n3\\n2\\n3\\n1\\n1\\n1\\n3\\n1\\n2\\n1\\n1\\n3\\n1\\n3\\n1\\n3\\n2\\n2\\n1\\n1\\n3\\n2\\n1\\n2\\n2\\n1\\n2\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n3\\n1\\n2\\n1\\n1\\n3\\n2\\n1\\n3\\n2\\n2\\n1\\n1\\n2\\n1\\n3\\n1\\n2\\n2\\n3\\n3\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n3\\n3\\n3\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n3\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n3\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n3\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n3\\n3\\n2\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n3\\n3\\n1\\n2\\n1\\n2\\n3\\n2\\n3\\n1\\n2\\n3\\n3\\n2\\n2\\n1\\n2\\n1\\n3\\n2\\n3\\n3\\n2\\n3\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n3\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n3\\n3\\n2\\n2\\"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n\"\"\"\n\nimport itertools\nimport math\n"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n\n\"\"\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"8\") == \"8\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\nassert solution('1010') == '010'\nassert solution('11111111111') == '11111111110'\nassert solution('101010101010') == '101010'\n"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\nassert solution('0189') == '0689'\nassert solution('0689') == '0689'\n\"\"\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n\n\"\"\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\nassert solution('256876') == '0'\nassert solution('12345') == '0'\n\"\"\""
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\nassert solution(\"142857\") == \"0\"\nassert solution(\"10000\") == \"0\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"1684\") == \"0\"\nassert solution(\"1689\") == \"1869\"\n\n\"\"\""
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"-1\"\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\") == \"3\"\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\") == \"2\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n') == '2'\nassert solution('1 2 3\\n4') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3\"\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\") == \"3\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3\"\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\") == \"-1\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3\"\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 3\\n3 4') == '2'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '-1'\nassert solution('5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2') == '3'\n"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3\"\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\") == \"3\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n3 4') == '2'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '-1'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '3'\n\n\"\"\"\n\nfrom itertools import permutations, combinations\nimport queue\nfrom collections import deque, defaultdict\nimport numpy as np\n"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\") == '2'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '-1'\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\") == '3'\n"
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7') == 3\nassert solution('3 4 1') == 9\n"
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7\") == 3\nassert solution(\"3 4 1\") == 9\nassert solution(\"4 3 1\") == 0"
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4 7\\n\") == \"3\"\nassert solution(\"3\\n4 3 1\\n\") == \"9\""
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n4 7\") == \"3\"\nassert solution(\"3\\n4 3 1\") == \"9\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4 7\") == \"3\"\nassert solution(\"3\\n4 3 1\") == \"9\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7') == '3'\nassert solution('3 4 1') == '9'\nassert solution('1 2 3') == '4'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '4'\n"
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4 7\") == \"3\"\nassert solution(\"3\\n4 3 1\") == \"9\""
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4 7\") == \"3\"\n\nassert solution(\"3\\n4 3 1\") == \"9\"\n\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n4 7') == '3'\nassert solution('3\\n4 3 1') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4 7\") == \"3\"\nassert solution(\"3\\n4 3 1\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n8 5 10 12\\n\") == \"9\"\nassert solution(\"5\\n3 10 2 1 5\\n\") == \"2\"\nassert solution(\"1\\n1\\n\") == \"-1\"\nassert solution(\"4\\n0 5 15 10\\n\") == \"0\"\n\n\"\"\"\n\n\nfrom __future__ import annotations\nfrom typing import List\n"
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 8 5\") == \"9\"\nassert solution(\"5\\n3 10 2 1 5\") == \"2\"\nassert solution(\"4\\n0 5 15 10\") == \"0\"\nassert solution(\"1\\n1\") == \"-1\"\nassert solution(\"2\\n2\") == \"-1\""
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n1') == '1'\nassert solution('\\n3\\n0 0 0 1') == '-1'\nassert solution('\\n4\\n0 0 0 1') == '2'\nassert solution('\\n5\\n0 0 0 1') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 5\") == \"9\"\nassert solution(\"5 3 10 2 1 5\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0 5 15 10\") == \"0\"\nassert solution(\"4 8 5\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 5\") == 9\nassert solution(\"3 10 2 1 5\") == 2\nassert solution(\"1\") == -1\nassert solution(\"0 5 15 10\") == 0\nassert solution(\"2 9 0 6 0\") == 0\n"
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 8 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4 8 5') == '9'\nassert solution('5\\n3 10 2 1 5') == '2'\nassert solution('4\\n0 5 15 10') == '0'\nassert solution('1\\n1') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n3 10 2 1 5\n''') == '9'\nassert solution('''1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 8 5\") == \"9\"\nassert solution(\"5\\n3 10 2 1 5\") == \"2\"\nassert solution(\"4\\n0 5 15 10\") == \"0\"\nassert solution(\"1\\n1\") == \"-\"\nassert solution(\"5\\n0 5 15 10\") == \"0\""
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 5') == '9'\nassert solution('5 3 10 2 1 5') == '2'\nassert solution('1') == '-1'\nassert solution('4 0 5 15 10') == '0'\n\"\"\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 5\\n3 5 7 10\") == \"3\"\nassert solution(\"13 4 5\\n7 8 9 10\") == \"1\"\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 8 9 10\") == \"1\"\nassert solution(\"13 4 5\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4 5\\n3 5 7 10') == 3\nassert solution('13 4 5\\n7 8 9 10') == 1\n\n\"\"\"\n\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4 5\\n3 5 7 10\") == \"3\"\n\nassert solution(\"13 4 5\\n7 8 9 10\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4 5\\n3 5 7 10') == '3'\nassert solution('13 4 5\\n7 8 9 10') == '1'\n\"\"\""
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4 5\\n3 5 7 10\") == \"3\"\nassert solution(\"13 4 5\\n7 8 9 10\") == \"1\"\nassert solution(\"19 3 5\\n13 8 16 19\") == \"0\"\nassert solution(\"19 4 5\\n13 8 16 19\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 5\\n3 5 7 10\") == '3'\n\"\"\"\n\n\nfrom collections import deque\n\nn, m, k = map(int, stdin.readline().split())\np = list(map(int, stdin.readline().split()))\n\nd = deque(range(1, n+1))\n\ncount = 0\nfor i in p:\n    while d[0]!= i:\n        d.append(d.popleft())\n        count += 1\n    d.popleft()\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 5\\n3 5 7 10\") == \"3\"\nassert solution(\"13 4 5\\n7 8 9 10\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 5\\n3 5 7 10\") == \"3\"\nassert solution(\"13 4 5\\n7 8 9 10\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, m, k = [int(x) for x in sys.stdin.readline().split()]\np = [int(x) for x in sys.stdin.readline().split()]\n\ndp = [[0 for _ in range(k + 1)] for _ in range(m + 1)]\n\nfor i in range(1, m + 1):\n    for j in range(1, k + 1):\n        if p[i - 1] == j:\n            dp[i][j] = max(dp[i - 1][j] + 1, dp[i][j])\n        else:\n            dp[i][j] = dp[i][j]\n\nprint(dp[m][k])\n"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4 5\\n3 5 7 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == 2\nassert solution('1111') == 4\n\"\"\"\n\n\"\"\"\nIn the first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is $2$ (e.g. at the moment $2$).\n\nIn the second example, all lights are initially on. So the answer is $4$.\n\"\"\""
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''101\n3 3\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n"
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"1111\") == 4\nassert solution(\"111111\") == 7\nassert solution(\"10111010\") == 4\nassert solution(\"10111010\") == 4\n"
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"1111\") == 4\nassert solution(\"1010\") == 1\nassert solution(\"10101\") == 1\nassert solution(\"11101\") == 5\n"
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '2'\nassert solution('1111') == '4'\nassert solution('111111') == '6'\nassert solution('11110') == '3'\nassert solution('01110') == '2'\n"
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"101\"\n) == \"2\"\nassert solution(\n    \"1111\"\n) == \"4\"\nassert solution(\n    \"011100\"\n) == \"6\"\n\n\"\"\""
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 2\n\nassert solution(4) == 4\n\nassert solution(6) == 6\n\nassert solution(\"101\") == 2\nassert solution(\"1111\") == 4\n"
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"2\"\nassert solution(\"1111\") == \"4\"\nassert solution(\"0111\") == \"4\"\nassert solution(\"1101\") == \"2\"\nassert solution(\"1111\") == \"4\"\n\"\"\"\n\nimport sys\nimport re\n\nsys.stdin = open(\"test.txt\")\ninput = sys.stdin.readline\n\nnum_lamp_num = int(input())\nlamp_states = input().rstrip()\nlamp_nums = [int(x) for x in re.findall(r'\\d+', lamp_states)]\nlamp_nums.sort()\n\non_lamps = 0\nfor num in lamp_nums:\n    on_lamps += num\n\nprint(on_lamps)\n"
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == 2\nassert solution('1111') == 4\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"1111\") == 4\nassert solution(\"1010\") == 1\nassert solution(\"10111\") == 4\nassert solution(\"11111\") == 3\n"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1010111\") == \"1111\"\nassert solution(\"10111111\") == \"11111\"\nassert solution(\"11011111\") == \"1111\"\nassert solution(\"11101111\") == \"11111\"\nassert solution(\"11101110\") == \"11110\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1111') == '1111'\nassert solution('111111') == '11111111'\nassert solution('11111111111111') == '111111111111111111111111111111111'\nassert solution('1010111') == '01010'\nassert solution('10110111') == '10110111'\n"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1010111\") == \"010\"\nassert solution(\"10101110\") == \"010\"\nassert solution(\"101011111\") == \"010\"\nassert solution(\"10111011\") == \"010\"\nassert solution(\"10111110\") == \"010\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010111\") == \"010\""
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11110\") == \"1111\"\nassert solution(\"1110110110110111\") == \"1110111\"\nassert solution(\"1011011110110111\") == \"101101110\"\nassert solution(\"11111011011011111\") == \"111111110\"\nassert solution(\"11101101101101111011011011111\") == \"111011110110110111110\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1011011\") == \"110\"\nassert solution(\"1011010\") == \"101\"\nassert solution(\"111111011100\") == \"1010\"\nassert solution(\"1010101111111110\") == \"1110\"\nassert solution(\"10110111111111111111010\") == \"10101\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1011011) == 110\nassert solution(1110111) == 110\nassert solution(1101110) == 110\nassert solution(11111111) == 110\nassert solution(10111110) == 110\n"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1011011') == '110'\nassert solution('11110') == '11110'\nassert solution('101010') == '101010'\nassert solution
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101010\") == \"101010\"\nassert solution(\"1011010\") == \"1011011\"\nassert solution(\"101111111\") == \"10111110\"\nassert solution(\"110111110\") == \"11011111\"\nassert solution(\"1111111111101010\") == \"1111111111111010\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010111\") == \"101\"\nassert solution(\"10101010\") == \"010\"\nassert solution(\"10110111\") == \"1011011\"\nassert solution(\"11100110\") == \"11100\"\nassert solution(\"111111010\") == \"11101110\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1/2\"\nassert solution(\"3\\n2 2 2\") == \"0/1\"\nassert solution(\"3\\n5 7 10\") == \"5/7\"\n\"\"\""
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1/2\"\nassert solution(\"5\") == \"1/3\"\nassert solution(\"10\") == \"9/10\"\nassert solution(\"100\") == \"98/100\""
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"0/1\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"0/1\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"0/1\"\nassert solution(\"5\\n4 5 6 7 8\") == \"0/1\"\nassert solution(\"5\\n4 1 4 5 2\") == \"0/1\"\nassert solution(\"5\\n4 1 4 8 1\") == \"0/1\"\nassert solution(\"5\\n4 1 3 4 5\") == \"0/1\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n2\") == \"0/1\"\nassert solution(\"1\\n1\\n1\") == \"0/1\"\nassert solution(\"1\\n2\\n1\") == \"1/2\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"0/1\"\n\"\"\""
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"0/1\"\nassert solution(\"1\\n2\\n2\\n\") == \"1/2\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '1/2'\nassert solution('3 3 3') == '0/1'\nassert solution('1 2 3 4 5 6') == '3/6'\n\"\"\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 1 1 1 1''') == '0/1'\n"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 6\\n1 2\\n1 3\\n2 3\\n2 1\") == \"3 0 1 0\"\nassert solution(\"4 5 6\\n1 2\\n1 3\\n2 3\\n2 1\") == \"3 0 1 0\"\n\"\"\""
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5 1 4 6') == '1 0 1 0 0'\nassert solution('9 7 8 6 5') == '4 3 2 1 0'\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.stdin = open(\"input.txt\")\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == \"4 3 2 1 0\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\n\nassert solution('2\\n5 4 3 2 1\\n1 3') == '0 1 0 1'\nassert solution('3\\n5 6 4 2 1\\n1 3\\n2 3') == '1 1 1 0'\n\nassert solution('5\\n7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\") == '1 0 1 0 0'\nassert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == '4 3 2 1 0'\n\"\"\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 3\\n1 1\\n1 2') == '3 0 1 0'\nassert solution('5 7 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\") == '1 0 1 0 0'\nassert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == '4 3 2 1 0'"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2 1 0\\n9 7 8 6 5\\n1 1\\n3 1\\n4 1') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == \"4 3 2 1 0\"\nassert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == \"4 3 2 1 0\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\") == \"1 0 1 0 0\"\nassert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == \"4 3 2 1 0\"\nassert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == \"4 3 2 1 0\""
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n4 5 1 7 4''') == '1'\nassert solution('''2\n1 2''') == '0'\nassert solution('''3\n1 1 1''') == '1'\nassert solution('''3\n1 2 2''') == '11'\nassert solution('''5\n1 1 3 2 4''') == '11'\n"
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n4 5 1 7 4') == '1'\nassert solution('2\\n1 2') == '0'\nassert solution('3\\n1 1 1') == '1'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 5 1 7 4\") == \"1\\n8\\n01010\\n00011\\n01010\\n10010\\n00011\\n11000\\n00011\\n11000\")\n\nassert solution(\"2\\n1 2\") == \"0\\n2\\n11\\n11\"\n\nassert solution(\"3\\n1 1 1\") == \"1\\n0\\n11\\n11\""
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 1 7 4') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 2') == '2'\nassert solution('3 3') == '11'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 5 1 7 4\") == \"1\\n8\"\nassert solution(\"2\\n1 2\") == \"0\\n2\"\nassert solution(\"3\\n1 1 1\") == \"1\\n0\"\nassert solution(\"5\\n2 2 3 3 5\") == \"5\\n4\"\nassert solution(\"1\\n1\") == \"1\\n1\""
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 5 1 7 4\\n\") == \"1\\n8\\n01010\\n00011\\n01010\\n10010\\n00011\\n11000\\n00011\\n11000\")\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 5 1 7 4\") == \"1\"\nassert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 1 7 4') == '1'\nassert solution('1 2') == '0'\nassert solution('2 3 5') == '2'\nassert solution('1 1 1') == '0'\nassert solution('2 3 5') == '2'\n"
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n4 5 1 7 4\"\"\") == \"1\"\nassert solution(\"\"\"2\n1 2\"\"\") == \"0\"\nassert solution(\"\"\"3\n1 1 1\"\"\") == \"1\"\n\nassert solution(\"\"\"5\n1 1 2 4 1\"\"\") == \"1111\"\nassert solution(\"\"\"5\n1 2 1 4 1\"\"\") == \"1110\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 5 1 7 4\") == \"1\"\nassert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"1\"\n\n\"\"\"\n\n\nfrom collections import Counter\n\nn = int(stdin.readline().rstrip())\nr = [int(x) for x in stdin.readline().rstrip().split()]\n\nr_counts = Counter(r)\nr_min = min(r_counts.values())\nr_sum = sum(r_counts.values())\n"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\") == \"1\"\nassert solution(\"6\\n1 0 2 3\\n4 6 7 1\\n7 6 5 3\\n2 7 5 1\\n6 4 5 7\") == \"0\"\nassert solution(\"6\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\") == \"0\"\nassert solution(\"6\\n6 4 5 7\\n4 0 3 5\") == \"0\"\nassert solution(\"6\\n6 4 5 7\\n4 0 3 5\") == \"0\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\\n\") == '1'\n\"\"\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n\nnum_tile = int(stdin.readline())\ntiles = []\nfor line in stdin.read().splitlines():\n    line = line.split()\n    tiles.append(list(map(int, line)))\n\ndir = defaultdict(int)\nfor n, c1, c2, c3 in tiles:\n    dir[(c1, c2, c3, n)] += 1"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 2 3\\n1 4 6 1\\n2 6 7 2\\n\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\nn = int(input())\n\nmatrix = defaultdict(list)\n\nfor i in range(n):\n    matrix[i] = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n8 7 6\\n5 4 3') == '1'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n8 7 6\\n5 4 3\\n0') == '2'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n8 7 6\\n5 4 3\\n0\\n0\\n0\\n0') == '3'\n\n--------------------\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\") == \"1\"\n\"\"\"\n\nimport itertools\nfrom operator import itemgetter"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\") == \"1\"\n\nassert solution(\"4\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\") == \"0\"\n\nassert solution(\"10\\n0 1 2 3\\n4 5 6 7\\n8 9 10 11\\n12 13 14 15\\n16 17 18 19\\n20 21 22 23\\n24 25 26 27\\n28 29 30 31\\n32 33 34 35\\n36 37 38 39\\n40 41 42 43\\n44 45 46 47\\n48 49 50 51\\n52 53 54 55\\n56 57 58 59\\n60 61 62 63\\n64 65 66 67\\n68 69 70 71\\n72 73 74 75\\n76 77 78 79\") == \"39280\"\n\n\"\"\"\n\n\nimport sys\nimport time\n\nimport sys\n"
    }
]