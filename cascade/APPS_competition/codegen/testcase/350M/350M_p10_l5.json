[
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n[1, 2, 3]) == '5'\nassert solution(\n[1, 2, 3, 4]) == '6'\nassert solution(\n[1, 2, 3, 4, 5]) == '5'\nassert solution(\n[1, 2, 3, 4, 5, 6]) == '6'\nassert solution(\n[1, 2, 3, 4, 5, 6, 7]) == '9'\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"(2 3)\") == \"5\"\nassert solution(\"(3)(\") == \"5\"\nassert solution(\"(1 2)\") == \"1\"\nassert solution(\"(1 2 3)\") == \"3\"\nassert solution(\"(1 2 3 4 5 6 7 8 9 10)\") == \"9\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"( 2 ( 2 3 ) )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\nassert solution(\"( ( 2 3 ) 1 )\") == \"5\"\nassert solution(\"( ( 2 3 ) ( 4 5 ))\") == \"5\"\nassert solution(\"( ( 2 3 ) ( ( 4 5 ) ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"8 ( 2 3 )\") == \"9\"\nassert solution(\"4 ( 12 3 )\") == \"36\"\nassert solution(\"6 ( ( 2 3 ) )\") == \"5\"\nassert solution(\"6 ( 12 3 )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '5'\nassert solution(input) == '9'\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"5 3 2 4 6\" ) == \"25\"\nassert solution( \"5 3 2 4 6\" ) == \"9\"\nassert solution( \"5 3 2 4 6\" ) == \"7\"\nassert solution( \"5 3 2 4 6\" ) == \"4\"\nassert solution( \"5 3 2 4 6\" ) == \"2\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1(2)3\") == \"5\"\nassert solution(\"1(2(3))4\") == \"5\"\nassert solution(\"1(2(3)(4))5\") == \"5\"\nassert solution(\"1(2)3(4)5\") == \"5\"\nassert solution(\"1(2(3))(4)5\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\nprint(solution(stdin))\n"
    },
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n\nAssumptions:\n1. A brackets sequence is considered valid if the bracket sequence is in the list of closed parentheses.\n2. The brackets sequences are separated by () or a single space, which means they can be a single bracket or a multi-bracket.\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, '12345678910111213141516171819', '12345678910111213141516171819', '12345678910111213141516171819') == '23'\nassert solution(610, '12345678910111213141516171819', '12345678910111213141516171819', '12345678910111213141516171819') == '29'\nassert solution(9990, '12345678910111213141516171819', '12345678910111213141516171819', '12345678910111213141516171819') == '9'\nassert solution(1010, '12345678910111213141516171819', '12345678910111213141516171819', '12345678910111213141516171819') == '0'\nassert solution(0, '12345678910111213141516171819', '12345678910111213141516171819', '12345678910111213141516171819') == '1'\n"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp := input()) == expected\n"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '02'\n"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Your solution must return a palindrome.\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(10) == 6\nassert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\n"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"your solution is not correct\""
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('12') == '5'\nassert solution('29998') == '3'\nassert solution('29998') == '4'\nassert solution('999') == '2'\n"
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) =='seems legit', 'Incorrect output'\n"
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"seems legit\"\nassert solution(stdin) == \"seems legit\"\nassert solution(stdin) == \"seems legit\"\nassert solution(stdin) == \"seems legit\"\nassert solution(stdin) == \"seems legit\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2017 4 0\") == \"tampered odometer\"\nassert solution(\"2017 8 12000\") == \"insufficient service\"\nassert solution(\"2018 8 42000\") == \"tampered odometer\"\nassert solution(\"2018 8 42001\") == \"seems legit\""
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"tampered odometer\"\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2017 4 0'), '2017 4 0'\nassert solution('2017 8 12000'), '2017 8 12000'\nassert solution('2018 8 42000'), '2018 8 42000'\nassert solution('2018 8 42001'), '2018 8 42001'\n"
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2017 4 0\") == \"tampered odometer\"\nassert solution(\"2017 8 12000\") == \"insufficient service\"\nassert solution(\"2018 8 42000\") == \"seems legit\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"seems legit\""
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) =='seems legit'\nassert solution(stdin) == 'tampered odometer'\n\"\"\"\nclass Solution:\n    def solution(self, stdin):\n        y,m,o,d=map(int,stdin.split())\n        n=o\n        month=((o-1)%12)+1\n        if d<=31:\n            day=(n-((d-1)%365))+1\n        else:\n            day=n-((d-31)%365)\n        \n        if (m<=12) and (m>=1):\n            if month>=4 and month<=6:\n                if (n>=1900) and (n<=9999):\n                    if (day<=31) and (day>=1):\n                        return 'tampered odometer'\n                    else:\n                        return 'insufficient service'\n                else:\n                    return 'insufficient service'\n            elif month==5 or month==6:\n                return 'insufficient service'\n            else:\n                return 'tampered odometer'\n        else:\n            return 'insufficient service'\n        \n        \n"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(''''\n\"\"\"\nSample Input 1:\n5\n3 4 5\n1 2 3 4 5 6\n1 1\n1\nSample Output 1:\n3\n\nSample Input 2:\n2\n2 2 2 2\n2 1\n1\nSample Output 2:\n2\n\nSample Input 3:\n1\n1\n1\n2\nSample Output 3:\n2\n\nSample Input 4:\n2\n2 1\n1\n0\nSample Output 4:\n0\n\nSample Input 5:\n3\n1 3 1\n1 2\n3\nSample Output 5:\n3\n\nSample Input 6:\n5\n1 2 3 4 5 6\n2 3 4 5 6\n1 2 3 4 5\n2 1\n1\nSample Output 6:\n2\n\nSample Input 7:\n3\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\nSample Output 7:\n2\n\nSample Input 8:\n1\n1\n2\n2\nSample Output 8:\n1\n\nSample Input 9:\n1\n0\n2\n2\nSample Output 9:\n1\n\nSample Input 10:\n6\n1 2 3 4 5 6\n1 2 3 4 5\n2 4\n2 4 2 3\n2 1\n1\nSample Output 10:\n3\n\nNote: Your solution does not need to handle edge case where no edges are present.\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6') == '1 3 5'\nassert solution('1 2 3 3 4 6') == '1 3 4'\nassert solution('1 3 4 2 5') == '1 3 2'\nassert solution('1 2 3') == '1 2'\nassert solution('1 3 4 2') == '1 3 2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 2 3 4\") == \"1 2 3\"\nassert solution(\n    \"1 1 2 4\") == \"1 1 2\"\nassert solution(\n    \"1 0 1 4\") == \"1 0 1\"\nassert solution(\n    \"0 2 3 0 0 0 1 0 1 0 1\") == \"1\"\nassert solution(\n    \"0 1 1 0 0 0 0 0 0 0 0 0 0 0 1\") == \"1\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n        \"5 1 2 3 4 3 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5001'\n\nassert solution(stdin) == '2000'\n\nassert solution(stdin) == '4000'\n\nassert solution(stdin) == '60000'\n"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 'BLUE') == 'IMPOSSIBLE'\nassert solution(3, 'RED') == 'IMPOSSIBLE'\nassert solution(3, 'WHITE') == 'IMPOSSIBLE'\nassert solution(3, 'GREEN') == 'IMPOSSIBLE'\nassert solution(3, 'BLUE') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5, \"Correct answer:\"\n\n\nimport collections\nclass Solution:\n    def paint_fence(self, canvas: str, x, y, z) -> int:\n        offers = collections.Counter()\n        for i in range(1, x):\n            for j in range(y, y + i):\n                for k in range(z, z + i):\n                    if canvas[i][j] == '1':\n                        if (i, j, k) not in offers:\n                            offers[(i, j, k)] = 1\n                        else:\n                            offers[(i, j, k)] += 1\n        return sum(list(offers.values()))"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 2, \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"AAAABBBBCCCCDDDEEEFFFFGGGGG\") == \"EEEEEE\"\nassert solution(\"ABAB\") == \"ABA\"\nassert solution(\"ABAB\") == \"B\"\nassert solution(\"ABAB\") == \"ABA\"\nassert solution(\"ABAB\") == \"ABA\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\nstdin: str) == \"5\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '4'\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['D'] * 200) == 'DOODOO'\nassert solution(['A'] * 200) == 'ABABA'\nassert solution(['G'] * 200) == 'GGG'\nassert solution(['A'] * 200) == 'AAGG'\nassert solution(['G'] * 200) == 'GGG'\n"
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 6\n\"\"\"\n\n\nclass Solution:\n    def solve(self, a: str) -> str:\n        if len(a) > 200:\n            return \"\"\n        weights = [0]*len(a)\n\n        for i in range(len(a)-1):\n            left, right = 0, 0\n            while left < len(a[i]):\n                while right < len(a[i+1]):\n                    weights[left+right] += 1\n                    left += 1\n                    right += 1\n                left += 1\n            left = 0\n            while left < len(a[i+1]):\n                weights[left+right] -= 1\n                left += 1\n                right += 1\n        return ''.join([str(i) for i in weights])\n"
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '1'\nassert solution(stdin) == '5'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"DOODOO\"\n) == 7\nassert solution(\n    \"POPPOP\"\n) == 4\nassert solution(\n    \"BBAABB\"\n) == 2\nassert solution(\n    \"POPPOPPOP\"\n) == 3\nassert solution(\n    \"POPPOPPOPPOPP\"\n) == 2\n"
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input().split()) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n\n-----Other Solutions-----\nSample Input:\nD 1\nD 2\nE\nSample Output:\n1\n\nSample Input:\nI 1 X\nSample Output:\n0\n\"\"\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\nD 1\nD 2\nE\nD 1\nE\nD 1\nD 2\nE\nD 1\nD 2\nE\nD 1\nD 1\nD 2\nD 1\nD 2\nD 1\nD 2\nE\nD 1\nD 2\nE\nD 1\nD 1\nD 2\nE\nD 1\nD 1\nD 2\nD 1\nD 1\nD 1\nD 1\nD 1\nD 2\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 2\nD 1\nD 1\nD 1\nD 2\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 2\nD 1\nD 1\nD 2\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 2\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD 1\nD"
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('X') == 'X'\nassert solution('B') == 'B'\nassert solution('A') == 'A'\n"
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test_case) == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2300'\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 0 0 0\") == \"1900\"\nassert solution(\"1 0 0 0 0 0\") == \"2300\"\nassert solution(\"2 0 0 0 0 0\") == \"3000\"\nassert solution(\"3 0 0 0 0 0\") == \"6\"\nassert solution(\"4 0 0 0 0 0\") == \"1\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == 400\n\"\"\""
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 0 1 0 0 0') == '3', 'Expected 3 but got {}'.format(solution('5 0 1 0 0 0'))\nassert solution('5 0 1 0 1 0') == '3', 'Expected 3 but got {}'.format(solution('5 0 1 0 1 0'))\nassert solution('5 0 1 0 1 0') == '3', 'Expected 3 but got {}'.format(solution('5 0 1 0 1 0'))\nassert solution('10 399 0 0 0 0') == '3', 'Expected 3 but got {}'.format(solution('10 399 0 0 0 0'))\nassert solution('10 399 0 0 0 0') == '0', 'Expected 0 but got {}'.format(solution('10 399 0 0 0 0'))\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"100\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test_cases[int(input())]) == test_cases[int(input())]"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"300\"\nassert solution(stdin) == \"2300\"\nassert solution(stdin) == \"3000\"\nassert solution(stdin) == \"500000\"\nassert solution(stdin) == \"1000000000\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"399\"\nassert solution(\"5\") == \"2300\"\nassert solution(\"6\") == \"2300\"\nassert solution(\"2\") == \"3000\"\nassert solution(\"4\") == \"300\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 0 1 0 0\") == 300\nassert solution(\"5 0 1 0 1 0\") == 1900\nassert solution(\"6 0 1 1 0 0\") == 2300\nassert solution(\"10 399 0 0 0 0\") == 399\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"3000\"\nassert solution(\"5\") == \"500\"\nassert solution(\"6\") == \"400\"\nassert solution(\"7\") == \"300\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"1\", \"1\", \"1\"]) == 2\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\"]) == 2\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == 2\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == 2\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"0 0\") == 1\nassert solution(\"0 0 0\") == 2\nassert solution(\"0 0 1\") == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2, 'output is not right'\n"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '28'\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 10 3') == '28'\nassert solution('2 5 2') == '6'\nassert solution('1 1 1') == '0'\nassert solution('5 5 5') == '1.9311940567'\nassert solution('5 4 4') == '8.87673317'\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 28\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 28\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n  stdin: str\n) == 12, f\"solution({stdin}) should return 12, got {solution(stdin)} instead\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 32\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 28\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 27\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 28\nassert solution(input()) == 12\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 28\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '-1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == -1"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1 5\") == 3\n\nassert solution(\"3 4 1\") == 0\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"Hello\") == \"1\"\nassert solution(\"H\") == \"1\"\nassert solution(\"hello\") == \"1\"\nassert solution(\"Hello world\") == \"2\"\nassert solution(\"Hoooooon\") == \"2\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '0'\nassert solution(inp) == '-1'\nassert solution(inp) == '-2'\nassert solution(inp) == '-3'\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('', '-1', -1, -1, -1, -1) == -1\nassert solution('', '-1', -1, -1, -1, -1) == -1\nassert solution('', '-1', -1, -1, -1, -1) == -1\nassert solution('', '-1', -1, -1, -1, -1) == -1\nassert solution('', '-1', -1, -1, -1, -1) == -1\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 1\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 9\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == int(stdin)\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"123\") == \"10\"\nassert solution(\"1111\") == \"10\"\nassert solution
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(10) == 10, \"solution failed\"\nassert solution(55) == -1, \"solution failed\"\nassert solution(101) == 10, \"solution failed\"\nassert solution(1234321) == -1, \"solution failed\""
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), 'The input is invalid'\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\n\nassert solution(stdin) == 55\n\nassert solution(stdin) == 55\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == -1\nassert solution(4) == -1\nassert solution(15) == -1\nassert solution(12321) == -1\nassert solution(12322111) == -1\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(12) == 1\nassert solution(555) == 1\nassert solution(101) == -1\nassert solution(1234321) == 9\nassert solution(1232321) == -1\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(10) == 10\nassert solution(55) == 55\nassert solution(101) == -1\nassert solution(1234321) == 94708\nassert solution(\"123\") == -1\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 10\nassert solution(input()) == -1\nassert solution(input()) == -1\nassert solution(input()) == 10\nassert solution(input()) == 10\n"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4 0 0 0 4') == '0'\nassert solution('1 2 0 0 5') == '5'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '6'"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('a11a11') == '0'\nassert solution('a12a12') == '0'\nassert solution('a21a21') == '0'\nassert solution('a22a22') == '0'\nassert solution('a12a22a') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 2\", \"2 3\", \"3 4\"]) == \"0\"\nassert solution([\"1 0\", \"2 0\"]) == \"1\"\nassert solution([\"1 0\", \"0 0\"]) == \"1\"\nassert solution([\"1 0\", \"0 1\"]) == \"1\"\nassert solution([\"1 1\", \"2 0\"]) == \"2\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\n"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 10\nassert solution(stdin) == 7\nassert solution(stdin) == 5\nassert solution(stdin) == 6\n"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 4') == '2'"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 2 0 0 4\\n1 2 0 0 6\\n1 2 0 0 4\\n1 2 0 0 6\\n1 2 0 0 4\\n1 2 0 0 4\\n\") == \"3\"\nassert solution(\n    \"1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n\") == \"2\"\nassert solution(\n    \"1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n1 2 0 0 4\\n"
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1.26167861 3.88425357', '1: stdin incorrect'\nassert solution(stdin) == '9.21068947 2.56226688', '2: stdin incorrect'\nassert solution(stdin) == '6.22375968 -0.31921472', '3: stdin incorrect'\n"
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('0.5 -8 8') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3.88425357\"\nassert solution(stdin) == \"9.21068947\"\nassert solution(stdin) == \"6.22375968\"\nassert solution(stdin) == \"0.31921472\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\n    \"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\n    \"1 8 8\") == \"6.22375968 -0.31921472\""
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-4.36385220 9.46891588', \"stdin = '{}'\".format(stdin)\n"
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9.21068947 2.56226688\"\nassert solution(stdin) == \"6.22375968 -0.31921472\"\nassert solution(stdin) == \"2.59276367 3.93316243\"\nassert solution(stdin) == \"2.59276367 3.93316243\"\nassert solution(stdin) == \"3.93916256 -2.33391656\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"0.5\", \"3.098\", \"8\", \"8\", \"8\", \"8\", \"-0.5\", \"1\", \"3.08\", \"-4.36\", \"8.06\"]) == \"7.27361377\"\nassert solution([\"0.5\", \"8\", \"8\", \"8\", \"8\", \"-0.5\", \"1\", \"3.08\", \"9.6\", \"0\", \"0\", \"-3.17\", \"8.31\", \"-5.934\", \"-1.1\"]) == \"9.27058902\"\nassert solution([\"1\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"-1.1\", \"-1.1\", \"-1.1\", \"1\", \"3.08\", \"0\", \"0\", \"-3.17\", \"8.31\", \"-5.934\", \"-1.1\"]) == \"1.12559636\"\nassert solution([\"-1.1\", \"-1.1\", \"-1.1\", \"-1.1\", \"-1.1\", \"-1.1\", \"-1.1\", \"-1.1\", \"1\", \"3.08\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"-3.17\", \"8.31\", \"-5.934\", \"-1.1\"]) == \"2.73747142\"\n\nSample Input 5:\n-0.5 1.1\nSample Output 5:\n-0.5 2.1\n\nSample Input 6:\n0.5 0.5\nSample Output 6:\n0.5 0.5\n\nSample Input 7:\n-5 3.9\nSample Output 7:\n-1.5 2.5\n\nSample Input 8:\n-4 0.6\nSample Output 8:\n-3.6 3.6\n\"\"\""
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == (9.21068947, -0.31921472)\n\"\"\"\n\nimport math\nimport unittest"
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"9.21068947 2.56226688\", \"Expected '9.21068947 2.56226688' but got '{}'\".format(solution(stdin))\n"
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"9.21068947 2.56226688\""
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(in_str) == '2'\nassert solution(in_str) == '2'\nassert solution(in_str) == '3'\nassert solution(in_str) == '3'\nassert solution(in_str) == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '1'\n\n\nimport collections\n"
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\n\"\"\""
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3\\n'\n\n-1\\n'\n\n) == '1'"
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution()) == '0'\nassert solution(solution('Expected Output: 1')) == '0'\nassert solution(solution('Expected Output: 1\\n0')) == '1'\nassert solution(solution('Expected Output: 2\\n0')) == '1\\n1'\nassert solution(solution('Expected Output: 2\\n0\\n0')) == '1\\n1\\n0'\n"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 3 1 2') == '2'\nassert solution('1 1 1') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\", \"5\", \"0\", \"0\", \"0\"]) == \"11\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"infinity\"\nassert solution([\"2\", \"1\", \"2\", \"2\", \"2\"]) == \"infinity\"\nassert solution([\"3\", \"3\", \"3\", \"3\", \"2\"]) == \"infinity\"\nassert solution([\"1\", \"2\", \"2\", \"0\", \"0\"]) == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"infinity\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"infinity\"\nassert solution(stdin) == \"infinity\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"infinity\""
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin: str\n    ) == \"infinity\""
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1 0 1\") == \"1 1\"\nassert solution(\"2 3 1\") == \"infinity\""
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 3 5 1') == '6'\nassert solution('3 2 2') == '1'\nassert solution('3 3 3 3') == '3'\nassert solution('3 3 3 3') == '3'\nassert solution('3 3 3 3') == '3'\n"
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12, 'Answer is wrong.'"
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, [\"3 1 2 3\", \"1 1\", \"2 2 3\", \"2 3 4\", \"3 3 4\"]) == \"12\"\nassert solution(3, [\"3 1 2 3\", \"1 1\", \"2 2 3\", \"2 3 4\", \"3 4\"]) == \"0\"\nassert solution(3, [\"3 2 2 3\", \"1 1\", \"2 2 3\", \"2 3 4\", \"3 4\"]) == \"18\"\nassert solution(3, [\"3 2 2 3\", \"1 1\", \"2 2 3\", \"2 3 4\", \"3 4\"]) == \"1\"\nassert solution(3, [\"3 1 2 3\", \"1 1\", \"2 2 3\", \"2 3 4\", \"3 4\"]) == \"1\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 1\") == \"6\"\nassert solution(\"2 3 4\") == \"0\"\nassert solution(\"3 3 1 1 2 2\") == \"12\"\nassert solution(\"2 3 4 3 4\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '12'\n\nstdin = \"3 3 1 1\"\nassert solution(stdin) == '18'\n\nstdin = \"0 3 0 3 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '0'\nassert solution(2) == '0'\nassert solution(3) == '0'\nassert solution(4) == '0'\n"
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\n\"\"\""
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 1 2 3\") == \"0\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2') == '49401'\nassert solution('5') == '50'\nassert solution('16') == '16'\nassert solution('9') == '9'\nassert solution('10101100') == '9'\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 10\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1000000\", \"1000000\"]) == \"49401\"\nassert solution([\"10\", \"0\"]) == \"49401\"\nassert solution([\"9\", \"7\", \"3\", \"2\", \"2\"]) == \"1\"\nassert solution([\"1\", \"0\", \"0\"]) == \"1\"\nassert solution([\"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"49401\"\nassert solution(input()) == \"20\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1000000\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('10') == '4'\nassert solution('1023') == '1'\nassert solution('1234567890123456789012345678901234567890') == '2'\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"24\"\nassert solution(input()) == \"23\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\u201c1000000\u201d) == 468559\nassert solution(\u201c1000000\u201d) == 49401\nassert solution(\u201c1000000\u201d) == 20\nassert solution(\u201c1000000\u201d) == 49401\nassert solution(\u201c1000000\u201d) == 20\n"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1000000\") == 468559\nassert solution(\"1000000 5\") == 49401\nassert solution(\"1000000 16\") == 20\n\"\"\""
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '49401'\nassert solution(stdin) == '20'\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6') == '12'\nassert solution('1 6') == '6'\nassert solution('2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6') == '1'\nassert solution('2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('abcde') == '1'\nassert solution('xyz') == '3'\nassert solution('ababa') == '2'\nassert solution('abc') == '2'\nassert solution('aabbc') == '3'\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 12\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 9 1\") == \"1\"\nassert solution(\"4 13 1\") == \"3\"\nassert solution(\"18 90 1\") == \"3\"\nassert solution(\"1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\") == \"1\"\nassert solution(\"1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\") == \"3\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == solution(out)\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 3 1 4 3 4 1\") == \"1\"\nassert solution(\"2 2 2 2 2\") == \"3\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"3 2 3 3 1\") == \"3\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 9') == '3'\nassert solution('5 4 1') == '5'\nassert solution('18 90') == '1'\nassert solution('2 2 2 2') == '1'\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"12\"\nassert solution(input()) == \"13\"\nassert solution(input()) == \"21\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"21\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 6 8\") == \"5\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"0\""
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\") == \"10\"\nassert solution(\"2\\n5 7 8\") == \"4\"\nassert solution(\"3\\n1 2 3 4 5\") == \"3\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\")(())()()(())()()(())()())\" == \"0\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(5)\n"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\nprint(f\"solution({stdin}) == 3\")\n\nfor t in range(int(input())):\n    lst = list(map(int, input().split()))\n    n = lst.pop(0)\n    print(f\"{n} {solution(lst)}\")"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"incorrect output\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2 3 4\") == \"0\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 2 2\") == \"2\"\nassert solution(\"2 2 2 2 2\") == \"2\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11112\"\nassert solution(stdin) == \"11112\"\nassert solution(stdin) == \"11112\"\nassert solution(stdin) == \"11112\"\nassert solution(stdin) == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"), \"Function can not be empty\"\n\n\n'''\n"
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\nassert solution(\"1234\") == \"11\"\nassert solution(\"1234567890\") == \"-1\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 11112\n"
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"11112\"\nassert solution(stdin
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"123476544\") == \"11112\""
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\"), \"2\"\nassert solution(\"1\"), \"1\"\nassert solution(\"11\"), \"11\"\nassert solution(\"999\"), \"999\"\nassert solution(\"100\"), \"100\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1231234') == 4\nassert solution('111234') == 17\nassert solution('123456789') == 1\nassert solution('22222222222') == -1\n"
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 11112\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'AMBIGUOUS'\nassert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'AMBIGUOUS'\nassert solution(stdin) == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"AMBIGUOUS\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'AMBIGUOUS'\nassert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'AMBIGUOUS'\nassert solution(stdin) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"d 4\") == \"adcb\"\nassert solution(\"c 4\") == \"defccc\"\nassert solution(\"c 4\") == \"cabc\"\nassert solution(\"d 4\") == \"defcb\"\nassert solution(\"d 4\") == \"ADCB\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"def\"\nassert solution(\"acb\") == \"fec\"\nassert solution(\"abd\") == \"aee\"\nassert solution(\"aca\") == \"cba\"\nassert solution(\"cba\") == \"caa\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"d\",\"b\",\"c\",\"c\",\"d\"]) == \"adcb\"\nassert solution([\"c\",\"d\",\"c\",\"c\",\"b\"]) == \"IMPOSSIBLE\"\nassert solution([\"c\",\"d\",\"c\",\"c\",\"d\",\"c\",\"d\",\"c\",\"d\"]) == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'ADCB'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\nassert solution(stdin) == \"AMBIGUOUS\"\nassert solution(stdin) == \"IMPOSSIBLE\"\nassert solution(stdin) == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'ADCB'\nassert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'AMBIGUOUS'\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"164\""
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"8 0 0 0\") == \"1\"\nassert solution(\"5 2 2 0\") == \"0\"\nassert solution(\"2 3 2\") == \"0\"\nassert solution(\"1 3 4\") == \"0\"\nassert solution(\"4 1 2 3\") == \"0\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('10 20 0 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,1) == 1\nassert solution(2,2) == 2\nassert solution(3,2) == 3\nassert solution(4,3) == 4\nassert solution(5,2) == 5\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"The function is not implemented\""
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"No solution exists.\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3 3 3\") == 9\nassert solution(\n    \"10 20 0 0\") == 10\nassert solution(\n    \"100 20 543 12\") == 164\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution(\"2 3 3 3\")) == 9\nassert solution(solution(\"2 3 3 3\")) == 10\nassert solution(solution(\"2 3 3 3\")) == 164\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\n\nassert solution(stdin) == \"no\"\n\nSample Input 4:\n6 5\n1 2\n4 3\n0 1\n1 2\n1 5\n1 5\n4 2\nSample Output 4:\nno\n\nSample Input 5:\n10\n1 2\n3 2\n4 3\n5 4\n6 4\n7 4\n8 4\n9 4\n10 5\nSample Output 5:\nno\n\nNote:\nSample Input refers to stdin which is a console containing a single line of input containing a single integer n, m, and r.\nSample Output refers to stdout which is a single line of printable output containing the solutions to the input.\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input()\n) == 'yes'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'yes'"
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('0 1 0') == 'no', \"No\"\nassert solution('0 -1 0') == 'yes', \"Yes\"\nassert solution('2 -1 0') == 'yes', \"Yes\"\nassert solution('2 1 -2') == 'yes', \"Yes\"\nassert solution('0 -1 -2') == 'yes', \"Yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\\n 0 1\\n-1 0\\n0 -1\") == \"yes\"\nassert solution(\"1 2 3\\n 0 1\\n-1 0\\n0 -1\") == \"no\"\nassert solution(\"1 2 3\\n 0 1\\n-1 0\\n 0 -1\") == \"no\"\nassert solution(\"1 2 3\\n 0 1\\n-1 0\\n 0 -1\") == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\""
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'yes'"
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n"
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'yes'\nassert solution(stdin) == 'no'\n"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == '1'\nassert solution(12121131221) == '7'\n"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"652526\"\"\") == \"4\"\nassert solution(\"\"\"12121131221\"\"\") == \"7\"\nassert solution(\"\"\"123456789\"\"\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"17\"\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '7'\n'''\n"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"aabab\") == \"abcba\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"aabb\") == \"bbaa\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"not all substring of string is palindrome\"\n\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '20000'\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '800'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('Sample Input') == '800'"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"3\", \"1\", \"2\", \"3\", \"1\", \"1\", \"1\", \"2\", \"2\", \"1\", \"1\", \"2\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"6\", \"6\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"3\", \"1\", \"2\", \"3\", \"1\", \"1\", \"1\", \"2\", \"2\", \"1\", \"1\", \"2\", \"3\", \"1\", \"1\", \"2\", \"3\", \"1\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"6\", \"6\", \"6\"]) == \"0\"\nassert solution([\"3\", \"1\", \"1\", \"2\", \"2\", \"3\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"4\", \"5\", \"5\", \"6\", \"6\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"3\", \"1\", \"2\", \"3\", \"1\", \"1\", \"1\", \"2\", \"2\", \"1\", \"1\", \"2\", \"3\", \"1\", \"1\", \"2\", \"3\", \"1\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\", \"6\", \"6\", \"6\"]) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"900\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 3) == 0\nassert solution(1, 3) == 0\nassert solution(2, 3) == 0\nassert solution(6, 4) == 0\nassert solution(7, 4) == 0\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input().split()) == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 824\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '800'\nassert solution(inp) == '0'"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 4\"\nassert solution(\"1 2 3 4 5\") == \"1 3\"\nassert solution(\"1 2 3 4 5\") == \"1 4\"\nassert solution(\"1 2 3 4 5\") == \"-1\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1 4\"\nassert solution(\"5\") == \"-1\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin=\n    \"5\\n3 2 4\\n2 1 4 3\\n4 1 2 3\\n3 4 4 5\\n5 5 5 5\\n\"\n) == \"1 4 2 3\""
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3 2 4\") == \"1 4\"\nassert solution(\"2 1 4 3\") == \"1 2 3 4\"\nassert solution(\"1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1 3 2 4\") == \"1 2 3 4\"\nassert solution(\"2 1 4 3\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5,\n    [\n        \"1 2 3 4 5\",\n        \"4 1 2 3 4 5\",\n        \"1 3 2 4 5\"\n    ]) == [\"1 4\", \"1 2\", \"2 3\", \"2 4\", \"3 4\", \"4 5\"]\n\"\"\"\n\nimport math\n\nn = int(input())\n\na = list(map(int, input().split()))\n\ncheck = [0]*n\n\nfor i in range(n):\n    check[i] = 1\n\nfor i in range(n-1):\n    if check[i] == 1:\n        for j in range(i+1,n):\n            check[j] = 0\n            if check[j] == 0:\n                break\n\nfor i in range(n-1):\n    for j in range(i+1,n):\n        if check[j] == 0:\n            check[j] = 1\n            break\n\nprint(check.index(0))\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"1\", \"2\", \"4\", \"5\"]\nassert solution([\"2\", \"1\", \"3\", \"5\"]) == [\"1\", \"2\", \"3\", \"5\"]\nassert solution([\"1\", \"2\", \"4\"]) == [\"1\", \"2\", \"4\"]\nassert solution([\"1\", \"2\", \"4\", \"5\"]) == [\"1\", \"2\", \"4\", \"5\"]\nassert solution([\"1\", \"2\", \"4\", \"5\", \"6\", \"7\"]) == [\"1\", \"2\", \"4\", \"5\", \"6\", \"7\"]\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin),'should return a string'\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == -1\nassert solution(1) == -1\nassert solution(2) == -1\nassert solution(3) == -1\nassert solution(4) == -1\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \n    \n\n) == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"no solution\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('#.#.##.#') == 5\nassert solution('#.#####') == 5\nassert solution('#.##.#..') == 1\nassert solution('#####..#') == 0\nassert solution('....#..#') == 0\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"4\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 3\"\n) == \"8\"\nassert solution(\n    \"2 6\"\n) == \"1\"\nassert solution(\n    \"4 7\"\n) == \"1\"\nassert solution(\n    \"4 6\"\n) == \"2\"\nassert solution(\n    \"3 2\"\n) == \"3\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('..#..#..') == '5'\nassert solution('....#..') == '5'\nassert solution('###...#') == '5'\nassert solution('#.##.##.') == '5'\nassert solution('#..#...') == '5'\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"19\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 4 3 1') == '5 1 3'\nassert solution('3 3 3 2') == '5 2 6'\nassert solution('2 1 1 1 2') == '1 1 1 2'\nassert solution('5 3 4 3') == '3 2 3'\nassert solution('5 4 3 4 3') == '3 4 5'\n"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(in_out_dic) == '4 5 5'\nassert solution(in_out_dic) == '3 3 3'\nassert solution(in_out_dic) == '4 4 4'\nassert solution(in_out_dic) == '4 3 3'\nassert solution(in_out_dic) == '4 2 6 1 9 7 5 5 7 1 2 3 3'\n"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4, 5, 5, 2, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3) == 6\nassert solution(3, 5, 5, 2, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3) == 19\nassert solution(3, 5, 5, 2, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3) == 13\n"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '9'\n'''\n\nclass Solution:\n    def solve(self, board):\n        pass"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 4 1 2 3 4\") == \"7\"\nassert solution(\n    \"4 5 5\") == \"8\"\nassert solution(\n    \"4 3 3\") == \"4\"\nassert solution(\n    \"4 3 3 4\") == \"3\"\nassert solution(\n    \"4 3 4 4\") == \"4\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1, \"The solution should be failed\"\nassert solution(stdin) == 6, \"The solution should be failed\"\nassert solution(stdin) == 4, \"The solution should be failed\"\nassert solution(stdin) == 19, \"The solution should be failed\"\nassert solution(stdin) == 13, \"The solution should be failed\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 3, 2, 5, 3, 5, 5, 4, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\n'''"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3 2\""
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 2\""
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n)\nassert solution(\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"4\\n\"\n    \"5\\n\"\n    \"6\\n\"\n    \"7\\n\"\n    \"8\\n\"\n    \"9\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"0\\n\"\n)\n"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input()) == \"1 5\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['3', '3', '3', '3', '1', '1', '2', '1', '1', '1', '1', '1', '1']) == '1 5'"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"5 2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"5 2\"\nassert solution(\"4\") == \"3 4\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\""
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"6 3 0\"\n    ), \"5\"\nassert solution(\n    \"6 4 2\"\n    ), \"5\"\nassert solution(\n    \"6 5 2\"\n    ), \"7\"\nassert solution(\n    \"6 7 1\"\n    ), \"8\"\nassert solution(\n    \"6 1 4\"\n    ), \"2\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\n    [\"3\",\"0\",\"1\",\"0\",\"3\",\"0\"],\n    [\"0\",\"0\",\"3\",\"3\",\"1\",\"0\"],\n    [\"3\",\"0\",\"3\",\"1\",\"0\",\"1\"],\n    [\"0\",\"1\",\"0\",\"1\",\"0\",\"0\"],\n    [\"1\",\"0\",\"0\",\"0\",\"0\",\"1\"]\n    ]\n) == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    inp: str\n    ) == \"5\"\n'''\n"
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_input) == \"4\""
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"5\"\nprint('solution() has been called.')"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin.readline()) == '4'\n"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"5\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"7\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '0'\n\"\"\""
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nprint(\"solution test passed!\")\n"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\\n3 1\\n3 1\\n4 3\\n4 4\\n5 5\\n6 7\\n7 8\\n8 5\\n9 6\\n9 7\\n10 8\\n11 5\\n12 6\\n13 7\\n14 8\\n15 5\\n16 6\\n17 7\\n18 8\\n19 5\\n20 6\\n21 7\\n22 8\\n23 5\\n24 6\\n25 7\\n26 8\\n27 5\\n28 6\\n29 7\\n30 8\\n31 5\\n32 6\\n33 7\\n34 8\\n35 5\\n36 6\\n37 7\\n38 8\\n39 5\\n40 6\\n41 7\\n42 8\\n43 5\\n44 6\\n45 7\\n46 8\\n47 5\\n48 6\\n49 7\\n50 8\\n51 5\\n52 6\\n53 7\\n54 8\\n55 5\\n56 6\\n57 7\\n58 8\\n59 5\\n60 6\\n61 7\\n62 8\\n63 5\\n64 6\\n65 7\\n66 8\\n67 5\\n68 6\\n69 7\\n70 8\\n71 5\\n72 6\\n73 7\\n74 8\\n75 5\\n76 6\\n77 7\\n78 8\\n79 5\\n80 6\\n81 7\\n82 8\\n83 5\\n84 6\\n85 7\\n86 8\\n87 5\\n88 6\\n89 7\\n90 8\\n91 5\\n92 6\\n93 7\\n94 8\\n95 5\\n96 6\\n97 7\\n98 8\\n99 5\\n100 6\\n101 7\\n102 8\\n103 5\\n104 6\\n105 7\\n106 8\\n107 5\\n108 6\\n109 7\\n110 8\\n111 5\\n112 6\\n113 7\\n114 8\\n115 5\\n116 6\\n117 7\\n118 8\\n119 5\\n120 6\\n121 7\\n122 8\\n123 5\\n124 6\\n125 7\\n126 8\\n127 5\\n128 6\\n129 7\\n130 8\\n131 5\\n132 6\\n133 7\\n134 8\\n135 5\\n136 6\\n137 7\\n138 8\\n139 5\\n140 6\\n141 7\\n142 8\\n143 5\\n144 6\\n145 7\\n146 8\\n147 5\\n148 6\\n149 7\\n150 8\\n151 5\\n152 6\\n153 7\\n154 8\\n155 5\\n156 6\\n157 7\\n158 8\\n159 5\\n160 6\\n161 7\\n162 8\\n163 5\\n164 6\\n165 7\\n166 8\\n167 5\\n168 6\\n169 7\\n170 8\\n171 5\\n172 6\\n173 7\\n174 8\\n175 5\\n176 6\\n177 7\\n178 8\\n179 5\\n180 6\\n181 7\\n182 8\\n183 5\\n184 6\\n185 7\\n186 8\\n187 5\\n188 6\\n189 7\\n190 8\\n191 5\\n192 6\\n193 7\\n194 8\\n195 5\\n196 6\\n197 7\\n198 8\\n199 5\\n200 6\\n201 7\\n202 8\\n203 5\\n204 6\\n205 7\\n206 8\\n207 5\\n208 6\\n209 7\\n210 8\\n211 5\\n212 6\\n213 7\\n214 8\\n215 5\\n216 6\\n217 7\\n218 8\\n219 5\\n220 6\\n221 7\\n222 8\\n223 5\\n224 6\\n225 7\\n226 8\\n227 5\\n228 6\\n229 7\\n230 8\\n231 5\\n232 6\\n233 7\\n234 8\\n235 5\\n236 6\\n237 7\\n238 8\\n239 5\\n240 6\\n241 7\\n242 8\\n243 5\\n244 6\\n245 7\\n246 8\\n247 5\\n248 6\\n249 7\\n250 8\\n251 5\\n252 6\\n253 7\\n254 8\\n255 5\\n256 6\\n257 7\\n258 8\\n259 5\\n260 6\\n261 7\\n262 8\\n263 5\\n264 6\\n265 7\\n266 8\\n267 5\\n268 6\\n269 7\\n270 8\\n271 5\\n272 6\\n273 7\\n274 8\\n275 5\\n276 6\\n277 7\\n278 8\\n279 5\\n280 6\\n281 7\\n282 8\\n283 5\\n284 6\\n285 7\\n286 8\\n287 5\\n288 6\\n289 7\\n290 8\\n291 5\\n292 6\\n293 7\\n294 8\\n295 5\\n296 6\\n297 7\\n298 8\\n299 5\\n300 6\\n301 7\\n302 8\\n303 5\\n304 6\\n305 7\\n306 8\\n307 5\\n308 6\\n309 7\\n310 8\\n311 5\\n312 6\\n313 7\\n314 8\\n315 5\\n316 6\\n317 7\\n318 8\\n319 5\\n320 6\\n321 7\\n322 8\\n323 5\\n324 6\\n325"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"30\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"R10 V1 V1 V1 V2\") == \"5\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"30\""
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5'"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"5\", \"4\", \"5\", \"1\"]) == \"5\"\nassert solution([\"1\", \"2\", \"5\", \"4\", \"5\", \"1\", \"0\"]) == \"5\"\nassert solution([\"1\", \"2\", \"5\", \"4\", \"5\", \"1\", \"0\", \"0\"]) == \"6\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input()\n) == '30'\n'''\n"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"R10 V1 V1 V1 V2\") == \"10\"\nassert solution(\"R10 V1 V1 V2 E\") == \"30\"\nassert solution(\"R10 V1 V1 V2\") == \"10\"\nassert solution(\"R10 V1 V1 V2\") == \"10\"\nassert solution(\"R10 V1 V1 V2 E\") == \"10\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(int(stdin)) == str(int(stdin)**2)\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(list(map(int, stdin.split()))) == str(int(stdin))\n\"\"\"\n\nclass Solution:\n    def base_to_num(self, base: str) -> int:\n        dic = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n        ans = 0\n        for i in base:\n            ans = (ans * 10) + dic[i]\n        return ans\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'impossible'\nassert solution(stdin) == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 23\"), \"impossible\"\nassert solution(\"10 23\"), \"0\"\nassert solution(\"10 20\"), \"1\"\nassert solution(\"10 000\"), \"impossible\"\nassert solution(\"10 000\"), \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'impossible'\n\nInput 1:\n23\nSample Output 1:\n'impossible'\n\nInput 2:\n8\nSample Output 2:\n'23'\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a=10, b=24) == 11, 'incorrect'\nassert solution(a=0, b=10) == 23, 'incorrect'\nassert solution(a=12, b=10) == 18, 'incorrect'\nassert solution(a=2, b=3) == 3, 'incorrect'\nassert solution(a=33, b=3) == 9, 'incorrect'\n"
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'impossible'\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"466.662\"\nassert solution(stdin) == \"10.00005\"\nassert solution(stdin) == \"4.25\"\nassert solution(stdin) == \"2.333333\"\nassert solution(stdin) == \"1.666666\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"466.662\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 2 1\") == \"466.662\"\nassert solution(\"1 3 0.25 8\") == \"10.00005\"\nassert solution(\"2 4 0.66667 15\") == \"2.0\"\nassert solution(\"1 2\") == \"1.000000\"\nassert solution(\"0 10\") == \"2.000000\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3.00000'\nassert solution(stdin) == '7.00000'\nassert solution(stdin) == '2.00000'\nassert solution(stdin) == '0.00000'\nassert solution(stdin) == '2.00000'\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == '500'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"20 60 2 1\") == \"466.662\"\nassert solution(\"20 60 2 1.00001\") == \"10.00005\"\nassert solution(\"20 60 2 1.000\") == \"1.000\"\nassert solution(\"20 60 2 1.000.00001\") == \"0.000\"\nassert solution(\"20 60 2 1.000.000\") == \"0.000\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"466.662\"\nassert solution(\"3 4 2 1\") == \"10.00005\"\nassert solution(\"1 3 0.25 8\") == \"5.000004\"\nassert solution(\"2 4 0.66667 15\") == \"2.000005\"\nassert solution(\"0 10\") == \"5.000001\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10.00005'\n\"\"\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '0.66666'\n"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '466.662'\n"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"blue pink 1.0\") == \"1.500000000000000\"\nassert solution(\"red pink 1.0\") == \"0.000000000000000\"\nassert solution(\"blue red 1.0\") == \"10.000000000000000\"\nassert solution(\"orange pink 1.9\") == \"1.000000000000000\"\nassert solution(\"yellow orange 1.9\") == \"1.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1.0') == '1.500000000000000'\nassert solution('2.0') == '10.000000000000000'\nassert solution('3.0') == '10.000000000000000'\nassert solution('4.0') == '10.000000000000000'\nassert solution('5.0') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"blue pink 1.0\"), \"blue pink 1.0 does not have a valid solution\"\nassert solution(\"blue red 1.0\"), \"blue red 1.0 does not have a valid solution\"\nassert solution(\"red pink 1.5\"), \"red pink 1.5 does not have a valid solution\"\nassert solution(\"orange pink 1.9\"), \"orange pink 1.9 does not have a valid solution\"\nassert solution(\"yellow orange 1.9\"), \"yellow orange 1.9 does not have a valid solution\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1.500000000000000\nassert solution(stdin) == 10\nassert solution(stdin) == 10\nassert solution(stdin) == 1.500000000000000\nassert solution(stdin) == 1.000000000000000\n"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"blue\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\"]) == \"10.000000000000000\"\nassert solution([\"blue\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\"]) == \"10.000000000000000\"\nassert solution([\"orange\", \"pink\", \"red\", \"green\", \"blue\", \"yellow\", \"red\"]) == \"10.000000000000000\"\nassert solution([\"blue\", \"pink\", \"red\", \"green\", \"blue\", \"yellow\", \"red\"]) == \"10.000000000000000\"\nassert solution([\"blue\", \"pink\", \"red\", \"green\", \"blue\", \"yellow\", \"red\", \"orange\"]) == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '10.000000000000000'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin),'something is wrong'\n"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    ['blue pink 1.0','red pink 1.5', 'blue red 1.0','red pink 1.5', 'blue red 1.0', 'yellow orange 1.9', 'green yellow 1.9', 'blue green 1.9']) == '10.000000000000000'\nassert solution(\n    ['blue red 1.0','red pink 1.5', 'blue red 1.0', 'yellow orange 1.9', 'green yellow 1.9', 'blue green 1.9']) == '0.000000000000000'\nassert solution(\n    ['blue pink 1.0','red pink 1.0', 'yellow orange 1.9', 'green yellow 1.9', 'blue green 1.9']) == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '10.000000000000000'\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'too many'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 1 2 1 0') == '0', 'wrong answer'\nassert solution('2 3 1 5 3 2') == '14', 'wrong answer'\nassert solution('2 1 2 1 0') == '0', 'wrong answer'\nassert solution('2 1 2 1 0') == '0', 'wrong answer'\nassert solution('2 1 2 1 0') == '0', 'wrong answer'\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 2 1 1 2 1\") == \"too many\"\nassert solution(\"3 2 2 1 1 2 1\") == \"0\"\nassert solution(\"3 2 2 1 1 2 1\") == \"0\"\nassert solution(\"3 1 2 3\") == \"0\"\nassert solution(\"3 1 2 3\") == \"0\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n1 1 2\\n1 1 3\\n1 1 1\") == \"too many\"\nassert solution(\"3 2 2\\n2 3 2\\n2 3 1\\n3 3 4\\n1 6\\n1 1 2\\n1 1 3\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 180, \"Yes\"\nassert solution(1) == \"Too many\", \"No\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 1 1 1 0\") == \"too many\"\nassert solution(\"3 1 2 3\") == \"0\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'too many'\n\nassert solution(input().replace(\"1\",\"2\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\"3\").replace(\"2\",\""
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3 1 1 1 0\", \"2 3 2\", \"1 1\", \"1 2\", \"1 2\", \"1 3\", \"1 1\", \"2 3\", \"2 1\"]) == \"too many\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 1 1 1 0') == 'too many'\nassert solution('2 3 1 5 3 2') == 'too many'\nassert solution('2 1 2') == 'too many'\nassert solution('2 1 2 2') == 'too many'\nassert solution('3 3 4 5') == 'too many'\n"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution(open('example.txt', 'r').read())) == '17'"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 'up', 7, 2, 4, 3, '.') == '20'\nassert solution(4, 'up', 7, 2, 4, 3, '.') == '17'\nassert solution(5, 'up', 7, 2, 4, 3, '.') == '17'\nassert solution(4, 'up', 7, 2, 4, 3, '.') == '-1'\nassert solution(3, 'up', 7, 2, 4, 3, '.') == '-1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 8 5\") == \"20 20\"\nassert solution(\"7 8 5\") == \"17 17\"\nassert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"7 8 5\") == \"17 17\"\nassert solution(\"6 8 5\") == \"18 18\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == -1, \"Test failed\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"10 20\""
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1 or solution(stdin) == -1 or solution(stdin) == -1, 'Your solution should be -1'"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '15 20'\nassert solution(stdin) == '17 17'\n"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '17 17'"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"20 20\"\nassert solution(input().split(\" \")) == \"20 20\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 3 2 4 5') == 'impossible'\nassert solution('1 3 2 4 5') == '50'\nassert solution('10 200 100 200 200 200') == '600'\nassert solution('3 10 100 200 200 200 200') == '900'\nassert solution('1 10 50 40 50 100 100') == '900'\n"
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"300\"\n\nassert solution(stdin) == \"impossible\""
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"371\", \"3\", \"2 40\", \"2 100\", \"2 300\", \"3\", \"2 20\", \"2 35\", \"2 88\", \"2 200\"]) == \"impossible\"\nassert solution([\"311\", \"3\", \"2 40\", \"2 100\", \"2 300\", \"3\", \"2 20\", \"2 35\", \"2 88\", \"2 200\"]) == \"300\"\nassert solution([\"371\", \"3\", \"2 40\", \"2 100\", \"2 300\", \"3\", \"2 20\", \"2 35\", \"2 88\", \"2 200\"]) == \"88\""
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 1 2 3 3 4 3') == '10'\nassert solution('1 2') == '0'\nassert solution('2 4 2') == '5'\nassert solution('1 10 3') == '10'\nassert solution('1 10 3 5 4') == '18'\n"
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"impossible\""
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('24 9\\n30 0\\n15 10\\n2 1\\n3 8\\n10 5\\n20 4\\n5 15\\n9 6\\n7 3\\n8 2\\n7 6\\n10 1\\n11 5\\n1 2\\n12 2\\n1 10\\n12 10\\n12 1\\n15 5\\n15 5\\n2 1\\n3 4\\n10 0\\n5 20\\n8 3\\n9 1\\n10 3\\n10 3\\n10 1\\n4 8\\n5 2\\n10 1\\n10 5\\n1 2\\n8 3\\n8 4\\n8 3\\n8 2\\n7 2\\n7 2\\n8 3\\n8 2\\n7 2\\n7 2\\n7 2\\n8 1\\n8 2\\n8 3\\n3 10\\n10 3\\n10 1\\n10 3\\n5 20\\n5 15\\n8 2\\n8 4\\n7 3\\n10 1\\n10 1\\n3 2\\n5 0\\n9 3\\n10 1\\n10 0\\n5 0\\n4 5\\n10 5\\n10 5\\n3 2\\n10 2\\n4 5\\n10 2\\n7 2\\n7 2\\n7 2\\n3 3\\n5 4\\n10 3\\n3 10\\n10 2\\n10 5\\n5 10\\n7 3\\n10 2\\n10 5\\n10 3\\n1 2\\n10 1\\n10 2\\n10 3\\n8 4\\n4 5\\n10 2\\n10 5\\n10 3\\n5 8\\n10 4\\n10 5\\n7 4\\n8 3\\n9 1\\n10 1\\n10 2\\n3 4\\n10 0\\n10 3\\n3 10\\n10 1\\n10 4\\n5 10\\n10 4\\n9 3\\n10 2\\n10 3\\n10 2\\n10 2\\n3 2\\n3 10\\n10 3\\n9 3\\n3 10\\n10 3\\n3 10\\n10 2\\n8 1\\n8 1\\n8 2\\n8 1\\n7 2\\n10 0\\n5 0\\n10 3\\n8 2\\n8 4\\n8 3\\n9 3\\n10 2\\n10 2\\n10 2\\n8 1\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2\\n8 2"
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 9 10 20\") == \"impossible\"\nassert solution(\"2 4 10 20\") == \"300\"\nassert solution(\"1 3 10 4\") == \"impossible\"\nassert solution(\"1 4 5 6\") == \"impossible\"\nassert solution(\"2 4 5 6\") == \"impossible\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 4') == '3'\n"
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n      input()\n  ), \"Impossible\"\n\nSample Input 4:\n3\n9 30\n2 3 4\n2 4 5\n2 5 6\n2 6 7\n2 7 8\n2 8 9\n2 9 10\n2 10 11\n2 11 12\n2 12 13\n2 13 14\n2 14 15\n2 15 16\n2 16 17\n2 17 18\n2 18 19\n2 19 20\n2 20 21\n2 21 22\n2 22 23\n2 23 24\n2 24 25\n2 25 26\n2 26 27\n2 27 28\n2 28 29\n2 29 30\n2 30 31\n2 31 32\n2 32 33\n2 33 34\n2 34 35\n2 35 36\n2 36 37\n2 37 38\n2 38 39\n2 39 40\n2 40 41\n2 41 42\n2 42 43\n2 43 44\n2 44 45\n2 45 46\n2 46 47\n2 47 48\n2 48 49\n2 49 50\n2 50 51\n2 51 52\n2 52 53\n2 53 54\n2 54 55\n2 55 56\n2 56 57\n2 57 58\n2 58 59\n2 59 60\n2 60 61\n2 61 62\n2 62 63\n2 63 64\n2 64 65\n2 65 66\n2 66 67\n2 67 68\n2 68 69\n2 69 70\n2 70 71\n2 71 72\n2 72 73\n2 73 74\n2 74 75\n2 75 76\n2 76 77\n2 77 78\n2 78 79\n2 79 80\n2 80 81\n2 81 82\n2 82 83\n2 83 84\n2 84 85\n2 85 86\n2 86 87\n2 87 88\n2 88 89\n2 89 90\n2 89 91\n2 89 92\n2 89 93\n2 89 94\n2 89 95\n2 89 96\n2 89 97\n2 89 98\n2 89 99\n2 89 100\n2 89 101\n2 89 102\n2 89 103\n2 89 104\n2 89 105\n2 89 106\n2 89 107\n2 89 108\n2 89 109\n2 89 110\n2 89 111\n2 89 112\n2 89 113\n2 89 114\n2 89 115\n2 89 116\n2 89 117\n2 89 118\n2 89 119\n2 89 120\n2 89 121\n2 89 122\n2 89 123\n2 89 124\n2 89 125\n2 89 126\n2 89 127\n2 89 128\n2 89 129\n2 89 130\n2 89 131\n2 89 132\n2 89 133\n2 89 134\n2 89 135\n2 89 136\n2 89 137\n2 89 138\n2 89 139\n2 89 140\n2 89 141\n2 89 142\n2 89 143\n2 89 144\n2 89 145\n2 89 146\n2 89 147\n2 89 148\n2 89 149\n2 89 150\n2 89 151\n2 89 152\n2 89 153\n2 89 154\n2 89 155\n2 89 156\n2 89 157\n2 89 158\n2 89 159\n2 89 160\n2 89 161\n2 89 162\n2 89 163\n2 89 164\n2 89 165\n2 89 166\n2 89 167\n2 89 168\n2 89 169\n2 89 170\n2 89 171\n2 89 172\n2 89 173\n2 89 174\n2 89 175\n2 89 176\n2 89 177\n2 89 178\n2 89 179\n2 89 180\n2 89 181\n2 89 182\n2 89 183\n2 89 184\n2 89 185\n2 89 186\n2 89 187\n2 89 188\n2 89 189\n2 89 190\n2 89 191\n2 89 192\n2 89 193\n2 89 194\n2 89 195\n2 89 196\n2 89 197\n2 89 198\n2 89 199\n2 89 200\n2 89 201\n2 89 202\n2 89 203\n2 89 204\n2 89 205\n2 89 206\n2 89 207\n2 89 208\n2 89 209\n2 89 210\n2 89 211\n2 89 212\n2 89 213\n2 89 214\n2 89 215\n2 89"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 'cannot fold'"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"..#\") == \"cannot fold\"\nassert solution(\"..#..\") == \"cannot fold\"\nassert solution(\"#..#.##\") == \"cannot fold\"\nassert solution(\"#.#.#\") == \"cannot fold\"\nassert solution(\"###.###.###\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"..##..\\n######\\n##...##\\n######\\n##...##\\n##...##\\n...##...\"), 'cannot fold'\nassert solution(\"..##..\\n######\\n...##...\\n######\\n...##...\\n....##...\"), 'cannot fold'\nassert solution(\"....##..\\n######\\n####...\\n....##...\"), 'cannot fold'\nassert solution(\"..##...\\n...##....\\n.##...##\\n....##..\"), 'cannot fold'\nassert solution(\"..##...\\n..##....\\n..######\\n....##..\"), 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('..#') == 'cannot fold'\nassert solution('...#') == 'cannot fold'\nassert solution('....') == 'cannot fold'\nassert solution('######') == 'cannot fold'\nassert solution('.......') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"######\",\n    \".....\",\n    \"..#..\",\n    \"..#..\",\n    \".....\",\n    \"..#..\"\n) == \"cannot fold\"\nassert solution(\n    \"######\",\n    \".....\",\n    \"..#..\",\n    \".##.#\",\n    \".....\",\n    \"..#..\"\n) == \"can fold\"\nassert solution(\n    \"######\",\n    \".....\",\n    \"..#..\",\n    \".##.#\",\n    \".....\",\n    \".#..\"\n) == \"cannot fold\"\nassert solution(\n    \"######\",\n    \".....\",\n    \"..#..\",\n    \".....\",\n    \"..#..\",\n    \"....\"\n) == \"cannot fold\"\nassert solution(\n    \"######\",\n    \".....\",\n    \".#..\",\n    \".....\",\n    \"..#..\",\n    \"....\"\n) == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"......\"\n) == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"######\") == \"cannot fold\"\nassert solution(\"..#..\") == \"cannot fold\"\nassert solution(\"...#..\") == \"cannot fold\"\nassert solution(\".....\") == \"cannot fold\"\nassert solution(\"....#\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"##...#..#....#...#....#..#..#....#..#.##...#.##...\"\n) == \"can fold\"\n\"\"\""
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution( \"....\") == \"cannot fold\"\nassert solution( \"..##\") == \"cannot fold\"\nassert solution( \"##.#\") == \"cannot fold\"\nassert solution( \"....#\") == \"cannot fold\"\nassert solution( \"##.#.#\") == \"cannot fold\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'aaaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['abcefgabc', 'abcbabcba', 'aaaa']) == 'abcba'\nassert solution(['abcefgabc', 'abcbabcba', 'aaaa']) == 'aaaa'\nassert solution(['abcefgabc', 'abcbabcba', 'aaaa']) == 'abcba'\nassert solution(['abcefgabc', 'abcbabcba', 'aaaa']) == 'abcba'\nassert solution(['abcefgabc', 'abcbabcba', 'aaaa']) == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( \"abcefgabc\" ) == \"abc\"\nassert solution( \"abcbabcba\" ) == \"abcba\"\nassert solution( \"aaaa\" ) == \"aaaa\"\nassert solution( \"abcdefghijklmnopqrstuvwxyz\" ) == \"abcddefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('aabbcba') == 'aabbbca'\nassert solution('abcabcabcabc') == 'abcabcabcabc'\nassert solution('abcabcabcabcab') == 'abcabcabcabc'\nassert solution('abcabcabcabcabcd') == 'abcabcabcabc'\nassert solution('abcabcabcab') == 'abcabcabc'\n"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aa\") == \"aaa\", \"Test Case Failed\"\nassert solution(\"baa\") == \"baa\", \"Test Case Failed\"\nassert solution(\"a\") == \"a\", \"Test Case Failed\"\nassert solution(\"\") == \"\", \"Test Case Failed\""
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abc\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"aa\") == \"a\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\",\"1\",\"0\"]) == \"1\"\nassert solution([\"3\",\"0\",\"2\",\"1\",\"5\"]) == \"4\"\nassert solution([\"4\",\"2\",\"1\",\"0\"]) == \"3\"\nassert solution([\"10\",\"0\",\"1\",\"2\",\"0\"]) == \"7\"\nassert solution([\"1\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0, \"The first line should contain the number of trips Johan wants to make\"\n\nassert solution(stdin) == 7, \"The second line should contain the minimum number of coupons Johan must purchase\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 4 0 2 10005') == '4'\nassert solution('2 4 5 0 10005') == '6'\nassert solution('2 4 5 10 20005') == '2'\nassert solution('3 4 10') == '3'\nassert solution('3 4 0') == '3'\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4 2\") == \"3\"\nassert solution(\"1 3 2\") == \"0\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4 4\") == \"0\"\nassert solution(\"2 3 0\") == \"0\"\nassert solution(\"2 4 10\") == \"4\"\nassert solution(\"2 5 1005\") == \"0\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"2 5\") == \"4\"\nassert solution(\"2 4 1\") == \"5\"\nassert solution(\"2 10 5\") == \"10\"\nassert solution(\"2 10005\") == \"10005\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"2\"\nassert solution([\"1\",\"2\"]) == \"0\"\nassert solution([\"1\",\"2\",\"3\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"4\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"6\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"error\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 7 8 12 24\") == 2\n\nassert solution(\"5 2 3 4 8 12 24\") == 3\n\nassert solution(\"6 5 3 4 5 4 8 12 24\") == 1\n\nassert solution(\"4 4 1 3 4 4 8 12 24\") == 2\n\nassert solution(\"5 6 3 4 6 6 7 5\") == 3"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    inp\n) == 7\nassert solution(\n    inp\n) == 7\nassert solution(\n    inp\n) == 3\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 5, \"Your code is not correct\"\n\"\"\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"5 3 1 7 3\") == \"3\"\nassert solution(\"2 5 1 7 3\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp := str()) == \"2\"\nassert solution(inp := str()) == \"3\"\nassert solution(inp := str()) == \"0\"\nassert solution(inp := str()) == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin=input,\n    print: str,\n    ) == \"3\"\nassert solution(\n    stdin=input,\n    print: str,\n    ) == \"3\"\nassert solution(\n    stdin=input,\n    print: str,\n    ) == \"5\"\nassert solution(\n    stdin=input,\n    print: str,\n    ) == \"0\"\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == -1, 'incorrect'"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 2 5 4\nS#.F\n.MFMG\nS#\nG\nS#\nG\"\"\"), \"3\"\nassert solution(\"\"\"2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2, \"solution failed\"\nassert solution(stdin) == 2, \"solution failed\"\nassert solution(stdin) == 1, \"solution failed\"\nassert solution(stdin) == 1, \"solution failed\"\nassert solution(stdin) == 1, \"solution failed\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == 3, \"incorrect return value\"\nassert solution(s) == -1, \"incorrect return value\""
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"The solution must fail\"\n\"\"\""
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"S..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G..G.."
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5, 'incorrect'"
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"S..G..#\") == \"1\"\nassert solution(\"S..G..#\") == \"2\"\nassert solution(\"S..G..#\") == \"0\"\nassert solution(\"S..G..#\") == \"1\"\nassert solution(\"S..G..#\") == \"0\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('....S..G..') == 'S..G..'\nassert solution('.....#.') == '..#.'\nassert solution('S....G') == 'SG...'\nassert solution('.......#.') == '.......#.'\nassert solution('....###..') == '###....'\n"
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"..\") == \"2\"\nassert solution(\"S..\") == \"1\"\nassert solution(\"G..G..\") == \"1\"\nassert solution(\"G..G\") == \"0\"\nassert solution(\"..S..\") == \"1\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 4 1 3') == '1000200 799'\nassert solution('2 4 1 2') == '1000200 0'\nassert solution('1 2 1 1') == '0'\nassert solution('1 5 1 9') == '0'\nassert solution('2 4 1 2') == 'uncertain'\n"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\\n7\\n5\\n3\\n2\\n1\\n6\\n7\\n1\\n6\\n1\\n3\\n4\\n1\\n7\\n1\\n1\\n2\\n2\\n1\\n5\\n1\\n3\\n5\\n6\\n3\\n5\\n6\\n5\\n2\\n1\\n1\\n4\\n1\\n4\\n3\\n2\\n3\\n1\\n3\\n1\\n5\\n1\\n4\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n3\\n2\\n4\\n2\\n5\\n1\\n4\\n4\\n3\\n1\\n1\\n1\\n1\\n4\\n3\\n5\\n1\\n2\\n2\\n2\\n3\\n5\\n2\\n3\\n5\\n5\\n2\\n4\\n1\\n2\\n1\\n1\\n4\\n2\\n1\\n1\\n1\\n1\\n5\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n4\\n2\\n3\\n1\\n1\\n1\\n2\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n4\\n4\\n5\\n1\\n1\\n1\\n4\\n1\\n2\\n3\\n3\\n3\\n1\\n1\\n4\\n5\\n3\\n1\\n4\\n1\\n5\\n3\\n3\\n1\\n2\\n1\\n1\\n1\\n3\\n2\\n3\\n1\\n3\\n2\\n2\\n3\\n1\\n4\\n3\\n1\\n1\\n1\\n1\\n4\\n2\\n4\\n2\\n4\\n2\\n4\\n1\\n1\\n1\\n3\\n3\\n1\\n2\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n1\\n3\\n4\\n2\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n3\\n3\\n2\\n1\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n3\\n1\\n4\\n4\\n3\\n2\\n4\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n1\\n4\\n3\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n4\\n4\\n1\\n1\\n2\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n4\\n3\\n1\\n2\\n1\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n2\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n4\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1000200 799\"\nassert solution(\"1\") == \"1000200 799\"\nassert solution(\"0\") == \"1000200 799\"\nassert solution(\"uncertain\") == \"1000200 799\"\nassert solution(\"uncertain impossible\") == \"1000200 799\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 'uncertain'\n\nassert solution(inp) == 'impossible'\n\nassert solution(inp) == 'uncertain'\n\nassert solution(inp) == 'impossible'\n\nassert solution(inp) == 'uncertain'\n"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\"\"int n, D, X, Y;\nint solve(int X, int Y, int D) {\n    if (X > Y)\n        return solve(X - Y, Y, D);\n    else\n        if (X == Y)\n            return solve(Y - X, X, D);\n    return solve(X, Y - X, D);\n}\"\"\") == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('abc') == 'abc'\nassert solution('cab') == 'cab'\nassert solution('cba') == 'bba'\nassert solution('abc') == 'abc'\nassert solution('cba') == 'cba'\n"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\", \"An MPS must have at least two beacons\"\nassert solution(\"1\") == \"\", \"At least one beacon must be at least one position\"\nassert solution(\"1,3\") == \"\", \"At least one beacon and all positions must be the same\"\nassert solution(\"1,4,6\") == \"\", \"At least one beacon must be at least one position\"\nassert solution(\"1,4,6,8\") == \"\", \"At least one beacon must be at least one position\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'uncertain'\n"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == '1000200 799'\nassert solution('2 2') == 'uncertain'\nassert solution('1 3') == 'impossible'"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'uncertain'\nassert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) =='syntax error'\n\nSample Input 4:\n1\n3\n5\n7\n9\nSample Output 4:\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n\"\"\"\nfrom typing import List\nimport sys"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\"2 4 7 9 8 14 17\") == \"1 1 2 3 4 5 6 7 8 9 10 14 17\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 2 3 4 5 6 7 8 9 10\"\n\nSolution = input()\nprint(Solution)"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"syntax error\"\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 7 9 8 14 17 19 18\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 1, 1, 1) == 2\nassert solution(1, 1, 2, 1) == 3\nassert solution(1, 2, 1, 1) == 4\nassert solution(1, 1, 1, 2) == 8\nassert solution(1, 2, 1, 1) == 9\n"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(a) == b\n\"\"\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 4 7 8 9 14 17') == '2 1 3 4 6 7 8 9 14 18'\nassert solution('2 4 7 8 9 14 17') == '2 1 2 3 4 4 5 7 8 9 18'\nassert solution('2 4 7 8 9 14 17') == '2 1 2 3 4 6 7 8 9'\nassert solution('2 4 7 8 9 14 17') == '2 1 2 3 4'\nassert solution('2 4 7 8 9 14 17') == '2 1 3 4 2 4 5 7 8 9'\n"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 8\") == \"1\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"5 2\") == \"0\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"90 22 6 _ 99 51 _\"\n              \" _ _ _ _ _ _ _\") == \"1\"\nassert solution(\"85 55 _ 99 51 _\"\n              \" _ _ _ _ _ _ _\"\n              \" _ _ _ _ _ _ 85\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _\"\n              \" _ _ _ 120 _ _ _\"\n              \" _ _ _ 144 _ _ _\"\n              \" _ _ _ _ _ _ _\") == \"1\"\nassert solution(\"170 _ _ 136 _ _ _ _\"\n              \" _ _ _ 120 _ _ _\"\n              \" _ _ _ 144 _ _ _\"\n              \" _ _ _ _ _ _ _\") == \"1\"\nassert solution(\"170 _ _ 136 _ _ _ _\"\n              \" _ _ _ 120 _ _ _\"\n              \" _ _ _ 144 _ _ _\"\n              \" _ _ _ _ _ _ _\") == \"1\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '7'\nassert solution(stdin) == '9'\nassert solution(stdin) == '59'\nassert solution(stdin) == '200'"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"8640\"\nassert solution(stdin) == \"8640\"\nassert solution(stdin) == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"90 22\", \"6 _\", \"99 51\", \"51 _\", \"120 _\", \"144 _\", \"170\"]) == \"many\", \"one or more inconsistencies were detected\"\nassert solution([\"85 55\", \"99 51\", \"51 _\", \"120 _\", \"144 _\", \"170\"]) == \"many\", \"one or more inconsistencies were detected\"\nassert solution([\"160 _\", \"136 _\", \"_ _\", \"_ _\", \"144 _\", \"170\"]) == \"one or more inconsistencies were detected\", \"one or more inconsistencies were detected\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(test_input) == \"many\""
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"_ _ _ _ _ _ _ _ _ _ _\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ _\") == \"8640\"\nassert solution(\"_ _ _ 120 _ _ 144 _ _ _\") == \"8640\"\n\nNotes\n\nThe input contains the entire Sudoku puzzle. A Sudoku puzzle is a 3x3 grid, representing the puzzle in a rectangular grid.\nA Sudoku puzzle grid is a grid of numbers that represents the top row, and then the bottom row, but are not a part of another grid.\nA Sudoku puzzle grid is also called a 2D array.\n\nIn the input data, there are $10$ numbers each separated by a single space. A Sudoku puzzle is stored as a 2D array $A$ of $n$ arrays, where $A[i]$ is the i-th array described above.\n\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\\\"\"\"\nmakrchadl kan ir\nwegq mabktrchldllnk szr\nssh\nmvki\ngw\nkka\nnka\nwna\nmakrchadl\nkan\nwegq\ngw\nkka\ngw\nnka\nnka\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\ngw\nkka\nnka\nkna\nmakrchadl\nkan\nwegq\ngw\nkka\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nnka\nmakrchadl\nmakrchadl\nkan\nwegq\nn"
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\n     \"1 3\"\n     ]) == \"2\""
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 24\n\"\"\""
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"23\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"24\""
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5 1 2 3 4 5 10 9 11 12\"\n) == \"5\"\nassert solution(\n    \"2 1 3\"\n) == \"3\"\nassert solution(\n    \"1 1 3\"\n) == \"3\"\nassert solution(\n    \"5 3\"\n) == \"8\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"24\""
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"treetreetree\"\nassert solution(stdin) == \"apples\"\nassert solution(stdin) == \"wood\"\nassert solution(stdin) == \"oranges\"\nassert solution(stdin) == \"boots\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\"\n\nassert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"This is an apple and a banana!\") == \"1\"\nassert solution(\"This is a banana!\") == \"3\"\nassert solution(\"This is a man and a woman\") == \"3\"\nassert solution(\"This is a man and a woman!\") == \"4\"\nassert solution(\"This is a man and a woman!\") == \"5\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3, \"should return 3\"\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('eggroll') == 'd'\nassert solution('oranges') == 'r'\nassert solution('treetree') == 't'\nassert solution('apples') == 'p'\nassert solution('foo') == 'f'\n"
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['secretmessage', 'boot', 'treetreetreetree', 'oranges', 'apples', 'boot']) == 'essa'\nassert solution(['secretmessage', 'boot', 'treetreetreetree', 'oranges', 'apples', 'boot']) == 3\nassert solution(['secretmessage', 'boot', 'treetreetreetree', 'oranges', 'apples', 'boot']) == 1\nassert solution(['secretmessage', 'boot', 'treetreetreetree', 'oranges', 'apples', 'boot']) == 0\nassert solution(['secretmessage', 'boot', 'treetreetreetree', 'oranges', 'apples', 'boot']) == '3'\n"
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('aaaabbbbba') == 'aaaabb'\nassert solution('aaaaabbbbba') == 'aaaa'\nassert solution('aaaaaaa') == 'aaaaaa'\nassert solution('abababab') == 'ababab'\nassert solution('abababab') == 'abab'\n"
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '4'\nassert solution('oranges') == '0'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\", \"incorrect\"\nassert solution(\"e a s\") == \"1\", \"incorrect\"\nassert solution(\"fairway\") == \"3\", \"incorrect\"\nassert solution(\"amazing\") == \"5\", \"incorrect\"\nassert solution(\"1 2 3\") == \"2\", \"incorrect\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 1\n"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"<><\") == \"2\"\nassert solution(\"R<>\") == \"2\"\nassert solution(\"<>R<>\") == \"4\"\nassert solution(\"<>R<>\") == \"2\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\nimport math"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('^<^') == '1'\nassert solution('><') == '2'\nassert solution('v<^') == '2'\nassert solution('<<<') == '1'\nassert solution('v<^') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('2') == '1'\nassert solution('1') == '2'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('<>') == '0'"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\",\"3\",\"0\",\"0\",\"2\",\"3\",\"2\",\"1\"]) == \"1\"\nassert solution([\"1\",\"3\",\"1\",\"0\",\"2\",\"2\",\"3\",\"1\",\"0\"]) == \"1\"\nassert solution([\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"0\",\"2\",\"0\"]) == \"1\"\nassert solution([\"2\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"3\",\"3\"]) == \"3\"\nassert solution([\"2\",\"0\",\"1\",\"3\",\"3\",\"2\",\"0\",\"2\",\"0\"]) == \"3\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 16\n\n-----Binary Search-----\nGiven an integer array nums, find the contiguous subarray (containing at least one number) which has the largest product, and return the product.\n\nExample 1:\n\nInput: [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\nExample 2:\n\nInput: [-2,0,-1]\nOutput: 0\nExplanation: The original array is [-2,-1].\nExample 3:\n\nInput: [3,-2,0,-1]\nOutput: -1\nExplanation: The original array is [3,-2,0].\nExample 4:\n\nInput: [1,2,3,4,-2,-1]\nOutput: -1\nExplanation: The original array is [1,2,3,4].\nExample 5:\n\nInput: [2,2,0,1]\nOutput: 2\nExplanation: [0,-1] has the largest product, which is 2 * -1.\nExample 6:\n\nInput: [3,-2,0,-1,-2]\nOutput: -1\nExplanation: The original array is [3,-2,0,-1,-2].\nConstraints:\n\n1 <= nums.length <= 200\n-10^9 <= nums[i] <= 10^9\n\n-----DP-----\nGiven a list of integers nums and a integer k, return the total number of continuous subarrays with lengths k and product k.\n\n\n\nConstraints:\n\n1 <= k <= 10^9\n1 <= nums.length <= 10^4\n1 <= nums[i] <= 10^9\n\n\n-----Recursive solution-----\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2 3 4 2\") == \"3\", \"2 2 3 4 2\""
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"An error occurred\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 26\nprint(solution(stdin))\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 20\n"
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('3') == '3'\nassert solution('3.0') == '3.0'\nassert solution('1.0 0.0 0.0 0.0') == '1.0'\nassert solution('5.0 20.0 5.0 170.0') == '183.1314599183'\n"
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"168.7916512460\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"168.7916512460\"\nprint(\"Correct\")\n"
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0.0 0.0 4.0 1.0\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '165.5274740179'\nassert solution(input().upper()) == '170.0'\nassert solution(input().upper().replace('0','')) == '80.0'\nassert solution(input().replace(' ', '.')) == '95.0'\n\"\"\""
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '63.5'\n"
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin=\n    [\n    \"60.0 0.0 50.0 170.0\",\n    \"3\",\n    \"40.0 0.0 0.0 0.0\",\n    \"5.0 20.0 5.0 170.0\",\n    \"95.0 0.0 95.0 80.0\",\n    \"Sample Output 1:\",\n    \"168.7916512460\"\n    ]\n    ) == \"3.7320508076\""
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test) == '36'\nassert solution(sample) == '63'\nassert solution(standard) == '65'\n"
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3.7320508076\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('s')) == 'rarity'\nassert solution('x')) =='madam'\nassert solution('a')) =='madam'\nassert solution('abc') =='madam'\nassert solution('abcde') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"madam\"\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) =='madam'\nassert solution(stdin) == 'canterlot'\n\nassert solution(stdin) =='madam'\nassert solution(stdin) =='madam'\n\nassert solution(stdin) =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"abcdefghi\"\nassert solution(\"1 2 3 4\") == \"geek\"\nassert solution(\"1 2 3 4\") == \"ee\"\nassert solution(\"1 2 3 4\") == \"eeee\"\nassert solution(\"1 2 3 4\") == \"eeeee\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin.readline().strip()) =='madam'\nassert solution(sys.stdin.readline().strip()) == 'canterlot'\nassert solution(sys.stdin.readline().strip()) =='megay'\nassert solution(sys.stdin.readline().strip()) == 'brulee'\nassert solution(sys.stdin.readline().strip()) == 'brulee'\n"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"coding\") == \"coding\"\nassert solution(\"code\") == \"code\"\nassert solution(\"deeplift\") == \"deeplift\"\nassert solution(\"honeyee\") == \"honeyee\"\nassert solution(\"lacuse\") == \"lacuse\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"[[1 2 3]]\") == \"[1 2 3]\"\nassert solution(\"[[1 3]]\") == \"[1 3]\"\nassert solution(\"[[1]]\") == \"[1]\"\nassert solution(\"[[[1]]])\"]\") == \"[1]\"\nassert solution(\"[[[1]]])\"]\") == \"[1]\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution) =='madam'\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('madam') =='madam', 'Failing solution'\nassert solution('sig') =='sig', 'Failing solution'\nassert solution('tepee') == 'tepee', 'Failing solution'\nassert solution('determined') == 'determined', 'Failing solution'\n"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"rarity\") == \"canterlot\"\nassert solution(\"rarity\") == \"madam\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\\n\" or \"Blue Ridge mountain road. Leaves, glowing in autumn sun,\\nfall in Virginia.\\n\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"Hello World\") == \"hello world\"\nassert solution(\"This is a sentence\") == \"This is a sentence\"\nassert solution(\"I am tired of this\") == \"I am tired of this\"\nassert solution(\"Hi I am a person\") == \"Hi I am a person\"\nassert solution(\"This is not a sentence\") == \"This is not a sentence\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. Blue Ridge mountain road"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('Worng olifade') == 'How to work with your love. Let me do my work!'\nassert solution('You can see the out-of-the-box at the top of the ocean.') == 'You can see the out-of-the-box at the top of the ocean.'\nassert solution('I am a word from my original language. I am a word from my original language. I am a word from my original language.') == 'I am a word from my original language.'\nassert solution('my dog has lot of cats and cows') =='my dog has lot of cats and cows.'\nassert solution('The quick brown fox jumped over the lazy dog.') == 'The quick brown fox jumped over the lazy dog.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Upper and lower case distinctions are ignored for the purpose of counting syllables, but must be retained in the final output.\\n'\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\\n\"\nassert solution(stdin) == \"Blue Ridge mountain road.\\n\"\nassert solution(stdin) == \"Leaves, glowing in autumn sun,\\nfall in Virginia.\\n\""
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'LIVE'\n\nassert solution(stdin) == 'LEAVE'\n\nassert solution(stdin) == 'GLOW'\n\nassert solution(stdin) == 'INVALID'\n"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. \") == \"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. \"\nassert solution(\"Who would know if we had too few syllables? \") == \"Who would know if we had too few syllables? \"\nassert solution(\"International contest- motivation high Programmers have fun!. \") == \"International contest- motivation high Programmers have fun!. \"\n"
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"ThoreHusfeldt\"\nassert solution(\"2 2\") == \"ThoreHusfeldt\"\nassert solution(\"2 4\") == \"ThoreHusfeldt\"\nassert solution(\"2 5\") == \"ThoreHusfeldt\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeldt\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeld\""
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'ThoreHusfeldt'\nassert solution(stdin) == 'ThoreHusfeldt'\nassert solution(stdin) == 'ThoreHusfeldt'\nassert solution(stdin) == 'ThoreHusfeldt'\nassert solution(stdin) == 'ThoreHusfeldt'\n"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"ThoreHusfeldt\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Thore is awesome\"\nassert solution(\"2\") == \"ThoreH\"\nassert solution(\"2\") == \"ThoreS\"\nassert solution(\"2\") == \"ThoreS\"\nassert solution(\"2\") == \"ThoreS\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Thore is awesome\"\nassert solution(stdin) == \"ThoreH\"\nassert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeld\"\nassert solution(stdin) == \"ThoreHusfeldt\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeld\"\nassert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeldt\"\nassert solution(stdin) == \"ThoreHusfeldt\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'ThoreHusfeldt'\n\"\"\""
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Thore is awesome\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(st) == 32\n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input() == \"PP\")\nassert solution(input() == \"PP\")\nassert solution(input() == \"PP\")\nassert solution(input() == \"PP\")\nassert solution(input() == \"PP\")\n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 25, \"solution(stdin) = {}, expected = 25\".format(stdin)\nassert solution(stdin) == 33, \"solution(stdin) = {}, expected = 33\".format(stdin)\n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"P*P\"\n) == 5, \"Failed\"\nassert solution(\n    \"L*R\"\n) == 22, \"Failed\"\nassert solution(\n    \"**\"\n) == 9, \"Failed\"\nassert solution(\"\") == 0, \"Failed\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"L*R*R*P\") == \"6\", \"Expected '6'\"\nassert solution(\"L*R*R*P*\") == \"25\", \"Expected '25'\"\nassert solution(\"L*R*R*P*R*\") == \"33\", \"Expected '33'\"\nassert solution(\"L*R*R*P*R*R*\") == \"33\", \"Expected '33'\"\n\nTime complexity: O(N)\nSpace Complexity: O(N)\n\"\"\"\nclass Solution:\n    def solve(self, data):\n        def solution(data):\n            n=len(data)\n            dp=[0 for _ in range(n)]\n            def helper(i,j):\n                if i>j:\n                    return 0\n                if i==j:\n                    return data[i]\n                dp[i]=helper(i+1,j)+dp[i+1]\n                return dp[i]\n            return helper(0,n-1)\n        return solution(data)\n        \n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"P*P\"), 25\nassert solution(\"L*R\"), 6\nassert solution(\"**\"), 33"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '6'\nassert solution(input().replace('*', '').replace('L', 'L').replace('R', 'R').replace('P', 'P').replace('*', '').replace('L*', 'L*')) == '6'\nassert solution(input().replace('*', '').replace('L', 'L').replace('R', 'R').replace('P', 'P').replace('*', '').replace('L*', 'L*')) == '6'\nassert solution(input().replace('L*', '').replace('L', 'L').replace('*', '').replace('R', 'R').replace('R*', 'R*')) == '6'\nassert solution(input().replace('L', 'L').replace('*', '').replace('R', 'R').replace('*', '').replace('P', 'P').replace('*', '').replace('L*', 'L*')) == '6'\n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"P*P\"), \"The pattern string must contain only one '*'.\"\n    assert solution(\n    \"L*R\"), \"The pattern string must contain only one 'L' followed by 'R' followed by '*'.\"\n    assert solution(\n    \"**\"), \"The pattern string must contain only one 'L' followed by 'R' followed by '*'.\"\n    assert solution(\n    \"L*R*P\"\n    ), \"The pattern string must contain only one 'L' followed by '*' followed by 'R' followed by 'P' followed by '*'.\"\n    assert solution(\n    \"L*R*P\"\n    ), \"The pattern string must contain only one 'L' followed by '*' followed by 'R' followed by 'P' followed by '*'.\"\n    "
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '6', 'incorrect'\n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"L*R\") == 25\nassert solution(\"*\") == 25\nassert solution(\"L*P\") == 1001\nassert solution(\"L*R*\") == 25\nassert solution(\"**\") == 25\n"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"oskar not lukas\") == \"yes\"\nassert solution(\"oskar is poptart\") == \"wait what?\"\nassert solution(\"moo not foo\") == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'yes', \"solution(stdin) should be 'yes'\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\nderp is herp\\nderp is herp\\nherp is derp\\nherp is derp\\nherp is herp\\nderp is derp\\nderp is herp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nherp is derp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp is herp\\nderp is derp\\nderp"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"sheep\", \"sheep\", \"sheep\", \"sheep\", \"sheep\"]) == \"yes\"\nassert solution([\"moo\", \"sheep\", \"oskar\", \"oskar\", \"poot\", \"oso\", \"o\", \"o\", \"o\", \"o\", \"o\"]) == \"wait what?\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"not\", \"is\", \"derp\", \"bar\"]) == \"yes\", \"test failed\"\nassert solution([\"bar\", \"foo\", \"derp\", \"foo\"]) == \"wait what?\", \"test failed\"\nassert solution([\"derp\", \"foo\", \"not\", \"foo\"]) == \"yes\", \"test failed\"\nassert solution([\"foo\", \"derp\", \"foo\", \"foo\"]) == \"wait what?\", \"test failed\"\nassert solution([\"not\", \"is\", \"derp\", \"not\", \"is\", \"foo\"]) == \"wait what?\", \"test failed\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"$a b c d e f g h i j k l m n o p q r s t u v w x y z\"\"\") == \"yes\"\nassert solution(\"\"\"$a b c d e f g h i j k l m n o p q r s t u v w x y z\"\"\") == \"wait what?\"\"\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('oskar is poptart') == 'yes'\nassert solution('oskar is poptart') == 'wait what?'\nassert solution('herp is derp') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"foos i oo is s i l uks aris r i l uks\noskar is poptart\nhuis not tana i tanan is dt anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf anf an"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"yes\"\n\nassert solution(stdin) == \"wait what?\"\n\n-----Discussion-----\nFor the situation, we have two words: s and f, and n is a number of statements of the form $X$ and $Y$. The statements of $X$ and $Y$ are in one or more separate lines. In the other, we have $X$ and $Y$, and we do not know whether $X$ is a $Y$ or not. We also have $X$ and $Y$ in one or more separate lines. So they are different.\n\nFor example, the two words are $X$ and $Y$ and $X \\le $Y$ for $n=3$ statements. We say that $X$ is a $Y$ iff $X \\le$ $Y$.\n\nThis means that $X \\le Y$ is a $Y$ iff $X \\le$ $Y$ for $n=2$.\n\nIn the next example, $X$ is a $Y$ iff $X \\le$ $Y$ for $n=1$ statements.\n\nIn the next example, $X$ is a $Y$ iff $X \\le$ $Y$ for $n=0$.\n\nIn the next example, $X$ is a $Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nIn the next example, $X$ is a $Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nIn the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=1$, which is the same as $X \\le Y$ for $n=1$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=1$, which is the same as $X \\le Y$ for $n=1$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=1$, which is the same as $X \\le Y$ for $n=1$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=1$, which is the same as $X \\le Y$ for $n=1$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nFor the next example, $X \\le Y$ iff $X \\le$ $Y$ for $n=0$, which is the same as $X \\le Y$ for $n=0$.\n\nNote that, in some cases, the hypotheses of $X \\le Y$ could be different. For example, $X \\le Y$ is not the same as $X \\le Y$ for even $n=2$, because $X \\le Y$ does not imply that $X \\le Y$ is a $Y$, even if $X \\le Y$ does not imply that $X \\le Y$ is a $Y$ with $X \\le Y$, so it would be the same as $X \\le Y$ even though $X \\le Y$ is not the same as $X \\le Y$ for even $n=2$.\n\nFor example, $X \\le Y$ is not a $Y$ iff $X \\le Y$, because $X \\le Y$ does not imply that $X \\le Y$ is a $Y$, because $X \\le Y$ does not imply that $X \\le Y$ is a $Y$ with $X \\le Y$, so it would be the same as $X \\le Y$ even though $X \\le Y$ is not a $Y$, because $X \\le Y$ does not imply that $X \\le Y$ is a $Y$ with $X \\le Y$, so it would be the same as $X \\le Y$ even though $X \\le Y$ is not a $Y$, because $X \\le Y$ does not imply that $X \\le Y$ is a $Y$ with $X \\le Y$, so it would be the same as $X \\le Y$ even though $X \\le Y$ is not a $Y$, because $X \\le Y$ does not imply that $X \\le Y$ is a $Y$ with $X \\le Y$, so it would be the same as $X \\le Y$ even though $X \\le Y$ is not a $Y$, because $X \\le Y$ does not imply that $X \\le Y$ is a $Y$ with $X \\le Y$, so it would be the same as $X \\le Y$ even though $X \\le Y$ is not a $Y$, because $X \\le Y$ does"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'yes'"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([]), \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"impossible\"\nprint('solution(input) == \"impossible\"')"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"impossible\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"impossible\"\n\n\"\"\"\n\nfrom collections import deque\nimport sys\n\nn = int(input())\n\nsequence = []\n\nfor _ in range(n):\n    sequence.append(input())\n\nscores = deque()\n\nfor seq in sequence:\n    for i in range(len(seq)):\n        if seq[i] == \"A\":\n            scores.append(i)\n            break\n    for i in range(len(seq)-1):\n        if seq[i] == \"A\":\n            scores.append(i+1)\n            break\n    for i in range(len(seq)-1,0,-1):\n        if seq[i] == \"A\":\n            scores.append(i)\n            break\n\nanswer = \"\"\n\nfor i in range(len(scores)-1):\n    answer += str(scores[i])\n    answer += str(scores[i+1])\n\nprint(answer)"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"124\"\nassert solution(stdin) == \"234\"\nassert solution(stdin) == \"324\"\nassert solution(stdin) == \"454\"\nassert solution(stdin) == \"555\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('100 111 5') == '124'\nassert solution('2 4 1') == '3'\nassert solution('20 0.5 10') == '80'\nassert solution('80 0.5 2') == '85'\nassert solution('85 0.5 2') == '90'\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 20 3\") == \"124\"\nassert solution(\"2 4 1\") == \"3\"\nassert solution(\"1 0.5 5\") == \"7\"\nassert solution(\"0.5 2\") == \"9\"\nassert solution(\"0.5 2\") == \"6\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '124'\n\"\"\""
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"124\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"124\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('100 111 5') == '124'\nassert solution('2 4 1') == '3'\nassert solution('1 0.5 5') == '8'\nassert solution('3 0.3 8') == '1'\nassert solution('5 0.3 8') == '18.9029850746'\n\"\"\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 0.5 1\") == \"14\"\nassert solution(\"1 0.5 5\") == \"26\"\nassert solution(\"1 0.5 5\") == \"26\"\nassert solution(\"2 4 1\") == \"14\"\nassert solution(\"5 0.3 8\") == \"17.995498\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 5 3 1\") == \"124\"\nassert solution(\"5 0.3 0.8 5\") == \"85\"\nassert solution(\"6 0.8 3\") == \"8\"\nassert solution(\"7 8\") == \"8\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 4 1\"\n) == \"124\"\nassert solution(\n    \"2 4 1\"\n) == \"13\"\nassert solution(\n    \"1 0.5 5\"\n) == \"85\"\nassert solution(\n    \"1 0.5 5\"\n) == \"85\"\nassert solution(\n    \"1 0.5 5\"\n) == \"85\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n\nclass Solution:\n    def get_kth_sequence(self, n: int, k: int) -> str:\n        \n        if n<=0:\n            return \"\"\n        \n        if k>=n:\n            return \"\"\n        \n        if k<0:\n            return \"\"\n        \n        # Base case\n        if n==0:\n            return \"0\"\n        \n        # Base case\n        if n<=k:\n            return str(n)\n        \n        # Recursive call\n        else:\n            return self.get_kth_sequence(n-k, k) + str(n-k) + Solution.get_kth_sequence(n-k, k-1)\n        \n        \n"
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, input().split())\ns = deque([i for i in range(1, n + 1)])\nfor i in range(k):\n    new_s = deque([i for i in range(n + 1)])\n    for _ in range(2):\n        new_s.append(s.popleft())\n    s.appendleft(s.pop())\nprint(s)\n"
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2 1 2'"
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    inp := [str(i) for i in range(2, 1000)]) == '2 1 2'\nassert solution(\n    inp := [str(i) for i in range(1, 1001)]) == '1'\nassert solution(\n    inp := [str(i) for i in range(2, 1000)]) == '1 1'\nassert solution(\n    inp := [str(i) for i in range(2, 1000)]) == '1 1'\nassert solution(\n    inp := [str(i) for i in range(1, 1001)]) == '1 1'\n"
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 22\") == \"4 3 4 2\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"111\") == \"1\"\nassert solution(\"13\") == \"1\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2, 2) == 3\nassert solution(2, 5) == 6\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\")\") == \"()\"\nassert solution(\"\")) == \"()\"\nassert solution(\"1\") == \"1\"\nassert solution(\"(\") == \"(\"\nassert solution(\")\") == \"(\""
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"1\\n2\\n1\\n4\"\nassert solution(\"1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\") == \"4\\n3\\n6\\n10\\n7\\n8\\n9\\n11\\n12\""
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '3 4 2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\"\"\") == \"2\"\nassert solution(\"\"\"\"\"\"\n    ) == \"0\"\nassert solution(\"\"\"\n\"\"\") == \"0\"\nassert solution(\"\"\"\n\"\"\") == \"0\"\nassert solution(\"\"\"\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 7 2\") == 2\nassert solution(\"6 3\") == 2\nassert solution(\"7 2\") == 2\nassert solution(\"7 3\") == 2\nassert solution(\"1 1\") == 1\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 5 6 7 8') == '2'\nassert solution('7 6') == '3'\nassert solution('7 5') == '0'\nassert solution('7 4') == '0'\nassert solution('7 2') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 190 191 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 233 234 235 236 237 237 238 239 240 241 242 243 244 245 246 246 247 248 249 250 251 252 253 253 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 290 291 292 293 294 295 296 297 298 299 300 301 301 302 303 303 304 305 306 308 308 309 310 310 311 311 312 313 314 315 316 317 318 379 380 381 384 385 396 395 396 395 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(0)\nassert solution(str(input())) == str(1)\nassert solution(str(input())) == str(2)\nassert solution(str(input())) == str(3)\nassert solution(str(input())) == str(4)\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"2\"\nassert solution(\"6 3\") == \"3\"\nassert solution(\"7 2\") == \"2\"\nassert solution(\"7 6\") == \"2\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"3 4\") == \"3\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2 0.01 0.00\") == \"28.264459\"\nassert solution(\"2 2 0.01 0.00\") == \"31.848714\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"15.62418614\""
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 28.26445910, 'Error'\n\"\"\"\nfrom math import ceil\nimport operator\nimport sys"
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '20.00000000'\nassert solution(stdin) == '3.14159265'\nassert solution(stdin) == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == expected_output\n\"\"\""
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"29.010000000\""
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"20\", \"1.0\", \"10.00\", \"-10.0\", \"10.00\"]) == \"20.00000000\"\nassert solution([\"0.01\", \"1.0\", \"1.0\"]) == \"10.00000000\"\nassert solution([\"1.00\", \"1.00\"]) == \"1.00000001\"\nassert solution([\"1.00\", \"1.00\"]) == \"1.00000001\"\nassert solution([\"10.00\", \"1.00\", \"1.00\"]) == \"1.00000001\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3.14159265\") == \"28.26445910\"\nassert solution(\"0.1 0.1\") == \"1.00 0.00\"\nassert solution(\"1.00 1.00\") == \"1.00 1.00\"\nassert solution(\"0.01 0.01\") == \"1.01 0.01\"\nassert solution(\"1.00 0.01\") == \"1.00 0.01\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"20 0\\n1.00 0.10\\n\"\n    ) == \"20.00000000\"\nassert solution(\n    \"10 10\\n10.00 1.00\\n\"\n    ) == \"3.14159265\"\nassert solution(\n    \"0 20\\n1.00 0.10\\n\"\n    ) == \"28.26445910\"\n\"\"\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"4\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"1 1\") == \"10\"\nassert solution(\"2 1\") == \"10\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 5 4\") == \"150\"\nassert solution(\"2 6 4\") == \"120\"\nassert solution(\"3 3 4\") == \"50\"\nassert solution(\"4 3 2\") == \"80\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 3) == 170, 'Expected: 170, got: {}'.format(solution(1, 3))\nassert solution(3, 3) == 150, 'Expected: 150, got: {}'.format(solution(3, 3))"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 5\") == '150'\nassert solution(\"3 2\") == '350'\nassert solution(\"3 4\") == '400'\nassert solution(\"2 2\") == '500'\nassert solution(\"2 1\") == '550'\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"170\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 3\") == \"150\"\nassert solution(\"1 2 3 4 5\") == \"300\"\nassert solution(\"1 2 4 3 6\") == \"400\"\nassert solution(\"1 3 4 5 6\") == \"600\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(str(input())), str(int(float(input())) == int(input()))\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), 'The code does not work'\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1',2,3,4,5) == '150'\nassert solution('1',2,4,3,5) == '151'\nassert solution('1',2,3,4,5) == '151'\nassert solution('1',2,3,4,5) == '151'\nassert solution('1',2,3,4,5) == '151'\n"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 170\nassert solution(input()) == 150\nassert solution(input()) == 110\nassert solution(input()) == 65\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin=\n    \"5 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n\")) == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['1 1 1','1 2 2', '1 3 3','1 4 4', '2 4 5', '2 5 6', '3 4 7','3 5 8','3 6 9','3 6 10','4 5 6', '4 7 5', '5 6 7', '5 8 9', '6 7 10','6 8 10','7 9 11','7 10 12','8 11 13','8 12 14', '9 11 15', '9 13 16']) == 3\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1 2\"\nassert solution(\"1 3\") == \"1 2 3\"\nassert solution(\"1 4\") == \"1 2 4\"\nassert solution(\"2 2\") == \"1 3 2\"\nassert solution(\"2 2 2\") == \"1 3 2 3\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"8 7 4\") == \"10\"\nassert solution(\"4 5 1 2 4\") == \"2\"\nassert solution(\"3 1 4 1 6\") == \"1\"\nassert solution(\"1 6 3 4 5\") == \"2\"\nassert solution(\"1 2 2 2 3 4 5 6 7 8 9 10 11 12 13\") == \"6\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 10, \"Incorrect answer\"\n'''\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 4\") == \"5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 4 0 5 1 2 3 3 2 3 3\"\n) == \"8\"\nassert solution(\n    \"5 4 0 5 1 2 3 3 2 3 3\"\n) == \"7\"\nassert solution(\n    \"5 4 0 5 1 2 3 3 2 3 3\"\n) == \"2\"\nassert solution(\n    \"5 4 0 5 1 2 3 3 2 3 3\"\n) == \"3\"\nassert solution(\n    \"5 4 0 5 1 2 3 3 2 3 3\"\n) == \"4\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n1 1\n1 0\n1 0\n1 0\n1 0\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1"
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0.0286\n\nSample Input 3:\n10\n2 1 2 3 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    "
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5 1 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 0 2 0 3 0\") == \"0.5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3,1,2,1,3,2,4,3,5,4,3,6,7,9,0\") == \"1.5\""
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n    ]\n) == \"0.5\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\"\n\n\nimport sys"
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    input\n    ) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 3 2 1\") == \"3\"\nassert solution(\"2 3 3 3 3 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 2 2 2 2 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 2 2 2 2 2\") == \"3\"\nassert solution(\"2 2 2 2 2 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n\nSample Input 3:\n1\n4\n2 3\n2 3 4\n1\n\nSample Output 3:\nIMPOSSIBLE\n\nSample Input 4:\n5\n4 5 6 8 5 9\n10 1 4 3 2 7\n10 2 5 4 3 6\n4 8 7 6 5 9\n5 9 2 3 1 8\n8 7 5 6 1 4\n7 4 9 1 2 3\n9 3 1 7 5 2\n3 1 6 3 8 4\n9 8 2 5 3 2\n6 4 4 4 4 7\n6 9 6 9 7 5\n\nSample Output 4:\nIMPOSSIBLE\n\nSample Input 5:\n9\n1 2 3 4 5 6 7 8 9 10\n\nSample Output 5:\nIMPOSSIBLE\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n\nExplanation\nGiven $n$ = 5, $1 \\le n \\le 10^5$ inches of the plank, the art is:\n\nFor each $1 \\le n \\le 10^5$ inches of the plank, create $1 + 2 + 3 + 4$ tapes of color $1$, the art should be:\n\nTapes are placed on top of each other with $1 \\le n \\le 10^5$ inches of each tape.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\n\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\n\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\n\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\n\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the plank.\nThe piece of $1 \\le n \\le 10^5$ inches of the"
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 2 3\", \"1 4 1\", \"2 5 2\", \"2 6 1\", \"3 6 0\"]) == \"IMPOSSIBLE\"\nassert solution([\"1 2 3\", \"1 4 1\", \"2 6 1\", \"3 5 2\", \"3 4 3\"]) == \"IMPOSSIBLE\"\nassert solution
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"IMPOSSIBLE\"]) == \"IMPOSSIBLE\"\nassert solution([\"IMPOSSIBLE\", \"IMPOSSIBLE\", \"IMPOSSIBLE\"]) == \"IMPOSSIBLE\"\nassert solution([\"IMPOSSIBLE\", \"IMPOSSIBLE\", \"IMPOSSIBLE\", \"IMPOSSIBLE\"]) == \"IMPOSSIBLE\"\nassert solution([\"IMPOSSIBLE\", \"IMPOSSIBLE\", \"IMPOSSIBLE\", \"IMPOSSIBLE\"]) == \"IMPOSSIBLE\"\nassert solution([\"IMPOSSIBLE\", \"IMPOSSIBLE\", \"IMPOSSIBLE\", \"IMPOSSIBLE\"]) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 10 20 30 40 50\") == \"1 2 100\"\nassert solution(\"2 28 27\") == \"1 100 100 100 100\""
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"202841\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10020\"\nassert solution(stdin) == \"10010\"\nassert solution(stdin) == \"10020\"\nassert solution(stdin) == \"10001\"\nassert solution(stdin) == \"01000\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), 'Solution should be a solution'\nassert solution(stdin) == '28 27', 'Solution should be a solution'\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), 'Not a solution'\nassert solution(stdin) == '10 20 28 27 30 40 50', 'Not a solution'\nassert solution(stdin) == '1 1 2 100', 'Not a solution'\nassert solution(stdin) == '1 1 2 100', 'Not a solution'\n"
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1002\"\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 2 100\"\n\nassert solution(stdin) == \"1 1\"\n\nassert solution(stdin) == \"1 1 1 1 1\"\n\nassert solution(stdin) == \"1 1 1 1 1 2\"\n\nassert solution(stdin) == \"1 1 1 1 1 2 3\""
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '1 2 100'\nassert solution(input) == '1 100 2'\nassert solution(input) == '1 1'\nassert solution(input) == '1 1'\nassert solution(input) == '1 1'\n"
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5090\"\nassert solution(stdin) == \"5100\"\nassert solution(stdin) == \"5101\"\nassert solution(stdin) == \"5102\"\nassert solution(stdin) == \"5103\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"101100101010101011110110101011110110101111011011110010111101101011110110101111011110110110110111101101101111001110110111101111011110111101101111011011110111101101111011011110111101101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 6\n"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2600"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"20\"\nassert solution(input()) == \"18\"\nassert solution(input()) == \"16\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"14\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '226'\nassert solution(stdin) == '348'\nassert solution(stdin) == '1227'\nassert solution(stdin) == '1597'\n"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 566\n"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['AB', 'AC', 'BC']) == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5049\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('A' '1') == 2\nassert solution('A' '2') == 2\nassert solution('A' '3') == 1\nassert solution('A' '4') == 1\nassert solution('A' '5') == 1\n"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin: str = \"\"\n) == 2600, \"Correct solution.\""
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2600\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\":)\" ) == \"possible\"\nassert solution(\":)\" ) == \"possible\"\nassert solution(\"()()\") == \"impossible\"\nassert solution(\"())(\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"()))\"\n) == \"possible\"\n\nassert solution(\"\") == \"impossible\"\n\nassert solution(\"(\") == \"possible\"\n\nassert solution(\")(\") == \"possible\"\n\nassert solution(\"()))(\") == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"possible\" or solution(input()) == \"impossible\""
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == \"possible\"\nassert solution(2) == \"impossible\"\nassert solution(4) == \"possible\"\nassert solution(5) == \"impossible\"\nassert solution(6) == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"(((()()(()()()(()())()()())))()()()()(()()()()()(()()()()()()())()()()()()()()()()()()()(()()()()()()(()()()()()()()()()(()()()()()()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"possible\", \"This isn't possible!\"\nassert solution(input()) == \"impossible\", \"This isn't possible!\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution((\"()())()\") == \"possible\", \"return value is incorrect\"\nassert solution((\"((()(()()()\")) == \"possible\", \"return value is incorrect\")\nassert solution((\"()()\")) == \"impossible\", \"return value is incorrect\"\nassert solution((\"()))())\") == \"possible\", \"return value is incorrect\"\nassert solution((\"()(()()()\")) == \"possible\", \"return value is incorrect\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"()())\") == \"(()())\"\nassert solution(\"(())()\") == \"()()\"\nassert solution(\"()))(\") == \"())()\"\nassert solution(\"((()))\") == \"()()\"\nassert solution(\"()(()))\") == \"()(())\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"possible\" or \"impossible\", \"The input is incorrect\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"((()()))()()()\") == \"possible\"\nassert solution(\"((()))()()(())\") == \"possible\"\nassert solution(\"(())())()(())\") == \"possible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 30 30 30\") == \"1800\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\",\"3\",\"1\",\"2\",\"2\",\"2\"]) == \"1\"\nassert solution([\"1\",\"2\",\"1\",\"2\",\"1\",\"1\"]) == \"1\"\nassert solution
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1000 100 100 1000 100 100 100 1000 100 1000 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100 100 100 1000 100"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(in_out()) == \"1800\"\nassert solution(in_out()) == \"3600\"\nassert solution(in_out()) == \"2400\"\nassert solution(in_out()) == \"3600\"\nassert solution(in_out()) == \"2400\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1800'\nassert solution(input()) == '1900'\nassert solution(input()) == '1901'\nassert solution(input()) == '1900'\nassert solution(input()) == '1900'\n"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1800\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"1800\"\nassert solution(\"2 1\") == \"1800\"\nassert solution(\"2\") == \"2000\"\nassert solution(\"1\") == \"2000\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3600\"\nassert solution(inp) == \"3600\"\nassert solution(inp) == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), 'incorrect return value'\n"
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    '3 2 2 0') == '1800'\nassert solution(\n    '2 3 2 1') == '1800'\nassert solution(\n    '2 2 2 0') == 'nan'\nassert solution(\n    '2 2 2 1') == 'nan'\n"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3\"), \"1 3\"\nassert solution(\"2 3\"), \"2 3\"\nassert solution(\"3 2\"), \"3 2\"\nassert solution(\"3 3\"), \"3 3\"\nassert solution(\"3 4\"), \"3 4\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'A1-B2 B1-A2 A3-B3 A2-B3 A2-C2 A2-C1 B2-C2 B2-C1 C2-B1 C1-B1 B2-C1 B3-B1 C1-C2 B3-C1 B3-C2 A3-B1 B1-C1 B1-C2 B1-C2 B1-C1 A1-B2 A1-C2 B1-C1 B1-C1 A2-B1 A2-C2 B2-C1 A2-C1 B1-C1 B1-C2 B2-C1 B2-C1 A2-C2 A2-C1 A1-B2 A1-C2 B2-C1 B2-C1 B3-C1 A3-B1 B3-C1 B3-C2 A2-C1 B2-C1 B2-C2 A2-C1 B2-C2 B2-C1 A2-C1 B1-C2 B1-C2 B1-C1 B1-C2 B3-C1 B3-C2 A3-B1 B3-C1 B3-C2 B3-C1 A3-B1 B3-C1 B3-C2 B3-C1 A2-B1 B2-C1 B2-C1 A1-C2 B1-C1 B2-C2 A2-C2 B2-C1 B2-C2 B2-C1 B2-C2 A2-C1 B3-C1 B3-C2 B3-C1 B3-C2 A3-B1 B3-C1 B3-C2 B3-C1 A2-B1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B3-C1 B3-C2 B3-C1 A2-C1 B2-C1 B2-C1 B2-C2 B2-C1 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 A2-B1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 A2-C1 B2-C1 B2-C2 B2-C1 B3-C1 B3-C2 B3-C1 B3-C2 A3-B1 B3-C1 B3-C2 B3-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 A3-B1 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B3-C1 B3-C2 A3-B1 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 A2-B1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 A2-C1 B2-C2 B2-C1 A2-C1 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 A2-C1 B2-C2 B2-C1 B2-C2 B2-C1 A3-B1 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 A2-C1 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 A2-B1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B3-C1 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 A2-B1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B3-C1 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 B3-C2 B3-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 A2-B1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 B2-C2 B2-C1 A2-C1 B2-C1 B2-C2 B2-C1 B2-C2 A2-C1 B2-C1 B2-C2 B2-C"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\") == \"A1-B2 A2-C2 A3-B3 A1-C1 A2-C2 A3-C1 A2-D1\\nA1-D1 A2-C2 A3-D1 A2-D2 A1-D1 A2-E1\\nA1-E1 A2-F1 B2-F2 B1-F1 B1-F2 B2-F1\\nA1-F1 B2-F2 B1-F1 A1-F2 B1-F1 A2-F1\"\nassert solution(\"2 4\\n6 7\\n9 10\\n12 11\\n15 16\\n19 18\\n20 21\\n22 22\\n23 23\") == \"A1-B1 A1-C1 A1-C2 A1-D1 A1-E1 A1-F1 A1-F2 A1-F3\\nA1-F3 A2-F1 B2-F2 B1-F2 B2-F2 B1-F3 A1-F4\\nA1-F4 A2-F1 B2-F2 B1-F1 B1-F2 B2-F1 A2-F2 B2-F2\"\nassert solution(\"2 4\\n6 7\\n9 10\\n12 11\\n15 16\\n19 18\\n20 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\") == \"A1-B1 A1-C1 A1-C2 A1-D1 A1-E1 A1-F1 A1-F2 A1-F3 A1-F4 A1-F5\\nA1-F5 A2-F1 B2-F2 B1-F2 B2-F2 B1-F3 A1-F4 B1-F5\\nA1-F4 B2-F2 B1-F1 B1-F2 B1-F1 B2-F2 B2-F1 A2-F2 B2-F2\"\nassert solution(\"2 4\\n6 7\\n9 10\\n12 11\\n15 16\\n19 18\\n20 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\") == \"A1-B1 A1-C1 A1-C2 A1-D1 A1-E1 A1-F1 A1-F2 A1-F3 A1-F4 A1-F5 A1-F6\\nA1-F6 A2-F1 B2-F2 B1-F2 B2-F2 B1-F3 A1-F4 B1-F5 B1-F6\\nA1-F4 B2-F2 B1-F1 B1-F2 B1-F1 B2-F2 B2-F1 A2-F2 B2-F2\"\nassert solution(\"2 3\\n4 5\\n6 7\") == \"A1-B1 A2-C1 A1-C2 A1-D1 A1-E1 A1-F1 A1-F2 A1-F3 A1-F4 A1-F5 A1-F6 A1-F7 A1-F8\\nA1-F8 A2-F1 B2-F2 B1-F2 B2-F2 B1-F3 A1-F4 B1-F5 B1-F6 B1-F7 B1-F8\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sample input) == \"A1-B1 A2-C2 B2-C1 A3-B1 A2-C2 A3-B1 B1-C2 A2-C1 B1-C2 B2-C1 B1-C2\"\n\nsample input 2:\n3 2\nSample Output 2:\nA1-B1 A2-C2 B2-C1 A3-B1 A2-C2 A3-B1 B1-C2 B2-C1 A2-C1 B2-C2 B2-C1 B1-C2 B1-C2 B2-C1 B1-C2 B1-C2\n"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == out\n"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == [\"A1-B2 B1-A2 A3-B3\", \"A2-B3 B2-A3 A1-B1\", \"A3-B1 B3-A1 A2-B2\", \"A1-C1 A2-B1 B2-C2\", \"A1-C2 A2-B2 B1-C1\", \"A1-B1 A2-C1 B2-C2\", \"A2-C1 B2-B1 C1-B2\", \"A2-C2 B2-B1 C1-B1\", \"A2-B1 C1-B2 B2-C2\", \"A2-B2 B2-C1 C1-B1\", \"A2-C1 B2-C1 B2-C2\"]\n\"\"\"\nfrom typing import List\nfrom collections import deque\nclass Solution:\n    def solution(self,stdin: str) -> str:\n        pass\ns = Solution()\nnum,m,n = map(int,stdin.split())\nnums = []\ngame = [deque(input()) for _ in range(n)]\nfor i in range(m):\n    nums.append(list(map(int,input().split())))"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'A1-B1 A2-C2 B2-C1 A2-C1 A1-B1 A1-B2 A1-C2 A1-C1'\n\n-----Algorithm-----\nGiven the number of teams and the number of players, construct a playing schedule using the number of teams as the number of players and the number of teams as the number of players.\n\nThe following are the rules for the number of players and the number of teams:\n\nThe number of players in each team is always in the range $1 \\le n \\le 25$.\nThe number of teams is always no greater than $100$.\nEach player can play in at most one game per round.\n\nExample 1:\nInput: n = 3, m = 2\nOutput: A1-B1 A2-C2 B2-C1\nExplanation:\nThere are three teams: A, B, and C.\nThe players in A, B, and C are numbered $1, 2, and 3$ respectively.\nThe number of rounds for each team is no greater than $1 \\le n \\le 25$, and the total number of rounds is no greater than $100$.\nFor example,\nInput: n = 5, m = 5\nOutput: A1-B1 A2-C2 B2-C1 A2-C1 A1-B1 A1-B2 A1-C2 A1-C1 A1-B1 A1-B2 A1-C2\n\nExample 2:\nInput: n = 2, m = 1\nOutput: A1-B1 A2-C2 B2-C1 A2-C1 A1-B1 A1-B2 A1-C1\n\nExample 3:\nInput: n = 4, m = 3\nOutput: A1-B1 A2-C2 B2-C1 A2-C1 A1-B1 A1-B2 A1-C2 A1-C1 A1-B1 A1-B2 A1-C2\n\nConstraints:\n1 <= n <= 100\n1 <= m <= 100\nAll the numbers in the input are unique.\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        https://leetcode.com/problems/playing-schedule/discuss/2491/Easy-and-Clean-Python-solution-with-explanation-understanding-the-following-problem\n        \"\"\"\n        \n        n,m = map(int,stdin.split())\n        schedule = []\n        for i in range(n):\n            schedule.append(stdin[i*n:i*n+n])\n        \n        schedule.sort()\n        \n        return '\\n'.join(schedule)\n"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3 A2-B3 B1-C1 B2-C2 A2-C1 A1-C2 A3-C1 B1-C2 A2-C2 B2-C1 B1-C1 A1-B1 B2-C2 B2-C1 B3-C1 A2-C1 A3-C2 B1-C2 B3-C2\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1 A2-C1 B2-C1 B2-C1 B2-C1 B2-C1 B1-C1 A2-C1 B1-C2 B2-C1 B2-C1 B1-C1 A1-C2 B2-C2 B3-C1 B1-C1 A1-C2 B1-C2 B2-C1 B1-C1 A1-C2 B2-C1 B2-C1 B1-C2 B2-C1 B3-C1 B1-C1 A1-C2 B2-C2 B2-C1 B2-C1 B2-C1 B2-C1 B1-C1 A2-C1 B1-C1 A2-C2 B1-C2 B1-C2 B2-C1 B3-C1 B1-C1 A1-C2 B2-C2 B3-C2\"\nassert solution(\"1 2\") == \"A1-B1 B2-A2 B1-A2 B3-A3 A2-B3 A3-B3 B1-A2 B3-A3 A2-B1 B2-A2 B2-A1 B2-A2 A2-B1 B2-A2 A2-B2 B2-A2 B3-A2 B3-A3 B1-A2 A2-B1 A1-B1 B2-A2 B2-A2 A2-B1 B2-A2 B2-A2 B1-A2 A2-B1 B1-A2 B1-A2 B1-A2 A2-B1 A2-B2 B1-A2 B2-A2 B2-A2 B2-A2 B3-A2 B1-A2 A1-B1 B1-A2 B2-A2 B2-A2 B2-A2 B3-A2 B3-A2 B1-A2 A2-B2 B2-A2 B2-A2 B2-A2 B2-A2 B3-A2 B2-A2 B1-A2 A1-B1 A2-B1 A2-B1 B1-B1 B2-A2 B1-A2 B1-B1 A1-B1 B1-A2 B2-A2 B2-A2 B2-A2 B3-A2 B2-A2 B2-A2 B1-A2 A2-B2 B2-A2 B1-A2 A2-B1 B1-B1 B1-A2 B1-A2 B1-A2 B1-A2 A2-B1 B1-B1 A2-A1 B2-A1 B2-A1 B2-A1 B1-A1 B1-A1 B1-A1 B1-A1 B1-A2 B1-A2 B1-A2 B1-A2 B2-A1 B1-A1 B1-B1 B1-A1 B1-B1 B1-B1 B1-B1 B2-A1 B1-A2 B1-A2 B2-A2 B1-A2 B1-A2 B1-B1 B1-B1 A2-A1 B1-B1 B1-B1 A2-B1 B1-B1 B1-B1 B1-B1 B1-B1 B2-A1 B1-A2 B1-B2 B1-A2 B2-B2 A1-A2 B1-A2 B1-B1 B1-A1 B2-B2 B2-B1 B2-A1 B2-B1 B2-B1 B2-B1 B1-B1 A1-A2 B1-B1 B2-B2 B1-B1 B2-B1 B1-B1 A1-B1 B1-B1 A2-B1 B2-A1 B2-B1 B1-B1 B2-A2 B2-A2 B2-A2 B2-A2 B2-A2 B2-A2 B2-A2 B1-A2 B1-A2 B1-A2 B2-A2 B2-A2 B2-A2 B3-A2 B1-B1 B1-B1 B1-B1 B2-B2 B1-A2 B1-A2 B2-B2 B2-B2 B3-B1 B2-B1 B2-B1 B2-B1 B2-B1 B3-B1 B2-B1 B3-B1 B2-B1 B2-B1 B2-B1 B3-B1 B1-B1 B1-B1 A2-A2 B1-A2 B1-A2 A1-A2 B1-A2 A1-A2 B1-B1 B1-A1 B1-B1 B1-B1 B2-B1 B1-B1 B1-B1 B2-B1 B1-B1 B2-B1 B1-B1 B2-B1 B2-B1 B2-B1 B2-B1 B2-B1 B2-B1 B2-B1 B2-B1 B1-B1 A2-B1 B1-B1 A2-B1 B2-B1 A1-B1 B1-B1 B1-B1 B2-A1 B1-B1 A2-B1 B1-A1 A1-A2 B1-A2 B1-A2 B2-A2 B2-A2 B2-A2 B2-A2 B2-A2 B2-A"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\n    \"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\n    \"2 3\") == \"A1-B2 A2-C2 B2-C1\"\nassert solution(\n    \"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\n    \"2 3\") == \"A1-C1 A2-B2 B1-C2\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"\".join(input() for _ in range(int(stdin)))) == \"9\"\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"X.XX\"), \"Unable to find solution for X.XX\"\nassert solution(\"X.X\"), \"Unable to find solution for X.X\"\nassert solution(\"X..X\"), \"Unable to find solution for X..X\"\nassert solution(\"..X\"), \"Unable to find solution for X..X\"\nassert solution(\"XXX\"), \"Unable to find solution for XXX\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['2','X','.']) == '7'\nassert solution(['4','.','.','.']) == '9'\nassert solution(['4','X','X','.','.']) == '1'\n"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2 2\", \".\", \".\", \".\", \".\", \".\", \".\"]), \"1\"\nassert solution([\"4 4\", \".\", \".\", \".\", \"X.\", \".\", \".\", \".\", \".\", \".\"]), \"4\"\nassert solution([\"4 4\", \"X.\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"]), \"X\"\nassert solution([\"2 2\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"]), \"1\"\nassert solution([\"4 4\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"]), \"2\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"X.XX\"), \"X.XX does not exist\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 0, 'Expected \"0\" but got: %s' % (solution(input),)\n"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '9'\nassert solution(input('x')) == '9'\nassert solution(input('X')) == '9'\nassert solution(input('X.X')) == '9'\nassert solution(input('X.X.X')) == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"R... F..F. F. F.. F. F. F..F. F. F..F. F.. F. F..F. F. F.. F.. F. F..F. F..F..F. F.. F..F. F..F..F..F.. F..F..F. F..F..F..F..F..F. F.. F. F..F..F..F..F..F..F..F..F..F..F. F..F..F..F..F..F..F..F. F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F..F."
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 100\nassert solution(stdin) == 500\n"
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 100, \"Test Case Failed\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 500\n"
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 600\n"
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"100\"\nassert solution(\"2\") == \"500\"\nassert solution(\"0\") == \"1\"\nassert solution(\"100\") == \"3\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"600\"\n\"\"\""
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1 100\") == 600, \"Test Case 1\"\nassert solution(\"1 1 1 1 500\") == 100, \"Test Case 2\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == answer\n\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1111\") == \"0\"\nassert solution(\"1234\") == \"1\"\nassert solution(\"100010\") == \"2\"\nassert solution(\"9\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"21\"\nassert solution(input()) == \"0\"\n\nSample Input 3:\n2\n121\nSample Output 3:\n3\n"
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"0\"\n\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"1\"\nassert solution(\"11\") == \"1\"\nassert solution(\"1111\") == \"1\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10 100') == 10, 'cancel road trip'\nassert solution('10 100', 0) == 10, 'cancel road trip'\nassert solution('10 100', 1) == 10, 'cancel road trip'\nassert solution('10 100', 2) == 10, 'cancel road trip'\nassert solution('10 100', 3) == 10, 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\\n2 1 1\") == \"1\"\nassert solution(\"2 3\\n3 4 3\") == \"3\"\nassert solution(\"4 4 4\\n5 5 5 5\") == \"1\"\nassert solution(\"4 5\\n5 3 2\") == \"2\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    '3 10'\n    '2 100'\n    '1 10'\n    '11 5'\n) == 10\nassert solution(\n    '3 10'\n    '2 100'\n    '1 10'\n    '13 5'\n) == 100\nassert solution(\n    '3 10'\n    '2 100'\n    '1 10'\n    '13 5'\n) == 5\nassert solution(\n    '3 10'\n    '2 100'\n    '1 10'\n    '13 5'\n) == 5\nassert solution(\n    '3 10'\n    '2 100'\n    '1 10'\n    '13 5'\n) == 10\n"
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"10\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 5 10\") == \"10\"\nassert solution(\"2 10\") == \"cancel road trip\"\nassert solution(\"3 10\") == \"10\"\nassert solution(\"3 10\") == \"cancel road trip\""
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"cancel road trip\""
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"10\"\nassert solution(input) == \"10\"\nassert solution(input) == \"10\"\nassert solution(input) == \"cancel road trip\"\n\"\"\""
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"cancel road trip\"\nassert solution(input()) == \"cancel road trip\"\nassert solution(input()) == \"cancel road trip\"\nassert solution(input()) == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '10', 'Wrong answer'\n"
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(f\"{n} {g}\") == \"10\"\nassert solution(f\"{n} {g}\") == \"10\"\nassert solution(f\"{n} {g}\") == \"10\"\nassert solution(f\"{n} {g}\") == \"10\"\nassert solution(f\"{n} {g}\") == \"10\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 7\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\n    \"5 7\") == \"0 7 8 11 15 16 19\"\nassert solution(\n    \"5 7\") == \"0 7 8 11 15 16 19\"\nassert solution(\n    \"5 7\") == \"0 7 8 11 15 16 19\"\nassert solution(\n    \"5 7\") == \"0 7 8 11 15 16 19\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 3 5 6 7 8 9 10\") == \"1 8 9 9 10 101 108 109\"\nassert solution
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '100 101 108 109 109'\n"
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"0 7 8 11 15 16 19\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == solution(stdin.replace(' ', ''))\n"
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input()\n) == \"100 10 20 30 40 50 60 70 80 90 100\"\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5 9 2 4 6 8 9 4 8 7\"\n) == \"2 5 6 8 9 4 7 11 15 16 19\"\nassert solution(\n    \"5 7 9 1 4 8 6 8 7\"\n) == \"1 2 7 8 5 6 10 11 15 16 19\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"10\"\n\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '1 8 9 9 100 101 108 109'\n\nassert solution(inp) == '1 8 9 9 100 101 108 109'\n\nassert solution(inp) == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 8 9 9 100 101 108 109\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"solution() failed\"\n\"\"\"\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input():\n      case:\n        print(\n          \"tests pass\"\n        )\n      \n      case:\n        pass\n      case:\n        print(\n          \"tests fail\"\n        )\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n      case:\n        print(\"tests fail\")\n      \n      case:\n        pass\n"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 4 3 2.5 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"10\\n2 3\\n-3 3\\n5\\n-3 3\\n3 0\\n0 3\\n1 1\\n0 0\\n\") == 1\nassert solution(\n    \"10\\n2 3\\n-3 3\\n3 0\\n-3 3\\n3 0\\n0 3\\n0 3\\n\") == 3\nassert solution(\n    \"1 2\\n-2 3\\n-3 2\\n-3 2\\n0 0\\n-1 -1\\n-1 -1\\n-1 -1\\n0 -2\\n\") == 3\nassert solution(\n    \"2 2\\n-2 2\\n-3 2\\n-3 2\\n0 0\\n-1 -1\\n-1 -1\\n-1 -1\\n0 -2\\n\") == 3\nassert solution(\n    \"2 2\\n-2 2\\n-3 2\\n-3 2\\n0 0\\n-1 -1\\n-1 -1\\n-1 -1\\n0 -2\\n\") == 3\n"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 3 3\",\"0 0 1\",\"3 3\",\"-3 3\",\"3 -3\",\"3 0\",\"0 3\",\"0 -3\",\"0 3\"]) == \"3\"\nassert solution([\"1 5 3\",\"0 0 1\",\"3 3\",\"-3 3\",\"3 -3\",\"3 0\",\"0 3\",\"0 -3\",\"0 3\"]) == \"1\"\nassert solution([\"1 5 3\",\"0 0 1\",\"3 3\",\"-3 3\",\"3 -3\",\"3 0\",\"0 3\",\"0 -3\",\"0 3\"]) == \"0\"\nassert solution([\"1 5 3\",\"0 0 1\",\"3 3\",\"-3 3\",\"3 -3\",\"3 0\",\"0 3\",\"0 -3\",\"0 3\"]) == \"0\"\nassert solution([\"1 1 1\",\"1 1 1\",\"1 1 1\",\"1 1 1\"]) == \"1\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\n'''\nimport sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"0\" or solution(input) == \"1\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 100000') == 0\nassert solution('1 1') == 1\nassert solution('1 1 1') == 1\nassert solution('1 2') == 1\nassert solution('1 2 1') == 1\n"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(in_str := '5 10000')) == '4'\nassert solution(in_str := '1') == '1'\nassert solution(in_str := '1') == '1'\nassert solution(in_str := '1') == '0'\nassert solution(in_str := '9') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"4\") == 1\nassert solution(\"6\") == 3\nassert solution(\"2\") == 2\nassert solution(\"10\") == 5\n"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    inp: str\n) == \"10\"\n'''\n\nfrom sys import stdin\n\nN, S = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6, \"wrong\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5 9\"\n) == \"4\"\nassert solution(\n    \"5 8\"\n) == \"4\"\nassert solution(\n    \"5 4\"\n) == \"2\"\nassert solution(\n    \"5 1\"\n) == \"0\"\nassert solution(\n    \"5 5\"\n) == \"2\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ne\") == \"DA\"\nassert solution(\"kava\") == \"DA\"\nassert solution(\"ne\") == \"NE\"\nassert solution(\"ne\") == \"ne\"\nassert solution(\"kava\") == \"kava\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"DA\"\nassert solution(stdin) == \"NE\"\n\nassert solution(stdin) == \"n\"\nassert solution(stdin) == \"kava\"\n\nassert solution(stdin) == \"jr\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'NE'"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('kava') == 'ak'\nassert solution('ne') == 'da'\nassert solution('tav') == 'tau'\n"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"DA\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nfor i in range(N):\n    print(i+1, end=\"\")\n    inp = sys.stdin.readline().strip().split()\n    print(inp[0])\n    if inp[0] == \"DA\":\n        print(\"DA\")\n        exit(0)\n    else:\n        print(\"NE\")\n        exit(0)"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('ne') == 'n'\nassert solution('da') == 'k'\nassert solution('ne') == 'n'\nassert solution('kava') == 'a'\nassert solution('kava') == 'a'\n"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 'n'\nassert solution(2) == 'a'\nassert solution(3) == 'k'\nassert solution(4) == 'a'\nassert solution(5) == 'kava'\n"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'da'\nassert solution(input()) == 'ne'\nassert solution(input()) == 'n'\nassert solution(input()) == 'kava'\nassert solution(input()) == 'ak'\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'DA'\nassert solution(stdin) == 'NE'\nassert solution(stdin) == 'DA'\nassert solution(stdin) == 'DA'\nassert solution(stdin) == 'NE'\n"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"DA\" or solution(stdin) == \"NE\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), '''The input is invalid.'''"
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 4 4') == '2 2 3 3'\nassert solution('8 10 4') == '2 2 3 3'\nassert solution('8 10 4') == '2 2 3 3'\nassert solution('8 10 4') == '2 2 3 3'\nassert solution('8 10 4') == '2 2 3 3'\n"
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('''\n1 2 3 4\n1 2 3\n1 2 3 4\n1 2 3\n1 2 3 4\n1 2 3 4\n1 2 3\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n"
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 6 4 3 7 1 6 8 4\") == \"2 0 2 1 2 0 1 1 2 0\"\nassert solution(\n    \"1 3 3 4 5 6 8 5 7 6\") == \"1 0 0 0 0 0 0 1 1 0 1\"\nassert solution(\n    \"0 0 3 4 5 6 7 8\") == \"1 0 0 0 0 0 0 0 1 1 1\"\nassert solution(\n    \"1 0 4 3\") == \"1 0 0 1\"\nassert solution(\n    \"0 4 4 3 4 3 3 3 3 3 3 3 3 3 3 3 3 3\") == \"0 3\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1, \"Invalid input\"\n\nExplanation:\nInput is as follows.\nSample Input 1:\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3 1\nSample Output 1:\n2\n\nSample Input 2:\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3 1\nSample Output 2:\n1\n\"\"\""
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"2 2\",\"1 1\",\"0 1\",\"1 0\",\"1 2 1\",\"2 1 3\"]) == \"1\"\nassert solution([\"2 2\",\"1 1\",\"0 1\",\"1 0\",\"1 2 1\",\"2 1 3\"]) == \"2\"\nassert solution([\"2 2\",\"1 1\",\"0 1\",\"1 0\",\"1 2 1\",\"2 1 3\"]) == \"3\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\"2 2\", \"1 1\", \"0 1\", \"1 0\", \"1 2 1\", \"2 1 3\"]) == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input()\n)\n"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\"2\",\"1\",\"0\",\"1\",\"1\",\"2\",\"1\",\"3\",\"2\"]) == \"1\"\nassert solution(\n    [\"2\",\"1\",\"0\",\"1\",\"1\",\"2\",\"1\",\"3\",\"2\"]) == \"2\"\nassert solution(\n    [\"2\",\"1\",\"0\",\"1\",\"1\",\"2\",\"1\",\"3\",\"2\"]) == \"2\"\nassert solution(\n    [\"2\",\"1\",\"0\",\"1\",\"1\",\"2\",\"1\",\"3\",\"2\"]) == \"1\"\nassert solution(\n    [\"2\",\"1\",\"0\",\"1\",\"1\",\"2\",\"1\",\"3\",\"2\"]) == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"10 6 0 1 5 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == 2\nassert solution(\"2 2 1 1\") == 2\nassert solution(\"2 2 1 0\") == 1\nassert solution(\"2 1 0 1 1\") == 1\nassert solution(\"2 1 2 0\") == 1\n"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        \"2\",\n        \"3\",\n        \"1\",\n        \"0\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"0\",\n        \"1\",\n        \"1\",\n    ]\n) == 2\n"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 37.5\n'''\n\n\nclass Node:\n    def __init__(self, n, w):\n        self.val = n\n        self.weight = w\n"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"40.500000000\"\n'''"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 50.500000000\n\n-----Constraints-----\n1 <= d <= 250\n1 <= w <= 10000\n1 <= t_i <= 10000\n\"\"\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"49\"\nassert solution(\"3 4\") == \"49\"\nassert solution(\"4 5\") == \"49\"\nassert solution(\"4 6\") == \"49\"\nassert solution(\"4 7\") == \"49\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 4 5 6 1') == '2.5000000000000002'\nassert solution('3 4 10 1') == '2.50000000000000003'\nassert solution('3 4 10 2') == '2.50000000000000004'\nassert solution('3 4 10 3') == '2.50000000000000005'\nassert solution('3 4 10 4') == '2.50000000000000006'\n"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"D 4 10 1\nC 6 1\nC 9 3\nD 4 10 1\nC 9 3\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nC 9 3\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10 1\nC 6 1\nD 4 10"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '40.500000000'\nassert solution(input()) == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"40.500000000\""
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '40.500000000'\nassert solution(stdin) == '49.000000000'\nassert solution(stdin) == '47.0000000000'\nassert solution(stdin) == '35.0000000000'\n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == ['5', '4', '3', '2', '1', '9', '6', '1', '8', '5', '7']\nassert solution(inp) == ['5', '4', '3', '2', '1', '9', '6', '1', '8', '5', '7']\nassert solution(inp) == ['5', '4', '3', '2', '1', '9', '6', '1', '8', '5', '7']\nassert solution(inp) == ['5', '4', '3', '2', '1', '9', '6', '1', '8', '5', '7']\nassert solution(inp) == ['5', '4', '3', '2', '1', '9', '6', '1', '8', '5', '7']\n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5 4 9 3 1 10 7 6 2\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5 4 9 3 1 10 7 6 2'\nassert solution(stdin) == 'fail'\n\n'''\n    \n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        (\"B\", 3),\n        (\"a\", 5),\n        (\"c\", 1),\n        (\"d\", 6),\n        (\"e\", 1),\n        (\"f\", 2),\n        (\"g\", 5),\n        (\"h\", 7),\n    ]\n) == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == [\"b\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"5 4 9 3 1 10 7 6 2\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == [\"fail\"]\nassert solution(stdin) == [\"5 4 9 3 1 10 7 6 2\"]\nassert solution(stdin) == [\"2 1 5\", \"6 1 9\"]\nassert solution(stdin) == [\"2 1 5\", \"6 1 9\"]\nassert solution(stdin) == [\"2 1 5\", \"6 1 9\"]\n"
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == [5, 4, 9, 3, 1, 10, 7, 6, 2]\nassert solution(stdin) == [1, 2, 6, 5, 7, 3, 8, 9, 4]"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3'\nassert solution(input('00:00')) == '3'\nassert solution(input('01:01')) == '3'\nassert solution(input('01:02')) == '3'\nassert solution(input('01:03')) == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\", \"Expected '3' for stdin.\"\n\nassert solution(stdin.replace(\" \", \"\")) == \"3\", \"Expected '3' for stdin.\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == [\"00:00\", \"01:01\", \"01:08\", \"01:09\", \"01:00\"]\nassert solution(stdin) == [\"00:00\", \"01:01\", \"01:08\", \"01:09\", \"01:00\"]\nassert solution(stdin) == [\"00:00\", \"01:01\", \"01:09\", \"01:00\", \"01:01\"]\nassert solution(stdin) == [\"00:00\", \"01:01\", \"01:09\", \"01:00\", \"01:01\"]\nassert solution(stdin) == [\"00:00\", \"01:01\", \"01:09\", \"01:00\", \"01:01\"]\n"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"00:08\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '00:00'\nassert solution(stdin) == '00:08'\nassert solution(stdin) == '00:09'\n"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '00:08:00'\n\nSample Input 3:\n00:00\n00:00\n01:01\n01:02\n01:03\n01:04\n01:05\n01:06\n01:07\n01:08\n01:09\n01:10\n01:11\n01:12\n01:13\n01:14\n01:15\n01:16\n01:17\n01:18\n01:19\n01:20\n01:21\n01:22\n01:23\n01:24\n01:25\n01:26\n01:27\n01:28\n01:29\n01:30\n01:31\n01:32\n01:33\n01:34\n01:35\n01:36\n01:37\n01:38\n01:39\n01:40\n01:41\n01:42\n01:43\n01:44\n01:45\n01:46\n01:47\n01:48\n01:49\n01:50\n01:51\n01:52\n01:53\n01:54\n01:55\n01:56\n01:57\n01:58\n01:59\n01:60\n01:61\n01:62\n01:63\n01:64\n01:65\n01:66\n01:67\n01:68\n01:69\n01:70\n01:71\n01:72\n01:73\n01:74\n01:75\n01:76\n01:77\n01:78\n01:79\n01:80\n01:81\n01:82\n01:83\n01:84\n01:85\n01:86\n01:87\n01:88\n01:89\n01:90\n01:91\n01:92\n01:93\n01:94\n01:95\n01:96\n01:97\n01:98\n01:99\n01:100\n01:101\n01:102\n01:103\n01:104\n01:105\n01:106\n01:107\n01:108\n01:109\n01:110\n01:111\n01:112\n01:113\n01:114\n01:115\n01:116\n01:117\n01:118\n01:119\n01:120\n01:121\n01:122\n01:123\n01:124\n01:125\n01:126\n01:127\n01:128\n01:129\n01:130\n01:131\n01:132\n01:133\n01:134\n01:135\n01:136\n01:137\n01:138\n01:139\n01:140\n01:141\n01:142\n01:143\n01:144\n01:145\n01:146\n01:147\n01:148\n01:149\n01:150\n01:151\n01:152\n01:153\n01:154\n01:155\n01:156\n01:157\n01:158\n01:159\n01:160\n01:161\n01:162\n01:163\n01:164\n01:165\n01:166\n01:167\n01:168\n01:169\n01:170\n01:171\n01:172\n01:173\n01:174\n01:175\n01:176\n01:177\n01:178\n01:179\n01:180\n01:181\n01:182\n01:183\n01:184\n01:185\n01:186\n01:187\n01:188\n01:189\n01:190\n01:191\n01:192\n01:193\n01:194\n01:195\n01:196\n01:197\n01:198\n01:199\n01:200\n01:201\n01:202\n01:203\n01:204\n01:205\n01:206\n01:207\n01:208\n01:209\n01:210\n01:211\n01:212\n01:213\n01:214\n01:215\n01:216\n01:217\n01:218\n01:219\n01:220\n01:221\n01:222\n01:223\n01:224\n01:225\n01:226\n01:227\n01:228\n01:229\n01:230\n01:231\n01:232\n01:233\n01:234\n01:235\n01:236\n01:237\n01:238\n01:239\n01:240\n01:241\n01:242\n01:243\n01:244\n01:245\n01:246\n01:247\n01:248\n01:249\n01:250\n01:251\n01:252\n01:253\n01:254\n01:255\n01:256\n01:257\n01:258\n01:259\n01:260\n01:261\n01:262\n01:263\n01:264\n01:265\n01:266\n01:267\n01:268\n01:269\n01:270\n01:271\n01:272\n01:273\n01:274\n01:275\n01:276\n01:277\n01:278\n01:279\n01:280\n01:281\n01:282\n01:283\n01:284\n01:285\n01:286\n01:287\n01:288\n01:289\n01:290\n01:291\n01:292\n01:293\n01:294\n01:295\n01:296\n01:297\n01:298\n01:299\n01:300\n01:301\n01:302\n01:303\n01:304\n01:305\n01:306\n01:307\n01:308\n01:309\n01:310\n01:311\n01:312\n01:313\n01:314\n01:315\n01:316\n01:317\n01:318\n01:319\n01:320\n01:321\n01:322\n01:323\n01:324\n01:325\n01:326\n01:327\n01:328\n01:329\n01:330\n01:331\n01:332\n01:333\n01:334\n01:335\n01:336\n01:337\n01:338\n01:339\n01:340\n01:341\n01:342\n01:343\n01:344\n01:345\n01:346\n01:347\n01:348\n01:349\n01:350\n01:351\n01:352\n01:353\n01:354\n01:355\n01:356\n01:357\n01"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"01:00\"\nassert solution(stdin) == \"01:00\"\nassert solution(stdin) == \"01:01\"\nassert solution(stdin) == \"01:00\"\nassert solution(stdin) == \"00:00\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"00:08\"\nassert solution(stdin) == \"00:00\"\nassert solution(stdin) == \"00:01\"\nassert solution(stdin) == \"00:01\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('(())') == '4,8:8,8:', 'Expected: 4,8:8,8:', 'Actual: ', 'Expected: 4,8:8,8:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:', 'Expected: 4,4:', 'Actual: 4,4:',"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(()) == \"4,8:8\"\nassert solution(() ) == \"4,8:8\"\nassert solution((\"(\") ) == \"4,8:8\"\nassert solution((\"(\") ) == \"4,8:8\"\nassert solution((\"(\") ) == \"4,8:8\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"()\") == \"4,8:8,8:\", \"Expected 4,8:8,8: but got: {}\".format(solution(\"()\"))\nassert solution(\"(())\") == \"4,8:8,8:\", \"Expected 4,8:8,8: but got: {}\".format(solution(\"(())\"))\nassert solution(\")\") == \"4,8:8,8:\", \"Expected 4,8:8,8: but got: {}\".format(solution(\"))\"))\nassert solution(\"()()\") == \"4,8:8,8:\", \"Expected 4,8:8,8: but got: {}\".format(solution(\"()()\"))\nassert solution(\"(()(()())()())()\") == \"8,8:8,8:\", \"Expected 8,8:8,8: but got: {}\".format(solution(\"(()()()())()()\"))\n"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"((())))((()(())())())()((()(()()()()())))\"\n) == \"4,4:\n\nSample Input 3:\n())\nSample Output 3:\n7,8:\n\nSample Input 4:\n()\nSample Output 4:\n8,8:\n"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == '8,8'\nassert solution(4) == '4,4'\nassert solution(8) == '8,8'\nassert solution(8) == '8,8'\nassert solution(4) == '4,4'\n"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"()\"), \"empty\"\nassert solution(\"()()()()()()\"), \"empty\"\nassert solution(\"(()())\"), \"()\"\nassert solution(\"((()))\"), \"()\"\nassert solution(\"(()))((()()())(()()()())(()())()()()()()(()()()()()()()()(()()()))()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\")\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", \"Wrong answer\"\n\n\n\"\"\"\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input().strip())\ns = list(input().strip())"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\u201c())()()\u201d) == \u201c()\u201d\nassert solution(\u201c()\u201d) == \u201c\u201d\nassert solution(\u201c()()\u201d) == \u201c\u201d\nassert solution(\u201c)(\u201d) == \u201c()\u201d\nassert solution(\u201c
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(()) == \"\"\nassert solution(\"())\") == \"()\"\nassert solution(\"()(()\") == \"()()\"\nassert solution(\"(()(())\") == \"()()(())\"\nassert solution(\"(()())\") == \"()()()\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5, \"Error in input, stdin should be a string of numbers separated by spaces\"\n\nSample Input 3:\n1 2\n3 4 5\nSample Output 3:\n1\n3\nExplanation 3:\nThe event number at each time, as well as the start and end date, are separated by spaces.\nIn our example, the first two values of the events at each time are separated by spaces, and the next four values are separated by spaces.\nIn our example, the first and last three events, if the number of events at each time is odd, are separated by spaces, and the end and end events are separated by a space.\n\nTest Cases\nStandard input:\n1 2\n3 4 5\nSample Output:\n5\nExplanation:\nThe duration of each event in days is the sum of their respective values.\nThe first two values are separated by a space, and the next four are separated by a space.\nThe last three events are separated by a space and the end and end events are separated by a space.\n\"\"\"\n\nimport time\nstart = time.time()"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\nSample Input 3:\n1 1\n1 1\nSample Output 3:\n-1\n\nSample Input 4:\n2\n1 2\nSample Output 4:\n-1\nSample Input 5:\n1 1\n1 1\nSample Output 5:\n3\nExplanation\nThe Earth's orbit of the Sun is located at $(0,0)$; it is performed by the Sun's motion and the moon orbit through $(1, 0)$ (period $1$).\nThe Sun's orbit's rotation angle is $(0,0)$ (period $1$).\nThe first moon's orbit's rotation angle is $(0,0)$ (period $2$), and the second moon's orbit's rotation angle is $(0,0)$ (period $2$).\nThe Moon's rotation angle is $(1, 0)$ (period $2$), and the second moon's rotation angle is $(0, 0)$ (period $2$).\nThe second moon's rotation angle is $(1, 0)$ (period $2$), and the first moon's rotation angle is $(0, 0)$ (period $1$).\nNote that the first moon's rotation angle is always greater than the second moon's rotation angle.\nThe first moon's rotation angle is always greater than the second moon's rotation angle because of the Earth's orbit and the Moon's orbit.\nNote that the second moon's rotation angle is always greater than the first moon's rotation angle.\nNote that the first moon's rotation angle is always greater than the second moon's rotation angle.\nNote that the second moon's rotation angle is always greater than the first moon's rotation angle.\nNote that the second moon's rotation angle is always greater than the first moon's rotation angle.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"-1\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"-1\"\nassert solution(input()) == \"15\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\nstdin: str,\nN: int,\nM: int) == [[5, 1, 1, 0, 0, 0], [5, 2, 3, 0, 0, 0], [5, 3, 4, 1, 0, 0], [5, 4, 5, 2, 0, 0], [5, 4, 5, 2, 1, 0], [5, 4, 5, 2, 2, 0]]\n\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"185\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nN, M = map(int, stdin.split())\n\nyear_events_types = defaultdict(list)\n\nfor _ in range(M):\n    year, event, count = stdin.split()\n    year = int(year)\n    event = int(event)\n    count = int(count)\n    year_events_types[year].append([event, count])\n\nprint(len(year_events_types))\nprint(*sorted(year_events_types.items()))"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"185\"\n\"\"\""
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 1\"), \"1\"\nassert solution(\"1 2 3 2\"), \"2\"\nassert solution(\"1 2 3 2\"), \"3\"\nassert solution(\"1 2 3 2\"), \"1\"\nassert solution(\"1 2 3 2\"), \"2\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 4 1\""
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"5 6 1 2 3 4\"\nassert solution(inp) == \"5 6\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5 4 1 2\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '5 6 1 2 3 4'"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"4 2\", \"3 4 1\", \"3 4 2\", \"2 3 4\"]) == \"5 6 1 2 3 4\"\nassert solution([\"3 4 1\", \"3 4 2\", \"2 3 4\"]) == \"2 3 4\"\nassert solution([\"3 4 1\", \"3 4 2\", \"2 3 4\"]) == \"2 3 4\"\nassert solution([\"4 2\"]) == \"1\"\nassert solution([\"1 3 4\"]) == \"1\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5 6 1 2 3 4'"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"5 6 1 2 3 4\"\nassert solution(inp) == \"1 1 2 1 2 3 4\""
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str) == \"7413\"\nassert solution(str) == \"201\"\nassert solution(str) == \"7413\"\nassert solution(str) == \"7413\"\nassert solution(str) == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 188 189 190 191 192 193 194 195 196 196 197 198 199 200 201 202 201 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '7413', 'Incorrect solution'"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"201\""
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"7513421021\"\n) == \"7413\"\nassert solution(\n    \"5110\"\n) == \"201\"\nassert solution(\n    \"1211\"\n) == \"1211\"\nassert solution(\n    \"123\"\n) == \"123\"\nassert solution(\n    \"1101\"\n) == \"1101\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(2) == 3\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()), \"1\"\n\nassert solution(input()), \"9\"\n\nassert solution(input()), \"18\"\n\nassert solution(input()), \"24\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"returned wrong result\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '7413', 'Test Failed'\nassert solution(input('sample')) == '7413', 'Test Failed'"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(201)\n"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0.733333333333333\n\"\"\""
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\") == \"1\"\nassert solution(\"0 1 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 0\") == \"1\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0.733333333333333\""
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '0.733333333333333'\nassert solution(inp) == '0.733333333333333'\nassert solution(inp) == '0.733333333333333'\nassert solution(inp) == '0.733333333333333'\nassert solution(inp) == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0.733333333333333\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0.733333333333333\"\n\"\"\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '0.6666666666666666'\nassert solution(input()) == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n2\n0 0\n0 1\n1 1\n1 0\n0 0\n\"\"\"\n    ) == \"0.666666666666667\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0.733333333333333\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '21'\nprint(f'Example 1:')\nprint('Input :'+ stdin)\nprint('Output :'+ str(solution(stdin)))\n\nprint(f'Example 2:')\nprint('Input :'+ stdin)\nprint('Output :'+ str(solution(stdin)))\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 6 1 3'), '3'\nassert solution('2 3 100'), '3'\nassert solution('2 3 100'), '3'\nassert solution('2 3 100'), '3'\nassert solution('2 3 100'), '3'\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"2\", \"3\", \"4\"]) == \"9\"\nassert solution([\"2\", \"3\", \"1\"]) == \"7\"\nassert solution([\"2\", \"1\", \"3\"]) == \"4\"\nassert solution([\"1\", \"3\", \"1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 9\n'''\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"21\""
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\", \"3\", \"4\", \"100\"]) == \"21\"\nassert solution([\"3\", \"3\", \"3\", \"100\"]) == \"21\"\nassert solution([\"3\", \"3\", \"3\", \"100\"]) == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2 3 4\", \"10 1 3\", \"10 1 10\", \"10 1 10\"]) == \"21\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(solution(input()))\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    inp: str\n) == 2\nassert solution(\n    inp: str\n) == 2\nassert solution(\n    inp: str\n) == 0\nassert solution(\n    inp: str\n) == 0\nassert solution(\n    inp: str\n) == 0\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 12\nassert solution(input()) == 7\nassert solution(input()) == 1\nassert solution(input()) == 1\nassert solution(input()) == 4\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"7\") == 2\nassert solution(\"3\") == 1\nassert solution(\"4\") == 2\nassert solution(\"9\") == 1\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"]) == \"1\"\nassert solution([\"4\",\"9\",\"10\",\"11\",\"12\"]) == \"0\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]) == \"2\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"]) == \"4\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 4\n'''\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"9\") == 4\nassert solution(\"4\") == 2\nassert solution(\"10\") == 2\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\nimport sys\nfrom itertools import permutations\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    1 2 5\n    2 3 5\n    3 4 5\n    4 8\n    '''\n) == '3'"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input() == \"5 5\") == 2\nassert solution(input() == \"4 4\") == 1\nassert solution(input() == \"3 3\") == 3\nassert solution(input() == \"3 3\") == 2\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"0\"\nassert solution(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"3\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2, 4) == 2\nassert solution(2, 5) == 3\nassert solution(4, 4) == 2\nassert solution(4, 5) == 1\nassert solution(4, 6) == 1\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 5\") == 3\nassert solution(\n    \"2 3 5\") == 4\nassert solution(\n    \"3 4 5\") == 3\nassert solution(\n    \"1 2 8\") == 2\nassert solution(\n    \"2 4 5\") == 1\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"3 4\"\nassert solution(\"4 3 1\") == \"3 4 1\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '24'\n\"\"\""
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 4\"\n) == \"6\"\nassert solution(\n    \"2 3\"\n) == \"3\"\nassert solution(\n    \"2 4\"\n) == \"4\"\nassert solution(\n    \"1 3\"\n) == \"2\"\nassert solution(\n    \"2 4\"\n) == \"0\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3 2 1 2\"\n) == '12'\n"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '6'\n\"\"\""
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0\\n') == '0\\n'\nassert solution('1\\n0\\n1\\n0\\n0\\n') == '0\\n1\\n2\\n3\\n4\\n'\n"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input=\n    \"2 3\",\n    stdin=\n    \"2 1\",\n    \n    stdout=\n    \"6\"\n    )\n"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 24"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"15\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"24\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 5\n\"\"\""
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '4'"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 2 2 2 2 2 2 2 3 2 2 3 2 2 3 2\"\n), 2\nassert solution(\n    \"1 3 5\"\n), 4\nassert solution(\n    \"1 6 7\"\n), 6\nassert solution(\n    \"2 4 5\"\n), 2\nassert solution(\n    \"2 5 1\"\n), 2\n"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2,[\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution(5,[\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"3\"\nassert solution(6,[\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"3\"\nassert solution(7,[\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution(8,[\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"3\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 21\n"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 2\nassert solution(4) == 2\nassert solution(3) == 1\nassert solution(2) == 1\nassert solution(1) == 1\n"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 9\nassert solution(stdin) == 21\nassert solution(stdin) == 42\nassert solution(stdin) == 41\nassert solution(stdin) == 22\n"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 26\n\n-----Sample Input 3-----\n1\n3 2\nSample Output 3:\n2\n\n-----Sample Input 4-----\n1\n1 2\nSample Output 4:\n1\n\n-----Sample Input 5-----\n1\n1 2\nSample Output 5:\n0\n\n-----Sample Input 6-----\n2\n1 2\nSample Output 6:\n2\n\n-----Sample Input 7-----\n1\n1 2\nSample Output 7:\n1\n\n-----Sample Input 8-----\n1\n1 2\nSample Output 8:\n2\n\n-----Sample Input 9-----\n2\n1 2\nSample Output 9:\n1\n\n-----Sample Input 10-----\n1\n2\nSample Output 10:\n1\n\n-----Sample Input 11-----\n1 2\nSample Output 11:\n3\n\n-----Sample Input 12-----\n1 2\nSample Output 12:\n2\n\n-----Sample Input 13-----\n1 2\nSample Output 13:\n2\n\n-----Sample Input 14-----\n1 2\nSample Output 14:\n2\n\n-----Sample Input 15-----\n1 2\nSample Output 15:\n1\n\n-----Sample Input 16-----\n1 2\nSample Output 16:\n1\n\n-----Sample Input 17-----\n1 2\nSample Output 17:\n2\n\n-----Sample Input 18-----\n1 2\nSample Output 18:\n2\n\n-----Sample Input 19-----\n1 2\nSample Output 19:\n1\n\n-----Sample Input 20-----\n1 2\nSample Output 20:\n2\n\n-----Sample Input 21-----\n1 2\nSample Output 21:\n2\n\n-----Sample Input 22-----\n1 2\nSample Output 22:\n2\n\n-----Sample Input 23-----\n1 2\nSample Output 23:\n1\n\n-----Sample Input 24-----\n1 2\nSample Output 24:\n2\n\n-----Sample Input 25-----\n1 2\nSample Output 25:\n2\n\n-----Sample Input 26-----\n1 2\nSample Output 26:\n1\n\n-----Sample Input 27-----\n1 2\nSample Output 27:\n2\n\n-----Sample Input 28-----\n1 2\nSample Output 28:\n2\n\n-----Sample Input 29-----\n1 2\nSample Output 29:\n2\n\n-----Sample Input 30-----\n1 2\nSample Output 30:\n2\n\n-----Sample Input 31-----\n1 2\nSample Output 31:\n2\n\n-----Sample Input 32-----\n1 2\nSample Output 32:\n2\n\n-----Sample Input 33-----\n1 2\nSample Output 33:\n1\n\n-----Sample Input 34-----\n1 2\nSample Output 34:\n2\n\n-----Sample Input 35-----\n1 2\nSample Output 35:\n1\n\n-----Sample Input 36-----\n1 2\nSample Output 36:\n2\n\n-----Sample Input 37-----\n1 2\nSample Output 37:\n1\n\n-----Sample Input 38-----\n1 2\nSample Output 38:\n2\n\n-----Sample Input 39-----\n1 2\nSample Output 39:\n1\n\n-----Sample Input 40-----\n1 2\nSample Output 40:\n1\n\n-----Sample Input 41-----\n1 2\nSample Output 41:\n2\n\n-----Sample Input 42-----\n1 2\nSample Output 42:\n1\n\n-----Sample Input 43-----\n1 2\nSample Output 43:\n2\n\n-----Sample Input 44-----\n1 2\nSample Output 44:\n2\n\n-----Sample Input 45-----\n1 2\nSample Output 45:\n1\n\n-----Sample Input 46-----\n1 2\nSample Output 46:\n2\n\n-----Sample Input 47-----\n1 2\nSample Output 47:\n2\n\n-----Sample Input 48-----\n1 2\nSample Output 48:\n2\n\n-----Sample Input 49-----\n1 2\nSample Output 49:\n1\n\n-----Sample Input 50-----\n1 2\nSample Output 50:\n2\n\n-----Sample Input 51-----\n1 2\nSample Output 51:\n2\n\n-----Sample Input 52-----\n1 2\nSample Output 52:\n1\n\n-----Sample Input 53-----\n1 2\nSample Output 53:\n2\n\n-----Sample Input 54-----\n1 2\nSample Output 54:\n1\n\n-----Sample Input 55-----\n1 2\nSample Output 55:\n2\n\n-----Sample Input 56-----\n1 2\nSample Output 56:\n1\n\n-----Sample Input 57-----\n1 2\nSample Output 57:\n2\n\n-----Sample Input 58-----\n1 2\nSample Output 58:\n2\n\n-----Sample Input 59-----\n1 2\nSample Output 59:\n1\n\n-----Sample Input 60-----\n1 2\nSample Output 60:\n2\n\n-----Sample Input 61-----\n1 2\nSample Output 61:\n2\n\n-----Sample Input 62-----\n1 2\nSample Output 62:\n1\n\n-----Sample Input 63-----\n1 2\nSample Output 63:\n2\n\n-----Sample Input 64-----\n1 2\nSample Output 64:\n1\n\n-----Sample Input 65-----\n1 2\nSample Output 65:\n2\n\n-----Sample Input 66-----\n1 2\nSample Output 66:\n1\n\n-----Sample Input 67-----\n1 2\nSample Output 67:\n2\n\n-----Sample Input 68-----\n1 2\nSample Output 68:\n1\n\n-----Sample Input 69-----\n1 2\nSample Output 69:\n2\n\n-----Sample Input 70-----\n1 2\nSample Output 70:\n1\n\n-----Sample Input 71-----\n1 2\nSample Output 71:\n2\n\n-----Sample Input 72-----\n1 2\nSample Output 72:\n2\n\n-----Sample Input 73-----\n1 2\nSample Output 73:\n2\n\n-----Sample Input 74-----\n1 2\nSample Output 74:\n2\n\n-----Sample Input 75-----\n1 2\nSample Output 75:\n2\n\n-----Sample Input 76-----\n1 2\nSample Output 76:\n2\n\n-----Sample Input 77-----\n1 2\nSample Output 77:\n1\n\n-----Sample Input 78-----\n1 2\nSample Output 78:\n2\n\n-----Sample Input 79-----\n1 2\nSample Output 79:\n2\n\n-----Sample Input 80-----\n1 2\nSample Output 80:\n1\n\n-----Sample Input 81-----\n1 2\nSample Output 81:\n2\n\n-----Sample Input 82-----\n1 2\nSample Output 82:\n2\n\n-----Sample Input 83-----\n1 2\nSample Output 83:\n1\n\n-----Sample Input 84-----\n1 2\nSample Output 84:\n2\n\n-----Sample Input 85-----\n1 2\nSample Output 85:\n2\n\n-----Sample Input 86-----\n1 2\nSample Output 86:\n1\n\n-----Sample Input 87-----\n1 2\nSample Output 87:\n2\n\n-----Sample Input 88-----\n1 2\nSample Output 88:\n1\n\n-----Sample Input 89-----\n1 2\nSample Output 89:\n2\n\n-----Sample Input 90-----\n1 2\nSample Output 90:\n2\n\n-----Sample Input 91-----\n1 2\nSample Output 91:\n1\n\n-----Sample Input 92-----\n1 2\nSample Output 92:\n2\n\n-----Sample Input 93-----\n1 2\nSample Output 93:\n2\n\n-----Sample Input 94-----\n1 2\nSample Output 94:\n1\n\n-----Sample Input 95-----\n1 2\nSample Output 95:\n2\n\n-----Sample Input 96-----\n1 2\nSample Output 96:\n2\n\n-----Sample Input 97-----\n1 2\nSample Output 97:\n2\n\n-----Sample Input 98-----\n1 2\nSample Output 98:\n1\n\n-----Sample Input 99-----\n1 2\nSample Output 99:\n2\n\n-----Sample Input 100-----\n1 2\nSample Output 100:\n1"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3\"\n    ), \"3 3\"\nassert solution(\n    \"1 4 10\"\n    ), \"3 2 2\"\nassert solution(\n    \"5 2 6\"\n    ), \"1 2 3\"\nassert solution(\n    \"11 1 3\"\n    ), \"9\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 3) == 2\nassert solution(3, 3) == 0\nassert solution(3, 3) == 2\nassert solution(3, 3) == 0\nassert solution(3, 3) == 0\n"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 10 1 2\") == \"9\"\nassert solution(\"6 10 1 3\") == \"4\"\nassert solution(\"5 3 6\") == \"2\"\nassert solution(\"5 3 10\") == \"0\"\nassert solution(\"6 3 1 2\") == \"3\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"9\"\nassert solution(\"3 3\") == \"7\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 10\n\"\"\""
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 9\n"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '9'\nassert solution('5 3 2') == '0'\nassert solution('5 3 2') == '0'\nassert solution('5 3 2') == '0'\nassert solution('5 3 2') == '0'\n"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '9', \"Test failed\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"9\""
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 10 10\") == \"3\"\nassert solution(\"15 11 12\") == \"1\"\nassert solution(\"23 24 24\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution(\"4 8 10\") == \"3\") == \"3\"\nassert solution(\"6 4 7\") == \"2\"\nassert solution(\"6 2 6 4 2\") == \"0\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str) == \"3\"\nassert solution(str) == \"5\"\nassert solution(str) == \"4\"\nassert solution(str) == \"1\"\nassert solution(str) == \"6\""
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"4\",\"2\",\"1\",\"3\",\"4\"]) == \"1\"\nassert solution([\"4\",\"3\",\"1\",\"2\"]) == \"2\"\nassert solution([\"1\",\"3\",\"1\",\"2\",\"3\"]) == \"2\"\nassert solution([\"2\",\"1\",\"2\",\"3\",\"1\"]) == \"2\"\nassert solution([\"1\",\"2\",\"1\",\"2\",\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"2\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4, [3, 1, 2, 4, 3]) == 3\nassert solution(4, [3, 1, 2, 4, 3, 7]) == 3\nassert solution(4, [1, 2, 3, 4, 5, 7]) == 2\nassert solution(4, [1, 2, 3, 4, 5, 7, 9]) == 0\nassert solution(4, [1, 2, 3, 4, 5, 7, 8, 9]) == 3\n"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 6"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 6, 'Failed'\n\"\"\"\n\nimport sys\n\nN = int(input())\n\nlist_num = []\n\nfor _ in range(N):\n    list_num.append(int(input()))\n\nlist_num.sort()\n\nans = []\nfor i in list_num:\n    if i not in ans:\n        ans.append(i)\n\nprint(len(ans))"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"An error occurred\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 10 5\") == \"18 8\"\nassert solution(\"2 7 9\") == \"17 144\"\nassert solution(\"3 10 8\") == \"24 121\"\nassert solution(\"3 7 9\") == \"45 98\"\nassert solution(\"3 1 9\") == \"24 121\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n6\\n7\\n8\\n9\\n10\") == \"8\\n10\"\nassert solution(\"3\\n7\\n8\\n9\\n10\") == \"5\\n7\\n8\\n10\"\nassert solution(\"3\\n1 2\\n3 4\\n4 5\\n6 7\\n8 9\\n10 11\\n12 12\") == \"3\"\nassert solution(\"3\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\") == \"5\"\nassert solution(\"3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\") == \"7\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '18'\nassert solution(input()) == '8'\nassert solution(input()) == '17'\nassert solution(input()) == '144'\nassert solution(input()) == '121'\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n2 2\\n2 3\\n1 4\\n1 2\\n1 3\\n1 1\\n2 2\\n2 1\\n1 1\") == \"28\"\nassert solution(\"1 2\\n2 1\\n2 2\\n1 2\\n1 1\\n1 1\") == \"3\"\nassert solution(\"1 1\\n1 1\\n1 1\\n2 1\\n2 1\\n1 1\") == \"1\"\nassert solution(\"1 1\\n1 1\\n1 1\\n2 1\\n2 1\\n2 2\\n3 2\\n4 3\\n5 4\\n6 4\\n7 3\\n8 4\\n9 3\\n10 4\\n11 4\\n12 3\\n13 4\\n14 1\\n15 1\\n16 1\\n17 1\") == \"3\"\nassert solution(\"1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"3\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '18'\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == \"17\"\nassert solution(2) == \"5\"\nassert solution(3) == \"8\"\nassert solution(4) == \"16\"\nassert solution(5) == \"77\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['2', '4', '5', '1', '2', '3', '1', '1', '1', '1', '1']) == '210'\nassert solution(['1', '2', '4', '1', '1', '1', '1', '1', '1', '1', '1']) == '10'\nassert solution(['1', '2', '4', '1', '1', '1', '1', '1', '1', '1', '1']) == '15'\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"18\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().strip())\n\nfor _ in range(n):\n    m = int(stdin.readline().strip())\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        print(a+b)\n"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"265\""
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3\"), \"2.50000000\"\nassert solution(\"2 2\"), \"2.50000000\"\nassert solution(\"1 3\"), \"2.50000000\"\nassert solution(\"0 3\"), \"2.50000000\"\nassert solution(\"0 0\"), \"0.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == 0.50000000\nassert solution(\"5 5\") == 0.50000000\nassert solution(\"5 -1\") == 0.50000000\nassert solution(\"0 4\") == 0.50000000\nassert solution(\"4 2\") == 0.50000000\n"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin.readline().strip()) == '0.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 0 0 1 0 2 1 2 2 1 0 2 0 2 0\") == 12.5\nassert solution(\"4 4 4 2 0 2 0 0 3 0 0 3 0 0\") == 4\n"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        [0, 4, 2, 1],\n        [4, 0, 2, 1],\n        [2, 4, 0, 1],\n        [1, 2, 4, 0]\n    ]) == 12.50000000"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12.5\n"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 12.50000000\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(sys.stdin.readline().rstrip()) == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 0 0\") == \"0.50000000\"\nassert solution(\"0 4 0 0 0\") == \"1.50000000\"\nassert solution(\"0 4 2 0 0\") == \"1.50000000\"\nassert solution(\"0 2 4 1 0\") == \"1.50000000\"\nassert solution(\"0 2 4 1 0\") == \"12.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\") == \"0.0\"\nassert solution(\"1 1 1\") == \"1.0\"\nassert solution(\"2 1 0\") == \"1.0\"\nassert solution(\"3 -1 -2 4\") == \"2.0\"\nassert solution(\"1 1 0\") == \"1.0\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"4\", \"1\", \"2\", \"3\", \"1\"]) == 2\nassert solution([\"4\", \"0\", \"1\", \"2\", \"0\"]) == 1\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\"]) == 0\n"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\nprint(\"The answer is correct!\")\n"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\n\n-----Examples-----\nInput 1:\n1 1 2\n2 1\n2 3\n3 1\nOutput 1:\n2\n\nInput 2:\n1 2 3\n2 1\n2 3\n3 1\nOutput 2:\n1\nExplanation:\nIf $S_1$ and $S_2$ are both private, then $S_2$ is the only other spies.\nIn this case, the message sent to $S_1$ is the only public message to $S_2$.\n\nInput 3:\n1 0 4\n1 1 0\n2 0 2\n2 2 1\n3 0 2\nOutput 3:\n1\n\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 1, \"Fail\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin=input\n    ) == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10\n'''"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\"), \"error\"\nassert solution(\"2 2 2\"), \"error\"\nassert solution(\"2 2 2\"), \"error\"\nassert solution(\"2 2 2\"), \"error\"\nassert solution(\"2 2 2\"), \"error\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 1') == 6, \"Test\"\nassert solution('2 2 2') == 30, \"Test\"\nassert solution('2 2 3') == 30, \"Test\"\nassert solution('1 2 4') == 0, \"Test\"\nassert solution('1 1') == 1, \"Test\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"6 2 1 5 2 1 2 1 6\") == \"10\"\nassert solution(\n    \"2 2 2 1 2 1 2 1 2\") == \"31\"\nassert solution(\n    \"1 5 1 3 1\") == \"29\"\nassert solution(\n    \"4 5 3 1\") == \"6\"\nassert solution(\n    \"3 3 4 3 2\") == \"2\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == \"6\"\nassert solution(\"4 1 3\") == \"14\"\nassert solution(\"3 3 3\") == \"32\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"1 2 1\") == \"0\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"6\"\nassert solution(\"2 3 2\") == \"30\"\nassert solution(\"1 2 1\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"2 1 3\") == \"0\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 28\n\nSample Input 3:\n1 2 1\nSample Output 3:\n3\n'''\n\nimport sys"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3,1) == 6\nassert solution(2,2) == 3\nassert solution(4,4) == 0\nassert solution(6,6) == 30\n"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(sys.stdin.readline()) == \"30\"\n\nSample Input 3:\n5 2 5\nSample Output 3:\n15\n"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '30', 'incorrect output'\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2019 2019 2019\") == \"2021 2019 2019\"\nassert solution(\"10000 1000000\") == \"10000 1000000\"\nassert solution(\"2 2 2\") == \"2 2 2\"\nassert solution(\"3 3 3\") == \"3 3 3\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 0, \"No solution\"\nassert solution(1) == 1, \"No solution\"\nassert solution(2) == 1, \"No solution\"\nassert solution(3) == 1, \"No solution\"\nassert solution(4) == 1, \"No solution\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1 9999999'\n\nassert solution(stdin) == '2 9999999'\n\nassert solution(stdin) == '3 9999999'\n\nassert solution(stdin) == '4 9999999'\n\nassert solution(stdin) == '5 9999999'"
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"impossible\""
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'impossible'\n\nSample Input 3:\n2\n10 1\n5\nSample Output 3:\n5\n\nSample Input 4:\n2\n3 8\n4\n5 6\nSample Output 4:\n6"
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 9999999\"\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2 3 4 5\"\nassert solution(\"0 1 0 0 1\") == \"0 1 0 1\"\nassert solution(\"6 7 8 9 10\") == \"6 7 8 9 10\"\nassert solution(\"4 1\") == \"1\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"1 9999999\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 2, \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution(stdin) == 11) == 3\n\n\n    pass\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(2)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(3)\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n\"\"\" + \"\\\"\" + \"28\" + \"\\\"\" + \"\") == \"28\"\nassert solution(\"\"\"\n4\n\"\"\" + \"\\\"\" + \"29\" + \"\\\"\" + \"\") == \"29\"\nassert solution(\"\"\"\n2\n\"\"\" + \"\\\"\" + \"34\" + \"\\\"\" + \"\") == \"34\"\nassert solution(\"\"\"\n4\n\"\"\" + \"\\\"\" + \"35\" + \"\\\"\" + \"\") == \"35\"\nassert solution(\"\"\"\n3\n\"\"\" + \"\\\"\" + \"36\" + \"\\\"\" + \"\") == \"36\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()), \"Failed\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '12'\n"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 0') == '1 1 1 2 3 4 5'\nassert solution('4 1') == '1 4'\nassert solution('4 4') == '1 5'\nassert solution('3 1') == '1 3'\nassert solution('5 5') == '1 2'"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"begin repairs\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 2 0\\n>>@\\n>~\\n\"\n) == \"2\"\nassert solution(\n    \"3 5 1\\n>>@\\n>>~\"\n) == \"2\"\nassert solution(\n    \"3 3 3\\n>>@<<\\n>>~\"\n) == \"3\"\nassert solution(\n    \"3 4 1\\n>>@\\n>>~\"\n) == \"3\"\nassert solution(\n    \"3 5 1\\n>>@\\n>>~\"\n) == \"3\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 0\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"1 0 0\") == \"1\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('a'*(stdin.index('a')+1) + 'b' + 'a') == 'b'*(stdin.index('a')+1)\n'''\n"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('') == 'begin repairs'\nassert solution('~') == 'begin repairs'\nassert solution('>') == 'begin repairs'\nassert solution('<') == 'begin repairs'\nassert solution('@') == 'begin repairs'\n"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2 0\") == \"2\"\nassert solution(\n    \"3 5 1\") == \"4\"\nassert solution(\n    \"4 3 4\") == \"5\"\nassert solution(\n    \"4 2 1\") == \"4\"\nassert solution(\n    \"4 2 0\") == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 4\nassert solution(input().upper()) == 4\n"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14+31+75=120\"\nassert solution(stdin) == \"5+025=30\""
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(14175), \"1\"\nassert solution(5025), \"2\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stderr: str) == \"30+35+78=220\"\nassert solution(stderr: str) == \"30+35+78=220\"\nassert solution(stderr: str) == \"30+35+78=220\"\nassert solution(stderr: str) == \"30+35+78=220\"\nassert solution(stderr: str) == \"30+35+78=220\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\", \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\", \"5+025=30\"\n\"\"\"\n\nclass Solution:\n    def calculateEquation(self, str_equation: str) -> str:\n        # Solution 1.\n        # a = [int(char) for char in str_equation]\n        # b = list(map(lambda x: int(x) if x!= '-' else 0, a))\n        # return str(sum(b))\n\n        # Solution 2.\n        pass\n\n\nclass Solution:\n    def calculateEquation(self, str_equation: str) -> str:\n        pass\n"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1+2\") == \"13+1=3\"\nassert solution(\"1+2+3\") == \"1+2+3=7\"\nassert solution(\"2*3*4\") == \"2*3*4=12\"\nassert solution(\"3+4*5+6*7+8*9+10+11*12+13+14+15*16+17+18+19*20+21+22+23+24+25*26+27+28+29*30+31+32+33+34+35+36*37+38+39*40+41+42+43+44+45*46*47+48+49*50+51*52+52*53+53+54*55+55+56*57+57+58*59+60+61*62+63+64+65*66+67+68+69*70+71*72+72+73+74*75+76*77+78+79+80*81+81*82+82*83+83+84+85*86*87+87+88*89+89*90+90*91+91*92+92*93+93*94+94*95+95*96+97*98*99+99*100+101*102+103*103+104*105+106*107+108*109+110*111+111*112+112*113+113+114*115+116*117+118*119+120*121+122*123+123*124+125*126+127*128+129*130+131*132+133*134+134*135+136*137+138*139+140*141+141*142+142*143+143*144*145+145*146+147*148*149+150*151+151*152+153*154+154*155+155*156+157*158+159*160+161*163+162*164+163*165+165*166+167*168+169*170+171*172+172*173+173*174+174*175+176*177+178*179+179*180+181*182+182*183+183*184+184*185+185*186*187+187*188*189+190*191*192+191*193*194+195*196*197+197*198*199+200*201*202+201*203*204+204*205*206+207*208*209+209*210*211*212+211*213*214+214*215*216+217*218*219+220*221*222+221*223*224+222*225*226+227*228*229+230*231*232+232*233*234+233*235*236+237*238*239+239*240*241+241*242*243+242*244*245+243*246*247+244*248*249+250*251*252+253*254*255+255*256*257+257*258*259+260*261*262+261*263+262*264+263*265*266+267*268*269+269*270*271+272*273*274+273*275*276+276*277*278+278*279*280+280*281*282+283*284*285+286*287*288+289*290*291+291*292*293+293*294*295+295*296*297+297*298*299+300*301*302+302*303*304+303*305*306+306*307*308+308*309*310+310*311*312+312*313*314+315*316*317+317*318*319+320*321*322+323*324*325+326*327*328+329*330*331+331*332*333+333*334*335+334*336*337+337*338*339+339*340*341+341*342*343+343*344*345+345*346*347+348*349*350+350*351*352+352*353*354+353*355*356+356*357*358+358*359*360+361*362*363+363*364*365+365*366*367+367*368*369+370*371*372+372*373*374+375*376*377+377*378*379+380*381*382+382*383*384+385*386*387+388*389*390+391*392*393+394*395*396+396*397*398+399*400*401+401*402*403+404*405*406+406*407*408+408*409*410+411*412*413+414*415*416+417*418*419+420*421*422+422*423*424+423*425*426+426*427*428+428*429*430+430*431*432+433*434*435+436*437*438+439*440*441+442*443*444+445*446*447+448*449*450+450*451*452+453*454*455+456*457*458+458*459*460+461*462*463+464*465*466+467*468*469+470*471*472+473*474*475+476*477*478+479*480*481+481*482*483+484*485*486+487*488*489+490*491*492+493*494*495+495*496*497+498*499*500+501*502*503+503*504*505+506*507*508+509*510*511+512*513*514+515*516*517+518*519*520+521*522*523+524*525*526+526*527*528+528*529*530+530*531*532+533*534*535+535*536*537+538*539*540+541*542*543+543*544*545+546*547*548+549*550*551+551*552*553+554*555*556+557*558*559+560*561*562+563*564*565+566*567*568+569*570*571+571*572*573+573*574*575+576*577*578+579*580*581+581*582*583+582*583*584+583*585*586+588*589*590+591*592*593+593*594*595+595*596*597+597*598*599+600*601*602+601*603*604+604*605*606+606*607*608+607*609*610+610*611*612+612*613*614+615*616*617+618*619*620+621*622*623+624*625*626+627*628*629+630*631*632+633*634*635+636*637*638+639*640*641+641*642*643+642*643*644+644*645*646+646*647*648+648*649*650+650*651*652+652*653*654+653*655*656+656*657*658+658*659*660+660*661*662+661*663*664+663*665*666+666*668*669+669*670*671+671*672*673+673*674*675+675*676*677+677*678*679+680*681*682+682*683*685+683*685*"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"14+31+75=120\"\n\nTest Cases:\nTest Case #1:\nInput:\n143175=120\nOutput:\n14+31+75=120\nSample Input:\n5005=50\nOutput:\n5+50=51\n\nSample Input:\n5025=30\nOutput:\n5+025=30\n\nSample Input:\n10500=10\nOutput:\n10+10=11\n\nSample Input:\n9001=9\nOutput:\n9+9=10\n"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nassert solution('') == 'Error: Equation has no solution'\nassert solution('0') == 'Error: Equation has no solution'\nassert solution('0.9') == 'Error: Equation has no solution'\n"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"A=S\") == \"14+31+75=120\"\nassert solution(\"A=S\") == \"5+025=30\"\nassert solution(\"A=S\") == \"1+2=3\"\nassert solution(\"A=S\") == \"1+2=3\"\nassert solution(\"A=S\") == \"1+2=3\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"14+31+75=120\"\nassert solution(stdin) == \"5+025=30\"\nassert solution(stdin) == \"5+025=30\""
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5+5=\", 1) == \"5+5=1000\"\nassert solution(\"5+5=\", 2) == \"5+5=1100\"\nassert solution(\"5+5=\", 3) == \"5+5=1200\"\nassert solution(\"5+5=\", 4) == \"5+5=1300\"\nassert solution(\"5+5=\", 5) == \"5+5=1400\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"4 5\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == '1'\nassert solution(input()) == '1 2'\nassert solution(input()) == '1 3'\nassert solution(input()) == '1 3 4'\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1 2'\n\nassert solution(stdin) == '-1'\n\"\"\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 4 3 5 1 -1\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input()\n) == '5'\nassert solution(\n    input()\n) == '8'\nassert solution(\n    input()\n) == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1111\"), \"1\"\nassert solution(\"1101\"), \"0\"\nassert solution(\"110101\"), \"2\"\nassert solution(\"1001101\"), \"2\"\nassert solution(\"10011010\"), \"3\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,1) == 0\nassert solution(0,1) == 1\nassert solution(0,0) == 1\nassert solution(1,0) == 1\nassert solution(1,1) == 1\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1123\") == \"1\"\nassert solution(\"11111101\") == \"0\"\nassert solution(\"01100010\") == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1101) == \"0\"\nassert solution(1101) == \"1\"\nassert solution(1101) == \"1\"\nassert solution(1101) == \"1\"\nassert solution(1101) == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 0\n"
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1101\") == 1\nassert solution(\"1111\") == 1\nassert solution(\"10000000111101\") == 1\nassert solution(\"111101111000001\") == 1\nassert solution(\"11110111011101\") == 2\n"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"3\"\nassert solution(\"1 1 1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '1 1 1'\nassert solution(input()) == '1 1 1 3'\nassert solution(input()) == '3 3 4 1'\n"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(3)+str(3)+str(1)+str(2)+str(3)+str(1)+str(0)+str(2)+str(3)+str(4)+str(3)+str(6)+str(2)+str(4)+str(6)+str(1)+str(2)+str(3)+str(5)+str(6)+str(1)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str(3)+str(5)+str(6)+str(1)+str(2)+str(3)+str(3)+str"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3 2\"\n\nassert solution(inp) == \"1 2\"\n\nassert solution(inp) == \"0\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()==\"2 2\")==\"0\"\nassert solution(input()==\"2 1 3 1\")==\"1\"\nassert solution(input()==\"2 2\")==\"0\"\nassert solution(input()==\"3 1 2\")==\"0\"\nassert solution(input()==\"3 3 1 3\")==\"1\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3 3\", \"3 1 3\", \"2 2 1\", \"3 3 1 3\", \"1 2\", \"2 3\", \"3 1\", \"1 3\", \"3 1\"]) == \"3 3 1 3\"\nassert solution([\"3 3\", \"3 1 3\", \"2 2 1\", \"3 3 1 3\", \"1 2\", \"2 3\", \"3 1\", \"1 3\", \"3 1\"]) == \"3 3 1 3\"\nassert solution([\"2 2\", \"3 3\", \"1 3\", \"3 1\", \"1 2\", \"3 3\", \"1 3\", \"1 2\", \"3 3\"]) == \"1 1 2 3\"\nassert solution([\"3 3\", \"3 1 3\", \"2 2 1\", \"3 3 1 3\", \"1 2\", \"2 3\", \"3 1\", \"1 3\", \"3 1\"]) == \"3 3 1 3\"\nassert solution([\"3 3\", \"3 1 3\", \"2 2 1\", \"3 3 1 3\", \"1 2\", \"2 3\", \"3 1\", \"1 3\", \"3 1\"]) == \"1 1 1 1 1\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3.666666\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3.666666\"\n\nSample Input 3:\n2 2\n2 1\nSample Output 3:\n1.000000\n\nSample Input 4:\n5\n1 4 7 10 9\nSample Output 4:\n4.000000\n\"\"\""
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4.000000\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    '1 2 3 4'\n) == '3.3333333'\n\n\n\nprint('solution test passed')"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"3.000000\"\n'''\n"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3.666666\"\nassert solution(input()) == \"4.000000\"\nassert solution(input()) == \"4.50000\"\nassert solution(input()) == \"4.50000\"\nassert solution(input()) == \"4.50000\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3.6\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == 0, \"No solution.\"\nassert solution(1) == 0, \"No solution.\"\nassert solution(2) == 0, \"No solution.\"\nassert solution(3) == 0, \"No solution.\"\nassert solution(4) == 0, \"No solution.\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2.333333'\nassert solution(stdin) == '4.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4.000000'\n\"\"\""
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.750\"\n\n-----Ideas-----\n- for each color, how many sand?\n- how many is maximum and minimum?\n- how many is missing?\n- how many is any?\n- how many is the maximum and minimum?"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 2 3 5\") == 0.5\nassert solution(\n    \"2 2 3 4 5\") == 1\nassert solution(\n    \"1 2 3 4 5\") == 0.5\nassert solution(\n    \"1 2 3 4\") == 0.75\nassert solution(\n    \"2 2 3 4\") == 2\n"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\\n\"\n) == \"0.0\"\nassert solution(\n    \"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\\n\"\n) == \"0.25\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 5 5\") == \"0.750\"\nassert solution(\"3 2 5 5\") == \"0.625\"\nassert solution(\"3 2 5 5\") == \"0.5\"\nassert solution(\"3 2 5 5\") == \"0.75\"\nassert solution(\"3 2 5 5\") == \"0.25\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '0.750'"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '0.250'\nassert solution(input()) == '0.56'\nassert solution(input()) == '0.69'\nassert solution(input()) == '0.59'\nassert solution(input()) == '0.88'\n"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\") == \"0.625\"\nassert solution(\"3 3 3 3\") == \"0.0625\"\nassert solution(\"3 3 3 3\") == \"0.0625\"\nassert solution(\"3 3 3 3\") == \"0.0625\"\nassert solution(\"3 3 3 3\") == \"0.0625\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2 2 5 5\", \"2.0 2.0\", \"4.0\", \"1.0 0.0\", \"0.0 1.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.5 0.0\", \"0.0 2.0\", \"2.0 2.0\", \"0.0 0.0\", \"0.0 1.0\", \"0.0 1.0\", \"0.0 2.0\", \"0.0 0.0\"]) == \"0.625\"\nassert solution([\"2 2 5 5\", \"2.0 2.0\", \"4.0\", \"1.0 0.0\", \"0.0 1.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1.0 0.0\", \"0.0 2.0\", \"1"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"Sample Input 1\\\".\\\"\\\"\\\") == \\\"\\\"\\\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0.750\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1234567890) == 0\nassert solution(1234) == 1\nassert solution(1235) == 0\nassert solution(1234567890) == 0\nassert solution(1235) == 1\n"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 37\n"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == '2'\nassert solution('1 4 1') == '1 4 1'\nassert solution('6 8 5') == '6 8 5'\nassert solution('6 0 0') == '6 0 0'\nassert solution('2 2 0') == '2 2 0'\n"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\u201c1\u201d, \u201c3\u201d, \u201c4\u201d, \u201c0\u201d, \u201c0\u201d, \u201c0\u201d, \u201c0\u201d, \u201c6\u201d, \u201c7\u201d, \u201c8\u201d, \u201c9\u201d, \u201c0\u201d, \u201c10\u201d, \u201c11\u201d, \u201c12\u201d, \u201c13\u201d, \u201c14\u201d, \u201c15\u201d, \u201c16\u201d, \u201c17\u201d, \u201c18\u201d, \u201c19\u201d, \u201c20\u201d, \u201c21\u201d, \u201c22\u201d, \u201c23\u201d, \u201c24\u201d, \u201c25\u201d, \u201c26\u201d, \u201c27\u201d, \u201c28\u201d, \u201c29\u201d, \u201c30\u201d, \u201c31\u201d, \u201c32\u201d, \u201c33\u201d, \u201c34\u201d, \u201c35\u201d, \u201c36\u201d, \u201c37\u201d, \u201c38\u201d, \u201c39\u201d, \u201c40\u201d, \u201c41\u201d, \u201c42\u201d, \u201c43\u201d, \u201c44\u201d, \u201c45\u201d, \u201c46\u201d, \u201c47\u201d, \u201c48\u201d, \u201c49\u201d, \u201c50\u201d, \u201c51\u201d, \u201c52\u201d, \u201c53\u201d, \u201c54\u201d, \u201c55\u201d, \u201c56\u201d, \u201c57\u201d, \u201c58\u201d, \u201c59\u201d, \u201c60\u201d, \u201c61\u201d, \u201c62\u201d, \u201c63\u201d, \u201c64\u201d, \u201c65\u201d, \u201c66\u201d, \u201c67\u201d, \u201c68\u201d, \u201c69\u201d, \u201c70\u201d, \u201c71\u201d, \u201c72\u201d, \u201c73\u201d, \u201c74\u201d, \u201c75\u201d, \u201c76\u201d, \u201c77\u201d, \u201c78\u201d, \u201c79\u201d, \u201c80\u201d, \u201c81\u201d, \u201c82\u201d, \u201c83\u201d, \u201c84\u201d, \u201c85\u201d, \u201c86\u201d, \u201c87\u201d, \u201c88\u201d, \u201c89\u201d, \u201c90\u201d, \u201c91\u201d, \u201c92\u201d, \u201c93\u201d, \u201c94\u201d, \u201c95\u201d, \u201c96\u201d, \u201c97\u201d, \u201c98\u201d, \u201c99\u201d, \u201c100\u201d, \u201c101\u201d, \u201c102\u201d, \u201c103\u201d, \u201c104\u201d, \u201c105\u201d, \u201c106\u201d, \u201c107\u201d, \u201c108\u201d, \u201c109\u201d, \u201c110\u201d, \u201c111\u201d, \u201c112\u201d, \u201c113\u201d, \u201c114\u201d, \u201c115\u201d, \u201c116\u201d, \u201c117\u201d, \u201c118\u201d, \u201c119\u201d, \u201c120\u201d, \u201c121\u201d, \u201c122\u201d, \u201c123\u201d, \u201c124\u201d, \u201c125\u201d, \u201c126\u201d, \u201c127\u201d, \u201c128\u201d, \u201c129\u201d, \u201c130\u201d, \u201c131\u201d, \u201c132\u201d, \u201c133\u201d, \u201c134\u201d, \u201c135\u201d, \u201c136\u201d, \u201c137\u201d, \u201c138\u201d, \u201c139\u201d, \u201c140\u201d, \u201c141\u201d, \u201c142\u201d, \u201c143\u201d, \u201c144\u201d, \u201c145\u201d, \u201c146\u201d, \u201c147\u201d, \u201c148\u201d, \u201c149\u201d, \u201c150\u201d, \u201c151\u201d, \u201c152\u201d, \u201c153\u201d, \u201c154\u201d, \u201c155\u201d, \u201c156\u201d, \u201c157\u201d, \u201c158\u201d, \u201c159\u201d, \u201c160\u201d, \u201c161\u201d, \u201c162\u201d, \u201c163\u201d, \u201c164\u201d, \u201c165\u201d, \u201c166\u201d, \u201c167\u201d, \u201c168\u201d, \u201c169\u201d, \u201c170\u201d, \u201c171\u201d, \u201c172\u201d, \u201c173\u201d, \u201c174\u201d, \u201c175\u201d, \u201c176\u201d, \u201c177\u201d, \u201c178\u201d, \u201c179\u201d, \u201c180\u201d, \u201c181\u201d, \u201c182\u201d, \u201c183\u201d, \u201c184\u201d, \u201c185\u201d, \u201c186\u201d, \u201c187\u201d, \u201c188\u201d, \u201c189\u201d, \u201c190\u201d, \u201c191\u201d, \u201c192\u201d, \u201c193\u201d, \u201c194\u201d, \u201c195\u201d, \u201c196\u201d, \u201c197\u201d, \u201c198\u201d, \u201c199\u201d, \u201c200\u201d, \u201c201\u201d, \u201c202\u201d, \u201c203\u201d, \u201c204\u201d, \u201c205\u201d, \u201c206\u201d, \u201c207\u201d, \u201c208\u201d, \u201c209\u201d, \u201c210\u201d, \u201c211\u201d, \u201c212\u201d, \u201c213\u201d, \u201c214\u201d, \u201c215\u201d, \u201c216\u201d, \u201c217\u201d, \u201c218\u201d, \u201c219\u201d, \u201c220\u201d, \u201c221\u201d, \u201c222\u201d, \u201c223\u201d, \u201c224\u201d, \u201c225\u201d, \u201c226\u201d, \u201c227\u201d, \u201c228\u201d, \u201c229\u201d, \u201c230\u201d, \u201c231\u201d, \u201c232\ufffd"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3 3\", \"1 2 4\", \"0 3 6\", \"4 0 3\", \"4 0 3\", \"0 0 2 1\"]) == \"2\"\nassert solution([\"3 3\", \"1 2 4\", \"0 3 6\", \"4 0 3\", \"4 0 3\", \"0 0 2 1\"]) == \"37\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1 3 9 2 4\"\n    ), \"2\"\nassert solution(\n    \"1 4\"\n    ), \"1\"\nassert solution(\n    \"1 4 2\"\n    ), \"0\"\nassert solution(\n    \"3 0 0\"\n    ), \"3\"\nassert solution(\n    \"1 1 3\"\n    ), \"3\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 37\n"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 4 0 0 7 0 6 0 0 1') == '5'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"37\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \n        \n        pass\n"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 3\\n1234\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3'), '10'\nassert solution('5 3 4'), '10'\nassert solution('2 3 1 4'), '10'\nassert solution('2 3 1 4 1'), '6'\nassert solution('2 3 1 4 1 2'), '6'\n"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input()\n) == '10'\nassert solution(\n    input()\n) == '14'\nassert solution(\n    input()\n) == '18'\nassert solution(\n    input()\n) == '16'\nassert solution(\n    input()\n) == '1 4'\n"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '14'\n\"\"\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 3') == '10'\nassert solution('4 4') == '14'\nassert solution('4 1') == '18'\nassert solution('1 4') == '1 4'\nassert solution('1 1') == '1 4'\n"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"9\"\n\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 1 4\") == \"14\"\nassert solution(\"1 4 2\") == \"18\"\nassert solution(\"1 4 3\") == \"16\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1234'\n"
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1 2\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1 1 3\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1 4\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1 1 5\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 3 1') == '1'\nassert solution('2 4 2') == '4'\nassert solution('4 2 2') == '2'\nassert solution('1 1 1') == '1'\nassert solution('3 3 1') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3 4\") == \"1\"\nassert solution(\n    \"1 2 3 4 1\") == \"2\"\nassert solution(\n    \"1 2 3 4 1 1\") == \"2\"\nassert solution(\n    \"1 2 3 4 1 2\") == \"2\"\nassert solution(\n    \"1 2 3 4 1 3\") == \"2\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\n\"\"\""
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"no\", \"Test 1 failed\"\nassert solution(\"2\") == \"yes\", \"Test 2 failed\""
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"yes\""
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == 'no'\nassert solution('1') == 'no'\nassert solution('1') == 'no'\nassert solution('1') == 'no'\nassert solution('1') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"no\"\n\"\"\"\nfrom collections import defaultdict\nfrom collections import Counter"
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2 0 0 0\") == \"no\"\nassert solution(\"2 1 1 2 1\") == \"yes\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"no\"\nassert solution(\"1\") == \"yes\"\nassert solution(\"4\") == \"yes\"\nassert solution(\"9\") == \"no\"\nassert solution(\"3\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2') == 'no', 'incorrect'\n"
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3\"\n) == \"YES\"\nassert solution(\n    \"4 3\"\n) == \"NO\""
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('yes') == 'YES'\nassert solution('no') == 'NO'"
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(a) == \"YES\""
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        [\"1 2\", \"1 3\", \"1 4\"],\n        [\"2 3\", \"2 4\", \"2 5\"],\n        [\"3 4\", \"3 5\", \"4 6\"],\n        [\"1 6\", \"2 7\", \"3 8\"],\n        [\"3 9\", \"4 10\", \"5 11\"],\n    ]\n) == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3 4 2 1 2 3 2 4 4 2 1 2 2 3 2 4 1 3 1 4 4 4 2 3 2 4 4 2 1 2 2 2 1 2 1 2 2 1 3 3 2 4 4 2 3 2 4 4 1 3 1 4 4 4 2 3 2 4 4 4 2 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4 4 4 2 3 2 4"
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5 3\", \"1 2\", \"2 3\", \"1 3\", \"1 4\"]) == \"YES\"\nassert solution([\"5 3\", \"1 2\", \"2 3\", \"1 3\", \"1 4\"]) == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1 4\", \"2 3\", \"3 2\"]) == \"YES\"\nassert solution([\"1 2\", \"2 4\", \"3 3\"]) == \"NO\""
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1\") == \"consistent\"\nassert solution(\"0 1 2\") == \"consistent\"\nassert solution(\"1 0 3\") == \"consistent\"\nassert solution(\"1 0 1\") == \"consistent\"\nassert solution(\"0 2 1 3\") == \"inconsistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == 'inconsistent'\nassert solution(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == 'consistent'"
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"inconsistent\""
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"inconsistent\"\n\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0>2\") == \"consistent\"\nassert solution(\"0<2\") == \"inconsistent\"\nassert solution(\"0<3\") == \"consistent\"\nassert solution(\"0>2>3\") == \"inconsistent\"\n\"\"\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'consistent'\nassert solution(stdin) == 'inconsistent'\nassert solution(stdin) == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5 5\"\n) == \"inconsistent\"\nassert solution(\n    \"5 5\"\n) == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0 > 1'), 'inconsistent'\nassert solution('0 > 3'), 'inconsistent'\nassert solution('0 < 1'), 'inconsistent'\nassert solution('0 < 3'), 'inconsistent'\nassert solution('1 > 0'), 'consistent'\n"
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    {\n        \"n\": 4,\n        \"x\": 1,\n        \"y\": 0,\n        \"z\": 0\n    }\n) == \"4.57079633\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1.57079633\"\n\nassert solution(stdin) == \"0.0\"\n\nassert solution(stdin) == \"0.0\"\n\nassert solution(stdin) == \"0.0\"\n\nassert solution(stdin) == \"0.0\""
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1.57079633'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"11 4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\nSample Output 2:\n41938.65135885\n\"\"\") == \"1.57079633\"\nassert solution(\"\"\"1 1 0\n1 0 0\n0 0 0\nSample Output 2:\n1.57079633\n\"\"\") == \"1.57079633\"\nassert solution(\"\"\"3 3\n2 1 2\n1 1 1\n1 0 0\n2 1 1\n3 1 1\nSample Output 2:\n2.82483237\n\"\"\") == \"2.82483237\"\n\"\"\""
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4.57079633'\nassert solution(stdin) == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 3 -1\") == '1.57079633'\nassert solution(\"-1 2\") == '1.57079633'\nassert solution(\"4 2 1 -1 -1 -1 -1\") == '1.57079633'\nassert solution(\"-1 2 -1 -1 -1 -1 -1 -1 -1\") == '1.57079633'\nassert solution(\"3 3 3 3 3 3 3 3 3\") == '3.9609387320'\n"
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"19.421095\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"41938.65135885\", \"solution(stdin) does not return the expected answer\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5.57079633\"\nassert solution(stdin) == \"1.57079633\"\nassert solution(stdin) == \"1.57079633\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1.57079633\"\nassert solution(input()) == \"41938.65135885\"\nassert solution(input()) == \"7.89166098\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aacfdaabcbbaaacfda\") == \"abca\"\nassert solution(\"aaaaaa\") == \"a\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"abcabcabc\",\"abcdabc\",\"adbcabc\"]) == \"abcdabc\"\nassert solution([\"abcabcabc\",\"abcdabc\",\"adbcabc\",\"abcbabc\"]) == \"abcdabc\"\nassert solution([\"abcabcabc\",\"abcdabc\",\"adbcabc\",\"abcbabc\"]) == \"abcdabc\"\nassert solution([\"abcdabc\",\"abcdabc\",\"abcbabc\",\"abcabc\"]) == \"abcdabc\"\nassert solution([\"abcabcabc\",\"abcdabc\",\"adbcabc\",\"abcbabc\"]) == \"abcdabc\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()), \"0\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aaa\") == \"a\", \"aaaaa\"\nassert solution(\"ab\") == \"a\", \"aaaaa\"\nassert solution(\"trutiktikt\") == \"t\", \"tit\"\nassert solution(\"trutiktiktappop\") == \"t\", \"tit\"\nassert solution(\"abcabcab\") == \"a\", \"abc\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3, \"output is incorrect!\"\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 3\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(11) == 3 == 6\nassert solution(18) == 4 == 0\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input() == \"12345\")\nassert solution(input() == \"123456789\")\nassert solution(input() == \"8876\")\nassert solution(input() == \"7890\")\nassert solution(input() == \"25\")\n"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3, \"Error\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 4 3 4 1 2 6 3 2 4\"\n    ) == 12\nassert solution(\n    \"2 2\"\n    ) == 5\nassert solution(\n    \"1 3\"\n    ) == 3\nassert solution(\n    \"4 6\"\n    ) == 3\nassert solution(\n    \"4 2\"\n    ) == 2\n"
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 2\n\"\"\"\nimport sys\nfrom io import StringIO\nfrom collections import deque\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n)"
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 5) == 5, \"stdin should be a string of the form '3 5'\"\nassert solution(6, 5) == 5, \"stdin should be a string of the form '6 5'\"\nassert solution(4, 6) == 5, \"stdin should be a string of the form '4 6'\"\nassert solution(6, 6) == 5, \"stdin should be a string of the form '6 5'\"\nassert solution(1, 1) == 1, \"stdin should be a string of the form '1'\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\nstdin) == 4, \"solution() failed\"\nassert solution(\nstdin) == 5, \"solution() failed\"\nassert solution(\nstdin) == \"5\", \"solution() failed\"\nassert solution(\nstdin) == \"9\", \"solution() failed\"\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3, \"Your implementation of solution does not work with this input.\"\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"1 3 1\"\nassert solution(input()) == \"1 1 2\"\nassert solution(input()) == \"1 1 3\"\nassert solution(input()) == \"1 1 4\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0, 0, 0, 0, 0, 0, 0, 0) == 0\nassert solution(0, 0, 0, 0, 0, 0, 0, 0) == 0\nassert solution(1, 1, 0, 1, 1, 1, 0, 1) == 0\nassert solution(1, 0, 0, 1, 0, 0, 1, 0) == 0\nassert solution(1, 0, 0, 1, 0, 0, 1, 0) == 0\n"
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4 5 6 8\") == \"8\"\nassert solution(\"5 4 1 3 7 2\") == \"5\"\nassert solution(\"3 2 6 4 8 1\") == \"2\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\nSample Input 3:\n3 1\n0 10 20 30 40 50\n0 40\nSample Output 3:\n10\n"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"should be 4\"\n\"\"\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 0"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '9'\nassert solution(stdin) == '6'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == ('70', '{7, 7, 7}', '{7, 7, 7}')\n"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 18\n"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0 10 20 50') == '9'\nassert solution('0 40 10 20') == '9'\nassert solution('0 50') == '9'\nassert solution('0 100') == '9'\nassert solution('0 1000') == '9'\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"s\") == \"equal\"\nassert solution(\"\") == \"equal\"\nassert solution(\"c\") == \"not equal\"\nassert solution(\"b\") == \"not equal\"\nassert solution(\"a\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"Shuffle([1,2,1])\") == \"equal\"\nassert solution(\"Shuffle([1,2,1,2])\") == \"equal\"\nassert solution(\"Shuffle([3,2,1],[4,5,6])\") == \"not equal\"\nassert solution(\"Shuffle([3,2,1,2])\") == \"not equal\"\nassert solution(\"Shuffle([1,1])\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'equal'\nassert solution(stdin) == 'not equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"[1,2]\") == \"equal\"\nassert solution(\"[1,2]\") == \"not equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"\\\") == \"equal\"\nassert solution(\\\"\\\"\\\"\\\")!= \"not equal\"\nassert solution(\\\"\\\"\\\"\\\") == \"equal\"\nassert solution(\\\"\\\"\\\"\\\")!= \"not equal\"\nassert solution(\\\"\\\"\\\"\\\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"equal\", \"should equal\""
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"equal\"\nassert solution(stdin) == \"not equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"[1,2,1,2,3,4,5,6,1]\") == \"[1,2,3,4,5,6]\"\nassert solution(\"[1,2,1,2,3,4,5,6,1]\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"[1,2]\") == \"[1,2]\"\nassert solution(\"[1,1,1,2,2,2]\") == \"[1,1,1,2,2,2]\"\nassert solution(\"[1,1,1,1,1,1]\") == \"[1,1,1,1,1,1]\"\nassert solution(\"[1,2,3]\") == \"[1,2,3]\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"equal\"\nassert solution(stdin) == \"not equal\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"1 2 1 2\") == \"3\"\nassert solution(\"2 3 1 2\") == \"3\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"11 1 10 3 2\") == \"11\"\nassert solution(\"2 1 2 1 2\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"0 1 0 0 0\") == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Oh no'\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'Oh no'\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"5\"\nassert solution([\"1\", \"3\", \"4\", \"5\", \"6\"]) == \"6\"\nassert solution([\"1\", \"1\", \"1\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"6\", \"6\"]) == \"6\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"Wrong output\"\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    '1 2 1 2'\n    ), 'Oh no'\nSample Input 3:\n2 3\n3 2\n2 3\n3 2 1 2 3 4 5\nSample Output 3:\n4\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n        \"1 2 3 4\") == \"3 2 3 3\"\nassert solution(\n    \"2 3 4 5 6 7 8 9 10\") == \"2 2 2 2 2 2 2 2 2 2 2\"\nassert solution(\n        \"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\") == \"7\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\") == \"10\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 0\\n1 2 2 2\\n2 2 3 2\\n2 3 2 2\\n2 3 2 2\\n2 4 2 3\\n2 5 2 1\\n2 6 2 2\\n2 7 2 4\\n2 8 2 4\\n2 9 2 3\\n2 10 2 1\\n2 11 2 2\\n2 12 2 2\\n2 13 2 2\\n2 14 2 2\\n2 15 2 2\\n2 16 2 2\\n2 17 2 2\\n2 18 2 2\\n2 19 2 2\\n2 20 2 2\\n2 21 2 2\\n2 22 2 2\\n2 23 2 2\\n2 24 2 2\\n2 25 2 2\\n2 26 2 2\\n2 27 2 2\\n2 28 2 2\\n2 29 2 2\\n2 30 2 2\\n2 31 2 2\\n2 32 2 2\\n2 33 2 2\\n2 34 2 2\\n2 35 2 2\\n2 36 2 2\\n2 37 2 2\\n2 38 2 2\\n2 39 2 2\\n2 40 2 2\\n2 41 2 2\\n2 42 2 2\\n2 43 2 2\\n2 44 2 2\\n2 45 2 2\\n2 46 2 2\\n2 47 2 2\\n2 48 2 2\\n2 49 2 2\\n2 50 2 2\\n2 51 2 2\\n2 52 2 2\\n2 53 2 2\\n2 54 2 2\\n2 55 2 2\\n2 56 2 2\\n2 57 2 2\\n2 58 2 2\\n2 59 2 2\\n2 60 2 2\\n2 61 2 2\\n2 62 2 2\\n2 63 2 2\\n2 64 2 2\\n2 65 2 2\\n2 66 2 2\\n2 67 2 2\\n2 68 2 2\\n2 69 2 2\\n2 70 2 2\\n2 71 2 2\\n2 72 2 2\\n2 73 2 2\\n2 74 2 2\\n2 75 2 2\\n2 76 2 2\\n2 77 2 2\\n2 78 2 2\\n2 79 2 2\\n2 80 2 2\\n2 81 2 2\\n2 82 2 2\\n2 83 2 2\\n2 84 2 2\\n2 85 2 2\\n2 86 2 2\\n2 87 2 2\\n2 88 2 2\\n2 89 2 2\\n2 90 2 2\\n2 91 2 2\\n2 92 2 2\\n2 93 2 2\\n2 94 2 2\\n2 95 2 2\\n2 96 2 2\\n2 97 2 2\\n2 98 2 2\\n2 99 2 2\\n2 100 2 2\\n2 101 2 2\\n2 102 2 2\\n2 103 2 2\\n2 104 2 2\\n2 105 2 2\\n2 106 2 2\\n2 107 2 2\\n2 108 2 2\\n2 109 2 2\\n2 110 2 2\\n2 111 2 2\\n2 112 2 2\\n2 113 2 2\\n2 114 2 2\\n2 115 2 2\\n2 116 2 2\\n2 117 2 2\\n2 118 2 2\\n2 119 2 2\\n2 120 2 2\\n2 121 2 2\\n2 122 2 2\\n2 123 2 2\\n2 124 2 2\\n2 125 2 2\\n2 126 2 2\\n2 127 2 2\\n2 128 2 2\\n2 129 2 2\\n2 130 2 2\\n2 131 2 2\\n2 132 2 2\\n2 133 2 2\\n2 134 2 2\\n2 135 2 2\\n2 136 2 2\\n2 137 2 2\\n2 138 2 2\\n2 139 2 2\\n2 140 2 2\\n2 141 2 2\\n2 142 2 2\\n2 143 2 2\\n2 144 2 2\\n2 145 2 2\\n2 146 2 2\\n2 147 2 2\\n2 148 2 2\\n2 149 2 2\\n2 150 2 2\\n2 151 2 2\\n2 152 2 2\\n2 153 2 2\\n2 154 2 2\\n2 155 2 2\\n2 156 2 2\\n2 157 2 2\\n2 158 2 2\\n2 159 2 2\\n2 160 2 2\\n2 161 2 2\\n2 162 2 2\\n2 163 2 2\\n2 164 2 2\\n2 165 2 2\\n2 166 2 2\\n2 167 2 2\\n2 168 2 2\\n2 169 2 2\\n2 170 2 2\\n2 171 2 2\\n2 172 2 2\\n2 173 2 2\\n2 174 2 2\\n2 175 2 2\\n2 176 2 2\\n2 177 2 2\\n2 178 2 2\\n2 179 2 2\\n2 180 2 2\\n2 181 2 2\\n2 182 2 2\\n2 183 2 2\\n2 184 2 2\\n2 185 2 2\\n2 186 2 2\\n2 187 2 2\\n2 188 2 2\\n2 189 2 2\\n2 190 2 2\\n2 191 2 2\\n2 192 2 2\\n2 193 2 2\\n2 194 2 2\\n2 195 2 2\\n2 196 2 2\\n2 197 2 2\\n2 198 2 2\\n2 199 2 2\\n2 200 2 2\\n2 201 2 2\\n2 202 2 2\\n2 203 2 2\\n2 204 2 2\\n2 205 2 2\\n2 206 2 2\\n2 207 2 2\\n2 208 2 2\\n2 209 2 2\\n2 210 2 2\\n2 211 2 2\\n2 212 2 2\\n2 213 2 2\\n2 214 2 2\\n2 215 2 2\\n2 216 2 2\\n2 217 2 2\\n2 218 2 2\\n2 219 2 2\\n2 220 2 2\\n2 221 2 2\\n2 222 2 2\\n2 223 2 2\\n2 224 2 2\\n2 225 2 2\\n2 226 2 2\\n2 227 2 2\\n2 228 2 2\\n2 229 2 2\\n2 230 2 2\\n2 231 2 2\\n2 232 2 2\\n2"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Oh no\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution((\"12\", \"1\")) == \"12\"\nassert solution((\"11\", \"1\", \"1\")) == \"1\"\nassert solution((\"11\", \"1\", \"2\")) == \"1\"\nassert solution((\"11\", \"1\", \"2\", \"1\")) == \"1\"\nassert solution((\"1\", \"1\", \"1\", \"1\")) == \"1\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \"1 2 2\\n\"\n    \"2 3 1\\n\"\n    \"3 4 1\\n\"\n    \"4 1 2\\n\"\n    \"4 5 1\\n\"\n) == \"impossible\""
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"The input contains an incorrect format, the correct format is: 4 4\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == 3\nassert solution(\"0 0\") == 0\nassert solution(\"1 2\") == 2\nassert solution(\"3 4\") == 2\nassert solution(\"3 2\") == 2\n"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3,2) == 3\nassert solution(4,2,1,0) == 1\nassert solution(5,2,1,0,1) == 2\nassert solution(5,2,2,0) == 2\nassert solution(5,2,3,0) == 3\n"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"3\", \"3\"]) == \"1\"\nassert solution([\"1\", \"3\", \"2\", \"3\", \"1\"]) == \"1\"\nassert solution([\"1\", \"3\", \"2\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"4\", \"5\", \"1\", \"2\", \"3\", \"4\", \"1\"]) == \"3\"\nassert solution([\"4\", \"1\", \"1\", \"2\", \"3\", \"3\", \"4\", \"1\"]) == \"impossible\"\nassert solution([\"4\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\"]) == \"impossible\"\nassert solution([\"3\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"1\"]) == \"3\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\n'''\n\nimport re"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"possible\"\nassert solution(stdin), \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'impossible'\nprint(solution(stdin))\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"4\"\nassert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 22\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"All work\") == \"2\"\nassert solution(\"All work\") == \"3\"\nassert solution(\"All work\") == \"3\"\nassert solution(\"All work\") == \"4\"\nassert solution(\"All work\") == \"3\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str(input().strip())) == str(input().strip())\nassert solution(str(input().strip()).replace('$a_1', 'a').replace('$a_2', 'a').replace('$a_3', 'a').replace('$a_4', 'a').replace('$a_5', 'a').replace('$a_6', 'a').replace('$a_7', 'a').replace('$a_8', 'a').replace('$a_9', 'a').replace('$a_10', 'a').replace('$a_11', 'a').replace('$a_12', 'a').replace('$a_13', 'a').replace('$a_14', 'a').replace('$a_15', 'a').replace('$a_16', 'a').replace('$a_17', 'a').replace('$a_18', 'a').replace('$a_19', 'a').replace('$a_20', 'a').replace('$a_21', 'a').replace('$a_22', 'a').replace('$a_23', 'a').replace('$a_24', 'a').replace('$a_25', 'a').replace('$a_26', 'a').replace('$a_27', 'a').replace('$a_28', 'a').replace('$a_29', 'a').replace('$a_30', 'a').replace('$a_31', 'a').replace('$a_32', 'a').replace('$a_33', 'a').replace('$a_34', 'a').replace('$a_35', 'a').replace('$a_36', 'a').replace('$a_37', 'a').replace('$a_38', 'a').replace('$a_39', 'a').replace('$a_40', 'a').replace('$a_41', 'a').replace('$a_42', 'a').replace('$a_43', 'a').replace('$a_44', 'a').replace('$a_45', 'a').replace('$a_46', 'a').replace('$a_47', 'a').replace('$a_48', 'a').replace('$a_49', 'a').replace('$a_50', 'a').replace('$a_51', 'a').replace('$a_52', 'a').replace('$a_53', 'a').replace('$a_54', 'a').replace('$a_55', 'a').replace('$a_56', 'a').replace('$a_57', 'a').replace('$a_58', 'a').replace('$a_59', 'a').replace('$a_60', 'a').replace('$a_61', 'a').replace('$a_62', 'a').replace('$a_63', 'a').replace('$a_64', 'a').replace('$a_65', 'a').replace('$a_66', 'a').replace('$a_67', 'a').replace('$a_68', 'a').replace('$a_69', 'a').replace('$a_70', 'a').replace('$a_71', 'a').replace('$a_72', 'a').replace('$a_73', 'a').replace('$a_74', 'a').replace('$a_75', 'a').replace('$a_76', 'a').replace('$a_77', 'a').replace('$a_78', 'a').replace('$a_79', 'a').replace('$a_80', 'a').replace('$a_81', 'a').replace('$a_82', 'a').replace('$a_83', 'a').replace('$a_84', 'a').replace('$a_85', 'a').replace('$a_86', 'a').replace('$a_87', 'a').replace('$a_88', 'a').replace('$a_89', 'a').replace('$a_90', 'a').replace('$a_91', 'a').replace('$a_92', 'a').replace('$a_93', 'a').replace('$a_94', 'a').replace('$a_95', 'a').replace('$a_96', 'a').replace('$a_97', 'a').replace('$a_98', 'a').replace('$a_99', 'a').replace('$a_100', 'a').replace('$a_101', 'a').replace('$a_102', 'a').replace('$a_103', 'a').replace('$a_104', 'a').replace('$a_105', 'a').replace('$a_106', 'a').replace('$a_107', 'a').replace('$a_108', 'a').replace('$a_109', 'a').replace('$a_110', 'a').replace('$a_111', 'a').replace('$a_112', 'a').replace('$a_113', 'a').replace('$a_114', 'a').replace('$a_115', 'a').replace('$a_116', 'a').replace('$a_117', 'a').replace('$a_118', 'a').replace('$a_119', 'a').replace('$a_120', 'a').replace('$a_121', 'a').replace('$a_122', 'a').replace('$a_123', 'a').replace('$a_124', 'a').replace('$a_125', 'a').replace('$a_126', 'a').replace('$a_127', 'a').replace('$a_128', 'a').replace('$a_129', 'a').replace('$a_130', 'a').replace('$a_131', 'a').replace('$a_132', 'a').replace('$a_133', 'a').replace('$a_134', 'a').replace('$a_135', 'a').replace('$a_136', 'a').replace('$a_137', 'a').replace('$a_138', 'a').replace('$a_139', 'a').replace('$a_140', 'a').replace('$a_141', 'a').replace('$a_142', 'a').replace('$a_143', 'a').replace('$a_144', 'a').replace('$a_145', 'a').replace('$a_146', 'a').replace('$a_147', 'a').replace('$a_148', 'a').replace('$a_149', 'a').replace('$a_150', 'a').replace('$a_151', 'a"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"12345\") == \"12345\"\nassert solution(\"123\") == \"123\"\nassert solution(\"1234567\") == \"1234567\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"22\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \n)\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"3 2 1 4\") == \"3\"\nassert solution(\"1 3 1\") == \"3\"\nassert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n\n-----Codereview-----\nSolution:\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        return '4'\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, [3, 1]) == \"3\"\nassert solution(1, [3, 1, 5]) == \"3\"\nassert solution(1, [3, 1, 2]) == \"2\"\nassert solution(1, [4, 2, 2, 3, 2]) == \"2\"\nassert solution(1, [1, 2, 2, 3, 2, 5]) == \"2\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 1 5\") == \"3 3 5\"\nassert solution(\"1 2 4\") == \"1 2 3 4\"\nassert solution(\"1 3 5\") == \"1 3 5\"\nassert solution(\"1 3 4\") == \"1 3 4\"\nassert solution(\"2 1 2 3\") == \"2 3\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input().strip()\n) == \"8\"\n\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str(input())) == '3'\n"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"5\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"knuth-morris-pratt\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt\") == \"knuthmorrispratt\"\nassert solution(\"\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt\") == \"knuthmorrispratt\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"knuth-morris-pratt\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt-\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt-\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt-\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt-\") == \"knuthmorrispratt\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Invalid Syntax\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"knuthmorrispratt\") == \"knuth-morris-pratt\"\nassert solution(\"knuthmorrispratt\") == \"knuth-morris-pratt\"\nassert solution(\"knuthmorrispratt\") == \"knuth-morris-pratt\"\nassert solution(\"knuth-morris-pratt\") == \"knuth-morris-pratt\"\nassert solution(\"knuth-morris-pratt\") == \"knuth-morris-pratt\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a+b-c\") == \"a-b+d-c\"\nassert solution(\"a+b+c\") == \"a+b+c\"\nassert solution(\"a-b+c\") == \"a-b+c\"\nassert solution(\"a+-b\") == \"a+-b\"\nassert solution(\"a-b+\") == \"a-b+\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test_case) == ['knuth-morris-pratt', 'knuthmorrispratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmorrispratt', 'knuth-morris-pratt', 'knuthmor"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\n        [\"a+\",\"a-\",\"+\",\"a-\",\"+\",\"+\",\"a-\",\"a-\",\"+\",\"a+\",\"a+\"],\n        [\"a+\",\"a-\",\"+\",\"a-\",\"+\",\"+\",\"a-\",\"a-\",\"+\",\"a+\",\"a+\"],\n        [\"a+\",\"a-\",\"+\",\"a-\",\"+\",\"a+\",\"a+\",\"a-\",\"+\",\"a+\",\"a+\"],\n        [\"a+\",\"a-\",\"+\",\"a-\",\"+\",\"+\",\"a+\",\"a-\",\"+\",\"a+\",\"a+\"],\n        [\"a+\",\"a-\",\"+\",\"a-\",\"+\",\"+\",\"a+\",\"a-\",\"+\",\"a+\",\"a+\"],\n        [\"a+\",\"a-\",\"+\",\"a-\",\"+\",\"+\",\"a+\",\"a-\",\"+\",\"a+\",\"a+\"],\n        [\"a+\",\"a-\",\"+\",\"a-\",\"+\",\"a+\",\"a+\",\"a-\",\"+\",\"a+\",\"a+\"],\n    ]\n    ) == \"a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"n-i-\") == \"n-i\"\nassert solution(\"knuth-morris-pratt\") == \"knuthmorrispratt\"\nassert solution(\"knuthmorrispratt\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt\") == \"knuthmorrispratt\"\nassert solution(\"knuth-morris-pratt\") == \"knuthmorrispratt\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"a+b-c\") == \"-d-\", \"a+b-c failed\"\nassert solution(\"a+b-c\") == \"-d-\", \"a+b-c failed\"\nassert solution(\"a+-b-c\") == \"-d-\", \"a+-b-c failed\"\nassert solution(\"a+-b-c\") == \"-d-\", \"a+-b-c failed\"\nassert solution(\"a+b-c\") == \"+d-\", \"a+b-c failed\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"knuthmorrispratt\"\nassert solution(stdin) == \"knuthmorrispratt\"\nassert solution(stdin) == \"knuthmorrispratt\"\nassert solution(stdin) == \"knuthmorrispratt\"\nassert solution(stdin) == \"knuthmorrispratt\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n'''"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '11'\nassert solution(stdin) == '6'\nassert solution(stdin) == '5'\nassert solution(stdin) == '0'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('t0t1t2t3t4t5t6t7t8t9t10t11') == '11'\nassert solution('t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t0t"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"0 1 2 6 0\") == \"1\"\nassert solution(\n    \"0 1 2 6 0\") == \"0\"\nassert solution(\n    \"0 1 2 6 0\") == \"1\"\nassert solution(\n    \"0 1 2 6 0\") == \"1\"\nassert solution(\n    \"0 1 2 6 0\") == \"0\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == 11\nassert solution(\"3 0\") == 3\nassert solution(\"3 7 6\") == 6\nassert solution(\"3 -3\") == 1\nassert solution(\"3 -6\") == 1\n"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 1') == '0'\nassert solution('0 -1 -1') == '1'\nassert solution('0 -1 -1') == '2'\nassert solution('0 1 -1 -1') == '0'\nassert solution('0 1 -1 -1') == '1'\n"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 6\") == \"3\"\nassert solution(\"4 6\") == \"2\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input()\n) == \"3\"\nassert solution(\n    input()\n) == \"0\"\nassert solution(\n    input()\n) == \"7\"\nassert solution(\n    input()\n) == \"2\"\nassert solution(\n    input()\n) == \"2\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1 1\"\nassert solution(\"2 1\") == \"1 2 2\"\nassert solution(\"3 1\") == \"1 3 1\"\nassert solution(\"4 1\") == \"1 4 3\"\nassert solution(\"5 1\") == \"1 5 1\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 1 2 1 2 2 1\") == \"1 2\"\nassert solution(\"1 3 1 1 3 1 3 3 1\") == \"3\"\nassert solution(\"1 4 3\") == \"6\"\nassert solution(\"1 5 7\") == \"6\"\nassert solution(\"1 6 2\") == \"2\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"2 4 5 6\""
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 2') == '0'\nassert solution('1 3') == '2'\nassert solution('1 4') == '3'\nassert solution('1 5') == '4'\nassert solution('2 6') == '5'\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 4 3 5 6 7\") == \"2 5\"\nassert solution(\n    \"0 1 2 2\") == \"0\"\nassert solution(\n    \"0 2 1 3\") == \"0\"\nassert solution(\n    \"0 4 3 5\") == \"0\"\nassert solution(\n    \"1 4 3 5 6 7\") == \"2\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('7 8') == '1 2 2'\nassert solution('5 6') == '2 6 1'\nassert solution('5 7') == '2 7 2'\nassert solution('4 7 2') == '3 5 1'\nassert solution('4 7 3') == '4 7 3'\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 1\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '5'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n\n\nclass Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n        wordDict = {}\n        for word in words:\n            word = word.lower()\n            for word2 in wordDict:\n                if word2 == word:\n                    wordDict[word2].append(word)\n        ret = []\n        for word in wordDict:\n            for word2 in wordDict[word]:\n                if word2 not in ret:\n                    ret.append(word2)\n        return ret\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"4\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"2 3\") == \"1 2\"\nassert solution(\"1 2 3\") == \"1 3 2\"\nassert solution(\"1 3\") == \"1 2 3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"12\\n1 1\") == \"4\"\nassert solution(\"6\\n1 1\") == \"1\"\nassert solution(\"6\\n1 2\") == \"1\"\nassert solution(\"6\\n1 3\") == \"2\"\nassert solution(\"6\\n1 4\") == \"1\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n\n-----My Answer-----\nCorrect!\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"4\"\nassert solution(input) == \"5\"\nassert solution(input) == \"6\"\nassert solution(input) == \"1 1\"\nassert solution(input) == \"1 2\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"CPCC\") == 8\nassert solution(\"PPPP\") == 1"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('CPCC') == 2\nassert solution('PPPPCCCC') == 3\nassert solution('CPPC') == 2\nassert solution('PPPC') == 5\nassert solution('CPCCCP') == 3\n"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n\"\"\"\nimport sys"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('C') == 1\nassert solution('P') == 1\nassert solution('C') == 0\nassert solution('P') == 0\nassert solution('C') == 0\n"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPPP\") == 8\n"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"CPCC\"\n    ) == \"1\"\nassert solution(\n    \"PPPPCCCC\"\n    ) == \"8\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"CPCCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self,stdin: str) -> str:\n        \n        if len(stdin)<=1:\n            return \"1\"\n\n        res = \"\"\n        \n        for i in range(1,len(stdin)):\n            if stdin[i] == \"C\":\n                res += \"2\"\n            else:\n                res += \"1\"\n        \n        return len(res)"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('CPCC') == 8\nassert solution('PPPPCCCC') == 18\nassert solution('PPPPPPPPPPPP') == 86\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 8\nassert solution(stdin) == 10\nassert solution(stdin) == 12\nassert solution(stdin) == 7\n"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == '1'\nassert solution(s) == '8'\nassert solution(s) == '5'\nassert solution(s) == '6'\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), 'incorrect stdin'\n'''\n\nimport collections\n\nD, M, N = map(int, stdin.split())\nX = []\n\nfor i in range(D):\n    X.append(list(map(int, stdin.split())))\n\nd = collections.defaultdict(int)\nfor i in range(D):\n    d[i] = 0\n\nfor i in range(M):\n    x = list(map(int, stdin.split()))\n    for i in range(M):\n        if i!= x[i]:\n            d[i] += 1\n\nfor i in range(N):\n    x = list(map(int, stdin.split()))\n    for i in range(N):\n        if i!= x[i]:\n            d[i] -= 1\n\nans = 0\nfor k in d:\n    ans += d[k]\n\nprint(ans)\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"3 2 1\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3 1\"\nassert solution(inp) == \"3 1 2\"\nassert solution(inp) == \"1 2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5 2\", \"1 2\", \"3 3\"]) == \"1 2\"\nassert solution([\"4 2\", \"3 4\", \"1 3\", \"1 2\"]) == \"1 2 3\"\nassert solution([\"2 4\", \"1 2\", \"3 2\", \"3 4\", \"1 4\"]) == \"1 4\"\nassert solution([\"1 2\", \"2 3\", \"3 4\", \"4 2\", \"1 3\", \"1 4\", \"3 2\"]) == \"3 2 3 3 1 4 4\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4 3\"\nassert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3 2 1'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '2 3'\nassert solution(input()) == '2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 3\nassert solution(5) == 3\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 2') == '3'\nassert solution('2 3 2') == '3'\nassert solution('2 3 3') == '3'\nassert solution('1 3') == '3'\nassert solution('1 3 2') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"3 2 1\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(sample) == \"1 2 3\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"I am stopping by \u017dnidar\u0161i\u0107\u2019s house\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 3\"\n) == \"39\"\nassert solution(\n    \"5 1\"\n) == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"1\"]) == \"4\"\nassert solution([\"5\", \"1\", \"0\"]) == \"2\"\nassert solution([\"5\", \"1\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"25\"\nassert solution(\"3 2\") == \"7\"\nassert solution(\"6 3\") == \"12\"\nassert solution(\"6 2\") == \"2\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"1 0 1 1 1\") == \"4\"\nassert solution(\"1 0 1 1 2\") == \"0\"\nassert solution(\"1 0 1 2 3\") == \"0\"\nassert solution(\"1 0 1 3 4\") == \"1\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '39'\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"15\"\n\"\"\"\n\nimport sys\n\nN, K = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 2\"\nassert solution(stdin) == \"2 3 1\"\nassert solution(stdin) == \"2 4 3\""
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1 1 2'\nassert solution(stdin) == '2 4 3'"
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'x.xx'\n\"\"\"\nfrom math import factorial\n\nR,C = map(int,input().split())"
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 1 2\", \"2 3 1\", \"3 4 1\"]) == \"1 1 2\"\nassert solution([\"3 3\", \"2 3\", \"3 4\", \"3 1\", \"3 3\", \"2 4\", \"3 1\", \"1 3\", \"1 4\", \"1 2\", \"2 4\", \"1 3\", \"1 4\", \"1 2\", \"2 1\"]) == \"1 1 2\"\nassert solution([\"3 4\", \"3 1\", \"2 4\", \"3 4\", \"4 4\", \"4 1\", \"3 4\", \"3 2\", \"3 4\", \"4 3\", \"1 4\", \"3 4\", \"4 3\", \"2 4\", \"2 1\"]) == \"2 1 2\"\nassert solution([\"2 3\", \"1 3\", \"1 2\", \"2 3\", \"1 2\", \"2 3\", \"2 4\", \"1 3\", \"1 2\", \"1 3\", \"1 2\", \"2 3\", \"1 2\", \"2 4\", \"2 1\"]) == \"1 1 2\"\nassert solution([\"1 1 2\", \"2 3 1\", \"3 4 1\", \"3 1\", \"3 1\", \"2 4\", \"3 1\", \"1 2\", \"1 3\", \"1 2\", \"1 3\", \"1 2\", \"1 3\", \"1 2\", \"1 3\", \"1 2\"]) == \"2 1 2\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '1 1 2'\n\"\"\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2 3 1'\nassert solution(stdin) == '2 4 3'\nassert solution(stdin) == '1 1 2'\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == [\"1\", \"1 2\", \"2 3\", \"2\", \"2 4\", \"2 4\", \"2 3\", \"1 1 2\", \"1\"]"
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\"), \"a\"\nassert solution(\"1 1 1\"), \".\"\nassert solution(\"1 1 1\"), \".\"\nassert solution(\"1 1 1\"), \".\"\nassert solution(\"1 1 1\"), \".\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"100 1\") == \"indistinguishable\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"1 2 1\"\nassert solution(\"2 0 1\") == \"0 1 0\"\nassert solution(\"0 2 0\") == \"0 1 0\"\nassert solution(\"0 1 0\") == \"0 1 0\"\nassert solution(\"1 1 1\") == \"1 1 1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 0 1\") == \"indistinguishable\"\nassert solution(\"2 0 1\") == \"0 1\"\nassert solution(\"2 0 1\") == \"0 1\"\nassert solution(\"2 0 1\") == \"0 1\"\nassert solution(\"2 0 1\") == \"0 1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 1\",\"0 0\",\"0 0\",\"0 0\",\"0 0\",\"1 1\"]) == \"0\"\nassert solution([\"1 0\",\"1 0\",\"1 0\",\"1 0\",\"1 1\",\"1 0\"]) == \"1\"\nassert solution([\"1 0\",\"1 1\",\"1 1\",\"1 0\",\"1 0\",\"0 0\"]) == \"0\"\nassert solution([\"1 1\",\"0 1\",\"1 1\",\"1 1\",\"0 1\",\"0 1\"]) == \"0\"\nassert solution([\"1 1\",\"1 1\",\"1 0\",\"1 0\",\"0 1\",\"0 1\"]) == \"1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\nassert solution('0 2 0') == '0'\nassert solution('0 1 0') == 'indistinguishable'\nassert solution('1 1 1') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 0\nassert solution(input().split()) == 1\nassert solution(input().split()) == 2\nassert solution(input().split()) == 3\nassert solution(input().split()) == 4\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('A B C D') == '1 2 0 1'\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 'indistinguishable'\nassert solution(inp) == 'indistinguishable'\nassert solution(inp) == 'indistinguishable'\nassert solution(inp) == 'indistinguishable'\nassert solution(inp) == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0 2 1') == 'indistinguishable'\nassert solution('0 1 1') == 'indistinguishable'\nassert solution('0 2 0') == 'indistinguishable'\nassert solution('0 1 0') == 'indistinguishable'\nassert solution('0 0 0') == 'indistinguishable'\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"1111\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1111\"\nassert solution(input()) == \"1110\"\nassert solution(input()) == \"0111\"\nassert solution(input()) == \"1111\"\nassert solution(input()) == \"-1\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1\") == \"0111\"\nassert solution(\"0 0 0 0 0\") == \"1111\"\nassert solution(\"0 1 0 1 0\") == \"001111\"\nassert solution(\"0 1 1 1 1\") == \"11111\"\nassert solution(\"0 1 1 1 0\") == \"1111\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        \"0 1 0 0\",\n        \"0 0 1 0\",\n        \"0 0 0 1\"\n    ]\n) == \"1111\"\nassert solution(\n    [\n        \"1 0 0\",\n        \"1 1 0\",\n        \"0 1 1\"\n    ]\n) == \"1 11\"\nassert solution(\n    [\n        \"0 0 0\",\n        \"1 1 0\",\n        \"0 1 1\"\n    ]\n) == \"1\"\nassert solution(\n    [\n        \"0 0 0\",\n        \"0 0 1\",\n        \"1 1 0\",\n        \"1 1 1\",\n        \"0 0 0\"\n    ]\n) == \"-1\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1001\"\n    ) == \"1111\", \"Sample Input 2: \\n\" + str(stdin)\nassert solution(\n    \"1001\"\n    ) == \"1111\", \"Sample Input 2: \\n\" + str(stdin)\nassert solution(\n    \"1001\"\n    ) == \"1111\", \"Sample Input 2: \\n\" + str(stdin)\nassert solution(\n    \"1001\"\n    ) == \"-1\", \"Sample Input 2: \\n\" + str(stdin)\nassert solution(\n    \"1001\"\n    ) == \"-1\", \"Sample Input 2: \\n\" + str(stdin)\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0110\"), \"0110 is not possible\"\nassert solution(\"1001\"), \"1001 is not possible\"\nassert solution(\"0\"), \"0 is not possible\"\nassert solution(\"1111\"), \"-1 is not possible\"\nassert solution(\"1111\"), \"1 is not possible\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1101') == '1111'\nassert solution('0') == '-1'\nassert solution('1') == '1111'\nassert solution('0110') == '1110'\nassert solution('0111') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1111'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1111\"\nassert solution(stdin) == \"1111\"\nassert solution(stdin) == \"1110\"\nassert solution(stdin) == \"1111\"\nassert solution(stdin) == \"1110\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"-7\") == \"01010\"\nassert solution(\"0\") == \"01010\"\nassert solution(\"1\") == \"01010\"\nassert solution(\"3\") == \"01000\"\nassert solution(\"1\") == \"01000\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\"), \"1\" == \"1\"\nassert solution(\"3\"), \"3\" == \"0\"\nassert solution(\"9\"), \"9\" == \"0\"\nassert solution(\"-9\"), \"0\" == \"0\"\nassert solution(\"0\"), \"0\" == \"0\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == solution(input().split('-'))\n"
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"+000-\", f\"solution({stdin})\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '+0000-', \"Solution not written correctly\"\n\nSample Input 3:\n1111\nSample Output 3:\n+000-\n\nSample Input 4:\n100\nSample Output 4:\n-111\nassert solution(stdin) == '+000-', \"Solution not written correctly\"\n\nSample Input 5:\n1111111111111\nSample Output 5:\n-111111111111\nassert solution(stdin) == '-111111111111', \"Solution not written correctly\"\n\nSample Input 6:\n-111111111111\nSample Output 6:\n+111111111111\nassert solution(stdin) == '+111111111111', \"Solution not written correctly\"\n\nSample Input 7:\n1000000000000000000000000000\nSample Output 7:\n+1000000000000000000000000000\n\"\"\"\n\nimport math"
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0-0\") == \"-0\"\nassert solution(\"0+0\") == \"0-0\"\nassert solution(\"-0+1\") == \"0+1\"\nassert solution(\"1-0\") == \"-1\"\nassert solution(\"-0+0\") == \"0+0\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin=f.readline().rstrip()\n) == \"1\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '2'\n\"\"\"\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        # naive solution\n        # m1 = len(word1)\n        # m2 = len(word2)\n        # dp = [[0 for i in range(m1+1)] for j in range(m2+1)]\n        # dp[0][0] = 1\n        # for i in range(m1+1):\n        #     dp[0][i] = i\n        # for j in range(m2+1):\n        #     dp[j][0] = j\n        # for i in range(1,m1+1):\n        #     for j in range(1,m2+1):\n        #         if word1[i-1] == word2[j-1]:\n        #             dp[j][i] = dp[j-1][i-1]\n        #         else:\n        #             dp[j][i] = 1 + min(dp[j-1][i], dp[j][i-1], dp[j-1][i-1])\n        # return dp[m1][m2]\n        \n        # dynamic programming solution\n        def dp(s1, s2, dp):\n            m1 = len(s1)\n            m2 = len(s2)\n            if m1 + m2 == 0:\n                return 0\n            if dp[m1][m2]!= -1:\n                return dp[m1][m2]\n            dp[m1][m2] = 1 + min(dp[m1-1][m2], dp[m1][m2-1], dp[m1-1][m2-1])\n            return dp[m1][m2]\n        return dp(word1, word2, dp)\n    pass\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == '10'\nassert solution('2 3 4 5') == '7'\nassert solution('2 4') == '2'\nassert solution('3 4') == '6'\nassert solution('3 5') == '1'\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 1 1 1') == 2\nassert solution('2 2') == 2\nassert solution('2 3') == 2\nassert solution('2 4') == 2\nassert solution('2 5') == 2\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '9'"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\",\"3\",\"1\"]) == \"2\"\nassert solution([\"3\",\"3\",\"2\",\"2\",\"2\"]) == \"1\"\nassert solution([\"2\",\"2\",\"1\",\"2\",\"1\",\"1\",\"1\",\"1\",\"2\",\"1\",\"2\",\"2\",\"1\",\"1\",\"2\",\"2\",\"1\",\"2\",\"2\",\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"1\",\"2\",\"1\",\"1\",\"1\",\"1\",\"1\",\"2\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"2\"]) == \"8\"\nassert solution([\"3\",\"2\",\"2\",\"1\",\"1\",\"2\",\"2\",\"1\",\"2\",\"1\",\"1\",\"2\",\"1\",\"1\",\"1\",\"2\",\"1\",\"1\",\"2\",\"1\",\"1\",\"2\",\"2\",\"1\",\"1\",\"2\",\"2\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"2\",\"1\",\"1\",\"2\",\"1\",\"1\",\"1\",\"2\",\"1\",\"1\",\"2\",\"1\",\"1\",\"1\",\"1\",\"1\",\"2\",\"1\",\"1\",\"2\",\"1\",\"1\",\"1\",\"2\",\"1\",\"1\",\"2\",\"1\",\"2\",\"2\",\"2\"]) == \"13\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"Luka is bored in chemistry class. He was first bored, he loves to learn from chemistry, but he is bored. He has arranged his $K$ bacteria on a rectangular board divided in $N$ rows, labelled with numbers from $1$ to $N$ starting from the top, and $M$ columns, labelled with numbers from $1$ to $M$ starting from the left.\"\"\") == '17.0'\n"
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin) == '24'\n"
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 3 1\") == 2\nassert solution(\"2 2\") == 3\nassert solution(\"1 1 R\") == 4\nassert solution(\"010\") == -1\nassert solution(\"000\") == -1\n"
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\n\"\"\""
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 4 2\") == 7\nassert solution(\"3 4 2\") == -1\n"
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2101'\n\n\"\"\""
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin = \"\"\"3 4\n2 2\n1 1 R\n0101\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(list(map(int, input().split()))) == \"2\"\nassert solution(list(map(int, input().split()))) == \"4\"\nassert solution(list(map(int, input().split()))) == \"2\"\nassert solution(list(map(int, input().split()))) == \"4\""
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"123456\n
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()), \"Solution is not correct\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(sample_input) == \"2\"\nassert solution(sample_input) == \"4\"\nassert solution(sample_input) == \"4\"\nassert solution(sample_input) == \"4\"\nassert solution(sample_input) == \"4\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, [2]) == 1\nassert solution(4, [3, 1, 2]) == 4\nassert solution(7, [3, 1, 2, 4]) == 4\nassert solution(8, [3, 1, 2, 4, 5]) == 4\nassert solution(10, [3, 1, 2, 4, 5, 7]) == 12\n\"\"\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\"]), \"5\"\nassert solution([\"4\", \"5\", \"6\"]), \"6\"\nassert solution([\"2\", \"3\", \"5\", \"6\", \"8\"]), \"8\"\nassert solution([\"2\", \"5\", \"6\", \"8\", \"10\"]), \"10\"\nassert solution([\"2\", \"5\", \"8\", \"10\", \"15\"]), \"15\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"D 8 8\") == \"NE\"\nassert solution(\"D 3 1\") == \"1\"\nassert solution(\"D 2 2\") == \"2\"\nassert solution(\"D 1 3\") == \"3\"\nassert solution(\"D 5 6\") == \"6\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(lines) == \"3\"\nassert solution(lines) == \"NE\"\nassert solution(lines) == \"1\"\nassert solution(lines) == \"1\"\nassert solution(lines) == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NE\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('D 8 8') == 'NE'\nassert solution('D 2 4') == 'NE'\nassert solution('D 5 6') == 'NE'\nassert solution('D 6 2') == 'NE'\nassert solution('D 1 3') == 'NE'\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == \"NE\"\nassert solution(1) == \"NE\"\nassert solution(2) == \"NE\"\nassert solution(3) == \"NE\"\nassert solution(4) == \"NE\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"P 2\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sys.stdin) == \"NE\"\nassert solution(sys.stdin) == \"NE\"\nassert solution(sys.stdin) == \"NE\"\nassert solution(sys.stdin) == \"NE\"\nassert solution(sys.stdin) == \"NE\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"NE\"\nassert solution(\"2 2\") == \"NE\"\nassert solution(\"1 2\") == \"NE\"\nassert solution(\"2 1\") == \"NE\"\nassert solution(\"3 1\") == \"NE\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'P2'\nassert solution(stdin) == 'P1'\nassert solution(stdin) == 'NE'\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'NE'"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\", \"3\", \"5\"]) == \"3\"\nassert solution([\"4\", \"5\", \"7\"]) == \"3\"\nassert solution([\"5\", \"6\", \"8\"]) == \"2\"\nassert solution([\"5\", \"6\", \"7\", \"8\"]) == \"2\"\nassert solution([\"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2\", \"3\", \"5\", \"6\", \"6\", \"6\", \"6\", \"6\"]) == \"2\"\n\"\"\""
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 2 4 5 6') == '5'\nassert solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '1'\nassert solution('2 1 3') == '1'\nassert solution('2 4') == '1'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4.00000000000000') == '2.0000000000'\nassert solution('1.0 0.0 1.4') == '1.000000000000'\nassert solution('-0.4 -1.0 0.0') == '-1.000000000000'\nassert solution('0.0 1.0 -0.2') == '0.000000000000'\nassert solution('0.0 1.0 -0.25') == '-0.0000000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), 'expected'\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"2.0000000000\"\nassert solution(\"5 5\") == \"2.0000000000\"\nassert solution(\"3 9\") == \"1.0000000000\"\nassert solution(\"1 1 1\") == \"0.0000000000\"\nassert solution(\"1 0.9 0.1\") == \"0.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2.0000000000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3\"\n) == \"2.0000000000\""
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"19\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"5\"\nassert solution(\"1 100\") == \"1\"\nassert solution(\"1 1000000\") == \"1\"\nassert solution(\"1 900000000\") == \"1\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"9\""
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), '<stdin>'"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"5\"\nassert solution(\"1 100 99\") == \"99\"\nassert solution(\"1 100 729\") == \"729\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 9 9') == '9'\nassert solution('15 13 20') == '13'\nassert solution('3 1 5') == '3'\nassert solution('2 0 1') == '1'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"2 100 10\") == \"10\"\nassert solution(\"1 6 13\") == \"6\"\nassert solution(\"1 8 9 1\") == \"8\"\nassert solution(\"1 -100 100\") == \"100\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 9, 5) == 1\nassert solution(1, 100, 10) == 9\nassert solution(10, 1, 13) == 19\n"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"4\", \"4\", \"3\", \"1\", \"1\", \"2\", \"2\", \"2\", \"2\", \"3\"]) == \"7\""
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7 7\"\nassert solution(stdin) == \"7 7 7\"\nassert solution(stdin) == \"7 7 7 7\"\nassert solution(stdin) == \"7 7 7 7 7\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"7\"\n\nInput 1:\n3 2\n1 2 3\n1 4 1\n1 4 2\n2 4 5\nOutput 1:\n6\n\nInput 2:\n3 1\n4 4 2 4 4\n4 3 1\n1 4 2\nSample Output 2:\n3\n4\n\n'''"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '7'"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"10 3 4 2 1 6 1 5 2 4 6 1 3 2 5 1 7 1 8 5 3 5 1 8 5 3 2 1 6 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5 1 7 1 8 5 2 4 6 1 3 2 5"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 5\n\n\"\"\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"6\""
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\nstdin: str\n) == \"10000010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 10 3 2\") == 2\nassert solution(\"2 10 3 2\") == 2\nassert solution(\"2 10 3 2\") == 2\nassert solution(\"2 10 3 2\") == 2\nassert solution(\"2 10 3 2\") == 2\n"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12\n\n'''\n\n\nimport math"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"1 2 4\"\"\"\n    ) == \"1\"\n\"\"\"2 5\"\"\"\n    pass"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\nprint(\"Example 1:\")\nprint('Expected output:')\nprint('Example 1:')\nprint(str(solution(stdin)))\nprint('Example 2:')\nprint('Expected output:')\nprint('Example 2:')\nprint(str(solution(stdin)))\n"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \n        \"2 10 3 2\"\n        ) == \"5\"\n\nassert solution(\n    \"10 10 3 2\"\n    ) == \"3\"\n\nassert solution(\n    \"10 10 3 2\"\n    ) == \"3\"\n\nassert solution(\n    \"10 10 3 2\"\n    ) == \"3\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3 5 5') == '0'\nassert solution('2 3 5 5') == '4'\nassert solution('2 3 2') == '3'\nassert solution('2 3 4') == '1'\nassert solution('2 3 2') == '1'\n"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 10 3 2') == '4'\nassert solution('10 3 2') == '10'\nassert solution('5 3 2') == '5'\nassert solution('0 3 2') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 11\n\n'''\n"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution_solution) == \"10\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == '111'\nassert solution(s) == '2'\nassert solution(s) == '10'\nassert solution(s) == '3'\nassert solution(s) == '5'\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '111'\nassert solution(stdin) == '10'\nassert solution(stdin) == '00'\nassert solution(stdin) == '00'\nassert solution(stdin) == '00'\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"31\"\nassert solution(stdin) == \"123456789\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\".-\") == \"111\"\nassert solution(\".-.\") == \"111\"\nassert solution(\".-..\") == \"111\"\nassert solution(\".--.\") == \"111\"\nassert solution(\".-\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"3\", \"0\", \"5\", \"6\", \"9\", \"10\", \"11\"]) == \"111\"\nassert solution([\"1\", \"3\", \"0\", \"5\", \"6\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) == \"121\"\nassert solution([\"1\", \"3\", \"0\", \"5\", \"6\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) == \"60\"\n\n\"\"\""
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"111\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"00\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1234\"\n    ) == \"1011\"\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\nassert solution('5 1') == '1.500000 4.666667'\nassert solution('5 0') == '0.0'\n"
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1.500000000000000000'\n"
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 2') == '1.5'\nassert solution('5 2') == '1.5'\nassert solution('5 2') == '1.5'\nassert solution('5 2') == '1.5'\nassert solution('5 2') == '1.5'\n"
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n        [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n    ]\n) == \"1.25\"\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1.0\"\nassert solution(stdin) == \"3.0\"\nassert solution(stdin) == \"3.0\"\nassert solution(stdin) == \"3.0\"\nassert solution(stdin) == \"1.0\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1.500000 2.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1.500000 3.666667'\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(list(map(int, stdin.split()))) == \"0.5\"\nassert solution(list(map(int, stdin.split()))) == \"1.333333\""
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('n' * 4 + 'r') == 'r'\nassert solution('n' * 4 +'s') =='s'\nassert solution('n' * 4 + 'r') == 'r'\nassert solution('n' * 4 +'s') =='s'"
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1.500000 2.666667\", \"1.500000 2.666667\"\nassert solution(\"2\") == \"1.500000 3.666667\", \"1.500000 3.666667\"\nassert solution(\"3\") == \"1.500000 4.666667\", \"1.500000 4.666667\"\nassert solution(\"4\") == \"1.500000 5.666667\", \"1.500000 5.666667\"\nassert solution(\"5\") == \"1.500000 6.666667\", \"1.500000 6.666667\""
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Error\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10010') == '1'\nassert solution('10101') == '0'\nassert solution('01010') == '0'\nassert solution('101001') == '1'\n"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n'''\n"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"5\"\nassert solution(\"10010\") == \"10001\"\nassert solution(\"01010\") == \"010001\"\nassert solution(\"10101\") == \"010010\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"5\"\nassert solution(\"10010\") == \"-1\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('a' * 1000) == '1000'\nassert solution('b' * 1000) == '1000'\nassert solution('c' * 1000) == '1000'\nassert solution('d' * 1000) == '1000'\nassert solution('e' * 1000) == '1000'\n"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2, \"Solutions are not correct!\"\n\n\"\"\""
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n\"\"\"\n\nimport sys\nsys.stdin = open(\"input.txt\", 'r')\n\nN = int(input())\nS = input()\nfor i in range(N):\n    tmp = input()\n    tmp = tmp.split(' ')\n    tmp = [int(x) for x in tmp]\n    if S[i] == '1':\n        tmp[1] = tmp[1] - 1\n    tmp[0] = tmp[0] - 1\n    S = ''.join([str(x) for x in tmp])\nprint(S)\n"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"Hello World\") == \"Hello World\"\nassert solution(\"python\") == \"python\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"python\") == \"python\"\nassert solution(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"16\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\n\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 -1\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"0 -1\"\nassert solution(stdin) == \"0 1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"3 3\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\", \"0\", \"0\", \"1\", \"0\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"3 4 5 6\"\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"3 4\"\nassert solution(input) == \"3 -1\"\nassert solution(input) == \"3 1\"\nassert solution(input) == \"3 5\"\nassert solution(input) == \"3 5\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 -1\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"3 5\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0,1,2,3,4,5,6,7,8) == \"3 4\"\nassert solution(0,0,3,3,6,3,2,1,4) == \"3 -1\"\nassert solution(0,0,3,3,6,3,2,1,5) == \"-1\""
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10 -1 0 -1') == '3 4'\nassert solution('1 -1 0 -1') == '3 4'\nassert solution('0 0 -1 0 -1') == '3 4'\nassert solution('-1 -1 0 0 -1') == '3 4'\nassert solution('0 0 0 -1 0 -1') == '3 4'\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 6 5 45 20') == '2 0'\nassert solution('3 0.25 2 45 20') == '1 1.5'\nassert solution('3 0.25 0.5 45 20') == '1 1.5'\nassert solution('3 0.25 0.0 45 20') == '1 1.5'\nassert solution('3 0.25 2.5 45 20') == '2 1.5'\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == str(int(input()))\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2 5.086781'\n\"\"\"\n\nfrom math import sqrt, cos, pi, sin, atan2\nimport sys"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 0.25 2 45 20\") == \"1 5.086781\"\nassert solution(\"3 0.25 2 45 20 1\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20 1 5.086781\") == \"1 5.086781\"\n\"\"\"\n\n\n\nclass Solution:\n    def orientation(self, v, u):\n        if v[0] < u[0]:\n            return 1\n        elif u[0] < v[0]:\n            return 2\n        else:\n            return 3\n        \n    def orientation_2(self, v, u):\n        if u[1] < v[1]:\n            return 1\n        elif v[1] < u[1]:\n            return 2\n        else:\n            return 3\n            \n    def solution(self, stdin: str) -> str:\n        ans = ''\n        for i in range(0, len(stdin), 2):\n            v1 = int(stdin[i])\n            u1 = int(stdin[i + 1])\n            p = (v1 ** 2 + u1 ** 2) ** 0.5\n            print(p)\n            x = p * (v1 / 2)\n            y = (p * (u1 / 2)) - (v1 / 2)\n            print(x)\n            print(y)\n            print(self.orientation(x, y))\n            if self.orientation(x, y) == self.orientation(v1, u1):\n                ans += '0'\n            else:\n                ans += '1'\n        return ans"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2.5\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 7 3 0 0\") == \"2 7 5.086781\"\nassert solution(\"3 0 0 0 0\") == \"1 1.5\"\nassert solution(\"0 2 0 0 0\") == \"2 0\"\nassert solution(\"3 1 0 0 0\") == \"1\"\nassert solution(\"2 1.5 0 0\") == \"0\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 6 5 45 20\") == \"2 5.086781\"\nassert solution(\"0 0\") == \"1 1.5\"\nassert solution(\"2 0\") == \"1 1.5\"\nassert solution(\"1 1.5\") == \"2 0\"\nassert solution(\"2 1.5\") == \"2 5.086781\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 5.086781\"\nassert solution(stdin) == \"1 12.715255\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 5.086781\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"6 6 5 45 20\n0 0\n2 0\n1 1.5\n\"\"\") == \"2 5.086781\"\nassert solution(\"\"\"6 6 5 45 20\n0 0\n2 0\n1 1.5\n\"\"\") == \"1 12.715255\"\nassert solution(\"\"\"6 0.25 2 45 20\n0 0\n2 0\n1 1.5\n\"\"\") == \"1 12.715255\"\n\"\"\"\"\"\"\n\n\"\"\"\nSample Input 1:\n4 8\n-1.5 0 0\n-1 0 0\n0 0 0\n0 1 0\n1 0 1\n-0.5 0 0\nSample Output 1:\n1 1.5\n\"\"\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"4\",\"5\",\"1\",\"7\",\"0\",\"1\",\"0\",\"1\"]) == \"1\"\nassert solution([\"4\",\"0\",\"2\",\"0\",\"1\",\"0\",\"1\",\"3\"]) == \"2\"\nassert solution([\"4\",\"5\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"4\",\"0\",\"3\",\"2\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"]) == \"1\""
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 0\") == \"1\"\nassert solution(\"5 1 7 1\") == \"6\"\nassert solution(\"3 1 5 1\") == \"2\"\nassert solution(\"7 0 1 1\") == \"8\"\nassert solution(\"4 0 0 0\") == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\".//..//.//..//..\") == \"13\"\nassert solution
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 1 1 1\") == \"1\"\nassert solution(\"2 1 2 1\") == \"2\"\nassert solution(\"3 1 1 1\") == \"2\"\nassert solution(\"3 7 7 7 7\") == \"2\"\nassert solution(\"7 0 2 2\") == \"3\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 1 7 1\") == \"1\"\nassert solution(\"7 0 1 1\") == \"2\"\nassert solution(\"7 0 1 4\") == \"3\"\nassert solution(\"7 1 1 1\") == \"4\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2) == 1\nassert solution(1) == 4\nassert solution(4) == 5\nassert solution(7) == 3\nassert solution(3) == 4\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 5\nassert solution(10) == 6\nassert solution(20) == 7\nassert solution(3) == 4\nassert solution(15) == 3\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"impossible\"\nassert solution(input()) == \"impossible\"\nassert solution(input()) == \"impossible\"\nassert solution(input()) == \"impossible\"\nassert solution(input()) == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 4\nassert solution('10') == 3\nassert solution('1000') == 3\nassert solution('1') == 0\nassert solution('9') == 2\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == \"impossible\"\nassert solution(2) == \"impossible\"\nassert solution(3) == \"impossible\"\nassert solution(4) == \"impossible\"\nassert solution(5) == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"impossible\""
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4, 10) == 4\nassert solution(10, 10) == 4\nassert solution(20, 20) == 1\nassert solution(10, 10) == 1\nassert solution(5, 3) == 2\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(int(input())) == int(input())\n\"\"\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(strToInt(\"2\") == 2) == \"11\"\nassert solution(strToInt(\"3\") == 3) == \"13\"\nassert solution(strToInt(\"4\") == 4) == \"14\"\nassert solution(strToInt(\"1\") == 1) == \"1\"\nassert solution(strToInt(\"6\") == 6) == \"16\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '16'\nassert solution(input) == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 16\n"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"509\"\n\"\"\"\nn = int(input())\ns = sorted(map(int,input().split()))"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"109\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"16\"\nassert solution(\"1\") == \"16\"\nassert solution(\"4\") == \"109\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '109'\nassert solution(stdin) == '111'\nassert solution(stdin) == '0'\nassert solution(stdin) == '123'\nassert solution(stdin) == '123456789'\n"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, \"1000000000\") == 16\n\"\"\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3, 'incorrect answer'\n\nassert solution(stdin) == 5, 'incorrect answer'\n\"\"\""
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 3 4 3 4 3 3 3 4') == '5'\nassert solution('5 3 4 1 1') == '5'\nassert solution('4 1 1') == '3'\nassert solution('1 2 1') == '2'\nassert solution('2 1 1') == '2'\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"3 1 1 1\"\nassert solution(input) == \"5\"\nassert solution(input) == \"2 3 1 1\"\nassert solution(input) == \"3 3 1 1\"\nassert solution(input) == \"1 3 1 1\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 1 2\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    {\n    \"N\": 2,\n    \"M\": 3\n    }\n    ), \"exactly one solution\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n  [\n  [\"1\",\"1\",\"1\"],\n  [\"1\",\"1\",\"1\"],\n  [\"1\",\"1\",\"1\"]\n  ]\n) == \"3\""
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 2 1 2 1\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"1 1\"\nassert solution(\"3 2 3\") == \"2 3\"\nassert solution(\"3 1\") == \"1 1\"\nassert solution(\"3 2 1\") == \"1 2\"\nassert solution(\"3 2 2\") == \"1 2\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == 1\nassert solution('2') == 2\nassert solution('1') == 2\nassert solution('0 2') == 3\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == inp\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('0001010100010001000001') == 5\nassert solution('0001010100010001000001') == 1\nassert solution('0001010100010001000001') == 7\nassert solution('0001010100010001000001') == 2\nassert solution('0001010100010001000001') == 3\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(a) == 1\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n                str.splitlines(\n            split(\n                    input(),\n                    r\"\\n\\n\"\n            )\n            )\n    ) == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1\n20 3\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n\"\"\"\n) == \"1 3\"\nassert solution(\n\"\"\"\n0\n10 1 0\n1 1 0\n10 2 1\n10 2 2\n\"\"\"\n) == \"impossible\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1000\") == \"1000\"\nassert solution(\"10000\") == \"10000\"\nassert solution(\"1000001\") == \"1000001\"\nassert solution(\"10001\") == \"10001\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2020 1\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '2020 1'\nassert solution(input()) == '2020 1'\nassert solution(input()) == '2020 1'\nassert solution(input()) == '2020 1'\nassert solution(input()) == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '2020'\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2020 1\"\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2020 1'\nassert solution(stdin) == '2020'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2020\"\n\"\"\"\n\nfrom itertools import combinations\nfrom typing import List\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2020\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2020 1'\nassert solution(stdin) == '2020'\n"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2020'\n"
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0\") == 0, \"0\"\nassert solution(\"1\") == 0, \"1\"\nassert solution(\"2\") == 1, \"2\"\nassert solution(\"3\") == 3, \"3\"\nassert solution(\"4\") == \"chocolate\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"impossible\"\nassert solution(input()) == \"unique\"\nassert solution(input()) == \"ambiguous\"\nassert solution(input()) == \"impossible\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 10 8 10 12\") == \"10 12\"\nassert solution(\"10 10 6 10 12\") == \"10 12\"\nassert solution(\"10 10 6 10 12\") == \"6 12\"\nassert solution(\"10 10 6 10 12\") == \"6\"\nassert solution(\"10 10 6 10 12\") == \"5\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n3\\n0\\n1\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1"
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"unique\""
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\",\"0\",\"4\",\"2\",\"1\",\"3\"]) == \"0\", \"Should be 0\"\nassert solution([\"5\",\"0\",\"3\",\"2\",\"1\",\"4\",\"4\",\"4\"]) == \"unique\", \"Should be unique\"\nassert solution([\"2\",\"1\",\"0\",\"3\",\"0\",\"3\",\"1\",\"4\"]) == \"unique\", \"Should be unique\"\nassert solution([\"5\",\"4\",\"3\",\"2\",\"1\",\"0\",\"4\",\"3\"]) == \"unique\", \"Should be unique\"\nassert solution([\"5\",\"3\",\"4\",\"1\",\"2\",\"3\",\"0\"]) == \"unique\", \"Should be unique\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'unique'\n\"\"\""
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'unique'\nassert solution(stdin) == 'unique'\nassert solution(stdin) == 'unique'\nassert solution(stdin) == 'ambiguous'\nassert solution(stdin) == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\\n0\\n1\\n2\\n0\\n1\\n2\\n\") == \"0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n\"\nassert solution(\"3\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n0\\n1\\n2\\n\") == \"0\\n1\\n2\\n0\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n\""
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"ambiguous\"\nassert solution(stdin) == \"unique\"\nassert solution(stdin) == \"impossible\""
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 1, 10, 25) == \"0\"\nassert solution(3, 3, 10, 5) == \"1\"\nassert solution(4, 2, 10, 8) == \"1\"\nassert solution(7, 4, 5, 8) == \"1\""
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"), \"The string is empty\"\nassert solution(\"\"), \"The string is not a valid string\"\nassert solution(\"a\"), \"String is not valid\"\nassert solution(\"aaa\"), \"String is valid\"\nassert solution(\"aabb\"), \"String is not valid\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aa\") == \"a\"\nassert solution(\"aaaa\") == \"a\"\nassert solution(\"bbbb\") == \"b\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\nSample Input 3:\n1 2 100\nSample Output 3:\n2\n\nSample Input 4:\n1 2 10\nSample Output 4:\n3\n\nSample Input 5:\n1 3 10\nSample Output 5:\n0\n\nSample Input 6:\n1 2\nSample Output 6:\n1\n\nSample Input 7:\n1 2\nSample Output 7:\n1\n\nSample Input 8:\n1 2\nSample Output 8:\n2\n\"\"\"\n\nN, K = map(int, input().split())\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1.png') == '1.png'\nassert solution('2.png') == '1.png'\nassert solution('3.png') == '1.png'\nassert solution('4.png') == '2.png'\nassert solution('5.png') == '3.png'\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"pan\"\nassert solution(stdin) == \"pan\"\nassert solution(stdin) == \"pan\"\nassert solution(stdin) == \"pan\"\nassert solution(stdin) == \"pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('X') == 'rotate'\nassert solution('XY') == 'pan'\nassert solution('YZ') == 'pan'\nassert solution('ZZ') == 'pan'\nassert solution('XYZ') == 'pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('01') == 'pan'\nassert solution('02') == 'pan'\nassert solution('03') == 'pan'\nassert solution('04') == 'pan'\nassert solution('05') == 'pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"..\") == \"pan\"\nassert solution(\".....\") == \"pan\"\nassert solution(\"....\") == \"pan\"\nassert solution(\"\") == \"pan\"\nassert solution(\"X.X\") == \"pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\") == \"No gesture\"\nassert solution(\"..\") == \"No gesture\"\nassert solution(\"123..\") == \"pan\"\nassert solution(\"123..X.X.\") == \"pan\"\nassert solution(\"..X..\") == \"pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('XX') == 'pan','solution() should return \"pan\" for images of size 15x30'\n\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"pan\"\nassert solution(stdin) == \"pan\"\nassert solution(stdin) == \"pan\"\nassert solution(stdin) == \"pan\"\nassert solution(stdin) == \"pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('123') == 'pan'\nassert solution('123.123') == 'pan'\nassert solution('123.123.123') == 'pan'\nassert solution('123.123.123.123') == 'pan'\nassert solution('123.123.123.123.123') == 'pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('input/in1.txt') == '12'\nassert solution('input/in2.txt') == '1'\nassert solution('input/in3.txt') == '3'\nassert solution('input/in4.txt') == '1'\nassert solution('input/in5.txt') == '2'\n"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"a\"\nassert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"c\"\nassert solution(\"1\") == \"b\"\nassert solution(\"5\") == \"c\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'apples are great!  '"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 7\") == \"apples are great!\\n\"\nassert solution(\"7 7\") == \"apples are great!\\n\"\nassert solution(\"7 7\") == \"apples are great!\\n\"\nassert solution(\"7 7\") == \"apples are great!\\n\"\nassert solution(\"7 7\") == \"apples are great!\\n\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'apples are great!  '\nassert solution(stdin) == 'No images found inside other images.'\nassert solution(stdin) == 'No additional constraint.'\nassert solution(stdin) == 'Apples are not allowed.'\nassert solution(stdin) == 'No ads found inside other images.'\n"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"8 200\") == \"apple is great!\"\nassert solution(\"7 7\") == \"orange is way better!\"\nassert solution(\"7 7\") == \"way better!\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Apples are great!\"\n\"\"\""
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\"8 1\", \"8 2\", \"8 3\", \"8 4\", \"8 5\", \"8 6\", \"8 7\", \"9 1\", \"9 2\", \"9 3\", \"9 4\", \"9 5\", \"9 6\", \"9 7\", \"10 1\", \"10 2\", \"10 3\", \"10 4\", \"10 5\", \"10 6\", \"10 7\", \"11 1\", \"11 2\", \"11 3\", \"11 4\", \"11 5\", \"11 6\", \"11 7\", \"12 1\", \"12 2\", \"12 3\", \"12 4\", \"12 5\", \"12 6\", \"12 7\", \"13 1\", \"13 2\", \"13 3\", \"13 4\", \"13 5\", \"13 6\", \"13 7\", \"14 1\", \"14 2\", \"14 3\", \"14 4\", \"14 5\", \"14 6\", \"14 7\", \"15 1\", \"15 2\", \"15 3\", \"15 4\", \"15 5\", \"15 6\", \"15 7\", \"16 1\", \"16 2\", \"16 3\", \"16 4\", \"16 5\", \"16 6\", \"16 7\", \"17 1\", \"17 2\", \"17 3\", \"17 4\", \"17 5\", \"17 6\", \"17 7\", \"18 1\", \"18 2\", \"18 3\", \"18 4\", \"18 5\", \"18 6\", \"18 7\", \"19 1\", \"19 2\", \"19 3\", \"19 4\", \"19 5\", \"19 6\", \"19 7\", \"20 1\", \"20 2\", \"20 3\", \"20 4\", \"20 5\", \"20 6\", \"20 7\", \"21 1\", \"21 2\", \"21 3\", \"21 4\", \"21 5\", \"21 6\", \"21 7\", \"22 1\", \"22 2\", \"22 3\", \"22 4\", \"22 5\", \"22 6\", \"22 7\", \"23 1\", \"23 2\", \"23 3\", \"23 4\", \"23 5\", \"23 6\", \"23 7\", \"24 1\", \"24 2\", \"24 3\", \"24 4\", \"24 5\", \"24 6\", \"24 7\", \"25 1\", \"25 2\", \"25 3\", \"25 4\", \"25 5\", \"25 6\", \"25 7\", \"26 1\", \"26 2\", \"26 3\", \"26 4\", \"26 5\", \"26 6\", \"26 7\", \"27 1\", \"27 2\", \"27 3\", \"27 4\", \"27 5\", \"27 6\", \"27 7\", \"28 1\", \"28 2\", \"28 3\", \"28 4\", \"28 5\", \"28 6\", \"28 7\", \"29 1\", \"29 2\", \"29 3\", \"29 4\", \"29 5\", \"29 6\", \"29 7\", \"30 1\", \"30 2\", \"30 3\", \"30 4\", \"30 5\", \"30 6\", \"30 7\", \"31 1\", \"31 2\", \"31 3\", \"31 4\", \"31 5\", \"31 6\", \"31 7\", \"32 1\", \"32 2\", \"32 3\", \"32 4\", \"32 5\", \"32 6\", \"32 7\", \"33 1\", \"33 2\", \"33 3\", \"33 4\", \"33 5\", \"33 6\", \"33 7\", \"34 1\", \"34 2\", \"34 3\", \"34 4\", \"34 5\", \"34 6\", \"34 7\", \"35 1\", \"35 2\", \"35 3\", \"35 4\", \"35 5\", \"35 6\", \"35 7\", \"36 1\", \"36 2\", \"36 3\", \"36 4\", \"36 5\", \"36 6\", \"36 7\", \"37 1\", \"37 2\", \"37 3\", \"37 4\", \"37 5\", \"37 6\", \"37 7\", \"38 1\", \"38 2\", \"38 3\", \"38 4\", \"38 5\", \"38 6\", \"38 7\", \"39 1\", \"39 2\", \"39 3\", \"39 4\", \"39 5\", \"39 6\", \"39 7\", \"40 1\", \"40 2\", \"40 3\", \"40 4\", \"40 5\", \"40 6\", \"40 7\", \"41 1\", \"41 2\", \"41 3\", \"41 4\", \"41 5\", \"41 6\", \"41 7\", \"42 1\", \"42 2\", \"42 3\", \"42 4\", \"42 5\", \"42 6\", \"42 7\", \"43 1\", \"43 2\", \"43 3\", \"43 4\", \"43 5\", \"43 6\", \"43 7\", \"44 1\", \"44 2\", \"44 3\", \"44 4\", \"44 5\", \"44 6\", \"44 7\", \"45 1\", \"45 2\", \"45 3\", \"45 4\", \"45 5\", \"45 6\", \"45 7\", \"46 1\", \"46 2\", \"46 3\", \"46 4\", \"46 5\", \"46 6\", \"46 7\", \"47 1\", \"47 2\", \"47 3\", \"47 4\", \"47 5\", \"47 6\", \"47 7\", \"48 1\", \"48 2\", \"48 3\", \"48 4\", \"48 5\", \"48 6\", \"48 7\", \"49 1\", \"49 2\", \"49 3\", \"49 4\", \"49 5\", \"49 6\", \"49 7\", \"50 1\", \"50 2\", \"50 3\", \"50 4\", \"50 5\", \"50 6\", \"50 7\", \"51 1\", \"51 2\", \"51 3\", \"51 4\", \"51 5\", \"51 6\", \"51 7\", \"52 1\", \"52 2\", \"52 3\", \"52 4\", \"52 5\", \"52 6\", \"52 7\", \"53 1\", \"53 2\", \"53 3\", \"53 4\", \"53 5\", \"53 6\", \"53 7\", \"54 1\", \"54 2\", \"54 3\", \"54 4\", \"54 5\", \"54 6\", \"54 7\", \"55 1\", \"55 2\", \"55 3\", \"55 4\", \"55 5"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'good'\n"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"3 4 1 2\"\nassert solution(\"1 2 3 4 1\") == \"3 4 1 2\"\nassert solution(\"3 3 3 2 1\") == \"3 3 3 2\"\nassert solution(\"1 2 3 4 1 2\") == \"3 4 1 2\"\nassert solution(\"4 5 1 2\") == \"5 1 2\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"8\", \"20\", \"apple\", \"oranges\", \"way\", \"better\", \"oranges\", \"way\", \"more\", \"oranges\", \"fruit\", \"is\", \"great\", \"!\"]) == \"fresh apples!\\n\"\nassert solution(\n    [\"7\", \"7\", \"++\", \"++++\", \"+++\", \"+++\", \"++++++++\", \"++++++++\", \"++++++++\", \"++++++++\", \"++++++++\", \"++++++++\", \"++++++++\", \"++++++++\", \"++++++++\", \"++++++++\"]) == \"good, good, good, good, good, good, good, good, good\\n\"\nassert solution(\n    [\"8\", \"20\", \"apple\", \"oranges\", \"way\", \"way\", \"way\", \"way\", \"way\", \"way\", \"way\", \"way\", \"way\", \"way\", \"way\", \"way\"]) == \"good, good, good, good, good, good, good, good, good\\n\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"HHH?H\"\n) == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"HHTT\") == \"2.5\"\nassert solution(\"HH\") == \"1.0\"\nassert solution(\"H\") == \"0.0\"\nassert solution(\"T\") == \"0.0\"\nassert solution(\"HHT\") == \"0.0\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2.0\"\nassert solution(stdin) == \"1.5\""
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2.0\"\nassert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('HH') == 2.0\nassert solution('H?') == 1.5\nassert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('H?') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('H?') == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '2.5'\nassert solution(input2) == '1.0'\nassert solution(input3) == '1.0'\nassert solution(input4) == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2.0\"\nassert solution(stdin) == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aab\") == '2.0'\nassert solution(\"aaaa\") == '1.5'\nassert solution(\"aabb\") == '1.0'\nassert solution(\"aababab\") == '0.0'\nassert solution(\"aabababab\") == '0.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.0\"\nassert solution(stdin) == \"0.3\"\nassert solution(stdin) == \"0.5\"\nassert solution(stdin) == \"0.7\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 6\nassert solution(stdin) == 6\nassert solution(stdin) == 6\nassert solution(stdin) == 6\n"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0111'\n\"\"\""
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 3 4 3 2 4 2 5 3 3 3 4 4 4 4 3 3 2 4 4 4 3 3 2 4 4 4 4 4 3 3 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input=\n    '1101'\n) == '0011'\n\nassert solution(\n    input=\n    '0111'\n) == '0111'\n\nassert solution(\n    input=\n    '1111'\n) == '1111'\n\n-----Constraints-----\n1 \u2264 N \u2264 10^5\n1 \u2264 N \u2264 100\n2 \u2264 N \u2264 256\n1 \u2264 M \u2264 N\n\n----SAMPLE INPUT----\n4\n1111\n1111\n1111\n1111\n1111\n\n----SAMPLE OUTPUT----\n1\n111\n1111\n1111\n1111\n111\n\"\"\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin=input,\n    expected_output=1110,\n    stdin_has_lines=True\n    ) is None\n\n-----Tests-----\nTest case 1:\nInput:\n4\n0001\n0001\n0011\n1110\n\nOutput:\n1\n0001\n0001\n0011\n1111\n\nTest case 2:\nInput:\n4\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"0001\n0001\n0011\n1110\n1111\n1111\n1111\n\"\"\") == \"1111\"\nassert solution(\"\"\"0001\n0001\n0011\n1111\n1111\n1111\n1111\n\"\"\") == \"1111\"\nassert solution(\"\"\"0001\n0001\n0011\n1111\n1111\n1111\n1111\n1111\n1111\n\"\"\") == \"1111\"\nassert solution(\"\"\"0001\n0001\n0011\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5, \"Test failed\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '0111'\nassert solution(input()) == '1111'"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('h') == '2'\nassert solution('h 1 4 1') == '1'\nassert solution('h 10 2 2') == '1'\nassert solution('h 5 10 2') == '1'\nassert solution('h 11 2 3') == '1'\n"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"), 1\nassert solution(\"1\"), 2\nassert solution(\"1 2\"), 3\nassert solution(\"1 4\"), 4\nassert solution(\"1 4 5\"), 5\n"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"v t 6\") == \"2\"\nassert solution(\"v t 4\") == \"1\"\nassert solution(\"v h t\") == \"2\"\nassert solution(\"h t t\") == \"4\"\nassert solution(\"h t t 4\") == \"2\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\nh 1 4 1\\nh 10 2 2\\nh 11 2 3\\nh 5 10 2\\nh 5 10 3\\n\") == \"2\"\nassert solution(\n    \"4\\nh 1 4 1\\nh 10 2 2\\nh 5 10 2\\nh 11 2 3\\nh 5 10 3\\n\") == \"2\"\nassert solution(\n    \"4\\nh 1 10 1\\nh 5 10 2\\nh 11 2 3\\nh 5 10 3\\n\") == \"2\"\nassert solution(\n    \"4\\nh 1 4 1\\nh 10 2 2\\nh 11 2 3\\nh 5 10 2\\nh 5 10 3\\n\") == \"2\"\nassert solution(\n    \"4\\nh 1 10 1\\nh 5 10 2\\nh 11 2 3\\nh 5 10 3\\n\") == \"2\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"The function does not work\""
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"a v h v h v v\") == \"a v h v h v h v v\"\n\"\"\"\nn = int(input())\na = input().split()\na = [i for i in a if i!= 'h' and i!= 'v']\na = [int(i) for i in a]\n\na = sorted(a)\n\nfor i in range(n-1):\n    if a[i] + 1 < a[i+1]:\n        if a[i] > a[i+1] + 1:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1 4 0 2 0 0\"\n) == \"2\"\nassert solution(\n    \"1 3 1 5 0 0\"\n) == \"3\"\nassert solution(\n    \"1 0 2 0 0 0\"\n) == \"4\"\nassert solution(\n    \"2 1 0 0 0 0\"\n) == \"0\"\nassert solution(\n    \"3 5 4 0 0 0\"\n) == \"3\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6 0 1 3 0'), 1\nassert solution('2 2 3 0 0 1 0 0 0 0 0'), 2\nassert solution('0 0 0 0 0 0 1 0 0 0 0'), 2\nassert solution('3 1 2 0 0 0 0 0 0 0 1'), 3\nassert solution('2 2 2 0 0 0 0 0 0 0 0'), 2\n"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['0', '1', '2', '3', '4', '5', '6', '7', '8']) == ['1', '3']\n"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"6 3 2 1 0\") == \"1\"\nassert solution(\"5 3 4 5\") == \"4\"\nassert solution(\"7 8 0\") == \"8\"\nassert solution(\"2 1 0 2\") == \"2\"\nassert solution(\"1 1 1 0\") == \"0\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"3 0 4 5\") == \"1\"\nassert solution(\"2 1 0\") == \"-1\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n'''"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\"\n\"\"\"\n\nimport collections\nimport sys\nimport math\n"
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input()\n    ) == 8"
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '3'\nassert solution(input) == '3'\nassert solution(input) == '3'\nassert solution(input) == '2'\nassert solution(input) == '1'\n"
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\nSample Input 3:\n5\n3 2 1 2 1 1 1 1 1 1\nSample Output 3:\n2\n"
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\""
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 3 3 4 2\"\n    ) == \"4\"\n    pass\n\"\"\""
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 3 4 2\") == \"2\"\nassert solution(\"1 2 3 3 1 3 1 2\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1\") == \"3\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 2 10\") == \"2\"\nassert solution(\n    \"10 2 4\") == \"4\"\nassert solution(\n    \"10 2 4 5\") == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 3\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == (4, 0)\n"
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    (\"3 6\",\n    \"3 2 1 3 0 3 0 0\")) == \"0\"\nassert solution(\n    (\"7 4\",\n    \"4 3 2 1 2 4 1 0\")) == \"3\"\nassert solution(\n    (\"1 1 1\",\n    \"2 1 1 1 1 2 1 0\")) == \"1\"\nassert solution(\n    (\"2 2 2\",\n    \"1 1 1 1 0 1 0\")) == \"0\"\nassert solution(\n    (\"1 1 1\",\n    \"1 1 1 1 1 1 1 1\")) == \"0\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2\", \"2\", \"2\"]) == \"2\", \"Unable to solve the input!\"\nassert solution([\"1\", \"1\", \"0\"]) == \"0\", \"Unable to solve the input!\"\nassert solution([\"1\", \"1\", \"1\"]) == \"1\", \"Unable to solve the input!\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin: str\n) == 4\n\nassert solution(\n    stdin: str\n) == \"2\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"Failed on line {}: expected'solution(stdin)' got '{}'\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"impossible\"\n\"\"\"\nfrom collections import defaultdict\n\nimport sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\u201c13\u201d) == '1'\nassert solution(\u201c13\u201d) == '2'\nassert solution(\u201c13\u201d) == '3'\nassert solution(\u201c13\u201d) == '4'\nassert solution(\u201c13\u201d) == '5'\n"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 0 1\"\nassert solution(\"0 0 0 1 0\") == \"1 0 0 1\"\nassert solution(\"0 0 0 0 0\") == \"1 0 0 1\"\nassert solution(\"0 0 0 1 0\") == \"1 0 0 1\"\nassert solution(\"0 0 1 0 0\") == \"1 0 0 1\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(n, k) == k\nassert solution(n, 2) == 1\nassert solution(n, 1000) == 0\nassert solution(n, 10000) == 1\nassert solution(n, 1000000) == 0\n"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"impossible\"\nassert solution(input().replace(\"1\", \"0\").replace(\"0\", \"1\")) == \"impossible\"\nassert solution(input().replace(\"1\", \"0\").replace(\"0\", \"1\").replace(\"2\", \"1\").replace(\"2\", \"2\").replace(\"1\", \"1\").replace(\"1\", \"2\")) == \"1\"\nassert solution(input().replace(\"2\", \"2\").replace(\"0\", \"1\").replace(\"1\", \"2\")) == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"incorrect input\"\nassert solution(stdin), \"incorrect output\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test_case) == \"impossible\""
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"4 2 0\") == \"0\"\nassert solution(\"4 2 0 1\") == \"0\"\nassert solution(\"4 2 1 0\") == \"0\"\nassert solution(\"4 2 1 0 2\") == \"0\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"35\"\nassert solution(\"100\") == \"18\"\nassert solution(\"11\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"9\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '35'\nassert solution(stdin) == '18'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '35'\nassert solution(stdin) == '8'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '9'"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"15\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"The correct output does not contain the correct answer\"\n\"\"\""
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4 2 1\") == \"1 3\"\nassert solution(\"1 4 3\") == \"3 1\"\nassert solution(\"3 7 10\") == \"7 2 7\"\nassert solution(\"3 4 6\") == \"7 6\"\nassert solution(\"3 4 7\") == \"8\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('10 4') == '35'\nassert solution('10 3') == '18'\nassert solution('3 0 9') == '3'\nassert solution('3 0 7') == '7'\nassert solution('3 0 2') == '2'\n"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"11\", \"3\", \"0\", \"10\", \"2\", \"6\", \"7\", \"8\", \"5\", \"9\"]) == \"35\"\nassert solution([\"3\", \"7\", \"9\", \"5\"]) == \"18\"\nassert solution([\"3\", \"7\", \"9\", \"5\", \"1\", \"2\", \"6\"]) == \"11\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3 7 8 10\") == \"35\"\nassert solution(\"3\") == \"18\"\nassert solution(\"1 1\") == \"35\"\nassert solution(\"2 6 7\") == \"8\"\nassert solution(\"3 7 7 7 7\") == \"8\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 7') == '35'\nassert solution('3 7 10') == '18'\nassert solution('3') == '1'\nassert solution('0 10') == '3'\nassert solution('2 6 7') == '3'\n"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"9\"\nassert solution([\"0\"]) == \"0\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 4\n"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 3, 4) == 2\nassert solution(2, 2, 2) == 0\nassert solution(1, 1, 1) == 1\nassert solution(1, 4, 4) == 5"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input: \"5 8 3 7 2\"\n) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"4\"\n    \"1\"\n    \"2\"\n    \"3\"\n    \"4\"\n    \"5\"\n) == \"0\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2 4 1 3'\nassert solution(input()) == '1 2 1 3'\nassert solution(input()) == '2 4 3 1'\nassert solution(input()) == '4 3 1 2'\nassert solution(input()) == '0 0 1 1'\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 4 1 3\") == \"2 4 1 3\", \"should be 2 4 1 3\"\nassert solution(\"2 4 0 3\") == \"1 2 0 3\", \"should be 1 2 0 3\"\nassert solution(\"1 1 0 0\") == \"1 0 0 0\", \"should be 1 0 0\"\nassert solution(\"1 3 1 2\") == \"1 3 1 2\", \"should be 1 3 1 2\"\nassert solution(\"2 4 1 3\") == \"2 4 1 3\", \"should be 2 4 1 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2 4 1 3\"\nassert solution(input()) == \"2 3 5 3\"\nassert solution(input()) == \"4 3 1 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sampleInput) == sampleOutput"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 4 1 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1 1 3 2\"\n) == \"2 4 1 3\"\nassert solution(\n    \"2 4 3 3\"\n) == \"4 3 1 2\"\nassert solution(\n    \"3 3 5 3\"\n) == \"3 5 3 1\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"0 1 3 2\"\nassert solution(input()) == \"2 4 7 3\"\nassert solution(input()) == \"0 1 3 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input: str) == \"2 4 1 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2 4 1 3\"\nassert solution(input()) == \"2 4 1 2\"\nassert solution(input()) == \"2 3 3 3\"\nassert solution(input()) == \"0 0 1 1\"\nassert solution(input()) == \"0 1 1 0\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n        '''\nsolution:\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1'''\n) == '2 4 1 3'\n\n'''\n\nSample Input 3:\n5\n0 0 1 1 0 1 2 2\n2 3 5 3\n0 0 3 1\n2 2 3 3\n0 0 2 1\n2 2 0 3\n0 0 1 1\nSample Output 3:\n2 3 5 3 2\n'''\n\n'''\n\nSample Input 4:\n8\n0 0 1 1 0 1 2 2\n0 0 3 1\n1 2 3 3\n0 0 2 1\n0 0 1 1\n0 0 3 1\n0 0 2 1\n0 0 1 1\n0 0 2 1\n0 0 1 1\n0 0 2 1\n0 0 1 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n0 0 2 1\n"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Theta wins\"\nassert solution(stdin) == \"Theta loses\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"A wins\"\nassert solution(\"B\") == \"B wins\"\nassert solution(\"C\") == \"Theta loses\"\nassert solution(\"D\") == \"D wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"Theta wins\"\n\"\"\"\n\nfrom collections import defaultdict\nimport operator\nfrom typing import DefaultDict, Dict, Optional\n"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin =\n    \"(86, Q[2,3,4,5,6,7,8,9,T,J,A,K,1,J,A,Q,K,T,H,C,E,D,K,E,F,T,C,H,A,Q,K,F,T,J,H,D,Q,J,T,C,H,D,K,E,F,D,H,G,K,F,E,D,E,G,A,K,Q,F,E,T,G,E,D,K,F,G,Q,E,T,J,H,A,H,F,D,K,E,T,F,D,G,H,E,D,J,F,T,G,E,T,K,G,A,T,K,H,A,J,T,Q,F,K,E,D,G,G,K,Q,F,E,T,G,H,A,Q,F,E,T,G,F,T,K,Q,F,E,T,G,E,D,G,H,A,J,T,Q,F,E,T,K,H,A,J,T,Q,F,E,T,G,E,D,K,F,G,Q,F,E,T,J,H,A,J,T,Q,F,E,T,K,G,A,Q,F,E,T,G,E,D,G,H,A,J,T,Q,F,E,T,G,E,D,K,F,D,Q,F,E,T,J,H,A,J,T,Q,F,E,T,G,E,D,K,F,H,G,Q,F,E,T,J,K,A,T,J,Q,F,E,T,G,E,D,K,F,G,Q,F,E,T,J,H,A,J,T,Q,F,E,T,G,E,D,K,F,H,A,J,T,Q,F,E,T,G,E,D,K,F,D,Q,F,E,T,G,E,D,K,F,G,Q,F,E,T,J,H,A,J,T,Q,F,E,T,G,E,D,K,F,H,A,J,T,Q,F,E,T,J,K,A,T,Q,F,E,T,J,K,A,T,J,Q,F,E,T,G,E,D,K,F,D,Q,F,E,T,J,H,A,J,T,Q,F,E,T,J,K,A,T,Q,F,E,T,G,E,D,K,F,D,Q,F,E,T,J,K,A,T,Q,F,E,T,G,E,D,K,F,H,A,J,T,Q,F,E,T,J,K,A,T,J,Q,F,E,T,J,K,A,T,J,Q,F,E,T,J,K,A,T,J,Q,F,E,T,G,E,D,K,F,H,A,J,T,Q,F,E,T,J,K,A,T,Q,F,E,T,J,K,A,T,J,Q,F,E,T,G,E,D,K,F,D,Q,F,E,T,J,K,A,T,J,Q,F,E,T,J,K,A,T,Q,F,E,T,J,K,A,T,J,Q,F,E,T,G,E,D,K,F,D,Q,F,E,T,J,K,A,T,J,Q,F,E,T"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\nassert solution(\"\") == \"Theta loses\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\n        \"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\",\n        \"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\",\n    ]\n) == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta loses'\n"
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(24268510) == \"Theta loses\"\nassert solution(24138215) == \"Theta wins\"\nassert solution(24341203) == \"Theta wins\"\nassert solution(24236107) == \"Theta loses\"\nassert solution(24114489) == \"Theta wins\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == \"not charlatan\"\nassert solution(\"\") == \"not fabulist\"\nassert solution(\"\") == \"not charlatan\"\nassert solution(\"\") == \"not not charlatan\"\nassert solution(\"\") == \"not not charlatan\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"charlatan\\n\"\nassert solution(\"1 charlatan 1\") == \"fabulist\\n\"\nassert solution(\"1 not charlatan 1\") == \"truther\\n\"\n\n-----References-----\nThis problem was inspired by the original challenge \"Solving the First Interview: A Set-Of-Simplified-Brains\" by Eric Clark.\nhttps://programminghistorian.org/en/lessons/how-to-solve-the-first-interview-of-the-first-presentation-of-the-two-set-of-simplified-brains-of-2009-January-2013-to-2015-May-2013-and-2014-to-2015-Sep-2014\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.n = 0\n        self.k = 0\n        self.char_types = []\n        self.not_char_types = []\n        self.last_not_char_type = None\n        self.is_char_type_noun = False\n    \n    def is_candidate_with_noun_list(self, candidate):\n        if not candidate.isnumeric() or int(candidate) not in self.char_types:\n            return False\n        if self.n == 0:\n            return True\n        if self.n < int(candidate) or self.n > int(candidate) + self.k:\n            return False\n        return True\n    \n    def candidate_with_noun_list(self, candidate):\n        if not self.is_candidate_with_noun_list(candidate):\n            return False\n        if self.n!= 0:\n            return False\n        if self.char_types[0] == candidate:\n            self.char_types = [self.char_types[0]] + self.char_types[1:]\n            self.not_char_types = [self.not_char_types[0]] + self.not_char_types[1:]\n            self.is_char_type_noun = True\n            return True\n        return False\n    \n    def stringify_candidates(self, candidates):\n        candidates = candidates.replace(\"charlatan\", \"\").replace(\"fabulist\", \"\").replace(\"not charlatan\", \"\")\n        return candidates.strip().split(' ')\n    \n    def is_candidate(self, candidate):\n        if self.char_types[0] == candidate:\n            if not self.is_candidate_with_noun_list(candidate):\n                return False\n            return True\n        if self.char_types[0] == candidate.replace(\"charlatan\", \"\"):\n            if not self.is_candidate_with_noun_list(candidate):\n                return False\n            return True\n        return False\n    \n    def get_not_candidates(self):\n        return self.not_char_types\n    \n    def get_candidates(self):\n        return self.char_types\n\n    def get_not_candidates_and_candidates(self):\n        return self.not_char_types, self.char_types\n\n    def stringify(self):\n        res = \"\"\n        for char in self.get_candidates():\n            if not self.is_candidate(char):\n                return \"\"\n            if self.is_candidate(char):\n                res += char\n            else:\n                res += char.replace(\"charlatan\", \"\").replace(\"fabulist\", \"\").replace(\"not charlatan\", \"\")\n        return res.strip().split(' ')\n    \n    def get_output(self):\n        return [self.get_not_candidates(), self.get_candidates()]"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1 charlatan 1\"\nassert solution(\"1 charlatan 2\") == \"1 charlatan 1\"\nassert solution(\"1 fabulist 2 fabulist 1\") == \"1 charlatan 1\"\nassert solution(\"1 fabulist 1 fabulist 2\") == \"1 charlatan 1\"\nassert solution(\"1 and fabulist 1 fabulist 2\") == \"1 charlatan 1\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"fabulist truther\"\n\nfor test in [\n    (\"3 4\", \"\"),\n    (\"1 2 3 4\", \"\"),\n    (\"1 2 3 4 5\", \"\"),\n    (\"1 2 3 4 5 6\", \"\"),\n    (\"1 2 3 4 5 6 7\", \"\"),\n    (\"1 2 3 4 5 6 7 8\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\", \"\"),\n    (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\", \"\"),\n"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"fabulist\"\nassert solution(stdin) == \"truther\"\nassert solution(stdin) == \"charlatan\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0+0+0+0+1+1+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 'truthor'\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"charlatan\"\nassert solution(\"1 charlatan 1\") == \"fabulist\"\nassert solution(\"1 not charlatan 1\") == \"truther\"\nassert solution(\"2 1\") == \"charlatan\"\nassert solution(\"2 and fabulist 1 fabulist 2\") == \"fabulist\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"truther fabulist charlatan not charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fabulist charlatan fab"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1.50 2.00 3.00 4.50 6.00 7.50\"), \"sample solution failed\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3,3,3,3,3\") == 3\nassert solution(\"1,2,2,2,2\") == 1\nassert solution(\"5,5,5,5,5\") == 5\nassert solution(\"2,2,2,2,2\") == 2\nassert solution(\"1.5,5.5,5.5,5.5,5.5\") == 2\n"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3.00 4.50\") == \"3\"\nassert solution(\"3.00 1.50 -1.00\") == \"1\"\nassert solution(\"2.00 4.00\") == \"1\"\nassert solution(\"1.00 3.00 1.00 2.00 2.00 4.50 1.00 3.00 1.00 2.00 2.00 4.50 -1.00 -1.00\") == \"4\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '3'\nassert solution(inp) == '0'\nassert solution(inp) == '1'\nassert solution(inp) == '1'\nassert solution(inp) == '0'\n"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 3\n\nassert solution(input()) == 5\n\nassert solution(input()) == 4\n\nassert solution(input()) == 6\n\nassert solution(input()) == 7\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\"1.00 5.00\", \"3.00 3.00\", \"4.00 2.00\", \"6.00 4.50\", \"7.00 1.00\"]) == \"4\"\nassert solution(\n    [\"-1.50 -1.00\", \"-1.50 -1.00\", \"-1.50 -1.00\", \"0.00 1.00\", \"-1.50 -1.00\"]) == \"3\"\nassert solution(\n    [\"1.50 -1.00\", \"3.00 3.00\", \"4.00 2.00\", \"6.00 4.50\", \"7.00 1.00\"]) == \"1\"\nassert solution(\n    [\"-1.50 -1.00\", \"1.50 -1.00\", \"3.00 3.00\", \"4.00 2.00\", \"6.00 4.50\", \"7.00 1.00\"]) == \"3\"\nassert solution(\n    [\"-1.50 -1.00\", \"1.50 -1.00\", \"3.00 3.00\", \"4.00 2.00\", \"6.00 4.50\", \"7.00 1.00\"]) == \"3\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1.00 5.00\") == 4\nassert solution(\"3.00 3.00\") == 2\nassert solution(\"4.00 2.00\") == 2\nassert solution(\"6.00 4.50\") == 3\nassert solution(\"7.00 1.00\") == 1\n"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '4'\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3 1\") == \"16\"\nassert solution(\n    \"2 3 1\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4 2\") == \"11\"\nassert solution(\"2 3 4\") == \"14\"\nassert solution(\"2 3 4 5\") == \"14\"\nassert solution(\"2 3 4 5 6\") == \"12\"\nassert solution(\"2 3 4 5 7\") == \"12\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"16\"\nassert solution(\"2 3\") == \"10\"\nassert solution(\"2 4\") == \"10\"\nassert solution(\"2 5\") == \"10\"\nassert solution(\"2 6\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        (\"?XR\", \"R..R..\", \"L..L..\"),\n        (\"R..X\", \"R..\", \"L..\"),\n        (\"X..?R\", \"..R..\", \"..L..\"),\n        (\"XR..\", \"..\", \"..\"),\n        (\"..X..\", \"..\", \"..\"),\n    ]\n) == \"11\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2 5 2\", \"R..?.\", \".X...\", \"100 100 7 100 8\", \"?\"]) == \"16\"\nassert solution([\"2 3 1\", \"X..\", \".?.\", \"10 1000 1\", \"?\"]) == \"10\"\nassert solution([\"2 3 1\", \"X..\", \".?.\", \"10 100 1\", \"?\"]) == \"100\"\nassert solution([\"2 3 1\", \"X..\", \".?.\", \"10 100 1\", \"?\"]) == \"100\"\nassert solution([\"2 3 1\", \"X..\", \".?.\", \"10 1000 1\", \"?\"]) == \"100\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), 'incorrect solution'\n\n--------Input-----------\n1 1\n\nSample Output -----------\n1\n\n--------Explanation--------\nThe single example of solution is shown below.\n\nInput:\n2 3 1\nX..\n.?.\n10 1000 1\n\nOutput:\n10\n'''\n\nimport sys\nimport itertools"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.414\"\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1.414\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1.414'\n"
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1.414\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0.414\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == str(min(int(i) for i in inp.split()))\n"
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"1 5 0 0\n0 0 1 0\n1 0 2 0\n1 1 3 0\n0 0 3 1\n0 1 5 1\"\"\") == '1.414'\n\"\"\"\nSample Input 3:\n6\n
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5.657\""
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 3 2 1 1 2 1') == '3.414'\nassert solution('1 4 1 1 4 1 1') == '3.414'\nassert solution('2 6 1 1 2 1') == '3.414'\nassert solution('2 0 1 2 1') == '3.414'\nassert solution('5 5 1 1 5 1') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5.657'\n"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0.433\n"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7 1 1\") == \"1.0\"\nassert solution(\"3 1 1\") == \"0.433\"\nassert solution(\"1 1 1\") == \"0.0\"\nassert solution(\"1 1 1 1\") == \"0.0\"\nassert solution(\"3 1 1 1 1\") == \"0.0\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0.433'\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 1 1 1\", \"1 1 1 1\", \"2 2 2 2\", \"1 2 2 2\", \"2 1 2 2\", \"1 3 3 3\"]) == \"1.0\"\nassert solution([\"3 1 1 1\", \"1 1 1 1\", \"2 2 2 2\", \"1 2 2 2\", \"2 1 2 2\", \"1 3 3 3\"]) == \"0.433\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0.433', \"An error occurred.\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4\",\"1\",\"1\",\"1\"]) == \"1.0\", \"pass\"\nassert solution([\"3\",\"3\",\"3\",\"3\"]) == \"0.0\", \"pass\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]) == \"0.0\", \"pass\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\"]) == \"0.0\", \"pass\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"0.0\", \"pass\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"solution does not return a correct string.\"\nassert solution(stdin) == \"0.433\", \"incorrect string.\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5 5 3\",\"2 2\",\"5 5\",\"3 5\",\"1 3\",\"1 1\",\"5 2\"]) == \"0.6\"\nassert solution([\"1 2 3 4 5 6\"]) == \"3.0\"\nassert solution([\"1 2 3 4 5 6\", \"3 4 5 6 1\"]) == \"3.0\"\nassert solution([\"4 4 5 5 6 7\"]) == \"5.5\"\nassert solution([\"3 3 3 2 2 2\"]) == \"0.5\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\""
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 36"
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"8 10\") == \"5\"\nassert solution(\"8 10\") == \"4\"\nassert solution(\"8 10\") == \"1 1\"\nassert solution(\"8 10\") == \"1 1\"\nassert solution(\"8 10\") == \"1 1\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input()\n) == \"5\"\n\nassert solution(\n    input()\n) == \"10\"\n\nassert solution(\n    input()\n) == \"35\"\n\nassert solution(\n    input()\n) == \"18\"\n\nassert solution(\n    input()\n) == \"60\"\n\n\"\"\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"4 5 1 15 1 2 1 2\"\n) == \"5\"\n\nassert solution(\n    \"4 5 1 15 1 2 1 2\"\n) == \"5\"\n\nassert solution(\n    \"4 5 1 15 1 2 1 2\"\n) == \"5\"\n\nassert solution(\n    \"4 5 1 15 1 2 1 2\"\n) == \"5\"\n\nassert solution(\n    \"4 5 1 15 1 2 1 2\"\n) == \"5\""
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 36\n"
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '36'\n'''\n"
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 36\n"
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"36\"\nassert solution(input().split()) == \"36\"\nassert solution(input().split()) == \"37\"\nassert solution(input().split()) == \"38\"\nassert solution(input().split()) == \"39\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        [\n            [\"1\", \"2\"],\n            [\"3\", \"4\"],\n            [\"5\", \"6\"],\n            [\"7\", \"8\"]\n        ],\n        [\n            [\"9\", \"10\"],\n            [\"11\", \"12\"],\n            [\"13\", \"14\"],\n            [\"15\", \"16\"],\n        ],\n        [\n            [\"17\", \"18\"],\n            [\"19\", \"20\"],\n            [\"21\", \"22\"],\n            [\"23\", \"24\"],\n        ]\n    ]\n) == \"5\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3, \"incorrect answer\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2\"\n) == \"1\""
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin) == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 1\"\n    \"2 1\"\n    \"1 2\"\n    \"1 3\"\n    \"2 3\"\n    ) == 2\nassert solution(\n    \"2 1\"\n    \"2 1\"\n    \"1 2\"\n    \"1 3\"\n    ) == 2\nassert solution(\n    \"2 1\"\n    \"2 1\"\n    \"1 3\"\n    \"3 2\"\n    ) == 3\nassert solution(\n    \"2 1\"\n    \"2 1\"\n    \"1 2\"\n    \"1 3\"\n    ) == 3\nassert solution(\n    \"2 1\"\n    \"2 1\"\n    \"1 2\"\n    \"3 2\"\n    ) == 3\n"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 1 1 5 6 7 2 3 8 4 9 3 3 7 5 2 8 7 9 7 5 8 9 3 9 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3 3 7 5 8 9 3"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"2 3 1 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\n\"\"\"\n\nfrom typing import List, Tuple, Union"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == -1\n"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1, \"Incorrect input\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1, 'Sample Test Case Failed'"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 5') == -1\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n'''2 3\n2 1\n1 3\n1 3\n2 4\n1 1\n1 4\n1 5\n1 1'''\n) == '-1'"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1, \"Test failed\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == -1\n'''"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == solution(\"0.000\") == \"9.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(a, b) == \"8.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sample_input) == 10\nassert solution(sample_input) == 7\nassert solution(sample_input) == 7.0\nassert solution(sample_input) == 0.0\nassert solution(sample_input) == 8.0\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '9.00'\nassert solution(stdin) == '7.00'\nassert solution(stdin) == '10.00'\nassert solution(stdin) == '6.00'\nassert solution(stdin) == '5.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('') == 0\nassert solution('') == 0\nassert solution('') == 0\nassert solution('') == 0\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '9.00'\nassert solution(input()) == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 5\") == \"1.00\"\nassert solution(\"4 4 4 4 4\") == \"3.00\"\nassert solution(\"6 6 6 6 6\") == \"6.00\"\nassert solution(\"1 1 2 3 3 3\") == \"0.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4.00\"\nassert solution(stdin) == \"10.00\"\nassert solution(stdin) == \"9.00\"\nassert solution(stdin) == \"8.00\"\nassert solution(stdin) == \"10.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4.00'\nassert solution(stdin) == '8.00'\nassert solution(stdin) == '1.00'\nassert solution(stdin) == '0.00'\nassert solution(stdin) == '0.00'\n"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nclass color:\n    \n    RED = '\\033[91m'\n    GREEN = '\\033[92m'\n    YELLOW = '\\033[93m'\n    BLUE = '\\033[94m'\n    CYAN = '\\033[96m'\n    MAGENTA = '\\033[95m'\n    WHITE = '\\033[97m'\n    BLACK = '\\033[90m'\n    \n    def __init__(self, r, g, b):\n        self.r = r\n        self.g = g\n        self.b = b"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8 9 10 1 2 3 4 5 7 8"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == outp\n"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n\"\"\") == \"3 1 2 2 1 2 1 1 1 2 1 2 1 1 1 1 2 1 2 1 1 1 1 2 1 1 1 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 3 4\"\n\nassert solution(\"PAINT 2 0 0 3 3\") == \"2 1 2 3\"\nassert solution(\"PAINT 2 0 0 3 3 2\") == \"2 1 2 3\"\nassert solution(\"PAINT 3 0 3 3 3 3\") == \"1 2 1 2\"\nassert solution(\"PAINT 3 0 3 3 3 3 3\") == \"1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1 1 2 3\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"3 3 4\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"PAINT 2 0 0 3 3\") == \"2 1 2 3\"\nassert solution(\"PAINT 3 0 3 3 3\") == \"1 2 1 2\"\nassert solution(\"PAINT 3 0 3 3 3\") == \"1 1 1\"\nassert solution(\"SAVE\") == \"1 1 1\"\nassert solution(\"LOAD\") == \"1 1 1\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3 2\"\n    ) == \"2 1 2 3\"\nassert solution(\n    \"3 3 4\"\n    ) == \"1 2 1 2\"\nassert solution(\n    \"3 3 4 5\"\n    ) == \"1 1 1 1\"\nassert solution(\n    \"3 3 5 6\"\n    ) == \"1 3 1\"\nassert solution(\n    \"5 3 3\"\n    ) == \"1 1 1\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"PAINT 2 0 0 3 3\") == \"1 1 1 2\"\nassert solution(\"PAINT 3 0 3 3 3\") == \"1 1 1 2\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,4) == 1\nassert solution(3,2) == -1\nassert solution(5,1) == -1\nassert solution(10,5) == 2\nassert solution(100,10) == 10\n"
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 2 4 1 2 5\") == \"5 4 2 3 1 2 5\"\nassert solution(\"1 5 3 1 2 4 5\") == \"5 3 4 1 2 2 5\"\nassert solution(\"1 3 1 5 4 5\") == \"4 5 1\"\nassert solution(\"3 2 3 2 3 3 3 3 3 3 3 3 3 3\") == \"3 3 3 3 3 3 3 3\"\nassert solution(\"3 4\") == \"-1\""
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"4 3\"\n) == \"1 4 2 3\"\n\nassert solution(\n    \"5 1\"\n) == \"1 4 2 3\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"1 4 2 3\"\nassert solution(\"2 1\") == \"-1\"\n\nassert solution(\"6\") == \"-1\"\nassert solution(\"5 1\") == \"1 4 2 3\"\nassert solution(\"4 3\") == \"1 2 3\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"2 4 2 3\" ) == \"2 4 2 3\"\nassert solution( \"2 4 2 1\" ) == \"2 4 2 1\"\nassert solution( \"2 4 2 3 4\" ) == \"-1\"\n\"\"\""
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 4 2 3\") == \"1 4 2 3\"\nassert solution(\"3 5 1\") == \"3 5 1\"\nassert solution(\"3 3 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 131 133 132 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 210 211 212 213 214 215 216 217 218 219 220 220 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 246 247 248 249 250 251 252 253 253 254 255 255 256 257 259 260 261 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 303 304 305 306 308 308 309 310 310 311 311 313 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 327 328 329 330 331 332 333 333 334 334 335 336 337 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '-1'\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 4 2 3\"\nassert solution(stdin) == \"1 4 2 3\"\nassert solution(stdin) == \"1 4 2 3\"\nassert solution(stdin) == \"1 4 2 3\"\nassert solution(stdin) == \"1 4 2 3\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('0 1 0'),'0'\nassert solution('0 2 3'),'3'\nassert solution('1 2 3'),'3'\nassert solution('1 2 1'),'3'\nassert solution('1 1 0'),'1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\"\nassert solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"1\"\nassert solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\"\nassert solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"1\"\nassert solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 1, \"The correct answer is 1\""
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 99 99 99 100 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 131 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 246 247 248 249 250 251 252 253 254 255 255 257 258 259 261 262 263 264 265 266 267 268 269 270 271 271 272 273 274 275 277 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 301 302 303 303 304 305 306 308 308 309 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\",\"1\",\"3\",\"4\",\"2\"]) == \"1\"\nassert solution([\"5\",\"1\",\"3\",\"2\"]) == \"2\"\nassert solution([\"5\",\"1\",\"3\",\"2\"]) == \"0\""
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\"\n\"\"\"\nimport sys\n\nn = int(input())\n\nnumbers = []\n\nfor _ in range(n):\n    numbers.append([int(x) for x in input().split()])\n\nprint(len(set(sum(numbers,[]))))\n"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '100000'\nassert solution(input()) == '10000000'\nassert solution(input()) == '1000110001'"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 4 0 3\"), \"5\"\nassert solution(\"2 1 0 1\"), \"1\"\nassert solution(\"2 0 4 10\"), \"1\"\nassert solution(\"2 0 4 30\"), \"4\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1000 100000'\nassert solution(input()) == '1000'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2\", \"0\", \"1\", \"4\", \"0\", \"3\"]) == \"4\", \"Input error\"\nassert solution([\"0\", \"0\", \"1\", \"4\", \"2\", \"3\", \"4\", \"0\", \"2\", \"0\", \"3\", \"0\", \"1\"]) == \"1000\", \"Input error\"\nassert solution([\"2\", \"0\", \"1\", \"4\", \"0\", \"3\", \"0\", \"1\", \"2\", \"0\", \"3\", \"0\", \"1\", \"4\", \"0\", \"2\", \"0\"]) == \"1000\", \"Input error\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"4 4 0 3\", \n    [\n       [\"0\", \"1\", \"4\", \"10\"], \n       [\"0\", \"1\", \"4\", \"1000\"], \n       [\"0\", \"1\", \"2\", \"2\"], \n       [\"0\", \"1\", \"3\", \"3\"], \n       [\"0\", \"1\", \"1\", \"10\"]\n    ]) == \"1000 100000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"10\""
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"4 4\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n\"\"\") == \"4 140\"\nassert solution(\"\"\"2 1 0 1\n0 1 1000 100\n1 2 2 10\n\"\"\") == \"1000 100000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 1 0\") == \"100000\"\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == 4\n\nassert solution
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5 4\", \"1 2\", \"3 5\"]) == \"3\"\nassert solution([\"4 1\", \"2 3\", \"3 4\"]) == \"2\"\nassert solution([\"2 1\", \"3 1\", \"4 2\"]) == \"1\"\nassert solution([\"1 2\", \"3 4\", \"4 2\"]) == \"1\"\nassert solution([\"1 5\", \"2 3\", \"3 1\"]) == \"1\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '2'\n"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 4') == '5'\nassert solution('2 3') == '3'\nassert solution('1 2 3') == '1'\nassert solution('1 3 2') == '2'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=input\n)\n"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == 'impossible'\n\n'''"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(12) == 10\nassert solution(13) == 1\nassert solution(100000000000000) == 10001\nassert solution(1) == 1\nassert solution(0) == 0\n"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5', 'not correct'\n"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"24\"\nassert solution(\"5\") == \"120\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"120\"\n) == \"5\"\nassert solution(\n    \"51090942171709440000\"\n) == \"21\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\n"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 5\nassert solution(20) == 5641380"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\"), \"4\"\nassert solution(\"2\"), \"6\"\nassert solution(\"1\"), \"1\"\nassert solution(\"100\"), \"10\"\nassert solution(\"10000000000000000000000000000000\"), \"10000000000000000000000000000000\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(120) == 5\nassert solution(51090942171709440000) == 21\n"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"120\") == '5'\nassert solution(\"51090942171709440000\") == '21'"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10'\n\n\n-----To-Do-----\n\nSample Input:\n4 5\nSample Output:\n3\n\nSample Input:\n6 1\nSample Output:\n4\n\nSample Input:\n2 1\nSample Output:\n2\n\nSample Input:\n1 2\nSample Output:\n1\n\nSample Input:\n5 1\nSample Output:\n1\n\"\"\""
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"45\"\nassert solution(\"4 3\") == \"15\"\n\"\"\""
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 1 2\") == 45\nassert solution(\"6 1 2\") == 10\nassert solution(\"4 6 5\") == 6\nassert solution(\"2 2\") == 1\nassert solution(\"0 1\") == 1\n"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin = \"2 3 4 6 8 10 11 15 17 19 20 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 111 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 164 165 166 168 169 170 171 172 173 174 175 176 178 179 190 191 192 193 194 195 196 197 198 199 200 201 202 202 203 204 205 206 207 208 208 209 210 210 211 211 212 213 214 215 216 217 218 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()), '0'\nassert solution(input()), '1'\nassert solution(input()), '2'\nassert solution(input()), '3'\nassert solution(input()), '4'\n"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(sample_input) == 11\n\n-----Constraints-----\n1 <= N <= 10^5\n1 <= M, K <= 10^5\n\n-----Time Limit: 1 min\n-----Memory Limit: 10^6\n"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 45\n\nExample Explanation\nInput 1:\n2\n2\nOutput 1:\n1\nExplanation 1:\nThe number of ways to take exactly 2 is 1.\n\nInput 2:\n3 3 3\nOutput 2:\n0\nExplanation 2:\nThe number of ways to take at most 3 is 0.\n"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3\",\"1\"]) == \"3\"\nassert solution([\"3\",\"2\",\"2\"]) == \"3\"\nassert solution([\"3\",\"3\",\"3\"]) == \"3\"\nassert solution([\"2\",\"3\",\"3\"]) == \"6\"\nassert solution([\"1\",\"3\"]) == \"1\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n.\n.\n..\n...\n.\n..\n.\n.\n.\n\"\"\"\n), 10) == 8\n\nassert solution(\n\"\"\"\n.\n.\n..\n...\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\"\"\"\n), 8) == 7\n\nassert solution(\n\"\"\"\n.\n.\n..\n...\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\"\"\"\n), 9) == 8\n\nassert solution(\n\"\"\"\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\"\"\"\n), 10) == 9\n\nassert solution(\n\"\"\"\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\"\"\"\n), 11) == 9\n"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"45\"\n\n\"\"\""
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 18\n"
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 20, \"Fictitia is not satisfied\""
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 5\nassert solution(2) == 10\nassert solution(5) == 18\nassert solution(8) == 40\nassert solution(9) == 12\n"
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5 3 9\"\n) == 18\nassert solution(\n    \"5 3 1\"\n) == 20\nassert solution(\n    \"5 3 5\"\n) == 17\n"
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 20"
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(in_input) == \"2\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def __init__(self):\n        self.ans = 0\n    def solution(self, stdin):\n        d, n = map(int, stdin.split())\n        x = [list(map(int, input().split())) for _ in range(n)]\n        x = sorted(x, key=lambda x: x[0] + x[1])\n        \n        i = 0\n        while i < n - 1:\n            s, e = x[i][0] + x[i+1][0], x[i][1] + x[i+1][1]\n            if s < d and e < d:\n                i += 1\n            else:\n                break\n        \n        self.ans = max(self.ans, d - s)\n        return self.ans"
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 2 4 5 9') == '20'\nassert solution('5 2 1 1') == '5'\nassert solution('5 9 2') == '6'\nassert solution('5 9 2') == '5'\n"
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input() for _ in range(int(input()))) == \"20\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1\") == \"1\"\nassert solution(\"2 1 3 5\") == \"1\"\nassert solution(\"3 10 10\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"3\"\nassert solution(\"2 3 0\") == \"2\"\nassert solution(\"3 3 0\") == \"2\"\nassert solution(\"4 4 2\") == \"2\"\nassert solution(\"5 5 3\") == \"1\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 5 4 5 10 10 5 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6 4 5 1 7 10 10 10 1 6 8 7 3 4 8 2 3 6"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    4 3\n    3 0\n    5 4\n    1 2\n    2 1\n    \"\"\"\n    ) == \"0\"\n\"\"\"\n    *\n   *   *\n  *   *   *\n   *   *   *   *\n    * * * * *   *\n    *    *  *    *\n    *   *   *   *   *\n    *  *   *   *   *   *\n    *   *   *   *   *   *\n\"\"\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == \"3\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10 11') == '3'\nassert solution('1 1 1') == '1'\nassert solution('2 2 2') == '1'\nassert solution('3 3 3') == '1'\nassert solution('4 4 4') == '1'\n"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"Error\"\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"1\", \"0\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"0\", \"0\", \"0\"]) == \"1\"\nassert solution([\"1\", \"0\", \"0\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"correct\"\n\"\"\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\"), \"1\"\nassert solution(\"1 1\"), \"1\"\nassert solution(\"1 2\"), \"1\"\nassert solution(\"1 2 1\"), \"1\"\nassert solution(\"1 2 1 0 0\"), \"1\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"0\"\nassert solution(\"10\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"10\") == \"0\"\nassert solution(\"1000\") == \"0\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"1\n1 3 2\n3\n1 4 1\n1 5 4\n4 1 5\n1 3 2\n3\n1 4 1\n2\n2 3\n4 4 4\n5 4\n5 5 5\n\"\"\") == \"1 3 2 4 5 4\"\n\"\"\""
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 1\nassert solution(1) == 2\nassert solution(5) == 0\nassert solution(6) == 5\n\"\"\""
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 1 3\") == \"1 2 3\"\nassert solution(\"2 1 3\") == \"1 2 3\"\nassert solution(\"4 1 3\") == \"1 2 3\"\nassert solution(\"5 1 3\") == \"1 2 3\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n2\\n3\\n3\\n2\\n1\\n3\\n3\\n3\\n2\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n2\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n2\\n2\\n3\\n2\\n1\\n2\\n1\\n3\\n3\\n3\\n1\\n1\\n2\\n1\\n2\\n3\\n3\\n1\\n2\\n3\\n2\\n3\\n1\\n3\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n1\\n2\\n1\\n3\\n3\\n1\\n3\\n1\\n1\\n2\\n1\\n3\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n1\\n1\\n3\\n3\\n1\\n1\\n3\\n1\\n3\\n3\\n3\\n1\\n3\\n1\\n3\\n1\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n1\\n3\\n3\\n1\\n1\\n1\\n3\\n1\\n3\\n1\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n1\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n3\\n1\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n1\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n3\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n1\\n3\\n3\\n3\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n3\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n3\\n1\\n3\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n3\\n3\\n1"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"6\n    [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 6, 7],\n    [1, 2, 3, 6, 4, 5],\n    [1, 2, 3, 4, 5, 6]\n    ]\") == 5\n"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(sys.stdin) == \"5\"\n\n-----Code-----\n"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1    2    \n2    3    \n3    4    \n4    5    \n5    6    \n6    7    \n7    8    \n8    9    \n9    10    \n10    11    \n11    12    \n12    13    \n13    14    \n14    15    \n15    16    \n16    17    \n17    18    \n18    19    \n19    20    \n\nSample Input 3:\n1    2    \n3    4    \n4    5    \n\nSample Output 3:\n0\n\n\"\"\") == \"0\""
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '19'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '19'\nassert solution(input()) == '19'\nassert solution(input()) == '19'\nassert solution(input()) == '19'\nassert solution(input()) == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 6 4 6\") == 4\nassert solution(\"2 3 4 8 9\") == 10\nassert solution(\"1 1 1 1\") == 4\nassert solution(\"1 1 1 1 1\") == 10\nassert solution(\"1 2 3 4 6\") == 4\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '19'\nassert solution(stdin) == '0'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '19'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\n\n\nExplanation\n\nThe program is running at most $n$ times. At the first line, we need to run the program $n$ times, and the program would crash if the line does not compile, and will print the time it takes to compile. At the second line, we also need to add the worst-case time to the program. At the third line, we need to add a single printf line.\n\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1,4,3,5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"SHIP IT\"\n\nSample Input 3:\n7\na b c d\na 1\nb 3\na 2\nb 2\na 2\na 3\nb 2\nb 3\na 2\nb 2\na 1\nb 2\na 3\nb 3\na 2\na 3\na 2\na 2\na 3\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\na 2\na 3\na 2\n"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == inp\n\n\n    \n"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'SHIP IT'\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'SHIP IT'\nassert solution(stdin) == 'Ship IT'\nassert solution(stdin) == 'Ship IT'\nassert solution(stdin) == 'Ship IT'\nassert solution(stdin) == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"SHIP IT\"\nassert solution(input(\"Input a comma separated list of files, separated by a comma, for each file: \")) == \"SHIP IT\"\nassert solution(input(\"Input a comma separated list of files, separated by a comma, for each file: \").strip().split(\",\")) == \"SHIP IT\"\nassert solution(input(\"Input a comma separated list of files, separated by a comma, for each file: \").strip().split(\",\")[1]) == \"SHIP IT\"\nassert solution(input(\"Input a comma separated list of files, separated by a comma, for each file: \").strip().split(\",\")[1]) == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 'SHIP IT'\nassert solution(2) == 'SHIR TO'\nassert solution(1) == 'SHIR TO'\nassert solution(4) == 'SHIR TO'\n"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5,6,2') == '0,1,2'\nassert solution('4,2,4') == '0,1,3'\nassert solution('3,3,0') == '0,2,3'\nassert solution('3,4,0') == '1,2,0'\nassert solution('3,3,2') == '1,2,3'\n"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\u201ca\u201d) == \u201ca\u201d, \"Expected \u201ca\u201d, got \u201ca\u201d\"\nassert solution(\u201ca, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1' or solution(stdin) == '2', \"The result must be either 1 or 2.\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\nSample Input 3:\n5-3-2\n2 3\nSample Output 3:\n1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n\"\"\"\n\nclass Solution:\n    def solve(self, expression: str) -> str:\n        expression = expression.replace('(','').replace(')','')\n        operation = {'+': lambda x, y: x + y,\n                    '-': lambda x, y: x - y,\n                    '*': lambda x, y: x * y}\n        sum = 0\n        for s in expression.split():\n            op, value = s.split()\n            if op in operation:\n                sum += operation[op](int(value), int(value))\n            else:\n                sum += int(value)\n        return str(sum)"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nprint(\"Congradulations! You have solved the example!\")\n"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n\"\"\""
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 4\n1 2 3\n5 2\n\"\"\"), \"no\"\n\nTest.assert_equals(solution(\"\"\"\n2 4\n1 2 3\n5 2\n\"\"\"), \"yes\")\nTest.assert_equals(solution(\"\"\"\n3 5\n0 9\n9 4\n6 0\n2 8\n3 7\n1 0\n1 1\n1 1\n2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 5\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2\", \"1\", \"5\", \"20\", \"0\"]) == \"no\"\nassert solution([\"2\", \"1\", \"5\", \"20\", \"0\"]) == \"no\"\nassert solution([\"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) == \"no\"\nassert solution([\"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) == \"no\"\nassert solution([\"1\", \"0\"]) == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 7) == \"yes\"\nassert solution(5, 2) == \"yes\"\nassert solution(5, 1) == \"no\"\nassert solution(10, 7) == \"yes\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"yes\"\nassert solution(\"2 2 1 3 1 2\") == \"no\"\nassert solution(\"2 2 1 3 1 2 4\") == \"no\""
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"yes\"\nassert solution(input()) == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"yes\""
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"yes\", \"Can't accept solution\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        [0, 1, 5, 10, 20],\n        [1, 5, 10, 20, 25],\n        [0, 1, 5, 10, 20],\n        [0, 1, 5, 10, 20],\n        [0, 1, 5, 10, 20],\n    ]\n) == 'yes'\n\n\"\"\"\n\nimport math\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    @param n: An integer\n    @param t: An integer\n    @return: A string\n    \"\"\"\n\n    def solution(self, n, t):\n        def solution1(n, t):\n            return \"yes\" if n % 2!= 0 or math.ceil(n / 2) <= t else \"no\"\n\n        return solution1(n, t)\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.25\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\\n0\\n0\") == \"0\"\nassert solution(\"1\\n0\\n0\") == \"0\"\nassert solution(\"3\\n2\\n1\\n0\\n0\") == \"1\"\nassert solution(\"3\\n0\\n0\\n0\") == \"1\"\nassert solution(\"3\\n0\\n1\\n0\") == \"1\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 3\", \"2 3\", \"4 3\", \"1 3\", \"3 4\", \"1 4\", \"3 4\", \"2 4\", \"4 4\", \"3 4\"]) == \"1.25\"\nassert solution([\"3 3\", \"2 3\", \"1 3\", \"3 4\", \"1 4\", \"3 4\", \"2 4\", \"4 4\", \"3 4\"]) == \"1.25\"\nassert solution([\"4 4\", \"2 3\", \"1 4\", \"3 4\", \"1 3\", \"1 4\", \"3 4\", \"2 3\", \"2 4\", \"4 4\", \"3 4\"]) == \"0\"\nassert solution([\"1 2\", \"1 1\", \"1 1\", \"1 2\", \"1 1\", \"1 1\", \"1 2\", \"1 1\", \"1 1\", \"1 2\", \"1 1\"]) == \"0.333333333333333333\"\nassert solution([\"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == \"0.333333333333333333\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n6 3\n3 2\n3 4\n1 2\n2 3\n2 4\n3 5\n1 3\n4 4\n5 4\n6 5\n4 5\n6 4\n3 4\n3 4\n4 5\n1 4\n1 4\n4 5\n3 5\n4 5\n2 5\n3 4\n3 4\n4 4\n5 4\n\"\"\") == '0.75'\nassert solution(\"\"\"\n5\n5\n2 3\n2\n4\n4\n3\n4\n4\n3\n5\n1 3\n4 4\n5 4\n2 4\n3 4\n3 4\n4 4\n5 4\n3 4\n3 4\n4 4\n5 4\n4 5\n3 5\n1 3\n2 3\n4 4\n4 4\n5 4\n3 5\n1 5\n3 5\n4 5\n4 5\n5 4\n2 5\n3 5\n4 4\n3 4\n3 4\n4 4\n5 4\n4 5\n1 4\n2 3\n1 4\n1 4\n3 4\n3 4\n3 4\n1 3\n1 3\n3 3\n2 3\n3 3\n2 3\n3 3\n3 3\n2 3\n3 3\n3 3\n3 3\n4 3\n1 4\n1 4\n3 4\n1 4\n1 4\n2 3\n1 4\n1 4\n3 4\n1 4\n1 4\n3 4\n1 4\n3 4\n1 4\n1 4\n2 3\n1 4\n2 4\n2 3\n2 3\n1 4\n2 4\n2 3\n2 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n2 3\n2 3\n2 3\n3 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n2 3\n1 4\n1 3\n1 3\n2 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\") == \"0\"\nassert solution(\"2 4 2\") == \"0.25\"\nassert solution(\"2 4 2 3\") == \"0.0904\"\nassert solution(\"4 4 4\") == \"1\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4 4 3\") == \"1.000000\"\nassert solution(\"3 3 3 3 3 3\") == \"2.000000\"\nassert solution(\"3 2 3 3 3 3\") == \"0.5\"\nassert solution(\"4 4 4 4 4 4\") == \"1.0\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'inf' or solution(input().split()) == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    '5 1 0 3 3'\n) == '3'\nassert solution(\n    '5 4 1 0 3 3'\n) == '3'\nassert solution(\n    '1 2 3'\n) == '2'\nassert solution(\n    '1 4 3'\n) == '2'\nassert solution(\n    '1 3 2'\n) == '1'\n"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == str(8)\n\n\"\"\""
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 9\n"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 7\") == \"3\", \"Solution to \\\"6 7\\\" is invalid\"\nassert solution(\"6 8\") == \"3\", \"Solution to \\\"6 8\\\" is invalid\"\nassert solution(\"3 4\") == \"5\", \"Solution to \\\"3 4\\\" is invalid\"\nassert solution(\"1 3\") == \"1\", \"Solution to \\\"1 3\\\" is invalid\"\nassert solution(\"4 2\") == \"4\", \"Solution to \\\"4 2\\\" is invalid\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('12 3') == '12'\nassert solution('8 5') == '8'\nassert solution('4 2') == '4'\nassert solution('1 1') == '1'\nassert solution('1 1 2') == '1 2'\n"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == \"inf\"\nassert solution(4) == \"3 4\"\nassert solution(5) == \"3 4 5 6\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"1 3 4\") == \"3\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == 2\nassert solution(\"1 2 3 4\") == 4\nassert solution(\"1 2 3 4 5 6 7 4 7 8 9 12\") == 2\nassert solution(\"1 2 3 4 7\") == 2\nassert solution(\"1 2 3 4 7 5 6 7 8 9 12 3 4\") == 4\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 4 5 6 7 4 7 8 8 12\") == \"4\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3 4 2 4 4 5 6 7 3 4\") == \"4\"\nassert solution(\"1 2 3 4 2 4 4 5 6 7 3 4 2\") == \"4\"\nassert solution(\"1 2 3 4 2 4 4 5 6 7 3 4 2 3\") == \"5\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == \"6\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"6\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 2) == 2\nassert solution(3, 2) == 2\nassert solution(4, 2) == 2\nassert solution(5, 2) == 2\nassert solution(6, 2) == 2\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == 2\nassert solution(\"12 3\") == 2\nassert solution(\"2 3 4 5 6 7 4 7 8 8 12 12\") == 2\nassert solution(\"\") == 0\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"12 3\") == \"2\"\nassert solution(\"2 3 4 5 6 7 4 7 8 8 12 12\") == \"2\"\nassert solution(\"3 2 4 3 5 6\") == \"5\"\nassert solution(\"3\") == \"3\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    '2 4 4 2 3'\n) == '3'\n\nassert solution(\n    '3 1 5 2'\n) == '3'\n\nassert solution(\n    '3 6 6 2'\n) == '3'\n\nSample Input 3:\n5 6\n6 6 5 4 2\nSample Output 3:\n5\n\nSample Input 4:\n6 2\n4 5 2 6 7\nSample Output 4:\n6\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sys.argv) == \"HOOSE\""
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin,\n    [\"hoose\", \"hose\", \"nose\", \"noises\", \"noise\", \"moose\", \"moose\", \"moose\", \"moose\", \"moose\", \"moose\", \"moose\"]) == \"hoose\"\nassert solution(\n    stdin,\n    [\"hoose\", \"hose\", \"nose\", \"noises\", \"noise\", \"moose\", \"moose\", \"moose\", \"moose\", \"moose\", \"moose\", \"moose\", \"moose\", \"moose\"]) == \"hoose\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"{ hoose,hose,nose,noises,noise,noise }\"), \"The number of typos is no!\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"hoose\"), \"Your code did not produce expected output\"\nassert solution(\"hoose, hoose\"), \"Your code did not produce expected output\"\nassert solution(\"hoose, hose, hose\"), \"Your code did not produce expected output\"\nassert solution(\"hoose, hose, no\"), \"Your code did not produce expected output\"\nassert solution(\"hoose, hose, goose\"), \"Your code did not produce expected output\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"HOOSE\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO TYPOS\"\nassert solution(stdin) == \"NO TYPOS\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"hoose\") == \"NO TYPOS\"\nassert solution(\"hose\") == \"NO TYPOS\"\nassert solution(\"hoose\") == \"NO TYPOS\"\nassert solution(\"hose\") == \"NO TYPOS\"\nassert solution(\"noises\") == \"NO TYPOS\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"hoose\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('hoose') == 'hoose'\nassert solution('hoose hoose') == 'hoose hoose'\nassert solution('hoose hoose noises') == 'hoose'\nassert solution('hoose noise') == 'hoose noise'\nassert solution('hoose noise') == 'hoose noise'\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'hoose'\nassert solution(input()) == 'noises'\nassert solution(input()) == 'noise'\n"
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"2 4 8 2\"\n) == \"3\"\nassert solution(\n    \"1 2 3 2\"\n) == \"3\"\nassert solution(\n    \"1 5\"\n) == \"1\"\nassert solution(\n    \"3 4 1 2\"\n) == \"2\"\nassert solution(\n    \"2 3 2\"\n) == \"0\""
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0 2\"\n\"\"\""
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3\") == \"16\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"2 3\\\") == 0\nassert solution(\\\"4 5\\\") == 2\nassert solution(\\\"1 3 2\\\") == 5\nassert solution(\\\"1 2 3 4 5\\\") == 25\nassert solution(\\\"4 1 3 2\\\") == 3\n"
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2\", \"3\"]) == \"2\"\nassert solution([\"1\", \"3\"]) == \"1\"\nassert solution([\"1\", \"2\"]) == \"2\"\nassert solution([\"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"2\"\nassert solution(s) == \"3\"\nassert solution(s) == \"0\"\nassert solution(s) == \"16\"\nassert solution(s) == \"8\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4 3 1 2 1 0\") == \"1 2 1 1 0\"\nassert solution(\"3 4 3 4 0\") == \"0\""
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3 1\", \"1 2\", \"0 1\", \"2 2\", \"3 2\", \"3 3\"]) == \"1\"\nassert solution([\"1 2\", \"3 2\", \"1 3\", \"1 4\", \"2 3\", \"3 4\", \"3 5\"]) == \"2\"\nassert solution([\"0 1\", \"0 2\", \"0 3\", \"0 4\", \"0 5\", \"1 2\", \"1 3\", \"1 4\", \"1 5\", \"2 3\", \"2 4\", \"2 5\", \"3 5\"]) == \"3\""
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"68.52419365\"\nassert solution(\"2 5 0.5\") == \"75.72942295\"\nassert solution(\"2 4 1.1 0.3\") == \"2.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\",\"1\",\"2\",\"1\",\"1\"]) == \"68.52419365\"\nassert solution([\"2\",\"1\",\"2\",\"3\",\"4\",\"2\",\"2\",\"2\",\"1\",\"2\",\"4\",\"2\",\"1\",\"2\",\"2\",\"4\",\"2\",\"2\",\"3\",\"4\",\"2\",\"2\",\"2\",\"2\",\"1\",\"3\"]) == \"84.35301742\"\nassert solution([\"1\",\"1\",\"2\",\"3\",\"3\",\"1\",\"3\",\"1\",\"3\",\"2\",\"1\",\"3\",\"3\",\"2\",\"3\",\"1\",\"2\",\"1\",\"2\",\"2\",\"3\",\"2\",\"2\",\"2\",\"2\",\"1\",\"2\",\"3\",\"4\",\"4\",\"2\",\"4\",\"3\",\"1\"]) == \"3.141516\"\nassert solution([\"2\",\"1\",\"2\",\"3\",\"3\",\"1\",\"3\",\"1\",\"3\",\"2\",\"1\",\"2\",\"2\",\"2\",\"3\",\"1\",\"2\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"2\",\"1\",\"2\",\"2\",\"2\",\"3\",\"1\",\"3\",\"2\",\"3\",\"2\",\"2\",\"2\",\"1\",\"3\"]) == \"60.0067\"\nassert solution([\"1\",\"1\",\"1\",\"2\",\"2\",\"1\",\"2\",\"1\",\"2\",\"3\",\"3\",\"1\",\"2\",\"1\",\"1\",\"2\",\"1\",\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"1\",\"2\",\"1\",\"2\",\"2\",\"2\",\"2\",\"1\",\"1\",\"2\",\"3\",\"1\",\"1\",\"2\",\"1\",\"3\",\"1\",\"3\",\"3\",\"1\",\"3\",\"1\",\"2\",\"1\",\"1\",\"2\",\"3\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"2\",\"2\",\"2\",\"1\",\"3\"]) == \"3.02604\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\\\"\\\"\\\"\\n\\\"\\\"\\\"\\nSample Input 1:\n1\nSample Output 1:\n44.72135955\n\nSample Input 2:\n2\n50 45 45\nSample Output 2:\n68.52419365\nSample Input 3:\n2\n50 45 45\nSample Output 3:\n65.06677661\nSample Input 4:\n6\n4\nSample Output 4:\n44.72135955\n4\nSample Input 5:\n5\n10\nSample Output 5:\n92.57579003\nSample Input 6:\n6\n2\nSample Output 6:\n105.61954694\nSample Input 7:\n2\n50 45 45\nSample Output 7:\n68.52419365\nSample Input 8:\n1\n2\nSample Output 8:\n100.13339988\nSample Input 9:\n10\n10\nSample Output 9:\n68.52419365\nSample Input 10:\n6\n2\nSample Output 10:\n68.52419365\nSample Input 11:\n1\n4\nSample Output 11:\n101.06776688\nSample Input 12:\n7\n7\nSample Output 12:\n110.25273468\nSample Input 13:\n6\n4\nSample Output 13:\n50.06518457\nSample Input 14:\n7\n2\nSample Output 14:\n95.79370052\nSample Input 15:\n1\n1\nSample Output 15:\n0.0\nSample Input 16:\n5\n10\nSample Output 16:\n78.06518457\nSample Input 17:\n3\n2\nSample Output 17:\n96.06776688\nSample Input 18:\n7\n2\nSample Output 18:\n82.06518457\nSample Input 19:\n6\n2\nSample Output 19:\n90.06776688\nSample Input 20:\n7\n2\nSample Output 20:\n100.13339988\nSample Input 21:\n6\n2\nSample Output 21:\n105.61954694\nSample Input 22:\n1\n1\nSample Output 22:\n100.06776688\nSample Input 23:\n2\n2\nSample Output 23:\n50.06518457\nSample Input 24:\n1\n1\nSample Output 24:\n95.79370052\nSample Input 25:\n2\n2\nSample Output 25:\n77.06518457\nSample Input 26:\n1\n2\nSample Output 26:\n110.25273468\nSample Input 27:\n1\n1\nSample Output 27:\n101.06776688\nSample Input 28:\n6\n2\nSample Output 28:\n50.06518457\nSample Input 29:\n6\n2\nSample Output 29:\n95.79370052\nSample Input 30:\n1\n1\nSample Output 30:\n78.06518457\nSample Input 31:\n1\n1\nSample Output 31:\n89.06776688\nSample Input 32:\n2\n2\nSample Output 32:\n95.79370052\nSample Input 33:\n2\n2\nSample Output 33:\n101.06776688\nSample Input 34:\n1\n1\nSample Output 34:\n0.0\nSample Input 35:\n1\n1\nSample Output 35:\n100.06776688\nSample Input 36:\n6\n2\nSample Output 36:\n50.06518457\nSample Input 37:\n6\n2\nSample Output 37:\n95.79370052\nSample Input 38:\n1\n1\nSample Output 38:\n86.06776688\nSample Input 39:\n1\n1\nSample Output 39:\n100.06776688\nSample Input 40:\n1\n1\nSample Output 40:\n100.06776688\nSample Input 41:\n2\n2\nSample Output 41:\n95.79370052\nSample Input 42:\n1\n1\nSample Output 42:\n100.06776688\nSample Input 43:\n2\n2\nSample Output 43:\n50.06518457\nSample Input 44:\n3\n2\nSample Output 44:\n95.79370052\nSample Input 45:\n2\n2\nSample Output 45:\n95.79370052\nSample Input 46:\n2\n2\nSample Output 46:\n95.79370052\nSample Input 47:\n1\n1\nSample Output 47:\n95.79370052\nSample Input 48:\n1\n1\nSample Output 48:\n50.06518457\nSample Input 49:\n2\n2\nSample Output 49:\n100.06776688\nSample Input 50:\n2\n2\nSample Output 50:\n95.79370052\nSample Input 51:\n3\n2\nSample Output 51:\n95.79370052\nSample Input 52:\n2\n2\nSample Output 52:\n100.06776688\nSample Input 53:\n1\n1\nSample Output 53:\n100.06776688\nSample Input 54:\n2\n2\nSample Output 54:\n95.79370052\nSample Input 55:\n1\n1\nSample Output 55:\n95.79370052\nSample Input 56:\n4\n3\nSample Output 56:\n95.79370052\nSample Input 57:\n4\n3\nSample Output 57:\n100.06776688\nSample Input 58:\n1\n1\nSample Output 58:\n95.79370052\nSample Input 59:\n1\n1\nSample Output 59:\n100.06776688\nSample Input 60:\n1\n1\nSample Output 60:\n95.79370052\nSample Input 61:\n1\n1\nSample Output 61:\n100.06776688\nSample Input 62:\n2\n2\nSample Output 62:\n95.79370052\nSample Input 63:\n3\n2\nSample Output 63:\n100.06776688\nSample Input 64:\n1\n1\nSample Output 64:\n100.06776688\nSample Input 65:\n2\n2\nSample Output 65:\n95.79370052\nSample Input 66:\n3\n2\nSample Output 66:\n95.79370052\nSample Input 67:\n1\n1\nSample Output 67:\n95.79370052\nSample Input 68:\n1\n1\nSample Output 68:\n95.79370052\nSample Input 69:\n2\n2\nSample Output 69:\n95.79370052\nSample Input 70:\n2\n2\nSample Output 70:\n100.06776688\nSample Input 71:\n2\n2\nSample Output 71:\n95.79370052\nSample Input 72:\n1\n1\nSample Output 72:\n95.79370052\nSample Input 73:\n1\n1\nSample Output 73:\n100.067766"
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 5) == 6, \"Incorrect answer\"\nassert solution(1, 5) == 44.72135955, \"Incorrect answer\"\nassert solution(1, 20) == 68.52419365, \"Incorrect answer\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"68.52419365\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"68.52419365\"\n\nclass Solution:\n    def __init__(self):\n        pass\n    def solution(self, stdin: str) -> str:\n        pass\n        "
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"50 45 45\") == \"68.52419365\"\nassert solution(\"50 45 45\") == \"68.52419365\"\nassert solution(\"50 45 45\") == \"68.52419365\"\nassert solution(\"50 45 45\") == \"68.52419365\"\nassert solution(\"50 45 45\") == \"68.52419365\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"68.52419365\"\n\"\"\""
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 4 20 5 15 10 50 10 20\") == \"95.00\"\nassert solution(\n    \"1 20 2 20 10 20 50 40 10 20 5 10 15 10 20 10 50 10 20 15 20 5 50 10 20 15 10 10 20 5 15 10 50 10 20 15 10 20 20 5 50 10 20 15 20 5 50 10 20 15 10 20 20 5 50 10 20 15 10 20 20 20 5 50 10 20 15 10 20 20 5 50 10 20 15 20 5 50 10 20 15 10 20 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15 20 5 50 10 20 15"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"./math/solution/s1.txt\") == \"1\"\nassert solution(\"./math/solution/s2.txt\") == \"0\"\nassert solution(\"./math/solution/s3.txt\") == \"0\"\nassert solution(\"./math/solution/s4.txt\") == \"1\"\nassert solution(\"./math/solution/s5.txt\") == \"1\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(in_: str) == \"1\"\nassert solution(in_: str) == \"1\"\nassert solution(in_: str) == \"0\"\nassert solution(in_: str) == \"2\"\nassert solution(in_: str) == \"1\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1 3 1\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4 2 3\") == \"1\"\nassert solution(\"3 4 2 3\") == \"1\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"0 1 0\") == \"2\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4 3 2 3\"), \"5\"\nassert solution(\"5 5 4 2 3\"), \"3\"\nassert solution(\"3 2 3 4 3\"), \"3\"\nassert solution(\"4 2 3 5\"), \"5\"\nassert solution(\"6 3 4 2 2 3\"), \"3\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=input\n    ) == '1'\nassert solution(\n    stdin=input\n    ) == '3'\nassert solution(\n    stdin=input\n    ) == '2'\nassert solution(\n    stdin=input\n    ) == '1'\nassert solution(\n    stdin=input\n    ) == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\")\") == \"1\"\nassert solution(\"(\") == \"1\"\nassert solution(\")\") == \"0\"\nassert solution(\")(\") == \"1\"\nassert solution(\")(\") == \"1\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\"\"\""
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n\nfrom collections import Counter\n\nN, K = map(int, input().split())\nc = Counter(map(int, input().split()))\n\nresult = 0\n\nfor i in range(K):\n    if c[i] >= N:\n        result = i\n        break"
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution( \"5 3\" ) == \"3\"\nassert solution( \"2 2 3 2 2\" ) == \"2\"\nassert solution( \"2 2 3 2 2 2\" ) == \"2\"\nassert solution( \"2 2 3 2 2 3 2 2 2 2 2 2\" ) == \"3\"\nassert solution( \"2 2 3 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2\" ) == \"5\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nSample Input 3:\n4 5\n2 2 3 2 2\nSample Output 3:\n5"
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"1 1\",\n    \"2 2\",\n    \"3 3\",\n    \"4 4\",\n    \"5 5\"]) == \"3\"\n\n-----------------\nSample Input 1:\n2 5\n1 1\nSample Output 1:\n1\n\nSample Input 2:\n5 3\n1 2\nSample Output 2:\n3\n\nSample Input 3:\n6 6\n1 1\nSample Output 3:\n2\n\n-----------------\n\n'''\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Not all numbers are 1\"\n\n\"\"\""
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin=\n    \"0 50 50 0 0 0 0 0 0\\n\"\n    ) == \"1.0\"\nassert solution(\n    stdin=\n    \"0 50 50 0\\n\"\n    ) == \"0.29\"\nassert solution(\n    stdin=\n    \"0 50 0 0\\n\"\n    ) == \"0.0\"\nassert solution(\n    stdin=\n    \"0 50\\n\"\n    ) == \"0.0\"\nassert solution(\n    stdin=\n    \"0 0\\n\"\n    ) == \"0.0\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 10') == '50'\nassert solution('2 0') == '50'\nassert solution('2 0 0 0') == '0.0'\nassert solution('2 3 0 0 0') == '0.0'\nassert solution('2 1 0 1 0') == '0.0'\n"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"50\"\n\nassert solution(stdin) == \"50\"\n\nassert solution(stdin) == \"50\"\n\nassert solution(stdin) == \"50\"\n\nassert solution(stdin) == \"50\""
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3 2 100\") == \"1.3\"\nassert solution(\"1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 194 195 196 196 197 198 199 200 200 201 201 202 203 204 205 206 207 208 208 209 210 211 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 100 100 50 50 0 50 50 50 50 50 50 0 50 0 0 0 0 0\"\n) == \"50\"\nassert solution(\n    \"1 100 100 50 0 0 0 50 0 50 50 0 0 0 0 0 0 0\"\n) == \"50\"\nassert solution(\n    \"1 100 100 50 0 50 0 50 50 50 0 0 0 0 0 0 0\"\n) == \"50\"\nassert solution(\n    \"1 100 100 50 50 0 50 50 0 50 0 50 0 0 0 0 0 0\"\n) == \"50\"\nassert solution(\n    \"1 100 100 50 50 0 0 0 0 0 0 0 0 0 0 0 0\"\n) == \"50\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2, \"10 20 50 60 80 90 100\") == \"50.00\"\nassert solution(3, \"10 20 50 60 80 90 100\") == \"25.00\"\nassert solution(4, \"10 20 50 60 80 90 100\") == \"30.00\"\nassert solution(5, \"10 20 50 60 80 90 100\") == \"40.00\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"50\""
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"100 50\"\n\nassert solution(input()) == \"50 50\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 1 0.2 0.4\") == \"6.5\"\nassert solution(\"2 0.2 0.4\") == \"0.2\"\nassert solution(\"2 1.0 0.0 0.2\") == \"0.4\"\nassert solution(\"3 1 0.2 0.4 0.3\") == \"3.0\"\nassert solution(\"3 2 0.2 0.4 0.3\") == \"2.5\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\"]) == \"25\"\nassert solution([\"2\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\"]) == \"0\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"1\", \"1\", \"3\", \"3\", \"2\", \"3\", \"2\", \"1\", \"1\", \"1\", \"1\", \"3\", \"3\", \"3\", \"3\"]) == \"13\"\nassert solution([\"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\"]) == \"14\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"1\", \"1\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\", \"3\"]) == \"0\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1') == '160'\nassert solution('2') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 50\n\n-----My Code-----\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input().strip().split()) == 5\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"100\") == 160\nassert solution(\"200\") == 350\nassert solution(\"201\") == 0\nassert solution(\"300\") == 300\nassert solution(\"400\") == 0\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3\",\"20\",\"10\",\"20\",\"10\"]) == \"160\"\nassert solution([\"3\",\"20\",\"10\",\"20\",\"10\",\"20\"]) == \"250\"\nassert solution([\"10\",\"20\",\"10\",\"20\",\"10\",\"20\",\"10\",\"20\",\"10\"]) == \"250\"\nassert solution([\"1\",\"10\",\"3\",\"6\",\"7\",\"8\",\"12\",\"13\",\"14\",\"14\",\"20\",\"15\",\"22\",\"24\",\"26\",\"28\",\"32\",\"34\",\"35\",\"36\",\"37\",\"38\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\"]) == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"160\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 22\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '160'\n\"\"\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"160\"\nassert solution(\"3\") == \"250\"\nassert solution(\"4\") == \"250\"\nassert solution(\"5\") == \"250\"\nassert solution(\"6\") == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 220\n\"\"\"\nimport math\n\nn, t = map(int, input().split())\n\ns = []\nd = {}\n\nfor _ in range(n):\n    s.append(int(input()))\n\ns.sort()\n\nfor _ in range(n):\n    if s[-1] - s[0] in [60, 60 * (t // 10), 60 * t % 10]:\n        s.pop(0)\n        continue\n    else:\n        d[s[-1]] = s.index(s[-1])\n        s.pop(0)\n\nfor _ in range(n):\n    print(d[s[-1]] + 1)"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"4 3\") == \"0 1 3\"\nassert solution(\"1 2 3\") == \"0 1 3\"\nassert solution(\"1 1 1\") == \"0 1 0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,1) == 0\nassert solution(2,2) == 2\nassert solution(5,3) == 2\nassert solution(3,4) == 0\nassert solution(5,5) == 1\n"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4 2\", \"0 1\", \"1 2\", \"2 3\", \"3 4\", \"4 0\", \"1 3\", \"1 2\", \"2 3\"]) == \"2\"\nassert solution([\"5\", \"5\", \"4\", \"0\", \"0\", \"3\", \"3\", \"2\", \"0\", \"2\", \"0\", \"0\", \"0\", \"0\"]) == \"2\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 7\n"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == 2\n"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"2\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1 2'"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2\"\n\nSample Input 3:\n2\n2 4\n2 5\nSample Output 3:\n-1\nSample Input 4:\n1 5\n2 3 4\n3 2 5\n4 1\nSample Output 4:\n-1\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        pass\n    def check(self,building):\n        x = 0\n        for i in range(len(building)):\n            if building[i] == 1:\n                x = x+1\n            elif building[i] == 2:\n                x = x+1\n            else:\n                continue\n        return x\n    def solution(self,inp):\n        if inp<=3 or inp>10:\n            return -1\n        building = [0]*int(inp)\n        for i in range(int(inp)):\n            print(building)\n            building[i] = i+1\n            print(building)\n            if i==0:\n                if self.check(building) == 1:\n                    print(\"yes\")\n                else:\n                    print(\"no\")\n            elif self.check(building) == 0:\n                print(\"yes\")\n                print(building)\n                print(i)\n                print(self.check(building))\n                print(building[i]*building[i])\n                print(building)\n                print(building[i])\n                print(i)\n                print(building[i])\n                print(building[i])\n                print(building)\n                print(\"y\")\n                if self.check(building)==1:\n                    print(\"yes\")\n                    print(building)\n                    print(i)\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print(building[i])\n                    print("
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == ''\nassert solution(input().split(' ')) == ''\nassert solution(input().split(' ').sort()) == '1 2 3 4'\nassert solution(input().split(' ').sort()) == '2 3 3 3 2'\nassert solution(input().split(' ').sort()) == '3 3 3 2 3'\n"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"1 1\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10.0'\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin):\n        pass\n\npass\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0 0 D') == '10.0'\nassert solution('1 0 D') == '10.0'\nassert solution('3 0 D') == '10.0'\nassert solution('4 0 D') == '10.0'\nassert solution('6 2 D') == '10.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"10.0\"\nassert solution(inp) == \"10.0\"\nassert solution(inp) == \"10.0\"\nassert solution(inp) == \"10.0\"\nassert solution(inp) == \"10.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '10.0'\nassert solution(stdin) == '10.0'\nassert solution(stdin) == '4.0'\nassert solution(stdin) == '6.0'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '10.0'\nassert solution(inp) == '4.0'\nassert solution(inp) == '6.0'\nassert solution(inp) == '2.0'\nassert solution(inp) == '1.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test.input) == \"10.0\"\nassert solution(test2.input) == \"0.0\"\nassert solution(test3.input) == \"10.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 0 D\") == \"10.0\"\nassert solution(\"10 1 L\") == \"3.0\"\nassert solution(\"10 3 L\") == \"5.0\"\nassert solution(\"10 4 L\") == \"7.0\"\nassert solution(\"10 4 D\") == \"11.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n'''\n5 3 7\n0 0 D\n10 1 L\n6 2 D\n7 4 D\n8 5 D\n9 0 D\n10 2 L\n5 4 L\n6 5 L\n7 6 L\n8 7 L\n9 9 L\n'''\n) == '10.0'\nassert solution(\n'''\n5 3 7\n0 0 D\n10 1 L\n6 2 D\n7 4 D\n8 5 D\n9 0 D\n10 2 L\n5 4 L\n6 6 L\n7 6 L\n8 7 L\n9 9 L\n'''\n) == '4.0'\nassert solution(\n'''\n1 2 0\n3 1 0\n4 0 0\n5 0 0\n6 0 0\n7 0 0\n8 0 0\n9 0 0\n'''\n) == '1.0'\nassert solution(\n'''\n1 2 0\n3 1 0\n4 0 0\n5 0 0\n6 0 0\n7 0 0\n8 0 0\n9 0 0\n'''\n) == '1.0'\nassert solution(\n'''\n1 0 0\n0 0 0\n1 0 0\n3 1 0\n4 1 0\n5 1 0\n6 1 0\n7 1 0\n8 1 0\n9 1 0\n'''\n) == '0.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '10.0'\nassert solution(stdin) == '0.0'\nassert solution(stdin) == '0.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 3 10') == 10\nassert solution('2 3 7') == 10\nassert solution('4 3 7') == 10\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"we will avenge our dead parrot arr\", \"Incorrect answer\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Impossible\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"welcome\"\nassert solution(stdin) == \"welcome\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"welcome\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'we will avenge our dead parrot arr'\n\nassert solution(input().upper()) == 'IMPOSSIBLE'\n\nassert solution(input().split()) == 'we will avenge our dead parrot arr'\n\nassert solution(input().split()) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'Impossible'\n\"\"\""
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"be a we\"), 'be a we'\nassert solution(\"our\"), 'our'\nassert solution(\"rum\"), 'rum'\nassert solution(\"dead\"), 'dead'\nassert solution(\"hook\"), 'hook'\n"
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"./in/input_40.txt\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"amsterdam rotterdam\") == \"68.3\"\nassert solution(\"amsterdam Utrecht 10 22 5 10\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'IMPOSSIBLE'\n'''"
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'IMPOSSIBLE'\n\n\"\"\""
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A STATION is Bus by Trip\\n\"), \"IMPOSSIBLE\"\nassert solution(\"A STATION is Bus by Trip\\n\\n\"), \"IMPOSSIBLE\"\nassert solution(\"A STATION is Bus by Trip\\n\\n\\n\"), \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\n-----Submissions-----\n## Time  ## Space   ## Notes\n
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"(Hamburg Bremen) Hamburg Bremen 15 68 10 5 (Hamburg Bremen) Hamburg Bremen 46 55 50 60 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10 22 5 10 (Amsterdam Rotterdam) Amsterdam Utrecht 10"
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('Hamburg Bremen') == 'IMPOSSIBLE'\nassert solution('Hamburg Bremen 15 68 10 5') == 'IMPOSSIBLE'\nassert solution('Hamburg Bremen 46 55 50 60') == 'IMPOSSIBLE'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"amsterdam Utrecht 10 22 5 10\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom typing import Tuple, Dict\n"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    4\n    .|.|\n    *.*-*\n    |...|\n    *.*.*\n    \"\"\") == 4\n    pass\nExplanation\n\nSample Input 1:\n4\n.|.|\n*.*-*\n|...|\n*.*.*\nSample Output 1:\n4\n\"\"\"\n    ) == 6\n    pass\nExplanation\n\nSample Input 2:\n2\n*.*\n*.*\n*.*\n*.*\n*.*\n\nSample Output 2:\n4\n\nConclusion\nYou may be tempted to write your answer as part of the **solution**, and the solution is guaranteed to score a point in the worst case. The game ends after the first player has scored its point.\n\nConstraints:\n\n1 <= N <= 80\n\"\"\"\n    pass\n"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"5\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"3\"\nassert solution(\"1\") == \"3\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"4\"\n\"\"\"\nimport sys\nimport math\nimport copy"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2*') == '3'\nassert solution('2*3*') == '8'\nassert solution('2*4') == '2'\nassert solution('2*5') == '2'\nassert solution('2*6') == '2'\n"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"4\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    '1 2 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\""
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input().split()) == \"5\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4, \"incorrect\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"12210020\",\"11010010\",\"00011101\",\"11010001\",\"11010010\"]) == \"impossible\"\nassert solution([\"1111\",\"11010010\",\"00011101\",\"11010001\",\"11010010\"]) == \"4\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 6\n\nassert solution(inp) == 7\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('12210020') == 'impossible', 'Expected \"impossible\" got {!r}'.format(solution('12210020'))\nassert solution('0101100') == 'impossible', 'Expected \"impossible\" got {!r}'.format(solution('0101100'))\nassert solution('00011') == 4, 'Expected \"4\" got {!r}'.format(solution('00011'))\nassert solution('1000') == -1, 'Expected \"impossible\" got {!r}'.format(solution('1000'))\nassert solution('1111') == -1, 'Expected \"impossible\" got {!r}'.format(solution('1111'))"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 0\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"impossible\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == 'impossible'\nassert solution('0') == '1'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('0.00 500 500 499 0 0 999 1000 1000 200 1000 200 1000 800 1000 500 999') == 'Bill will be bitten.'\nassert solution('0.00 500 500 499 0 0 999 1000 1000 200 1000 200 1000 800 1000 500 999') == 'Bill will be bitten.'\nassert solution('0.00 500 500 499 0 0 999 1000 1000 200 1000 200 1000 800 1000 500 999') == 'Bill will be bitten.'\nassert solution('0.00 500 500 999 0 0 999 1000 1000 200 1000 200 1000 800 1000 500 999') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"50 0 0 0 500 500 500\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"0 0 0 0 500 500 500\") == \"Bill will be bitten.\"\nassert solution(\"0 0 0 0 500 500 500\") == \"Bill will be bitten.\"\nassert solution(\"1000 1000 1000 1000 1000\") == \"Bill will be bitten.\"\nassert solution(\"50 0 0 0 500 500 500\") == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1000 500 499') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)'\nassert solution('1000 500 999') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)'\nassert solution('1000 500 300') == 'Bill enters at (1000.00, 800.00) and leaves at (1000.00, 800.00)'\nassert solution('1000 500 400') == 'Bill enters at (1000.00, 800.00) and leaves at (1000.00, 800.00)'\nassert solution('1000 500 400') == 'Bill enters at (1000.00, 800.00) and leaves at (1000.00, 800.00)'\n"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Bill will be bitten.\\n'\n"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5\\n-1\\n1\\n1') == '1.00'\nassert solution('3\\n0\\n0\\n0') == '0.00'\nassert solution('2\\n1\\n0\\n0') == '0.00'\nassert solution('2\\n2\\n1') == '0.00'\n"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n'''5\n1000\n500 1000\n400 400\n'''\n) == 'Bill will be bitten.''')\n\nprint('True', solution(\n'''5\n1000\n500 1000\n400 400\n'''\n))"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), 'failed'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Bill will be bitten.\""
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 2 3 8 1 4 3\") == \"Bill will be bitten. \"\nassert solution(\"2 1 3 4 9 2 1 8 6 3\") == \"Bill will be bitten. \"\nassert solution(\"3 1 2 1 3 2 1 3 2 2 1 2\") == \"Bill will be bitten. \"\nassert solution(\"3 1 2 1 3 2 1 3 2 2 1 2\") == \"Bill will be bitten. \"\nassert solution(\"2 1 2 3 2 2 3 3 2 3 2 2 2 2\") == \"Bill will be bitten. \"\n"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(stdin) == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'xxoooooo'\nassert solution(stdin) == 'xxxoooooo'\nassert solution(stdin) == 'xxxoooooo'\nassert solution(stdin) == 'xxxxoooooo'\nassert solution(stdin) == 'xxxoooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution((\"++++\", 5, \"++++\")), \"There are no valid solutions\"\nassert solution((\"++++\", 4, \"++++\")), \"There are no valid solutions\"\nassert solution((\"++++\", 7, \"++++\")), \"There are no valid solutions\"\nassert solution((\"++++\", 5, \"++++\")), \"There are no valid solutions\"\nassert solution((\"++++\", 6, \"++++\")), \"There are no valid solutions\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"xxoooooo\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"xxoo\", \"Sample Test Failed\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"xxoo\"\nassert solution(stdin) == \"xoooo\"\nassert solution(stdin) == \"xxoo\"\nassert solution(stdin) == \"xxoo\"\nassert solution(stdin) == \"xxoo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(list(map(str, input()))) == \"xxxo\"\nassert solution(list(map(str, input()))) == \"xxxxx\"\nassert solution(list(map(str, input()))) == \"xxx\""
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"++xx+x++\") == \"xxooooo\"\nassert solution(\"xxxxxxxx\") == \"xxooooo\"\nassert solution(\"+++++\") == \"xxoo\"\nassert solution(\"++++\") == \"xxoo\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"xxoooooo\"\nassert solution(input()) == \"xxoooooo\"\nassert solution(input()) == \"xxoooooo\"\nassert solution(input()) == \"xxoooooo\"\nassert solution(input()) == \"xxoooooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1') == 'xxoooooo'\nassert solution('1') == 'xxooooo'\nassert solution('1') == 'xxo'\nassert solution('1') == 'xx'\nassert solution('1') == 'x'\n"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(raw_input()) == 'oopppp'\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"close: lose\"\nassert solution(stdin) == \"hen: he when\"\nassert solution(stdin) == \"he: hen the\"\nassert solution(stdin) == \"hen: he when\"\nassert solution(stdin) == \"hen: hen the\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"Lost is Close to Lose\", \"Better Documents Inc. wants to add Typo Checking in to the next generation of word processors.\"]) == \"close: lose\\nhe: he\\nhen: he\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he when\\ntill: will\\nthen: hen the\\nthe: he\\nwhen: hen\\nwhen: hen\"\nassert solution([\"The fox said, \\\"When?\"\", \"Not till 12 o'clock\", \"That clock is stopped, it will never strike.\", \"That clock is stopped, it will never strike.\"]) == \"clock: oclock\\nhe: hen the\\nhen: he when\\nhen: hen the\\nis: it\\nis: in\\nlose: close lost\\nlost: lost\\nthe: he when\\ntill: will\\nthen: hen the\\nthen: hen the\\nthe: he\\nwhen: hen\\nthen: hen the\\nthen: hen the\\nwhen: hen\\nwhen: hen\\nwhen: hen\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nwhen: hen\\nhen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen: hen the\\nthen"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"typos\"\nassert solution(stdin) == \"typos\"\nassert solution(stdin) == \"typos\"\nassert solution(stdin) == \"typos\"\nassert solution(stdin) == \"typos\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"Lost is Close to Lose\") == \"close: lose\"\nassert solution(\"Better Documents Inc. wants to add Typo Checking in to the next generation of word processors\") == \"close: lose\"\nassert solution(\"The fox said, \\\"When?\"\") == \"close: lose\"\nassert solution(\"The fox said, \\\"Not till 12 o'clock\", replied the hen. \\\"That clock is stopped, it will never strike.\") == \"close: lose\"\nassert solution(\"The fox said, \\\"That clock is stopped, it will never strike.\") == \"close: lose\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1Test1"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"Better documents inc is a typo in the next generation of word processors\") == \"close: lose\"\nassert solution(\"better documents inc is a typo in the next generation of word processors\") == \"close: lose\\n\"\nassert solution(\"better documents inc is a typo in the next generation of word processors\") == \"close: lose\\n\"\nassert solution(\"The fox said, 'When?\" '\"Not till 12 o\\'clock',\" replied the hen.\") == \"close: lose\\n\"\nassert solution(\"The fox said, 'When?\" '\"Not till 12 o\\'clock',\" replied the hen.\\n\") == \"close: lose\\n\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"close lost\"\nassert solution(inp) == \"close: lose\"\nassert solution(inp) == \"close: lose, he: hen the\"\nassert solution(inp) == \"close: lose, he: hen the, hen: hen the\"\nassert solution(inp) == \"close: lose, hen: hen the, hen: hen the, hen: hen the\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"In 1: 1, 2: 3, 3: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12, 11: 13, 12: 14, 13: 15\") == \"close: lose\"\nassert solution(\"In 1: 1, 2: 3, 3: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12, 11: 13, 12: 14, 13: 15\") == \"Clock: Lose\"\nassert solution(\"In 1: 1, 2: 3, 3: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12, 11: 13, 12: 14, 13: 15\") == \"In 1: 1, 2: 3, 3: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12, 11: 13, 12: 14, 13: 15\"\nassert solution(\"In 1: 1, 2: 3, 3: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12, 11: 13, 12: 14, 13: 15\") == \"In 1: 1, 2: 3, 3: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12, 11: 13, 12: 14, 13: 15\"\nassert solution(\"In 1: 1, 2: 3, 3: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12, 11: 13, 12: 14, 13: 15\") == \"1: 2, 3: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12, 11: 13, 12: 14, 13: 15\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\"\n) == \"close: lose\"\nassert solution(\n\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\"\n) == \"close: lose\"\nassert solution(\n\"\"\"\n\"The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\"\n) == \"close: lose\"\nassert solution(\n\"\"\"\n\"The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\"\n) == \"close: lose\"\nassert solution(\n\"\"\"\n\"The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\"\n) == \"close: lose\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"close: lose\"\n\"\"\""
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 10\n\"\"\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 4\nassert solution(10) == 3\nassert solution(100) == 1\nassert solution(1) == 0\nassert solution(3) == 2"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == 3\nassert solution(\"3 7 8 9 4 5 2 3\") == 1\nassert solution(\"5 6 8 7 3 4 2 1\") == 1\nassert solution(\"10 5 4 2 1 3 7 8 9 6\") == 3\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == 3"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), 'failed'"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1,2,3,4,5,6,7,8,9,10) == 1, 'Test case 1 failed'\nassert solution(0,1,2,3,4,5,6,7,8,9,10) == 2, 'Test case 2 failed'\nassert solution(5,4,2,1,3,6,7,8,9,10) == 2, 'Test case 3 failed'\nassert solution(10,9,8,7,6,5,4,3,2,1,0) == 2, 'Test case 4 failed'\nassert solution(1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\",\"2\",\"7\",\"3\",\"8\",\"4\",\"5\",\"6\",\"9\"]) == \"2\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]) == \"1\"\nassert solution([\"3\",\"4\",\"6\"]) == \"1\"\nassert solution([\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"306\",\"307\",\"308\",\"309\",\"310\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"320\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"330\",\"331\",\"332\",\"333\",\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"350\",\"351\",\"352\",\"353\",\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"360\",\"361\",\"362\",\"363\",\"364\",\"365\",\"366\",\"367\",\"368\",\"369\",\"370\",\"371\",\"372\",\"373\",\"374\",\"375\",\"376\",\"377\",\"378\",\"379\",\"380\",\"381\",\"382\",\"383\",\"384\",\"385\",\"386\",\"387\",\"388\",\"389\",\"390\",\"391\",\"392\",\"393\",\"394\",\"395\",\"396\",\"397\",\"398\",\"399\",\"400\",\"401\",\"402\",\"403\",\"404\",\"405\",\"406\",\"407\",\"408\",\"409\",\"410\",\"411\",\"412\",\"413\",\"414\",\"415\",\"416\",\"417\",\"418\",\"419\",\"420\",\"421\",\"422\",\"423\",\"424\",\"425\",\"426\",\"427\",\"428\",\"429\",\"430\",\"431\",\"432\",\"433\",\"434\",\"435\",\"436\",\"437\",\"438\",\"439\",\"440\",\"441\",\"442\",\"443\",\"444\",\"445\",\"446\",\"447\",\"448\",\"449\",\"450\",\"451\",\"452\",\"453\",\"454\",\"455\",\"456\",\"457\",\"458\",\"459\",\"460\",\"461\",\"462\",\"463\",\"464\",\"465\",\"466\",\"467\",\"468\",\"469\",\"470\",\"471\",\"472\",\"473\",\"474\",\"475\",\"476\",\"477\",\"478\",\"479\",\"480\",\"481\",\"482\",\"483\",\"484\",\"485\",\"486\",\"487\",\"488\",\"489\",\"490\",\"491\",\"492\",\"493\",\"494\",\"495\",\"496\",\"497\",\"498\",\"499\",\"500\",\"501\",\"502\",\"503\",\"504\",\"505\",\"506\",\"507\",\"508\",\"509\",\"510\",\"511\",\"512\",\"513\",\"514\",\"515\",\"516\",\"517\",\"518\",\"519\",\"520\",\"521\",\"522\",\"523\",\"524\",\"525\",\"526\",\"527\",\"528\",\"529\",\"530\",\"531\",\"532\",\"533\",\"534\",\"535\",\"536\",\"537\",\"538\",\"539\",\"540\",\"541\",\"542\",\"543\",\"544\",\"545\",\"546\",\"547\",\"548\",\"549\",\"550\",\"551\",\"552\",\"553\",\"554\",\"555\",\"556\",\"557\",\"558\",\"559\",\"560\",\"561\",\"562\",\"563\",\"564\",\"565\",\"566\",\"567\",\"568\",\"569\",\"570\",\"571\",\"572\",\"573\",\"574\",\"575\",\"576\",\"577\",\"578\",\"579\",\"580\",\"581\",\"582\",\"583\",\"584\",\"585\",\"586\",\"587\",\"588\",\"589\",\"590\",\"591\",\"592\",\"593\",\"594\",\"595\",\"596\",\"597\",\"598\",\"599\",\"600\",\"601\",\"602\",\"603\",\"604\",\"605\",\"606\",\"607\",\"608\",\"609\",\"610\",\"611\",\"612\",\"613\",\"614\",\"615\",\"616\",\"617\",\"618\",\"619\",\"620\",\"621\",\"622\",\"623\",\"624\",\"625\",\"626\",\"627\",\"628\",\"629\",\"630\",\"631\",\"632\",\"633\",\"634\",\"635\",\"636\",\"637\",\"638\",\"639\",\"640\",\"641\",\"642\",\"643\",\"644\",\"645\",\"646\",\"647\",\"648\",\"649\",\"650\",\"651\",\"652\",\"653\",\"654\",\"655\",\"656\",\"657\",\"658\",\"659\",\"660\",\"661\",\"662\",\"663\",\"664\",\"665\",\"666\",\"667\",\"668\",\"669\",\"670\",\"671\",\"672\",\"673\",\"674\",\"675\",\"676\",\"677\",\"678\",\"679\",\"680\",\"681\",\"682\",\"683\",\"684\",\"685\",\"686\",\"687\",\"688\",\"689\",\"690\",\"691\",\"692\",\"693\",\"694\",\"695\",\"696\",\"697\",\"698\",\"699\",\"700\",\"701\",\"702\",\"703\",\"704\",\"705\",\"706\",\"707\",\"708\",\"709\",\"710\",\"711\",\"712\",\"713\",\"714\",\"715\",\"716\",\"717\",\"718\",\"719"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1/7\"\n\"\"\""
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5/3\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1/7'"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1/7'\n"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0.142857 0.6') == '1/7'\nassert solution('1.6 1') == '1/7'\nassert solution('1.6 1.6') == '1/7'\nassert solution('1.6 1.6.6') == '1/7'\nassert solution('1.6 0.6') == '1/7'\n"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1/7\"\nassert solution(input()) == \"5/3\"\nassert solution(input()) == \"2/7\"\nassert solution(input()) == \"6/1\"\nassert solution(input()) == \"6/2\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"0.142857 6\"\n    ) == \"5/3\"\nassert solution(\n    \"1.6 1\"\n    ) == \"5/7\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"0.142857\"]), \"0.142857\"\nassert solution([\"1.6\"]), \"5/3\"\nassert solution([\"1\"]), \"1\"\nassert solution([\"5\"]), \"5/3\"\nassert solution([\"1.0\"]), \"1/5\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1/7\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5 6 1 2 3 0.142857 6 0.6 0.1 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0."
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4 6\") == \"3\"\nassert solution(\"1 0 0 0 1 0 0\") == \"1\"\nassert solution(\"1 0 0 1 1 0\") == \"1\"\nassert solution(\"1 0 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '10'\n\"\"\"\n\nimport sys\nimport math\nimport os\nfrom collections import deque"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 2\nassert solution(2) == 10\nassert solution(3) == 12\n"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\\n2\\n1\") == \"5\"\nassert solution(\"1\\n4\\n3\\n2\") == \"4\"\nassert solution(\"1\\n0\\n0\") == \"0\"\nassert solution(\"0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"0\\n0\\n0\\n1\") == \"0\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10\n\"\"\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 6, \"Error in solution\"\nassert solution(2) == 10, \"Error in solution\"\nassert solution(3) == 5, \"Error in solution\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"5\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\n\n\n-----Sample Input 3-----\n1\n0 0\n0 0\n0 0\nSample Output 3:\n10\n"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"2\"]) == \"1\"\nassert solution([\"3\"]) == \"1\"\nassert solution([\"4\"]) == \"1\"\nassert solution([\"5\"]) == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2, \"This test should pass\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 4 -1 2 1 -1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n'''\n3\n-1 2 -1\n2 2\n1 -1 1\nSample Input:\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\nSample Output:\n1\n'''\n)\n"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 -1\") == 1\nassert solution(\"7 3 -1\") == 1\nassert solution(\"7 -1 1\") == 1\nassert solution(\"-1 4 -1\") == 0\nassert solution(\"1 -1 1\") == 0\n"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\"\"\"\n\nimport unittest\nfrom itertools import combinations\nfrom collections import Counter\n"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n'''\nimport sys"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"1\"\nassert solution(\"11001\") == \"1\"\nassert solution(\"1101\") == \"1\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 1\n\n\"\"\""
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7, \"incorrect\"\n\"\"\""
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(10, 1) == \"0\"\nassert solution(10, 11) == \"0\"\nassert solution(9, 11) == \"1\"\nassert solution(9, 12) == \"1\"\nassert solution(9, 13) == \"1\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 3\n\"\"\"\n\nimport unittest\nfrom typing import Iterator"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"1\", \"0\"]) == \"1\"\nassert solution([\"10\", \"11\", \"00011\"]) == \"3\"\nassert solution([\"1\", \"0\", \"0\"]) == \"0\"\nassert solution([\"0\"]) == \"1\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 1\nassert solution(input()) == 2\n"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n\n    def __init__(self):\n        pass\n\n    def main(self, stdin):\n        pass"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"LLL\""
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"LLLLR\", \"wrong answer\"\nassert solution(stdin) == \"LLLLRL\", \"wrong answer\"\nassert solution(stdin) == \"LLLLLRL\", \"wrong answer\"\nassert solution(stdin) == \"LLLLLLRL\", \"wrong answer\"\nassert solution(stdin) == \"LLLLLLLLRL\", \"wrong answer\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"LLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('10') == 'LL'\nassert solution('100') == 'LLR'\nassert solution('1000') == 'LLR'\nassert solution('10000') == 'LLL'\n"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\",\"1\",\"2\"]) == \"LLR\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"RRR\"\nassert solution([\"3\",\"5\"]) == \"LR\"\nassert solution([\"3\",\"2\",\"1\"]) == \"LRR\"\nassert solution([\"1\",\"1\",\"2\",\"2\"]) == \"LL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"LLL\"\nassert solution(input()) == \"LRLR\"\nassert solution(input()) == \"RRR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 2 1 4 1 2 3 1 2 2 4 2 2 1 4 2 1 2 1 1 2 1 1 2 1 1 2 1\") == \"LLLRLR\"\nassert solution(\"1 3 2 1 4 1 2 3 1 2 2 4 2 2 1 4 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1\") == \"LLRLR\"\nassert solution(\"1 3 2 1 4 1 2 3 1 2 2 4 2 2 1 4 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1\") == \"LLLRLR\"\nassert solution(\"1 3 2 1 4 1 2 3 1 2 2 4 2 2 1 4 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1\") == \"LLL\"\nassert solution(\"1 3 2 1 4 1 2 3 1 2 2 4 2 2 1 4 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1 2 1 1\") == \"LL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 0 0 0 0') == 'LLL'\nassert solution('2 2 2 2 2') == 'RLLR'\nassert solution('3 3 3 3 3') == 'LRRRLLR'\nassert solution('4 4 4 4 4') == 'RLLLRRRLLL'\nassert solution('5 5 5 5 5') == 'RLLLRRLLRLLL'\n"
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"11L\") == \"LLLRLR\"\nassert solution(\"10L\") == \"LLLRRRLLRLRL\"\nassert solution(\"5L\") == \"LLRLRRLRRLLRL\"\nassert solution(\"3L\") == \"LLRRRRLLLLRLR\"\nassert solution(\"1L\") == \"LRRRRLLRLRL\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input().split(' ')) == 'Poor girl, Good girl, Good girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 4 2 4 3\") == 49000000000070\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 7, 10, 1, 2, 1000000) == 49000000000070, 'Poor girl'\n\nassert solution(3, 6, 7, 1, 3, 1000000) == 25000000000021, 'Poor girl'\nassert solution(6, 2, 7, 1, 3, 1000000) == 25000000000021, 'Poor girl'\nassert solution(6, 2, 7, 1, 3, 1000000) == 25000000000021, 'Poor girl'\nassert solution(2, 4, 5, 1, 3, 1000000) == 25000000000021, 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"Poor girl\"\nassert solution(inp2) == \"Poor girl\"\nassert solution(inp3) == \"Poor girl\""
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"Poor girl\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 3 5 4 6 2 3 4 2\") == \"Poor girl\"\nassert solution(\"2 1 1 3 3 1 3\") == \"Poor girl\"\nassert solution(\"1 4 4 2000000\") == \"Poor girl\"\nassert solution(\"1 2 3 3 2 3 2\") == \"Poor girl\"\nassert solution(\"1 2 3 3 2 3 2\") == \"Poor girl\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 2 1000\") == \"Poor girl\"\nassert solution(\"2 3 1000000\") == \"Poor girl\"\nassert solution(\"1 3 2000000\") == \"Poor girl\"\nassert solution(\"1 5 3000000\") == \"Poor girl\"\nassert solution(\"1 2 3 2000000\") == \"Poor girl\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Poor girl\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Poor girl!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"0\"\nassert solution(2) == \"0\"\nassert solution(3) == \"0\"\nassert solution(4) == \"0\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yeah!\""
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 'Yeah!'\n'''"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 'Yeah!', \"The solution should return 'Yeah!'\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,1) == \"Yeah!\"\nassert solution(2,3) == \"Yeah!\"\nassert solution(1,4) == \"Yeah!\"\nassert solution(2,4) == \"Yeah!\"\nassert solution(1,5) == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yeah!\"\n\"\"\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"Yeah!\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\"\nassert solution(input()) == \"POSSIBLE\""
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 2\\n1 2\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"1\\n2\\n1\\n2\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"3 1\\n2 3\\n1 2\\n2 2\\n3 3\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"1 2\\n2 1\\n3 3\"\n) == \"POSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 1 0\") == \"POSSIBLE\", \"IMPOSSIBLE\"\nassert solution(\"2 1 1\") == \"POSSIBLE\", \"IMPOSSIBLE\"\nassert solution(\"2 2 3\") == \"IMPOSSIBLE\", \"IMPOSSIBLE\"\nassert solution(\"1 3 3\") == \"IMPOSSIBLE\", \"IMPOSSIBLE\"\nassert solution(\"1 3 3 1\") == \"IMPOSSIBLE\", \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"IMPOSSIBLE\"\nassert solution(\"2 1\") == \"IMPOSSIBLE\"\nassert solution(\"2 1 3\") == \"IMPOSSIBLE\"\nassert solution(\"2 2 3\") == \"POSSIBLE\"\nassert solution(\"2 3 1\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\"\n\"\"\"\nfrom collections import deque\nfrom itertools import permutations"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"POSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp := input()) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\\n0\") == \"IMPOSSIBLE\"\nassert solution(\"0\\n1\\n0\\n1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'POSSIBLE'\nassert solution(input().lstrip()) == 'POSSIBLE'\nassert solution(input().strip()) == 'IMPOSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\") == \"IMPOSIBLE\"\nassert solution(\"1 1 2\") == \"IMPOSIBLE\"\nassert solution(\"1 2 3\") == \"IMPOSIBLE\"\nassert solution(\"2 3 1\") == \"POSSIBLE\"\nassert solution(\"2 3 2\") == \"IMPOSIBLE\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\") == \"0.0 -0.0\"\nassert solution(\"1 0 0\") == \"0.0 0.0\"\nassert solution(\"0 0 1\") == \"0.0\"\nassert solution(\"0 0 0\") == \"0.5\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0.5 0.5 0.5\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"0.5 0.5 0.5\""
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1.0 0.0 0.0 0.0\") == \"0.0 0.0 0.0\"\nassert solution(\"0.0 0.0 0.0 0.0\") == \"0.0 0.0 0.0\"\nassert solution(\"0.0 0.0 0.0 0.0\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n'''\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0.5 0.5 0.5'"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"\"\n\"\"\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0.5 0.5 0.5'\nassert solution(stdin) == '0 0 0'\nassert solution(stdin) == '0 0 0'\nassert solution(stdin) == '0 0 0'\nassert solution(stdin) == '0 0 0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0.5 0.5 0.5\""
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0.5 0.5 0.5\"\nassert solution(input().replace('-100', '')) == \"1 1 0\"\nassert solution(input().replace('-100', '').replace(' ', '')) == \"1 1 0\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"17\""
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == [5, 9]\n\n\"\"\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \") == \"A very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \"\nassert solution(\"a very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \") == \"a very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \"\nassert solution(\"A very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \") == \"A very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \"\nassert solution(\"A very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \") == \"A very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \"\nassert solution(\"a very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \") == \"a very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed. \"\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['10', '3 6 2 3 2 2 2 1 5 6']) == '2'\nassert solution(['3', '6', '2', '2', '1', '5', '6']) == '3'\nassert solution(['17', '17', '17', '17', '17', '17', '17']) == '17'\nassert solution(['1', '3', '2', '2', '2', '1', '5', '6']) == '5'\nassert solution(['6', '6', '6', '6', '6', '6', '6', '6']) == '6'\n"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\", \"6\", \"2\", \"2\", \"1\", \"5\", \"6\"]) == [\"3\", \"2\", \"2\", \"1\", \"5\", \"6\"]\nassert solution([\"3\", \"1\", \"2\"]) == [\"3\", \"2\"]\nassert solution([\"3\", \"1\", \"2\", \"3\", \"2\"]) == [\"3\", \"2\", \"2\"]\nassert solution([\"3\", \"1\", \"2\", \"3\", \"2\", \"4\", \"3\"]) == [\"3\", \"2\", \"2\", \"3\", \"4\"]\nassert solution([\"3\", \"1\", \"2\", \"1\"]) == [\"3\", \"2\"]\n"
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1,2,3,4'), 'IMPOSSIBLE'\nassert solution('0,2,3,4'), 'IMPOSSIBLE'\nassert solution('1,2,3,4,5'), 'IMPOSSIBLE'\nassert solution('1,2,3,4,5,6,7,8'), 'IMPOSSIBLE'\nassert solution('0,2,3,4'), 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 7\") == \"74.6666666667\"\nassert solution(\"2 3 8\") == \"74.6666666667\"\nassert solution(\"1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\"\n\n\"\"\"\n\n\nclass Solution:\n    def calculate_emergency_risk(self, n: int, m: int, e: int, roads: List[List[int]]) -> float:\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if i == 1 or j == 1:\n                    dp[j][i] = dp[j][i - 1]\n\n                if roads[i - 1][j - 1] == 1:\n                    dp[j][i] = max(dp[j - 1][i], dp[j][i - 1] + e)\n\n        return dp[-1][-1]\n"
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input().split()) == 'IMPOSSIBLE'\n\"\"\"\nfrom heapq import heapify, heappop, heappush, heapreplace\nimport sys\nimport math\nsys.setrecursionlimit(10 ** 5)\ninput = sys.stdin.readline"
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"3 2 1\", \"1 2 7\", \"2 3 8\", \"1\", \"3 2\"]) == \"74.6666666667\"\nassert solution([\"3 2 1\", \"1 2 7\", \"2 3 8\", \"1\", \"3 2\", \"1\", \"1 4\"]) == \"IMPOSSIBLE\""
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'IMPOSSIBLE'"
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,1) == \"IMPOSSIBLE\"\nassert solution(5,1) == \"IMPOSSIBLE\"\nassert solution(3,1) == \"IMPOSSIBLE\"\nassert solution(1,4) == \"IMPOSSIBLE\"\nassert solution(4,4) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 2\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 2 0 1 1 2 1 2 0 2 1 2 1 1 2 1 0\") == \"1 1 1 1 2\"\nassert solution(\"0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1\") == \"2\"\nassert solution(\"1 2 3 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 0 1\") == \"0\"\nassert solution(\"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\") == \"0\"\nassert solution
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        \"1 2\",\n        \"2 3\",\n        \"3 1\",\n        \"3 4\",\n        \"1 4\",\n        \"4 5\",\n        \"5 6\"\n    ]) == \"0\"\nassert solution(\n    [\n        \"1 2\",\n        \"2 3\",\n        \"3 1\",\n        \"3 4\",\n        \"1 4\",\n        \"4 5\",\n        \"5 6\"\n    ]) == \"2\"\nassert solution(\n    [\n        \"1 2\",\n        \"2 3\",\n        \"3 1\",\n        \"3 4\",\n        \"1 4\",\n        \"4 5\",\n        \"5 6\"\n    ]) == \"1\"\nassert solution(\n    [\n        \"1 2\",\n        \"2 3\",\n        \"3 1\",\n        \"3 4\",\n        \"1 4\",\n        \"4 5\",\n        \"5 6\"\n    ]) == \"2\"\nassert solution(\n    [\n        \"1 2\",\n        \"2 3\",\n        \"3 1\",\n        \"3 4\",\n        \"1 4\",\n        \"4 5\",\n        \"5 6\"\n    ]) == \"2\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"No solution\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"test\") == \"test\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a2\") == \"a\"\nassert solution(\"a3\") == \"a\"\nassert solution(\"b\") == \"b\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\npass\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(list(map(int, input().split()))) == '1'\nassert solution(list(map(int, input().split()))) == '0'\nassert solution(list(map(int, input().split()))) == '2'\nassert solution(list(map(int, input().split()))) == '2'\nassert solution(list(map(int, input().split()))) == '2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1\"\n\"\"\"\n\nN = int(stdin)\nA = list(map(int, stdin.split()))\nB = list(map(int, stdin.split()))"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '10'"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '10'\n'''\n\n\nclass Solution:\n    def shortestWay(self, st: str, t: int) -> int:\n        t += 2\n        T = [0, 0]\n        for i in range(len(st)):\n            if st[i] == '(':\n                T[0] = max(T[0], i + 1)\n            elif st[i] == ')':\n                T[1] = max(T[1], i + 1)\n            else:\n                pass\n        return T[1] + T[0] + t\n"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"3\",\"2\",\"3\"]) == \"10\"\nassert solution([\"0\",\"3\",\"4\",\"4\",\"0\"]) == \"10\"\nassert solution([\"3\",\"0\",\"4\",\"2\",\"0\"]) == \"8\"\nassert solution([\"2\",\"4\",\"0\",\"0\",\"2\"]) == \"12\"\nassert solution([\"2\",\"4\",\"0\",\"0\",\"2\"]) == \"11\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\""
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '15'\n"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10\"\n\n-----------------\n\nSample Input 1:\n3 4\n10\n10\n10\nSample Output 1:\n10\n\nSample Input 2:\n2 5\n1\n2\nSample Output 2:\n2\n\"\"\"\nimport sys\n\nN, T = map(int, sys.stdin.readline().split())\nG = []\nfor _ in range(N):\n    G.append(int(sys.stdin.readline()))\n\nG.sort()\ngondola_cabs = [0] * 400\nfor i in range(N):\n    for j in range(i + 1, N):\n        if G[i] + T <= G[j]:\n            gondola_cabs[G[i] + T - G[j]] += 1\n            gondola_cabs[G[j] + T - G[i]] += 1\n\nprint(sum(gondola_cabs))\n"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 5 5\") == \"5\"\nassert solution(\"10 5 1\") == \"10\"\nassert solution(\"10 1 5\") == \"10\"\nassert solution(\"10 1 3\") == \"10\"\nassert solution(\"5 10 4\") == \"15\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n\nassert solution(input()) == \"2\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"4\"\n\nassert solution(input()) == \"5\""
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"5 5\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\", \"25 25\","
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"29\"\nassert solution(\"16 24\") == \"35\"\nassert solution(\"44\") == \"25\"\nassert solution(\"34 4\") == \"15\"\nassert solution(\"28\") == \"30\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 4 4 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 111 112 113 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 188 189 189 190 191 192 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 219 220 221 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 240 241 242 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\nassert solution(input().rstrip()) == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(test_input) == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"4\", \"5\"]) == \"2\"\nassert solution([\"4\", \"5\", \"100\"]) == \"1\"\nassert solution([\"4\", \"5\", \"100\", \"50\"]) == \"2\"\nassert solution([\"4\", \"100\"]) == \"2\"\nassert solution([\"4\", \"100\", \"50\"]) == \"2\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"Wrong solution\"\nassert solution(stdin) == str(127), \"Wrong answer\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"R U C L\".split(\" \")\n) == \"X.L.X.L\""
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"4\", \"4\"]) == \"1\"\nassert solution([\"4\", \"4\", \"3\"]) == \"2\"\nassert solution([\"4\", \"4\", \"3\", \"2\"]) == \"2\"\nassert solution([\"4\", \"4\", \"3\", \"4\", \"2\"]) == \"1\"\nassert solution([\"4\", \"3\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '1'\n\"\"\""
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\".LX.X...L...X.\") == \"1\"\nassert solution(\".XL.X...X...L...\") == \"2\"\nassert solution(\".LX.X..L...L...L...\") == \"1\"\nassert solution(\".X..L...L...L..L...\") == \"2\"\nassert solution(\".L..L...L...L..L..L...\") == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\"\n\nimport math\n\nrows, cols = map(int, input().split())\nprint(rows, cols)\nd = [[float('inf') for _ in range(cols)] for _ in range(rows)]\ndist = [[float('inf') for _ in range(cols)] for _ in range(rows)]\nfor i in range(rows):\n    for j in range(cols):\n        d[i][j] = math.sqrt((i - j)**2)\nprint(d)\nfor i in range(rows):\n    for j in range(cols):\n        dist[i][j] = d[i][j]\nprint(dist)\ndist_c = 0\nfor i in range(rows):\n    for j in range(cols):\n        dist_c += dist[i][j]\nprint(dist_c)\n"
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"4 4\", \"LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX.LX"
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'home'\n\"\"\""
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"home\"\nassert solution(stdin) == \"home\"\nassert solution(stdin) == \"home\"\nassert solution(stdin) == \"home\"\nassert solution(stdin) == \"detention\""
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"home\"\nassert solution(input()) == \"detention\"\nassert solution(input()) == \"home\"\nassert solution(input()) == \"home\"\n\"\"\""
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3 1\") == \"home\"\nassert solution(\"4 5 2\") == \"home\"\nassert solution(\"2 1 0 2\") == \"home\"\nassert solution(\"2 2 0 2 1\") == \"home\"\nassert solution(\"2 2 1 1 2\") == \"home\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"home\"\nassert solution(\"2 0 2\") == \"home\"\nassert solution(\"2 1 3\") == \"home\"\nassert solution(\"2 2 4\") == \"detention\"\nassert solution(\"1 3\") == \"home\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'detention'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\nn,p,q=map(int,stdin.split())\na=[]\nfor i in range(n):\n    a.append(map(int,stdin.split()))"
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2 1 2 1 1\") == \"detention\"\nassert solution(\n    \"1 3 1 1 1 1 1 1 1 1\") == \"home\"\nassert solution(\n    \"3 2 2 2 1 1 1 2 1 1 2 1\") == \"detention\"\nassert solution(\n    \"1 1 1 2 1 1 2 1 1 1 3\") == \"home\"\nassert solution(\n    \"1 2 2 1 1 2 1 2 1 1 2 3\") == \"detention\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\") == -1\nassert solution(\"aab\") == \"aab\"\nassert solution(\"abb\") == \"bbaa\"\nassert solution(\"cac\") == \"cbaa\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"allatral\"\nassert solution(\"tr\") == \"allatral\"\nassert solution(\"lala\") == \"allatral\"\nassert solution(\"lala\") == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"allatral\"\nassert solution(\"trabal\") == \"allatral\"\nassert solution(\"nllll\") == \"allatral\"\nassert solution(\"raala\") == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == s\nassert solution(r) == 'allatral'\n\n'''\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(str(2)) == \"allatral\"\nassert solution(str(3)) == \"allatral\"\nassert solution(str(4)) == \"allatral\"\nassert solution(str(5)) == \"allatral\"\nassert solution(str(6)) == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'allatral'\nassert solution(stdin) == '-1'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"zzzz\") == \"allatral\"\nassert solution(\"trala\") == \"tralalal\"\nassert solution(\"lala\") == \"alalal\"\nassert solution(\"alal\") == \"alal\"\nassert solution(\"rz\") == \"rz\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == 'allatral'\nassert solution('xyz') == 'xyz'\nassert solution('123') == '123'\nassert solution('111') == '11111'\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n'''"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 8\n\n-----Constraints-----\n1 <= n <= 10^5\n-109 <= stdin[i] <= 109\n\n-----SAMPLE INPUT 0-----\n2\n1 2 3 4 5\n2\nSample Output 0:\n5\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, \"3 2 1 6 4 5\") == 5\nassert solution(1, \"6\") == 8\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3 4 6\") == \"8\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"8\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 6\n\nTest Example 1:\n\nInput:\n\n3\n6 2 5 4 7\n\nOutput:\n\n8\n'''"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n'''\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"30\") == \"1\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(7) == \"1\"\nassert solution(0) == 0\nassert solution(12) == 2\nassert solution(120) == \"2\"\nassert solution(569) == \"1\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(mystr) == 12\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"16 5 1\") == \"1\"\nassert solution(\"12 4\") == \"4\"\nassert solution(\"16 4 1\") == \"4\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 1, \"1\"\nassert solution(6) == 4, \"6\"\nassert solution(5) == 5, \"5\"\nassert solution(8) == 8, \"8\"\nassert solution(0) == 1, \"0\"\n\"\"\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n\"\"\""
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('abc') == '10'\nassert solution('def') == '10'\nassert solution('ghi') == '10'\nassert solution('a') == '1'\nassert solution('b') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 1) == 0\nassert solution(2, 1) == 1\nassert solution(3, 1) == 0\nassert solution(4, 1) == 1\nassert solution(5, 1) == 0\n"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0 1 15'\nassert solution(stdin) == '1 1 15'\nassert solution(stdin) == '1 1 20'\n"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 3 3 10 20 5 0 1 1 10 10 20 0 5 0 10 0 0 5 0 0 0 0 0 0 20 0 5 5 10 0 0 0 5 0 0 20 0 0 0 0 0 0 20 0 0 5 5 0 20 0 0 0 0 0 0 0 0 0 0 0 0 20 0 5 0 20 20 0 5 0 0 20 0 0 0 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 20 0 0 0 0 0 0 0 0 0 0 0 20 0 0 0 0 20 0 0 0 0 0 20 0 0 20 0 0 0 0 0 0 0 0 0 20 0 0 20 0 0 0 20 0 20 0 0 20 0 0 0 0 0 20 0 0 20 0 0 0 0 0 20 0 20 0 0 20 0 0 0 0 20 0 20 0 20 0 0 20 0 0 20 0 0 20 0 20 0 0 20 0 20 0 20 0 0 20 0 0 20 0 0 20 0 0 20 0 20 0 20 0 0 20 0 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5 5\",\"3 2\",\"1 2\",\"1 3\",\"3 4\",\"3 2\",\"1 1\"]) == \"1\"\nassert solution([\"1 3\",\"1 4\",\"1 0\",\"0 4\",\"0 0\",\"2 1\",\"2 2\"]) == \"0\"\nassert solution([\"0 0\",\"1 1\",\"1 1\",\"1 0\"]) == \"0\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0 1 15\"\nassert solution(stdin) == \"1 0 15\"\nassert solution(stdin) == \"1 1 15\"\nassert solution(stdin) == \"1 2 15\"\nassert solution(stdin) == \"2 0 15\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 2 10 0 0 1 0\"\n) == \"0 1 15 0 1 5\"\n\nassert solution(\n    \"2 3 2 10 20 20 20 20 20 20 20\"\n) == \"1 0 15 20 2 5\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 1 10\") == \"0 1 15\"\nassert solution(\"0 1 20\") == \"0 1 15\"\nassert solution(\"0 1 20 5\") == \"0 1 15 5\"\nassert solution(\"3 0 20\") == \"0 1 15 5\"\nassert solution(\"3 1 20\") == \"0 1 15 5\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 0\") == \"0 1 15\"\nassert solution(\"1 1 2 10\") == \"0 1 20\"\nassert solution(\"1 2 10 0\") == \"0 1 10\"\nassert solution(\"0 0 10 20\") == \"0 1 15\"\n\"\"\""
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 0\nassert solution(4) == 1\nassert solution(5) == 3\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 11\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) == \"0\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 0, 'Program Failed'\nassert solution(input()) == 1, 'Program Failed'\nassert solution(input()) == 3, 'Program Failed'\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 5 5\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"4 3\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 15\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"24\"\nassert solution(input()) == \"24\"\nassert solution(input()) == \"24\"\nassert solution(input()) == \"24\"\nassert solution(input()) == \"24\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"00000\n000001\n000101\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n000111\n0001"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"020302\") == \"7\"\nassert solution(\"1311\") == \"24\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == inp\n\"\"\""
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str(input())) == '7'\nassert solution(str(input())) == '24'\nassert solution(str(input())) == '5'\nassert solution(str(input())) == '10'\n"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"24\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('01') == '01'\nassert solution('01') == '02'\nassert solution('01') == '03'\nassert solution('01') == '10'\nassert solution('01') == '20'\n"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '24'\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n\n    def test_cases(self):\n        stdin, _ = input(), []\n        for case in stdin:\n            _, nums = case.split()\n            nums = list(map(int, nums))\n            self.assertEqual(solution(nums), sum(nums))\n        pass"
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"7\"\n\nSample Input 3:\n250\nSample Output 3:\n1\n\nInput 1:\n010\nOutput 1:\n1\n\nInput 2:\n2\nOutput 2:\n2\n\"\"\"\n\nimport math\nimport sys\nimport time"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"15 5\"\nassert solution(input()) == \"15 5\"\nassert solution(input()) == \"15 5\"\nassert solution(input()) == \"15 5\"\nassert solution(input()) == \"15 5\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '5 20'\n"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '###########.', \"incorrect input\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sys.stdin.readline()) == \"3 1 3 10\"\nassert solution(sys.stdin.readline()) == \"5 20\"\nassert solution(sys.stdin.readline()) == \"#########.#.#.#.#.###.###.#.###..#..#.##..#.###.##.####..######.###.####.###.#####.###.######.###.#####.####.#####.####.####.#####\"\nassert solution(sys.stdin.readline()) == \"##########.##.#.#.#.#.#.###.###..###.##..#..##.###.####..######.###.###.###.###.####.###.####.###.###.####.###.####.###.#####.#####.####.####.#####.#####.#####\"\nassert solution(sys.stdin.readline()) == \"#####..###.#...#.####...#..#####..#.#####.###.#######.#####..###.###.#####..###.#####...###.######...###.#######.#####.#####..#####.#######.#####..###.#####.######.####.#####.####.#####.#####.\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == \"1 1 3 10\"\nassert solution(\"20 20\") == \"1 3 1 10\"\nassert solution(\"5 20\") == \"1 3 4 5\"\nassert solution(\"5 20 3 20\") == \"1 3 4 5 6 7 8 9 10\""
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()), \"not implemented\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3 1 3 10\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 15 5 15\"\nassert solution(stdin) == \"1 15 5\"\nassert solution(stdin) == \"1 5 5\"\nassert solution(stdin) == \"1 15 5\"\nassert solution(stdin) == \"1 15\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '16.339203308'\nassert solution(stdin) == '5.000000000'\nassert solution(stdin) == '5.000000000'\nassert solution(stdin) == '5.000000000'\nassert solution(stdin) == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"50\", \"0.125\", \"1.000\"]) == \"16.339203308\"\nassert solution([\"201\", \"1.000\", \"1.000\"]) == \"5.000000000\"\nassert solution([\"50\", \"2.00000\"]) == \"0.000000000\"\nassert solution([\"50\", \"1.000000\"]) == \"0.000000000\"\nassert solution([\"50\", \"0.001\", \"1.00000\"]) == \"0.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1.8e8\") == \"16.3392033\"\nassert solution(\"1.e6\") == \"16.3392033\"\nassert solution(\"1.e7\") == \"16.339810\"\nassert solution(\"1.e8\") == \"16.3392033\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution((\"01.050000000000000002\",\"5.0\")) == \"5.000000000\"\nassert solution((\"01.50000000000000002\",\"5.0\")) == \"5.000000000\"\nassert solution((\"01.040000000000000002\",\"5.0\")) == \"5.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 5.000000000\nassert solution(input()) == 5\nassert solution(input()) == 5\nassert solution(input()) == 5\nassert solution(input()) == 5\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"solution does not return expected result\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\", \"Solution should be empty\"\nassert solution(\"1\") == \"1\", \"Solution should be 1\"\nassert solution(\"100\") == \"100\", \"Solution should be 100\"\nassert solution(\"0.125\") == \"0.125\", \"Solution should be 0.125\"\nassert solution(\"50.125\") == \"50.125\", \"Solution should be 50.125\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '16.339203308'\n"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"16.339203250\"\nassert solution(stdin) == \"5.00000000\"\n\"\"\"\n\nimport unittest\nfrom src.utils.answer import print_answer\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        stdin = \"50 0.125\"\n        expected = \"16.339203308\"\n        answer = \"16.339203308\"\n        answer_list = [\"16.339203308\", \"5.00000000\", \"5.00000000\", \"5.00000000\", \"5.00000000\"]\n        self.assertEqual(answer, print_answer(stdin, answer_list))"
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '33.33613311', 'incorrect answer'\nassert solution(stdin) == '33.33613311', 'incorrect answer'\nassert solution(stdin) == '33.33613311', 'incorrect answer'\nassert solution(stdin) == '33.33613311', 'incorrect answer'\nassert solution(stdin) == '33.33613311', 'incorrect answer'\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['1', '2', '1']) == '2'\nassert solution(['1', '0.5']) == '0.5'\nassert solution(['1', '1', '1', '1', '0.4', '0.5']) == '0.5'\nassert solution(['1', '0.4', '0.5']) == '0.5'\nassert solution(['1', '1', '1', '1', '1']) == '2'\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 0.5 1\") == \"3\"\nassert solution(\"1 0.4 1\") == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0.5 1') == '2'\nassert solution('1 11') == '3'\nassert solution('0.4 1') == '3'\nassert solution('0.4 1') == '3'\nassert solution('1 11') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1 1\"\nassert solution(\"2 3\") == \"1 1\"\nassert solution(\"2 4\") == \"1 1\"\nassert solution(\"2 5\") == \"1 1\"\nassert solution(\"2 6\") == \"1 1\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0.4 1\") == \"0\"\nassert solution(\"1 11\") == \"1\"\nassert solution(\"1.4 1\") == \"0\"\nassert solution(\"1.2 1\") == \"2\"\nassert solution(\"1.3 1\") == \"1\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2 4\", \"1 3\", \"0 1\", \"2 1\", \"3 0\"]) == \"3\"\nassert solution([\"2 3\", \"1 1\", \"0 1\", \"2 0\", \"3 0\"]) == \"3\"\nassert solution([\"2 5\", \"1 10\", \"0 1\", \"2 1\", \"3 0\"]) == \"3\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 5\") == 10.0\nassert solution(\"3 0\") == -1.0\nassert solution(\"0 3\") == -1.0\n"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10.5\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('s1') == 2, 'Expected solution 1 to be 2, got {}'.format(2)\nassert solution('s2') == -1, 'Expected solution 2 to be -1, got {}'.format(1)"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 3 4 1 9 7 9 6 3 2 0\") == \"1.00000\"\nassert solution(\n    \"1 3 3 2 0\") == \"0.75\"\nassert solution(\n    \"0 1 1 0\") == \"1\"\nassert solution(\n    \"4 3 3 3\") == \"2.00000\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '10.5'\nassert solution(stdin) == '-1'\n\"\"\""
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n\"\"\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"-1\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"15\"\nassert solution(input) == \"0.5\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\u20181\u2019) == 1\nassert solution(\u20181\u2019) == 2\nassert solution(\u20181\u2019) == 3\nassert solution(\u20181\u2019) == 4\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 0.5 0.5 1\") == \"2\"\nassert solution(\"2 0.5 0.51 1\") == \"2\"\nassert solution(\"2 0.5 0.49 1\") == \"2\"\nassert solution(\"2 0.5 0.51 1\") == \"2\"\nassert solution(\"2 0.5 0.49 1\") == \"2\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 0.5 0.5 0.5 0.51 2 0.5 0.5 0.51 2 0.5\"\n) == \"2\"\nassert solution(\n    \"2 0.5 0.5 0.5 0.51 1 0.5 0.5 0.51 2 0.5\"\n) == \"2\"\nassert solution(\n    \"2 0.5 0.5 0.5 0.51 0.5 0.5 0.51 2 0.5\"\n) == \"2\"\nassert solution(\n    \"2 0.5 0.5 0.5 0.51 1 0.51 1 0.5 0.51 2 0.5\"\n) == \"2\"\nassert solution(\n    \"2 0.5 0.5 0.5 0.51 0.5 0.51 0.51 1 0.5 0.5\"\n) == \"2\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['3', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1']) == '1'\nassert solution(['5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '1'\nassert solution(['4', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '2'\nassert solution(['2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '1'\nassert solution(['4', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 0.5\") == \"1\"\nassert solution(\"2 0.51\") == \"1\"\nassert solution(\"2 0.49\") == \"1\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 0.5 0 0.51 0 0.49\") == \"1\"\nassert solution(\n    \"2 0.5 0 0.51 0 0.49\") == \"2\"\nassert solution(\n    \"2 0.5 0 0.51 0 0.49\") == \"2\"\nassert solution(\n    \"2 0.5 0 0.51 0 0.49\") == \"3\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\", \"Not correct\""
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('', 1, 0, 0) == 'no'\nassert solution('', 2, 0, 0) == 'no'\nassert solution('', 3, 0, 0) == 'no'\nassert solution('', 4, 0, 0) == 'no'\nassert solution('', 5, 0, 0) == 'yes'\n\"\"\""
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 4, 2, 3, 0, 1, 2, 3, 4) == 'yes'\nassert solution(5, 4, 2, 3, 0, 1, 2, 3, 4) == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'yes'\nassert solution(stdin) == 'no'\nassert solution(stdin) == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(f.in()) == \"yes\", \"wrong\"\n\"\"\""
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'yes'\nassert solution(stdin) == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 3 2\") == \"yes\"\nassert solution(\n    \"5 4 4\") == \"no\"\n\"\"\"\nclass Solution:\n    def solution(self, n: int, m: int, k: int) -> str:\n        \n        def parse(n):\n            return [int(i) for i in input().split()]\n        \n        def check(index, result):\n            if index >= n or index < 0:\n                return False\n            if result[index] > n:\n                return False\n            return True\n        \n        def union(a, b):\n            a_set = set(a)\n            b_set = set(b)\n            a_set.update(b_set)\n            return list(a_set)\n        \n        def count(s):\n            return sum([i for i in s if i > 0])\n        \n        def is_connected(s):\n            return all([i + j <= n for i, j in zip(s, s[1:])])\n        \n        def is_simple(i):\n            return check(i, [i + j for i, j in zip(s, s[1:])])\n        \n        def is_loop(i):\n            return count(s[i]) == m\n        \n        def find(i, result):\n            if is_connected(result):\n                return result\n            if is_loop(i):\n                return result\n            if is_simple(i):\n                if count(result) == m:\n                    return result\n                else:\n                    return find(i + 1, result + [i + 1])\n            return find(i + 1, result)\n        \n        s = [[] for _ in range(n + 1)]\n        for i in range(1, m + 1):\n            s[1 + i].append(i)\n        \n        while True:\n            result = [find(i, []) for i in range(1, n + 1)]\n            if result == []:\n                break\n            \n            for i in range(1, n + 1):\n                if is_connected(result[i]):\n                    s[i] = union(s[i], result[i])\n                    if is_simple(i):\n                        if count(result[i]) == m:\n                            return result[i]\n        \n        return 'no' if len(s) == 1 else 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"yes\""
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input) == 'yes'\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(123) == 13\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n1 <= stdin.length <= 3*10^4\n1 <= stdin[i] <= 10^9\n\n-----Time Limit=3:60 seconds\n\n-----Memory Limit: 12 MB\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == 2\nassert solution(4) == 1\nassert solution(5) == 2\nassert solution(8) == 5\nassert solution(4) == 3\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 0\nassert solution(5) == 0\nassert solution(10) == 0\nassert solution(10000) == 0\nassert solution(1) == 0\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 5 5\") == \"2 5 2\"\nassert solution(\"5 20 20\") == \"6 3\"\nassert solution(\"5 7\") == \"6 7\"\nassert solution(\"5 10\") == \"5 9\"\nassert solution(\"5 8\") == \"5 7\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1,2,3,4\") == \"4\"\nassert solution(\"1,2,3,4,5\") == \"5\"\nassert solution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\") == \"13\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 5 2 1 3 2 2') == '3 2 3 2 2 2 2'\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('aabb') == 'aabb'\nassert solution('aaab') == 'aaab'\nassert solution('abcdef') == 'abdef'\nassert solution('abcd') == 'abcd'\nassert solution('abcdabcd') == 'abcdabcd'\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\nExplanation:\nThe rules of the ring are in the first example.\nThe numbers in the ring are identical (it\u2019s in the second ring).\nThe ring does not change.\n\"\"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == solution('python')\nassert solution(input()) == solution('python')\nassert solution(input()) == solution('python')\nassert solution(input()) == solution('python')\nassert solution(input()) == solution('python')\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"python\") == \"python\"\nassert solution(\"python -n 10\") == \"python main.py\"\nassert solution(\"python main.py -n 10\") == \"python main.py\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Your solution is not correct.\"\nassert solution(stdin), \"Your solution is not correct.\"\nassert solution(stdin), \"Your solution is not correct.\"\nassert solution(stdin), \"Your solution is not correct.\"\nassert solution(stdin), \"Your solution is not correct.\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"python\") == \"python main.py\"\nassert solution(\"java\") == \"java main.py\"\nassert solution(\"python main.py -n 10\") == \"python main.py -n 10\"\nassert solution(\"java main.py -n 10\") == \"java main.py -n 10\"\nassert solution(\"java main.py main.py\") == \"java main.py\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin) == \"Python is an interpreted and true programming language\"\nassert solution(sys.stdin) == \"Python is an interpreted and true programming language\"\nassert solution(sys.stdin) == \"Java is an interpreted and true programming language\"\nassert solution(sys.stdin) == \"Java is an interpreted and true programming language\"\nassert solution(sys.stdin) == \"Python is a interpreted and true programming language\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 'python'\nassert solution(1) == 'python main.py'\nassert solution(1) == 'python main.py -n 10'\nassert solution(2) == 'python main.py -n 10 -n 10'\nassert solution(3) == 'python main.py -n 10 -n 10 -n 10'\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"python main.py -n 10\"\nassert solution(stdin) == \"python main.py -n 5\"\nassert solution(stdin) == \"python main.py -n 1\"\nassert solution(stdin) == \"python main.py -n 5\"\nassert solution(stdin) == \"python main.py -n 3\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'python main.py'"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'python'\nassert solution(input()) == 'java'\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        count = 0\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                nums[i], nums[count] = nums[count], nums[i]\n                count += 1\n\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        count = 0\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                nums[i], nums[count] = nums[count], nums[i]\n                count += 1\n"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"python main.py\"\nassert solution(stdin) == \"python main.py -n 10\"\nassert solution(stdin) == \"python main.py\"\nassert solution(stdin) == \"python main.py -n 10\"\nassert solution(stdin) == \"python main.py\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'possible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"tihssnetnceemkaesprfecetsesne\"\nassert solution(stdin) == \"hitehre\"\nassert solution(stdin) == \"this\"\nassert solution(stdin) == \"hello\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['thissentencemakesperfectsense', 'hitehre', 'there', 'hello', 'Sample']) == 'thissentencemakesperfectsense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), 'Solution is not exist'\nassert solution(stdin), 'Solution is not exist'\nassert solution(stdin), 'Solution is not exist'\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('this is a sentence') == 'imperfect'\nassert solution('hitehre the a b c d') == 'ambiguous'\nassert solution('there is a sentence') == 'impossible'\nassert solution('a bc d e f g') == 'ambiguous'\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'impossible'\nassert solution(input()) == 'ambiguous'\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'impossible'\n\nassert solution(input) == 'ambiguous'\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nclass Solution:\n    def decipherText(self, text: str, dictionary: List[str]) -> str:\n        result = \"\"\n        for word in text.split():\n            word = word.lower()\n            if len(word) > 1:\n                if word not in dictionary:\n                    result += word + \" \"\n            else:\n                result += word + \" \"\n        return result\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"this sentence makes perfect sense\"\nassert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"ambiguous\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('hitehre'), 'impossible'\nassert solution('hitehre'), 'ambiguous'\nassert solution('tihsnesne'), 'tihssnetnceemkaesprfecetsesne'\nassert solution('hello'), 'impossible'\nassert solution('tihsnesne'), 'hitehre'\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1 1\") == \"4\"\nassert solution(\"1 1 2\\n1 1 3\\n1 1 4\") == \"5\"\nassert solution(\"1 1 3\\n1 1 5\\n1 1 6\\n1 1 7\\n1 1 8\\n1 1 9\\n1 1 10\") == \"8\"\nassert solution(\"1 1 4\\n1 1 6\\n1 1 7\\n1 1 8\\n1 1 9\\n1 1 10\\n1 1 11\") == \"5\"\nassert solution(\"1 1 3\\n1 1 7\\n1 1 8\\n1 1 9\\n1 1 10\") == \"4\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"16\"\nassert solution(\"3 3 2\") == \"9\"\nassert solution(\"3 3 1\") == \"4\"\nassert solution(\"2 1 3\") == \"1\"\nassert solution(\"3 3 3\") == \"8\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 16\nassert solution(stdin)!= 0\nassert solution(stdin)!= 0\nassert solution(stdin)!= 0\nassert solution(stdin)!= 0\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"2\",\"1\"]) == \"4\"\nassert solution([\"2\",\"3\",\"1\"]) == \"16\"\nassert solution([\"3\",\"1\"]) == \"4\"\nassert solution([\"1\",\"2\"]) == \"4\"\nassert solution([\"2\",\"3\"]) == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"13\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 2) == 4\nassert solution(2, 2) == 4\nassert solution(4, 2) == 16\nassert solution(2, 2) == 6\nassert solution(5, 2) == 16\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 2) == 4, \"False\"\nassert solution(1, 1) == 16, \"False\"\nassert solution(2, 1) == 1, \"False\"\nassert solution(4, 2) == 4, \"False\"\nassert solution(8, 3) == 5, \"False\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('2 3') == '3'\nassert solution('1 4') == '2'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\nstdin.split('\\n')\n) == '16'\nprint(solution(stdin))"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,3) == 4\nassert solution(1,1) == 1\nassert solution(4,4) == 16\nassert solution(4,2) == 4\n"
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"],\n    [\"a\",\"f\",\"d\",\"c\",\"b\",\"e\"],\n    [\"a\",\"d\",\"c\",\"e\",\"b\",\"f\"],\n    [\"a\",\"c\",\"f\",\"e\",\"d\",\"b\"],\n    [\"a\",\"b\",\"b\",\"f\",\"e\",\"d\"],\n    [\"a\",\"f\",\"f\",\"e\",\"d\",\"b\"]\n    ]) == \"2\"\n'''\nclass Solution:\n    def countTiles(self, stdin: str) -> int:\n        n = int(stdin[0])\n        l = len(stdin[1])\n        \n        arr = [list(i) for i in stdin]\n        \n        # Check if the length of the pattern is too large, if yes, change the pattern\n        \n        if l > len(arr[0]):\n            for i in range(l-len(arr[0])):\n                arr[0][i] = arr[0][i+l]\n        \n        # Check if the length of the pattern is too small, if yes, change the pattern\n        if n > len(arr[0]):\n            for i in range(n-len(arr[0])):\n                arr[0][i] = arr[0][i+n]\n        \n        for i in range(1,len(arr)):\n            for j in range(len(arr[0])):\n                if arr[i][j]!= arr[i-1][j]:\n                    arr[i][j] = 1\n                    break\n        \n        # Recursion, check if the pattern is too large, if yes, change the pattern\n        if n > len(arr[0]):\n            for i in range(n-len(arr[0])):\n                for j in range(l):\n                    arr[i][j] = 0\n        \n        # Recursion, check if the pattern is too small, if yes, change the pattern\n        if n > len(arr[0]):\n            for i in range(n-len(arr[0])):\n                for j in range(l):\n                    arr[i][j] = 0\n        \n        return len(arr[0])\n        \n        "
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('abab' == 'ababb') == 0, 'Wrong'\nassert solution('abab') == 0, 'Wrong'\nassert solution('abcab') == 0, 'Wrong'\nassert solution('abcab') == 0, 'Wrong'\nassert solution('abcab') == 0, 'Wrong'\n"
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n\n-----Constraints-----\n1 <= N <= 300000\n0 <= L_ i < L_ i <= 5000\n1 <= M <= 5000\n\n-----Time Limit (Cached)-----\nFor this problem, we can cache the solution and avoid calling the function again.\n\nRuntime: 36 ms (80.27%)\nMemory Usage: 14 MB (77.27%)\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\"\"\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '4'\nassert solution(input()) == '4'\nassert solution(input()) == '4'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n\"\"\""
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\"), \"incorrect solution\"\nassert solution(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == \"incorrect solution\", \"incorrect solution\""
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == \"2\"\nassert solution(5) == \"1\"\nassert solution(3) == \"1\"\nassert solution(6) == \"0\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"50\") == \"6\"\nassert solution(\n    \"24\") == \"12.58309\"\nassert solution(\n    \"24\") == \"7.362023\"\nassert solution(\n    \"24\") == \"12.58309\"\nassert solution(\n    \"24\") == \"7.362023\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == (6, 17.071067), \"stdin does not match\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '6'"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"50\") == \"5\"\nassert solution(\"24\") == \"6\"\nassert solution(\"5 10 0\") == \"14\"\nassert solution(\"3 10 10\") == \"5\"\nassert solution(\"3 10 10\") == \"7\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '85'\nassert solution(stdin) == '90'\nassert solution(stdin) == '95'\nassert solution(stdin) == '100'\n"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin.strip().split('\\n')\n) == '3'\nassert solution(\n    stdin.strip().split('\\n')\n) == '8'\nassert solution(\n    stdin.strip().split('\\n')\n) == '5'\nassert solution(\n    stdin.strip().split('\\n')\n) == '5'\nassert solution(\n    stdin.strip().split('\\n')\n) == '4'\n"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"51 \") == \"45\"\nassert solution(\"51 0\") == \"45\"\nassert solution(\"10 10\") == \"13\"\nassert solution(\"10 0\") == \"14\"\nassert solution(\"10 0\") == \"13\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"85\"\nassert solution(inp) == \"95\"\nassert solution(inp) == \"100\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\"\n\nassert solution(\"5 6 8\") == \"no\"\nassert solution(\"12 13 14 15 16 17 18 19\") == \"no\"\nassert solution
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'yes'\nassert solution(input()) == 'no'\n\"\"\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'yes','return \"yes\" when solution(stdin) == 'yes'\"\nassert solution(stdin) == 'no','return \"no\" when solution(stdin) == 'no'\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"10 11\"\n) == \"yes\""
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('20 7') == 'no'"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\n)\n"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"yes\"\nassert solution(input()) == \"no\"\n\"\"\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 11\"), \"no\"\nassert solution(\"10 7\"), \"yes\"\nassert solution(\"10 2\"), \"yes\"\nassert solution(\"10 1\"), \"yes\"\nassert solution(\"11\"), \"no\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\",\"4\",\"2\",\"1\",\"6\"]) == \"3\"\nassert solution([\"10\",\"30\",\"20\",\"40\",\"30\",\"50\",\"60\"]) == \"3\"\nassert solution([\"30\",\"50\",\"60\",\"40\",\"20\"]) == \"2\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n1 4\n1 3 4\n1 3 6\n1 3 5\n1 3 10\n1 3 12\n1 3 14\n1 3 20\n1 3 24\n1 3 29\n1 4 2\n1 3 30\n1 4 3\n1 5 4\n1 6 4\n1 7 4\n1 8 4\n1 9 4\n1 10 4\n1 12 4\n1 13 4\n1 14 4\n1 15 4\n1 16 4\n1 17 4\n1 18 4\n1 19 4\n1 20 4\n1 21 4\n1 22 4\n1 23 4\n1 24 4\n1 25 4\n1 26 4\n1 27 4\n1 28 4\n1 29 4\n1 30 4\n1 31 4\n1 32 4\n1 33 4\n1 34 4\n1 35 4\n1 36 4\n1 37 4\n1 38 4\n1 39 4\n1 40 4\n1 41 4\n1 42 4\n1 43 4\n1 44 4\n1 45 4\n1 46 4\n1 47 4\n1 48 4\n1 49 4\n1 50 4\n1 51 4\n1 52 4\n1 53 4\n1 54 4\n1 55 4\n1 56 4\n1 57 4\n1 58 4\n1 59 4\n1 60 4\n1 61 4\n1 62 4\n1 63 4\n1 64 4\n1 65 4\n1 66 4\n1 67 4\n1 68 4\n1 69 4\n1 70 4\n1 71 4\n1 72 4\n1 73 4\n1 74 4\n1 75 4\n1 76 4\n1 77 4\n1 78 4\n1 79 4\n1 80 4\n1 81 4\n1 82 4\n1 83 4\n1 84 4\n1 85 4\n1 86 4\n1 87 4\n1 88 4\n1 89 4\n1 90 4\n1 91 4\n1 92 4\n1 93 4\n1 94 4\n1 95 4\n1 96 4\n1 97 4\n1 98 4\n1 99 4\n1 100 4\n1 102 4\n1 103 4\n1 104 4\n1 105 4\n1 106 4\n1 107 4\n1 108 4\n1 109 4\n1 110 4\n1 111 4\n1 112 4\n1 113 4\n1 114 4\n1 115 4\n1 116 4\n1 117 4\n1 118 4\n1 119 4\n1 120 4\n1 121 4\n1 122 4\n1 123 4\n1 124 4\n1 125 4\n1 126 4\n1 127 4\n1 128 4\n1 129 4\n1 130 4\n1 131 4\n1 132 4\n1 133 4\n1 134 4\n1 135 4\n1 136 4\n1 137 4\n1 138 4\n1 139 4\n1 140 4\n1 141 4\n1 142 4\n1 143 4\n1 144 4\n1 145 4\n1 146 4\n1 147 4\n1 148 4\n1 149 4\n1 150 4\n1 151 4\n1 152 4\n1 153 4\n1 154 4\n1 155 4\n1 156 4\n1 157 4\n1 158 4\n1 159 4\n1 160 4\n1 161 4\n1 162 4\n1 163 4\n1 164 4\n1 165 4\n1 166 4\n1 167 4\n1 168 4\n1 169 4\n1 170 4\n1 171 4\n1 172 4\n1 173 4\n1 174 4\n1 175 4\n1 176 4\n1 177 4\n1 178 4\n1 179 4\n1 180 4\n1 181 4\n1 182 4\n1 183 4\n1 184 4\n1 185 4\n1 186 4\n1 187 4\n1 188 4\n1 189 4\n1 190 4\n1 191 4\n1 192 4\n1 193 4\n1 194 4\n1 195 4\n1 196 4\n1 197 4\n1 198 4\n1 199 4\n1 200 4\n1 201 4\n1 202 4\n1 203 4\n1 204 4\n1 205 4\n1 206 4\n1 207 4\n1 208 4\n1 209 4\n1 210 4\n1 211 4\n1 212 4\n1 213 4\n1 214 4\n1 215 4\n1 216 4\n1 217 4\n1 218 4\n1 219 4\n1 220 4\n1 221 4\n1 222 4\n1 223 4\n1 224 4\n1 225 4\n1 226 4\n1 227 4\n1 228 4\n1 229 4\n1 230 4\n1 231 4\n1 232 4\n1 233 4\n1 234 4\n1 235 4\n1 236 4\n1 237 4\n1 238 4\n1 239 4\n1 240 4\n1 241 4\n1 242 4\n1 243 4\n1 244 4\n1 245 4\n1 246 4\n1 247 4\n1 248 4\n1 249 4\n1 250 4\n1 251 4\n1 252 4\n1 253 4\n1 254 4\n1 255 4\n1 256 4\n1 257 4\n1 258 4\n1 259 4\n1 260 4\n1 261 4\n1 262 4\n1 263 4\n1 264 4\n1 265 4\n1 266 4\n1 267 4\n1 268 4\n1 269 4\n1 270 4\n1 271 4\n1 272 4\n1 273 4\n1 274 4\n1 275 4\n1 276 4\n1 277 4\n1 278 4\n1 279 4\n1 280 4\n1 281 4\n1 282 4\n1 283 4\n1 284 4\n1 285 4\n1 286 4\n1 287 4\n1 288 4\n1 289 4\n1 290 4\n1 291 4\n1 292 4\n1 293 4\n1 294 4\n1 295 4\n1 296 4\n1 297 4\n1 298 4\n1 299 4\n1 300 4\n1 301 4\n1 302 4\n1 303 4\n1 304 4\n1 305 4\n1 306 4\n1 307 4\n1 308 4\n1 309 4\n1 310 4\n1 311 4\n1 312 4\n1 313 4\n1 314 4\n1 315 4\n1 316 4\n1 317 4\n1 318 4\n1 319 4\n1 320 4\n1 321 4\n1 322 4\n1 323 4\n1 324 4\n1 325 4\n1 326 4\n1 327 4\n1 328 4\n1 329 4\n1 330 4\n1 331 4\n1 332 4\n1 333 4\n1 334 4\n1 335 4\n1 336 4\n1 337 4\n1 338 4\n1 339 4\n1 340 4\n1 341 4\n1 342 4\n1 343 4\n1 344 4\n1 345 4\n1 346 4\n1 347 4\n1 348 4\n1 349 4\n1 350 4\n1 351 4\n1 352 4\n1 353 4\n1 354 4\n1 355 4\n1 356 4\n1 357 4\n1 358 4\n1 359 4\n1 360 4\n1 361 4\n1 362 4\n1 363 4\n1 364 4\n1 365 4\n1 366 4\n1 367 4\n1 368 4\n1 369 4\n1 370 4\n1 371 4\n1 372 4\n1 373 4\n1 374 4\n1 375 4\n1 376 4\n1 377 4\n1 378 4\n1 379 4\n1 380 4\n1 381 4\n1 382 4\n1 383 4\n1 384 4\n1 385 4\n1 386 4\n1 387 4\n1 388 4\n1 389 4\n1 390 4\n1 391 4\n1 392 4\n1 393 4\n1 394 4\n1 395 4\n1 396 4\n1 397 4\n1 398 4\n1 399 4\n1 400 4\n1 401 4\n1 402 4\n1 403 4\n1 404 4\n1 405 4\n1 406 4\n1 407 4\n1 408 4\n1 409 4\n1 410 4\n1 411 4\n1 412 4\n1 413 4\n1 414 4\n1 415 4\n1 416 4\n1 417 4\n1 418 4\n1 419 4\n1 420 4\n1 421 4\n1 422 4\n1 423 4\n1 424 4\n1 425 4\n1 426 4\n1 427"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"30\"\nassert solution(stdin) == \"40\"\nassert solution(stdin) == \"50\"\nassert solution(stdin) == \"60\"\nassert solution(stdin) == \"70\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 4 2 1 5 6\"\n) == \"3\"\nassert solution(\n    \"3 4 2 1 3 5\"\n) == \"3\"\nassert solution(\n    \"3 4 2 1 4 5\"\n) == \"3\"\nassert solution(\n    \"3 4 2 1 4 5 6\"\n) == \"3\""
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 6 10 30\") == \"5 10 30\"\nassert solution(\"5 20 10 30\") == \"5 10 30\"\nassert solution(\"5 20 20 10 20\") == \"5 10 20 20 10 20\"\nassert solution(\"5 20 20 20 20\") == \"5 20 20 20 20\""
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '30 40'\nassert solution(input()) == '30 40 50'\nassert solution(input()) == '30 40 60'\nassert solution(input()) == '30 40 60 30'\nassert solution(input()) == '30 40 60 50'\n"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"30\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"5 10 30\") == \"2\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"1 6\") == \"1\"\nassert solution(\"30 40 50\") == \"5\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\n-----Remarks-----\nSample Input 1:\n1\n1 1 1\nSample Output 1:\n1\n1 1 1\nSample Input 2:\n6\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n6 13\n6 14\n6 15\n6 16\n6 17\n6 18\n6 19\n6 20\n6 21\n6 22\n6 23\n6 24\n6 25\n6 26\n6 27\n6 28\n6 29\n6 30\n6 31\nSample Output 2:\n3\n1 6\n2 5\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n3 4\n1 6\n2 5\n2 6\n"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3,10) == 1828\nassert solution(5,10) == 5836\nassert solution(2,10) == 3324\nassert solution(2,5) == 10\nassert solution(1,5) == 1\n"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 5836\n\"\"\""
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"5\"\nassert solution([\"3\",\"6\",\"9\",\"12\",\"15\",\"18\"]) == \"11\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5836\nassert solution(stdin)!= 0\n"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 200\n'''"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['5','1','10','10','5','1','1']) == '5836'\nassert solution(['5','1','10','10','5','1','1']) == '1828'\nassert solution(['5','1','10','10','5','1','1']) == '5836'\nassert solution(['5','1','10','10','5','1','1']) == '5836'\nassert solution(['5','1','10','10','5','1','1']) == '5836'\n"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 5\n'''\nclass Solution:\n    def solution(self,n,k):\n        answer = (n*(n*k))//(64*64)\n        return answer\n        \n"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5836\""
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 3 1'), 'Error'\nassert solution('5 3 10'), 'Error'\nassert solution('5 2'), 'Error'\nassert solution('5 4'), 'Error'\nassert solution('5 1'), 'Error'\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"impossible\"\n'''\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 5\") == \"50\"\nassert solution(\"2 5\") == \"50\"\nassert solution(\"1 9\") == \"impossible\"\nassert solution(\"1 12\") == \"impossible\"\nassert solution(\"1 2 1 1\") == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1'*3) == '0'\nassert solution('1'*3) == '1'\nassert solution('1'*3) == '1'\nassert solution('1'*3) == '0'\nassert solution('1'*3) == '1'\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 4 100 10000\"\n) == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    'S 3 D F F U 1'\n) == '2'\nassert solution(\n    'S 3 D F F U 2'\n) == '50'\nassert solution(\n    'S 3 D F F U 3'\n) == 'Impossible'"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"0 0 0 1\"\nassert solution(\"1000\") == \"0 0 0 1\"\nassert solution(\"3.6\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7.2\") == \"0\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5.0\") == \"1 0 1 1\"\nassert solution(\"5.1\") == \"0 0 0 1 1\"\nassert solution(\"4.0\") == \"0 0 0 1 1\"\nassert solution(\"4.0\") == \"0 0 0 1 1\"\nassert solution(\"4.0\") == \"1 0 1 1\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0 0 0 1'\nassert solution(stdin) == '0 0 0 1 1'\nassert solution(stdin) == '0 0 0 1 1 1'\nassert solution(stdin) == '0 0 0 1 1 1 1'\nassert solution(stdin) == '0 0 0 1 1 1 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1 0 0 0 1'\nassert solution(stdin) == '1 0 0 0 1 2'\nassert solution(stdin) == '1 0 0 0 1 3 4'\nassert solution(stdin) == '1 0 0 0 1 4 5'\nassert solution(stdin) == '1 0 0 0 1 4 5 6'\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '1 2 4 6 8'\nassert solution(input()) == '1 1 1 1 1'\nassert solution(input()) == '1 1 1 1 1 2'\nassert solution(input()) == '1 1 1 1 1 2 3'\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3.9\") == \"3 0 0 1\"\nassert solution(\"3.99\") == \"3 0 0 0\"\nassert solution(\"1.1\") == \"0 0 0 0\"\nassert solution(\"1.3\") == \"0 0 0 1\"\nassert solution(\"1.4\") == \"0 0 0 0\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sys.stdin.readline().split()) == \"1 1\"\nassert solution(sys.stdin.readline().split()) == \"1 0\"\nassert solution(sys.stdin.readline().split()) == \"1 0\"\nassert solution(sys.stdin.readline().split()) == \"1 1\"\nassert solution(sys.stdin.readline().split()) == \"1 0\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1,2,3,4,5\") == \"5 1 3 2 4 5\"\nassert solution(\"4,5,6,7,8,9\") == \"9 5 4 5 6 7 8 9\""
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5.0\"\n    ) == \"0 0 0 0 1\"\nassert solution(\n    \"4.5\"\n    ) == \"0 0 0 1 1\"\nassert solution(\n    \"4.5\"\n    ) == \"0 0 0 1 1\"\nassert solution(\n    \"4.5\"\n    ) == \"0 0 0 1 1\"\nassert solution(\n    \"4.5\"\n    ) == \"0 0 0 1 1\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0 0 0 1 1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 4 6 4 3 5\") == \"8\"\nassert solution(\"1 7 1 2 6 4 3 5\") == \"3\"\nassert solution(\"1 7 7 1 2 6 4 3 5\") == \"3\"\nassert solution(\"1 7 7 7 1 2 6 4 3 5\") == \"5\"\nassert solution(\"1 7 1 7 1 2 6 4 3 5\") == \"8\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3 1\") == \"8\"\nassert solution(\"10 5 8 1\") == \"13\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"5 3 5\") == \"8\"\nassert solution(\"4 4 2\") == \"0\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '5'\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '8'\nassert solution(input()) == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 5 6 2 3 3 4 3 4 1 2 1 6\"\n), \"1\"\nassert solution(\n    \"4 4 4 4 4 4 3 4 3 4 3 4 1\"\n), \"4\"\nassert solution(\n
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n\n    line: str = \"8 3 1\")\nassert solution(\n\n    line: str = \"8 2 1\")\nassert solution(\n\n    line: str = \"8 1\")\nassert solution(\n\n    line: str = \"8 1\")\nassert solution(\n\n    line: str = \"8 1\")\n"
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 1 7 8 2 6 4 3 5\") == \"8\"\nassert solution(\"8 3 1\") == \"8\"\nassert solution(\"8 2 1\") == \"3\"\nassert solution(\"8 2 1 3\") == \"3\"\nassert solution(\"1 7 8 2 6 4 3 5\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 8\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0') == '3'\nassert solution('1') == '4'\nassert solution('2') == '5'\nassert solution('3') == '6'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\n-----Sample Input 3-----\n8\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 192 193 194 195 196 197 198 199 200 201 202 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 2 3 4\") == \"3\"\nassert solution(\n    \"1 3 1\") == \"3\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 2\") == \"3\"\nassert solution(\n    \"6 3\") == \"4\"\nassert solution(\n    \"4 2 4 1\") == \"3\"\nassert solution(\n    \"4 2 4 2\") == \"3\"\nassert solution(\n    \"4 2 4 4\") == \"3\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\nExplanation:\nThe input has an even number of elements:\n[1, 3, 2, 4].\n\nIf we find the next power of 3 of the input, the number of bits that can be split into each section is 3 and the number of bits that divide the circle is 2.\n\nIf we find the next power of 2 of the input, the number of bits that can be split into each section is 4 and the number of bits that divide the circle is 2.\n\nWe can return to the standard input the number of bits that have to be split by the new input.\n\nSample Input 3:\n1 2\n1 3 4\nSample Output 3:\n2\n\nSample Input 4:\n3 1 2 3 4 1 3 3 1 3 4\nSample Output 4:\n2\n\nSample Input 5:\n1 3\n3 4 1 2 4\nSample Output 5:\n0\n\nExplanation:\nIf the input has an even number of elements, we can only split the input into 2 parts, and then use the first and last powers of the input.\n\nExplanation:\nWe split the input into 3 parts, and then use the first and last powers of the input.\n\nWe can also return to the standard input an empty string.\n\"\"\"\n\nN, K = map(int,input().split())\nA = [int(input()) for _ in range(N)]\nB = [int(input()) for _ in range(N)]"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"6 3\", \"2 2 2 4 4 4\"]) == \"4\"\nassert solution([\"6 3\", \"2 3 4 1\"]) == \"3\"\nassert solution([\"6 3\", \"2 3 5 1\"]) == \"5\"\nassert solution([\"3 3 4 4 4\"]) == \"3\"\nassert solution([\"3 3 5 1\"]) == \"3\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 4 1\") == \"3\"\nassert solution(\"6 3\") == \"3\"\nassert solution(\"6 2 4 4 4\") == \"3\"\nassert solution(\"5 6 1\") == \"2\"\nassert solution(\"5 6 1 5\") == \"1\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\n\n\"\"\""
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1 1 1.7320508075964047\", \"1 1 3.0\", \"1 1 -1\"]) == \"1.7320508075964047\"\nassert solution([\"1 1 1.732050807\", \"1 1 3.0\", \"1 1 -1\"]) == \"1.732050807\"\nassert solution([\"1 1 1.732050807\", \"1 1 3.0\", \"1 1 -1\"]) == -1\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\n        \"1 1 1.732050\",\n        \"1 1 3.0\",\n        \"1 1 4.0\",\n        \"2 1 5.0\",\n        \"3 1 6.0\",\n    ]\n) == \"1.732050\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 1.732050\") == -1\nassert solution(\"1 1 3.0\") == 1\nassert solution(\"1 3 3.0\") == 2\nassert solution(\"1 3 4.0\") == 3\nassert solution(\"1 3.0 1.732050\") == 1.732050808\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == \"-1\""
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"1.732050808\"\nassert solution(\"2 2 0\") == \"-1\"\nassert solution(\"3 2.0 1.732050\") == \"1.732050808\"\nassert solution(\"1 2 1\") == \"1.732050808\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3.0\") == \"1.732050807\"\nassert solution(\"1 2 1 3.0\") == \"1.732050807\"\nassert solution(\"0 2 1 3.0\") == \"3.0\"\nassert solution(\"1 1 3.0\") == \"3.0\"\nassert solution(\"1 1 2.6\") == \"3.0\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"1.73205080756864\"\n\"\"\"\nfrom dataclasses import dataclass\nfrom typing import List\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3.9062547736094368e-56799952872444982e-4\"\n    \"5644056.0\"\n    ) == \"1.7320508075686822e-5\"\nassert solution(\n    \"6.0\"\n    \"3.6\"\n    ) == \"-1.0\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('''\n0.4\n0.4 0.4 0.7\n0.4 0.5 0.7\n0.4 0.6 0.7\n0.5 0.4 0.7\n0.5 0.5 0.7\n0.6 0.6 0.7\n0.6 0.7 0.7\n1.7\n0.7 0.7 0.7\n\nSample Input 3:\n3 1.0\nSample Output 3:\n-1\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 1.732050\") == 1.73205081\nassert solution(\"1 1 3.0\") == -1\nassert solution(\"1 1 3.00\") == -1\nassert solution(\"1 1 3.00\") == 1\nassert solution(\"1 1 3.00\") == -1\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"-9 0 100\") == \"9.999999999000002\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2.4999999987500003'\nassert solution(stdin) == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 0.2\nassert solution(\"2\") == 0.2\nassert solution(\"3\") == 0\nassert solution(\"4\") == 0\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '2.4999999987500003'\nassert solution(input()) == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('{1}') == '2.4999999987500003'\nassert solution('{1,2}') == '2.4999999987500003'\nassert solution('{1,3}') == '1.5'\nassert solution('{1,2,5}') == '1.5'\nassert solution('{1,2,4,6}') == '6'\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '2.4999999987500003'\nassert solution(inp) == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2.4999999987500003'\n\nExplanation\nThe coordinates of the mice are given as follows:\n\nInput:\n1\n3 4 2\n.75\nOutput:\n2.4999999987500003\n\nInput:\n2\n0 100 10\n0 -100 100\n.80\nOutput:\n9.999999999000002\n\"\"\"\nimport math\nimport sys\ninput = sys.stdin.readline\n\nclass Cat:\n    def __init__(self, x, y, s):\n        self.x = x\n        self.y = y\n        self.s = s\n        self.v = 0\n        self.m = 0\n        self.wall = False\n        self.next_mouse = None\n        self.next_state = 0\n        self.wall_time = 0\n\n    def update_state(self):\n        if self.wall:\n            self.wall_time = math.pow(2,self.next_mouse.s)-1\n        else:\n            self.wall_time = 0\n        self.wall_time += self.next_state\n        self.next_mouse.next_state = self.wall_time\n\n    def move(self):\n        next_state = self.next_state\n        next_mouse = self.next_mouse\n        self.wall = False\n        if next_mouse.wall:\n            self.next_mouse.wall = False\n            self.next_mouse.wall = False\n            if next_mouse.x < self.x:\n                next_mouse.x += 1\n                next_mouse.s += 1\n                next_mouse.v = 1\n            else:\n                next_mouse.x -= 1\n                next_mouse.s -= 1\n                next_mouse.v = -1\n            self.wall = True\n        elif next_mouse.x > self.x:\n            self.next_mouse.x -= 1\n            self.next_mouse.s += 1\n            self.next_mouse.v = 1\n            next_mouse.x += 1\n            next_mouse.s -= 1\n            next_mouse.v = -1\n        else:\n            self.next_mouse.x += 1\n            self.next_mouse.s -= 1\n            self.next_mouse.v = 1\n        if next_state >= self.next_mouse.wall_time and next_mouse.x < self.x and next_mouse.x > self.x:\n            self.next_mouse.x += 1\n            self.next_mouse.s += 1\n            self.next_mouse.v = -1\n        if next_mouse.x > self.x:\n            self.next_mouse.x -= 1\n            self.next_mouse.s += 1\n            self.next_mouse.v = -1\n        else:\n            self.next_mouse.x -= 1\n            self.next_mouse.s -= 1\n            self.next_mouse.v = 1\n\n        if next_mouse.y > self.y and next_mouse.y < self.y + self.s:\n            self.next_mouse.y += 1\n            self.next_mouse.s += 1\n            self.next_mouse.v = -1\n        if next_mouse.y + self.s < self.y:\n            self.next_mouse.y += 1\n            self.next_mouse.s += 1\n            self.next_mouse.v = 1\n        if next_mouse.y < self.y:\n            self.next_mouse.y += 1\n            self.next_mouse.s += 1\n            self.next_mouse.v = 1\n\n        if next_mouse.wall and next_state < self.wall_time:\n            self.next_mouse.wall = False\n            self.next_mouse.wall = True\n            self.wall = False\n            next_mouse.wall = False\n        elif next_mouse.wall and next_state > self.wall_time:\n            self.next_mouse.wall = False\n            self.next_mouse.wall = True\n            self.wall = False\n            next_mouse.wall = False\n        else:\n            self.next_mouse.wall = False\n            self.next_mouse.wall = False\n            self.wall = False\n        self.next_state = next_state\n\n    def get_state(self):\n        return self.next_mouse.next_state\n\n    def get_velocity(self):\n        return self.next_mouse.v\n\n    def get_distance(self):\n        return math.sqrt(math.pow(self.next_mouse.x-self.x,2)+math.pow(self.next_mouse.y-self.y,2))\n\n    def get_distance_random(self):\n        return math.sqrt(math.pow(self.next_mouse.x-self.x,2)+math.pow(self.next_mouse.y-self.y,2))\n\n    def get_mouse_coordinates(self):\n        return self.next_mouse.x, self.next_mouse.y\n\n    def get_next_mouse(self):\n        return self.next_mouse\n\n    def get_next_mouse_state(self):\n        return self.next_mouse.s"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2.4999999987500003'\nassert solution(stdin) == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('-25 200 1000') == '3.4'\nassert solution('0 -100 100') == '3.999999999999999'\nassert solution('0.8 -100 100') == '2.8999999999999999'\nassert solution('0.7 -100 100') == '2.2'\nassert solution('0.8 -100 100') == '0.5'\n"
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\"), \"Invalid stdin\"\nassert solution(\"2\"), \"Invalid stdin\"\nassert solution(\"3\"), \"Invalid stdin\"\nassert solution(\"4\"), \"Invalid stdin\"\nassert solution(\"5\"), \"Invalid stdin\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1,2,3,4,5\") == \"0\"\nassert solution(\"1,3,3,3,3,3\") == \"0\"\nassert solution(\"1,3,3,3,3,3\") == \"0\"\nassert solution(\"1,3,3,3,3,4\") == \"0\"\nassert solution(\"1,3,3,3,3,4,5\") == \"0\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n\nfrom typing import List\nfrom unittest import TestCase\n\nfrom random import randint\n\nfrom stdin import readline\n\nMAX_STONES = 1000000\nMAX_BOX_SIZE = 10\n\nTEST_STONES = randint(1, MAX_STONES)\n\n\nclass Aladin:\n    def __init__(self):\n        self.box_size = MAX_BOX_SIZE\n        self.stones = 0\n\n    def get_stones(self, box_size: int) -> int:\n        return self.stones * box_size\n\n\nclass Box:\n    def __init__(self, size: int):\n        self.size = size\n        self.num_stacks = 0\n        self.num_locked = 0\n        self.num_unlocked = 0\n\n    def is_open(self) -> bool:\n        return self.num_stacks == 0\n\n    def set_open(self) -> bool:\n        self.num_stacks += 1\n        return True\n\n    def set_closed(self) -> bool:\n        self.num_stacks -= 1\n        if self.num_stacks == 0:\n            self.num_unlocked -= 1\n        return True\n\n    def open(self) -> bool:\n        return self.num_unlocked > 0\n\n    def close(self) -> bool:\n        if self.num_unlocked > 0:\n            self.num_unlocked -= 1\n            return False\n        else:\n            return True\n\n    def __str__(self) -> str:\n        return f\"{self.num_stacks},{self.num_locked},{self.num_unlocked}\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"0\"\nassert solution([\"1\", \"2\", \"2\", \"3\", \"4\", \"5\"]) == \"0\"\nassert solution([\"1\", \"2\", \"1\", \"3\", \"4\", \"5\"]) == \"3\"\nassert solution([\"2\", \"4\", \"2\", \"3\", \"4\", \"5\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['1 1 1 1', '1 1 2', '1 1 3', '1 1 4', '1 1 5']) == '0'\nassert solution(['2 1 2', '2 1 2', '2 2 2']) == '0'\nassert solution(['1 1 1', '1 1 1', '1 1 2']) == '1'\nassert solution(['1 1 1', '1 1 2', '1 1 3']) == '0'\nassert solution(['1 1 1', '1 1 2', '1 1 3', '1 1 4', '1 1 5']) == '0'\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n2\n1 2 2\n1 3 3\n2 4 4\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n2 3 3\n3 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 4 4\n3 2 3\n4 4 4\n4 2 3\n1 1 1\n1 2"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 3, \"Answer incorrect\"\nassert solution(2) == 4, \"Answer incorrect\"\nassert solution(3) == 2, \"Answer incorrect\"\nassert solution(4) == 4, \"Answer incorrect\"\nassert solution(5) == 5, \"Answer incorrect\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 2 1000000007\") == \"1\"\nassert solution(\"4 2 1000000007\") == \"2\"\nassert solution(\"3 2 1000000007\") == \"3\"\nassert solution(\"1 2 1000000007\") == \"1\"\nassert solution(\"1000\") == \"1\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == (3624)\n\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\nassert solution(\"1 1 1 1 1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\", \"2\", \"4\", \"1\"]) == \"1\"\nassert solution([\"5\", \"2\", \"1\", \"4\", \"3\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"1\"\nassert solution([\"6\", \"7\", \"8\", \"9\", \"10\"]) == \"1\"\nassert solution([\"1\", \"3\", \"2\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"1\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 6 10') == 1\nassert solution('3 3 1000000007') == 1\nassert solution('2 2 1000000007') == 2\nassert solution('1 1 1000000007') == 1\nassert solution('1 2 1000000007') == 2\n"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\nassert solution(\"7 4 9 1000000007\") == \"1\"\nassert solution(\"2 3 4 1000000007\") == \"1\"\nassert solution(\"6 8 7 1000000007\") == \"2\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 4\nassert solution(4) == 4\nassert solution(5) == 4\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 5\") == 5\nassert solution(\n    \"3 11\") == 8\nassert solution(\n    \"9 14\") == 1\nassert solution(\n    \"6 4\") == 1\nassert solution(\n    \"3 3\") == 2\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"5\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"4 1\") == \"3\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 8"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == 5\nassert solution(\"3 5\") == 8\nassert solution(\"11\") == 2\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"10\", \"10\"]) == \"5\"\nassert solution([\"10\", \"10\", \"10\"]) == \"3\"\nassert solution([\"10\", \"10\", \"10\", \"10\"]) == \"2\"\nassert solution([\"10\", \"10\", \"10\", \"10\", \"10\"]) == \"1\"\nassert solution([\"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\"]) == \"1\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('', '', '', '', '') == 0\nassert solution('', '0', '0', '0', '0') == 1\nassert solution('', '0', '1', '2', '3') == 2\nassert solution('', '0', '0', '1', '3') == 3\nassert solution('', '0', '0', '2', '3') == 3\n"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"2 3\"\nassert solution(\"1 2 3 4 5\") == \"4 5\"\nassert solution(\"1 2 3 4 5 6\") == \"6\"\nassert solution(\"0 1 1 0 0\") == \"0 1 1\"\nassert solution(\"0 0 0 0 0\") == \"0 0 0\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 5 3 2\") == \"2\"\nassert solution(\"1 5 3 2 0\") == \"2\"\nassert solution(\"1 5 3 2 0 3\") == \"3\"\nassert solution(\"1 5 3 2 0 4\") == \"3\"\nassert solution(\"1 5 3 2 0 5\") == \"2\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 2 4 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 7 3') == '2'\nassert solution('3 2 1') == '2'\nassert solution('2 2 1') == '3'\nassert solution('1 1 1') == '1'\nassert solution('0 0 1') == '0'\n"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == inp[0]\n\n-----Sample Input 1-----\n3\n4 5\n2 0 1 2\n1 3 1 1\n0 1 1\n0 2 1\nSample Output 1:\n2\n\n-----Sample Input 2-----\n2\n4 5\n3 0 1 2\n1 3 1 1\n0 1 1\n0 2 1\nSample Output 2:\n1\n\n-----Explanation-----\nThe example above has been implemented using the above specifications. The minimum number of vehicles required to ensure each client $i$ is visited at time $T_ i$ by some vehicle is $S_i$.\n\"\"\""
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('{1,1,1,1}') == '3'\nassert solution('{1,1,1,2}') == '3'\nassert solution('{2,1,1,3}') == '3'\nassert solution('{1,1,2,2}') == '3'\nassert solution('{1,2,1,2}') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '3'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['10', '20', '30', '40']) == '10'\nassert solution(['5', '5', '10', '10']) == '3'\nassert solution(['10', '10', '10', '10']) == '1'\nassert solution(['1', '2', '3', '3']) == '1'\nassert solution(['1', '2', '2', '1']) == '1'\n"
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\nSample Input 3:\n4 1\n10\n1 10\n1 10\n1 10\nSample Output 3:\n1\n\"\"\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3, \"Too many customers!\""
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 1') == '3'\nassert solution('5 5 10') == '13'\nassert solution('5 5 10 2') == '13'\nassert solution('5 5 10 1') == '6'\nassert solution('2 20 1') == '1'\n"
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\n'''\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp := \"5\\n2\\n3\\n1\\n2\\n5\\n1\\n2\\n5\\n4\\n1\\n3\\n5\\n1\\n1\\n4\\n3\\n1\\n4\\n5\\n3\\n1\\n3\\n5\\n4\\n1\\n2\\n1\\n4\\n5\\n1\\n1\\n4\\n5\\n3\\n1\\n4\\n1\\n4\\n3\\n1\\n5\\n1\\n4\\n1\\n5\\n4\\n1\\n2\\n5\\n1\\n3\\n5\\n1\\n1\\n1\\n4\\n2\\n3\\n5\\n1\\n1\\n3\\n5\\n4\\n1\\n3\\n3\\n1\\n4\\n2\\n1\\n3\\n3\\n5\\n1\\n2\\n4\\n3\\n3\\n2\\n1\\n3\\n3\\n3\\n1\\n2\\n3\\n3\\n4\\n1\\n3\\n3\\n1\\n2\\n2\\n1\\n2\\n3\\n1\\n1\\n4\\n2\\n3\\n1\\n3\\n1\\n3\\n2\\n1\\n3\\n3\\n2\\n3\\n3\\n3\\n1\\n2\\n2\\n1\\n3\\n2\\n3\\n1\\n3\\n1\\n2\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n2\\n1\\n3\\n1\\n3\\n2\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n3\\n1\\n2\\n3\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n2\\n3\\n3\\n3\\n1\\n1\\n3\\n1\\n2\\n1\\n2\\n1\\n2\\n3\\n1\\n3\\n1\\n3\\n1\\n2\\n2\\n1\\n3\\n3\\n2\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n3\\n3\\n1\\n3\\n2\\n3\\n3\\n1\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n2\\n1\\n2\\n2\\n3\\n3\\n1\\n2\\n2\\n3\\n1\\n3\\n3\\n1\\n2\\n3\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n3\\n2\\n1\\n3\\n3\\n2\\n2\\n2\\n2\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n2\\n3\\n2\\n2\\n3\\n3\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n2\\n1\\n1\\n1\\n3\\n1\\n3\\n1\\n3\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n2\\n1\\n3\\n1\\n1\\n3\\n3\\n3\\n1\\n3\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n3\\n2\\n1\\n2\\n2\\n2\\n3\\n2\\n3\\n1\\n1\\n3\\n1\\n2\\n1\\n3\\n3\\n1\\n1\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n3\\n1\\n1\\n2\\n1\\n2\\n2\\n3\\n1\\n3\\n2\\n2\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n3\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n1\\n3\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n2\\n1\\n3\\n1\\n2\\n1\\n2\\n1\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 3\\n5 3 4\\n5 3 4 5\\n6 3 5 4\\n6 3 5 4\"\n) == \"3 4 5\\n6 3 5\""
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"), 1\nassert solution(\"10\"), 5\nassert solution(\"3\"), 1\nassert solution(\"1\"), 1\nassert solution(\"4\"), 1\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, 1) == 5\nassert solution(3, 1) == 0\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 5 3\") == \"5\"\nassert solution(\"3 2 6 5\") == \"5\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin: str\n    ) == \"5\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\" or solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\" or solution(stdin) == \"5\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin),'stdin is not a valid solution'\nassert solution(stdin),'stdin is not a valid solution'\nassert solution(stdin),'stdin is not a valid solution'"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 0 0 19') == '1'\nassert solution('0 0 0 19') == '1'\nassert solution('0 0 0 10') == '1'\nassert solution('3 1') == '1'\nassert solution('1 0 0 19') == '1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input: str\n    ) == \"2 3 5\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 0 1\"), \"Invalid Input\"\nassert solution(\"2 1 0 1\"), \"Invalid Input\"\nassert solution(\"2 1 0 1\"), \"Invalid Input\"\nassert solution(\"2 1 0 1\"), \"Invalid Input\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \n    input =\n    \"2 1 0 1\\n0 1 100000\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\\n0 3 1\\n2 4 1\\n1 1 1\"\n) == \"0 100000 1\\n1 0 100000\\n0 1 100000\\n1 2 1\\n0 2 1\\n1 3 1\\n1 4 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1 3 5'\n'''\n\nfrom collections import deque"
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 5 0 3\\n\"\n    \"0 1 10\\n\"\n    \"1 2 1\\n\"\n    \"1 3 1\\n\"\n    \"0 2 1\\n\"\n    \"2 3 10\\n\"\n    \"0 2 1\\n\"\n    \"2 3 10\\n\"\n) == \"5 3 5\\n\"\n\nExplanation:\n\nIf we assign $n$ nodes to $u$ and $v$ each and $c$ to $1$ in the flow graph, the capacity of $1 \\le c \\le 10^{8}$, and the flow from $u$ to $v$ is $f$, $f$ is $2^{31}$. We can assume that $u < v$, $0 < c \\le 10^{8},\\ $x \\le \\sum_{i \\le j} c \\le t \\le n-1$ and $0 < x \\le \\sum_{i \\le j} t \\le n-1$.\n\n\"\"\"\n\nclass Solution:\n    def solve(self, nodes, edges, q, t):\n        \n        def DFS(nodes, edges, node, visited, path, flow, c):\n            if len(path) == len(t):\n                #print(f\"path is {path}\")\n                #print(f\"flow is {flow}\")\n                #print(f\"q is {q}\")\n                #print(f\"c is {c}\")\n                #print(f\"node is {node}\")\n                #print(f\"visited is {visited}\")\n                #print(f\"path is {path}\")\n                #print(f\"flow is {flow}\")\n                #print(f\"q is {q}\")\n                #print(f\"c is {c}\")\n                if node in path:\n                    return True\n                path.append(node)\n                flow += 1\n                q[node] = 1\n                for nei in edges[node]:\n                    if nei not in path and not DFS(nodes, edges, nei, visited, path, flow, c):\n                        return False\n                    elif nei in path:\n                        path.pop()\n                flow -= 1\n                q[node] = 0\n                #print(f\"q is {q}\")\n                return False\n            \n            else:\n                for nei in edges[node]:\n                    if nei not in path and not DFS(nodes, edges, nei, visited, path, flow, c):\n                        return False\n                    elif nei in path:\n                        path.pop()\n                flow -= 1\n                q[node] = 0\n                #print(f\"q is {q}\")\n                return False\n        \n        visited = [0] * len(nodes)\n        path = []\n        flow = 0\n        \n        for nei in edges:\n            if nei not in path:\n                if DFS(nodes, edges, nei, visited, path, flow, c):\n                    return True\n        return False\n        "
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4 3 5'\n\"\"\""
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 1 1\"\nassert solution(\"1 2 1\") == \"1 2 1\"\nassert solution(\"1 3 1\") == \"1 3 1\"\nassert solution(\"0 2 1\") == \"0 2 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0 1 100000\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3 3 5'\nassert solution(input().strip()) == '3 3 5'\nassert solution(input().strip().replace(' ', '')) == '3 3 5'\n"
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"100000 1\"\nassert solution(input()) == \"100000 0\"\nassert solution(input()) == \"0 1\"\nassert solution(input()) == \"0 1 1\"\nassert solution(input()) == \"0 2\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0 3 5\"\n\"\"\"\n\nimport sys\n\nclass Pair:\n    def __init__(self, x):\n        self.x = x\n        self.left = None\n        self.right = None\n        \n    def is_empty(self):\n        return self.left is None and self.right is None"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"S.M\", \"M.S\"]) == \"2 0\"\nassert solution([\"M.S\", \"S.M\"]) == \"1 0\"\nassert solution([\"M.S\", \"S.M\", \"SMS\"]) == \"3 0\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3 5'\n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 5'\n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1MSSM.M\") == \"3\"\nassert solution(\"2MSSS.M\") == \"5\"\nassert solution(\"4M.S\") == \"0\"\nassert solution(\"5M.S\") == \"6\"\nassert solution(\"1MSSS.M\") == \"5\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3 5'\n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\",\"MMSS\",\"MMSS\",\"SMS\",\"SMS\"]) == \"3 5\"\nassert solution([\"5\",\"MMSS\",\"MMSS\",\"SMS\",\"SMS\"]) == \"2 5\"\nassert solution([\"5\",\"M.S\",\"SMS\",\"SMS\",\"SMS\"]) == \"1 5\"\nassert solution([\"5\",\"M.S\",\"SMS\",\"SMS\",\"SMS\"]) == \"1 0\"\nassert solution([\"5\",\"M.S\",\"SMS\",\"SMS\",\"SMS\"]) == \"0 3\""
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"3 5\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\"\"\n    .\n    MSSM\n    \"\"\"\"\") == 2\nassert solution(\n    \"\"\"\"\"\n    .\n    MMSS\n    \"\"\"\"\") == 0\nassert solution(\n    \"\"\"\"\"\n    .\n    M.S\n    \"\"\"\"\") == 0\nassert solution(\n    \"\"\"\"\"\n    .\n    M.M.\n    \"\"\"\"\") == 0\nassert solution(\n    \"\"\"\"\"\n    .\n    MSSM\n    \"\"\"\"\") == 0\n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"MSSM\",\"MSS\",\"MMSS\",\"MM\",\"M\",\"M\",\"S\",\"S\",\"S\",\"S\"]) == \"3\"\nassert solution([\"SSM\",\"SSM\",\"S\",\"S\",\"S\",\"S\",\"S\",\"S\",\"S\",\"S\"]) == \"2\"\nassert solution([\"SMMSSSS\",\"SMMSS\",\"SSS\"]) == \"1\"\nassert solution([\"SMMSSSS\",\"SMMSSSS\",\"SSS\",\"SSS\"]) == \"1\"\nassert solution([\"MSSMMSS\",\"MSSSSSS\"]) == \"0\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sample_input) == \"Yes\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 6\nassert solution(stdin) == 5\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5G t a') == '6 t a'\nassert solution('6T a') == '6 a'\nassert solution('5T a') == '1 t a'\nassert solution('6T a') == '1 a'\nassert solution('5B t') == '1 t'\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str(int(input()) + 1)) == str(int(input()) + 1)\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 B\") == \"0 B\"\nassert solution(\"1 B\") == \"1 B\"\nassert solution(\"2 E a\") == \"2 E a\"\nassert solution(\"2 E b\") == \"2 E a\"\nassert solution(\"2 S\") == \"5 T a\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"7 B 7 13 1\") == \"c\"\nassert solution(\"2 S 2 5 5 5\") == \"c\"\nassert solution(\"1 E a 1\") == \"c\"\nassert solution(\"1 E b\") == \"c\"\nassert solution(\"1 E c\") == \"c\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0B\") == \"0\"\nassert solution(\"1B\") == \"B\"\nassert solution(\"2E\") == \"E\"\nassert solution(\"2E a\") == \"E\"\nassert solution(\"2S\") == \"S\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2,10) == 121\nassert solution(291,10) == 146\nassert solution(12,10) == 15\nassert solution(12, 12) == 14\nassert solution(31,12) == 25\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('A' + 'B' + 'C') == 'A2B2C'\nassert solution('ABBCCDABCD' + 'EE' + 'B' + 'C' + 'D' + 'F' + 'G') == 'A2B2CDFGF'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\"\"\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == (6, 12)\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 62\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"Aab\") == \"9e4c23dcee942a24e9c9d\"\nassert solution(\"ABC\") == \"d5dcb7ea9e6e7fd01e5e9\"\nassert solution(\"abcd\") == \"a34bc32e4c28f4b9b12\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 76\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4561\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == answer\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '40'\n\"\"\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '29'\n"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"DARN\", \"CAT\"]) == \"COG\"\nassert solution([\"DARN\", \"CAT\", \"COG\"]) == \"COG\"\nassert solution([\"DARN\", \"CAT\", \"CAT\", \"CAT\", \"CAT\", \"CAT\"]) == \"COG\"\nassert solution([\"DARN\", \"CAT\", \"CAT\", \"CAT\", \"CAT\", \"CAT\", \"CAT\"]) == \"0\"\nassert solution([\"CAT\", \"CAT\", \"CAT\", \"CAT\", \"CAT\", \"CAT\", \"CAT\"]) == \"0\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'COG', \"The solution function failed to return the expected output\""
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 191 194 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 220 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'COG'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'COG'\nassert solution(stdin) == 0\nassert solution(stdin) == -1\nassert solution(stdin) == 'CAT'\nassert solution(stdin) == 'CAT'\n"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('A WILDCARD') == 'A WILDCARD', 'incorrect solution'\nassert solution('GATGAT') == 'GATGAT', 'incorrect solution'\nassert solution('GAT') == 'GATGAT', 'incorrect solution'\nassert solution('GATGATGAT') == 'GATGATGAT', 'incorrect solution'\nassert solution('FIG',4) == 'FIG', 'incorrect solution'\n"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"COG\"\nassert solution(inp) == 0\nassert solution(inp) == -1\nassert solution(inp) == 0\nassert solution(inp) == 0\n"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'CAT'\nassert solution(stdin) == 'DOG'\nassert solution(stdin) == 'COT'\nassert solution(stdin) == 0\nassert solution(stdin) == -1\n"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'COG'\nassert solution(input()) == 0\n"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'COG'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 4 5 7 8 9 3 2\") == 6\nassert solution(\"2 4 5 7 8 9 3 2\") == 6\nassert solution(\"1 2 2\") == 2\nassert solution(\"2 4 4 4\") == 0\nassert solution(\"1 9 3 3\") == 3\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\n\n'''\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"11\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"9\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin: str\n    )\nassert solution(\n    stdin: str,\n    )\nassert solution(\n    stdin: str,\n    )\nassert solution(\n    stdin: str,\n    )\nassert solution(\n    stdin: str,\n    )\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 16\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 9\nassert solution(input) == 6\nassert solution(input) == 3\nassert solution(input) == 2\nassert solution(input) == 1\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 2) == 1, \"Expected 1, got %d\" % 1\nassert solution(2, 2) == 1, \"Expected 1, got %d\" % 1\nassert solution(2, 3) == 2, \"Expected 2, got %d\" % 2\nassert solution(2, 4) == 2, \"Expected 2, got %d\" % 2\nassert solution(4, 3) == 3, \"Expected 3, got %d\" % 3\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"9\"\n\n\n'''\nimport math\n"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"9\"\n\"\"\""
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution(input())) == \"3\" or \"0\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"....\\\nH...V\\\n.V..\\\n..#..\\\n.V.\\\nV..\\\n..\\\n.\\\nV\\\n.\\\n.\\\n.\\\n.\\\nV\\\n\")\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n        \"..#..\\n/..#..\\n.V.#..\\n..#..V\\n#..#..\\n..#..#\\n.V.#..\\n/..#..\\n.V.#..\\n.V#.##\\n.V#.##\\n.##.##\\n..#.##\\n.##.##\\n...#.##\\nV.##.##\\nV...#.##\\n..#..#\\nV#.##.##\\n....#..\\n.##.##\\n.##.##\\n.##.##\\n...#..\\nV...#\\nV...#\\n....#\\n.V.##\\n....#\\nV.##\\n....#\\nV..#\\nV..#\\n..#..\\n..#..\\n.##.\\n.##.\\n..#..\\nV.#..\\nV#..#\\nV...#\\n..#..#\\n..#..#\\n....#..\\n....#..\\nV...#\\nV#..#\\n....#..\\n....#..\\n....#..\\n....#..\\n....#..\\n....#..\\nV...#\\nV....#\\n....#..\\n....#..\\n....#..\\n....#..\\n....#..\\n....#..\\n....#..\\n....#..\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\nV....#\\"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input: \"\\\n.V.\\\n..V\\\n.\\\n.V.\\\n.\\\n.V\\\n.\\\n.V.\\\n.\\\n.V.\\\n..V\\\n.\\\n.V\\\n.\\\n.V\\\n.\\\n.V\\\n.\\\n.V\\\n.\\\n.V\\\n.\\\n.V\"\ninput:\n8\nV..VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nv\"\"\"\n)\n"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n\nTest Input/Output Reference:\nSAMPLE INPUT\n5 5\n/.V.\\\n./.V.\n..#..\n.V.#.\n\\.V./\nSample Output\n3\nExplanation\nThe example input is shown below. The 2 gargoyles are rotated to solve the puzzle.\n\"\"\""
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n'''"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"AMBIGUOUS\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('n fox jumps ove') == 'The quick brown fox jumps over the lazy dog. rown fox jumps over the lazy dog.'\nassert solution('n fox jumps ove') == 'ambridgues.'\nassert solution('n fox jumps ove') == 'ambridgues'\nassert solution('n fox jumps ove') == 'AMBIGUOUS'\nassert solution('n fox jumps ove') == 'ambridgues'\n"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'AMBIGUOUS'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), 'Invalid input'\n"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('cdefghi'), \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"cdefghi\") == \"cdefghi\"\nassert solution(\"efghijk\") == \"efghijk\"\nassert solution(\"efghijx\") == \"efghijx\"\nassert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"rown fox\") == \"rown fox\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['cdefghi', 'efghijk', 'efghijx', 'abcdefg', 'f', 'g', 'h', 'i', 'j', 'k', 'l','mps', 'n', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y']) == 'AMBIGUOUS'\nassert solution(['cdefghi', 'efghijk', 'efghijx', 'abcdefg', 'f', 'g', 'h', 'i', 'j', 'k', 'l','mps', 'n', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y']) == 'AMBIGUOUS'\nassert solution(['cdefghi', 'efghijk', 'efghijx', 'abcdefg', 'f', 'g', 'h', 'i', 'j', 'k', 'l','mps', 'n', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y']) == 'AMBIGUOUS'\nassert solution(['cdefghi', 'efghijk', 'efghijx', 'abcdefg', 'f', 'g', 'h', 'i', 'j', 'k', 'l','mps', 'n', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y']) == 'AMBIGUOUS'\nassert solution(['cdefghi', 'efghijk', 'efghijx', 'abcdefg', 'f', 'g', 'h', 'i', 'j', 'k', 'l','mps', 'n', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y']) == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"AMBIGUOUS\"\n\npass\n-----Time complexity-----\nO(nlogn)\n\n-----Space complexity-----\nO(n)\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.curr_idx = 0\n        self.curr_len = 0\n        self.start = 0\n        self.end = 0\n\n    def optimal_recon(self, stdin: str) -> str:\n        # initialize output string\n        res = \"AMBIGUOUS\"\n        # init sequence\n        seq = stdin[self.curr_idx:self.curr_idx + self.curr_len]\n        self.curr_len = len(seq)\n        # generate predecessor sequence\n        self.pre = [0] * self.curr_len\n        for i in range(self.curr_len):\n            for j in range(i):\n                self.pre[j] = max(self.pre[j], self.pre[i] + 1)\n        # iterate over text\n        for i in range(self.curr_idx + self.curr_len, len(stdin)):\n            if seq[self.start] == seq[self.end]:\n                if seq[self.start] == stdin[i] and (self.end < i):\n                    self.end = i\n                    continue\n                if seq[self.start]!= stdin[i] and seq[self.start]!= stdin[self.end]:\n                    self.end = i\n                    continue\n            # if not yet matched, just append new node to seq\n            if seq[self.start]!= stdin[i]:\n                self.start = i\n                self.curr_idx = i\n                self.end = i\n                self.curr_len = len(seq)\n                continue\n            # if matched, update sequence\n            self.start = i\n            self.end = i\n            self.curr_len = len(seq)\n        # return res\n        return res\n"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['fox', 'jumps', 'ove', 'f', 'brown', 'fox', 'jumps', 'ove', 'f', 'dog', 'with', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog', 'and','mps', 'over', 'the', 'lazy', 'dog"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 6) == '-0-2+-1-3-4+'"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin: str) == \"impossible\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"01\"\nassert solution(\"3 2\") == \"11\"\nassert solution(\"3 2\") == \"01\"\nassert solution(\"2 3\") == \"01\"\nassert solution(\"2 3\") == \"01\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0-+\"\nassert solution(stdin) == \"0--+\"\nassert solution(stdin) == \"0-+0\"\nassert solution(stdin) == \"0-+1\"\nassert solution(stdin) == \"0-+\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0-0+-1'\nassert solution(stdin) == '0-0+-1'\nassert solution(stdin) == '0-0+-1'\nassert solution(stdin) == '0-0+-1'\nassert solution(stdin) == '0-0+-1'\n"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'impossible'\nassert solution(input()) == '0-0-0-0+0+0+0+0'\nassert solution(input()) == '1-1-0-1'\nassert solution(input()) == '0-0-0-0+0+0+0'\nassert solution(input()) == '0+0+0-0+0'\n"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"Failed\"\n\"\"\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3 -2 3 -2 3 4 -2 4 3 -2 4 4\"\n) == \"impossible\"\nassert solution(\n    \"2 -2 -2 4\"\n) == \"-2-0+-2+\"\nassert solution(\n    \"2 1\"\n) == \"0+-1\"\nassert solution(\n    \"2 0 1\"\n) == \"0+-1\"\nassert solution(\n    \"2 5 2\"\n) == \"0+-1+-1+\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"-+\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('-3 -2 3') == '0--+-+-0--+-0--+-0--+-+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0-'\n\nassert solution('-3 -2 3') == '1--+-+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0-'\n\nassert solution('-3 -2 3') == '-+-+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0-'\n\nassert solution('-3 -2 3') == '-+-+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0-'\n\nassert solution('-3 -2 3') == '-+-+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0-'\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 0\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 2\"\n) == \"1\"\nassert solution(\n    \"2 2 1 2 1 1 1\"\n) == \"1\"\nassert solution(\n    \"2 3\"\n) == \"2\"\nassert solution(\n    \"2 3 2\"\n) == \"1\"\nassert solution(\n    \"3 2\"\n) == \"2\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Error\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 2\"\n    ) == \"1\"\nassert solution(\n    \"2 2\"\n    ) == \"2\"\nassert solution(\n    \"2 2\"\n    ) == \"1\"\nassert solution(\n    \"2 2\"\n    ) == \"1\"\nassert solution(\n    \"2 2\"\n    ) == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"3 2 3\"\nassert solution(\"2 2 1 1 1\") == \"3\"\nassert solution(\"2 2 1 1 2 1\") == \"4\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 1 1') == '1 2'\nassert solution('1 2 1 2') == '1 3 2'\nassert solution('1 2 3 1') == '1 3'\nassert solution('1 2 3 4') == '1 6'\nassert solution('1 1 2 3') == '1'\n"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES', \"fails\""
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nWRRRG\nWRRRG\nWRRRG\nWBBBB\nWBBBB\nWBBBB\n\"\"\") == \"YES\"\nassert solution(\"\"\"\nWWRRR\nWRRRG\nWBBBBR\nWBBBB\nWBBBB\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"WRRRG\") == \"YES\"\nassert solution(\"WRRRG\") == \"NO\"\nassert solution(\"WRRRG\") == \"NO\"\nassert solution(\"WRRRG\") == \"NO\"\nassert solution(\"WRRRG\") == \"YES\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(str(input())) == \"YES\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"WRRRG\", \"WRRRG\", \"WRRRG\", \"WBBBB\"]) == \"YES\", \"Wrong answer\"\nassert solution([\"WWRRG\", \"WRRRG\", \"WRRRG\", \"WBBBB\"]) == \"NO\", \"Wrong answer\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('WRRRG') == 'NO'\nassert solution('WRRRG') == 'YES'\n\"\"\"\n\nclass Solution:\n    def paintingValidator(self, height, width, painting):\n        # Number of rows\n        num_rows = len(painting)\n        # Number of columns\n        num_cols = len(painting[0])\n        # Store the starting position\n        starting_pos = (0,0)\n        # Store the colors in a set\n        painting_set = set()\n        # Store the lengths of each row\n        row_lengths = [len(row) for row in painting]\n        # Store the starting positions of each column\n        col_positions = [[0,0] for _ in range(num_cols)]\n        # Store the colors of the current painting\n        painting_colors = []\n        # Store the length of each row\n        row_lengths_set = set(row_lengths)\n        # Store the starting position of each column\n        col_positions_set = set(col_positions)\n        # If the painting is not valid\n        if not (0 <= starting_pos[0] <= num_rows - 1 and 0 <= starting_pos[1] <= num_cols - 1):\n            return \"NO\"\n        else:\n            # If the painting is valid\n            if not row_lengths_set.isdisjoint(col_positions_set):\n                # Create a set with all the starting positions\n                painting_set.update(starting_pos)\n                # Get all the colors from the painting\n                painting_colors = painting[starting_pos[0]][starting_pos[1]]\n                # Loop through each color\n                for paint_color in painting_colors:\n                    # Check if the color is in the painting\n                    if paint_color not in painting_set:\n                        return \"NO\"\n                    # Update the starting position of the color\n                    starting_pos = (starting_pos[0] + row_lengths_set.pop(), starting_pos[1] + col_positions_set.pop())\n            else:\n                return \"NO\"\n        # If the painting is valid\n        if not row_lengths_set.isdisjoint(col_positions_set):\n            # Create a set with all the starting positions\n            painting_set.update(starting_pos)\n            # Get all the colors from the painting\n            painting_colors = painting[starting_pos[0]][starting_pos[1]]\n            # Loop through each color\n            for paint_color in painting_colors:\n                # Check if the color is in the painting\n                if paint_color not in painting_set:\n                    return \"NO\"\n                # Update the starting position of the color\n                starting_pos = (starting_pos[0] + col_positions_set.pop(), starting_pos[1] + row_lengths_set.pop())\n        else:\n            return \"NO\"\n        # If the painting is valid\n        if not col_positions_set.isdisjoint(row_lengths_set):\n            # Create a set with all the starting positions\n            painting_set.update(starting_pos)\n            # Get all the colors from the painting\n            painting_colors = painting[starting_pos[0]][starting_pos[1]]\n            # Loop through each color\n            for paint_color in painting_colors:\n                # Check if the color is in the painting\n                if paint_color not in painting_set:\n                    return \"NO\"\n                # Update the starting position of the color\n                starting_pos = (starting_pos[0] + row_lengths_set.pop(), starting_pos[1] + col_positions_set.pop())\n        else:\n            return \"NO\"\n        # If the painting is valid\n        if not row_lengths_set.isdisjoint(col_positions_set):\n            # Create a set with all the starting positions\n            painting_set.update(starting_pos)\n            # Get all the colors from the painting\n            painting_colors = painting[starting_pos[0]][starting_pos[1]]\n            # Loop through each color\n            for paint_color in painting_colors:\n                # Check if the color is in the painting\n                if paint_color not in painting_set:\n                    return \"NO\"\n                # Update the starting position of the color\n                starting_pos = (starting_pos[0] + col_positions_set.pop(), starting_pos[1] + row_lengths_set.pop())\n        else:\n            return \"NO\"\n        # If the painting is valid\n        if not col_positions_set.isdisjoint(row_lengths_set):\n            # Create a set with all the starting positions\n            painting_set.update(starting_pos)\n            # Get all the colors from the painting\n            painting_colors = painting[starting_pos[0]][starting_pos[1]]\n            # Loop through each color\n            for paint_color in painting_colors:\n                # Check if the color is in the painting\n                if paint_color not in painting_set:\n                    return \"NO\"\n                # Update the starting position of the color\n                starting_pos = (starting_pos[0] + row_lengths_set.pop(), starting_pos[1] + col_positions_set.pop())\n        else:\n            return \"NO\"\n        # If the painting is valid\n        if not row_lengths_set.isdisjoint(col_positions_set):\n            # Create a set with all the starting positions\n            painting_set.update(starting_pos)\n            # Get all the colors from the painting\n            painting_colors = painting[starting_pos[0]][starting_pos[1]]\n            # Loop through each color\n            for paint_color in painting_colors:\n                # Check if the color is in the painting\n                if paint_color not in painting_set:\n                    return \"NO\"\n                # Update the starting position of the color\n                starting_pos = (starting_pos[0] + col_positions_set.pop(), starting_pos[1] + row_lengths_set.pop())\n        else:\n            return \"NO\"\n        # If the painting is valid\n        if not col_positions_set.isdisjoint(row_lengths_set):\n            # Create a set with all the starting positions\n            painting_set.update(starting"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n0 <= K <= N\n0 <= N <= 5000\n0 <= a_ n <= S\n1 <= a_ n <= K\n\"\"\"\nfrom sys import stdin\nfrom math import log\n\nN, K = map(int, stdin.readline().rstrip().split())\na_list = []\nfor i in range(N):\n    a_list.append(int(stdin.readline().rstrip()))"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) == 1\nassert solution(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) == 1\nassert solution(2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) == 3\nassert solution(5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) == 3\nassert solution(6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) == 3\n"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\nSample Input 3:\n10 100\n1\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nSample Output 3:\n9\n"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 6\n"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\n\nSample Input 3:\n7 3 5\n1 2 3 4 5 6 7\n1 1\n1 2 2 3 2 4 2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\nSample Output 3:\n2\nExplanation 3:\nThe array can become smooth after the change 2-1-1-1-1-1-1-1-1-1-1-1-1-1.\nThis is because 3 and 2 are 1-smooth."
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7 5\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 2') == '3 2'\nassert solution('5 3') == '5 3'\nassert solution('5 5') == '5 5'\nassert solution('5 7') == '5 7'\nassert solution('5 9') == '5 9'\n"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '3 2'"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '3 2'\nassert solution(input) == '9 5'\n\"\"\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input=\n    \"5 \\n\"\n    \"0 2 \\n\"\n    \"1 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"8 5 \\n\"\n    \"2 3 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"8 5 \\n\"\n    \"2 3 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"8 5 \\n\"\n    \"2 3 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n\"\n    \"3 3 \\n\"\n    \"7 5 \\n\"\n    \"9 5 \\n\"\n    \"0 2 \\n"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 3\") == \"1 2 3\"\nassert solution(\"1 4\") == \"1 2 3 4\"\nassert solution(\"1 5\") == \"1 2 3 4 5\"\nassert solution(\"1 6\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3 2'\n\nInput\n6\n\nOutput\n6 9\nExplanation\nIn the frog at the bottom right corner, there is a frog at the top left corner and the frog in the middle is the closest frog to the bottom right corner.\n\n\"\"\"\nimport math\n\nn = int(input())\nx = list(map(int, input().split()))\nm = int(input())\ny = list(map(int, input().split()))\n\nfor i in range(0, n):\n    x[i] = x[i]/math.sqrt(m)\n    \nfor i in range(0, m):\n    y[i] = y[i]/math.sqrt(m)\n    \nanswer = 0\n\nfor i in range(0, n):\n    for j in range(i+1, n):\n        answer = max(answer, x[i]*y[j])\n\nprint(answer)"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"12 3\""
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(list(map(int, stdin.split()))) == str(int(stdin))\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"101001000\", \"Incorrect string\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"001\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, \"1 0 0 0 1 1\") == \"100\"\nassert solution(3, \"2 1 2 2 1 1\") == \"000\"\nassert solution(4, \"1 0 0 0 1 0\") == \"0000\"\nassert solution(4, \"1 1 0 0 0\") == \"0001\"\nassert solution(4, \"1 1 1 1 1\") == \"0001\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '01100000'\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3 2 2\"\n) == \"0011\"\nassert solution(\n    \"3 4 2 2\"\n) == \"0111\"\nassert solution(\n    \"3 2 2 2\"\n) == \"1101\"\nassert solution(\n    \"3 2 2 2\"\n) == \"1101\"\nassert solution(\n    \"3 2 2 2\"\n) == \"1101\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"01010\"\nassert solution(\"0\") == \"010101\"\nassert solution(\"0\") == \"00\"\nassert solution(\"1\") == \"00\"\nassert solution(\"1\") == \"00\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1110100\"\nassert solution(\"3\") == \"100100\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '01010'\n\n\nassert solution(stdin) == '01010'\n"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 20 50 50\") == \"4\"\nassert solution(\"10 20 50 50\") == \"5\"\nassert solution(\"10 20 50 50\") == \"3\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 2\") == \"2\"\nassert solution(\"1 3 6\") == \"3\"\nassert solution(\"1 4 3\") == \"3\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"1 3 1\") == \"1\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"5\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 1\n\"\"\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"The first line of the input contains two integers n,k, that each represent the number of shows and k is equal to the number of slots. The second line contains two integers x_i, y_i, that represent the start times of each show, where y_i = x_i. Each show consists of two integers, x_i, y_i. The last line contains four integers $x_i$ and $y_i$ that represent the end times of each show, where $y_i = x_i + y_i$.\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 12, \"solution() does not return correct output\"\n\"\"\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), 'Your solution does not work'"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 253 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 277 275 275 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 291 292 293 294 295 296 297 298 299 300 301 301 302 302 303 303 304 305 306 308 309 310 311 310 312 313 314 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 328 329 329 330 330 331 332 333 334 334 336 337 337 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['5', '6', '500']) == '90.00000000'\nassert solution(['5', '6', '450']) == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '90.00000000'\n\"\"\"\nfrom typing import List\nimport math"
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '90.00000000'\nassert solution(stdin) == '127.07089852'\nassert solution(stdin) == '135.9999976'\n"
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 6 500\") == 90\nassert solution(\"5 6 500 -100 0\") == 126\nassert solution(\"5 6 500 -100 100\") == \"Impossible\""
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 0 0 0 -100 -100 0 100\") == \"90\"\nassert solution(\"1 0 0 0 -100 -100 0 100\") == \"110\"\nassert solution(\"1 0 0 0 -100 -100 0 100\") == \"122\"\nassert solution(\"1 0 0 0 -100 -100 0 100\") == \"122\"\nassert solution(\"1 0 0 0 -100 -100 0 100\") == \"122\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"90.00000000\""
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"30.56297999\""
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 6 500') == 90.00000000\nassert solution('5 6 450') == 126.86989765\n"
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5 6 500\"\n) == \"90.00000000\"\nassert solution(\n    \"5 6 450\"\n) == \"126.86989765\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('30014') == 4, \"Expected answer '4'\"\nassert solution('30015') == 7, \"Expected answer '7'\"\nassert solution('30017') == 8, \"Expected answer '8'\"\nassert solution('30018') == 11, \"Expected answer '11'\"\nassert solution('30019') == 15, \"Expected answer '15'\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 26\n\"\"\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"1 1 2 3\"\nassert solution([\"1\", \"2\", \"2\", \"3\", \"1\"]) == \"1 2 3\"\nassert solution([\"1\", \"2\", \"2\", \"2\", \"1\", \"3\", \"1\"]) == \"1 2 2 2 3\"\nassert solution([\"1\", \"2\", \"1\", \"3\", \"3\", \"1\", \"1\"]) == \"1 1 3\"\nassert solution([\"1\", \"2\", \"1\", \"3\", \"3\", \"1\", \"2\", \"1\"]) == \"1 1 2 2 3\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '385'\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 12\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '7'\nassert solution(input()) == '85'\nassert solution(input()) == '79929'\nassert solution(input()) == '79926'\nassert solution(input()) == '7785'\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7, \"Example 1 failed\"\nassert solution(stdin) == 8, \"Example 2 failed\"\nassert solution(stdin) == 7, \"Example 3 failed\"\nassert solution(stdin) == 10, \"Example 4 failed\"\nassert solution(stdin) == 10, \"Example 5 failed\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\nprint(\"The answer to part 1 is {0}\".format(solution(stdin)))\nassert solution(stdin) == 5\nprint(\"The answer to part 2 is {0}\".format(solution(stdin)))\nassert solution(stdin) == 5\nprint(\"Done\")\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"123 4 56 12 1 2 0 0 5 8 99 120\"\n), 5\nassert solution(\n    \"1 4 5 3 7 5 2 1 5 4 3 7\"\n), 4\nassert solution(\n    \"1 2 1 1\"\n), 1\nassert solution(\n    \"1 2 1 2\"\n), 2\nassert solution(\n    \"1 3 3 3\"\n), 3\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2 3\", \"1\"]) == \"3.5\"\nassert solution([\"2 3\", \"1\", \"1\"]) == \"3.4\"\nassert solution([\"2 3\", \"1\", \"1\", \"1\"]) == \"3.8\"\nassert solution([\"1 2 3\", \"1\", \"1\", \"1\"]) == \"4.8\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution() is not defined\"\n\n\"\"\""
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5.5\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3.5'\nassert solution(stdin) == '4.9'\nassert solution(stdin) == '3.2'\nassert solution(stdin) == '3.9'\nassert solution(stdin) == '3.7'\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 11.0\nassert solution(input()) == 11.0\nassert solution(input()) == 11.0\nassert solution(input()) == 11.0\nassert solution(input()) == 11.0\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2.5'\nassert solution(stdin) == '3.5'\nassert solution(stdin) == '4.9'\nassert solution(stdin) == '4.25'\nassert solution(stdin) == '3.25'\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"3 3\\\") == \"4.9\"\nassert solution(\\\"3 3\\\") == \"7.0\"\nassert solution(\\\"3 3\\\") == \"6.9\"\nassert solution(\\\"3 3\\\") == \"3.5\"\nassert solution(\\\"3 3\\\") == \"2.0\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin = \"2 3 1\"\n) == \"3.5\"\nassert solution(\n    stdin = \"3 3 2\"\n) == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4.9\"\nassert solution(stdin) == \"3.5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == \"4\"\nassert solution(1, 3, 10, 5, 2, 6, 7, 8, 9, 10) == \"19\"\nassert solution(12, 2, 3, 4, 5, 6, 7, 8, 9, 10) == \"12\"\nassert solution(1, 3, 10, 5, 2, 6, 7, 8, 9, 10) == \"4\"\nassert solution(1, 3, 10, 5, 2, 6, 7, 8, 9, 10) == \"4\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"4\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"2\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '19'\n\n\n-----Time Complexity-----\n1. [time complexity for the above algorithm is O(n^2)] \n2. [time complexity for the above algorithm is O(n^2)]\n\"\"\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"]) == \"4\"\nassert solution([\"6\",\"6\",\"3\",\"1\",\"2\",\"2\",\"5\",\"5\",\"4\",\"4\",\"5\",\"6\"]) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n'''\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 4\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"4\""
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"19\"\n\"\"\""
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1,5\") == \"4\"\nassert solution(\"2,1\") == \"3\"\nassert solution(\"2,4\") == \"1\"\nassert solution(\"2,3\") == \"2\"\nassert solution(\"2,3,5\") == \"3\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1, 1, 2, 1\") == \"1\"\nassert solution(\"10,5,2,3,1\") == \"5\"\nassert solution(\"1,2,3,1\") == \"0\"\nassert solution(\"1,1,2,1\") == \"1\"\nassert solution(\"12,5,2,3,1\") == \"6\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\nSample Input:\n1\n3\nSample Output:\n3\n\nExplanation:\nThe sequence is given by $1, 2, 3$, the smallest difference is $3$ in order to satisfy the constraints of the problem.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"4\"\n\nSample Input 3:\n1 11 12\nSample Output 3:\n1 12\nSample Input 4:\n1 1 2 3\nSample Output 4:\n1\nSample Input 5:\n1 7 9 10\nSample Output 5:\n1 7 9 10\n\"\"\""
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '5'\nassert solution(input()) == '5'\nassert solution(input()) == '6'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"5\"]) == \"4\"\nassert solution([\"1\", \"12\"]) == \"4\"\nassert solution([\"1\", \"5\", \"1\"]) == \"2\"\nassert solution([\"1\", \"5\", \"11\"]) == \"1\"\nassert solution([\"1\", \"5\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"14\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '16'\nassert solution(stdin) == '3'\nassert solution(stdin) == '21'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 8\nassert solution(stdin) == 16\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(a) == 2, 'incorrect'\nassert solution(a) == 2, 'incorrect'\nassert solution(a) == 2, 'incorrect'\nassert solution(a) == 2, 'incorrect'\nassert solution(a) == 2, 'incorrect'\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1, \"incorrect answer\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"cocar\", \"Car\", \"Cocar\"]) == 2\nassert solution([\"b\", \"b\", \"d\"]) == 1\nassert solution([\"a\"]) == 1\nassert solution([\"abc\"]) == 2\nassert solution([\"abcdefghijklmnopqrstuvwxyz\"]) == 7\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('car') == 2\nassert solution('cocar') == 2\nassert solution('caro') == 2\nassert solution('carow') == 2\nassert solution('carowo') == 2\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 3\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"car\") == \"1\", \"should be 1\"\nassert solution(\"cocar\") == \"2\", \"should be 2\"\nassert solution(\"zom\") == \"1\", \"should be 1\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"car\") == \"2\"\nassert solution(\"cocar\") == \"2\"\nassert solution(\"cocar\") == \"2\"\nassert solution(\"car\") == \"2\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1000000 1 1 1 1') == '8'\nassert solution('5') == '0'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('1000000') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '8'"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 0, \"input is not correct\"\nassert solution(input().replace(' ', '').replace('\\n', '').replace('0', '0').replace('1', '1').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7')) == '0', \"input is not correct\"\nassert solution(input().replace(' ', '').replace('\\n', '').replace('0', '0').replace('1', '1').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7')) == '0', \"input is not correct\"\nassert solution(input().replace(' ', '').replace('\\n', '').replace('0', '0').replace('1', '1').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7')) == '0', \"input is not correct\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"0 2 0 1\") == 8\nassert solution(\n    \"1 0 0\") == 2\nassert solution(\n    \"1 0 0 1\") == 0\nassert solution(\n    \"1 0 0 2\") == 2\nassert solution(\n    \"1 0 0 4\") == 1\n"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"8\"\n\"\"\""
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"8\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        num = int(stdin.split(\" \")[0])\n        denom = int(stdin.split(\" \")[1])\n        \n        try:\n            nums = [int(s) for s in str(num) if s.isdigit()]\n            \n            if len(nums) > denom:\n                raise ValueError\n            \n            for n in nums:\n                print(n, end = \" \")\n        except ValueError:\n            return \"0\"\n        \n        return \"{:.2f}\".format(sum(nums) // denom)\n"
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"abc\",\"bc\",\"ac\"]) == \"abc\"\nassert solution([\"abc\",\"bca\",\"abc\",\"cba\"]) == \"cba\"\nassert solution([\"abc\",\"abc\",\"cba\"]) == \"abc\"\nassert solution([\"abcd\",\"cdab\",\"cdcba\"]) == \"cdcba\"\nassert solution([\"a\",\"b\",\"a\",\"b\",\"b\",\"c\",\"c\"]) == \"c\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"zba\") == \"zyz\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABCD\") == \"ABCD\"\nassert solution(\"ADDABC\") == \"-1\"\nassert solution(\"zxzzyzyz\") == \"-1\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"k=2\") == \"zxz\"\nassert solution(\"k=3\") == \"abc\"\nassert solution(\"k=5\") == \"abcabcabc\"\nassert solution(\"k=3\") == \"abc\"\nassert solution(\"k=3\") == \"cba\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == -1, 'did not get expected value'\n\"\"\""
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aaabbaaa\") == \"zyz\"\nassert solution(\"abaaab\") == \"zyz\"\nassert solution(\"abc\") == \"zyz\"\nassert solution(\"abcbaba\") == \"zyz\"\nassert solution(\"abcabcabc\") == \"zyz\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'zyz'\n\"\"\""
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'zyz'\n'''\n"
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'zyz'"
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'zyz'\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == ''\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin=\n    input()\n    ) == ('0', '0', '2', '0', '0')\n\n'''\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2 2 1\") == \"4\"\nassert solution(\"5 0 1\") == \"2\"\nassert solution(\"0 6 1\") == \"2\"\nassert solution(\"0 2 1\") == \"5\"\nassert solution(\"0 2 1 2\") == \"5\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 10\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\n\"\"\") == \"4\"\nassert solution(\"\"\"5 10\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\n\"\"\") == \"1\"\nassert solution(\"\"\"5 10\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"5 10\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\n\"\"\") == \"5\"\nassert solution(\"\"\"5 10\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '4'\nassert solution(inp) == '4'\nassert solution(inp) == '4'\nassert solution(inp) == '4'\nassert solution(inp) == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 11 6 12 10 3 4 2\") == \"12\"\nassert solution(\"4 7 4 9 1 2 5\") == \"5\"\nassert solution(\"5 4 4 4 4 3 5 2\") == \"5\"\nassert solution(\"3 9 1 3 6 2 4 8\") == \"5\"\nassert solution(\"2 9 6 5 3 1 2 4 8\") == \"7\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '4'\n\"\"\"\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\"\"\"\nimport sys\n\nclass Node:\n    def __init__(self):\n        self.key = 0\n        self.parent = 0\n        self.left = 0\n        self.right = 0\n    \nclass Solution:\n    def __init__(self):\n        self.root = None\n        self.ans = -1\n    \n    def insert(self, level: int, key: int):\n        if level == self.ans or self.root is None:\n            self.ans = level\n            return\n        \n        if level < self.ans:\n            if self.root:\n                self.root.left = Node()\n                self.root = self.root.left\n            self.root = Node()\n            self.root.left = self.insert(level + 1, key)\n        else:\n            if self.root.left:\n                self.root.right = Node()\n                self.root.right.left = self.root.left\n                self.root.left = self.root.right.right = Node()\n                self.root.right.right = Node()\n                \n    def search(self, level: int, key: int):\n        if level == self.ans or self.root is None:\n            return\n\n        if level < self.ans:\n            self.root.left = self.search(level + 1, key)\n        else:\n            self.root.right = self.search(level + 1, key)\n        \n    def solution(self, stdin: str) -> str:\n        \n        N, E, D, a = map(int, stdin.split())\n        self.root = Node()\n        self.insert(0, a)\n        \n        for _ in range(D):\n            self.search(0, E)\n            \n        for _ in range(E):\n            self.search(0, a)\n        \n        for _ in range(N):\n            self.search(0, E)\n        \n        return '0' if self.ans == -1 else str(self.root.key)"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5 2\") == \"2\"\nassert solution(\"3 5 7\") == \"0\"\nassert solution(\"3 4 10\") == \"2\"\nassert solution(\"3 4 11\") == \"0\"\nassert solution(\"2 3 4 8\") == \"3\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"function failed\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '1'\nassert solution('1 2 10') == '2'\nassert solution('1 3 1') == '2'\nassert solution('1 5 6 9 11') == '-1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == -1\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2) == 1\nassert solution(4, 3) == 3\nassert solution(3, 4) == 1\nassert solution(5, 4) == 5\nassert solution(3, 5) == 2\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1') == 0\nassert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 3\nassert solution('5') == 4\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"2 3 4 5 6 7\") == \"5\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"7\"\nassert solution(\"2 3 4 5 6 7 8 9\") == \"5\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '-2'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == -2\nassert solution(3) == -1\nassert solution(4) == 1\nassert solution(5) == -1\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 3\"\n    ) == \"1\"\nassert solution(\n    \"1 2\"\n    ) == \"1\"\nassert solution(\n    \"1 3\"\n    ) == \"2\"\nassert solution(\n    \"1 4\"\n    ) == \"2\"\nassert solution(\n    \"1 5\"\n    ) == \"3\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3 1 0\"\nassert solution(input()) == \"3 1 0\"\nassert solution(input()) == \"3 1 0\"\nassert solution(input()) == \"3 1 0\"\nassert solution(input()) == \"3 1 0\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"-1 1\"\nassert solution(stdin) == \"0 -1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3,1) == 3\nassert solution(1,1) == 0\nassert solution(2,2) == -1\nassert solution(3,2) == 1\nassert solution(3,1) == 3\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"1 3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"-1 -1\") == \"1 -1\"\nassert solution(\"-2 -2\") == \"2\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"Your solution should be answer in integers\"\nassert solution(stdin), \"Your solution should be answer in strings\"\nassert solution(stdin), \"Your solution should be answer in strings\"\nassert solution(stdin), \"Your solution should be answer in strings\"\nassert solution(stdin), \"Your solution should be answer in strings\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 24\n\"\"\""
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Please provide a valid solution\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\".A\") == \"A\"\nassert solution(\".R\") == \"R\"\nassert solution(\".V\") == \"V\"\nassert solution(\".I\") == \"I\"\nassert solution(\".E\") == \"E\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"IVO\",\"JASNA\",\"JOSIPA\",\"JOSIPA\",\"MATO\",\"MARTINA\"]) == \"24\"\n\"\"\""
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"JOSIPA\") == \"IVO\"\nassert solution(\"MARTINA\") == \"MATO\"\nassert solution(\"MATO\") == \"JOSIPA\"\nassert solution(\"MARTA\") == \"MARICA\"\nassert solution(\"JOSIPA\") == \"JOSIPA\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"IVO\", \"JASNA\", \"JOSIPA\", \"JOSIPA\"]) == \"4\"\nassert solution([\"IVO\", \"JOSIPA\", \"JOSIPA\"]) == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"25\"\n\"\"\""
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 7\n\"\"\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"99\""
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Side-effects-----\nYou may not modify the input or the output of the program.\nThe input is parsed in the same way as the example input, and your program does not use the test cases in any way other than parsing it.\n"
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"1 4\") == \"2\"\nassert solution(\"1 1\") == \"3\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        inp.splitlines(),\n        inp.splitlines(),\n        inp.splitlines(),\n        inp.splitlines(),\n        inp.splitlines(),\n        inp.splitlines(),\n        inp.splitlines(),\n        inp.splitlines(),\n        inp.splitlines()\n    ) == 59\n"
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '3'\n\"\"\""
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n3\\n3\\n3\\n\") == \"3\\n3\\n3\\n3\\n3\\n3\\n\", \"3\\n3\\n\"\nassert solution(\"3\\n4\\n4\\n5\\n5\\n5\\n6\\n6\\n\") == \"4\\n4\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n6\\n6\\n\", \"4\\n4\\n\"\nassert solution(\"3\\n4\\n6\\n6\\n\") == \"6\\n\"\nassert solution(\"3\\n1\\n2\\n2\\n\") == \"1\\n\"\nassert solution(\"3\\n1\\n1\\n1\\n\") == \"1\\n\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 30\n"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5.2696518641'\n'''\nimport math"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(test) == \"10.26\"\n\nSample Input 3:\n5\n16 9 5 0 -2 3 -2 0\nSample Output 3:\n9\n'''\nimport math\nimport sys\nfrom sys import stdin\nfrom itertools import combinations\nfrom collections import Counter"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"0 0 0\n-0.0 0 -2 0\n-1 0 2 0\n-1 0 -2 -2\n-1 1 -1 -1\n-1 1 -1 1\n-1 1 -1 1\n-1 1 1 1\n-1 1 1 1\n-1 0 0 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 -2\n-1 0 -2 -2\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 -2\n-1 0 -2 -2\n-1 0 0 -3\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 -2\n-1 0 -2 -2\n-1 0 -2 -2\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 -2\n-1 0 -2 -2\n-1 0 0 -3\n-1 0 0 -2\n-1 0 0 -2\n-1 0 -2 -2\n-1 0 -2 -2\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 -2\n-1 0 0 -2\n-1 0 0 -2\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 -2\n-1 0 0 -2\n-1 0 -2 -2\n-1 0 0 -3\n-1 0 0 -2\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 -2\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 0 -2\n-1 0 0 0\n-1 0 0 -2\n-1 0 0 0\n-1 0 -2 -2\n-1 0 0 -3\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 -2\n-1 0 0 -2\n-1 0 0 -2\n-1 0 -2 -2\n-1 0 -2 -2\n-1 0 -2 -2\n-1 0 0 -3\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 -2 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 -2\n-1 0 0 -2\n-1 0 0 -2\n-1 0 0 -2\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 -2\n-1 0 0 -2\n-1 0 -2 -2\n-1 0 -2 -2\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 -2 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 -3\n-1 0 0 0\n-1 0 0 0\n-1 0 0 0\n-1 0 -2 0\n-1 0 -2 0\n-1 0 0 0\n-1 0 -2"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5, 'incorrect solution'\n"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '15.03999478'"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0.3072438786500708'\nassert solution(stdin) == '1'"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5.2696518641\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5.269636865'\n\nSample Input 3:\n6\n5 6 -3 0 0 0 0 0 0 -1 2 1 0 0\nSample Output 3:\n13.17796875\n\nSample Input 4:\n1\n4 -1 1 -1 1 -1 1 1 -1 1 -1 -1 -1 0\nSample Output 4:\n2.4620500000\n\"\"\""
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2\",\"5\",\"8\",\"4\",\"-2\",\"0\",\"0\",\"-3\",\"0\",\"3\"]) == \"5.2696518641\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 24\n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"-1\""
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '24'\nassert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0 0 0') == '0'\n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 10 20 2\"\n) == \"24\"\nassert solution(\n    \"1 0 2 3\"\n) == \"6\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3\", \"1\", \"1\", \"2\"]) == \"1\"\nassert solution([\"1\", \"2\", \"1\", \"0\"]) == \"-1\"\nassert solution([\"2\", \"2\", \"1\", \"0\"]) == \"4\"\nassert solution([\"3\", \"1\", \"1\", \"0\"]) == \"8\"\n\n\"\"\"\n\nclass Solution:\n    def getMax(self, arr):\n        n = len(arr)\n        res = arr[0]\n        cnt = 0\n        for i in range(n):\n            if arr[i] < res:\n                res = arr[i]\n                cnt += 1\n            else:\n                res = arr[i]\n        return cnt, res\n        \n    def getIndex(self, arr, arr1, arr2):\n        for i in range(len(arr1)):\n            if arr1[i] < arr2[i]:\n                return i\n        return -1\n    \n    def findSolution(self, stdin, stdout):\n        q = list(stdin)\n        \n        n = len(q)\n        ans = self.getMax(q)\n        \n        for i in range(n):\n            cnt, num = self.getMax(q)\n            \n            j = self.getIndex(q, ans, num)\n            \n            if j!= -1:\n                q[j] = num\n            \n            else:\n                for i in range(n):\n                    if q[i] == num:\n                        cnt = i\n                        break\n                q[cnt] = num\n        \n        for j in range(n):\n            if q[j] == ans:\n                stdout.write(str(j+1) + \" \")\n                stdout.write(str(num) + \" \")\n                stdout.write(str(j+1) + \" \")\n                \n                break\n            \n        stdout.write(str(ans))\n        stdout.write(\"\\n\")\n        \n        \n"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\n"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"240\"\nassert solution(\"2 4 3 2 1\") == \"3\"\nassert solution(\"3 7 1 4 3\") == \"1\"\nassert solution(\"10 20\") == \"10\"\nassert solution(\"7 3 7 3 1 7 3 2 2 1 2 1\") == \"2\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"240\"\nassert solution(input()) == \"240\"\nassert solution(input()) == \"240\"\nassert solution(input()) == \"240\"\nassert solution(input()) == \"240\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"240\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 240\n\nSample Input 3:\n5 5\nSample Output 3:\n3\n\nSample Input 4:\n2 1\nSample Output 4:\n1\n\n-----Examples-----\nInput 1:\n3 2\nOutput 1:\n3\n\nInput 2:\n6 6\nOutput 2:\n240\n\nInput 3:\n5 5\nOutput 3:\n240\n\n\"\"\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 3') == 3\nassert solution('2 4') == 2\nassert solution('2 6') == 1\nassert solution('2 9') == 1\nassert solution('2 10') == 2\n"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 6\") == \"240\"\nassert solution(\"7\") == \"240\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 12\n'''"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['2','2','2','2','2','2','2']) == '240'\nassert solution
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5') == '240'\nassert solution('2') == '240'\nassert solution('2') == '240'\nassert solution('2') == '240'\nassert solution('2') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"12 34 56 78 29 99  1 2 3 4 5 7 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 131 132 131 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 192 193 194 195 196 196 197 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 241 243 244 245 245 246 247 248 249 250 251 252 253 254 255 257 256 259 260 261 262 263 264 263 265 266 267 268 269 280 281 280 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 301 302 303 303 304 305 306 308 309 310 311 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 329 330 330 331 332 333 334 335 336 337 337 338 339 340 341 341 341 343 343 344 345 346 347 348 349 350 351 351 352 351 353 354 355 356 357 358 359 360 361 363 366 367 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\\\"A+A=A\\\"),\u00a0\"Failed to solve puzzle\"\nassert solution(\\\"A+A=A\\\") == \"imposible\",\u00a0\"Failed to solve puzzle\"\nassert solution(\\\"S=S+O\\\") == \"imposible\",\u00a0\"Failed to solve puzzle\"\nassert solution(\\\"S=S+O\\\") == \"imposible\",\u00a0\"Failed to solve puzzle\"\nassert solution(\\\"S=S+O\\\") == \"imposible\",\u00a0\"Failed to solve puzzle\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9567+1085=10652\"\n\nassert solution(stdin) == \"impossible\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"9567+1085=10652\"\n\nassert solution(stdin) == \"9567+1085=10652\"\n\nassert solution(stdin) == \"9567+1085=10652\"\n\nassert solution(stdin) == \"9567+1085=10652\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['SEND+MORE=MONEY','A+A=A']) == '9567+1085=10652'\nassert solution(['SEND+MORE=MONEY','A+A=A']) == 'impossible'\nassert solution(['SEND+MORE=MONEY','A+A=A','+']) == '9567+1085=10652'\nassert solution(['SEND+MORE=MONEY','A+A=A']) == 'impossible'\nassert solution(['SEND+MORE=MONEY','A+A=A','=','E']) == '9567+1085=10652'\n"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['A+A=A', 'SEND+MORE=MONEY', 'A+A=A']), 'impossible'\nassert solution(['A', 'A', 'A', 'A']), 'impossible'\nassert solution(['A+', 'A', 'A', 'A']), 'impossible'\nassert solution(['A+', 'A', 'A', 'A', 'A']), 'impossible'\nassert solution(['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', '"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'imposible'\n\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"9567+1085=10652\"\nassert solution(input()) == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"9567+1085=10652\""
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '9567+1085=10652'\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([]), 0\nassert solution(['1']), 2\nassert solution(['1', '2']), 3\nassert solution(['2', '1']), 4\nassert solution(['1', '1', '2', '1']), 5\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12\nassert solution(\"3 2 1\") == 2\nassert solution(\"1 1 2 1\") == 1\nassert solution(\"1 2 1\") == 2\nassert solution(\"1 3 1\") == 2\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\n        [1, 2, 3, 0, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7, 0],\n    ]) == 14\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\nSample Input 3:\n10\n0 1 2 3 4 5 6 7 8 9 10\nSample Output 3:\n9\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(1) == 1\nassert solution(1) == 1\nassert solution(1) == 1\nassert solution(1) == 1\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,2) == 2\nassert solution(5,2) == 2\nassert solution(4,4) == 0\nassert solution(6,4) == 0\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [int(i) for i in stdin.strip().split()]\n) == \"1\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '14'\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['1', '1', '1', '1']) == '1'\nassert solution(['1', '1', '2', '2', '2']) == '1'\nassert solution(['1', '2', '1', '1']) == '1'\nassert solution(['1', '1', '2', '2', '2']) == '1'\nassert solution(['1', '1', '1', '1']) == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 7\n'''\n"
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 4 7 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1, \"Invalid solution\"\n\"\"\""
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"88\"\nassert solution(stdin) == \"-1\""
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 88"
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == 88\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\n"
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin=\"\"\"\n1 2 0\n3 2 3\n4 3 4\n5 3 5\n6 4 6\n7 4 7\n8 4 8\n9 4 9\n10 4 10\n11 5 11\n12 6 12\n13 7 13\n14 8 14\n15 9 15\n16 10 16\n17 11 17\n18 12 18\n19 13 19\n20 14 20\n21 15 21\n22 16 22\n23 17 23\n24 18 24\n25 19 25\n26 16 26\n27 17 27\n28 18 28\n29 19 29\n30 20 30\n31 17 31\n32 18 32\n33 19 33\n34 20 34\n35 17 35\n36 18 36\n37 19 37\n38 16 38\n39 18 39\n40 19 40\n41 16 41\n42 17 42\n43 18 43\n44 19 44\n45 20 45\n46 17 46\n47 18 47\n48 19 48\n49 16 49\n50 19 50\n51 16 51\n52 17 52\n53 18 53\n54 19 54\n55 17 55\n56 18 56\n57 17 57\n58 18 58\n59 19 59\n60 16 60\n61 17 61\n62 18 62\n63 17 63\n64 18 64\n65 19 65\n66 16 66\n67 18 67\n68 19 68\n69 16 69\n70 16 70\n71 19 71\n72 16 72\n73 17 73\n74 18 74\n75 19 75\n76 16 76\n77 18 77\n78 19 78\n79 16 79\n80 17 80\n81 18 81\n82 19 82\n83 16 83\n84 17 84\n85 18 85\n86 19 86\n87 16 87\n88 18 88\n89 16 89\n90 19 90\n91 16 91\n92 17 92\n93 18 93\n94 19 94\n95 16 95\n96 17 96\n97 18 97\n98 19 98\n99 16 99\n100 19 99\n101 20 100\n102 20 101\n103 20 102\n104 20 103\n105 20 104\n106 20 105\n107 20 106\n108 20 107\n109 20 108\n110 20 109\n111 20 110\n112 20 111\n113 20 112\n114 20 113\n115 20 114\n116 20 115\n117 20 116\n118 20 117\n119 20 118\n120 20 119\n121 20 120\n122 20 121\n123 20 122\n124 20 123\n125 20 124\n126 20 125\n127 20 126\n128 20 127\n129 20 128\n130 20 129\n131 20 130\n132 20 131\n133 20 132\n134 20 133\n135 20 134\n136 20 135\n137 20 136\n138 20 137\n139 20 138\n140 20 139\n141 20 140\n142 20 141\n143 20 142\n144 20 143\n145 20 144\n146 20 145\n147 20 146\n148 20 147\n149 20 148\n150 20 149\n151 20 150\n152 20 151\n153 20 152\n154 20 153\n155 20 154\n156 20 155\n157 20 156\n158 20 157\n159 20 158\n160 20 159\n161 20 160\n162 20 161\n163 20 162\n164 20 163\n165 20 164\n166 20 165\n167 20 166\n168 20 167\n169 20 168\n170 20 169\n171 20 170\n172 20 171\n173 20 172\n174 20 173\n175 20 174\n176 20 175\n177 20 176\n178 20 177\n179 20 178\n180 20 179\n181 20 180\n182 20 181\n183 20 182\n184 20 183\n185 20 184\n186 20 185\n187 20 186\n188 20 187\n189 20 188\n190 20 189\n191 20 190\n192 20 191\n193 20 192\n194 20 193\n195 20 194\n196 20 195\n197 20 196\n198 20 197\n199 20 198\n200 20 199\n201 20 200\n202 20 201\n203 20 202\n204 20 203\n205 20 204\n206 20 205\n207 20 206\n208 20 207\n209 20 208\n210 20 209\n211 20 210\n212 20 211\n213 20 212\n214 20 213\n215 20 214\n216 20 215\n217 20 216\n218 20 217\n219 20 218\n220 20 219\n221 20 220\n222 20 221\n223 20 222\n224 20 223\n225 20 224\n226 20 225\n227 20 226\n228 20 227\n229 20 228\n230 20 229\n231 20 230\n232 20 231\n233 20 232\n234 20 233\n235 20 234\n236 20 235\n237 20 236\n238 20 237\n239 20 238\n240 20 239\n241 20 240\n242 20 241\n243 20 242\n244 20 243\n245 20 244\n246 20 245\n247 20 246\n248 20 247\n249 20 248\n250 20 249\n251 20 250\n252 20 251\n253 20 252\n254 20 253\n255 20 254\n256 20 255\n257 20 257\n258 20 258\n259 20 259\n260 20 260\n261 20 261\n262 20 262\n263 20 263\n264 20 264\n265 20 265\n266 20 266\n267 20 267\n268 20 268\n269 20 269\n270 20 270\n271 20 271\n272 20 272\n273 20 273\n274 20 274\n275 20 275\n276 20 276\n277 20 277\n278 20 278\n279 20 279\n280 20 280\n281 20 281\n282 20 282\n283 20 283\n284 20 284\n285 20 285\n286 20 286\n287 20 287\n288 20 288\n289 20 289\n290 20 290\n291 20 291\n292 20 292\n293 20 293\n294 20 294\n295 20 295\n296 20 296\n297 20 297\n298 20 298\n299 20 299\n300 20 300\n301 20 301\n302 20 302\n303 20 303\n304 20 304\n305 20 305\n306 20 306\n307 20 307\n308 20 308\n309 20 309\n310 20 310\n311 20 311\n312 20 312\n313 20 313\n314 20 314\n315 20 315\n316 20 316\n317 20 317\n318 20 318\n319 20 319\n320 20 320\n321 20 321\n322 20 322\n323 20 323\n324 20 324\n325 20 325\n326 20 326\n327 20 327\n328 20 328\n329 20 329\n330 20 330\n331 20 331\n332 20 332\n333 20 333\n334 20 334\n335 20 335\n336 20 336\n337 20 337\n338 20 338\n339 20 339\n340 20 340\n341 20 341\n342 20 342\n343 20 343\n344 20 344\n345 20 345\n346 20 346\n347 20 347\n348 20 348\n349 20 349\n350 20 350\n351 20 351\n352 20 352\n353 20 353\n354 20 354\n355 20 355\n356 20 356\n357 20 357\n358 20 358\n359 20 359\n360 20 360\n361 20 361\n362 20 362\n363 20 363\n364 20 364\n365 20 365\n"
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"88\"\nassert solution(input) == \"10\"\nassert solution(input) == \"88\"\nassert solution(input) == \"88\"\nassert solution(input) == \"100\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '999'\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"9999700002.000\"\nassert solution(\"2 1\") == \"0.001\"\nassert solution(\"1 2 3 4\") == \"0.000\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"0.000\"\nassert solution(\"1 2 4\") == \"1.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '9999700002.000'\n\nassert solution(inp) == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 1\", \"1 1\"]) == \"0.000\"\nassert solution([\"1 2\", \"1 3\"]) == \"0.000\"\nassert solution([\"1 1\", \"1 1\"]) == \"1.000\"\nassert solution([\"1 2\", \"1 1\"]) == \"0.000\"\nassert solution([\"1 4\", \"1 1\"]) == \"0.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 0.000\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0.000\n"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '0.000'"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 20\", \"1 2 3 4 5 6 7 8 9 10 20\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 20\", \"1 2 3 4 5 6 7 8 9 10 20\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 20\", \"1 2 3 4 5 6 7 8 9 10 20\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 20\", \"1 2 3 4 5 6 7 8 9 10 20\") == \"2\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 20\", \"1 2 3 4 5 6 7 8 9 10 20\") == \"1\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1 6 3 4 2 3 6 4\") == \"3\"\nassert solution(\"4 1 6 3 4 2 3 6 4\") == \"Infinity\"\nassert solution(\"4 1 6 3 4 2 3 6 4\") == \"5\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 3 3 1 4 4\") == \"3\"\nassert solution(\"1 3 1\") == \"3\"\nassert solution(\"1 6 6\") == \"2\"\nassert solution(\"1 4 1\") == \"1\"\nassert solution(\"1 3 2\") == \"1\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 4 3 1 4 2') == '3'\nassert solution('0 0 0 0 1 0 0 0 0') == '1'\nassert solution('2 2 1 6') == '0'\nassert solution('0 0 0 1 0 0 0 0 0') == '1'\nassert solution('3 1 1 2 0 0 0 0') == '1'\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), 'Empty'\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(solution(input())) == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"1 6\") == \"1\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"000\"\nassert solution(stdin) == \"001\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"011\"\nassert solution(stdin) == \"111\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"impossible\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"000\"\nassert solution(stdin) == \"001\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"011\"\nassert solution(stdin) == \"100\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '000'\n\"\"\"\n\n\"\"\"\nhttps://leetcode.com/problems/number-of-bits-used/discuss/37759/Java-solution-with-detailed-explanation\n\"\"\"\nclass Solution:\n    def numberOfBits(self, n: int) -> int:\n        return str(bin(n).count('1'))"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == '0111'\nassert solution('111') == '00101010'\nassert solution('101') == '00101011'\n"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 'impossible'\n'''\n\nimport math"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin=input,\n    stdout=os.linesep.join([f\"{n:0>{n//2}}\" for n in range(1, len(stdin) + 1)])) == 'impossible'\n'''\n\nclass Solution:\n    def gray(self, n, P):\n        if n > 1:\n            if n == 2:\n                return '0' * (n - 1)\n            else:\n                return f'{n - 1}' + self.gray(n - 2, P)\n        else:\n            return '0'\n\n    def count(self, d, P):\n        if d < 0:\n            return 0\n        if d == 0:\n            return 1\n        if d > 0:\n            return self.count(d, P) + self.count(d - 1, P)\n"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\n\"\"\""
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\".#.###\") == \"####\"\nassert solution(\".#..#\") == \"######\"\nassert solution(\"..#..#\") == \"###.##.\"\nassert solution(\"#.#.#.#\") == \"####\"\nassert solution(\"#.#....\") == \".....\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0011101\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"13\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin.readline()) == \"1\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"9\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10') == '1'\nassert solution('90') == '10'\nassert solution('1090') == '10'\nassert solution('10090') == '10'\nassert solution('9001') == '1'\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\") == 10\nassert solution(\"1\") == 10\nassert solution(\"1234\") == 10\nassert solution(\"123456\") == 10\nassert solution(\"123456789\") == 9\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"hello\") == \"hello\"\nassert solution(\"1122334\") == \"1111\"\nassert solution(\"123456789\") == \"22\"\nassert solution(\"9999999999\") == \"9999999999\"\nassert solution
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\") == 10\nassert solution(\"3\") == 10\nassert solution(\"1,2,3,4,5,6,7,8,9\") == 10\nassert solution(\"1,2,3,4,5,6,8,9,10\") == 10\nassert solution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\") == 55\n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('7') == 7\nassert solution('12') == 10\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"The best numbers are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. The numbers of the best warriors are 4, 5, 6, 7, 8, 9, 10.\"\n    ) == \"The best numbers are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. The numbers of the best warriors are 4, 5, 6, 7, 8, 9, 10.\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 11 5 11 5 8 9 3 1 7 1 9 5 4 1 5 3 1 4 6 3 2 3 5 6 1 4 1 6 8 3 2 7 3 9 8 5 4 3 5 3 2 1 9 1 1 2 1 4 9 3 1 4 7 2 6 3 7 1 2 3 3 3 4 1 6 7 2 6 9 3 2 4 1 4 3 2 3 6 5 1 7 2 4 4 2 6 5 1 4 6 3 7 1 4 2 4 3 4 1 4 3 6 3 7 2 2 5 3 1 3 5 4 2 6 2 4 3 2 7 2 6 3 5 6 1 2 2 4 3 4 3 4 2 2 4 3 1 1 3 1 5 6 4 2 4 7 3 3 4 4 3 2 4 3 1 3 2 1 4 2 4 2 2 4 2 2 4 3 2 6 1 2 2 4 5 4 3 2 4 5 6 3 2 2 3 4 4 2 5 4 4 3 3 2 2 3 2 2 2 4 3 1 3 2 1 3 2 2 4 2 1 3 2 2 4 4 2 3 3 4 2 1 1 1 4 1 3 2 5 3 2 4 1 4 1 4 3 2 2 4 3 3 3 2 2 4 4 2 1 3 2 2 2 4 3 2 3 2 4 2 3 4 3 2 2 2 2 4 2 2 3 2 4 1 4 3 2 2 2 3 2 4 4 2 3 2 4 1 4 3 2 2 4 4 3 2 2 2 4 2 2 2 4 3 2 2 2 4 3 2 2 2 4 2 2 2 3 2 2 2 4 3 2 2 2 4 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"Hello World\") == \"Hello\"\nassert solution(\"He is not greedy\") == \"He is not greedy\"\nassert solution(\"abc\") == \"c\"\nassert solution(\"zz\") == \"z\"\nassert solution(\"aaaa\") == \"aaaa\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin),'solution() does not exist'\n\n\"\"\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('beginning') == '5'\nassert solution('velvet') == '11'\nassert solution('beginning') == '1 5'\nassert solution('velvet') == '1 6'\nassert solution('beginning') == '1 9'\n"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"17\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '17'\n"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin\n    ) == \"5\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"begin\n1 5\n4 8\n1 9\n\"\"\") == \"5\"\nassert solution(\"\"\"begin\n1 5\n4 8\n1 9\n\"\"\") == \"11\"\nassert solution(\"\"\"begin\n1 5\n4 8\n1 9\n\"\"\") == \"16\"\nassert solution(\"\"\"begin\nvelvet\n1 6\n1 9\n\"\"\") == \"16\"\nassert solution(\"\"\"begin\nbeginning\n1 5\n4 8\n1 9\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '11'\nassert solution(input()) == '16'\nassert solution(input()) == '12'\nassert solution(input()) == '12'\n"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"15\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '23'\nassert solution(input()) == '23'\nassert solution(input()) == '23'\nassert solution(input()) == '23'\nassert solution(input()) == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"23\"\nassert solution(stdin) == \"45\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"47\"\nassert solution(stdin) == \"83\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 4\",\n    [\n        [\n           [3, 1],\n           [2, 2]\n        ],\n        [\n           [1, 23],\n           [23, 17]\n        ]\n    ]\n) == 2\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"3 4\",\"3 1\",\"2 2\",\"1 1\",\"1 1\",\"1 1\"]) == \"2\"\nassert solution([\"2 3\",\"2 1\",\"2 1\",\"1 1\",\"1 1\",\"1 1\"]) == \"1\"\nassert solution([\"3 4\",\"3 1\",\"2 2\",\"1 2\",\"1 1\",\"1 1\"]) == \"1\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"123\"\n    ) == \"23\"\nassert solution(\n    \"23\"\n    ) == \"23\"\nassert solution(\n    \"23\"\n    ) == \"23\"\nassert solution(\n    \"123\"\n    ) == \"12\"\nassert solution(\n    \"23\"\n    ) == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3 1\",\"3 1\",\"2 2\",\"1 1\",\"2 2\",\"1 1\",\"1 1\"]) == \"23\"\nassert solution([\"2 1\",\"1 2\",\"2 1\"]) == \"23\"\nassert solution([\"1 1\",\"1 2\",\"2 1\",\"2 2\",\"2 2\"]) == \"1\"\nassert solution([\"1 2\",\"2 2\",\"2 1\",\"2 1\",\"1 1\",\"1 2\",\"1 1\"]) == \"3\"\nassert solution([\"2 2\",\"2 2\",\"1 1\",\"2 1\",\"2 2\",\"2 1\",\"2 1\",\"1 2\",\"1 1\",\"1 1\",\"2 1\",\"1 1\"]) == \"3\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sys.stdin.readline()) == '9.476048311178'"
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"9.476048311178\"\nassert solution(\"7\") == \"0.0000000000\"\nassert solution(\"6\") == \"7.000000000\"\nassert solution(\"3\") == \"4.000000000\"\nassert solution(\"0\") == \"0.0000000000\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '9.476048311178'\n\"\"\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1 0 0\") == \"9.476048311178\"\nassert solution(\"3 3 3 3\") == \"2.5\"\nassert solution(\"2 2 2 2\") == \"3.0\"\nassert solution(\"2 3 4 2\") == \"6.0\"\nassert solution(\"3 5 3 3\") == \"5.0\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '9.476048311178'\n\n\"\"\""
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5 6 10 100\"\n    ) == \"9.476048311178\"\n\n-----Sample Execution-----\npython3 solution.py\n9.476048311178\n"
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0.0000000000'\n\"\"\""
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"9.476048311178\""
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"6.476048311178\""
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"801\"\nassert solution(stdin) == \"908.857142857142857\"\nassert solution(stdin) == \"825\"\nassert solution(stdin) == \"25.00\"\nassert solution(stdin) == \"123456789.123456789.123456789.123456789.123456789.123456789\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"80.00\"\nassert solution(stdin) == \"80.00\"\nassert solution(stdin) == \"80.00\"\nassert solution(stdin) == \"80.00\"\nassert solution(stdin) == \"80.00\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0.0200000000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1.0\"\nassert solution(\"3\") == \"1.0\"\nassert solution(\"4\") == \"1.0\"\nassert solution(\"5\") == \"1.0\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"8.0000000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0 0\\n-2 0\\n0 0.20\\n\"\n) == \"8.0000000000\"\nassert solution(\n    \"5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n\"\n) == \"0.0200000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"8.0000000000\"\nassert solution(inp) == \"0.0400000\"\nassert solution(inp) == \"0.00000000\"\nassert solution(inp) == \"0.00000000\"\nassert solution(inp) == \"0.00000000\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Incorrect output\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop"
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\""
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\\n\") == \"2\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"1\\n1\\n\") == \"1\"\nassert solution(\"0\\n1\") == \"0\"\nassert solution(\"0\\n0\\n0\") == \"0\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"The function is not implemented!\"\n\nassert solution(stdin), \"The function is not implemented!\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\", \"incorrect\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2 10 10 10\") == \"15.0\"\nassert solution(\"2 2 2 10\") == \"10.0\"\nassert solution(\"2 2 4 10\") == \"1.3333333333333333\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    '''\n3 2 3\n1 2 3\n1 3 2\n2 2 4\n2 2 3\n'''\n
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '10.00000'\n\nInput 1:\n3 3 2\n1 2 3\nSample Output 1:\n10.00000\n\"\"\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"3.3333333333333333\"\nassert solution(\"1 4\") == \"1.3333333333333333\"\nassert solution(\"1 5\") == \"1.3333333333333333\"\nassert solution(\"1 6\") == \"1.3333333333333333\"\nassert solution(\"1 7\") == \"1.3333333333333333\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 11 2\") == \"20\"\nassert solution(\"4 11 4\") == \"20\"\nassert solution(\"10 10 10 10\") == \"20.000000000\""
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"9\"\n\npass\n\n-----Constraints-----\n1 <= stdin.length <= 100\n-1000 <= n, c_1, \\ldots, c_n <= 1000\n1 <= g <= 200\n1 <= t <= 100\n\nsubtask 1.\n\"\"\"\n\n\nclass Solution:\n    def expected(self, n: int, g: int, t: int) -> str:\n        pass\n"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input().strip().split()) == \"10\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '30.0'"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 15\n\"\"\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5.0\"\nassert solution(stdin) == \"5.0\"\nassert solution(stdin) == \"7.3333333333333333\"\nassert solution(stdin) == \"1.0\"\nassert solution(stdin) == \"1.0\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == answer\n\n\"\"\""
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"5\") == 5\nassert solution(\"123456789\") == 123456789"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == str(int(str(int(str(int(input())**(1/2)))))//10**183230)\nassert solution(input()) == str(int(str(int(str(int(input())**(1/2)))))//10**183230)\nassert solution(input()) == str(int(str(int(str(int(input())**(1/2)))))//10**183230)\nassert solution(input()) == str(int(str(int(input())**(1/2)))))\nassert solution(input()) == str(int(str(int(input())**(1/2)))))\n\n-----\nBinary exponentiation\n\nGiven a positive integer $n$, the $n^{2^{1}}$ is a special case of the square root of $n$ by the same algebra. For example, $2^{1} \\cdot \\ldots \\cdot 1$ is a special case of $2^{2^{1}} \\cdots \\cdot 1$ and $2^{0} \\cdot \\ldots \\cdot 1$ is a special case of $2^{1} \\cdots \\cdot 1$. For example, $1^{3^{2}} \\cdot \\ldots \\cdot 1$ is a special case of $1^{3^{1}} \\cdots \\cdot 1$ and $1^{3^{0}} \\cdots \\cdot 1$ is a special case of $1^{3^{0}} \\cdots \\cdot 1$ which are the special cases of $2^{2^{2}} \\cdots \\cdot 1$.\n\nFor example, $1^{3^{2}} \\cdot \\ldots \\cdot 1$ is a special case of $1^{3^{1}} \\cdots \\cdot 1$ and $1^{3^{0}} \\cdots \\cdot 1$ is a special case of $1^{3^{0}} \\cdots \\cdot 1$.\n\nGiven $n$ and $m$ are non-negative integers, the program calculates $n^{2^{1}} \\cdot m^{2^{1}}$ and $n^{2^{1}} \\cdot m^{2^{2}}$. For example, $2^{1} \\cdot \\ldots \\cdot 2 $ is a special case of $2^{2^{1}} \\cdot 2 $ and $2^{1} \\cdot 2 \\cdots \\cdot 2$ is a special case of $2^{1} \\cdots \\cdot 2 \\cdots \\cdot 2$ (which is a special case of $2^{1} \\cdots \\cdots \\cdots \\cdots \\cdots $), but not a general case of $2^{2^{1}} \\cdots \\cdots \\cdots \\cdots$.\n\nFor example, $2^{1} \\cdot 2 \\cdots \\cdots \\cdots$ is a special case of $2^{1} \\cdots \\cdots \\cdots$ but not a general case of $2^{2^{1}} \\cdots \\cdots \\cdots$.\n\n-----\nDigit exponentiation\n\nGiven $n$ and $m$ as the coefficients of a $n^{2^{1}}$ and $n^{2^{2}}$, the program calculates $n^{2^{1}} \\cdot m^{2^{1}}$ and $n^{2^{2}} \\cdot m^{2^{2}}$ (which is a special case of $n^{2^{1}} \\cdots \\cdots \\cdots$).\n\nFor example, $2^{1} \\cdot 2 \\cdots \\cdots \\cdots$ is a special case of $2^{1} \\cdots \\cdots \\cdots$ but not a general case of $2^{2^{1}} \\cdots \\cdots \\cdots$ (which is a special case of $2^{2^{1}} \\cdots \\cdots \\cdots$).\n\nFor example, $1^{3^{2}} \\cdot \\ldots \\cdot 1$ is a special case of $1^{3^{0}} \\cdots \\cdots \\cdots$ (which is a special case of $1^{3^{0}} \\cdots \\cdots \\cdots$) but not a general case of $1^{3^{1}} \\cdots \\cdots \\cdots$ (which is a special case of $1^{3^{1}} \\cdots \\cdots \\cdots$).\n\nFor example, $1^{3^{2}} \\cdot \\ldots \\cdot 1$ is not a special case of $1^{3^{2}} \\cdots \\cdots \\cdots$ but not a general case of $1^{3^{2}} \\cdots \\cdots \\cdots$ (which is a special case of $1^{3^{2}} \\cdots \\cdots \\cdots$).\n\nFor example, $1^{3^{1}} \\cdot \\ldots \\cdot 1$ is a special case of $1^{3^{0}} \\cdots \\cdots \\cdots$ but not a general case of $1^{3^{0}} \\cdots \\cdots \\cdots$ (which is a special case of $1^{3^{0}} \\cdots \\cdots \\cdots$).\n\nFor example, $1^{3^{1}} \\cdot \\ldots \\cdot 1$ is a special case of $1^{3^{1}} \\cdots \\cdots \\cdots$ (which is a special case of $1^{3^{1}} \\cdots \\cdots \\cdots$) but not a general case of $1^{3^{0}} \\cdots \\cdots \\cdots$ (which is a special case of $1^{3^{0}} \\cdots \\cdots \\cdots$).\n\nGiven $n$ and $m$ as the coefficients of a $n^{2^{1}}$ and $n^{2^{2}}$, the program calculates $n^{2^{1}} \\cdot m^{2^{2}}$ and $n^{2^{2}} \\cdot m^{2^{1}}$ (which is a special case of $n^{2^{1}} \\cdots \\cdots \\cdots$), but not a general case of $n^{2^{2}} \\cdots \\cdots \\cdots$ (which is a special case of $n^{2^{2}} \\cdots \\cdots \\cdots$).\n\nFor example, $2^{1} \\cdot 2 \\cdots \\cdots \\cdots$ is a special case of $2^{1} \\cdots \\cdots \\cdots$ but not a general case of $2^{2^{1}} \\cdots \\cdots \\cdots$ (which is a special case of $2^{2^{1}} \\cdots \\cdots \\cdots$"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"16317634\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test_case) == \"2\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '16317634'\nassert solution(input()) == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 5 7 9 12\"), \"9\\n\"\nassert solution(\"2 2 4\"), \"2\\n\"\nassert solution(\"2\"), \"2\\n\"\nassert solution(\"\"), \"0\\n\"\nassert solution(\"12\"), \"1\\n\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"16317634\"\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2, 3) == 4\nassert solution(5, 3) == 15\n"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\", \"The solution to the problem must be empty\"\nassert solution(\"1\") == \"\", \"The solution to the problem must be empty\"\nassert solution(\"5\") == \"2737\", \"The solution to the problem must be empty\"\nassert solution(\"6\") == \"\", \"The solution to the problem must be empty\"\nassert solution(\"123456789\") == \"16317634\", \"The solution to the problem must be empty\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(f) == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 4 0 0 4 1 0 0 0 2 1 1 0 1 1 0 1 0 1 0 0 1 0 2 0 2 0 0 1 0 2 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 0 1 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 1 1 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, [5,3,2,1,4]) == \"4\"\nassert solution(5, [1, 1, 1, 1, 1]) == \"5\"\nassert solution(5, [4,3,2,1,0]) == \"0\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 7 1 2 2\n1 2 2\n1 1 1\n2 2 3\n2 2 3\n1 2 1\n2 1 2\n2 1 2\n1 2 1\n1 1 1\n0 1 3\n2 2 4\n2 2 4\n0 2 5\n1 2 6\n2 1 6\n0 3 2\n1 3 1\n0 4 4\n0 3 4\n0 4 4\n1 1 1\n2 2 3\n1 2 1\n2 2 3\n1 2 1\n1 1 1\n0 2 3\n1 2 2\n2 1 2\n1 1 2\n2 1 1\n0 3 3\n1 3 1\n1 0 0\n1 0 0\n0 2 2\n1 2 1\n2 2 1\n2 1 2\n1 2 2\n1 1 1\n0 1 2\n0 1 0\n1 0 2\n1 1 2\n1 0 2\n1 1 2\n1 0 2\n1 2 1\n0 2 2\n1 2 1\n1 1 1\n2 1 1\n1 0 0\n2 0 0\n1 1 0\n1 2 1\n2 2 1\n1 1 1\n1 0 0\n0 2 2\n0 1 0\n1 2 1\n1 2 1\n0 1 2\n0 1 1\n1 1 2\n0 2 0\n1 1 1\n1 1 2\n1 0 0\n1 2 0\n2 0 0\n1 1 0\n0 2 2\n1 1 1\n1 2 1\n1 2 1\n0 2 0\n2 1 1\n1 1 1\n2 0 0\n1 1 2\n1 1 2\n2 1 1\n1 1 1\n1 1 1\n0 2 0\n2 0 0\n1 1 0\n1 2 1\n0 1 0\n1 1 0\n1 1 0\n2 1 1\n0 2 0\n1 1 2\n1 0 0\n0 2 0\n1 0 0\n0 1 2\n1 1 1\n2 0 0\n1 1 1\n1 1 0\n1 2 1\n2 0 1\n1 0 1\n1 1 0\n2 1 0\n1 1 0\n2 0 0\n1 0 0\n2 1 2\n1 1 1\n1 1 0\n0 2 0\n0 1 0\n2 0 1\n0 1 0\n1 1 0\n1 1 1\n1 1 2\n2 0 0\n1 1 0\n1 0 0\n2 0 0\n1 1 0\n1 2 0\n0 0 0\n0 1 0\n0 0 1\n1 0 0\n1 1 0\n1 1 0\n1 0 0\n0 1 0\n0 0 0\n1 0 0\n1 0 0\n0 0 1\n0 0 0\n0 1 0\n1 0 1\n1 1 0\n1 1 0\n0 0 0\n1 0 0\n1 1 1\n0 1 1\n1 1 0\n1 1 0\n1 1 0\n1 0 0\n1 1 0\n2 1 0\n1 1 0\n1 0 0\n1 1 0\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n0 0 0\n1 1 1\n1 0 0\n1 0 1\n0 1 1\n0 0 0\n1 0 0\n0 0 0\n0 0 0\n1 1 0\n1 1 1\n1 1 1\n1 0 0\n0 0 0\n1 1 0\n0 0 0\n1 0 1\n1 0 0\n0 0 0\n1 0 0\n0 0 1\n0 1 1\n1 1 1\n1 0 1\n1 0 0\n1 0 1\n1 0 1\n1 1 0\n1 1 0\n0 0 0\n1 0 1\n1 0 0\n0 1 0\n1 0 1\n1 1 1\n0 1 0\n1 0 0\n0 0 0\n0 0 0\n1 0 0\n1 1 0\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n1 1 1\n0 0 0\n1 1 1\n0 0 0\n1 1 0\n1 1 0\n0 1 0\n1 0 0\n0 0 0\n0 0 1\n1 1 0\n1 0 0\n1 1 1\n1 1 1\n1 0 0\n0 0 0\n1 0 0\n1 0 0\n1 1 0\n0 0 0\n0 0 0\n0 0 0\n0 1 1\n0 1 0\n1 1 1\n0 1 0\n0 0 0\n1 0 0\n0 1 0\n0 0 0\n1 1 0\n0 0 0\n0 0 0\n1 0 0\n1 1 0\n1 1 1\n1 0 1\n0 0 0\n0 0 0\n1 0 1\n1 0 1\n1 0 0\n0 0 0\n0 0 0\n1 0 0\n1 0 0\n1 0 0\n1 1 0\n1 0 0\n0 0 0\n0 0 1\n0 1 1\n1 0 0\n0 0 0\n0 0 0\n1 1 1\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n1 0 0\n1 0 0\n0 0 0\n0 0 0\n1 0 0\n1 0 1\n0 0 0\n1 0 0\n0 0 0\n0 0 0\n1 0 1\n0 1 0\n0 0 0\n0 0 0\n0 0 0\n0 0 1\n0 0 0\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n1 1 0\n1 1 0\n1 0 0\n1 0 0\n0 0 0\n0 1 0\n0 0 0\n0 0 1\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 0\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n1 0 0\n0 0 0\n0 0 0\n0 0 1\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 0\n1 0 0\n0 0 0\n0"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == str(max(0, int(inp[0])) + int(inp[1]))\n"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 5\") == \"6\"\nassert solution(\"2 2 2 3\") == \"6\"\nassert solution(\"2 1 0 3\") == \"6\"\nassert solution(\"2 2 2 0\") == \"4\"\nassert solution(\"2 2 0 4\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n'''\n\nfrom collections import deque"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '3'\nassert solution(input, -5, 10, -1, 100, -10, -1, 100) == '3'\nassert solution(input, -5, 10, -1, 100, -10, -1, -10, 100) == '3'\nassert solution(input, -5, 10, -1, 100, -10, -1, -10, -100) == '3'\nassert solution(input, -5, 10, -1, -5, -10, -1, 10, -20, 100) == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5 1 10 10\",\n    \"8 8\",\n    \"5 1\",\n    \"4 6\",\n    \"4 7\",\n    \"7 9\",\n    \"null\",\n    \"null\",\n    \"null\",\n    \"null\",\n    \"null\",\n    null,\n    \"null\",\n    \"null\"\n) == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"error\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"The output must be a string of exactly two integers\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\n        [\"3\",\"2\",\"3\",\"4\",\"2\",\"2\",\"1\"],\n        [\"2\",\"2\",\"1\",\"2\",\"2\",\"1\",\"2\"],\n        [\"1\",\"2\",\"3\",\"1\",\"2\",\"1\",\"1\"],\n        [\"2\",\"2\",\"1\",\"3\",\"1\",\"1\",\"2\"],\n        [\"2\",\"1\",\"3\",\"2\",\"1\",\"3\",\"1\"],\n        [\"1\",\"2\",\"1\",\"2\",\"3\",\"2\",\"1\"],\n        [\"2\",\"2\",\"3\",\"2\",\"1\",\"1\",\"2\"],\n    ]) == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"The function does not return a valid output.\"\n\n\"\"\""
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n                   \n            input=\n                \"ABC\"\n            ) == 2\n    assert solution(\n                     \n                input=\n                \"ABBBAAAA\"\n            ) == 3\n    assert solution(\n                     \n                input=\n                \"BBBCCCBB\"\n            ) == 1\n"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('A') == 3\nassert solution('B') == 2\nassert solution('C') == 1\nassert solution('D') == 0\n"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 7\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \n        letters = ['A','B','C']\n        n = len(letters)\n        res = 0\n        \n        def check(l1,l2,l3):\n            return (abs(ord(l1) - ord(l2)) == abs(ord(l3) - ord(l1)))\n        \n        for i in range(0,n):\n            for j in range(i+1,n):\n                for k in range(j+1,n):\n                    if check(letters[i],letters[j],letters[k]):\n                        res += 1\n        \n        return res\n\"\"\""
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n\"\"\"\nclass Solution:\n    def rotation(self, string: str) -> int:\n        \n        \n        res = 0\n        \n        for i in range(len(string)):\n            if i == 0:\n                res += 1\n                string = string[1:]\n                continue\n            \n            if string[i] == string[i-1]:\n                pass\n            else:\n                res += 1\n                string = string[:i] + string[i-1] + string[i]\n                continue\n            \n            \n        \n        return res"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 12"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution( \"AAAB\" ) == 3\nassert solution( \"BABC\" ) == 3\nassert solution( \"BCCAA\" ) == 2\nassert solution( \"ABA\" ) == -1\nassert solution( \"ABABB\" ) == -1\n"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('AAAAABBBBCCCCCAAABBBBB') == 3\n"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"A\", [\"A\", \"B\", \"C\"]) == 3\nassert solution(\"B\", [\"B\", \"C\", \"A\"]) == 3\nassert solution(\"B\", [\"A\", \"B\", \"C\", \"D\", \"E\"]) == 5\nassert solution(\"B\", [\"B\", \"C\", \"A\", \"D\", \"E\"]) == 5\nassert solution(\"C\", [\"C\", \"A\", \"B\", \"D\", \"E\"]) == 5\n"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['ABC', 'ABC', 'ABC']) == 3\nassert solution(['ABBB', 'BBBC', 'CCCC']) == 2\nassert solution(['A', 'B', 'A']) == 1\nassert solution(['A', 'B', 'A', 'B']) == -1\n"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ABAB') == 'BA'\nassert solution('ABABA') == 'AABA'\nassert solution('ABABABBBBB') == 'AABA'\nassert solution('ABABABBABA') == 'AABABBA'\nassert solution('ABABABAABBAABBBAABBAABBBBBBBAAA') == 'AABBAABBAABB'\n"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"A\",\"B\",\"AA\",\"BBB\",\"AAA\",\"BBB\",\"AAABA\",\"AAABBA\"]) == \"AAABBA\"\nassert solution([\"A\",\"AA\",\"AAAB\",\"AAABAA\",\"AABBB\",\"AABBBA\",\"AAABA\",\"AAABBA\"]) == \"AAABBA\"\nassert solution([\"A\",\"AA\",\"AAAB\",\"AAABBB\",\"AABBBA\",\"AABBBA\",\"AABBBA\",\"AABBBA\"]) == \"AAABBA\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"1\"\nassert solution(4) == \"2\"\nassert solution(0) == \"1\"\nassert solution(8) == \"2\"\nassert solution(5) == \"2\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    '1389694364676587751749076729401377'\n) == '8'"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 12, \"Test Case Failed\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '3'"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 1, '0'\nassert solution(1) == 0, '1'\nassert solution(2) == 0, '0'\nassert solution(3) == 0, '1'\nassert solution(4) == 0, '0'\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1.690510645362748\"\nassert solution(input()) == \"2.1195261495641489\"\nassert solution(input()) == \"2.5137385097040904\"\nassert solution(input()) == \"2.5372553144845708\"\nassert solution(input()) == \"2.0471050065363634\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"10\",\"2\",\"1\"]) == \"1.1\"\nassert solution([\"10\",\"2\",\"2\"]) == \"1.1\"\nassert solution([\"10\",\"3\",\"1\"]) == \"0.964\"\nassert solution([\"10\",\"3\",\"2\"]) == \"0.964\"\nassert solution([\"10\",\"4\",\"1\"]) == \"1.0\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 5 1\") == \"1\"\nassert solution(\"5 2 3\") == \"1.5\"\nassert solution(\"5 4 4\") == \"0.95\"\nassert solution(\"5 5 4\") == \"0.99\"\nassert solution(\"5 3 5\") == \"1.03\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0.1'\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"0.1909090909\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"0.1909090909\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"0.1909090909\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 0.1909090909\nassert solution(5) == 0.101251012\n\"\"\""
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 4) == 3.0, \"incorrect\"\nassert solution(3, 1) == 0.0, \"incorrect\"\nassert solution(100, 100) == 10.0, \"incorrect\"\nassert solution(100, 1) == 0.0, \"incorrect\"\nassert solution(10, 1000) == 10.0, \"incorrect\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"100 10 2 1\", \"100 10 2 2\", \"100 10 2 1\"]) == \"0.1909090909\"\nassert solution([\"100 10 2 2\", \"100 10 2 1\", \"100 10 2 1\"]) == \"0.1\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\") == \"0.1\"\nassert solution(\"2 3 4\") == \"0.1909090909\"\nassert solution(\"5 6 9\") == \"0.25\"\nassert solution(\"2 2 2\") == \"0.5\"\nassert solution(\"4 2 3 4\") == \"0.25\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ABABABcABABAbAbab') == '1'\nassert solution('ABABABcABABAbAbab') == '2'\nassert solution('ABABABcABABAbAbab') == '3'\nassert solution('ABABABcABABAbAbab') == '4'\nassert solution('ABABABcABABAbAbab') == '5'\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ABACABABAAB\"), \"FAILED\"\nassert solution(\"AAABBAAB\"), \"FAILED\"\nassert solution(\"AABAAB\"), \"FAILED\"\nassert solution(\"ABAABABAAB\"), \"FAILED\"\nassert solution(\"BBAAB\"), \"FAILED\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"1\"\nassert solution(\"ABABABcABABAbAbab\") == \"1\"\nassert solution(\"ABABABcABABAbAbab\") == \"1\"\nassert solution(\"ABABABcABABAbAbab\") == \"1\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('ABAB'), \"ABAB\"\nassert solution('AAA'), \"AAA\"\nassert solution('ABABAB'), \"BABAB\"\nassert solution('ABABA'), \"ABA\"\nassert solution('BABA'), \"BAB\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"ABAB\", \"ABAB\", \"ABAB\", \"ABAB\", \"ABAB\", \"ABAB\"]) == \"1\"\nassert solution([\"Ab\", \"ABA\", \"AA\", \"AB\", \"ABA\", \"BA\"]) == \"3\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(open('input.txt', 'r').readline()) == '2'\nassert solution(open('input.txt', 'r').readline().replace(' ', '')) == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\n\"\"\""
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ABAB\") == \"ABA\"\nassert solution(\"AABA\") == \"AAB\"\nassert solution(\"AABABA\") == \"AABABA\"\nassert solution(\"AB\") == \"AB\"\nassert solution(\"ABAB\") == \"ABA\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"0 0\n1 0\n1 1\n1 2\n0 1\n0 1\n0 2\n0 3\n0 4\n\"\"\") == '3'\nassert solution(\"\"\"0 0\n0 1\n1 1\n1 2\n0 1\n1 1\n1 2\n0 2\n0 3\n0 4\n\"\"\") == '5'\nassert solution(\"\"\"0 0\n0 0\n1 0\n1 0\n0 1\n0 2\n0 3\n0 4\n0 5\n\"\"\") == '1'\nassert solution(\"\"\"0 0\n0 0\n1 0\n1 1\n1 2\n0 1\n0 2\n0 3\n0 4\n0 5\n\"\"\") == '4'\nassert solution(\"\"\"0 0\n0 0\n1 0\n1 0\n0 1\n1 1\n0 2\n0 3\n0 4\n0 5\n\"\"\") == '1'\n"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 5 4 5 4\") == 6\nassert solution(\"1 1 1 1 1\") == 1\nassert solution(\"0 0 0 0 0\") == 1\nassert solution(\"1 0 1 1 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 1 3\") == \"2\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"0 1\") == \"1\"\n\"\"\"\nclass Solution:\n    def findNumberOfLargestTriangle(self, A: List[int]) -> int:\n        max_area = 0\n        for i in range(len(A)):\n            for j in range(i + 1):\n                k = A[i] + A[j]\n                if A[j] >= A[i]:\n                    break\n                else:\n                    if max_area < k:\n                        max_area = k\n        return max_area\n                "
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\nSample Input:\n5\n3 1 5\n0 0 1\n0 0 0\n1 0 0\n2 0 0\nSample Output:\n5\n"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"./sol/input.txt\") == \"3\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 0\n\nSample Input:\n2\n1 2\n3 2\nSample Output:\n1\n\"\"\""
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\"5\",\"0\",\"5\",\"1\",\"0\"]) == \"2\"\nassert solution(\n    [\"1\",\"0\",\"1\",\"1\"]) == \"2\"\nassert solution(\n    [\"1\",\"0\",\"0\",\"1\",\"1\",\"1\",\"0\"]) == \"1\"\nassert solution(\n    [\"2\",\"0\",\"1\",\"1\",\"1\",\"0\",\"0\"]) == \"2\"\nassert solution(\n    [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]) == \"1\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3\",\"0\",\"1\",\"0\"]) == \"0\"\nassert solution([\"2\",\"0\",\"1\",\"0\"]) == \"0\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"0\"]) == \"1\"\nassert solution([\"0\",\"1\",\"1\",\"0\",\"1\",\"0\"]) == \"0\"\nassert solution([\"0\",\"1\",\"1\",\"0\",\"0\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n\n'''"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 1\nassert solution(input()) == 3\n"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1 4 5 3 -2\") == \"7\"\nassert solution(\"10 1 2 1 8 -6 1\") == \"2\"\nassert solution(\"0 1 2 1 8 -6 1\") == \"1\"\nassert solution(\"1 4 3 1 -6\") == \"1\"\nassert solution(\"-1000 1 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 8 8 8\") == \"1\"\nassert solution(\"3 4 1 4 5 3 -2\") == \"1\"\nassert solution(\"3 -2 2 6 -1 -1 0\") == \"3\"\nassert solution(\"-1 0 1 2 6 -6 1 -1 -1 0\") == \"3\"\nassert solution(\"-1 -1 -1 0 1 -1 0 -1 -1 -1 -1\") == \"3\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'P1'\n\nSample Input:\n3 3\n1 2\n3 5\n1 0 0 0\nSample Output:\n2\n\"\"\"\n\n\n\nfrom sys import stdin\n\nn_, t, p = map(int, stdin.readline().split())"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"5\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '22'"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"22\"\nassert solution(stdin) == \"24\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 -2 -6 -1 2\") == \"1\"\nassert solution(\"0 3 3 1 4 5 -6 1 0\") == \"22\"\nassert solution(\"-1000 -1000 -1000 -1000 -1000 -1000 0\") == \"1\"\n\nExplanation:\n1. The smallest possible value of the number of planets is $10^5$\n2. The smallest possible value of the $x$ and $y$ location of the planet is $0$\n3. The smallest possible value of the $v_x$ and $v_y$ location is $-1000$\n4. All planets in the system have a mass of $10^5$\n5. All planets in the system have a location of $0$\n6. All planets in the system have a velocity of $-1000$\n7. The planets are all in a single step\n8. The smallest possible value of the initial location is $-1000$\n9. The smallest possible value of the initial velocity is $0$\n10. The smallest possible value of the velocity is $-1000$\n11. The smallest possible value of the location is $-1000$\n12. The smallest possible value of the velocity is $-1000$\n\nInput\nThe first line contains an integer $n$ denoting the number of planets.\nThe next $n$ lines contain $n$ integers $n_ x$ $n_ y$ $n_ z$\n\nOutput\nPrint the number of planets in the system after no more collisions can occur.\n\nConstraints\n1 <= $n$ <= 100\n\nExample:\nInput:\n2 2 10 4\n10 1 2 1 8 -6 1\nSample Output:\n1\n1\n10\n8\n5\n-2\n12\nExplanation:\n1. The smallest possible value of the number of planets is $10^5$\n2. The smallest possible value of the $x$ and $y$ location of the planet is $0$\n3. The smallest possible value of the $v_x$ and $v_y$ location is $-1000$\n4. All planets in the system have a mass of $10^5$\n5. All planets in the system have a location of $0$\n6. All planets in the system have a velocity of $-1000$\n7. The planets are all in a single step\n8. The smallest possible value of the initial location is $-1000$\n9. The smallest possible value of the initial velocity is $-1000$\n10. The smallest possible value of the location is $-1000$\n11. The smallest possible value of the velocity is $-1000$\n12. The smallest possible value of the location is $-1000$\nExplanation:\n0\n1\n10\n8\n5\n-2\n12\n\"\"\""
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    '3 2 1 4 1 5 3 6 1'\n), ['1', '1', '2', '3', '3', '3', '3', '4', '5', '5', '5', '6', '6', '6', '6', '6', '6']\nSample Input:\n1 2\n1 2\n1 3\n1 4\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\nSample Output:\n1\n4\n"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        input()\n    ) == '4'\n\"\"\"\n\nimport sys\nimport math\n\nn, m = map(int, input().split())\nq = int(sys.stdin.readline())\n\nfor i in range(q):\n    s, t = map(int, input().split())\n    print(math.gcd(s-t, n))"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n1 2\n3 4\n3 4\n4\n4\n\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(string) == \"1\"\nstring = input().split(' ')\ns = int(string[0])\nt = int(string[1])\nq = int(string[2])\nq_days = q\ntotal_cost = 0\nwhile q_days >= q:\n    q_days -= q_days // (2**q)\n    total_cost += q_days\n\nprint(total_cost)\n"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2 4\") == \"1\"\nassert solution(\"2 3 5\") == \"1 2\"\nassert solution(\"2 4 1\") == \"1 3\"\nassert solution(\"2 4 3\") == \"1 4\"\nassert solution(\"1 2 3 4\") == \"1 2\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(    1    ) == 1\nassert solution(    2    ) == 3\nassert solution(    4    ) == 2\nassert solution(    3    ) == 2\nassert solution(    5    ) == 2\n"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 1\") == \"1\"\nassert solution(\"1 2 3 1 3 4\") == \"2\"\nassert solution(\"1 2 3 4 1\") == \"1\"\nassert solution(\"1 2 3 4 1 2 4\") == \"1\"\nassert solution(\"1 2 3 4 1 2 4 3\") == \"1\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 5 4 3 6\""
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 5 4 3 2 6\"\n    ) == \"1 2 5 4 3 6\"\n    \nassert solution(\n    \"1 6 4 3 2\"\n    ) == \"1 3 6 4 2\"\n    \nassert solution(\n    \"2 5 4 3 2 6\"\n    ) == \"2 3 5 4 6\"\n    \n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3 4 2 6\""
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 2 5 4 3 6\"\nassert solution(stdin) == \"1 2 4 3 5 6\"\nassert solution(stdin) == \"1 2 4 3 5 6\"\nassert solution(stdin) == \"1 3 4 5 6\"\nassert solution(stdin) == \"1 2 4 6 5 3\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1 5 4 3 2 6\"\n    ) == \"2\"\nassert solution(\n    \"1 2 5 4 3 6\"\n    ) == \"4\"\nassert solution(\n    \"1 4 3 2 6\"\n    ) == \"1\"\nassert solution(\n    \"1 5 4 3 2 6\"\n    ) == \"6\"\nassert solution(\n    \"1 2 3 4 5 6\"\n    ) == \"6\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, [1, 5, 4, 3, 2, 6]) == '1 2 3 4 5 6'\nassert solution(2, [1, 5, 4, 3, 6]) == '1 4 2 5 3 6'\nassert solution(6, [1, 2, 3, 4, 5, 6]) == '1 4 2 6 5 3 6'"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1 2 4 3 5 6'\nassert solution(stdin) == '1 5 4 3 2 6'\nassert solution(stdin) == '1 2 5 4 3 6'\n"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 2 3 4 5 6', \"Wrong input\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('a' +'' * 5 + 'b') == 'ab'\nassert solution('a' +'' * 4 + 'b') == 'bab'\nassert solution('a' +'' * 4 + 'b') == 'ba'\nassert solution('a' +'' * 5 + 'b') == 'bbb'\nassert solution('a' +'' * 5 + 'b') == 'bbba'\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"60\"\nassert solution(stdin) == \"70\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"80\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 60, \"incorrect return\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"3\", \"4\"]) == \"1\"\nassert solution([\"3\", \"3\", \"3\", \"3\", \"3\"]) == \"1\"\nassert solution([\"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\"]) == \"1\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 1, 3, 1) == 30\nassert solution(3, 2, 3, 1) == 70\nassert solution(1, 1, 3, 2) == 100\nassert solution(2, 1, 2, 3) == 10\nassert solution(1, 2, 2, 1) == -1\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4 2 3 1 1\") == \"50\", \"First argument should be a string\"\nassert solution(\"2 4 2 3 1 1\") == \"200\", \"Second argument should be a string\"\nassert solution(\"3 2 1 1 1 1\") == \"10\", \"Third argument should be a string\"\nassert solution(\"3 2 1 1 1 1\") == \"0\", \"Fourth argument should be a string\"\nassert solution(\"3 2 1 1 1 1\") == \"0\", \"Fifth argument should be a string\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 3, 2, 3, 1, 10, 2, 20, 30, 40) == 60\nassert solution(3, 3, 2, 3, 1, 10, 2, 20, 30, 40) == -1\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 60, \"Incorrect output\"\n'''"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3\", \"1\", \"2\", \"3\", \"4\", \"2\"]) == \"120\"\nassert solution([\"3\", \"1\", \"2\", \"3\", \"4\", \"2\"]) == \"120\"\nassert solution([\"3\", \"1\", \"2\", \"3\", \"4\", \"2\"]) == \"120\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"3\", \"4\", \"3\", \"4\", \"3\", \"4\", \"3\", \"4\", \"3\", \"4\", \"3\"]) == \"120\"\nassert solution([\"3\", \"1\", \"2\", \"3\", \"4\", \"2\"]) == \"120\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\", \"1\"]) == \"60\"\nassert solution([\"3\", \"2\"]) == \"60\"\nassert solution([\"3\", \"2\", \"1\"]) == \"60\"\nassert solution([\"3\", \"2\", \"3\"]) == \"60\"\nassert solution([\"3\", \"3\", \"2\"]) == \"60\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == \"Case #1: 1\"\nassert solution(3) == \"Case #2: 2\"\nassert solution(5) == \"Case #3: 2\"\nassert solution(3) == \"Case #4: 2\"\nassert solution(3) == \"Case #5: 1\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"Case #1: 1\"\nassert solution(\"5\") == \"Case #2: 2\"\nassert solution(\"2 3\") == \"Case #1: 2\"\nassert solution(\"1\") == \"Case #2: 1\"\nassert solution(\"2 3\") == \"Case #2: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3' == '3') == 'Case #1: 1'\nassert solution('2' == '4') == 'Case #1: 2'\nassert solution('5' == '10') == 'Case #1: 4'\nassert solution('5' == '15') == 'Case #1: 10'\nassert solution('5' == '5') == 'Case #1: 5'\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == \"Case #1: 1\"\nassert solution(2) == \"Case #2: 2\"\nassert solution(3) == \"Case #3: 3\"\nassert solution(4) == \"Case #4: 3\"\nassert solution(5) == \"Case #5: 1\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 10000 0 0 0 3 5000 0 0\") == \"Case #1: 1\"\nassert solution(\"2 3 10000 0 0 0 3 5000 0 1000\") == \"Case #1: 2\"\nassert solution(\"2 3 10000 0 0 0 3 5000 0 2000\") == \"Case #1: 2\"\nassert solution(\"2 3 10000 0 0 0 3 5000 0 4000\") == \"Case #1: 2\"\nassert solution(\"2 3 10000 0 0 0 3 5000 0 5000\") == \"Case #1: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, [5, 5, 5]) == \"1\"\nassert solution(5, [1, 2, 3]) == \"2\"\nassert solution(5, [4, 3, 4]) == \"3\"\nassert solution(5, [1, 1, 1, 1, 1]) == \"4\"\nassert solution(5, [0, 0, 0, 0, 0]) == \"5\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 0 0 1 0 0 0 0 0 0 0 0 1\") == \"Case #1: 1\"\nassert solution(\"3 3 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"Case #2: 2\"\nassert solution(\"3 5 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"Case #3: 2\"\nassert solution(\"4 1 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"Case #4: 2\"\nassert solution(\"1 1 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"Case #5: 0\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == str(max(p) for p in [list(map(int, input().split())) for i in range(int(inp))]))"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, [\"4\", \"5\", \"2\"]) == \"Case #1: 1\"\nassert solution(3, [\"1\", \"3\", \"2\", \"3\"]) == \"Case #2: 2\"\nassert solution(1, [\"1\", \"1\", \"1\", \"1\"]) == \"Case #3: 1\"\nassert solution(5, [\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"Case #3: 1\"\nassert solution(3, [\"1\", \"2\", \"2\", \"2\", \"1\"]) == \"Case #3: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), 'The input file is invalid.'\nassert len(stdin) == 2, 'The input file is invalid.'\n\nassert len(stdin) == 3, 'The input file is invalid.'\nassert all([x in [0, 10000, 0, 10000, 0, 10000] for x in stdin]), 'The input file is invalid.'\n\nassert len(stdin[0]) in [3, 6, 9, 10, 12, 15], 'The input file is invalid.'\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"{H_2 O}\") == \"{H_2 O}\", \"One molecule of $\\rm H_2$ and two molecules of $\\rm O_2$ yield one molecule of $\\rm H_2 O$. Solution does not match\"\nassert solution(\"{CO_2}\") == \"{O_2 + O_2}\", \"One molecule of $\\rm CO_2$ and two molecules of $\\rm O_2$ yield one molecule of $\\rm CO_2$. Solution does not match\"\nassert solution(\"{C_6 O_2}\") == \"{C_6 O_2}\", \"One molecule of $\\rm C_6$ and two molecules of $\\rm O_2$ yield one molecule of $\\rm C_6 O_2$. Solution does not match\"\nassert solution(\"{6 O_2 + 1}\") == \"{6 O_2 + 1}\", \"One molecule of $\\rm 6 O_2$ and two molecules of $\\rm 1 \\leq m \\leq M$ yield one molecule of $\\rm 6 O_2 + 1$. Solution does not match\"\nassert solution(\"{7 O_2 + 3}\") == \"{7 O_2 + 3}\", \"One molecule of $\\rm 7 O_2$ and two molecules of $\\rm 3 \\leq m \\leq M$ yield one molecule of $\\rm 7 O_2 + 3$. Solution does not match\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('+1 2 H 2 O 1') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1') == '0 0'\nassert solution('-1 1 O 2') == '-1 1'\nassert solution('-1 3 C 6 H 12 O 6') == '-1 3 6 6 1'\nassert solution('0 0') == '0 0'"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '0 0'\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 H 2 O 1\") == \"0 0\"\nassert solution(\"1 2 C 1 O 2\") == \"0 0\"\nassert solution(\"-1 1 O 2\") == \"-1 1\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"-1 3\"\nassert solution(\"0 0\") == \"0 0\""
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == (0, 0, 1)\nassert solution(inp) == (0, 0, 1)\nassert solution(inp) == (0, 0, 1)\nassert solution(inp) == (0, 0, 1)\nassert solution(inp) == (0, 0, 1)\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('10 2 1') == '0 1'\nassert solution('10 2 1 3') == '0 1'\nassert solution('10 2 1 3 4 5 6 7 8 9 10') == '0 1'\nassert solution('1 2 C 2 H 2 O 1') == '0 1'\nassert solution('1 2 C 2 H 2 O 1 3 4') == '0 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '6 6 6 1'\nassert solution(stdin) == '3 6 6 1'\nassert solution(stdin) == '1 0'\nassert solution(stdin) == '0 0'\nassert solution(stdin) == '1 0'\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"6 6 6 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1000') == '20.83'\n"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"12.23\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 15 20\") == \"15.83\"\nassert solution(\"4 15 20\") == \"15.83\"\nassert solution(\"4 15 20\") == \"16.47\"\nassert solution(\"4 15 20\") == \"16.47\"\nassert solution(\"4 15 20\") == \"16.47\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3\\n') == '20.84'\nassert solution('1\\n') == '5.8'\nassert solution('4\\n') == '4.6'\nassert solution('4\\n') == '4.9'\nassert solution('4\\n') == '5.9'\n"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0.80\"\nassert solution(\"5\") == \"0.74\"\nassert solution(\"10\") == \"0.80\"\nassert solution(\"50\") == \"0.73\"\nassert solution(\"20\") == \"0.71\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '20.83'\n"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 6 9\") == \"15.32\"\nassert solution(\"4 3 7\") == \"15.95\"\nassert solution(\"1 0 0\") == \"0.00\"\nassert solution(\"100 0 0\") == \"0.00\"\nassert solution(\"4 7\") == \"15.32\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"20.83\""
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 2 2 0' + '1 2 2' + '1 3 3' + '1 3 4' + '0 0' + '0 0' + '0 0' + '0 0' + '0 0' + '0 0' + '0 0' + '0 0' + '0 0' + '0 0' + '0 0' + '0 0') == '20.83'\nSample Input:\n4\n100 50\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n"
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"20.83\"\nassert solution(\"5\") == \"20.83\"\nassert solution(\"5\") == \"20.83\"\nassert solution(\"5\") == \"20.83\"\nassert solution(\"5\") == \"20.83\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    '1 2 5 7 6 4 3 3 3 3 3 4 4 5 6 4 6 4 6 4 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 29\nSample Input:\n6 6\n1 2 3 4 5 6\n6 6 4 4 4 6\n3 3 3 3 3 3\n3 3 3 3 3 3\n3 3 3 3 3 3\n3 3 3 3 3 3\nSample Output:\n1\nExplanation:\nSample input:\n6 6\n6 6 4 4 4 4 4 4\n6 6 4 4 4 4 4 4\n6 6 4 4 4 4 4 4\n6 6 4 4 4 4 4 4\nExplanation:\n\nFor example, for $stdin$, $6 6 4 4 4 4 4 4$ (which is the given grid) there are $49$ subgrids, because there are two monotonic subgrids: $1$ and $1$ and $2$ and $2$ and so on.\n\nExplanation:\n\n$1 \\leq \\! 2 \\leq \\! 6 \\leq \\! 6 \\leq \\! 8 \\leq \\! 6 \\leq \\! 7 \\leq \\! 6 \\leq \\! 4 \\leq \\! 6 \\leq \\! 3 \\leq \\! 3 \\leq \\! 2 \\leq \\! 3 \\leq \\! 2 \\leq \\! 2 \\leq \\! 3 \\leq \\! 2 \\leq \\! 2 \\leq \\! 1 \\leq \\! 3 \\leq \\! 2 \\leq \\! 2 \\leq \\! 1 \\leq \\! 2 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\leq \\! 1 \\le"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\nSample Input:\n4 3\n1 2 5\n7 6 4\n9 8 3\nSample Output:\n48\n"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\", \"5\", \"9\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\"]) == \"7\"\nassert solution([\"1\", \"5\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"3\"]) == \"9\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"2\", \"3\", \"3\", \"3\", \"4\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"4\", \"4\", \"4\", \"5\", \"5\"]) == \"5\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"2\", \"3\", \"4\"]) == \"4\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 2 5\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3\\n7 6 4\\n9 8 3"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), 'incorrect input'\n"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\n        [\"1\", \"2\", \"5\", \"6\", \"4\", \"3\", \"3\", \"3\", \"2\", \"1\"],\n        [\"7\", \"6\", \"4\", \"3\", \"2\", \"1\", \"9\", \"8\", \"2\", \"3\"],\n        [\"7\", \"4\", \"3\", \"1\", \"3\", \"2\", \"2\", \"5\", \"1\", \"9\"],\n        [\"5\", \"2\", \"1\", \"8\", \"3\", \"1\", \"2\", \"1\", \"7\", \"4\"],\n        [\"4\", \"5\", \"2\", \"3\", \"1\", \"3\", \"2\", \"1\", \"4\", \"1\"],\n        [\"1\", \"3\", \"2\", \"3\", \"1\", \"2\", \"1\", \"4\", \"1\", \"1\"],\n        [\"1\", \"1\", \"7\", \"7\", \"4\", \"3\", \"3\", \"1\", \"4\", \"4\"],\n        [\"9\", \"8\", \"5\", \"1\", \"9\", \"5\", \"2\", \"2\", \"9\", \"4\"],\n        [\"3\", \"2\", \"1\", \"3\", \"2\", \"1\", \"9\", \"4\", \"1\", \"8\"]\n    ]\n    ) == 49\n\nSample Output:\n49\n"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 5 3 7 4 9 8\") == \"49\"\nassert solution(\"3 6 4 7 8 9 3 6 5\") == \"29\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 2 5 3 7 4 9 8\") == \"9\"\nassert solution(\"3 3 3 2 2 3 3 3\") == \"3\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"49\""
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"2\", \"5\"]) == \"1\"\nassert solution([\"7\", \"6\", \"4\"]) == \"1\"\nassert solution([\"9\", \"8\", \"3\"]) == \"1\"\nassert solution([\"10\", \"20\"]) == \"1\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"x\") == \"x\"\nassert solution(\"q\") == \"q\"\nassert solution(\"Y\") == \"Y\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"CROSSWORD####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"CROSSWORD\") == \"######\"\nassert solution(\"CROSSWORD\") == \"######\"\nassert solution(\"CROSSWORD\") == \"######\"\nassert solution(\"CROSSWORD\") == \"######\"\nassert solution(\"CROSSWORD\") == \"######\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        'CROSSWORD.####'\n) == '####CROSSWORD.####'\nassert solution(\n        'CROSSWORD##.#####'\n) == '####CROSSWORD##.#####'\nassert solution(\n        'CROSSWORD.#####'\n) == '####CROSSWORD.#####'\nassert solution(\n        'CROSSWORD.######'\n) == '####CROSSWORD.######'\nassert solution(\n        'CROSSWORD######'\n) == '####CROSSWORD######'\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"####\") == 'CROSSWORD####', \"solution(\\\"####\\\") should return \\\"CROSSWORD####\\\"\"\nassert solution(\".\") == '.', \"solution(\\\".\") should return \\\".'\"\nassert solution(\"..\") == '..', \"solution(\\\"..\\\") should return \\\"..\\\"\"\nassert solution(\"..##\") == '..##', \"solution(\\\"..###\\\") should return \\\"..###\\\"\"\nassert solution(\"###...#\") == '###...#', \"solution(\\\"###...#\\\") should return \\\"###...#\\\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"CROSSWORD\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'CROSSWORD####'\n\nSample Input:\n2\n##.........##\n##...##..##\n##...##..##\n##......#.#\n##.....##.#\n##.......##\n##.......##\n##......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##.......##\n##......."
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\".join(stdin)) == \"CROSSWORD\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'CROSSWORD####'\nSample Input:\n1 14\n##....###.##..##.##..##.##..##\nSample Output:\n##.####.####.####.####.####.####\n"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('''') == ''\nassert solution('\"\"') == ''\nassert solution('##...##..##') == ''\nassert solution('...##....##') == '...#...##'\nassert solution('###.###.###.###') == '###..#...#'\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3 1\", \"2 7 6\", \"9 5 1\", \"4 3 8\"]) == \"31\"\nassert solution([\"1 1\"]) == \"1\"\nassert solution([\"1 1\", \"2 7 6\", \"9 5 1\", \"4 3 8\", \"7 3 6\"]) == \"81\"\nassert solution([\"1 1\", \"2 7 6\", \"9 5 1\", \"4 3 8\", \"7 3 6\", \"1 1\"]) == \"10\"\nassert solution([\"1 4 3\", \"1 5 3\", \"3 3 2\", \"2 2 1\", \"3 3 1\"]) == \"3\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 168 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 188 189 189 190 191 191 192 193 194 195 196 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 229 230 230 231 232 233 234 235 236 237 238 238 239 240 241 242 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1 0 0 0 1 0 0 0 0 0\") == \"31\"\nassert solution(\"6 7 3 5 1 2 4 6 5 6 2\") == \"23\"\n\"\"\"\n\nclass Solution:\n    def solution(self, N, K):\n        def cover(a, b, K):\n            if K == 0:\n                return a\n            if a >= b:\n                return cover(a, b, K-1)\n            return cover(a-1, b, K) + cover(a, b-1, K)\n        return cover(N-1, K, K)\n\nprint(solution(3, 7))\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 1 5 1 6 1 5 1 8 3\"\n) == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"31\"\nassert solution(\"2 7 6\") == \"31\"\nassert solution(\"9 5 1\") == \"31\"\nassert solution(\"4 3 8\") == \"31\"\nassert solution(\"4 3 9\") == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"The input is incorrect\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '31'"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"BBW\") == \"2\"\nassert solution(\"BBW\") == \"3\"\nassert solution(\"BBW\") == \"1\"\nassert solution(\"BBW\") == \"2\"\nassert solution(\"BBW\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"3 5\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"BBW\") == \"2\"\nassert solution(\"WWBBW\") == \"2\"\nassert solution(\"BBWWW\") == \"1\"\nassert solution(\"WWWWW\") == \"1\"\nassert solution(\"BBBBBB\") == \"1\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"BBW\") == \"2\"\nassert solution(\"BWW\") == \"1\"\nassert solution(\"BWWBWW\") == \"1\"\nassert solution(\"BWBBWWWW\") == \"0\"\nassert solution(\"BBBBBWWWW\") == \"0\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5, \"Error\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"BBW\") == \"2\"\n\nSample Input:\n2\nWBWB\nSample Output:\n1\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp: str) == \"2\"\nassert solution(inp: str) == \"1\"\n\nassert solution(inp: str) == \"\"\nassert solution(inp: str) == \"\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3 3 3 3 3 3 3\") == 2\n\nassert solution(\"1 4\") == 3\n\nassert solution(\"1 3\") == 3\n\nassert solution(\"1 4 1 4\") == 6\n\"\"\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"BBW\") == \"2\"\nassert solution(\"BBWW\") == \"2\"\nassert solution(\"WWBWBW\") == \"3\"\nassert solution(\"WWBBWWW\") == \"3\"\nassert solution(\"WBBBWWWW\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 2\") == \"0.56\"\nassert solution(\"5 5 1\") == \"0.59\"\nassert solution(\"5 5 1\") == \"0.00\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1.094\"\n\"\"\""
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0.556\"\n\n\nSample Input:\n3 2\n1 1 1\n4 4 3\n3 4 4\nSample Output:\n0.734146497314098\n"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 1\\n3 2 1\\n1 2 3\\n1 2 3\\n1 2 3\") == 0.556\nassert solution(\n    \"3 1\\n1 2 3\\n1 2 3\\n3 2 1\\n1 2 3\") == 0.5\nassert solution(\n    \"3 1\\n1 2 3\\n1 2 3\\n3 2 1\\n1 2 3\") == 0.5\nassert solution(\n    \"3 1\\n1 2 3\\n3 2 1\\n1 2 3\") == 0.5\nassert solution(\n    \"3 1\\n1 2 3\\n1 2 3\\n3 2 1\\n1 2 3\") == 0.5\n"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"6 3 1\"\n) == \"0.556\"\nassert solution(\n    \"6 2 1\"\n) == \"0.0\"\nassert solution(\n    \"10 3 1\"\n) == \"0.0\"\nassert solution(\n    \"100 3 1\"\n) == \"0.0\"\nassert solution(\n    \"100 3 3\"\n) == \"0.0\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"0.75\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"0.5\"\nassert solution(\"1 1 2 1 1\") == \"1\"\nassert solution(\"1 1 2 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0.556'\n\nSample Input:\n3 1\n2 2 2\n2 2 2\n1 2 3\nSample Output:\n1.0\n\nExplanation:\nMr. Potato opens two new stores where he will, you guessed it, sell potatoes.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n\nMr. Potato gets his potatoes from $N$ farmers.\n"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('3 1 1') == '0.012'\nassert solution('3 1 2') == '0.085'\nassert solution('1 1 2') == '0.086'\nassert solution('1 1 1') == '0.081'\n"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0.556\"\nSample Input:\n3 1\n3 2 1\n1 2 3\nSample Output:\n3.5"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 1 3 5 7 11 22 33 55 9 -1 0 0 1 2 2 -1 -1 1 0 0 0 0 0 0 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\", \"3\", \"2\", \"1\"]) == \"3\"\nassert solution([\"4\", \"4\", \"1\"]) == \"3\"\nassert solution([\"2\", \"3\", \"1\"]) == \"2\"\nassert solution([\"5\", \"3\", \"2\", \"2\"]) == \"2\"\nassert solution([\"1\", \"0\", \"2\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0 0 1\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 5 2 5 3\") == \"5\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"4 3 2\") == \"4\"\nassert solution(\"2 4 3\") == \"3\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\nimport math"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\nassert solution(\"1 5 3 4\") == \"3\"\nassert solution(\"1 9 2\") == \"2\"\nassert solution(\"1 3 4 6 7\") == \"7\"\nassert solution(\"0 9 2 3 4 6 5 7 8 9\") == \"4\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 5 3 1\") == \"3\"\nassert solution(\"20 5 3 1\") == \"2\"\nassert solution(\"15 4 1\") == \"1\"\nassert solution(\"10 1 5 1\") == \"1\"\nassert solution(\"20 4 1\") == \"2\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 2 2 1') == '0'\nassert solution('2 2 4 2') == '0'\nassert solution('3 3 2 1') == '0'\nassert solution('2 2 2 4') == '0'\nassert solution('2 4 3 4') == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == 1, \"Standard input must be valid.\"\nassert solution(\"2 1 2\") == 1, \"Standard input must be valid.\"\nassert solution(\"3 1 4\") == 2, \"Standard input must be valid.\"\nassert solution(\"3 2 4\") == 1, \"Standard input must be valid.\"\nassert solution(\"1 3 4\") == 1, \"Standard input must be valid.\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 5 3 4\") == \"1\"\nassert solution(\"2 3 3 0\") == \"0\"\nassert solution(\"3 3 3 3\") == \"3\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"2 2 2 1\") == \"1\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 3 2') == '3', 'Example 2'\nassert solution('1 4 2') == '4', 'Example 3'\nassert solution('1 5 3 2') == '5', 'Example 4'\nassert solution('1 6 3 2') == '6', 'Example 5'"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 3 6 5 6 6 8') == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 6 0.5 0.5 1.5 0.5 0.5 0.5\"\"\") == \"3 2\"\nassert solution(\"\"\"0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"13\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, n: int, start: int, end: int, d: int) -> str:\n        pass\n"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9\"\nprint(stdin)\nassert solution(stdin) == \"6\"\nprint(stdin)\nassert solution(stdin) == \"4\"\nprint(stdin)\nassert solution(stdin) == \"1\"\nprint(stdin)\nassert solution(stdin) == \"2\"\nprint(stdin)\n"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '13'\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : 3\")\nprint(\"Exception :\")\nprint(\"3\")\nprint(\"Output :\")\nprint(\"13\")\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : 5\")\nprint(\"Exception :\")\nprint(\"5\")\nprint(\"Output :\")\nprint(\"5\")\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"stdin : 3 3 3\")\nprint(\"Exception :\")\nprint(\"2\")\nprint(\"Output :\")\nprint(\"2\")\n"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('11 11\\n12 11\\n13 11\\n14 11\\n15 11\\n16 11\\n17 11\\n18 11\\n19 11\\n20 11\\n21 11\\n22 11\\n23 11\\n24 11\\n25 11\\n26 11\\n27 11\\n28 11\\n29 11\\n30 11\\n31 11\\n32 11\\n33 11\\n34 11\\n35 11\\n36 11\\n37 11\\n38 11\\n39 11\\n40 11\\n41 11\\n42 11\\n43 11\\n44 11\\n45 11\\n46 11\\n47 11\\n48 11\\n49 11\\n50 11\\n51 11\\n52 11\\n53 11\\n54 11\\n55 11\\n56 11\\n57 11\\n58 11\\n59 11\\n60 11\\n61 11\\n62 11\\n63 11\\n64 11\\n65 11\\n66 11\\n67 11\\n68 11\\n69 11\\n70 11\\n71 11\\n72 11\\n73 11\\n74 11\\n75 11\\n76 11\\n77 11\\n78 11\\n79 11\\n80 11\\n81 11\\n82 11\\n83 11\\n84 11\\n85 11\\n86 11\\n87 11\\n88 11\\n89 11\\n90 11\\n91 11\\n92 11\\n93 11\\n94 11\\n95 11\\n96 11\\n97 11\\n98 11\\n99 11\\n100 11\\n101 11\\n102 11\\n103 11\\n104 11\\n105 11\\n106 11\\n107 11\\n108 11\\n109 11\\n110 11\\n111 11\\n112 11\\n113 11\\n114 11\\n115 11\\n116 11\\n117 11\\n118 11\\n119 11\\n120 11\\n121 11\\n122 11\\n123 11\\n124 11\\n125 11\\n126 11\\n127 11\\n128 11\\n129 11\\n130 11\\n131 11\\n132 11\\n133 11\\n134 11\\n135 11\\n136 11\\n137 11\\n138 11\\n139 11\\n140 11\\n141 11\\n142 11\\n143 11\\n144 11\\n145 11\\n146 11\\n147 11\\n148 11\\n149 11\\n150 11\\n151 11\\n152 11\\n153 11\\n154 11\\n155 11\\n156 11\\n157 11\\n158 11\\n159 11\\n160 11\\n161 11\\n162 11\\n163 11\\n164 11\\n165 11\\n166 11\\n167 11\\n168 11\\n169 11\\n170 11\\n171 11\\n172 11\\n173 11\\n174 11\\n175 11\\n176 11\\n177 11\\n178 11\\n179 11\\n180 11\\n181 11\\n182 11\\n183 11\\n184 11\\n185 11\\n186 11\\n187 11\\n188 11\\n189 11\\n190 11\\n191 11\\n192 11\\n193 11\\n194 11\\n195 11\\n196 11\\n197 11\\n198 11\\n199 11\\n200 11\\n201 11\\n202 11\\n203 11\\n204 11\\n205 11\\n206 11\\n207 11\\n208 11\\n209 11\\n210 11\\n211 11\\n212 11\\n213 11\\n214 11\\n215 11\\n216 11\\n217 11\\n218 11\\n219 11\\n220 11\\n221 11\\n222 11\\n223 11\\n224 11\\n225 11\\n226 11\\n227 11\\n228 11\\n229 11\\n230 11\\n231 11\\n232 11\\n233 11\\n234 11\\n235 11\\n236 11\\n237 11\\n238 11\\n239 11\\n240 11\\n241 11\\n242 11\\n243 11\\n244 11\\n245 11\\n246 11\\n247 11\\n248 11\\n249 11\\n250 11\\n251 11\\n252 11\\n253 11\\n254 11\\n255 11\\n256 11\\n257 11\\n258 11\\n259 11\\n260 11\\n261 11\\n262 11\\n263 11\\n264 11\\n265 11\\n266 11\\n267 11\\n268 11\\n269 11\\n270 11\\n271 11\\n272 11\\n273 11\\n274 11\\n275 11\\n276 11\\n277 11\\n278 11\\n279 11\\n280 11\\n281 11\\n282 11\\n283 11\\n284 11\\n285 11\\n286 11\\n287 11\\n288 11\\n289 11\\n290 11\\n291 11\\n292 11\\n293 11\\n294 11\\n295 11\\n296 11\\n297 11\\n298 11\\n299 11\\n300 11\\n301 11\\n302 11\\n303 11\\n304 11\\n305 11\\n306 11\\n307 11\\n308 11\\n309 11\\n310 11\\n311 11\\n312 11\\n313 11\\n314 11\\n315 11\\n316 11\\n317 11\\n318 11\\n319 11\\n320 11\\n321 11\\n322 11\\n323 11\\n324 11\\n325 11\\n326 11\\n327 11\\n328 11\\n329 11\\n330 11\\n331 11\\n332 11\\n333 11\\n334 11\\n335 11\\n336 11\\n337 11\\n338 11\\n339 11\\n340 11\\n341 11\\n342 11\\n343 11\\n344 11"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"13\""
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10.000000 20.123456\") == \"3.141593\"\nassert solution(\"1.000000\") == \"0.0\"\nassert solution(\"13.141593 20.123456\") == \"2.0\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5,10\") == \"6.25\"\nassert solution(\"5,5\") == \"1.0\"\nassert solution(\"1,5\") == \"5.0\"\nassert solution(\"1,5,6,10\") == \"5.1\"\nassert solution(\"1,5,10,11,9\") == \"1.0\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3.141593\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3.141593\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ncoordinate = []\nfor i in range(N):\n    x, y = map(float, sys.stdin.readline().split())\n    coordinate.append([x, y])\ncoordinate.sort()\nfor i in range(len(coordinate)):\n    for j in range(i + 1, len(coordinate)):\n        a = abs(coordinate[i][0] - coordinate[j][0])\n        b = abs(coordinate[i][1] - coordinate[j][1])\n        if a > b:\n            coordinate[j], coordinate[i] = coordinate[i], coordinate[j]\n        elif b > a:\n            coordinate[i], coordinate[j] = coordinate[j], coordinate[i]\n    if coordinate[0][1] == coordinate[-1][1] and coordinate[0][0] < coordinate[-1][0]:\n        coordinate = coordinate[:-1]\ncoordinate.sort()\nprint(coordinate[0][0] * 10000 + coordinate[0][1])\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3.141593\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10.000000 20.123456\") == \"3.141593\"\nassert solution(\"10.000000 12.123456\") == \"2.000000\"\nassert solution(\"10.000000 2.123456\") == \"0.000000\"\nassert solution(\"10.000000 0.123456\") == \"0.000000\"\nassert solution(\"10.000000 -0.123456\") == \"10.000000\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"3.141593\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 8 3.141593 2 0 0 0 0 0 0 0 0 1\") == \"3.141593\"\nassert solution(\"1 4 2\") == \"3\"\nassert solution(\"4 4 5\") == \"3\"\nassert solution(\"3 9 1\") == \"3\"\nassert solution(\"3 9 2\") == \"3\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 8\") == \"1.00011\"\nassert solution(\"15 4\") == \"1.00009\"\nassert solution(\"17 1\") == \"1.0\"\nassert solution(\"2 3\") == \"0.0\"\nassert solution(\"5 7\") == \"0.00001\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"No solution\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 1) == 1\nassert solution(2, 1) == 1\nassert solution(3, 1) == 2\nassert solution(4, 1) == 2\nassert solution(5, 2) == 1\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2.13333333333333\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def shortestDistance(self, n: int, connections: List[List[int]]) -> str:\n        def check(start, i, end):\n            dist = sys.maxsize\n            for j in connections[i]:\n                if j == start or j == end:\n                    continue\n                dist = min(dist, abs(j - start) + abs(i - j))\n            return dist\n        \n        def dfs(start, end, index, visited):\n            if index == n:\n                return check(start, 0, end) + 1\n            visited[start] = True\n            ans = sys.maxsize\n            for i in range(n):\n                if visited[i] == True:\n                    continue\n                ans = min(ans, dfs(start, end, i, visited) + 1)\n            visited[end] = True\n            return ans\n        \n        ans = sys.maxsize\n        visited = [False] * n\n        for i in range(n):\n            if visited[i] == True:\n                continue\n            ans = min(ans, dfs(0, n - 1, i, visited) + 1)\n            visited[i] = True\n        return ans\n\n\"\"\"\nThe shortest distance is the number of points that are closer to a given point than the shortest distance between all other points. For example, if you have a pair of port towns on the street in which the distance between the two other points is 10 km, you would have a shortest distance of 1 point.\n\nThere are several pairs of port towns with the shortest distances between all other points.\n\nThe shortest distances between two port towns are the sum of the distances between each pair of port towns. For example, if you have a pair of port towns with the shortest distances between the two other points [10, 5] and [4, 2] and the shortest distance between each pair is 5 km, then the shortest distance is 5 + 5 = 8.\n\nGiven the shortest distances between port towns and the pairs of port towns, return the shortest distance.\n\nIn the example above, the shortest distance is 3 km, because there are four pairs of port towns in the map with the shortest distances between the two other points [10, 5] and [4, 2].\n\nHere is how you can calculate the average of the shortest distances between port towns:\n\nInput\n\nThe first line contains an integer $n$ ($2 \\le n \\le 500$), the number of ports;\nThe $i$th line contains $n-i$ integers. The $j$th integer on the $i$th line denotes the distance between port $i$ and port $i+j$ in kilometres. Each distance is between $1$ and $10^6$ (inclusive).\n\nOutput\n\nOutput the average distance between port towns in kilometres. Your answer should have an absolute or relative error of at most $10^{-9}$ (for example, if you are trying to calculate the average of the distances between port towns between two pairs of port towns, then your answer should be $2.13333333333333).\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def shortestDistance(self, n: int, connections: List[List[int]]) -> str:\n        def check(start, i, end):\n            dist = sys.maxsize\n            for j in connections[i]:\n                if j == start or j == end:\n                    continue\n                dist = min(dist, abs(j - start) + abs(i - j))\n            return dist\n        \n        def dfs(start, end, index, visited):\n            if index == n:\n                return check(start, 0, end) + 1\n            visited[start] = True\n            ans = sys.maxsize\n            for i in range(n):\n                if visited[i] == True:\n                    continue\n                ans = min(ans, dfs(start, end, i, visited) + 1)\n            visited[end] = True\n            return ans\n        \n        ans = sys.maxsize\n        visited = [False] * n\n        for i in range(n):\n            if visited[i] == True:\n                continue\n            ans = min(ans, dfs(0, n - 1, i, visited) + 1)\n            visited[i] = True\n        return ans\n\n\"\"\"\nThe shortest distance is the number of points that are closer to a given point than the shortest distance between all other points. For example, if you have a pair of port towns on the street in which the distance between the two other points is 10 km, you would have a shortest distance of 1 point.\n\nThere are several pairs of port towns with the shortest distances between all other points.\n\nThe shortest distances between two port towns are the sum of the distances between each pair of port towns. For example, if you have a pair of port towns with the shortest distances between the two other points [10, 5] and [4, 2] and the shortest distance between each pair is 5 km, then the shortest distance is 5 + 5 = 8.\n\nGiven the shortest distances between port towns and the pairs of port towns, return the shortest distance.\n\nIn the example above, the shortest distance is 3 km, because there are four pairs of port towns in the map with the shortest distances between the two other points [10, 5] and [4, 2].\n\nHere is how you can calculate the average of the shortest distances between port towns:\n\nInput\n\nThe first line contains an integer $n$ ($2 \\le n \\le 500$), the number of ports;\nThe $i$th line contains $n-i$ integers. The $j$th integer on the $i$th line denotes the distance between port $i$ and port $i+j$ in kilometres. Each distance is between $1$ and $10^6$ (inclusive).\n\nOutput\n\nOutput the average distance between port towns in kilometres. Your answer should have an absolute or relative error of at most $10^{-9}$ (for example, if you are trying to calculate the average of the distances between port towns between two pairs of port towns, then your answer should be $2.13333333333333).\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def shortestDistance(self, n: int, connections: List[List[int]]) -> str:\n        def check(start, i, end):\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1,3,3,1\") == \"2.13333333333333\"\nassert solution(\"5,1,1,5,1\") == \"2.14\"\nassert solution(\"5,1,2,2,2\") == \"2.22222222222222\"\nassert solution(\"5,1,2,3,4\") == \"2.33333333333333\"\nassert solution(\"1,2,3,4,5\") == \"2.55555555555556\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"2.5\"\nassert solution(\"1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"12.33333333333333\"\nassert solution(\"1\\n1\\n1\\n2\\n2\\n3\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"0.5\"\n\nSample Output:\n0.3333333333333335\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2.13333333333333\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == \"1.13333333333333\"\nassert solution(\"1 3 4\") == \"1.00000\"\nassert solution(\"2 2 2 2 2\") == \"1.00000\"\nassert solution(\"1 2 1 2 1\") == \"1.0000\"\nassert solution(\"1 2 1 2 1\") == \"1.0000\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2.13333333333333\"\nassert solution(stdin) == \"impossible\"\n\"\"\""
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"2.00\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"./ex2.txt\"), \"Expected string expected\"\nassert solution(\"./ex2-1.txt\"), \"Expected string expected\"\nassert solution(\"./ex2-2.txt\"), \"Expected string expected\"\nassert solution(\"./ex2-3.txt\"), \"Expected string expected\"\nassert solution(\"./ex2-4.txt\"), \"Expected string expected\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2.13333333333333\"\nSample Input:\n4\n5 2\n2 5\n4 2\nSample Output:\n5.000000000000000\n"
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(n := int(input())) == 2, \"The function must return 2.\"\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('7') == '18' # 7 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 11\nassert solution('4') == '2' # 4 + 1 + 2 + 3 = 11\nassert solution('1') == '1' # 1 + 1 + 1 + 1 = 11\nassert solution('3') == '3' # 3 + 1 + 1 + 1 = 11\nassert solution('6') == '4' # 6 + 1 + 2 + 3 + 4 = 17\n"
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 2\nassert solution(5) == 0\n"
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '2'\nassert solution('3') == '3'\nassert solution('2') == '4'\nassert solution('1') == '5'\n"
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin) == 18\n\nSample Input:\n5\nSample Output:\n2\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(12) == 18\nassert solution(24) == 11\nassert solution(24) == 1\nassert solution(24) == 7\nassert solution(1) == 0\n\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5') == 18\nassert solution('2') == 1\nassert solution('1') == 0\nassert solution('3') == 1\nassert solution('9') == 3\n"
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(5) == 10\nassert solution(7) == 17\nassert solution(16) == 0\n"
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['6','4','5','8','10','10','10','10','10','10','10','10','10','10']) == '18'\nassert solution(['2','2','2','2','2','2','2','2','2','2','2','2','2','2','2','2','2','2']) == '3'\nassert solution(['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18']) == '13'\nassert solution(['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1']) == '13'\nassert solution(['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1']) == '7'\n"
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(7) == 18\nassert solution(\"6\") == 2\nassert solution(\"13\") == 5\nassert solution(\"16\") == 3\nassert solution(\"28\") == 7\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"23 F M\") == \"6\"\nassert solution(\"2 M 3\") == \"1\"\nassert solution(\"2M 5\") == \"5\"\nassert solution(\"2 M 9\") == \"3\"\nassert solution(\"2M 5 M\") == \"8\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"35 M\"\nassert solution(stdin) == \"0 M\"\nassert solution(stdin) == \"43 M\"\nassert solution(stdin) == \"30 F\"\nassert solution(stdin) == \"43 M\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1M  classicism  programming  is   a   coding   style  of   every   person.\"\n) == \"3\"\nassert solution(\n    \"35 M classicism  programming  is   a   coding   style  of   every   person.\"\n) == \"3\"\nassert solution(\n    \"1M  classicism  programming  is   a   coding   style  of   every   person.\"\n) == \"3\"\nassert solution(\n    \"0 M baroque skiing  is   a   coding   style  of   every   person.\"\n) == \"3\"\nassert solution(\n    \"43 M baroque chess  is   a   coding   style  of   every   person.\"\n) == \"3\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"33\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"The function does not work\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"21\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 100\") == \"3\"\nassert solution(\"4 100\") == \"3\"\nassert solution(\"4 10000\") == \"4\"\nassert solution(\"5 300\") == \"5\"\nassert solution(\"5 10\") == \"5\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"hello!\\n\\nhello!\") == \"hello!\"\nassert solution(\"hello!\\n\\nhi!\\n\\nhello!\") == \"hello!\"\nassert solution(\"hello!\\n\\nhi\\n\\nhello!\") == \"hello!\"\nassert solution(\"hello\\n\\nhi\\n\\nhello\") == \"hello!\"\nassert solution(\"hello\\n\\nhi\\n\\nhello\\n\\nhello\") == \"hello!\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('F M M') == '3'\nassert solution('M M F') == '3'\nassert solution('M M F M') == '0'\nassert solution('M M M') == '0'\nassert solution('F M') == '0'\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"b\", \"b\", \"a\"]) == [\"b\", \"b\", \"b\", \"b\", \"c\", \"c\", \"b\", \"a\"]\n\nassert solution([\"a\", \"a\", \"b\", \"b\", \"a\", \"b\", \"b\", \"b\", \"a\"]) == [\"a\", \"b\", \"a\"]\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\", \"1\"]) == \"1\"\nassert solution([\"a\", \"a\"]) == \"3\"\nassert solution([\"a\", \"a\", \"a\"]) == \"4\"\nassert solution([\"a\", \"a\", \"a\", \"a\"]) == \"4\"\nassert solution([\"a\", \"a\", \"a\", \"a\", \"a\"]) == \"3\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('a') == 0\nassert solution('a') == 0\nassert solution('b') == 2\nassert solution('a') == 2\nassert solution('b') == 2\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"a 0 1 2 3 2 4 4 5 4 6 5 4 6 4 5 6 6 5 6 4 6 5 6 5 6 5 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6 5 6"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"a\", \"b\"]) == \"2\"\nassert solution([\"a\", \"b\", \"c\"]) == \"1\"\nassert solution([\"a\", \"b\", \"c\", \"d\"]) == \"1\"\nassert solution([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == \"4\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 2 3\") == \"3\"\nassert solution(\"1 2 0\") == \"2\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \n    input\n) == \"2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"45 66 75 66\") == \"5\"\nassert solution(\"60 48\") == \"3\"\nassert solution(\"60 50\") == \"4\"\nassert solution(\"74 40 15\") == \"1\"\nassert solution(\"80 40 15\") == \"3\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 6') == '5'"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"7\", \"7\", \"1\", \"2\", \"1\", \"0\"]) == \"5\"\nassert solution([\"6\", \"1\", \"0\", \"0\"]) == \"1\"\nassert solution([\"6\", \"1\", \"0\", \"0\"]) == \"2\"\nassert solution([\"6\", \"1\", \"0\", \"0\"]) == \"2\"\nassert solution([\"6\", \"1\", \"0\", \"0\"]) == \"3\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"32 79 59\") == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\nfrom heapq import heappush, heappop\nfrom math import gcd\nfrom bisect import bisect_left"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\n\nSample Input:\n4 2\n2 1\n4 4\n1 1\nSample Output:\n2\n\n-----Explanation-----\nThe player 1 chooses Frag=2, their new Frag value is max(Frag, 1), Frag is decreased by 1 in every step and the new Frag is increased by 1. At step=2, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag is decreased by 1. At step=3, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag is decreased by 1. At step=4, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=2, Frag is increased by 1 in every step and Frag=1, Frag is increased by 1. At step=5, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=2, Frag is increased by 1. At step=6, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=2, Frag is increased by 1 in every step and Frag=1, Frag=2, Frag is increased by 1. At step=7, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=2, Frag is increased by 1 in every step and Frag=1, Frag=2, Frag is increased by 1 in every step and Frag=2, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=2, Frag is increased by 1 in every step and Frag=2, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=2, Frag is increased by 1 in every step and Frag=1, Frag=2, Frag is increased by 1 in every step and Frag=2, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=1, Frag is increased by 1 in every step and Frag=2, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=2, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag=1, Frag=1, Frag is increased by 1 in every step and Frag="
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"I like Python. I love JavaScript. I love C++. I hate PHP. I love PHP. I love C#. I like C. I like C. It is not the best idea to give a good idea to the last time.\\n\"\n    \"I was born in 1997.\\n\"\n    \"I was born in 2002.\\n\"\n    \"I was born in 2003.\\n\"\n    \"I was born in 2004.\\n\"\n    \"I was born in 2005.\\n\"\n    \"I was born in 2006.\\n\"\n    \"I was born in 2007.\\n\"\n    \"I was born in 2008.\\n\"\n    \"I was born in 2009.\\n\"\n    \"I was born in 2010.\\n\"\n    \"I was born in 2011.\\n\"\n    \"I was born in 2012.\\n\"\n    \"I was born in 2013.\\n\"\n    \"I was born in 2014.\\n\"\n    \"I was born in 2015.\\n\"\n    \"I was born in 2016.\\n\"\n    \"I was born in 2017.\\n\"\n    \"I was born in 2018.\\n\"\n    \"I was born in 2019.\\n\"\n    \"I was born in 2020.\\n\"\n    \"I was born in 2021.\\n\"\n    \"I was born in 2022.\\n\"\n    \"I was born in 2023.\\n\"\n    \"I was born in 2024.\\n\"\n    \"I was born in 2025.\\n\"\n    \"I was born in 2026.\\n\"\n    \"I was born in 2027.\\n\"\n    \"I was born in 2028.\\n\"\n    \"I was born in 2029.\\n\"\n    \"I was born in 2030.\\n\"\n    \"I was born in 2031.\\n\"\n    \"I was born in 2032.\\n\"\n    \"I was born in 2033.\\n\"\n    \"I was born in 2034.\\n\"\n    \"I was born in 2035.\\n\"\n    \"I was born in 2036.\\n\"\n    \"I was born in 2037.\\n\"\n    \"I was born in 2038.\\n\"\n    \"I was born in 2039.\\n\"\n    \"I was born in 2040.\\n\"\n    \"I was born in 2041.\\n\"\n    \"I was born in 2042.\\n\"\n    \"I was born in 2043.\\n\"\n    \"I was born in 2044.\\n\"\n    \"I was born in 2045.\\n\"\n    \"I was born in 2046.\\n\"\n    \"I was born in 2047.\\n\"\n    \"I was born in 2048.\\n\"\n    \"I was born in 2050.\\n\"\n    \"I was born in 2000.\\n\"\n    \"I was born in 2001.\\n\"\n    \"I was born in 2002.\\n\"\n    \"I was born in 2003.\\n\"\n    \"I was born in 2004.\\n\"\n    \"I was born in 2005.\\n\"\n    \"I was born in 2006.\\n\"\n    \"I was born in 2007.\\n\"\n    \"I was born in 2008.\\n\"\n    \"I was born in 2009.\\n\"\n    \"I was born in 2010.\\n\"\n    \"I was born in 2011.\\n\"\n    \"I was born in 2012.\\n\"\n    \"I was born in 2013.\\n\"\n    \"I was born in 2014.\\n\"\n    \"I was born in 2015.\\n\"\n    \"I was born in 2016.\\n\"\n    \"I was born in 2017.\\n\"\n    \"I was born in 2018.\\n\"\n    \"I was born in 2019.\\n\"\n    \"I was born in 2020.\\n\"\n    \"I was born in 2021.\\n\"\n    \"I was born in 2022.\\n\"\n    \"I was born in 2023.\\n\"\n    \"I was born in 2024.\\n\"\n    \"I was born in 2025.\\n\"\n    \"I was born in 2026.\\n\"\n    \"I was born in 2027.\\n\"\n    \"I was born in 2028.\\n\"\n    \"I was born in 2029.\\n\"\n    \"I was born in 2030.\\n\"\n    \"I was born in 2031.\\n\"\n    \"I was born in 2032.\\n\"\n    \"I was born in 2033.\\n\"\n    \"I was born in 2034.\\n\"\n    \"I was born in 2035.\\n\"\n    \"I was born in 2036.\\n\"\n    \"I was born in 2037.\\n\"\n    \"I was born in 2038.\\n\"\n    \"I was born in 2039.\\n\"\n    \"I was born in 2040.\\n\"\n    \"I was born in 2041.\\n\"\n    \"I was born in 2042.\\n\"\n    \"I was born in 2043.\\n\"\n    \"I was born in 2044.\\n\"\n    \"I was born in 2045.\\n\"\n    \"I was born in 2046.\\n\"\n    \"I was born in 2047.\\n\"\n    \"I was born in 2048.\\n\"\n    \"I was born in 2050.\\n\"\n    \"I was born in 2000.\\n\"\n    \"I was born in 2001.\\n\"\n    \"I was born in 2002.\\n\"\n    \"I was born in 2003.\\n\"\n    \"I was born in 2004.\\n\"\n    \"I was born in 2005.\\n\"\n    \"I was born in 2006.\\n\"\n    \"I was born in 2007.\\n\"\n    \"I was"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"9\"\n\"\"\"\n\nimport math\n\nn = int(input())\np = input()\np_a = 0\ng_a = 0\n\nfor i in range(n):\n    if p[i] == 'G':\n        g_a = g_a + 1\n    if p[i] == 'P':\n        p_a = p_a + 1"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"4 5\"\nassert solution(\"1 0 1 1 1 2 1 2 1 2 0 0 0\") == \"2\"\nassert solution(\"1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"3\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nExplanation:\nIn a standard way, we can run down to a pair of houses that are equally even. \nEach house has a number in a list, one number in a string.\nExample 1:\nInput:\n3 3\n1 2\n1 3\n1 4\n2 3\n2 4\nOutput:\n3\nExplanation:\nIn this case, we have one way (1, 2) as you can go down from (1, 3).\nIn this way, we will be carrying out one house at every intersection, so it will be possible to destroy all the roads.\nExample 2:\nInput:\n4 4\n1 1\n2 2\n1 2\n1 3\n1 4\n2 3\n2 4\nOutput:\n5\nExplanation:\nIn this case, we have five ways (1, 2, 3, 4, 5) as you can go down from (1, 1, 2, 3, 4).\nIn this way, we will be carrying out three houses at every intersection, so it will be possible to destroy all the roads.\nExample 3:\nInput:\n3 4\n1 1\n2 2\n1 2\n1 3\n1 4\n2 3\n2 4\nOutput:\n4\nExplanation:\nIn this case, we have four ways (1, 1, 2, 3, 4, 4, 5, 5) as you can go down from (1, 1, 1, 2, 2, 3, 4, 4).\nIn this way, we will be carrying out four houses at every intersection, so it will be possible to destroy all the roads.\nExample 4:\nInput:\n3 5\n1 1\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\nOutput:\n5\nExplanation:\nIn this case, we have five ways (1, 1, 2, 3, 4, 4, 5, 5, 5, 6, 6).\nIn this way, we will be carrying out five houses at every intersection, so it will be possible to destroy all the roads.\nHence, the number of ways to destroy all the roads is equal to the number of ways to destroy a pair of houses in a given way.\n'''\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        def help(n, a, b):\n            if n == 1 and (a in n or b in n):\n                return 1\n            if a == b:\n                return 0\n            ans = 0\n            if a not in n or b not in n:\n                return help(n, a + 1, b)\n            for i in range(n[a]):\n                for j in range(n[b]):\n                    if i == j:\n                        continue\n                    tmp = help(n, a + 1, b + 1)\n                    if tmp!= 0:\n                        ans += tmp\n                    else:\n                        continue\n            return ans\n\n        return str(help(stdin, 1, 1))\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"6 5\") == \"1\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"8 1\") == \"3\"\nassert solution(\"10 10\") == \"4\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"4\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 4\") == \"3\"\nassert solution(\"2 2 3 4\") == \"3\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\"), \"5\"\nassert solution(\"3 2\"), \"3\"\nassert solution(\"1 3\"), \"3\"\nassert solution(\"4 4\"), \"0\"\nassert solution(\"4 2\"), \"1\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"1 1 2\") == \"3\"\nassert solution(\"0 2 0 0 0\") == \"1\"\nassert solution(\"0 3 1 2 1\") == \"1\"\nassert solution(\"0 1 1 2 3\") == \"1\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"2\", \"2\", \"2\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"1\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"6\"\nassert solution([\"1\", \"2\", \"3\", \"5\"]) == \"7\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"2 1 2\") == \"3\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"4 1 2\") == \"1\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n\nSample Input:\n4 5\n3 6\n3 2\n2 4\n1 3\n1 2\nSample Output:\n2\n\"\"\""
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 4\") == \"4\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 1 2\") == \"4 4\"\nassert solution(\"5 4 4\") == \"5 6\"\nassert solution(\"2 1 4\") == \"2 1\"\nassert solution(\"4 2 1 2\") == \"3\"\nassert solution(\"5 3 5 1\") == \"5\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2 4\"\nassert solution(input()) == \"2 4\"\nassert solution(input()) == \"2 4\"\nassert solution(input()) == \"2 4\"\nassert solution(input()) == \"2 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\") == \"1 3 4\"\nassert solution(\"1 3 4\") == \"2\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 3 4 5\") == \"2 4 5\"\nassert solution(\"1 3 4 5 6\") == \"1 3 4 5 6\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 4\nassert solution(stdin) == 4\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('a b') == 'b a'\nassert solution('a b a') == 'b a'\nassert solution('a b a b') == 'a b a'\nassert solution('a b a b a') == 'a b a b a'\nassert solution('a b b') == 'a b b'\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2 4\"\nassert solution(input().split()) == \"2 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 4\""
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 1 2') == '2 4'\nassert solution('1 3 1') == '3 2'\nassert solution('1 3 4') == '1 3 4'\nassert solution('1 3 1 2') == '1 3 4'\nassert solution('1 3 2') == '3 2'\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\n\nSample Input:\n1\n3\nSample Output:\n1\n\nassert solution(stdin) == '1'\n\nSample Input:\n2\n2\nSample Output:\n2\n\"\"\""
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"solution does not work\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"7 2\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"4 3 2 1\") == \"4\"\nassert solution(\"3 4\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"3\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\",\"5\",\"5\",\"5\",\"5\",\"5\"]) == \"5\"\nassert solution([\"10\",\"10\",\"10\",\"10\",\"10\",\"10\"]) == \"10\"\nassert solution([\"10\",\"10\",\"10\",\"10\",\"10\",\"10\"]) == \"10\"\nassert solution([\"10\",\"10\",\"10\",\"10\",\"10\",\"10\"]) == \"10\"\nassert solution([\"10\",\"10\",\"10\",\"10\",\"10\",\"10\"]) == \"10\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '4'\nassert solution('1 1') == '1'\nassert solution('2 2') == '0'\nassert solution('3 5') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('10 3 5 1 2 7 6') == 4\nassert solution('10 3 7') == 6\nassert solution('0 1') == 0\nassert solution('10 5') == 0\nassert solution('0 2') == 0\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == 5\nassert solution(\"1 1 3 6 9 13 17 19 21 23 25\") == 0\nassert solution(\"1 1 3 6 9 13 17 19 20 25 20 27\") == 0\nassert solution
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 2 2\") == \"5\"\nassert solution(\"2 2 1 2 1\") == \"4\"\nassert solution(\"3 3 3 3\") == \"3\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"1 2 1 2 2\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 3, 3, 3, 3, 3, 0, 3) == 2\nassert solution(3, 1, 4, 0, 2, 3, 0, 0) == 0\nassert solution(0, 3, 0, 0, 2, 2, 2, 1) == 2\nassert solution(0, 3, 2, 2, 2, 2, 2, 2) == 0\nassert solution(3, 2, 3, 3, 3, 3, 2, 3) == 1\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\"3 5 3\", \"1 1\", \"2 2\", \"1 3\", \"0 0\", \"0 3\", \"1 4\", \"3 3\", \"3 0\", \"0 0\"]\n) == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"solution() failed\"\n\nassert solution(stdin), \"solution() failed\"\n\nassert solution(stdin), \"solution() failed\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 3, 1) == 2\nassert solution(3, 3, 1) == 2\nassert solution(3, 3, 0) == 2\nassert solution(3, 3, 0) == 2\nassert solution(3, 3, 0) == 2\n"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input=\n    \"1 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('100000001') == 'GHOST'\nassert solution('1000001') == 'SAFE'\n\"\"\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"GHOST\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 4 2 3\") == \"GHOST\"\nassert solution(\"10 2 3 4\") == \"GHOST\"\nassert solution(\"7 7 7\") == \"SAFE\"\n'''"
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"L1\",\"C1\",\"C2\",\"C3\",\"C4\",\"C5\",\"C6\",\"C7\",\"C8\",\"C9\",\"C10\",\"C11\",\"C12\",\"C13\",\"C14\",\"C15\",\"C16\",\"C17\",\"C18\",\"C19\",\"C20\"]) == \"GHOST\"\nassert solution([\"L1\",\"C1\",\"C2\",\"C3\",\"C4\",\"C5\",\"C6\",\"C7\",\"C8\",\"C9\",\"C10\",\"C11\",\"C12\",\"C13\",\"C14\",\"C15\",\"C16\",\"C17\",\"C18\",\"C19\",\"C20\"]) == \"SAFE\"\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 2 4 5 3 2 4 2\") == \"YES\"\nassert solution(\n    \"2 3 2\") == \"YES\"\nassert solution(\n    \"5 5 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"GHOST\"\nSample Input:\n1\n1\n1\n1\nSample Output:\nGHOST\n\nassert solution(inp) == \"GHOST\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3\", \"2\", \"C\", \"C\", \"1\", \"C\", \"2\", \"C\", \"3\"]) == \"C\"\nassert solution([\"5\", \"4\", \"3\", \"1\", \"C\", \"1\", \"4\", \"2\", \"C\"]) == \"GHOST\"\nassert solution([\"5\", \"4\", \"3\", \"1\", \"C\", \"1\", \"4\", \"2\", \"C\"]) == \"SAFE\"\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5 3\", \"C\"]) == \"GHOST\"\nassert solution([\"5 3\", \"C\", \"L\", \"L\", \"L\"]) == \"C\"\nassert solution([\"5 3\", \"C\", \"L\", \"L\", \"L\"]) == \"SAFE\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nSample Input:\n2 3\n0.00 1.00\nSample Output:\n1\n"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"4\", \"3\", \"1\", \"0\"]) == \"2\"\nassert solution([\"2\", \"3\", \"2\", \"3\", \"2\"]) == \"3\"\nassert solution([\"5\", \"4\", \"3\", \"2\", \"0\"]) == \"3\"\nassert solution([\"1\", \"0\", \"0\", \"0\", \"0\"]) == \"1\"\nassert solution([\"2\", \"3\", \"1\", \"3\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('0.00 2.00', '0.00 0.00') == '0.00 2.00'\nassert solution('0.00 2.00', '0.00 1.01') == '1.01 0.00'\nassert solution('0.00 2.00', '0.00 1.02') == '1.02 0.00'\nassert solution('0.00 2.00', '0.00 1.03') == '1.03 0.00'\nassert solution('0.00 2.00', '0.00 1.04') == '1.04 0.00'\n"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 3\",\"6 4\",\"5 3\",\"1 3\",\"0 1\"]) == \"5\"\nassert solution([\"3 2\",\"1 0\"]) == \"2\"\nassert solution([\"3 3\",\"6 4\",\"5 3\",\"1 3\",\"0 1\",\"1 1\"]) == \"2\"\nassert solution([\"1 1\",\"2 2\",\"3 3\",\"2 2\",\"0 0\",\"1 1\",\"1 1\",\"3 3\",\"2 2\",\"1 1\",\"1 1\",\"0 1\",\"3 2\",\"3 3\",\"1 2\",\"1 0\",\"2 0\"]) == \"2\"\nassert solution([\"3 3\",\"6 4\",\"5 3\",\"1 3\",\"0 1\",\"1 1\",\"1 1\",\"3 3\",\"2 2\",\"1 1\",\"1 1\",\"0 1\",\"3 2\",\"3 3\",\"1 2\",\"1 0\",\"2 0\",\"3 3\",\"3 3\",\"1 2\",\"1 0\",\"2 0\",\"2 0\"]) == \"1\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \n    stdin=list(map(str, input().split()))\n    ) == \"2.00\"\n\"\"\""
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 4 1 0 0 0\") == \"1.5\"\nassert solution(\"1 4 4 1 0 0\") == \"2\"\nassert solution(\"2 4 3 0 0 0\") == \"0.001\"\nassert solution(\"2 4 3 4 0 0\") == \"0.001\"\nassert solution(\"4 4 4 4 4 4\") == \"0.001\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2.00\"\n\"\"\"\n\nfrom itertools import groupby"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"5 4.00\") == \"5.00\"\nassert solution(\"3 3.00\") == \"3.00\"\nassert solution
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\", \"2\", \"1\"]) == \"1.00\"\nassert solution([\"2\", \"2\", \"1\", \"1\", \"1\"]) == \"1.00\"\nassert solution([\"1\", \"1\", \"3\", \"1\", \"1\"]) == \"1.00\"\nassert solution([\"1\", \"1\", \"3\", \"1\", \"3\", \"1\", \"1\", \"1\"]) == \"1.00\"\n\nSample Input:\n2 3\n0.00 2.00 1.00\nSample Output:\n2\n"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0.00 2.00\") == \"2\"\nassert solution(\"0.00 1.00\") == \"1.00\"\nassert solution(\"1.00 1.00\") == \"1.00\"\nassert solution(\"1.00 1.00 2.00\") == \"1.00\"\nassert solution(\"1.00 1.00 1.00 1.00 2.00 1.00 1.00 1.00\") == \"1.00\""
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '10'\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 10\") == \"10\"\nassert solution(\"0 0 0 20\") == \"20\"\nassert solution(\"0 0 0 30\") == \"30\"\nassert solution(\"0 0 0 40\") == \"40\"\nassert solution(\"0 0 0 50\") == \"50\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 2 2 2 2 1 1') == '2.5'\nassert solution('4 1 4 1 1 2 1 2 4 1 1 1 3 1 2 1 1 2 1 1 2 1 1 2 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 2 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 1 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 1 2 1 2 1 1 2 2 1 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 2 1 2 1 2 1 2 2 2 1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\nSample Input:\n4\n5 2\n2 0\n9 2\n3\nSample Output:\n3\n"
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 2\n"
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '10'\n\nExplanation\nSample Input:\n2\n0 0\n10 0\n2\n30 0\n15 0\nSample Output:\n10\n\"\"\""
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input().split()) == \"2\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5 4\", \"3 5\", \"1 4\", \"1 6\", \"1 7\", \"2 4\"]) == \"3\"\nassert solution([\"7 10\", \"7 17\", \"1 4\", \"2 4\", \"3 6\", \"3 10\", \"3 6\"]) == \"7\"\nassert solution([\"4 1\", \"3 4\", \"2 4\", \"2 6\", \"1 6\"]) == \"0\"\nassert solution([\"5 4\", \"3 5\", \"1 4\", \"1 6\", \"1 7\", \"2 4\"]) == \"3\"\nassert solution([\"1 4 1\", \"2 4 2\", \"1 6 1\", \"3 6 2\", \"2 4 1\"]) == \"3\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1, \"Example 1: Wrong number of drivers.\"\nassert solution(stdin) == 0, \"Example 2: Wrong number of drivers.\"\n\"\"\"\nclass Solution:\n    def solution(self, t, n):\n        pass\n"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"W 10 3\") == \"0\"\nassert solution(\"W 10 3\") == \"1\"\nassert solution(\"W 10 3\") == \"1\"\nassert solution(\"W 10 3\") == \"2\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 4) == 0, \"Expected 0, got {}, {}.\".format(solution(3, 4), 0)\nassert solution(10, 3) == 2, \"Expected 2, got {}.\".format(solution(10, 3))\nassert solution(3, 2) == 1, \"Expected 1, got {}.\".format(solution(3, 2))\nassert solution(1800, 1800) == 1, \"Expected 1, got {}.\".format(solution(1800, 1800))"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"0 4 3 5 2 8 4\"\n) == \"2\"\nassert solution(\n    \"0 0 0 0 0 0\"\n) == \"0\"\nassert solution(\n    \"0 0 1 0 0 0\"\n) == \"0\"\nassert solution(\n    \"0 0 0 0 0 0\"\n) == \"1\"\nassert solution(\n    \"0 0 0 0 0 0\"\n) == \"0\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\n\n\"\"\"\na = [0]*10000001\na[0] = 1\nb = [0]*10000001\nb[1] = 1\na[2] = 1\na[3] = 1\na[4] = 1\na[5] = 1\na[6] = 1\na[7] = 1\na[8] = 1\n\nfor i in range(1, len(stdin)):\n    a[i] = a[i-1] + a[i-2]\n    b[i] = b[i-1] + b[i-2]\n\nprint(a[len(stdin)])"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"10\"\nassert solution(inp) == \"10\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(raw_input()) == \"3\"\n\nSample Input:\n1\n0\n1\n2\nSample Output:\n2\n\"\"\""
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"Impossible\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 10\") == \"1 1\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"2 3\") == \"2 3\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1 1\"\nassert solution(\"5 2\") == \"0 0\"\nassert solution(\"3 3 2\") == \"0 1 0\"\nassert solution(\"4 4\") == \"1 1\"\nassert solution(\"5 4\") == \"0 1\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 2 3 1\") == \"impossible\"\nassert solution(\"10 6\") == \"impossible\"\nassert solution(\"10 10\") == \"impossible\"\nassert solution(\"10 9\") == \"impossible\"\nassert solution(\"10 8\") == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 4\") == \"impossible\"\nassert solution(\"6 6 6 5\") == \"impossible\"\nassert solution(\"1 1 1 1 1\") == \"impossible\"\nassert solution(\"3 3 3 3 3\") == \"impossible\"\nassert solution
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin = \"2 4\"\n    ), \"error\"\nassert solution(\n    stdin = \"1 4\"\n    ), \"error\"\nassert solution(\n    stdin = \"1 6\"\n    ), \"error\"\nassert solution(\n    stdin = \"1 3\"\n    ), \"error\"\nassert solution(\n    stdin = \"1 2\"\n    ), \"error\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 10 3\") == \"impossible\"\nassert solution(\"1 10 3\") == \"impossible\"\nassert solution(\"1 1 1 1\") == \"impossible\"\nassert solution(\"1 1 1 2\") == \"impossible\"\nassert solution(\"1 1 1 3\") == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution( \"2 3 3\" ) == \"impossible\"\nassert solution( \"2 4 6\" ) == \"impossible\"\nassert solution( \"2 4 6 7\" ) == \"impossible\"\nassert solution( \"2 4 6 8 9\" ) == \"impossible\"\nassert solution( \"2 4 6 9\" ) == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"Ylva loves bonbons, probably more than anything else on this planet.\") == \"impossible\"\nassert solution(\"Ylva loves bonbons, probably more than anything else on this planet.\") == \"Ylva loves bonbons, probably more than anything else on this planet.\"\nassert solution(\"Ylva loves bonbons, probably more than anything else on this planet.\") == \"Ylva loves bonbons, probably more than anything else on this planet.\"\nassert solution(\"Ylva loves bonbons, probably more than anything else on this planet.\") == \"Ylva loves bonbons, probably more than anything else on this planet.\"\nassert solution(\"Ylva loves bonbons, probably more than anything else on this planet.\") == \"Ylva loves bonbons, probably more than anything else on this planet.\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(input(\"Example 1: \")) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(input(\"Example 2: \")) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(input(\"Example 3: \")) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"BETWEEN\", \"SUBTLE\", \"SHADING\", \"AND\", \"THE\", \"ABSENCE\", \"LIGHT\", \"LIES\", \"NUANCE\", \"IQLUSION\", \"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\"]) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\n    [\"HOSTILE\"]) == \"HOSTILE\"\nassert solution(\n    [\"STENCIL\"]) == \"STENCIL\"\nassert solution(\n    [\"ABSENCE\", \"SHADING\", \"AND\", \"THE\", \"LIGHT\", \"LIES\", \"NUANCE\", \"IQLUSION\", \"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\"]) == \"ABSENCE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE IQLUSION BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\"\nassert solution(\n    [\"IQUIVALENCE\"]) == \"IQUIVALENCE\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nExplanation:\nSample Input:\n4\nBETWEEN\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\nSample Output:\nBETWEEN ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(stdin) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(stdin) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(stdin) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(stdin) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\", \"string \" + stdin + \" is not equal to solution(stdin)\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\"\"\""
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\n)\nassert solution(\"\")\nassert solution(\"AUTHORIZATION\")\nassert solution(\"BETWEEN\")\nassert solution(\"BETWEEN BETWEEN\")\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\") == \"ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"IQLUSION\") == \"IQLUSION\"\nassert solution(\"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"HFFFGFZ\") == \"HFFZ\"\nassert solution(\"HFFFGFZ\") == \"Z\"\nassert solution(\"CDEFGHI\") == \"DFGH\"\nassert solution(\"CDEFGHI\") == \"DGFH\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nSample Input:\n7\nABCDFG\nFGHIJK\nXZXC\nYWXY\nZ\nSample Output:\nYWXYZ\nABCD\nF\n\nassert solution(stdin) == 'YWXYZABCDFG'\n\nSample Input:\n2\nADFADF\nADABD\nABABA\nABABA\nABABA\nABA\nABA\n\nSample Output:\nABA\nAB\nAA\nABA\n\nassert solution(stdin) == 'YWXYZABCDFG'\n\nSample Input:\n7\nABCD\nABCD\nABCDE\nABC\nABC\nABCD\nABC\nABC\nABCD\nABC\nABCD\nABC\nABCD\nABC\nABC\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABCD\nABC"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('abrahellehhelleh'), 12\nassert solution('rachelhellabracadabra'), 0"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"fdsjz\") == 3\nassert solution(\"fdsjzewdf\") == 12\nassert solution(\"fdsjzweee\") == 0\nassert solution(\"abcdefghi\") == 27\nassert solution(\"\") == 0\n"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"abcde\", \"xyz\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == \"90\"\nassert solution([\"abc\", \"abcd\"]) == \"0\"\nassert solution([\"abc\", \"abcd\", \"\", \"abcde\"]) == \"0\"\nassert solution([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == \"48\"\nassert solution([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aabbcaaabbbbcdbcdcaaabcaabbbbcaabcccddb\") == \"abcaabcaabcaabbbcaabcaabbbbcdbcddcddaabbba\"\nassert solution(\"aabbcaabcaabbbbcaabcaabbbbcaabcaabcccdd\") == \"abcaabcaabcaabbbcaabcaabbbbcdbcddcdd\"\nassert solution(\"aaabbbccaabcaabcaabcaabcaabcaabcaabbbbcdd\") == \"abcaabcaabcaabbbcaabcaabbbbcdbcddcdd\"\nassert solution(\"aabbcaaabcaabbbbcaabcaabcaabcaabcaabbbbcda\") == \"abcaabcaabcaabbbcaabcaabbbbcdbcddcddaabbba\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\nassert solution(\"abra\") == 12\nassert solution(\"ABCDEF\") == 12\nassert solution(\"abcdef\") == 12\nassert solution(\"aabbccdeeeffff\") == 12\n"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12, \"There is no solution\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"foo\") == 12\n\n\n\n'''"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abb\") == 12\nassert solution(\"abc\") == 0\nassert solution(\"abcdef\") == 6\nassert solution(\"abcdefg\") == 0\nassert solution(\"abcdeg\") == 3\n"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, \"abra\"))\nassert solution(\"abra\")\nassert solution(\"aaaaa\")\nassert solution(\"Aaaa\")\nassert solution(\"ababba\")\n"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abcdefgh\") == 2\nassert solution(\"abcdeb\") == 1\nassert solution(\"aac\") == 1\nassert solution(\"abcdefgh\") == 1\nassert solution(\"abcdgh\") == 2\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1620\") == \"70\"\nassert solution(\"1520\") == \"70\"\nassert solution(\"1910\") == \"70\"\nassert solution(\"22\") == \"70\"\nassert solution(\"1222\") == \"70\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('65') == '100'\nassert solution('65') == '100'\nassert solution('65') == '100'\nassert solution('65') == '100'\nassert solution('65') == '100'\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('10') == '5'\nassert solution('313510') == '12'\nassert solution('8134310') == '15'\nassert solution('9347310') == '18'\nassert solution('4212') == '14'\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"65\",\"6\",\"1\"]) == \"70\"\nassert solution([\"65\",\"6\",\"1\",\"1\"]) == \"70\"\nassert solution([\"65\",\"6\",\"1\",\"1\",\"1\"]) == \"70\"\nassert solution([\"1\",\"6\",\"1\"]) == \"70\"\nassert solution([\"3\",\"6\",\"1\"]) == \"70\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(13) == \"45\"\nassert solution(5) == \"22\"\nassert solution(2) == \"33\"\nassert solution(0) == \"0\"\nassert solution(1) == \"1\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(sys.stdin.readline().split()) == 70\n'''\nimport itertools"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"65\"\n) == \"340\"\nassert solution(\n    \"65\"\n) == \"340\"\nassert solution(\n    \"65\"\n) == \"340\"\nassert solution(\n    \"65\"\n) == \"340\"\nassert solution(\n    \"65\"\n) == \"340\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('6 1 1 5 4 2 3 4 1') == '85'\nassert solution('4 1 1 2 1 3 3 3 1') == '2'\nassert solution('2 1 1 2 3 3 3 1') == '2'\nassert solution('6 1 2 1 1 2 2 1 1 1 1 2') == '3'\nassert solution('6 1 2 1 1 2 2 1 1 1 1 2') == '2'\n"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"1 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\"\"\") == 11\nassert solution(\"\"\"1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\"\"\") == 7\nassert solution(\"\"\"1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0 1\n0 4\n0"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 11\n\"\"\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == 10\nassert solution(\"0 1\") == 0\nassert solution(\"0 4\") == 0\nassert solution(\"1 4\") == 0\nassert solution(\"1 4\") == 2\n"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 4 0 1\") == \"5\"\nassert solution(\"1 1 4 2 0\") == \"10\"\nassert solution(\"1 1 4 2 0 4\") == \"9\"\nassert solution(\"1 1 2 3 4 5 0 4\") == \"6\"\nassert solution(\"1 1 2 3 4 5 2 6\") == \"3\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '10'\n"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10 6\\n1 1\\n0 4\\n1 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0 4\\n0"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\") == \"7\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\") == \"7\"\nassert solution(\n    \"0 1\") == \"1\"\nassert solution(\n    \"0 1 0\") == \"1\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n\n\"\"\") == \"1 3 4 5 6 7 8 9\nassert solution(\"\"\"\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n\n\"\"\") == \"1 3 4 5 6 7 8 9\"\nassert solution(\"\"\"\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n\n\"\"\") == \"1 3 4 5 6 7 8 9\"\nassert solution(\"\"\"\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n\n\"\"\") == \"1 3 4 5 6 7 8 9\"\nassert solution(\"\"\"\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n\n\"\"\") == \"1 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"-2 0\") == \"6\"\nassert solution(\"-2 1\") == \"1\"\nassert solution(\"-2 2\") == \"3\"\nassert solution(\"-2 3\") == \"0\"\nassert solution(\"0 -1\") == \"1\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('-2 0') == '6'\nassert solution('0 -1') == '6'\nassert solution('-2 1') == '0'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"-2 0 -2 -1 0 -2 0 -2 -1 0 0 -2 1 0 0 -2 -1 0 -1 0 -2 -1 -1 -1 -2 -2 -2 0 -2 1 0 0 -2 2 -1 -1 -2 -2 0 0 0 -1 -1 -1 0 -2 0 0 -2 2 0 0 0 -2 -1 -1 -2 -2 -2 0 -2 2 -2 -2 -2 0 -2 2 -1 -1 -2 0 -2 -1 -1 0 -2 -2 -1 -2 -2 -1 -2 -2 -2 -2 0 0 -2 0 -1 -2 0 -2 -2 0 -2 1 0 0 -2 1 0 -2 0 -2 2 -2 -2 0 -2 -2 0 -2 -2 -2 0 -2 -2 0 0 -2 2 -2 0 -2 0 0 -2 -2 -2 -2 -2 -2 0 -2 0 -1 -1 -2 -1 -2 -2 -2 0 -2 0 0 0 0 0 0 0 -2 -1 -1 -2 -2 -2 -2 -2 0 -2 -2 -2 -2 -2 0 0 -2 -1 0 -2 -2 -2 0 -2 0 -2 0 -2 0 -2 0 -2 0 -2 0 -2 0 -2 0 -2 0 -2 -1 -2 -2 -2 -2 -2 0 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 0 -2 0 -2 0 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 -2 3 -1 -2 -1 1 -1 -1 0\") == \"6\"\nassert solution(\"2 0\") == \"0\"\nassert solution(\"-1 1\") == \"0\"\nassert solution(\"-1 0\") == \"0\"\nassert solution(\"0 -2 -2 -1\") == \"0\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution( \"1 2 3\" ) == \"0\"\nassert solution( \"1 2 5\" ) == \"1\"\nassert solution( \"0 0 0 0 0\" ) == \"3\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n[\n    [-2, -1, 1, 0],\n    [0, -1, 1, -1],\n    [-1, -1, 1, -1],\n    [-1, -1, 1, -1],\n    [-1, -1, 1, -1],\n    [-2, 0, 1, 0]\n]\n) == \"6\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('-2 0') == '1'\nassert solution('-2 1') == '3'\nassert solution('-2 0 0') == '1'\nassert solution('0 -1') == '2'\n"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"(6) -2 0 -2 1 -2 1 -2 1\") == 6, \"P should be 2, the minimum time required\"\nassert solution(\n    \"(6) -2 0 0 0 0 0 -2 1 -2 1 -2 1 -2 1 -2 1\") == \"7\", \"E should be 0, the minimum time required\"\nassert solution(\n    \"(6) 0 -1 0 0 0 0 0 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1\") == \"3\", \"E should be 1, the minimum time required\"\nassert solution(\n    \"(6) 0 0 -1 0 0 0 0 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1\") == \"4\", \"E should be 3, the minimum time required\"\nassert solution(\n    \"(6) 0 1 0 0 0 0 0 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -2 1 -"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"-2 0 0 0 -2 1 0 -1\") == \"3\"\nassert solution(\"-2 0 0 0 -1 2 -1 -1\") == \"5\"\nassert solution(\"-2 1 -1 -1 1 1 -1 -1 0 0\") == \"3\"\nassert solution(\"-2 1 -1 -1 1 1 -1 -1 0 -2\") == \"4\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3 1 4 40\"]) == \"3\"\nassert solution([\"3 1 4 1\"]) == \"3\"\nassert solution([\"3 1 4 0\"]) == \"3\"\nassert solution([\"3 1 4 -\"]) == \"3\"\nassert solution([\"3 1 4 100\"]) == \"3\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 100\") == \"4\"\nassert solution(\"2 4 5\") == \"3\"\nassert solution(\"4 6 2\") == \"3\"\nassert solution(\"2 7\") == \"3\"\nassert solution(\"2 1\") == \"3\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"13\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"15 4 10\") == \"15\"\nassert solution(\"18 4 3\") == \"2\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"10 1 0\") == \"0\"\nassert solution(\"7 0 0\") == \"0\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s='3 1 4 40') == '3'\n\n\nSample Input:\n4 1 1 3 1 2 2\nSample Output:\n2\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 1 2 3 2 4 1 4 3\") == \"5\"\nassert solution(\n    \"3 1 1\") == \"0\"\nassert solution(\n    \"1 1 1 0 0\") == \"1\"\nassert solution(\n    \"2 2 2 2 2\") == \"0\"\nassert solution(\n    \"1 2 1\") == \"2\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nSample Input:\n5 3 2 1\nSample Output:\n5\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"9 5\") == \"0\"\nassert solution(\"1 4 4\") == \"2\"\nassert solution(\"10 2\") == \"3\"\nassert solution(\"11 4 2\") == \"3\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4 40\") == \"3\"\nassert solution(\"10 20\") == \"4\"\nassert solution(\"15 10 20\") == \"5\"\nassert solution(\"11 10 20 30\") == \"5\"\nassert solution(\"30 30 30 30\") == \"0\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"99\"\n\n\nSample Input:\n9\n0 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"93 82 444\", \"92 76 436\", \"92 76 442\", \"92 76 442\"]) == \"99\"\nassert solution([\"93 82 44\",\"92 76 442\",\"92 76 444\",\"92 76 442\"]) == \"99\"\nassert solution([\"93 82 44\",\"92 76 442\",\"92 76 444\",\"92 76 442\"]) == \"99\"\nassert solution([\"93 82 44\",\"92 76 442\",\"92 76 444\",\"92 76 442\"]) == \"99\"\nassert solution([\"93 82 44\",\"92 76 442\",\"92 76 444\",\"92 76 442\"]) == \"99\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10,50,10,20,40,50,10,40,50,50') == '35'\nassert solution('100,50,10,20,40,50,10,40,50,50') == '10'\nassert solution('100,50,10,20,40,50,10,40,50,50') == '0'\nassert solution('100,50,10,20,40,50,10,40,50,50') == '0'\nassert solution('100,50,10,20,40,50,10,40,50,50') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('73 2') == '3'\nassert solution('3 1') == '3'\nassert solution('1 1') == '0'\nassert solution('0 0') == '0'\nassert solution('0 1') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"94\"), \"The standard input is not a valid python program.\"\nassert solution(\"94\"), \"The standard input is not a valid python program.\"\nassert solution(\"94\"), \"The standard input is not a valid python program.\"\nassert solution(\"94\"), \"The standard input is not a valid python program.\"\nassert solution(\"94\"), \"The standard input is not a valid python program.\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3,352,93,82,444,92,76,436,92,76,436,99,62,70,66,71,97,0,70,66,71,97,0,0,60,68,0,0,83,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\") == \"99\"\nassert solution(\"3,352,93,82,444,92,76,436,92,76,436,99,62,70,66,71,97,0,70,66,71,97,0,0,60,68,0,0,83,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\") == \"99\"\nassert solution(\"4,352,93,82,444,92,76,436,92,76,436,99,62,70,66,71,97,0,70,66,71,97,0,0,60,68,0,0,83,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\") == \"35\"\nassert solution(\"1,352,93,82,444,92,76,436,92,76,436,99,62,70,66,71,97,0,70,66,71,97,0,0,60,68,0,0,83,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\") == \"350\"\nassert solution(\"3,352,93,82,444,92,76,436,92,76,436,99,62,70,66,71,97,0,70,66,71,97,0,0,60,68,0,0,83,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\") == \"350\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"3\", \"352\", \"93\", \"82\", \"444\", \"92\", \"76\", \"436\", \"92\", \"76\", \"0\", \"0\", \"70\", \"66\", \"71\", \"97\", \"0\", \"0\", \"70\", \"66\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"84\"\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"0\"\nassert solution([\"3\", \"352\", \"93\", \"82\", \"444\", \"92\", \"76\", \"436\", \"92\", \"76\", \"0\", \"0\", \"70\", \"66\", \"71\", \"97\", \"0\", \"0\", \"70\", \"66\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"84\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == solution(inp)\nassert solution(inp) == solution(inp)\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"9\"\nassert solution(\"1\") == \"9\"\nassert solution(\"1 3 3\") == \"4\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"4\"\nassert solution(\"1 9 4 2 3 6 5 8 7 4\") == \"6\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"95\") == 2\nassert solution(\"90\") == 4\nassert solution(\"69\") == 3\nassert solution(\"90\") == 0\nassert solution(\"95\") == 3\n"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n        \"1 2 3 4 4 1 2 3 3 4 5 6 7 9 9 8 9 3 8 4 5 6 6 7 7 9 7 8 9 4 8 9 9 3 9 8 9 7 9 9 9 7 9 9 9 3 9 8 9 9 9 3 9 8 9 7 9 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9 9 9 3 9 8 9"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2 1 0 0 0 0 2 3 0 0 0 0 2 0 0 1 3 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 2\nassert solution(\"1 2 2 1 2 3\") == 6\nassert solution(\"1 1 3 1 4 1\") == 2\nassert solution(\"1 2 3 1 2 4 5 6 7 9 10 12 15 17 18 19\") == 2\nassert solution(\"1 2 3 4 4 5 1 2 3 4\") == 4\n"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2 3 4\"\n\"\"\""
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3\\n2\\n1') == '2'\nassert solution('1 2\\n2 3') == '3'\nassert solution('4\\n4\\n3') == '3'"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 1 3 4 5 2 7 1 3 5 4 7\") == \"7\"\n\n    pass\n\"\"\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    5\n    3\n    1\n    2 4\n    \"\"\") == \"1 2 4\"\n    assert solution(\n    \"\"\"\n    2\n    1\n    3\n    \"\"\") == \"1 2 4\"\n    assert solution(\n    \"\"\"\n    2\n    4\n    3\n    \"\"\") == \"1 2 4\"\n    assert solution(\n    \"\"\"\n    5\n    3\n    1\n    4\n    \"\"\") == \"1 2 4\"\n    \"\"\"\n    pass\n\"\"\"\n    )\n"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 4\") == \"2 4\"\nassert solution(\"2 5\") == \"5\"\nassert solution(\"2 7\") == \"7\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 6 9\"), \"5, 6, 9\"\nassert solution(\"5 6 7\"), \"5, 6, 7\"\nassert solution(\"5 6 8\"), \"5, 6, 8\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\\\"\\\"\\\"\n1\n1 1\n2 2\n3 2\n4 1\n\\\"\\\"\\\") == 4\n\nassert solution(\\\"\\\"\\\"\n1\n1 3\n2 2\n2 2\n3 2\n4 1\n\\\"\\\"\\\") == 9\n\nassert solution(\\\"\\\"\\\"\n1\n1 1\n2 2\n3 2\n4 1\n\\\"\\\"\\\") == 12\n\nassert solution(\\\"\\\"\\\"\n1\n1 1\n2 2\n3 2\n4 1\n\\\"\\\"\\\") == 12.00000\n\nassert solution(\\\"\\\"\\\"\n1\n1 1\n2 2\n3 2\n4 1\n\\\"\\\"\\\") == 12.0\n\nSample Input:\n7\n1 1 1 1 2\n2 2 2 2 3\n3 2 3 3 3\n4 1 4 4 4\n5 1 5 5 5\n6 1 6 6 6\n7 1 7 7 7\n8 1 8 8 8\n9 1 9 9 9\n10 1 10 10 10\n11 1 11 11 11\n12 1 12 12 12\n13 1 13 13 13\n14 1 14 14 14\n15 1 15 15 15\n16 1 16 16 16\n17 1 17 17 17\n18 1 18 18 18\n19 1 19 19 19\n20 1 20 20 20\n21 1 21 21 21\n22 1 22 22 22\n23 1 23 23 23\n24 1 24 24 24\n25 1 25 25 25\n26 1 26 26 26\n27 1 27 27 27\n28 1 28 28 28\n29 1 29 29 29\n30 1 30 30 30\n31 1 31 31 31\n\\\"\\\"\\\") == 37"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4' == '6' or '2') == '9.0000'\nassert solution('4' == '3') == '12.00000'\nassert solution('4' == '1') == '12'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4.8\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"9\"\nassert solution(\"2 2\") == \"15\"\nassert solution(\"5\") == \"10\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"3\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"9.0000\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"12.00000\""
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 10') == '12'\nassert solution('11 5') == '9.00000'\nassert solution('6 6') == '9.0000'\nassert solution('20 10') == '11.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"9.0000\"\nassert solution(\"2\") == \"12.00000\"\nassert solution(\"3\") == \"9.0\"\nassert solution(\"4\") == \"12.0\"\n\n\"\"\""
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '12'\nassert solution(stdin) == '12.00000'\nassert solution(stdin) == '12.00000'\nassert solution(stdin) == '12.00000'\nassert solution(stdin) == '12'\n"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), 'No solution'\n"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\n\nTest Case 1:\nInput:\n3\n5\nAB\nAD\nA\nA\nB\nB\nAD\nA\nA\nA\nB\nB\nB\nAB\nB\nB\nB\nB\nB\nB\nB\nB\n\nOutput:\n14\n\nTest Case 2:\nInput:\n2\n6\nAD\nAD\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\nB\n"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 2\nassert solution(2) == 3\nassert solution(1) == 1\nassert solution(5) == 2\nassert solution(2) == 1\n"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '20'\n\n\"\"\"\nimport sys\n\nclass Op:\n    def __init__(self, op, arg):\n        self.op = op\n        self.arg = arg\n\nclass Register:\n    def __init__(self, reg):\n        self.reg = reg\n        self.val = 0\n\nclass Stack:\n    def __init__(self):\n        self.stack = []"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(6) == \"AXXX\"\nassert solution(89) == \"AAIX\"\nassert solution(7) == \"BXXX\"\nassert solution(90) == \"BXXX\"\nassert solution(9) == \"AAAA\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == 2\nassert solution(1) == 4\nassert solution(2) == 8\n\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'ST A'\nassert solution(stdin) == 'ST X'\nassert solution(stdin) == 'PH A'\nassert solution(stdin) == 'PH X'\nassert solution(stdin) == 'AD'\n"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\nassert solution(\"2\") == \"ST A\\nDI Y\\nPH X\\nPL Y\\nAD\\nST X\\nPH A\\nPH X\\nAD\\nST X\\nDI Y\\nPH A\\nAD\\nPL Y\\nDI Y\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n\nfrom typing import Dict\n"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"0000 FFFF 0000 0000 0000 0000\") == \"2\"\nassert solution(\"0000 0000 0000 FFFF 0000 0000\") == \"2\"\nassert solution(\"0000 0000 0000 0000 0000 0000\") == \"2\"\nassert solution(\"0000 0000 0000 0000 0000 0000\") == \"2\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"F\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 4\") == \"4\"\nassert solution(\"1 4 3\") == \"3\"\nassert solution(\"1 3 4\") == \"2\"\nassert solution(\"1 4 0\") == \"0\"\nassert solution(\"1 9 7\") == \"6\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('S -> aSa') == 'aS'\nassert solution('S -> a') == 'a'\nassert solution('S -> bSb') == 'a'\nassert solution('S -> aa') == 'aa'\nassert solution('S -> b') == 'bb'\n"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 'ab'\nassert solution(inp) == 'a'\nassert solution(inp) == 'aa'\nassert solution(inp) == 'ba'\nassert solution(inp) == 'baa'\n"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \n\"\"\") == \"ababbaabbbbbbbbbbba\"\nassert solution(\"\"\"S -> aS\nS -> a\nS -> b\nS -> \n\"\"\") == \"a\"\nassert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \n\"\"\") == \"s\"\nassert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \n\"\"\") == \"S\"\nassert solution(\"\"\"S -> aS\nS -> a\nS -> b\nS -> \n\"\"\") == \"S\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\"\"\nabc\nabc\nabc\nabc\nabc\nabc\n\"\"\") == [\"abc\", \"a\", \"b\", \"c\"]\nassert solution(\\\"\\\"\\\"\"\"\nabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input) == solution.__doc__\n"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"S -> a\nS -> b\nS -> a\nS -> b\nS -> a\nS -> b\"\"\") == \"abcabcabcabc\"\nassert solution(\"\"\"S -> a\nS -> b\nS -> a\nS -> b\nS -> a\nS -> b\nS -> a\"\"\") == \"a\"\nassert solution(\"\"\"S -> a\nS -> b\nS -> a\nS -> b\nS -> a\nS -> b\nS -> a\nS -> b\"\"\") == \"ab\"\nassert solution(\"\"\"S -> a\nS -> b\nS -> a\nS -> b\nS -> a\nS -> b\nS -> a\nS -> b\nS -> a\"\"\") == \"aa\"\nassert solution(\"\"\"S -> a\nS -> b\nS -> a\nS -> b\nS -> a\nS -> b\nS -> a\nS -> b\nS -> a\"\"\") == \"a\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"aba\"\nassert solution(input) == \"ab\"\nassert solution(input) == \"a\"\nassert solution(input) == \"ba\"\nassert solution(input) == \"ab\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aabbaaabaaaaaaaaaaaaaaaaaaaaa\") == \"abbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('S -> aSa') == 'abaaba'\nassert solution('S -> bSb') == 'a'\nassert solution('S -> a') == 'b'\nassert solution('S -> b') == 'a'\nassert solution('S -> aS') == 'none'\n"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AB') == 'AB'\nassert solution('abc') == 'abc'\nassert solution('abac') == 'abac'\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nSample Input:\n5\n4 5 0 2\n1 3 7\n2 0\n4\nSample Output:\n1\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4'\n\nExplanation:\nInput:\n3\n4 5\n1 3 7\n2 0\n4\nOutput:\n4\nExplanation:\nInput:\n5\n1 0 2 3 4\n2 0\n1 0 2\n4\nOutput:\n1\n\nExplanation:\nInput:\n5\n1 0 2 3 4\n0 1\n1 0 2\n4\nOutput:\n1\n\nExplanation:\nInput:\n4\n0 1 2 3 4\n3 0\n0 1\n4\nOutput:\n4\n\"\"\"\n\nimport sys\n\n\nclass Solution:\n    def findDisparities(self, n, stdin):\n        pass\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"1 2\"\nassert solution(\"0 0\") == \"0 0\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 6\nassert solution(stdin) == 12\nassert solution(stdin) == 26\nassert solution(stdin) == 41\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 3) == 2\nassert solution(2, 2) == 1\nassert solution(0, 10) == 0\nassert solution(3, 10) == 4\nassert solution(3, 1) == 0\n"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 6 8\") == \"GO FOR IT\"\nassert solution(\"5 1\") == \"NO WAY\"\nassert solution(\"1\") == \"NO WAY\"\nassert solution(\"4\") == \"GO FOR IT\"\nassert solution(\"1 1\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 'GO FOR IT'\nassert solution(2) == 'NO WAY'\nassert solution(3) == 'GO FOR IT'\nassert solution(4) == 'NO WAY'\nassert solution(5) == 'GO FOR IT'\n"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"GO FOR IT\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"SUCCESS\"\nassert solution(\"4 4\") == \"GO FOR IT\"\nassert solution(\"WWWW\") == \"NO WAY\"\nassert solution(\"WSBB\") == \"NO WAY\"\nassert solution(\"WWWW\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"GO FOR IT\"\n\"\"\"\n\nfrom sys import stdin, setrecursionlimit\n\nsetrecursionlimit(10**6)\n\nfrom collections import defaultdict\n\nclass Node:\n    def __init__(self, parent, x):\n        self.parent = parent\n        self.x = x\n        self.g = 0\n        self.h = 0"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()), \"FAILED\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3') == 'GO FOR IT', 'incorrect solution'\n\nassert solution('3 3') == 'GO FOR IT', 'incorrect solution'\n"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"GO FOR IT\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Unable to solve the problem.\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"GO FOR IT\"\nassert solution(stdin) == \"NO WAY\"\nassert solution(stdin) == \"NO WAY\"\nassert solution(stdin) == \"NO WAY\"\nassert solution(stdin) == \"GO FOR IT\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 100') == '1200'\nassert solution('5 600') == '600'\nassert solution('5 200') == '200'\nassert solution('5 400') == '400'\nassert solution('5 -1') == '0'\n"
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 1 2 2 1') == 3\nassert solution('1 1 2 2 2') == 3\nassert solution('1 1 2 2 3') == 3\nassert solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190"
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 800 700 400 300 200\") == \"2243\"\nassert solution(\"5 600 600 400 300 200\") == \"None\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"The function solution is not defined.\"\nassert solution(stdin), \"The function solution is not defined.\"\nassert solution(stdin), \"The function solution is not defined.\"\nassert solution(stdin), \"The function solution is not defined.\"\nassert solution(stdin), \"The function solution is not defined.\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\", \"900\"]) == \"2243\"\nassert solution([\"5\", \"900\", \"900\"]) == \"2243\"\nassert solution([\"5\", \"900\", \"900\", \"900\"]) == \"2243\"\nassert solution([\"5\", \"900\", \"900\", \"900\", \"900\"]) == \"2243\"\nassert solution([\"5\", \"900\", \"900\", \"900\", \"900\", \"900\"]) == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('a') == 'a'\nassert solution('z') == 'z'\nassert solution('w') == 'z'\nassert solution('xy') == 'xy'\nassert solution('zm') == 'zm'\n"
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 0\") == \"2\"\nassert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"3 0 3 1\") == \"3\"\nassert solution(\"0 2 1 1\") == \"3\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1\", \"3 0\", \"? 1 3\") == \"yes\"\nassert solution(\"1 1\", \"3 0\", \"? 1 3\") == \"no\"\nassert solution(\"1 1\", \"3 0\", \"? 1 3\") == \"no\"\nassert solution(\"1 1\", \"3 0\", \"? 1 3\") == \"no\"\nassert solution(\"1 1\", \"3 0\", \"? 1 3\") == \"no\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 3 1\") == \"no\"\nassert solution(\"1 3 1\") == \"yes\"\nassert solution(\"1 3 4\") == \"no\"\nassert solution(\"1 3 5\") == \"yes\"\nassert solution(\"1 3 6\") == \"no\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"yes\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"no\"\nassert solution(\"2\") == \"yes\"\nassert solution(\"3\") == \"no\"\nassert solution(\"4\") == \"no\"\nassert solution(\"5\") == \"yes\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"yes\", \"Test 1 failed\"\nassert solution(\"2 3\") == \"no\", \"Test 2 failed\"\nassert solution(\"3 3\") == \"no\", \"Test 3 failed\"\nassert solution(\"3 4\") == \"yes\", \"Test 3 failed\"\n\n\"\"\""
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\", \"\", \"\") == \"no\"\nassert solution(\"\", \"\", \"\") == \"no\"\nassert solution(\"1\", \"\", \"\") == \"yes\"\nassert solution(\"1\", \"3\", \"\") == \"yes\"\nassert solution(\"1\", \"\", \"a\") == \"yes\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0? 0"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"yes\"\n\nSample Input:\n10 4\n? 1 2\n= 1 2\n? 1 2\nSample Output:\nyes\n\"\"\"\n\nfrom collections import defaultdict\nimport re"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"yes\", \"false\"\nassert solution(\"7\") == \"no\", \"true\"\nassert solution(\"0\") == \"no\", \"false\"\nassert solution(\"0 1\") == \"yes\", \"true\""
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n    \"? 1 3\",\n    \"= 1 8\",\n    \"? 1 3\",\n    ]) == \"no\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 4 6 8 10\") == \"2\"\nassert solution(\"2 4 3 8 10\") == \"2\"\nassert solution(\"1 2 5 6 10\") == \"2\"\nassert solution(\"4 6 3 8 10\") == \"2\"\nassert solution(\"3 2 4 3 10\") == \"3\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 4 6 10 8') == 6\nassert solution('2 3 4 6 10') == 2\nassert solution('1 4 9 10') == 2\nassert solution('2 4 2') == 0\nassert solution('3 2 3') == 0\n"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"2\"\nassert solution([\"4\",\"1\",\"2\",\"3\",\"8\"]) == \"4\"\nassert solution([\"9\",\"9\",\"9\",\"9\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"8\",\"8\",\"8\",\"8\",\"8\"]) == \"4\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"8\",\"8\",\"8\",\"8\",\"8\"]) == \"1\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"5 5 3\") == \"5\"\nassert solution(\"5 5 5 5 5\") == \"5\"\nassert solution(\"100 4 5 2 3 1 4\") == \"2\"\nassert solution
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5,3) == 2\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"./math_5x.test\") == \"2\"\nassert solution(\"5.5\") == \"2\"\nassert solution(\".\") == \"0\"\nassert solution(\"solution\") == \"0\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution) == 5\nassert solution(\"3 4 3\") == 3\nassert solution(\"4 4 2\") == 3\nassert solution(\"1 2 3 4 6\") == 0\nassert solution(\"2 7 3 1\") == 0\n"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"2\"\nassert solution(\"6 7 5 8 9 10\") == \"6\"\nassert solution(\"3 4 3\") == \"4\"\nassert solution(\"4 5 8\") == \"2\"\nassert solution(\"2 5 8 3\") == \"2\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n'''"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('6') == '1'\nassert solution('10') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1083\"\nassert solution(\"2\") == \"1009\"\nassert solution(\"3\") == \"111\"\nassert solution(\"4\") == \"101\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1083\"\nassert solution(\"2\") == \"25\"\nassert solution(\"4\") == \"39\"\nassert solution(\"7\") == \"9\"\nassert solution(\"6\") == \"27\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\") == 0\nassert solution(\"4\") == 4\nassert solution(\"5\") == 0\nassert solution(\"15\") == 0\nassert solution(\"10000\") == 0\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"11\") == \"2\"\nassert solution(\"123\") == \"4\"\nassert solution(\"1234\") == \"12\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    '2'\n    ), '1'\n    '2'\n    '2'\n    '2'\n    '2'\n    '3'\n    '2'\n    '1'\n    '2'\n    '2'\n    '3'\n    '2'\n    '4'\n    '2'\n    '4'\n    '1'\n    '4'\n    '2'\n    '4'\n    '3'\n    '4'\n    '3'\n    '3'\n    '4'\n    '4'\n    '5'\n    '2'\n    '4'\n    '6'\n    '2'\n    '1'\n    '2'\n    '5'\n    '3'\n    '2'\n    '4'\n    '2'\n    '5'\n    '5'\n    '2'\n    '2'\n    '2'\n    '3'\n    '2'\n    '1'\n    '3'\n    '3'\n    '4'\n    '3'\n    '5'\n    '4'\n    '3'\n    '3'\n    '3'\n    '3'\n    '4'\n    '3'\n    '1'\n    '4'\n    '5'\n    '2'\n    '4'\n    '3'\n    '1'\n    '1'\n    '3'\n    '3'\n    '1'\n    '2'\n    '2'\n    '4'\n    '2'\n    '3'\n    '1'\n    '4'\n    '1'\n    '5'\n    '4'\n    '2'\n    '1'\n    '2'\n    '4'\n    '1'\n    '3'\n    '2'\n    '3'\n    '1'\n    '3'\n    '2'\n    '2'\n    '4'\n    '4'\n    '4'\n    '1'\n    '1'\n    '2'\n    '2'\n    '1'\n    '1'\n    '4'\n    '3'\n    '4'\n    '1'\n    '3'\n    '1'\n    '3'\n    '4'\n    '2'\n    '3'\n    '1'\n    '2'\n    '1'\n    '3'\n    '2'\n    '4'\n    '4'\n    '3'\n    '1'\n    '4'\n    '1'\n    '2'\n    '2'\n    '3'\n    '3'\n    '2'\n    '4'\n    '1'\n    '3'\n    '3'\n    '2'\n    '3'\n    '1'\n    '4'\n    '1'\n    '1'\n    '4'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '4'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '3'\n    '1'\n    '1'\n    '2'\n    '1'\n    '4'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '2'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n    '1'\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1')) == '1'\nassert solution('2') == '10'\nassert solution('3') == '10'\nassert solution('4') == '20'\nassert solution('5') == '20'\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1/2\") == \"1\"\nassert solution(\"2/3\") == \"1\"\nassert solution(\"2/7\") == \"1\"\nassert solution(\"4/5\") == \"0\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '11'\nassert solution('3') == '6'\nassert solution('4') == '15'\nassert solution('5') == '20'\n"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('What is a word') == 'Yes'\nassert solution('What is not a word') == 'No'\nassert solution('Hollow words') == 'No'\nassert solution('The quick brown fox jumps over the lazy dog.') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n\"\"\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\n'''\n\nimport math\n\nt = int(input())\nn = int(input())\n\nfor i in range(0, n):\n    string = input()\n    string = string.split()\n    str_len = len(string)\n    for i in range(0, t):\n        count = 0\n        if i == 0:\n            ans = math.inf\n        else:\n            if string[i] == '?':\n                count += 1\n            else:\n                count += 0\n            if str_len - i >= count:\n                ans = min(ans, count)\n        if ans == math.inf:\n            ans = count\n        else:\n            ans = min(ans, count)\n    print(ans)\n"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, 2) == '2'\nassert solution(12, 2) == '3'\nassert solution(12, 10) == '10'\nassert solution(20, 2) == '20'\nassert solution(50, 2) == '1'\n"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3') == '0'\nassert solution('4 2') == '0'\nassert solution('4 2 3') == '0'\nassert solution('4 1 2 3') == '0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"How much is 6 times 9? 42\") == 2\nassert solution(\"How much is 9 times 6? 42\") == 2.0000000000\nassert solution(\"Is there intelligent life on Earth? Probably\") == \"No\"\nassert solution(\"What is the air speed velocity of an unladen swallow? African\") == \"Unknown\"\n\"\"\""
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2.0000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"a\") == 1.0\nassert solution(\"c\") == 1.0\nassert solution(\"d\") == 1.0\nassert solution(\"e\") == 1.0\nassert solution(\"f\") == 1.0\n"
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1.2'\n\nSample Input:\n5 5\nWhat is 5 plus 5? 7\nWhat is 5 times 5? 40\nWhat is 5 times 7? 60\nWhat is 3 times 7? 30\nWhat is 3 times 5? 60\nWhat is 5 times 5? 40\nWhat is 1 times 7? 70\nWhat is 1 times 5? 70\nWhat is 4 times 5? 75\nWhat is 4 times 7? 40\nWhat is 4 times 5? 70\n\nassert solution(stdin) == '1.2'\n\"\"\"\n\nimport sys\n\nSTDIN = open(file='../stdin.txt', mode='r').readlines()\nsys.stdin = open(file='../stdin.txt', mode='r').readlines()\n\nMAX_VALUE = 100"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"monkey\", \"lion\", \"penguin\", \"monkey\", \"penguin\", \"penguin\", \"lion\", \"monkey\", \"monkey\"]) == \"IMPOSSIBLE\"\nassert solution([\"lion\", \"monkey\", \"monkey\", \"monkey\", \"monkey\", \"monkey\"]) == \"POSSIBLE\"\nassert solution([\"lion\", \"penguin\", \"monkey\", \"monkey\", \"penguin\", \"penguin\", \"monkey\"]) == \"POSSIBLE\"\nassert solution([\"monkey\", \"monkey\", \"monkey\", \"penguin\", \"monkey\", \"monkey\", \"monkey\"]) == \"IMPOSSIBLE\"\nassert solution([\"monkey\", \"monkey\", \"monkey\", \"penguin\", \"monkey\", \"monkey\", \"penguin\"]) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"POSSIBLE\"\nassert solution(stdin) == \"IMPOSSIBLE\"\nassert solution(stdin) == \"FALSE ALARM\"\nassert solution(stdin) == \"penguin 1 monkey penguin lion\"\n\n'''"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\"map\", \"tree\", \"monkey\", \"penguin\", \"lion\", \"monkey\", \"penguin\", \"tree\", \"fox\", \"lion\", \"monkey\"]) == \"FALSE ALARM\"\nassert solution(\n    [\"monkey\", \"penguin\", \"lion\", \"tree\", \"fox\", \"fox\", \"fox\"]) == \"IMPOSSIBLE\"\nassert solution(\n    [\"map\", \"lion\", \"penguin\", \"tree\", \"fox\", \"fox\"]) == \"IMPOSSIBLE\"\nassert solution(\n    [\"map\", \"tree\", \"monkey\", \"fox\", \"fox\"]) == \"POSSIBLE\"\nassert solution(\n    [\"map\", \"tree\", \"monkey\", \"fox\", \"lion\", \"penguin\", \"fox\", \"fox\", \"fox\"]) == \"POSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 2 1 3 5 2 4 3 6 3 2 4 3 5\") == \"IMPOSSIBLE\"\nassert solution(\n    \"1 2 1 3 4 3 4 4 3 2 3 3 4 3 2 3\") == \"FALSE ALARM\"\nassert solution(\n
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1 monkey 2\n3 monkey 1\n5 monkey 4\n\"\"\") == 'false alarm'\nassert solution(\"\"\"\n1 monkey 2\n2 monkey 1\n1 monkey 1\n\"\"\") == 'false alarm'\nassert solution(\"\"\"\n1 monkey 2\n1 monkey 1\n1 monkey 1\n\"\"\") == 'false alarm'\nassert solution(\"\"\"\n1 monkey 1\n1 monkey 1\n1 monkey 1\n\"\"\") == 'false alarm'\nassert solution(\"\"\"\n1 monkey 2\n1 monkey 1\n2 monkey 2\n\"\"\") == 'false alarm'\n"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"monkey 2 lion penguin\") == \"POSSIBLE\"\nassert solution(\"lion 3 monkey penguin\") == \"IMPOSSIBLE\"\nassert solution(\"penguin 1 monkey\") == \"FALSE ALARM\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('monkey 2 lion penguin') == 'POSSIBLE'\nassert solution('lion 3 monkey penguin lion') == 'POSSIBLE'\nassert solution('penguin 1 monkey') == 'IMPOSSIBLE'\nassert solution('penguin 1 elephant') == 'POSSIBLE'\nassert solution('penguin 2 elephant') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 3 4 5 6 7 8 9 10 10\") == \"POSSIBLE\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom typing import *\nfrom pathlib import Path\n\nimport numpy as np\nfrom pydantic import BaseModel\n\nMap: List[List[str]] = [\n    [\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n        [\"m\", \"M\", \"M\", \"m\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\"],\n"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"monkey 2 lion penguin\") == \"FALSE ALARM\"\nassert solution(\"monkey 3 monkey penguin lion\") == \"POSSIBLE\"\nassert solution(\"monkey 1 monkey penguin lion\") == \"POSSIBLE\"\nassert solution(\"monkey 1 monkey penguin 1\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution) == \"4(1)4(3)3 found\"\nassert solution(solution) == \"4(1)4(3)3 found\"\nassert solution(solution) == \"4(1)4(3)3 found\"\nassert solution(solution) == \"4(1)4(3)3 found\"\nassert solution(solution) == \"4(1)4(3)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"4(1)4(3)3 found\"\nassert solution(input) == \"random sequence\"\n\"\"\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"random sequence\"\nassert solution(input()) == \"random sequence (6, 1, 7, 3, 5, 0, 0, 4, 8, 8, 7, 9, 9, 6, 1, 5, 2, 3, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 8, 7, 6, 1, 8, 7, 0, 9, 3, 6, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3, 2, 5, 1, 8, 7, 0, 4, 4, 6, 3,"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 4 1 2 3\") == \"1 2 (3 1)3 found\"\nassert solution(\"3 4 2\") == \"1 2 (3 1)3 found\"\nassert solution(\"4 3\") == \"1 2 (3 1)3 found\"\nassert solution(\"1 1\") == \"1 1 found\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11\") == \"1 2 (3 1)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"4(1)4(3)3 found\"\n\"\"\""
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['4', '7', '9', '5', '3', '5', '3', '4', '6', '8', '4', '2', '6', '8', '5', '8', '5', '3', '0', '2', '3', '3', '6', '9', '5', '0', '4', '0', '1', '2', '0', '0', '6', '9', '2', '0', '7', '0', '0', '2', '0', '0', '2', '0', '0', '0', '6', '1', '0', '0', '0', '6', '1', '0', '0', '0', '6', '2', '0', '0', '0', '1', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"4\", \"7\", \"9\", \"5\", \"9\", \"6\", \"3\", \"3\", \"2\", \"6\", \"8\", \"4\", \"5\", \"6\", \"8\", \"7\", \"7\", \"7\", \"8\"]) == \"random sequence\"\nassert solution([\"4\", \"7\", \"9\", \"5\", \"9\", \"6\", \"3\", \"3\", \"2\", \"6\", \"8\", \"4\", \"5\", \"6\", \"8\", \"7\", \"7\", \"7\", \"8\"]) == \"random sequence\"\nassert solution([\"4\", \"7\", \"9\", \"5\", \"9\", \"6\", \"3\", \"3\", \"2\", \"6\", \"8\", \"4\", \"5\", \"6\", \"8\", \"7\", \"7\", \"7\", \"8\"]) == \"random sequence\"\nassert solution([\"4\", \"7\", \"9\", \"5\", \"9\", \"6\", \"3\", \"3\", \"2\", \"6\", \"8\", \"4\", \"5\", \"6\", \"8\", \"7\", \"7\", \"7\", \"8\"]) == \"random sequence\"\nassert solution([\"4\", \"7\", \"9\", \"5\", \"9\", \"6\", \"3\", \"3\", \"2\", \"6\", \"8\", \"4\", \"5\", \"6\", \"8\", \"7\", \"7\", \"7\", \"8\"]) == \"random sequence\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"triple correlation 4(1)4(3)3 found\"\nassert solution(stdin) == \"triple correlation 4(1)4(3)3 found\"\n\nassert solution(stdin) == \"random sequence: 4(2)0(0)0(0)0(0)0(1)0(1)1(1)1(1)1(1)0(0)0(0)0(0)0(0)0(0)0(0)0(0)0(0)0(0)1(0)0(0)0(0)0(0)0(0)0(0)0(0)0(0)0(0)0(0)0(0)0(0)0(0)1(1)0(1)0(1)0(1)1(1)0(1)1(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)1(1)1(1)1(1)1(1)0(1)0(1)1(1)0(1)1(1)0(1)1(1)0(1)1(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)1(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)1(1)0(1)1(1)1(1)0(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)1(1)0(1)0(1)1(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)1(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1)0(1"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"40.5\"\nassert solution(\"2 2\") == \"40.0\"\nassert solution(\"2 2\") == \"40\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution({\n    1: 1,\n    2: 3,\n    3: 2,\n    4: 4,\n    5: 2,\n    6: 2,\n    7: 2,\n    8: 3,\n    9: 4,\n    10: 2,\n    11: 2,\n    12: 2,\n    13: 2,\n    14: 2,\n    15: 2,\n    16: 2,\n    17: 2,\n    18: 2,\n    19: 2,\n    20: 2,\n    21: 2,\n    22: 2,\n    23: 3,\n    24: 2,\n    25: 2,\n    26: 2,\n    27: 2,\n    28: 2,\n    29: 2,\n    30: 2,\n    31: 2,\n    32: 2,\n    33: 2,\n    34: 2,\n    35: 2,\n    36: 2,\n    37: 2,\n    38: 2,\n    39: 2,\n    40: 2,\n    41: 2,\n    42: 2,\n    43: 2,\n    44: 2,\n    45: 2,\n    46: 2,\n    47: 2,\n    48: 2,\n    49: 2,\n    50: 2,\n    51: 2,\n    52: 2,\n    53: 2,\n    54: 2,\n    55: 2,\n    56: 2,\n    57: 2,\n    58: 2,\n    59: 2,\n    60: 2,\n    61: 2,\n    62: 2,\n    63: 2,\n    64: 2,\n    65: 2,\n    66: 2,\n    67: 2,\n    68: 2,\n    69: 2,\n    70: 2,\n    71: 2,\n    72: 2,\n    73: 2,\n    74: 2,\n    75: 2,\n    76: 2,\n    77: 2,\n    78: 2,\n    79: 2,\n    80: 2,\n    81: 2,\n    82: 2,\n    83: 2,\n    84: 2,\n    85: 2,\n    86: 2,\n    87: 2,\n    88: 2,\n    89: 2,\n    90: 2,\n    91: 2,\n    92: 2,\n    93: 2,\n    94: 2,\n    95: 2,\n    96: 2,\n    97: 2,\n    98: 2,\n    99: 2,\n    100: 2,\n    101: 2,\n    102: 2,\n    103: 2,\n    104: 2,\n    105: 2,\n    106: 2,\n    107: 2,\n    108: 2,\n    109: 2,\n    110: 2,\n    111: 2,\n    112: 2,\n    113: 2,\n    114: 2,\n    115: 2,\n    116: 2,\n    117: 2,\n    118: 2,\n    119: 2,\n    120: 2,\n    121: 2,\n    122: 2,\n    123: 2,\n    124: 2,\n    125: 2,\n    126: 2,\n    127: 2,\n    128: 2,\n    129: 2,\n    130: 2,\n    131: 2,\n    132: 2,\n    133: 2,\n    134: 2,\n    135: 2,\n    136: 2,\n    137: 2,\n    138: 2,\n    139: 2,\n    140: 2,\n    141: 2,\n    142: 2,\n    143: 2,\n    144: 2,\n    145: 2,\n    146: 2,\n    147: 2,\n    148: 2,\n    149: 2,\n    150: 2,\n    151: 2,\n    152: 2,\n    153: 2,\n    154: 2,\n    155: 2,\n    156: 2,\n    157: 2,\n    158: 2,\n    159: 2,\n    160: 2,\n    161: 2,\n    162: 2,\n    163: 2,\n    164: 2,\n    165: 2,\n    166: 2,\n    167: 2,\n    168: 2,\n    169: 2,\n    170: 2,\n    171: 2,\n    172: 2,\n    173: 2,\n    174: 2,\n    175: 2,\n    176: 2,\n    177: 2,\n    178: 2,\n    179: 2,\n    180: 2,\n    181: 2,\n    182: 2,\n    183: 2,\n    184: 2,\n    185: 2,\n    186: 2,\n    187: 2,\n    188: 2,\n    189: 2,\n    190: 2,\n    191: 2,\n    192: 2,\n    193: 2,\n    194: 2,\n    195: 2,\n    196: 2,\n    197: 2,\n    198: 2,\n    199: 2,\n    200: 2,\n    201: 2,\n    202: 2,\n    203: 2,\n    204: 2,\n    205: 2,\n    206: 2,\n    207: 2,\n    208: 2,\n    209: 2,\n    210: 2,\n    211: 2,\n    212: 2,\n    213: 2,\n    214: 2,\n    215: 2,\n    216: 2,\n    217: 2,\n    218: 2,\n    219: 2,\n    220: 2,\n    221: 2,\n    222: 2,\n    223: 2,\n    224: 2,\n    225: 2,\n    226"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"40.5\"\n\"\"\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"40.5\"\n\"\"\""
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"40.5\"\n\"\"\"\nfrom math import pi\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\nprint(round(sum(s) / pi))\n"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '40.5'\n\"\"\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 0 0 0 0\") == \"40.5\"\nassert solution(\"2 3 4 5\") == \"18\"\nassert solution(\"2 3 4 5 6 7 8 9\") == \"23\"\nassert solution(\"2 3 4 5 6 7 8 9 0 0\") == \"12\"\nassert solution(\"1 3 4 5\") == \"0\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin: str\n    ) == \"40.5\"\n\nSample Input:\n4 2\n1 2\n3 2\n1 3\nSample Output:\n2\nassert solution(\n    stdin: str\n    ) == \"2\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"40.5\"\nassert solution(\"3 5\") == \"40.5\"\nassert solution(\"3 4\") == \"40.5\"\nassert solution(\"3 4\") == \"40.5\"\nassert solution(\"3 5\") == \"40.5\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, 3) == 3.5\nassert solution(15, 5) == 13.5\nassert solution(24, 10) == 37.5\nassert solution(27, 11) == 40.5\nassert solution(36, 12) == 17.5\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input().split(\" \")\n) == \"Impossible\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"12\", \"3\", \"5\"]) == \"2 4 6\"\nassert solution([\"3\", \"2\", \"4\", \"1\"]) == \"1\"\nassert solution([\"4\", \"3\", \"1\", \"2\"]) == \"1\"\nassert solution([\"5\", \"5\", \"1\"]) == \"1\"\nassert solution([\"1\", \"5\", \"3\", \"4\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2017'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == '6'\nassert solution('2 2 1987') == '6'\nassert solution('2 3 1987') == '6'\nassert solution('1 3 1987') == '6'\nassert solution('1 4 1987') == '6'\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 4 1987\") == \"Impossible\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2020\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 1 1987\") == \"1999\"\nassert solution(\"1 11987\") == \"1999\"\nassert solution(\"2 21987\") == \"1999\"\nassert solution(\"1 31987\") == \"1999\"\nassert solution(\"2 41987\") == \"1999\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"1\"\nassert solution(\"333\") == \"2\"\nassert solution(\"64\") == \"3\"\nassert solution(\"12345\") == \"8\"\nassert solution(\"1234\") == \"4\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"N 0 1\") == \"impossible\"\nassert solution(\"N 0 1 C\") == \"0\"\nassert solution(\"N 0 1 C C\") == \"1\"\nassert solution(\"N 1 0\") == \"impossible\"\nassert solution(\"N 1 0 C\") == \"1\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('N0N0N0N0N') == 'impossible'\nassert solution('N0N0N0N0N0') == '0'\nassert solution
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'impossible'\nassert solution(stdin) == 'impossible'\nassert solution(stdin) == 'impossible'\nassert solution(stdin) == 'impossible'\nassert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(list(map(int, stdin.split('\\n')))) == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"impossible\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"0 1 2\") == \"3\"\nassert solution(\"0 1\") == \"impossible\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"N 1 0 1\") == \"impossible\"\nassert solution(\"N 1 0 2\") == \"1\"\nassert solution(\"N 1 0 3\") == \"1\"\nassert solution(\"N 1 0 4\") == \"2\"\nassert solution(\"N 1 0 5\") == \"3\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0, 1, 2, 3, 4, 5) == 'impossible'\nassert solution(0, 1, 2, 3, 4, 5, 3) == '2'\nassert solution(0, 1, 2, 3, 4, 5, 2) == '3'\nassert solution(0, 1, 2, 3, 4, 5, 2, 3) == '3'\nassert solution(0, 1, 2, 3, 4, 5, 2, 2) == '3'\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 7') == \"impossible\"\nassert solution('2 4') == \"impossible\"\nassert solution('3 2') == \"2\"\nassert solution('3 4') == \"2\"\nassert solution('3 4 1') == \"3\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"A\", 1) == \"impossible\"\nassert solution(\"B\", 2) == \"impossible\"\nassert solution(\"C\", 1) == \"impossible\"\nassert solution(\"D\", 2) == \"impossible\"\nassert solution(\"E\", 2) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('N 1 2'), \"N 1 2\"\nassert solution('C 1 2'), \"C 1 2\"\nassert solution('C 1'), \"C 1\"\nassert solution('N 1'), \"N 1\"\nassert solution('N 3'), \"N 3\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"(())\") == \"1\"\nassert solution(\"()(()\") == \"0\"\nassert solution(\"((()))\") == \"0\"\nassert solution(\"(((()))\") == \"0\"\nassert solution(\"(())())\") == \"1\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"()()\") == \"()()\"\nassert solution(\"((()\")) == \"()()\"\nassert solution(\"((()()))\") == \"()()()\"\nassert solution(\"((())())\") == \"()()()\"\nassert solution(\"())((()\") == \"()()\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"((())()))\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '10'\nassert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '1'\nassert solution(input) == '2'\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"(()())\") == \"()(())\"\nassert solution(\"(((((\"))\nassert solution(\"((((()(()()((()\"\nassert solution(\"((((()\"\nassert solution(\"((()\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('()()((()()' ) == 5\n\nSample Input:\n3\n($)\n(((()))\nSample Output:\n4\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"(())()\\\") == \"()\"\nassert solution(\"()()(()\") == \"()()\"\nassert solution(\"(((()()()))())()\") == \"((())()())()\"\nassert solution(\"(()((()()()))(()(()()()())()\") == \"(()())()()()()()\"\n\"\"\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"(())\") == 1\nassert solution(\"((())\") == 2\nassert solution(\"(())\") == 1\nassert solution(\"(((()))\") == 2\nassert solution(\"())())\") == 0\n"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"()()(())\") == \"()()(())\"\nassert solution(\"(((()\n)())\n\"\"\""
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"(())\") == \"()()()()\"\nassert solution(\"(()())\") == \"()()()(()\"\nassert solution(\"()((()\") == \"()(()())()\"\nassert solution(\"((()()))\") == \"()()()()(()()\"\nassert solution(\"((()()(())\") == \"()()()()(())\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"9\\n\"\n    \"377 a\\n\"\n    \"455 h\\n\"\n    \"180 a\\n\"\n    \"211 a\\n\"\n    \"134 a\\n\"\n    \"46 h\\n\"\n    \"111 h\\n\"\n    \"213 h\\n\"\n    \"17 a\\n\"\n    \"15\\n\"\n    \"1 2\\n\"\n    \"1 4\\n\"\n    \"1 6\\n\"\n    \"2 3\\n\"\n    \"2 4\\n\"\n    \"2 5\\n\"\n    \"3 5\\n\"\n    \"4 6\\n\"\n    \"4 7\\n\"\n    \"5 7\\n\"\n    \"7 8\\n\"\n    \"8 9\\n\"\n    \"9 8\\n\"\n    \"9 7\\n\"\n    \"9 6\\n\"\n    \"9 5\\n\"\n    \"9 4\\n\"\n    \"9 3\\n\"\n    \"9 2\\n\"\n    \"9 1\\n\"\n    \"10 9\\n\"\n    \"10 8\\n\"\n    \"10 7\\n\"\n    \"10 6\\n\"\n    \"10 5\\n\"\n    \"10 4\\n\"\n    \"10 3\\n\"\n    \"10 2\\n\"\n    \"10 1\\n\"\n    \"11 9\\n\"\n    \"11 8\\n\"\n    \"11 7\\n\"\n    \"11 6\\n\"\n    \"11 5\\n\"\n    \"11 4\\n\"\n    \"11 3\\n\"\n    \"11 2\\n\"\n    \"11 1\\n\"\n    \"12 9\\n\"\n    \"12 8\\n\"\n    \"12 7\\n\"\n    \"12 6\\n\"\n    \"12 5\\n\"\n    \"12 4\\n\"\n    \"12 3\\n\"\n    \"12 2\\n\"\n    \"12 1\\n\"\n    \"13 9\\n\"\n    \"13 8\\n\"\n    \"13 7\\n\"\n    \"13 6\\n\"\n    \"13 5\\n\"\n    \"13 4\\n\"\n    \"13 3\\n\"\n    \"13 2\\n\"\n    \"13 1\\n\"\n    \"14 9\\n\"\n    \"14 8\\n\"\n    \"14 7\\n\"\n    \"14 6\\n\"\n    \"14 5\\n\"\n    \"14 4\\n\"\n    \"14 3\\n\"\n    \"14 2\\n\"\n    \"14 1\\n\"\n    \"15 9\\n\"\n    \"15 8\\n\"\n    \"15 7\\n\"\n    \"15 6\\n\"\n    \"15 5\\n\"\n    \"15 4\\n\"\n    \"15 3\\n\"\n    \"15 2\\n\"\n    \"15 1\\n\"\n    \"16 9\\n\"\n    \"16 8\\n\"\n    \"16 7\\n\"\n    \"16 6\\n\"\n    \"16 5\\n\"\n    \"16 4\\n\"\n    \"16 3\\n\"\n    \"16 2\\n\"\n    \"16 1\\n\"\n    \"17 9\\n\"\n    \"17 8\\n\"\n    \"17 7\\n\"\n    \"17 6\\n\"\n    \"17 5\\n\"\n    \"17 4\\n\"\n    \"17 3\\n\"\n    \"17 2\\n\"\n    \"17 1\\n\"\n    \"18 9\\n\"\n    \"18 8\\n\"\n    \"18 7\\n\"\n    \"18 6\\n\"\n    \"18 5\\n\"\n    \"18 4\\n\"\n    \"18 3\\n\"\n    \"18 2\\n\"\n    \"18 1\\n\"\n    \"19 9\\n\"\n    \"19 8\\n\"\n    \"19 7\\n\"\n    \""
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"377 a\") == \"110\"\nassert solution(\"455 h\") == \"153\"\nassert solution(\"180 a\") == \"235\"\nassert solution(\"211 a\") == \"134\"\nassert solution(\"134 a\") == \"46\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1303, 'incorrect'"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"85293\"\n\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a.\nSample Input:\n3\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin),'return nothing'"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('a b a b a b a b a') == '60893'\nassert solution('a b a b a b a b a') == '60889'\nassert solution('a b a b a b a b a b a b a') == '60889'\nassert solution('a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1 1 1 1 1') == '85293'\nassert solution('1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n        [1, 2, 3],\n        [1, 3, 4],\n        [2, 3, 4],\n        [2, 4, 5]\n    ]\n) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 5\n\nSample Input:\n5\n1 2\n1 3\n2 4\n3 4\n4 5\nSample Output:\n5\n"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\", \"1\", \"1\"]) == \"5\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"5\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"5\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"5\"\n\nThe above test checks if the graph is a simple graph. So we can count the number of subgraphs that contain a single pair of vertices. So we can break up our input into a set of all the nodes and a set of edges.\n\nHere we get a graph with one cycle:\n\nN = 3\nE = 2\n\nV = 3\n\nA = {\n    1,\n    2,\n    3\n}\nB = {\n    2,\n    4\n}\nA contains a cycle; B contains a cycle (including cycle 1)\n\nBecause the graph is a simple graph, the number of spanning unicylic subgraphs is 1\n\nTODO\nInput:\nThe first line contains two integers, $V$ and $E$, representing the number of vertices and edges of the graph $G$ respectively. ($1 \\leq V \\leq 17, 0 \\leq E \\leq V(V-1)/2$.)\n\nThe following $E$ lines each contains two integers $A_ i$ and $B_ i$, representing an edge $(A_ i, B_ i)$. It is guaranteed that $1 \\leq A_ i < B_ i \\leq V$ and as the graph is simple, no two pairs represent the same edge.\n\nOutput:\nOutput one integer, representing the number of spanning unicylic subgraphs."
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 1 3\") == \"5\"\nassert solution(\"3 1 1 3 3\") == \"2\"\nassert solution(\"3 4 1 2 3\") == \"1\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == 5\n"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"1\", \"1\", \"2\", \"3\", \"2\", \"1\", \"1\", \"1\", \"2\", \"1\", \"2\", \"3\", \"1\", \"2\", \"3\", \"1\", \"2\", \"3\"]) == \"5\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 4') == '1'\nassert solution('2 3') == '1'\nassert solution('3 4') == '2'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 1\n1 2\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\"\"\") == 5\nassert solution(\"\"\"1 1\n1 2\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12\n1 13\n2 13\n1 14\n2 14\n1 15\n2 15\n1 16\n2 16\n1 17\n2 17\n1 18\n2 18\n1 19\n2 19\n1 20\n2 20\n1 21\n2 21\n1 22\n2 22\n1 23\n2 23\n1 24\n2 24\n1 25\n2 25\n1 26\n2 26\n1 27\n2 27\n1 28\n2 28\n1 29\n2 29\n1 30\n2 30\n1 31\n2 31\n1 32\n2 32\n1 33\n2 33\n1 34\n2 34\n1 35\n2 35\n1 36\n2 36\n1 37\n2 37\n1 38\n2 38\n1 39\n2 39\n1 40\n2 40\n1 41\n2 41\n1 42\n2 42\n1 43\n2 43\n1 44\n2 44\n1 45\n2 45\n1 46\n2 46\n1 47\n2 47\n1 48\n2 48\n1 49\n2 49\n1 50\n2 50\n1 51\n2 51\n1 52\n2 52\n1 53\n2 53\n1 54\n2 54\n1 55\n2 55\n1 56\n2 56\n1 57\n2 57\n1 58\n2 58\n1 59\n2 59\n1 60\n2 60\n1 61\n2 61\n1 62\n2 62\n1 63\n2 63\n1 64\n2 64\n1 65\n2 65\n1 66\n2 66\n1 67\n2 67\n1 68\n2 68\n1 69\n2 69\n1 70\n2 70\n1 71\n2 71\n1 72\n2 72\n1 73\n2 73\n1 74\n2 74\n1 75\n2 75\n1 76\n2 76\n1 77\n2 77\n1 78\n2 78\n1 79\n2 79\n1 80\n2 80\n1 81\n2 81\n1 82\n2 82\n1 83\n2 83\n1 84\n2 84\n1 85\n2 85\n1 86\n2 86\n1 87\n2 87\n1 88\n2 88\n1 89\n2 89\n1 90\n2 90\n1 91\n2 91\n1 92\n2 92\n1 93\n2 93\n1 94\n2 94\n1 95\n2 95\n1 96\n2 96\n1 97\n2 97\n1 98\n2 98\n1 99\n2 99\n1 100\n2 100\n1 101\n2 101\n1 102\n2 102\n1 103\n2 103\n1 104\n2 104\n1 105\n2 105\n1 106\n2 106\n1 107\n2 107\n1 108\n2 108\n1 109\n2 109\n1 110\n2 110\n1 111\n2 111\n1 112\n2 112\n1 113\n2 113\n1 114\n2 114\n1 115\n2 115\n1 116\n2 116\n1 117\n2 117\n1 118\n2 118\n1 119\n2 119\n1 120\n2 120\n1 121\n2 121\n1 122\n2 123\n1 124\n2 124\n1 125\n2 125\n1 126\n2 126\n1 127\n2 127\n1 128\n2 128\n1 129\n2 129\n1 130\n2 130\n1 131\n2 131\n1 132\n2 132\n1 133\n2 133\n1 134\n2 134\n1 135\n2 135\n1 136\n2 136\n1 137\n2 137\n1 138\n2 138\n1 139\n2 139\n1 140\n2 140\n1 141\n2 141\n1 142\n2 142\n1 143\n2 143\n1 144\n2 144\n1 145\n2 145\n1 146\n2 146\n1 147\n2 147\n1 148\n2 148\n1 149\n2 149\n1 150\n2 150\n1 151\n2 151\n1 152\n2 152\n1 153\n2 153\n1 154\n2 154\n1 155\n2 155\n1 156\n2 156\n1 157\n2 157\n1 158\n2 158\n1 159\n2 159\n1 160\n2 160\n1 161\n2 161\n1 162\n2 162\n1 163\n2 163\n1 164\n2 164\n1 165\n2 165\n1 166\n2 166\n1 167\n2 167\n1 168\n2 168\n1 169\n2 169\n1 170\n2 170\n1 171\n2 171\n1 172\n2 172\n1 173\n2 173\n1 174\n2 174\n1 175\n2 175\n1 176\n2 176\n1 177\n2 177\n1 178\n2 178\n1 179\n2 179\n1 180\n2 180\n1 181\n2 181\n1 182\n2 182\n1 183\n2 183\n1 184\n2 184\n1 185\n2 185\n1 186\n2 186\n1 187\n2 187\n1 188\n2 188\n1 189\n2 189\n1 190\n2 190\n1 191\n2 191\n1 192\n2 192\n1 193\n2 193\n1 194\n2 194\n1 195\n2 195\n1 196\n2 196\n1 197\n2 197\n1 198\n2 198\n1 199\n2 199\n1 200\n2 200\n1 201\n2 201\n1 202\n2 202\n1 203\n2 203\n1 204\n2 204\n1 205\n2 205\n1 206\n2 206\n1 207\n2 207\n1 208\n2 208\n1 209\n2 209\n1 210\n2 210\n1 211\n2 211\n1 212\n2 212\n1 213\n2 213\n1 214\n2 214\n1 215\n2 215\n1 216\n2 216\n1 217\n2 217\n1 218\n2 218\n1 219\n2 219\n1 220\n2 220\n1 221\n2 221\n1 222\n2 222\n1 223\n2 223\n1 224\n2 224\n1 225\n2 225\n1 226\n2 226\n1 227\n2 227\n1 228\n2 228\n1 229\n2 229\n1 230\n2 230\n1 231\n2 231\n1 232\n2 232\n1 233\n2 233\n1 234\n2 234\n1 235\n2 235\n1 236\n2 236\n1 237\n2 237\n1 238\n2 238\n1 239\n2 239\n1 240\n2 240\n1 241\n2 241\n1 242\n2 242\n1 243\n2 243\n1 244\n2 244\n1 245\n2 245\n1 246\n2 246\n1 247\n2 247\n1 248\n2 248\n1 249\n2 249\n1 250\n2 250\n1 251\n2 251\n1 252\n2 252\n1 253\n2 253\n1 254\n2 254\n1 255\n2 255\n1 256\n2 256\n1 257\n2 257\n1 258\n2 258\n1 259\n2 259\n1 260\n2 260\n1 261\n2 261\n1 262\n2 262\n1 263\n2 263\n1 264\n2 264\n1 265\n2 265\n1 266\n2 266\n1 267\n2 267\n1 268\n2 268\n1 269\n2 269\n1 270\n2 270\n1 271\n2 271\n1 272\n2 272\n1 273\n2 273\n1 274\n2 274\n1 275\n2 275\n1 276\n2 276\n1 277\n2 277\n1 278\n2 278\n1 279\n2 279\n1 280\n2 280\n1 281\n2 281\n1 282\n2 282\n1 283\n2 283\n1 284\n2 284\n1"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['3 caterpillar', '3 pupa', '7 butterfly', '3 dove', '3 pigeon', '7 aaabaaajss', '7 mouse', '7 electromouse', '7 electromouse', '250 electromouse', '1500 rat', '2000 aaabaaajss', '2500 pigeon', '3000 butterfly', '4000 aaabaaajss', '4000 pupa', '4000 puppy', '4000 pupa', '4000 pupa', '4000 pupa', '4000 pupa']) == '5100'\nassert solution(['3 caterpillar', '3 pupa', '7 butterfly', '3 dove', '3 pigeon', '7 aaabaaajss', '7 mouse', '7 electromouse', '7 electromouse', '250 electromouse', '1500 rat', '2000 aaabaaajss', '2500 pigeon', '3000 butterfly', '4000 aaabaaajss', '4000 pupa', '4000 puppy', '4000 pupa', '4000 pupa', '4000 pupa', '4000 pupa']) == '50050'\nassert solution(['3 caterpillar', '3 pupa', '7 butterfly', '3 dove', '3 pigeon', '7 aaabaaajss', '7 mouse', '7 electromouse', '7 electromouse', '250 electromouse', '1500 rat', '2000 aaabaaajss', '2500 pigeon', '3000 butterfly', '4000 aaabaaajss', '4000 pupa', '4000 puppy', '4000 pupa', '4000 pupa', '4000 pupa']) == '500020'\nassert solution(['3 caterpillar', '3 pupa', '7 butterfly', '3 dove', '3 pigeon', '7 aaabaaajss', '7 mouse', '7 electromouse', '7 electromouse', '250 electromouse', '1500 rat', '2000 aaabaaajss', '2500 pigeon', '3000 butterfly', '4000 aaabaaajss', '4000 pupa', '4000 puppy', '4000 pupa', '4000 pupa']) == '502500'\nassert solution(['3 caterpillar', '3 pupa', '7 butterfly', '3 dove', '3 pigeon', '7 aaabaaajss', '7 mouse', '7 electromouse', '250 electromouse', '1500 rat', '2000 aaabaaajss', '2500 pigeon', '3000 butterfly', '4000 aaabaaajss', '4000 pupa', '4000 puppy', '4000 puppy', '4000 pupa', '4000 pupa']) == '50000'\n"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4\"), \"4 does not exist in this family\"\nassert solution(\"1\"), \"1 does not exist in this family\"\nassert solution(\"1 2 3 4 5 6 7\"), \"6 does not exist in this family\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 188 189 190 191 191 192 193 194 195 196 197 198 199 200 200 201 201 202 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 219 220 221 222 223 224 225 226 227 228 228 229 230 230 231 232 233 234 235 236 237 237 238 238 239 240 241 240 242 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 1\nassert solution(4) == 3\nassert solution(6) == 3\nassert solution(7) == 3\nassert solution(8) == 5\n"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5100\"\nassert solution(input().split()) == \"5100\"\nassert solution(input().split()) == \"5100\"\nassert solution(input().split()) == \"5100\"\nassert solution(input().split()) == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5100\"\nassert solution(stdin) == \"5100\"\nassert solution(stdin) == \"5100\"\nassert solution(stdin) == \"5100\"\nassert solution(stdin) == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"7 3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n3 mouse 1 electromouse\\n5 rat\\n0 electromouse\\n500 electromouse\\n1000 electromouse\\n1500 rat\\n2000 aaabaaajss\\n2500 pigeon\\n3000 butterfly\\n3 pole\\n0 pole\\n0 pole\\n0 pole\\n3 pole\\n2 pole\\n0 pole\\n0 pole\\n3 pole\\n4 pole\\n0 pole\\n0 pole\\n3 pole\\n3 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n2 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n3 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole\\n0 pole"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\") == \"0\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"3 2 7\") == \"6\"\nassert solution(\"3 2 1\") == \"0\"\nassert solution(\"3 3 3\") == \"0\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == 5100\nassert solution(a) == \"5100\"\nassert solution(a) == \"5100\"\nassert solution(a) == \"5100\"\nassert solution(a) == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\")\".split()) == \"1500\""
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1 1 0 0 0\") == -1\nassert solution(\"1 1 1 1 1 1 1\") == 0\nassert solution(\"1 1 1 1 1 1 1 2\") == -1\nassert solution(\"1 1 1 1 1 1 1 2 3 4\") == 6\nassert solution(\"1 1 1 1 1 1 1 2 3 4 5\") == -1"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"No solution\"\n\"\"\"\nfrom itertools import groupby"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10\\n2\\n1\\n1\\n1') == -1\nassert solution('1\\n2') == 0\nassert solution('1 2\\n1 3\\n2 4\\n3 5\\n1 2 4\\n1 6\\n2 3 5\\n3 4') == 6\n\n'''"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1 0 1\", \"1 0 0\", \"0 0 1\", \"0 0 0\", \"0 0 0\"]) == \"1 1\"\nassert solution([\"0 1 0\", \"0 1 0\", \"0 0 0\", \"1 1 0\", \"0 0 0\", \"0 0 0\"]) == \"1 1\"\nassert solution([\"0 0 0\", \"0 0 0\", \"1 0 0\", \"1 1 0\", \"0 0 0\", \"0 0 0\"]) == \"2\"\nassert solution([\"1 0 1\", \"1 0 0\", \"0 0 1\", \"0 0 0\", \"0 0 0\"]) == \"1 1\"\nassert solution([\"1 0 1\", \"1 0 0\", \"0 0 1\", \"0 0 0\", \"0 0 0\"]) == \"1\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"10\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 3 1 2 3') == '2 3 1 3 3'\nassert solution('1 2 1 2 1') == '2 1 1 2 1'\nassert solution('1 2 1 2 1') == '1 2 1 2 1'\nassert solution('1 1') == '1 1'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 2 3 4 1 2 4 5') == '3'\nassert solution('5 2 1 2 1') == '1'\nassert solution('2 1 R 6') == '0'\nassert solution('2 1 R 3') == '1'\nassert solution('2 2 O 3') == '3'\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 2 1\") == \"10\"\nassert solution(\"10 2 2\") == \"11\"\nassert solution(\"10 2 3\") == \"11\"\nassert solution(\"10 2 4\") == \"11\"\nassert solution(\"10 3 2\") == \"11\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"4 1 O 3 O R 6 1 O R R 5 1 O O R R 6 1 O R R 5 1 O O R R 6 1 O R R 5 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 5 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6 1 O R R 6"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), 'The value of solution() must be valid'\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 4 3 1 4 1 2 1 1 1 1 1 1 1 1 2 3 3 3 3 3 3 4 2 3 3 2 1 1 1 2 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 2 1 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 1 2 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 2 1 1 2 1 1 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1 1 1 1 2 1 1 2 1 1 2 1 2 1 2 1 1 1 2 1 2 1 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 1 1 1 2 1 2 1 1 2 1 1 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == \"1\"\nassert solution(\"0 2 0\") == \"0\"\nassert solution(\"3 1 0\") == \"0\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,3) == 1\nassert solution(2,2) == 2\nassert solution(2,1) == 3\nassert solution(1,2) == 3\nassert solution(1,3) == 3\n"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\" 0 0 0\n 0 0 1\n 1 0 2\n 0 1 2\n 2 0 3\n\"\"\") == \"1\"\nassert solution(\"\"\" 0 0 0\n 0 0 1\n 0 0 2\n 1 0 3\n 1 1 0\n 1 1 2\n 1 2 3\n 2 0 3\n 2 1 0\n 2 2 3\n 3 0 3\n3 1 0\n3 2 0\n3 3 0\n\"\"\") == \"3\"\nassert solution(\"\"\" 0 0 0\n 0 0 1\n 0 0 2\n 1 0 3\n 1 1 0\n 1 2 3\n 0 1 0\n 2 2 3\n 2 0 3\n 2 0 2\n 2 1 1\n 3 1 3\n3 0 3\n3 0 0\n3 1 2\n3 2 1\n3 2 2\n3 3 0\n3 3 2\n\"\"\") == \"3\"\nassert solution(\"\"\" 0 0 0\n 0 0 1\n 1 0 2\n 0 1 2\n 0 0 3\n 0 0 4\n 0 0 5\n 0 0 6\n 0 1 7\n 0 2 0\n 1 1 7\n 1 2 4\n 1 2 5\n 0 2 3\n1 2 2\n1 3 4\n1 2 4\n1 3 5\n1 3 3\n1 4 2\n1 5 1\n2 0 4\n2 1 4\n2 2 5\n2 3 3\n2 4 2\n3 0 3\n3 0 3\n3 0 2\n3 2 1\n3 4 4\n3 5 2\n4 0 3\n4 1 2\n4 2 1\n4 3 4\n4 4 1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 0 0 0 1 1 1 0 1 1 0 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \n    print(\n    )\n    )\n\nSample Output:\n5\n"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == '4'\nassert solution(6) == '4'\nassert solution(4) == '4'\nassert solution(0) == '0'\nassert solution(1) == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\n5\n5\n3 4 1 2 2\n2 3 1 4 3\n3 2 4 5\n3 1 4 3\n1 4 1 1 1 1\n5\n2 4 3 3\n1 2 4\n1 4\n4 3\n1 4\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3 2 1 2\"\nassert solution(\"4 3 4\") == \"3 1 2 4\"\nassert solution(\"3 3 3 3\") == \"3 3\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '2'\nassert solution(inp) == '3'\nassert solution(inp) == '4'\n\"\"\"\n\nfrom heapq import heappop, heappush\n\nclass Solution:\n    def largestSize(self, n: int, edges: List[List[int]]) -> int:\n        G = [[] for _ in range(n)]\n        for e in edges:\n            u, v = e[0], e[1]\n            G[u].append(v)\n            G[v].append(u)\n        \n        def dfs(start):\n            visited = [start]\n            queue = [start]\n            \n            while queue:\n                u = queue.pop(0)\n                for v in G[u]:\n                    if v not in visited:\n                        visited.append(v)\n                        queue.append(v)\n            \n            return visited\n        \n        visited = []\n        for i in range(n):\n            if i not in visited:\n                visited.append(i)\n                visited = dfs(i)\n        \n        return len(visited)"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 0 1\"\"\"\n), \"1\"\nassert solution(\"\"\"1 0 0\"\"\"\n), \"0\"\nassert solution(\"\"\"1 0 1 1\"\"\"\n), \"1\"\nassert solution(\"\"\"0 1 1 0 1\"\"\"\n), \"0\"\nassert solution(\"\"\"0 1 1 0 0\"\"\"\n), \"0\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.962962962963'\nprint(solution(input()))\n"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('(2-6)+(2-6)' == '((2-6)+(2-6))') == '1'\nassert solution('(2-6)+(2-6)') == '0'\nassert solution('(2-6)+(2-6)') == '0.8727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 0.95, \"Wrong answer\"\nassert solution(2) == 0.95, \"Wrong answer\"\nassert solution(3) == 0.95, \"Wrong answer\"\nassert solution(4) == 0.95, \"Wrong answer\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"N1\", \"N2\"]) == \"0.962962962963\"\nassert solution([\"N1\", \"N3\", \"N4\"]) == \"0.962962962963\"\nassert solution([\"N1\", \"N2\", \"N3\", \"N4\"]) == \"0.962962962963\"\nassert solution([\"N1\", \"N2\", \"N3\", \"N4\", \"N5\"]) == \"0.962962962963\"\nassert solution([\"N1\", \"N2\", \"N3\", \"N4\", \"N5\", \"N6\", \"N7\", \"N8\"]) == \"0.962962962963\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '0.962962962963'\n\"\"\""
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1.0\"\nassert solution(\"15\") == \"0.9359230731433\"\nassert solution(\"16\") == \"0.987654321\"\nassert solution(\"18\") == \"1.0\"\nassert solution(\"27\") == \"0.9658815976672\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5') == '0.962962962963'\nassert solution('5') == '0.962962962963'\nassert solution('5') == '0.962962962963'\nassert solution('5') == '0.962962962963'\nassert solution('5') == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 1\") == \"0.962962962963\"\nassert solution(\"1 1\") == \"0.0\"\nassert solution(\"1 0\") == \"0.0\"\nassert solution(\"2 0 0\") == \"0.0\"\nassert solution(\"1 0\") == \"0.0\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1.00\"\n\"\"\"\nfrom functools import lru_cache\nimport numpy as np"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n1\\n1\\n2\\n2\\n3\\n4\\n4\\n3\\n5\\n1\") == \"0.962962962963\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('40000000') == '0 0'\n\"\"\"\nimport math\n\nN = int(stdin.strip())"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 40000000\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3') == '0 0'\nassert solution('1') == '0 1'\nassert solution('2') == '0 2'\nassert solution('5') == '0 40000000'\nassert solution('0') == '0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == '0 0'\nassert solution(12) == '0 3'\nassert solution(32) == '0 5'\nassert solution(47) == '0 7'\nassert solution(111) == '0 10'\n"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"40000000\") == \"40000000\"\nassert solution(\"30000000\") == \"10000000\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0 10\") == \"10000000\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), 'Input is not valid.'\n\"\"\""
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0 40000000 0\"\nassert solution(input()) == \"0 40000000 40000000\"\n\"\"\"\n\nfrom sys import stdin, setrecursionlimit\n\nsetrecursionlimit(10 ** 6)"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 2\nassert solution(6) == 3\n"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"No answer\"\nassert solution(stdin) == \"1\", \"No answer\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10') == '1'\nassert solution('101') == '1'\nassert solution('6') == '2'\nassert solution('30') == '2'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Wrong input\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3 5 5 2) == 2\nassert solution(4 5 5 2) == 1\nassert solution(4 5 5 3) == 3\nassert solution(4 5 5 4) == 4\nassert solution(4 5 5 5) == 7\n"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 5 5 2\") == \"24\"\nassert solution(\"4 5 5 3\") == \"0\"\nassert solution(\"4 5 6 9\") == \"84\"\nassert solution(\"7 2 3 5 7\") == \"24\"\nassert solution(\"17 12 13 1\") == \"24\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"2 3 3 4\") == \"2\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"5 3 6 2\") == \"1\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"solution() should not fail\"\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"12\"\nassert solution(\"3 5 5 2\") == \"6\"\nassert solution(\"4 6 5 2 3\") == \"23\"\nassert solution(\"1 4 6 7 8\") == \"12\"\nassert solution(\"4 5 5 2\") == \"5\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 5 6 2\") == \"24\"\nassert solution(\"5 5 5 2\") == \"24\"\nassert solution(\"1 3\") == \"24\"\nassert solution(\"4 6 5 2\") == \"24\"\nassert solution(\"1 1 1\") == \"24\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 2 4 2 0 3 0\") == \"3\"\nassert solution(\n    \"4 4 1 2 3 3 3\") == \"3\"\nassert solution(\n    \"5 2 3 2 1\") == \"0\"\nassert solution(\n    \"1 1 0 0\") == \"0\"\nassert solution(\n    \"0 1 1 0\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"\\\n5\n0 0 0\n0 -10 0\n0 0 0\n1 -10 0\n0 0 0\n3 3 3\n0 0 0\n0 -10 0\n0 0 0\n0 -10 0\n0 -10 0\n1 -10 0\n0 0 0\n0 -10 0\n0 0 0\n3 3 3\n\"\"\") == 2\n\nSample Output:\n1\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0' or solution(stdin) == '1'\n\nSample Input:\n5 3\n1 2\n1 2\n1 3\n2\n1\n5\nSample Output:\n6\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0-5 0\") == \"2\"\nassert solution(\"0-5 5\") == \"2\"\nassert solution(\"0 0 -5 0\") == \"0\"\nassert solution(\"0 0 -5 5\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nassert solution(\"100 1000\") == 22\nassert solution(\"100 100\") == 22\nassert solution(\"1 1 1 1\") == 3\nassert solution(\"5 3\") == 0\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"-8 -3 -2 -1\") == \"0\"\nassert solution(\"1.9 -3\") == \"2\"\nassert solution(\"0.25\") == \"2\"\nassert solution(\"1.25 -1 -1\") == \"2\"\nassert solution(\"-1 -2 -1\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    {\n    'k': 2,\n    'n': 2,\n    'a': 1,\n    'b': 0,\n    't': 0,\n    'i': 1,\n    'j': 0\n    }\n) == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 0 0') == '0'\nassert solution('2 0 0.25') == '0'\nassert solution('2 0 0.2 1.25') == '1.25'\nassert solution('2 0 0.25 0.2 0.2 1.25') == '0.25'\nassert solution('2 0 0.25 0.2 0.2 1.25 0.5') == '0.25'\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == 4\nassert solution(\"5 1\") == 2\nassert solution(\"5 2\") == 3\nassert solution(\"5 3\") == 1\nassert solution(\"5 4\") == 0\n"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 5) == 0\nassert solution(3, 5) == 1\nassert solution(3, 5) == 2\nassert solution(3, 5) == 1\nassert solution(3, 5) == 1\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == 12, '13 is not a valid number'\nassert solution(15) == 12, '15 is not a valid number'\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1211\") == \"12\"\nassert solution(\"1223456789\") == \"123456789\"\nassert solution(\"1222233445566778899\") == \"1222233445566778899\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 12, 'incorrect output'\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"12 14\"\nassert solution(input()) == \"12 14\"\nassert solution(input()) == \"12 14\"\nassert solution(input()) == \"12 14\"\nassert solution(input()) == \"12 14\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 12\n\nSample Input:\n5\nSample Output:\n5\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 14\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(12) == 12\nassert solution(13) == 14\nassert solution(1213) == 1214\nassert solution(123456789) == 123456789\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"12345\"\nassert solution(\"123445566778899\") == \"123445566778899\"\nassert solution(\"123413579\") == \"123413579\"\nassert solution(\"958\") == \"958\"\nassert solution(\"958500\") == \"958500\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(12) == \"12 14\"\nassert solution(1) == \"1\"\nassert solution(0) == 0\nassert solution(\"34\") == \"34\"\nassert solution(\"8\") == \"8\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(12) == 12\nassert solution(13) == 14\nassert solution(1234) == 1234\n\"\"\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == 5\nassert solution(\"1 0 0\") == 1\nassert solution(\"1 0 1\") == 1\nassert solution(\"3 0 1\") == 3\nassert solution(\"3 0 0\") == 3\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3) == 3\nassert solution(3, 0, 0, 0, 0, 1, 0, 1, 0, 0) == 4\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10\n\"\"\""
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 2 4\\n3 1 3\\n1 1 1\\n1 1 2\") == \"1\"\nassert solution(\"2 2\\n2 2\\n2 2\") == \"2\"\nassert solution(\"2 0\\n3 0\\n0 1\\n3 0\") == \"3\"\nassert solution(\"4 0\\n3 1\\n3 0\\n0 1\") == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 0 0') == '0'\nassert solution('1 0 1') == '1'\nassert solution('3 0 1') == '2'\nassert solution('3 0 0') == '0'\nassert solution('3 0 1') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"0\"\nassert solution(\"1111\") == \"0\"\nassert solution(\"0123\") == \"0\"\nassert solution(\"000\") == \"0\"\nassert solution(\"0000\") == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 0 0\") == 0\nassert solution(\"1 0 1\") == 1\nassert solution(\"3 0 1\") == 3\nassert solution(\"3 0 0\") == 3\nassert solution(\"3 0 1\") == 3\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == -1\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1 1\"\nassert solution(\"2 3 4\") == \"1 2 3 4 1\"\nassert solution(\"2 3 4 5\") == \"1 2 3 4 5 1\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1 or solution(stdin) == -2 or solution(stdin) == -3\n\nSample Input:\n4\n1 2\n1 3\n1 4\n3 5\n3 1\n5 3\n4 2\nSample Output:\n1 1 1 1 1 2 3 4 5 4\n\nSample Input:\n10\n1 2 3 4 5 6 7 8 9 10\n\nSample Output:\n1 1 1 1 1 1 2 3 4 5 6 7 8 9 10 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 196 197 198 199 200 201 202 202 203 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 246 247 248 249 250 251 252 253 254 255 255 257 257 258 259 260 261 262 261 263 265 265 266 267 268 269 270 271 272 273 274 275 275 276 277 278 279 280 281 282 283 284 285 286 287 287 288 289 290 291 291 292 293 294 295 296 297 298 299 300 301 301 302 303 303 304 305 306 308 309 310 311 313 314 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 328 329 330 330 331 332 333 334 333 335 336 337 336 338 339 340 341 341 341 342 343 343 344 349 349 350 351 351 352 353 354 355 356 357 358 359 360 361 366 367 366 369 366 371 366 373 374 374 375 376 377 378 379 380 380 381 382 383 383 384 385 386 387 388 389 390 390 391 392 392 393 394 395 396 396 395 396 396 395 396 396 395 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 3') == '1 1 1 1 1'\nassert solution('2 3') == '1 1 2 3'\nassert solution('2 4') == '1 1 2'\nassert solution('2 4') == '1 1 2 2'\nassert solution('2 5') == '1 1 2 3 5'\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == 1\nassert solution(\"2 2\") == 1\nassert solution(\"1 3\") == 2\nassert solution(\"2 3\") == 3"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '1 1'\nassert solution(input) == '2 2'\nassert solution(input) == '1 3'\nassert solution(input) == '1 1'\nassert solution(input) == '2 2'\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 3) == -1\nassert solution(4, 3) == 1\nassert solution(4, 4) == 1\nassert solution(4, 5) == 1\nassert solution(4, 6) == 1\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"1 1\"\nassert solution(\"2 3\") == \"1 1\"\nassert solution(\"1 3 1 2\") == \"1 1\"\nassert solution(\"1 2 1 3 2\") == \"1 1\"\nassert solution(\"1 2 1 3 2 4\") == \"1 1\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 6\nassert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 6\nassert solution(input()) == 0\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.33333333\"\nassert solution(stdin) == \"2.33333333\"\nassert solution(stdin) == \"3.33333333\"\nassert solution(stdin) == \"10.00001111\"\nassert solution(stdin) == \"1.00000001\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"2.5\"\nassert solution(\"2 3\") == \"0.5\"\nassert solution(\"2 4\") == \"0.5\"\nassert solution(\"3 5\") == \"0.75\"\nassert solution(\"3 6\") == \"0.8\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3.33333333\"\nassert solution(stdin) == \"3.33333333\"\nassert solution(stdin) == \"3.33333333\"\nassert solution(stdin) == \"3.33333333\"\nassert solution(stdin) == \"3.33333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2.33333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"10.33333333\"\nassert solution(\"10 10\") == \"10.33333333\"\nassert solution(\"4 10\") == \"10.33333333\"\nassert solution(\"1 2\") == \"10.33333333\"\nassert solution(\"0 0\") == \"0.00000000\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2.33333333\"\nassert solution(stdin) == \"1.6666666666666665\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1.5\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3.33333333'\nassert solution(stdin) == '3.33333333'\nassert solution(stdin) == '3.33333333'\nassert solution(stdin) == '3.33333333'\nassert solution(stdin) == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '2.33333333'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1.33333333'\nassert solution(stdin) == '1.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"3.33333333\"\nassert solution(\"2 3\") == \"2.33333333\"\nassert solution(\"1 3\") == \"1.33333333\"\nassert solution(\"1 1\") == \"1.33333333\"\nassert solution(\"0 2\") == \"0.33333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1.1 1.2 0\") == \"3.33333333\"\nassert solution(\"1.1 1.3 0\") == \"1.33333333\"\nassert solution(\"1.1 1.3 1\") == \"1.33333333\"\nassert solution(\"1.1 2 1\") == \"2.33333333\"\nassert solution(\"1.1 1.0 2\") == \"1.33333333\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"10 3\") == \"2\"\nassert solution(\"11 1\") == \"3\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(5) == 2\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(int(input()))) == '3'\nassert solution(str(int(input()))) == '2'\nassert solution(str(int(input()))) == '0'\nassert solution(str(int(input()))) == '0'\nassert solution(str(int(input()))) == '0'\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\".\\n\\n.\\n\\n.\\n\") == \"4\"\nassert solution(\".\\n.\\n.\\n\") == \"0\"\nassert solution(\".\\n.\\n.\\n.\\n.\\n\") == \"0\"\nassert solution(\".\\n.\\n.\\n.\\n.\\n\") == \"0\"\nassert solution(\".\\n.\\n.\\n.\\n.\\n\") == \"0\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5 2\"\n) == \"1\"\nassert solution(\n    \"1 3 5\"\n) == \"0\"\nassert solution(\n    \"2 3 4\"\n) == \"2\"\nassert solution(\n    \"1 4 6\"\n) == \"1\"\nassert solution(\n    \"0 1 0\"\n) == \"0\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 3 2\") == \"1\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3\",\"1\",\"3\",\"2\",\"1\",\"4\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\"]) == \"1\"\nassert solution([\"2\",\"3\",\"3\",\"2\",\"3\",\"3\"]) == \"1\"\nassert solution([\"1\",\"3\",\"1\",\"1\",\"2\",\"2\",\"2\",\"3\"]) == \"1\"\nassert solution([\"3\",\"1\",\"3\",\"1\",\"1\",\"4\"]) == \"1\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3,3) == \"2\"\nassert solution(3,4) == \"2\"\nassert solution(3,5) == \"1\"\nassert solution(3,6) == \"0\"\nassert solution(3,7) == \"1\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"Aabb\") == 2\nassert solution(\"Aaa\") == 3\nassert solution(\"ABC\") == 3\nassert solution(\"ABAB\") == 3\nassert solution(\"BABA\") == 4\n"
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"welcome to test a sample movie about to be played\",\n    \"Also, this movie is not affiliated with any video.\"\n    ), \"The solution string must be one line. The first line is an integer $n$ ($1 \\leq n \\leq 400$), the number of videos in your Watch Later list, and $k$ ($1 \\leq k \\leq 20$), the number of different video types in the list.\"\nassert solution(\n    \"A dog will walk on a white rabbit and sat on a white rabbit.\",\n    \"A dog will walk on a white rabbit and sat on a white rabbit.\"\n    ), \"The solution string must be one line. The first line is an integer $n$ ($1 \\leq n \\leq 400$), the number of videos in your Watch Later list, and $k$ ($1 \\leq k \\leq 20$), the number of different video types in the list.\"\nassert solution(\n    \"dogs are very hungry\",\n    \"Hang on a dog.\"\n    ), \"The solution string must be one line. The first line is an integer $n$ ($1 \\leq n \\leq 400$), the number of videos in your Watch Later list, and $k$ ($1 \\leq k \\leq 20$), the number of different video types in the list.\"\nassert solution(\n    \"The cat sat on a white rabbit.\",\n    \"The dog will walk on a white rabbit.\"\n    ), \"The solution string must be one line. The first line is an integer $n$ ($1 \\leq n \\leq 400$), the number of videos in your Watch Later list, and $k$ ($1 \\leq k \\leq 20$), the number of different video types in the list.\"\nassert solution(\n    \"If you watched a video of type cat, you should watch it again. If you watched a video of type dog, you should watch it again.\",\n    \"If you watched a video of type cat, you should watch it again.\"\n    ), \"The solution string must be one line. The first line is an integer $n$ ($1 \\leq n \\leq 400$), the number of videos in your Watch Later list, and $k$ ($1 \\leq k \\leq 20$), the number of different video types in the list.\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abaa\"), \"aaaaa\"\n\n\nSample Input:\n4 1\naaaaa\nSample Output:\n2\n"
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"abba\",\"abba\",\"abba\"]) == \"2\"\nassert solution([\"abba\",\"aab\",\"bab\",\"bbb\",\"aaaa\",\"aaaaa\",\"aaabbbb\"]) == \"4\"\nassert solution([\"aabb\",\"aabaa\",\"bbaaa\",\"bbbaa\",\"aaaaa\",\"aaaaa\"]) == \"4\"\nassert solution([\"dabba\",\"dabba\",\"dabba\"]) == \"3\"\nassert solution([\"ab\",\"ab\",\"baa\",\"ab\",\"bbaa\",\"abbbb\",\"abbb\"]) == \"4\""
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\nExplanation:\nbouldering videos have the same type as cat videos.\nYou should watch them in every video type before they are watched.\n\"\"\""
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n\n\"\"\"\n\nTest case\n\nsample input:\n\n3\n\nabba\nbaabababab\n\nsample output:\n\n2\n\"\"\""
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 3\n"
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(in_lines := \"3 2\") == \"2\"\nassert solution(in_lines := \"4 2\") == \"2\"\nassert solution(in_lines := \"5 4\") == \"3\"\nassert solution(in_lines := \"\") == \"\"\nassert solution(in_lines := \"one two\") == \"\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4 3') == 3\nassert solution('5 3') == 3\nassert solution('2 3') == 2\nassert solution('3 2') == 2\nassert solution('1 2') == 1\n"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('A', 1, [1, 2, 2, 2]) == 3\nassert solution('A', 2, [1, 2, 2]) == 3\nassert solution('A', 1, [1]) == 1\nassert solution('A', 2, [1, 2, 2]) == 2\nassert solution('A', 3, [1, 2, 2]) == 2\n"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 3 2 4\") == \"3\"\nassert solution(\"1 2 3 1\") == \"1\"\nassert solution(\"1 2 3 1 2\") == \"3\"\nassert solution(\"1 2 3 1 2 3\") == \"1\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['A', 'B', 'C', 'B', 'C', 'B', 'C', 'B', 'C', 'B', 'C']) == 3\nassert solution(['A', 'B', 'B', 'C', 'B', 'C', 'C', 'B', 'B', 'C', 'B', 'C']) == 5\nassert solution(['A', 'B', 'B', 'B', 'B']) == 5\nassert solution(['B', 'A', 'A', 'A', 'A']) == 3\nassert solution(['B', 'A', 'B', 'B', 'B']) == 3\n"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"2 4\"\nassert solution(\"2 3 4 5\") == \"4\"\nassert solution(\"2 3 4 3\") == \"3\"\nassert solution(\"2 2 4 4\") == \"3\"\nassert solution(\"1 3 2 4\") == \"3\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('a,b,c,d,e,f,g,h') == 'a'\nassert solution('a,b,c,d,e,f,g,h,i,j,k,l,m,n') == 'b'\nassert solution('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z') == 'e'\nassert solution('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,z,z,z,z,z,z,z,z,z,z,z,z') == 'g'\nassert solution('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,z,z,z,z,z,z,z,z,z,z,z,z,z') == 'h'\n"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 2 3 4 5\"\n) == \"3\"\nassert solution(\n    \"1 2 3 4 5 6 7\"\n) == \"5\"\nassert solution(\n    \"1 2 3 4 5 7\"\n) == \"7\"\nassert solution(\n    \"1 2 3 4 5 7 6\"\n) == \"6\"\nassert solution(\n    \"1 2 3 4 5 7 6 7\"\n) == \"7\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"3\",\"1\",\"2\",\"2\",\"3\",\"3\",\"3\",\"2\"]\n) == \"3\"\nassert solution(\n    [\"1\",\"1\"]\n) == \"0\"\nassert solution(\n    [\"2\",\"1\",\"1\",\"2\"]\n) == \"1\"\nassert solution(\n    [\"2\",\"2\",\"2\"]\n) == \"2\"\nassert solution(\n    [\"2\",\"3\",\"2\",\"3\",\"2\",\"1\"]\n) == \"3\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"6 6\n6 0\n3 1\n4 1\n3 0\n4 0\n3 1\n4 1\n3 0\n4 1\n3 1\n4 1\n3 1\n4 1\n3 1\n5 1\n1 1\n2 1\n1 0\n0 1\n3 0\n2 3\n1 3\n1 2\n1 3\n3 1\n3 0\n3 0\n3 0\n3 0\n4 1\n5 1\n3 3\n4 3\n3 0\n3 3\n5 1\n4 3\n3 0\n4 0\n3 0\n4 0\n4 1\n3 0\n4 1\n3 1\n4 0\n4 0\n3 0\n3 0\n3 1\n4 0\n4 0\n3 0\n3 0\n3 0\n3 0\n3 1\n4 0\n4 0\n3 1\n4 1\n3 0\n4 0\n4 0\n3 1\n5 1\n1 0\n0 0\n4 1\n2 1\n3 3\n3 1\n4 3\n3 0\n4 3\n3 0\n3 0\n3 0\n4 0\n3 0\n4 0\n3 0\n4 0\n3 0\n4 1\n5 1\n1 0\n0 0\n3 1\n4 0\n3 0\n3 0\n4 0\n4 1\n5 1\n3 0\n4 0\n3 0\n4 0\n4 0\n4 1\n3 0\n4 1\n3 0\n5 1\n2 1\n4 1\n5 1\n3 3\n4 0\n3 0\n4 0\n4 1\n4 3\n4 0\n4 1\n4 0\n4 0\n3 0\n3 0\n4 0\n4 0\n3 0\n4 0\n3 1\n4 0\n3 0\n3 0\n4 0\n4 0\n3 1\n3 0\n3 0\n3 0\n4 0\n5 1\n3 0\n4 0\n4 0\n4 1\n3 0\n3 0\n4 0\n4 0\n3 1\n4 0\n3 0\n4 0\n3 0\n3 0\n3 1\n5 1\n1 0\n3 0\n3 0\n3 0\n3 0\n5 1\n3 0\n3 0\n5 1\n3 0\n3 0\n4 0\n4 0\n4 1\n3 0\n4 0\n4 0\n4 1\n4 1\n3 0\n4 0\n5 1\n3 0\n4 0\n4 0\n4 0\n4 0\n5 1\n3 0\n4 0\n5 1\n4 1\n4 0\n4 0\n5 1\n5 1\n4 0\n3 0\n3 0\n3 0\n3 0\n4 0\n4 0\n4 0\n3 1\n4 1\n4 0\n5 1\n4 0\n5 1\n3 0\n4 0\n4 0\n4 0\n4 0\n3 0\n3 0\n4 0\n4 0\n3 0\n4 0\n4 0\n3 0\n3 0\n4 0\n4 0\n3 1\n4 0\n4 0\n4 0\n3 0\n3 0\n3 0\n4 0\n5 1\n4 0\n4 0\n5 1\n4 0\n3 0\n4 0\n3 0\n4 0\n4 0\n4 0\n3 0\n3 0\n4 0\n3 0\n4 0\n3 0\n4 0\n4 1\n4 0\n4 0\n3 0\n5 1\n4 0\n4 0\n5 1\n4 0\n3 0\n4 0\n3 0\n4 0\n3 0\n4 0\n3 0\n3 0\n4 0\n3 0\n4 0\n3 0\n4 0\n3 0\n3 0\n4 0\n3 0\n3 0\n4 0\n4 0\n5 1\n4 0\n4 0\n4 0\n3 0\n4 0\n3 0\n4 0\n4 0\n4 0\n3 0\n4 0\n3 0\n4 0\n3 0\n4 0\n3 0\n4 0\n5 1\n4 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n4 0\n5 1\n4 0\n4 0\n4 0\n3 0\n3 0\n4 0\n3 0\n4 0\n3 0\n4 0\n4 0\n4 0\n3 0\n3 0\n5 1\n3 0\n3 0\n3 0\n4 0\n4 0\n3 0\n4 0\n4 0\n3 0\n3 0\n5 1\n4 0\n3 0\n3 0\n3 0\n3 0\n4 0\n3 0\n4 0\n4 0\n3 0\n3 0\n4 0\n3 0\n4 0\n3 0\n3 0\n3 0\n3 0\n3 0\n4 0\n4 0\n5 1\n4 0\n3 0\n3 0\n3 0\n3 0\n4 0\n4 0\n3 0\n3 0\n3 0\n3 0\n3 0\n4 0\n4 0\n4 0\n3 0\n3 0\n3 0\n4 0\n3 0\n3 0\n4 0\n4 0\n3 0\n3 0\n4 0\n5 1\n3 0\n3 0\n4 0\n4 0\n4 0\n4 0\n3 0\n3 0\n4 0\n3 0\n3 0\n3 0\n3 0\n4 0\n4 0\n3 0\n3 0\n4 0\n4 0\n3 0\n3 0\n4 0\n3 0\n3 0\n3 0\n3 0\n4 0\n3 0\n3 0\n3 0\n4 0\n4 0\n3 0\n3 0\n4 0\n4 0\n3 0\n3 0\n3 0\n3 0\n3 0\n4 0\n4 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 0\", \"1 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 2\", \"1000 1\", \"1 4\", \"2 3\", \"1000 1\", \"1 2\", \"3 3\", \"2 3\", \"1000 1\", \"1 2\"]) == 5\nassert solution([\"1 0\", \"1 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 2\", \"1000 1\", \"1 4\", \"2 3\", \"1000 1\", \"1 2\", \"3 3\", \"2 3\", \"1000 1\", \"1 2\"]) == 4\nassert solution([\"1 0\", \"1 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 2\", \"1000 1\", \"1 4\", \"2 3\", \"1000 1\", \"1 2\", \"3 3\", \"2 3\", \"1000 1\", \"1 2\"]) == 4\nassert solution([\"1 0\", \"1 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 2\", \"1000 1\", \"1 4\", \"2 3\", \"1000 1\", \"1 2\", \"3 3\", \"2 3\", \"1000 1\", \"1 2\"]) == 3\nassert solution([\"1 0\", \"1 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 2\", \"1000 1\", \"1 4\", \"2 3\", \"1000 1\", \"1 2\", \"3 3\", \"2 3\", \"1000 1\", \"1 2\"]) == 2\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 1\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1000 1\") == \"3\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('{2,0,1}') == '3'\nassert solution('{1,0,1}') == '1'\nassert solution('{1,0,1}') == '3'\nassert solution('{1,0,1}') == '1'\nassert solution('{2,0,1}') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n        [\"1 0\", \"0 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 0\", \"0 1\"]\n    ) == '1'\nassert solution(\n        [\"1 0\", \"0 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 0\", \"0 1\"]\n    ) == '0'\nassert solution(\n        [\"1 0\", \"0 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 0\", \"0 1\"]\n    ) == '0'\nassert solution(\n        [\"1 0\", \"0 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 0\", \"0 1\"]\n    ) == '0'\nassert solution(\n        [\"1 0\", \"0 1\", \"1000 1\", \"1 3\", \"2 3\", \"1 0\", \"0 1\"]\n    ) == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"2\", \"1\", \"0\", \"1000\", \"1\", \"3\", \"0\", \"1\", \"2\"]\n) == \"1\"\nassert solution(\n    [\"1\", \"0\", \"1\", \"1000\", \"3\", \"0\", \"2\", \"3\", \"1000\"]\n) == \"1\"\nassert solution(\n    [\"1\", \"0\", \"1\", \"0\", \"1000\", \"1\", \"3\", \"0\", \"1\"]\n) == \"3\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1000 1\") == \"1\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nSample Input:\n3\n2 2 1\n1 2 1\n2 1 3\n3 2 2\n3 2 3\n1 2 1\n1 2 1\n1 2 1\n1 2 1\nSample Output:\n7\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '7'\nassert solution(input().split(' ')) == '7'\nassert solution(input().split(' ')) == '7'\nassert solution(input().split(' ')) == '7'\nassert solution(input().split(' ')) == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin) == '10'\n"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == \"7\"\n\n\nSample Input:\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\nSample Output:\n4\n"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '7'"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5 3 3\") == \"7\"\nassert solution(\n    \"3 1 3 3 3\") == \"3\"\nassert solution(\n    \"3 1 3 3 3 1\") == \"1\"\nassert solution(\n    \"1 2 3 3\") == \"3\"\nassert solution(\n    \"5 2 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 3\"\n) == \"7\"\nassert solution(\n    \"3 2 2\"\n) == \"5\"\nassert solution(\n    \"3 2 1\"\n) == \"3\"\nassert solution(\n    \"1 2 1\"\n) == \"3\"\nassert solution(\n    \"1 2 3\"\n) == \"7\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3\\n1 2\\n3 2\\n5 2\\n3 2\\n5 1\\n1 3\\n1 1\\n1 3\\n5 2\\n4 2\\n5 3\\n4 1\\n3 4\\n3 2\\n1 3\\n3 2\\n5 2\\n3 2\\n5 2\\n3 1\\n4 3\\n5 3\\n1 1\\n2 1\\n3 2\\n3 2\\n2 1\\n1 1\\n1 3\\n4 3\\n1 3\\n1 3\\n5 2\\n1 3\\n1 1\\n3 2\\n1 1\\n1 2\\n3 2\\n4 2\\n3 2\\n5 1\\n1 3\\n5 2\\n4 2\\n3 2\\n5 3\\n4 2\\n3 1\\n3 2\\n4 2\\n3 2\\n1 1\\n3 2\\n4 2\\n3 2\\n3 2\\n5 2\\n3 2\\n5 2\\n5 1\\n5 3\\n4 3\\n3 2\\n4 2\\n3 2\\n3 2\\n3 1\\n4 2\\n3 2\\n3 2\\n3 2\\n3 2\\n1 1\\n3 2\\n3 2\\n5 2\\n1 3\\n5 2\\n5 2\\n3 2\\n5 3\\n3 2\\n1 2\\n3 1\\n4 2\\n3 2\\n5 2\\n1 1\\n4 2\\n5 3\\n4 2\\n3 2\\n5 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n5 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n1 1\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n1 3\\n3 2\\n3 2\\n5 2\\n1 3\\n3 2\\n3 2\\n3 2\\n3 2\\n5 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"5\"\nassert solution(\"1 2 3\") == \"9\"\nassert solution(\"1 2 1\") == \"4\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"1 2 1\") == \"1\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin\n    [\"5\", \"2\"]\n    [\"linearalgebra\", \"calculus1\", \"calculus2\", \"honorsanalysis1\", \"honorsanalysis2\"]\n    ) == \"20\"\n\"\"\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\") == \"5 2\"\nassert solution(\"linearalgebra\") == \"10 2\"\nassert solution(\"calculus\") == \"10 2\"\nassert solution(\"calculus1\") == \"10 2\"\nassert solution(\"calculus1\") == \"10 2\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '20'\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.count = 0\n\n    def solution(self, stdin: str) -> str:\n        for i in range(int(stdin.split()[0])-1, int(stdin.split()[1])):\n            self.count += 1\n        return str(self.count)"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"50\"\nassert solution(input()) == \"100\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"20\"\nassert solution(input()) == \"50\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '14', \"The solution should be 14\"\nassert solution(input()) == '41', \"The solution should be 41\"\nassert solution(input()) == '5', \"The solution should be 5\"\nassert solution(input()) == '1', \"The solution should be 1\"\nassert solution(input()) == '2', \"The solution should be 2\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    inp := [\n        ['linearalgebra', 'calculus1', 'calculus2', 'honorsanalysis1', 'honorsanalysis2'],\n        [\n            'level', '-1', '-1', '-1', '-1',\n            'level', '-1', '-1', '-1', '-1',\n            'level', '-1', '-1', '-1', '-1'\n        ]\n    ]\n) == '6'\n\nassert solution(\n    inp := [\n        ['level', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1'],\n        ['level', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n    ]\n) == '4'\n"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"20\""
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"20\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('7 4'), 'Expected 7'\nassert solution('1 2'), 'Expected 1'\nassert solution('2 3'), 'Expected 2'\nassert solution('3 4'), 'Expected 3'\nassert solution('3 4 1'), 'Expected 3'\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1 2 1\") == \"1\"\nassert solution(\"3 4 1\") == \"1\"\nassert solution(\"4 3 4 3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 1 2 2') == '1'\nassert solution('2 2 1 2') == '2'\nassert solution('3 3 3 3 3') == '3'\nassert solution('4 4 4 4 4') == '5'\nassert solution('3 3 3 3 3') == '3'\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 2\"\n) == \"3 2\"\nassert solution(\n    \"2 2 3 4\"\n) == \"4 2 3 2\"\nassert solution(\n    \"2 3 1 2\"\n) == \"1 2 3 2\"\nassert solution(\n    \"2 1 2\"\n) == \"1 2 2\"\nassert solution(\n    \"3 1 2\"\n) == \"1 2 2\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == 1\nassert solution(\"1 1 1 1\") == 1\nassert solution(\"1 1 1 2\") == 1\nassert solution(\"1 1 1 3\") == 1\nassert solution(\"1 1 1 4\") == 1\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '6'\n\n\"\"\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4 1 2 3\") == \"6\"\nassert solution(\"2 3 4 1\") == \"6\"\nassert solution(\"1 3 4 2\") == \"6\"\nassert solution(\"2 3 1 4\") == \"6\"\nassert solution(\"1 4 2 3\") == \"6\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"1\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '6'\n'''\n\nfrom collections import defaultdict\nfrom operator import itemgetter\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 2) == 2\nassert solution(5, 3) == 2\nassert solution(4, 3) == 1\nassert solution(4, 4) == 1\nassert solution(2, 3) == 0\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 1\") == \"1 1 2\"\nassert solution(\"2 3 1\") == \"1 1\"\nassert solution(\"3 2 3\") == \"1\"\nassert solution(\"4\") == \"impossible\"\nassert solution(\"1 1\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 5 6 7 8 9 10\") == 11\nassert solution(\"2 1 4 6 7\") == 5\nassert solution(\"1 2 3 4 5 6\") == 4\nassert solution(\"2 2 3 4 5 6 7 8 9 10\") == 9\nassert solution(\"1 2 3 5 8 6 10 10 20 10\") == 5\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\", \"1\", \"2\", \"3\", \"4\", \"5\"]) == \"5\"\nassert solution([\"5\", \"1\", \"2\", \"3\", \"4\", \"2\", \"4\", \"5\"]) == \"impossible\"\nassert solution([\"5\", \"1\", \"2\", \"3\", \"4\", \"5\", \"5\"]) == \"impossible\"\nassert solution([\"5\", \"1\", \"2\", \"3\", \"4\", \"5\", \"5\", \"6\", \"7\"]) == \"impossible\"\nassert solution([\"5\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"5\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\",\"2\",\"2\",\"1\",\"2\"]) == \"1\"\nassert solution([\"3\",\"3\"]) == \"1\"\nassert solution([\"5\",\"6\",\"6\",\"3\",\"1\"]) == \"1\"\nassert solution([\"3\",\"0\",\"2\",\"2\",\"0\"]) == \"2\"\nassert solution([\"3\",\"1\",\"3\",\"1\"]) == \"2\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 1 3\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 1 1\n2\n3\n1 2\n2 3\n1 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n2\n2\n1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5\n10\n10\n20\n10\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 1 1\n2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 1 1\n2 1\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n\nSample Input:\n4\n5 1 3 5\n3 1 2 1 3\n3 2 3 2 4\n2 1 3 2 4\n1 3 2 3 4\n3 1 3 2 4\nSample Output:\n2\n-----Notes-----\nSample case 1: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n1\nSample case 2: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n1\n-----Notes-----\nSample case 3: Input:\n3 2 1 5\n2 1 3 1 4\n1 3 2 1 5\n4 1 3 2 4\n4\nSample case 4: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n2\n-----Notes-----\nSample case 5: Input:\n3 2 3 5\n3 1 2 1 5\n2 2 1 1 4\n1 1 2 3 1 4\n4 1 3 2 4\n4\nSample case 6: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n3\n-----Notes-----\nSample case 7: Input:\n3 2 3 5\n3 1 2 1 5\n2 2 1 1 4\n1 1 2 3 1 4\n4 1 3 2 4\n4\nSample case 8: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n1\n-----Notes-----\nSample case 9: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n0\n-----Notes-----\nSample case 10: Input:\n3 2 3 5\n2 1 2 1 5\n1 2 1 1 4\n4 2 3 2 4\n4\nSample case 11: Input:\n3 2 3 5\n2 1 2 1 5\n1 2 1 1 4\n4 2 3 2 4\n4\nSample case 12: Input:\n3 2 3 5\n2 1 2 1 5\n1 2 1 1 4\n3 2 3 2 4\n4 1 3 2 4\n4\nSample case 13: Input:\n3 2 3 5\n1 1 2 1 5\n2 1 2 1 4\n3 2 3 2 4\n4 1 3 2 4\n4\nSample case 14: Input:\n3 2 3 5\n1 1 2 1 5\n2 1 2 1 4\n3 2 3 2 4\n4 1 3 2 4\n4\nSample case 15: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n1\n-----Notes-----\nSample case 17: Input:\n3\n3 2 3 5\n3 1 2 1 5\n2 1 2 1 4\n1 1 2 3 1 4\n4 1 3 2 4\n4\nSample case 18: Input:\n3\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n1\n-----Notes-----\nSample case 19: Input:\n3\n3 2 3 5\n3 1 2 1 5\n2 1 2 1 4\n1 1 2 3 1 4\n4 1 3 2 4\n4\nSample case 20: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n1\n-----Notes-----\nSample case 21: Input:\n3\n3 2 3 5\n3 1 2 1 5\n2 1 2 1 4\n1 1 2 3 1 4\n4 1 3 2 4\n4\nSample case 22: Input:\n3\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n3\n-----Notes-----\nSample case 23: Input:\n3\n3 2 3 5\n3 1 2 1 5\n2 1 2 1 4\n1 1 2 3 1 4\n4 1 3 2 4\n4\nSample case 24: Input:\n3\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n3\n-----Notes-----\nSample case 25: Input:\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n0\n-----Notes-----\nSample case 27: Input:\n3\n3 2 3 5\n3 1 2 1 5\n2 1 2 1 4\n1 1 2 3 1 4\n4 1 3 2 4\n4\nSample case 28: Input:\n3\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\n5 1 3 5\n5\nOutput:\n0\n-----Notes-----\nSample case 29: Input:\n3\n3 2 3 5\n3 1 2 1 5\n2 1 2 1 4"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2, 2, 0) == 1\nassert solution(2, 0, 1, 0) == 1\nassert solution(2, 1, 1, 1) == 0\nassert solution(2, 2, 2, 2) == 0\nassert solution(2, 3, 3, 2) == 0\n"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 500.0\nassert solution(stdin) == 500.00\nassert solution(stdin) == 500.0\nassert solution(stdin) == 500.0\nassert solution(stdin) == 500.0\n"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\") == \"500.0\"\nassert solution(\"2 3 1\") == \"500.0\"\nassert solution(\"1 1 1\") == \"500.0\"\nassert solution(\"1 3 10\") == \"500.0\"\nassert solution(\"3 10 1\") == \"500.0\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('100 10 10') == '500.00'\nassert solution('10 500 1') == '500.00'\nassert solution('10 500 3') == '500.00'\nassert solution('500 50') == '500.00'\nassert solution('500 50 1') == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('250 250 250') == '500.00'\nassert solution('250 50 250') == '2500.00'\nassert solution('250 100 250') == '2501.00'\nassert solution('250 100 150') == '2501.00'\nassert solution('250 100 250') == '2500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"250 250 0\") == \"500.00\"\nassert solution(\"250 250 250\") == \"500.00\"\nassert solution(\"250 250 750 0\") == \"500.00\"\nassert solution(\"250 250 750 250\") == \"500.00\"\nassert solution(\"250 250 750 750 0\") == \"500.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 6') == '150.00'\nassert solution('100 100') == '12.00'\nassert solution('9 1 2 9 1') == '11.00'\nassert solution('2 1 7 2') == '4.00'\nassert solution('2 1 5 4') == '2.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()), \"solution() is not defined\"\n\"\"\""
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_cases[0]) == '100'\nassert solution(test_cases[1]) == '100'\nassert solution(test_cases[2]) == '100'\nassert solution(test_cases[3]) == '100'\nassert solution(test_cases[4]) == '100'\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"2 10\") == \"1\"\nassert solution(\"2 100 10\") == \"1\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"4 2\") == \"0\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"100\"\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"0\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    int N, M, t;\n    int i;\n    \n    while(i<=N)\n    {\n        i++;\n    }\n    \n    while(t<=N)\n    {\n        t++;\n    }\n    \n    int T;\n    \n    int j;\n    \n    int i,j;\n    \n    j=0;\n    \n    t=1;\n    \n    t=0;\n    \n    j=0;\n    \n    while(i<=N)\n    {\n        if(t>200)\n        {\n            T=t-200;\n            break;\n        }\n        j++;\n        t++;\n        i++;\n    }\n    \n    if(t>200)\n    {\n        T=t-200;\n    }\n    \n    return T;\n}\n\n\"\"\"\n    ) == 8\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 4\") == \"0\"\nassert solution(\"2 3 1\") == \"0\"\nassert solution(\"4 4 10\") == \"0\"\nassert solution(\"2 4 5\") == \"0\"\nassert solution(\"4 4 9\") == \"0\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\"2\",\"3\",\"100\",\"100\",\"10\"]) == \"0\"\nassert solution(\n    [\"2\",\"3\",\"100\",\"100\",\"10\"]) == \"0\"\nassert solution(\n    [\"2\",\"3\",\"100\",\"100\",\"10\"]) == \"0\"\nassert solution(\n    [\"2\",\"3\",\"100\",\"100\",\"10\"]) == \"0\"\nassert solution(\n    [\"2\",\"3\",\"100\",\"100\",\"10\"]) == \"0\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"2\", \"2\", \"2\", \"3\", \"1\"]) == \"0\"\nassert solution([\"2\", \"2\", \"3\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"3\", \"3\"]) == \"0\"\nassert solution([\"1\", \"1\", \"2\", \"1\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\nl = list(map(int, input().split()))\n\nt_lst = []\n\nfor i in range(0, N):\n    t_lst.append(l[i] * (M - 1) / M + l[i])\n\nt_sum = sum(t_lst)\n\nprint(t_sum)\nsys.exit(0)\n"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input_: \"30 50 50 20 50 35\"\n) == \"50 5 25 35\"\nassert solution(\n    input_: \"30 50 50 20 50 35\"\n) == \"50 5 25 35\"\nassert solution(\n    input_: \"60 50 50 20 50 35\"\n) == \"50 5 25 35\"\nassert solution(\n    input_: \"60 50 50 20 50 35\"\n) == \"60 5 25 35\"\nassert solution(\n    input_: \"60 50 50 20 50 35\"\n) == \"60 5 25 35\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 2 3 10\") == \"3\"\nassert solution(\"10 1 10\") == \"1\"\nassert solution(\"10 20 20 30 40 50 60\") == \"3\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 37\n\"\"\""
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"75 50 3 2\") == \"1\"\nassert solution(\"75 50 3 2\") == \"2\"\nassert solution(\"75 50 3 2\") == \"1\"\nassert solution(\"75 50 3 2\") == \"2\"\nassert solution(\"75 50 3 2\") == \"1\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"{1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 189 190 191 191 192 192 193 194 195 196 197 198 199 200 201 201 202 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 226 227 228 229 230 231 232 233 234 235 236 237 237 238 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution((\"7850\", \"7525\", \"2520\", \"35\")), \"Invalid Form\"\n\"\"\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3 2') == '2'\nassert solution('2 4 1') == '2 4 1'\nassert solution('2 5 25 20 50 35') == '2 5 25 20 50 35'\nassert solution('75 5 25 20 50 35') == '75 5 25 20 50 35'\nassert solution('75 5 25 35') == '75 5 25 35'\n"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 1 1 1 1 1\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0 1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('80 50 3 2') == '2'\nassert solution('75 5 25 20 50 35') == '2'\nassert solution('50 5 25 35') == '2'\nassert solution('50 5 25 35') == '2'\nassert solution('75 5 25 20 50 35') == '3'\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 4\"\n    ) == \"AAAA\"\nassert solution(\n    \"2211\"\n    ) == \"A.B.C.\"\nassert solution(\n    \"1112\"\n    ) == \"B.A.B.C.D.E.F.G.H\"\nassert solution(\n    \"1112\"\n    ) == \"F.G.H\"\nassert solution(\n    \"1112\"\n    ) == \"F.G\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2211\") == \"AAAA\"\nassert solution(\"1112\") == \"...A\"\nassert solution(\"1112\") == \"...B\"\nassert solution(\"1112\") == \"...C\"\nassert solution(\"..C\") == \"..C\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"AAAA\"), \"Impossible\"\nassert solution(\"BB..\"), \"Impossible\"\nassert solution(\"BBBB\"), \"Impossible\"\nassert solution(\"..B\"), \"Impossible\"\nassert solution(\"..C\"), \"Impossible\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \".\"\nassert solution(stdin) == \"..\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"..\"\nassert solution(stdin) == \"B\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2211\") == \"BBBB\"\nassert solution(\"1112\") == \"BBBB\"\nassert solution(\"1112\") == \"A\"\nassert solution(\"2211\") == \"AAAA\"\nassert solution(\"1111\") == \"A\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"4\", \"A\"]) == \"A\"\nassert solution([\"2211\", \"1111\", \"1112\"]) == \"BB\"\nassert solution([\"2211\", \"1112\", \"2211\", \"1112\", \"1112\"]) == \"BB\"\nassert solution([\"2211\", \"2211\", \"2211\", \"2211\", \"2211\", \"2211\", \"2211\", \"2211\", \"2211\"]) == \"BB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'A'\n\"\"\"\nimport re\nfrom collections import defaultdict\n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2211\",\"1112\",\"1112\",\"1112\"]) == \"AAAA\"\nassert solution([\"2211\", \"1112\"]) == \"AAAA\"\nassert solution([\"2211\", \"1112\", \"1112\", \"1112\"]) == \"AAAA\"\nassert solution([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z\"\nassert solution([\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\","
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 4, 3, 4, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 1 3 3\") == \"9\"\nassert solution(\n    \"3 4 1 2 3 2\") == \"9\"\nassert solution(\n    \"4 3 1 2 1 3\") == \"9\"\nassert solution(\n    \"4 4 1 2 1 3\") == \"9\"\nassert solution(\n    \"1 4 1 2 1 3\") == \"9\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('AABBACCC') == 'AABBACCC'\nassert solution('ABCDAABB') == 'ABCDAABB'\nassert solution('GATCGGT') == 'GATCGGT'\nassert solution('QWERTYUIOP') == 'QWERTYUIOP'\nassert solution('QWERTYUIOPQWERTYUIOP') == 'QWERTYUIOPQWERTYUIOP'\n"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 3 3\") == \"9\"\nassert solution(\"1 4 1 2 3 2\") == \"9\"\nassert solution(\"4 3 1 2 1 3\") == \"9\"\nassert solution(\"4 4 1 2 2\") == \"6\"\nassert solution(\"1 2 1\") == \"1\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 4 3 3 2') == '9'\nassert solution('3 3 3 3') == '9'\nassert solution('3 3 3 3 2 2 3 2 3 3 3 3') == '9'\n\"\"\""
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abcdefg\\n1234567\\nabcdefg\\n1234567\\nabcdefg\\n12341234') == '9'\nassert solution('a\\nabc\\nb\\ndef\\n') == '9'\nassert solution('a\\na\\nabc\\nb\\ndef\\n') == '9'\nassert solution('a\\na\\nabc\\n1234567\\n12341234') == '1234'\n"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 1 3 3\") == \"9\"\nassert solution(\"3 4 1 2 3 2\") == \"13\"\nassert solution(\"4 3 1 2 1\") == \"12\"\nassert solution(\"4 3 1 2 1 3\") == \"13\"\nassert solution(\"4 3 1 2 1 2\") == \"12\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('0 0 6') == 20.955801\n\"\"\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"20.396078\"\nassert solution(input().upper()) == \"IMPOSSIBLE\"\nassert solution(input().split(\" \")) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 2 8') == '3 4'\nassert solution('0 0 6') == '0 8'\nassert solution('3 4 7') == '3 4'\nassert solution('1 5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"No solution\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 0 6\") == \"20.396078\"\nassert solution(\"1 0 0 0\") == \"9\"\nassert solution
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2.5\""
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2\", \"2\", \"3\", \"0\", \"1\", \"0\", \"1\"]) == \"6\"\nassert solution([\"2\", \"2\", \"3\", \"0\", \"0\", \"0\", \"0\"]) == \"8\"\nassert solution([\"2\", \"2\", \"1\", \"0\", \"0\", \"0\", \"0\"]) == \"6\"\nassert solution([\"2\", \"2\", \"3\", \"0\", \"0\", \"0\", \"0\"]) == \"8\"\nassert solution([\"2\", \"2\", \"3\", \"0\", \"1\", \"0\", \"1\"]) == \"6\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '20.396078', \"Example 1 fails\"\nassert solution(stdin) == '10.527773', \"Example 2 fails\"\nassert solution(stdin) == '13.075556', \"Example 3 fails\"\nassert solution(stdin) == '0.0814979', \"Example 4 fails\"\nassert solution(stdin) == '0.0814979', \"Example 5 fails\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '200.0'\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"20.396078\"\n\n\"\"\"\n\"\"\"\n\nclass Solution:\n    def __init__(self, n: int, s: List[int], t: List[int], q: int):\n        self.n = n\n        self.s = s\n        self.t = t\n        self.q = q\n        self.shortest_path = None\n\n    def solve(self):\n        self.shortest_path = []\n        while self.n > 0:\n            if self.s[0] < self.t[0]:\n                self.shortest_path.append(self.t[0])\n                self.s[0] += self.q\n                self.n -= 1\n            else:\n                self.shortest_path.append(self.s[0])\n                self.t[0] -= self.q\n                self.n -= 1\n            self.s[0] -= self.q\n            self.shortest_path.append(self.s[0])\n\n        print(self.shortest_path)\n        print(self.s)\n        self.shortest_path.pop(0)\n        self.shortest_path.reverse()\n        return \" \".join(self.shortest_path)\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"abcd\") == \"da\"\nassert solution(\"abcd\") == \"ed\"\nassert solution(\"abcdef\") == \"eefggh\"\nassert solution(\"abab\") == \"hg\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"cba\"\nassert solution(\"bc\") == \"bccda\"\nassert solution(\"cc\") == \"bbccda\"\nassert solution(\"dd\") == \"dde\"\nassert solution(\"ee\") == \"eeee\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"abcdefgh\"\nassert solution(stdin) == \"bcdefgh\"\nassert solution(stdin) == \"defgh\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"qwertyuiopasdfghjklmwxcvbnm\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"abca\", \"bc\", \"cd\", \"da\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\"]) == \"bcd\"\nassert solution([\"abca\", \"bc\", \"cd\", \"da\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\"]) == \"dbca\"\nassert solution([\"abca\", \"bc\", \"cd\", \"da\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\"]) == \"d\"\nassert solution([\"abca\", \"bc\", \"cd\", \"da\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\"]) == \"c\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abca\") == \"bca\"\nassert solution(\"bc\") == \"cc\"\nassert solution(\"ab\") == \"ac\"\nassert solution(\"\") == \"\"\nassert solution(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"baaca\"\nassert solution(\"bc\") == \"bc\"\nassert solution(\"aab\") == \"aaab\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"a\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"bca\"\nassert solution(\"abc\") == \"caab\"\nassert solution(\"abcdefg\") == \"cdefgg\"\nassert solution(\"abcdefgh\") == \"dgdfghjklmnpqrstuvwxyz\"\nassert solution(\"aabccba\") == \"aabccba\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a c\") == \"a\"\nassert solution(\"a b\") == \"a\"\nassert solution(\"a b d\") == \"a\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"abca\", \"bc\", \"c\", \"da\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"yy\", \"zz\"]) == \"z\"\nassert solution(\n    [\"abca\", \"bc\", \"c\", \"da\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"yy\", \"z\"]) == \"b\"\nassert solution(\n    [\"abca\", \"bc\", \"c\", \"da\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"yy\", \"z\"]) == \"a\"\nassert solution(\n    [\"abca\", \"bc\", \"c\", \"da\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"yy\", \"z\"]) == \"a\"\nassert solution(\n    [\"abca\", \"bc\", \"c\", \"da\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"yy\", \"z\"]) == \"a\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('abca') == 'babc'\nassert solution('bcaca') == 'abc'\nassert solution('bccda') == 'cda'\nassert solution('bcde') == 'de'\nassert solution('abcde') == 'abdc'\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 10\nassert solution(stdin) == 16\nassert solution(stdin) == 7\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"robot\") == \"robot\"\nassert solution(\"robot\") == \"robot\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"15\"\n'''\n\n\nclass Solution:\n    def longestCommonPrefix(self, words: List[str]) -> str:\n        if len(words) == 0:\n            return \"\"\n        prefix = min(words, key=lambda w: len(w))\n        for i in range(len(words)):\n            if len(words[i]) < len(prefix):\n                prefix = prefix[:len(words[i])]\n        return prefix\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"12\"\nassert solution(inp) == \"10\"\nassert solution(inp) == \"16\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"def\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '15'\nassert solution(stdin) == '10'\nassert solution(stdin) == '14'\nassert solution(stdin) == '12'\nassert solution(stdin) == '13'\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11, \"14\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == 24, f\"Expected {24}, got {solution(stdin)}\"\nassert solution == 2, f\"Expected {2}, got {solution(stdin)}\"\nassert solution == 4, f\"Expected {4}, got {solution(stdin)}\"\nassert solution == 6, f\"Expected {6}, got {solution(stdin)}\"\nassert solution == 1, f\"Expected {1}, got {solution(stdin)}\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"robot\") == \"robot\"\nassert solution(\"robot1\") == \"robot1\"\nassert solution(\"robot2\") == \"robot2\"\nassert solution(\"robot3\") == \"robot3\"\nassert solution(\"robot4\") == \"robot4\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"TEST\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution) == 'JQ IRKEYFG EXQ', 'Wrong output'\nassert solution(solution) == 'JQ IRKEYFG EXQ', 'Wrong output'\nassert solution(solution) == 'JQ IRKEYFG EXQ', 'Wrong output'\nassert solution(solution) == 'JQ IRKEYFG EXQ', 'Wrong output'\nassert solution(solution) == 'JQ IRKEYFG EXQ', 'Wrong output'\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(strToInt(\"JQ IRKEYFG EXQ\")) == \"TEST\"\nassert solution(strToInt(\"AABAGEXCKIRQ\")) == \"ABBAGEXCKIRQ\"\nassert solution(strToInt(\"ABBAGEXCKIRQ\")) == \"ABBAGEXCKIRQ\"\nassert solution(strToInt(\"JQIRKEYFGEXQ\")) == \"JQIRKEYFGEXQ\"\nassert solution(strToInt(\"JQIRKEYFGEXQ\")) == \"JQIRKEYFGEXQ\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('JQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('JQ IRKEYFG EXQ EXQ') == 'TEST'\nassert solution('JQ IRKEYFG EXQ EXQ EXQ') == 'TEST'\nassert solution
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'THIS IS A TEST'\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"JQ IRKEYFG EXQ\"), \"solution\"\nassert solution(\"JQ IRKEYFG EXQ\") == \"JQ IS A TEST\", \"solution\"\nassert solution
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['JQ', 'IR', 'KEY', 'F', 'G', 'TEST', 'T', 'EQ', 'TEST']) == 'TEST'\nassert solution(['JQ', 'IR', 'KEY', 'F', 'G', 'TEST', 'T', 'EQ', 'TEST']) == 'I'\nassert solution(['JQ', 'IR', 'KEY', 'F', 'G', 'TEST', 'T', 'EQ', 'TEST']) == 'J'\nassert solution(['JQ', 'IR', 'KEY', 'F', 'G', 'TEST', 'T', 'EQ', 'TEST']) == 'I'\nassert solution(['JQ', 'IR', 'KEY', 'F', 'G', 'TEST', 'T', 'EQ', 'TEST']) == 'J'\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"I love chess\") == \"TEST\"\nassert solution(\"dogcatdog\") == \"hgjt\"\nassert solution(\"gundig\") == \"gu\"\nassert solution(\"JQIRKEYFG EXQ\") == \"A\"\nassert solution(\"JQIRKEYFG EXQ\") == \"E\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"I love JQ IRKEYFG EXQ\") == \"TEST\"\nassert solution(\"JQ IRKEYFG EXQ\") == \"IS A TEST\"\nassert solution(\"JQ IRKEYFG EXQ\") == \"JQ IS A TEST\"\nassert solution(\"JQ IRKEYFG EXQ\") == \"JQ IS A TEST\"\nassert solution(\"JQ IRKEYFG EXQ\") == \"JQ IS A TEST\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'HACKER', 'incorrect stdin'\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"12.5\") == [\"5\",\"4\",\"6\"]\nassert solution(\"125.5\") == [\"5\",\"4\",\"6\",\"5\"]\nassert solution(\"4.5\") == [\"4\",\"5\"]\nassert solution(\"1.5\") == [\"1\",\"2\",\"3\"]\nassert solution(\"1.5e10\") == [\"1.5\",\"10\",\"1.5e10\"]\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"6.6\") == \"136\"\nassert solution(\"4.1\") == \"13\"\nassert solution(\"2773\") == \"12\"\nassert solution(\"671234732\") == \"671234732\"\nassert solution(\"9e6\") == \"9e6\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin =\n    r\"1234.6\"\n
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1234\") == \"1234\"\nassert solution(\"2422\") == \"2224\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"2212\") == \"2212\"\nassert solution(\"5778\") == \"5075\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"no solution\"\nassert solution(stdin), \"no solution\"\nassert solution(stdin), \"no solution\"\nassert solution(stdin), \"no solution\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == [\"135\", \"270\", \"135135\", \"270270\"]\n\"\"\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1.2') == ['1.2']\nassert solution('1.3') == ['1.3']\nassert solution('1.4') == ['1.4']\nassert solution('1.5') == ['1.5']\nassert solution('1.6') == ['1.6']\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"123\") == [\"135\",\"270\",\"135\",\"270270\"]\nassert solution(\"2.6\") == [\"135\",\"270\",\"135\",\"270270\"]\nassert solution(\"3\") == [\"135\",\"270\",\"135\",\"270\",\"270270\"]\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2.6\"]) == [\"135\"]\nassert solution([\"0.987654321\"]) == [\"0\"]\nassert solution([\"0.985\"]) == [\"0\"]\nassert solution([\"0.00\"]) == [\"0\"]\nassert solution([\"0.01\"]) == [\"0.01\"]\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2.6\"\n) == [\n    151,\n    151,\n    152,\n    153\n]\nassert solution(\"1.4\") == \"No solution\"\n\"\"\"\n\nclass Solution:\n    def solution(self, str_num: str) -> str:\n        if str_num == \"\":\n            return \"No solution\"\n\n        def convert(num: str) -> str:\n            nonlocal str_num\n            str_num = str_num.replace(num, \"\")\n            return str_num\n\n        def solve(l: int, r: int, i: int, j: int, num: str) -> str:\n            if i > 0 and j > 0:\n                if num == \"\":\n                    return \"\"\n                if l < 0 or r > len(str_num) - 1 or l < r < len(str_num):\n                    return \"\"\n                if num[j] == \"+\" or num[j] == \"-\":\n                    return solve(l - 1, r, i - 1, j - 1, num)\n                elif num[j] == \"*\" or num[j] == \"/\":\n                    return solve(l, r, i - 1, j - 1, num)\n                else:\n                    return convert(num) + solve(l, r, i - 1, j - 1, num)\n            else:\n                return num\n\n        return solve(int(str_num[0]), int(str_num[-1]), len(str_num) - 1, len(str_num) - 2, convert(str_num))\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"9 1\") == \"4\"\nassert solution(\"10 4\") == \"4\"\nassert solution(\"0 1 0\") == \"1\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"7 7\") == \"6\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin\n) == '37'\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin = \"4 5 6 9 7 10 8\") == \"4\"\nassert solution(\n    stdin = \"3 7 1 2\") == \"3\"\nassert solution(\n    stdin = \"1 4 2 3 7\") == \"7\"\nassert solution(\n    stdin = \"1 4 5 3 7\") == \"7\"\nassert solution(\n    stdin = \"1 4 6 5 6 7\") == \"6\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input() == \"1\") == 0, \"Error\"\nassert solution(input() == \"2\") == 0, \"Error\"\nassert solution(input() == \"3\") == 0, \"Error\"\nassert solution(input() == \"4\") == 0, \"Error\"\nassert solution(input() == \"5\") == 0, \"Error\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), 'There are no possible divisions'\n\"\"\""
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0.0000000 0.0000000\"\nassert solution(inp) == \"0.0000000 1.0000000\"\nassert solution(inp) == \"-1.0000000 1.0000000\"\nassert solution(inp) == \"0.0000000 -1.0000000\"\nassert solution(inp) == \"1.0000000 0.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0.0000000 0.0000000 -1.0000000 -1.0000000'\nassert solution(stdin) == '0.0000000 0.0000000 -1.0000000 -1.0000000'\nassert solution(stdin) == '0.0000000 0.0000000 -1.0000000'\nassert solution(stdin) == '0.0000000 1.0000000 -1.0000000'\nassert solution(stdin) == '1.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        \"0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 1.0000000 0.0000000 1.0000000 0.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 1.0000000 1.0000000 0.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 0.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 1.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(in_str := str(n_line := int(stdin[0]))) == (stdout := str(x := int(stdin[1])))\nassert solution(in_str := str(n_line := int(stdin[0]))) == (stdout := str(y := int(stdin[1])))\nassert solution(in_str := str(n_line := int(stdin[0]))) == (stdout := str(x := int(stdin[1])))\nassert solution(in_str := str(n_line := int(stdin[0]))) == (stdout := str(y := int(stdin[1])))\nassert solution(in_str := str(n_line := int(stdin[0]))) == (stdout := str(x := int(stdin[1])))\n"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0.0000000 0.0000000 1.0000000 -1.0000000 0.0000000'\nassert solution(stdin) == '1.0000000 0.0000000 -1.0000000 0.0000000'\nassert solution(stdin) == '0.0000000 1.0000000 -1.0000000 0.0000000'\nassert solution(stdin) == '-1.0000000 0.0000000 1.0000000 -1.0000000'\nassert solution(stdin) == '0.0000000 -1.0000000 1.0000000 -1.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 0.0000000 1.0000000 1.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 0.0000000 -1.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 1.0000000 0.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 0.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 0.0000000 1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 1.0000000 -1.0000000 0.0000000 -1.0000000 1.0000000 -1.0000000 1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 0.0000000 0.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 0.0000000 0.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 -1.0000000 1.0000000 -1.0000000 -1.0000000 -"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3\\n1') == '3'\nassert solution('10\\n6\\n1\\n5') == '1.5'\nassert solution('11\\n2\\n3') == '2'\nassert solution('1\\n2\\n4') == '1.5'\nassert solution('1\\n2\\n3\\n3') == '2.5'\n"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 4, 1, 2, \"2 1 2 2\") == \"0.0000000 1.0000000 -1.0000000 0.0000000 0.0000000\"\nassert solution(5, 4, 1, 2, \"2 1 2 2\") == \"0.0000000 -1.0000000 0.0000000 0.0000000\"\nassert solution(5, 4, 1, 2, \"3 3 4 5\") == \"0.0000000 -1.0000000 0.0000000 0.0000000\"\nassert solution(5, 4, 1, 2, \"5 2 2 2\") == \"0.0000000 -1.0000000 0.0000000 0.0000000\"\nassert solution(5, 4, 1, 2, \"7 5 7 5\") == \"0.0000000 -1.0000000 0.0000000 0.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n\n\"\"\") == 0\nassert solution(\"\"\"\n\n\"\"\") == -1\nassert solution(\"\"\"\n\n\"\"\") == 1\nassert solution(\"\"\"\n\n\"\"\") == 1\nassert solution(\"\"\"\n\n\"\"\") == -1\n"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2, \"Your code has been written incorrectly. Please do not edit the code.\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"a\",\"c\",\"b\",\"a\",\"a\"]) == \"2\"\nassert solution([\"a\",\"*\",\"c\",\"*\",\"a\",\"c\",\"a\",\"a\",\"a\"]) == \"3\"\nassert solution([\"*\",\"c\",\"a\",\"a\",\"*\",\"a\",\"c\",\"a\",\"a\"]) == \"3\"\nassert solution([\"*\",\"*\",\"a\",\"*\",\"a\",\"a\",\"*\",\"a\",\"a\"]) == \"3\"\nassert solution([\"c\",\"*\",\"a\",\"*\",\"a\",\"a\",\"*\",\"a\",\"*\"]) == \"2\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( \"\") == \"0\"\nassert solution(\"a\") == \"1\"\nassert solution(\"ab\") == \"2\"\nassert solution(\"abc\") == \"3\"\nassert solution(\"a*a\") == \"2\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2, \"Wrong answer\"\n\nSample Input:\n3 5\nqz\nqzx\nq*z\nq*z*z\nqz*z\nqz*z*z\nqz*z*z*z\nqz*z*z*z*z\nqz*z*z*z*z*z\nqz*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\nqz*z*z*z*z*z*"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"1\"\n\nassert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin: str\n) == \"1\"\nassert solution(\n    stdin: str\n) == \"1\"\nassert solution(\n    stdin: str\n) == \"2\"\nassert solution(\n    stdin: str\n) == \"1\"\nassert solution(\n    stdin: str\n) == \"2\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nN, Q = map(int, input().split())\npatterns = []\nfor _ in range(N):\n    pattern = list(input())\n    patterns.append(pattern)"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input().split(\" \")) == [\n        \"aa\",\n        \"ab\",\n        \"a*a\",\n        \"aaa\",\n        \"a*\",\n        \"aaa*\",\n        \"a*a*\",\n        \"aaaaaaaaa\",\n    ], \"Sample test failed\""
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '2'\n\"\"\"\nimport collections\n\nN, Q = map(int, input().split())\npattern = [input() for _ in range(N)]\ncount = collections.Counter(pattern)\nprint(count.most_common(Q))\n"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"solution() failed\"\nassert solution(stdin), \"solution() failed\"\nassert solution(stdin), \"solution() failed\""
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"XOOOXO\") == \"1\"\nassert solution(\"OOOXOXO\") == \"1\"\nassert solution(\"OOOXXOXO\") == \"1\"\nassert solution(\"OXOOOXO\") == \"0\"\nassert solution(\"OOOXOXO\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '1'"
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"2 2 3\") == \"1\"\nassert solution(\"2 2 4\") == \"1\"\nassert solution(\"2 2 5\") == \"0\"\nassert solution(\"2 2 6\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, [\"OOOXXOXOOO\", \"OOOOOOOXXO\", \"OXXOXOOOXO\"]) == \"1\"\nassert solution(4, [\"OOOXXOXOOO\", \"OXXOXOOOXO\", \"OXOOOXOOOX\", \"OOOXXOXOOO\"]) == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"4 6\") == \"0\"\nassert solution(\"5 8\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp2) == \"0\"\n\n\"\"\""
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1\"\n\"\"\"\n\nimport sys\nfrom typing import Tuple, List, Union\n\nsys.setrecursionlimit(int(1e7))\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(10) == '5'\nassert solution(1) == '-5'\nassert solution(9) == '3'\nassert solution(7) == '5'\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '16'\n\nSample Input:\n2\n1 1\n3 2\n2 2\nSample Output:\n2\n\nassert solution(input()) == '2'\n\"\"\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 -2 0 0 0\") == \"2\"\nassert solution(\"0 0 0 0 -2 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 -2 0 0 0\") == \"2\"\nassert solution(\"0 0 0 0 -2 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 -2 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == 15\nassert solution(15) == 58\nassert solution(16) == 6\n\"\"\"\n\nclass Solution:\n    def maximumScore(self, points: int) -> int:\n        # Approach 1: sort using heap, then sort using bisect\n        def sort(x):\n            return -heapq.nlargest(2, x, key=heapq.nlargest)\n        \n        def bisect(a, b):\n            if a > b:\n                return 0\n            if a < b:\n                return 1\n            while a < b:\n                a += a//3\n                b += b//3\n            return 2\n        \n        sorted_points = sorted(points)\n        \n        # do the comparisons to sort the points\n        for i in range(2, len(sorted_points)):\n            score = sorted_points[i] - sorted_points[i-1]\n            heapq.heapify(sorted_points)\n            heapq.heapify(sorted_points)\n            if (score < 0):\n                heapq.heapreplace(sorted_points, -score)\n            else:\n                heapq.heappush(sorted_points, -score)\n            if (sorted_points[0] == 0):\n                sorted_points.pop(0)\n        \n        return bisect(sorted_points[0], sorted_points[1])\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 2 0 -2 0 2 0\"\n) == \"3\"\nassert solution(\n    \"4 2 0 -2 0 2 0\"\n) == \"0\"\nassert solution(\n    \"4 2 0 -2 0 2 0\"\n) == \"2\"\nassert solution(\n    \"4 2 0 -2 0 2 0\"\n) == \"16\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"226\"\n'''\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"12\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"2 3\") == \"9\"\nassert solution(\"2 3\") == \"9\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"-2\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '15'\nassert solution(input()) == '13'\nassert solution(input()) == '31'\nassert solution(input()) == '10'\nassert solution(input()) == '23'\n"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '18'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\n\nnumbers = []\n\nfor i in range(N):\n    numbers.append(tuple(map(int, sys.stdin.readline().rstrip().split())))\n\nnumbers = sorted(numbers)\n\nanswer = 0\n\nfor i in range(len(numbers)):\n    for j in range(i+1, len(numbers)):\n        if numbers[i][1] < numbers[j][0]:\n            answer += numbers[i][1] - numbers[j][1]\n\nprint(answer % 1000003)\n"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"8 -2 +2\") == \"-2 +2\"\nassert solution(\"2 -4 +5\") == \"5 -6\"\nassert solution(\"1 -6\") == \"5\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5 6') == '1 -2 1 -1 2 -1 -2'\nassert solution('5 10 -3 5 7 4 6 -1 0') == '5 -3 5 -3 0 5'\nassert solution('5 6 -2 -1 -2 1 -1 -2') == '5 -2 -2 1 -2 -2 -2'\nassert solution('5 6 -2 -1 -2 1 -2') == '5 -2 -2 1 -2 -2 -2'\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"80\"\nassert solution(inp) == \"80\"\nassert solution(inp) == \"80\"\nassert solution(inp) == \"80\"\nassert solution(inp) == \"80\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin) == \"80\"\n\nSample Input:\n4 10 50\n6 8 2 -2\nSample Output:\n0\n'''"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"80\"\nassert solution(inp2) == \"80\"\nassert solution(inp3) == \"80\"\nassert solution(inp4) == \"80\"\nassert solution(inp5) == \"80\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"80\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n8 10\n-2 2\n3 -1\n\n\"\"\") == \"-1\nassert solution(\"\"\"\n8 10\n-2 2\n3 -1\n\n\"\"\") == \"1\"\n\"\"\"\nExplanation:\nThe distance is determined by the running time of the program. When each step of a cycle is executed, the time to make the comment chain alternating is equal to $r$, the running time of the program is $r$ times. The total running time of the program is $r^2$.\n\nThe steps can be, for example,\n\ni) upvote a comment\nii) downvote a comment\niii) downvote all comments\n\"\"\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 1\", \"-1 1\", \"1 -1\", \"1 1\"]) == \"1 1\"\nassert solution([\"1 2\", \"3 3\", \"2 2\", \"2 2\", \"2 -2\", \"2 2\", \"1 -1\"]) == \"2 2\"\nassert solution([\"1 -1\", \"3 -1\", \"3 3\", \"3 3\", \"3 -3\", \"2 -2\", \"2 2\", \"3 3\"]) == \"2 2\"\nassert solution([\"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == \"1 1\"\nassert solution([\"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == \"1 1\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"Sample Input\") == \"80\"\nassert solution(\"Sample Input1\") == \"80\"\nassert solution(\"Sample Input2\") == \"80\"\nassert solution(\"Sample Input3\") == \"80\"\nassert solution(\"Sample Input4\") == \"80\"\n\"\"\""
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"80\"\n\nSample Input:\n4 10 50\n5 -3\nSample Output:\n4\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3.000000000'\nassert solution(input().strip()) == '3.000000000'\nassert solution(input().strip().replace(\" \", \"0\")) == '3.000000000'\nassert solution(input().strip().replace(\" \", \"0\")) == '3.000000000'\nassert solution(input().strip().replace(\" \", \"0\")) == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0 0 10 10') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3.000000000', 'Expected solution\"3.000000000\"'\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('Hello, world!') == '9.2363999524062798'\nassert solution('Hello, world!') == '9.2363999524062798'\nassert solution('Hello, world!') == '9.2363999524062798'\nassert solution('Hello, world!') == '9.2363999524062798'\nassert solution('Hello, world!') == '9.2363999524062798'\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 8\", \"0 0 10 10\", \"5 1\", \"5 9\", \"3\", \"5 8\", \"2 2\", \"9 6\", \"5 1\", \"5 9\", \"3\"]) == \"3.000000000\"\nassert solution([\"1 8\", \"0 0 10 10\", \"5 1\", \"5 9\", \"3\", \"5 8\", \"2 2\", \"9 6\", \"5 1\", \"5 9\", \"3\"]) == \"5.000000000\"\nassert solution([\"1 8\", \"0 0 10 10\", \"5 1\", \"5 9\", \"3\", \"5 8\", \"2 2\", \"9 6\", \"5 1\", \"5 9\", \"3\"]) == \"0.000000000\"\nassert solution([\"1 8\", \"0 0 10 10\", \"5 1\", \"5 9\", \"3\", \"5 8\", \"2 2\", \"9 6\", \"5 1\", \"5 9\", \"3\"]) == \"0.000000000000001\"\nassert solution([\"1 8\", \"0 0 10 10\", \"5 1\", \"5 9\", \"3\", \"5 8\", \"2 2\", \"9 6\", \"5 1\", \"5 9\", \"3\"]) == \"0.000000000000001\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '3.000000000'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3.0000000000000'\nprint('Example 1:')\nprint('Input :'+ repr(stdin))\nprint('Output :'+ repr(solution(stdin)))\nprint('Exception :')\nprint('Expected :'+ repr(abs(10**-6)*3 + abs(10**-6)*3 - abs(10**6)*3 - abs(10**6)*3 + abs(10**6)*4))\nprint('Output Explanation :')\nprint('The Manhattan distance between the point $x_1$, $y_1$, and $x_2$, and $y_2$ is $1$.')\n\nprint('Example 2:')\nprint('Input :'+ repr(stdin))\nprint('Output :'+ repr(solution(stdin)))\nprint('Exception :')\nprint('Expected :'+ repr(abs(10**-6)*4 + abs(10**-6)*3 + abs(10**-6)*2 + abs(10**-6)*1 - abs(10**6)*4 - abs(10**6)*3))\nprint('Output Explanation :')\nprint('The Manhattan distance between the point $x_1$, $y_1$, and $x_2$, and $y_2$ is $1$.')\n\nprint('Example 3:')\nprint('Input :'+ repr(stdin))\nprint('Output :'+ repr(solution(stdin)))\nprint('Exception :')\nprint('Expected :'+ repr(abs(10**-6)*4 + abs(10**-6)*3 + abs(10**-6)*2 + abs(10**-6)*1 - abs(10**6)*3))\nprint('Output Explanation :')\nprint('The Manhattan distance between the point $x_1$, $y_1$, and $x_2$, and $y_2$ is $2$.')\n\nprint('Example 4:')\nprint('Input :'+ repr(stdin))\nprint('Output :'+ repr(solution(stdin)))\nprint('Exception :')\nprint('Expected :'+ repr(abs(10**-6)*5 + abs(10**-6)*4 + abs(10**-6)*3 + abs(10**-6)*2 + abs(10**-6)*1 - abs(10**6)*5 - abs(10**6)*4))\nprint('Output Explanation :')\nprint('The Manhattan distance between the point $x_1$, $y_1$, and $x_2$, and $y_2$ is $1$.')\n\nprint('Example 5:')\nprint('Input :'+ repr(stdin))\nprint('Output :'+ repr(solution(stdin)))\nprint('Exception :')\nprint('Expected :'+ repr(abs(10**-6)*6 + abs(10**-6)*4 + abs(10**-6)*3 + abs(10**-6)*2 + abs(10**-6)*1 - abs(10**6)*6 - abs(10**6)*4))\nprint('Output Explanation :')\nprint('The Manhattan distance between the point $x_1$, $y_1$, and $x_2$, and $y_2$ is $1$.')\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\\n\".join(map(str,map(int,input().split()))).split('\\n')) == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        [15, 10, 3],\n        [8, 2, 1],\n        [5, 9, 6],\n        [5, 8, 2],\n        [0, 3, 5]\n    ]\n) == 10.00000\nassert solution(\n    [\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 1, 1, 0, 1, 0],\n        [0, 1, 0, 0, 0, 1, 0],\n        [0, 1, 1, 1, 0, 0, 0],\n        [0, 0, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0]\n    ]\n) == 9.00000\nassert solution(\n    [\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 1, 1, 0, 0],\n        [0, 1, 0, 1, 0, 0, 0],\n        [0, 0, 0, 1, 0, 1, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0]\n    ]\n) == 4.00000\nassert solution(\n    [\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 1, 1, 1, 0, 0],\n        [0, 1, 1, 0, 1, 0, 0],\n        [0, 0, 1, 0, 0, 1, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0]\n    ]\n) == 7.00000\nassert solution(\n    [\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 1, 1, 1, 0, 0],\n        [0, 1, 0, 1, 0, 0, 0],\n        [0, 1, 1, 1, 0, 1, 0],\n        [0, 0, 0, 1, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0]\n    ]\n) == 8.00000\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 1, 'incorrect'\n\"\"\""
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\")\"],+([()]))(\")]})])\",\")\",\"([)]])]\")\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"4 3\"\n) == 0\nassert solution(\n    \"4 0\"\n) == 1\nassert solution(\n    \"1 2\"\n) == 1\nassert solution(\n    \"1 0 0\"\n) == 1\nassert solution(\n    \"1 2 0\"\n) == 1\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 1\nassert solution(inp) == 1\nassert solution(inp) == 1\nassert solution(inp) == 1\nassert solution(inp) == 1\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 4\") == \"4\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 4\nassert solution(input()) == 6\nassert solution(input()) == 4\nassert solution(input()) == 3\nassert solution(input()) == 1\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0\") == \"1\"\nassert solution(\"1 1 0 0\") == \"3\"\nassert solution(\"1 0 0 1\") == \"1\"\nassert solution(\"0 1 0 0\") == \"2\"\nassert solution(\"1 0 1 0\") == \"2\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 1 0 0\") == \"1\"\nassert solution(\"1 1 0 0\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 4\") == \"2\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0 0 0 0') == '0'\nassert solution('1 1 0 0') == '1'\nassert solution('2 2 3 3') == '2'\nassert solution('2 2 2') == '2'\nassert solution('2 2 2 2') == '2'\n"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 6\nassert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 7\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"6.283185\"\nassert solution(\"0 0 0\") == \"0.0\"\nassert solution(\"0 0 0 1\") == \"1.0\"\nassert solution(\"0 0 0 1 1\") == \"0.0\"\nassert solution(\"0 0 0 1 1 1\") == \"0.0\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"6.283185\"\n\nSample Input:\n2 3\n3 0\n0 0\n1 1\n2 2\nSample Output:\n1.570834\nExplanation:\nThe edges have the same direction and length, and the nodes are in consecutive ascending order.\n\nassert solution(inp) == \"1.570834\"\n\nSample Input:\n1 2\n1 1\n2 2\nSample Output:\n3.0\n\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 8 2 3 4\") == \"1.03737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5 4 5 2 2\"\n) == \"14.283185\"\nassert solution(\n    \"2 3 4 0 0 0 0 0\"\n) == \"10.0014\"\nassert solution(\n
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['3 3', '0 0', '0 1', '1 0', '0 1', '0 2', '1 2', '0 2', '1 2', '0 2']) == '6.283185'\nassert solution(['3 3', '0 0', '0 1', '1 0', '0 1', '0 2', '1 2', '0 2', '1 2', '0 2']) == '-7.8571428571428571'\n\"\"\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 11 10\") == \"2.2857142857142857\"\nassert solution(\"2 2 2 2\") == \"5.714285714285714\"\nassert solution(\"4 4 4 4 4\") == \"7.2857142857142857\"\nassert solution(\"2 0 2 2 2\") == \"7.0\"\nassert solution(\"1 1 1 1 1\") == \"1.5714285714285714\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '12.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"6.283185\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 3') == '0 0 0 0'\nassert solution('3 0 0') == '1 1 1 1'\nassert solution('3 0 0 0') == '1 1 1 1'\nassert solution('3 0 0 0 0') == '1 1 1 1'\nassert solution('3 0 0 0 0 0') == '1 1 1 1'\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '6.283185'\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 7 4 1 2\") == \"2 3 1 4 2\"\nassert solution(\n    \"10 1 5 4 7 2 3 8 9 4\") == \"4 5 8 9 2 3 1 4 7\"\nassert solution(\n    \"3 3 6 5 7 6 7 2 3 3 4\") == \"2 1 3 6 2 3 2 3 3 3 3 3 3 3 3 3 3 3 3\"\nassert solution(\n    \"8 4 3 7 1 6 5 9 3 3\") == \"4 1 3 2 4 6 9 3 2 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3\"\nassert solution(\n    \"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == '1 2 3'\nassert solution(1) == '1 2'\nassert solution(0) == '1'\nassert solution(4) == '1 2 3 4'\nassert solution(5) == '1 2 5 3 6 7 8 9'\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5 0\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1 2 3'\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"4\", \"1\", \"3\", \"2\", \"5\", \"6\"]) == \"1 2 3 4 5 6\"\n\n\nSample Input:\n4\nSample Output:\n1 2 3 4 5 6\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1 2 3\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 1 2 3\"\nassert solution(\"4\") == \"1 1 1 2 3 4\"\nassert solution(\"5\") == \"1 1 1 1 2 3 5\"\n\nA complete binary tree is made of nodes arranged in a hierarchic structure. One of the nodes is the root node, said to be at level 0. The root node has two child nodes, which are at level 1. Each of those has two children at level 2 etc.\n\nIn general, a complete binary tree with $N$ levels has $2^N - 1$ nodes, each of which has two child nodes, except those at level $N - 1$.\n\nA number can be written into each node. Write the numbers $1$ to $2^N - 1$ into a complete binary tree with $N$ levels so that, for each node at level $D$, the absolute value of the difference of the sum of all numbers in the left subtree and the sum of all numbers in the right subtree is $2^D$.\n\nFor example, the sum of the left subtree of the root node must differ from the sum of the right subtree by 1. The sums of the left and right subtrees of a node at level 1 must differ by 2. Each number must be used exactly once. The solution need not be unique.\n\n-----Input-----\nThe first and only line of input contains the integer $N (1 \\le N \\le 15)$, the number of levels in the tree.\n\n-----Output-----\nOutput the $2^N - 1$ separated by spaces on a single line, the binary tree in the preorder traversal. The preorder traversal first outputs the number in the root node, then outputs the left subtree (again in the preorder traversal), then the right subtree.\n\n-----Examples-----\nSample Input:\n2\nSample Output:\n1 2 3\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"11\"\nassert solution(\"2\") == \"11\"\nassert solution(\"3\") == \"11\"\nassert solution(\"4\") == \"11\"\nassert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '123456'\n\n\nSample Input:\n2\n1 3\n1 2 4 5\nSample Output:\n1 2 3 4 5\nassert solution(stdin) == '123456'\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin):\n        pass\n"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"1 5\") == \"4 2\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"2 4\") == \"\"\nassert solution(\"3 4\") == \"3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\n        [\"Per\", \"3\", \"1\", \"2\"],\n        [\"Per\", \"1\", \"3\", \"4\"],\n        [\"Per\", \"1\", \"1\", \"2\"],\n        [\"Per\", \"1\", \"3\", \"1\"],\n        [\"Per\", \"2\", \"4\", \"4\"],\n    ]\n) == [\"1\", \"1 2 3 4 4\"]\nassert solution(\n    [\n        [\"Per\", \"3\", \"1\", \"2\"],\n        [\"Per\", \"1\", \"2\", \"2\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"4\", \"4\"],\n    ]\n) == [\"2\", \"2 3 4 4\"]\nassert solution(\n    [\n        [\"Per\", \"1\", \"2\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"3\"],\n        [\"Per\", \"3\", \"2\", \"2\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"2\", \"1\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"2\", \"2\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"3\", \"2\"],\n        [\"Per\", \"1\", \"2\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"2\", \"2\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"2\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"2\", \"2\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"2\", \"2\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"2\", \"4\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"1\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"3\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"2\", \"3\", \"3\"],\n        [\"Per\", \"1"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,1) == 1\nassert solution(3,5) == 3\nassert solution(4,5) == 1\nassert solution(5,5) == 5\nassert solution(1,5) == 5\n"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 5 1\") == \"1\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"2 3 4 5 6\") == \"6\"\nassert solution(\"1 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1 2'\nassert solution(stdin) == '1 2 3 4'\nassert solution(stdin) == '1 3'\nassert solution(stdin) == '1 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5\\n5\\n5\\n7\\n6\\n2\\n2\\n2\\n2\\n3\\n4\\n3\\n3\\n2\\n3\\n2\\n2\\n2\\n3\\n4\\n4\\n5\\n7\\n3\\n5\\n7\\n5\\n4\\n5\\n7\\n3\\n5\\n2\\n5\\n4\\n5\\n7\\n6\\n6\\n3\\n2\\n3\\n2\\n3\\n3\\n4\\n5\\n3\\n4\\n3\\n2\\n1\\n3\\n4\\n1\\n4\\n2\\n1\\n3\\n3\\n3\\n4\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n2\\n3\\n3\\n3\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n3\\n4\\n1\\n2\\n3\\n3\\n3\\n4\\n2\\n3\\n2\\n4\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n3\\n3\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n3\\n3\\n2\\n3\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n2\\n1\\n3\\n2\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n3\\n2\\n2\\n2\\n1\\n1\\n3\\n1\\n3\\n3\\n2\\n3\\n3\\n2\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n3\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n3\\n1\\n3\\n2\\n2\\n1\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n2\\n3\\n2\\n3\\n3\\n2\\n2\\n1\\n1\\n2\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n1\\n3\\n2\\n1\\n3\\n2\\n1\\n3\\n3\\n1\\n3\\n2\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n3\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n2\\n1\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n1\\n2\\n1\\n3\\n1\\n1\\n1\\n2\\n2\\n3\\n1\\n1\\n3\\n1\\n3\\n1\\n3\\n2\\n3\\n3\\n2\\n2\\n3\\n3\\n3\\n3\\n1\\n2\\n1\\n2\\n1\\n3\\n3\\n2\\n2\\n1\\n3\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n3\\n2\\n3\\n2\\n1\\n3\\n2\\n3\\n3\\n2\\n3\\n2\\n3\\n1\\n2\\n3\\n2\\n2\\n3\\n1\\n1\\n2\\n1\\n2\\n2\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n1\\n1\\n2\\n1\\n3\\n2\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n2\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n3\\n1\\n2\\n2\\n2\\n2\\n1\\n2\\n3\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3 4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '4'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1 2 3 4\"\nassert solution(input()) == \"1 3 4\"\nassert solution(input()) == \"1 2 4\"\nassert solution(input()) == \"1 3\"\nassert solution(input()) == \"1 2\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['1','3','2','1']) == ['1','3','2']\nassert solution(['1','3','2','4','2','3']) == ['1','3','2']\nassert solution(['1','2','3','4']) == ['1','2','3']\nassert solution(['1','2','3','4','4','5']) == []\nassert solution(['2','3','4','1']) == ['2','3']\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\n\n\nSample Input:\n3 2\n2 1 2\n3 1 2\n4 1 3\n5 1 4\n\nSample Output:\n5\n\nExplanation:\nThe graph given by this input is always simple and connected: there is an edge between every pair of vertices, there are no loops and there is a path between every pair of vertices.\n\nIn general, the graph is represented by a positive integer $V$ and an array $E$ where $E[i]$ denotes the number of edges from $i$ to $i$.\n\nThe maximum independent set of this graph, the set of vertices, and the size of the maximum independent set of the graph is a $V$-vertex subset, $V$ composed of $V$ vertices, where the vertices are ordered in such a way that $V$ has no more than $V$ vertices.\n\n-----Input-----\n - The input is a single line containing a string of integers $V$ and $E$.\n - The string represents the indices of the vertices and the edges in the graph.\n - The string represents the graph represented by a string of $V$ vertices and $E$.\n\n-----Output-----\n - Output the size of the maximum independent set of the graph.\n\nSample Input:\n3 1\n1 2\n2 3\n1 2 1\n\nSample Output:\n1\n\nExplanation:\nThe graph given by this input is always simple and connected: there is an edge between every pair of vertices, there are no loops and there is a path between every pair of vertices.\n\nIn general, the graph is represented by a positive integer $V$ and an array $E$.\nThe array contains three integers $E[i]$, $E[j]$, and $E[k]$.\n\nThe array is ordered in such a way that $E[i]$ is the edge from $i$ to $j$ and $E[j]$ is the edge from $j$ to $k$.\nThe array contains three integers $E[i]$, $E[j]$, and $E[k]$.\n\nThe maximum independent set of this graph, the set of vertices, and the size of the maximum independent set of the graph is a $V$-vertex subset, $V$ composed of $V$ vertices, where the vertices are ordered in such a way that $V$ has no more than $V$ vertices.\n\n-----Input-----\n - The input is a single line containing a string of integers $V$ and $E$.\n - The string represents the indices of the vertices and the edges in the graph.\n - The string represents the graph represented by a string of $V$ vertices and $E$.\n\n-----Output-----\n - Output the size of the maximum independent set of the graph.\n\nSample Input:\n3 1\n1 2\n1 3\n1 4\n\nSample Output:\n3\n\nExplanation:\nThe graph given by this input is always simple and connected: there is an edge between every pair of vertices, there are no loops and there is a path between every pair of vertices.\n\nIn general, the graph is represented by a positive integer $V$ and an array $E$.\nThe array contains three integers $E[i]$, $E[j]$, and $E[k]$.\n\nThe array is ordered in such a way that $E[i]$ is the edge from $i$ to $j$ and $E[j]$ is the edge from $j$ to $k$.\nThe array contains three integers $E[i]$, $E[j]$, and $E[k]$.\n\nThe maximum independent set of this graph, the set of vertices, and the size of the maximum independent set of the graph is a $V$-vertex subset, $V$ composed of $V$ vertices, where the vertices are ordered in such a way that $V$ has no more than $V$ vertices.\n\n-----Input-----\n - The input is a single line containing a string of integers $V$ and $E$.\n - The string represents the indices of the vertices and the edges in the graph.\n - The string represents the graph represented by a string of $V$ vertices and $E$.\n\n-----Output-----\n - Output the size of the maximum independent set of the graph.\n\nExplanation:\nThe graph given by this input is always simple and connected: there is an edge between every pair of vertices, there are no loops and there is a path between every pair of vertices.\n\nIn general, the graph is represented by a positive integer $V$ and an array $E$.\nThe array contains three integers $E[i]$, $E[j]$, and $E[k]$.\n\nThe array is ordered in such a way that $E[i]$ is the edge from $i$ to $j$ and $E[j]$ is the edge from $j$ to $k$.\nThe array contains three integers $E[i]$, $E[j]$, and $E[k]$.\n\nThe maximum independent set of this graph, the set of vertices, and the size of the maximum independent set of the graph is a $V$-vertex subset, $V$ composed of $V$ vertices, where the vertices are ordered in such a way that $V$ has no more than $V$ vertices.\n\n-----Input-----\n - The input is a single line containing a string of integers $V$ and $E$.\n - The string represents the indices of the vertices and the edges in the graph.\n - The string represents the graph represented by a string of $V$ vertices and $E$.\n\n-----Output-----\n - Output the size of the maximum independent set of the graph.\n\nExplanation:\nThe graph given by this input is always simple and connected: there is an edge between every pair of vertices, there are no loops and there is a path between every pair of vertices.\n\nIn general, the graph is represented by a positive integer $V$ and an array $E$.\nThe array contains three integers $E[i]$, $E[j]$, and $E[k]$.\n\nThe array is ordered in such a way that $E[i]$ is the edge from $i$ to $j$ and $E[j]$ is the edge from $j$ to $k$.\nThe array contains three integers $E[i]$, $E[j]$, and $E[k]$.\n\nThe maximum independent set of this graph, the set of vertices, and the size of the maximum independent set of the graph is a $V$-vertex subset, $V$ composed of $V$ vertices, where the vertices are ordered in such a way that $V$ has no more than $V$ vertices.\n\n-----Input-----\n - The input is a single line containing a string of integers $V$ and $E$.\n - The string represents the indices of the vertices and the edges in the graph.\n - The string represents the graph represented by a string of $V$ vertices and $E$.\n\n-----Output-----\n - Output the size of the maximum independent set of the graph.\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices, edges):\n        self.vertices = vertices\n        self.edges = edges\n\n    def get_vertices(self):\n        return self.vertices\n\n    def get_edges(self):\n        return self.edges\n\n    def get_connected_component(self):\n        return self.edges[0]"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"./input/day5.txt\") == \"1\"\nassert solution(\"./input/day5.txt\") == \"2\"\nassert solution(\"./input/day5.txt\") == \"0\"\nassert solution(\"./input/day5.txt\") == \"2\"\nassert solution(\"./input/day5.txt\") == \"1\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n    3\n    4 3\n    4 2\"\"\") == 3\nassert solution(\"\"\"\n    1 1\n    1 2\n    1 3\n    1 4\n    2 2\n    2 3\n    2 4\n    3 3\n    3 4\n    4 5\n    5 5\n    \"\"\") == 6\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0, [[1,2],[3,4],[1,3]]) == 2\nassert solution(1, [[1,2],[3,4],[1,3]]) == 4\n\"\"\""
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"2 2 4 5\") == \"1\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nExplanation:\nThere are two independent sets $S(1, 1)$, $S(2, 1)$ and $S(1, 2)$, with two independent sets, $S(1, 3)$, $S(2, 3)$ and $S(1, 4)$.\nNote that $S(1, 3)$ is independent because it is not adjacent to any other vertex of $G$.\n\nSample Input:\n3\n4\n1 2\n1 3\n3 4\n3 2\nSample Output:\n3\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('' + ''.join(input()).strip()) == 7\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 1\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == 2\nassert solution(\"2 1 2 3 4\") == 5\nassert solution(\"3 3 1\") == 1\nassert solution(\"4 3\") == 4\nassert solution(\"5 4\") == 5\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1053\") == \"3452\"\nassert solution(\n    \"5853\") == \"34909\"\nassert solution(\n    \"30090\") == \"239301\"\nassert solution(\n    \"3\") == \"239301\"\nassert solution(\n    \"100\") == \"100\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(12) == 4, 'Expected 4'\nassert solution(8) == 7, 'Expected 7'\nassert solution(11) == 3, 'Expected 3'\nassert solution(5) == 5, 'Expected 5'\nassert solution(6) == 5, 'Expected 5'\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == 45, 'Sample input: \"2\"'\nassert solution(\"3\") == 30, 'Sample input: \"3\"'\nassert solution(\"4\") == 25, 'Sample input: \"4\"'\nassert solution(\"5\") == 27, 'Sample input: \"5\"'\nassert solution(\"6\") == 44, 'Sample input: \"6\"'\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(23) == 45\nassert solution(8) == 13\nassert solution(24) == 75\nassert solution(49) == 5\nassert solution(3) == 7\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0123456789\") == \"123456789\"\nassert solution(\"0123456789\") == \"123456789\"\nassert solution(\"0123456789\") == \"123456789\"\nassert solution(\"0123456789\") == \"123456789\"\nassert solution(\"0123456789\") == \"123456789\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"45\"\nassert solution(\"12345\") == \"12345\"\nassert solution(\"900\") == \"900\"\nassert solution(\"1\") == \"1\"\nassert solution(\"123\") == \"123\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == 45\n\nSample Input:\n4\nSample Output:\n9\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"45\"\nSample Input:\n5\nSample Output:\n335511\n"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"9A\") == \"9A\", \"Wrong solution.\"\nassert solution(\"10A\") == \"10A\", \"Wrong solution.\"\nassert solution(\"12A\") == \"12A\", \"Wrong solution.\"\nassert solution(\"45A\") == \"45A\", \"Wrong solution.\"\nassert solution(\"56A\") == \"56A\", \"Wrong solution.\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2 4\") == \"2\"\nassert solution(\"6 4 6\") == \"1\"\nassert solution(\"4 3 1\") == \"2\"\nassert solution(\"6 3 1\") == \"3\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"Sample Input:\\n5 20 20\\n7 11 9 12 2\\n5 21 20\\n7 13 5 10 20\\n1 2\\n2 3\\n3 4\\n3 5\\n1 3\\n4 4\\n3 5\\n3 2\\n2 3\\n1 3\\n1 4\\n4 2\\n1 5\\n2 4\\n1 5\\n1 2\\n4 4\\n1 2\\n2 1\\n3 4\\n2 5\\n4 5\\n4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n4 2\\n2 4\\n3 5\\n3 4\\n3 4\\n2 5\\n2 2\\n1 4\\n1 3\\n1 4\\n2 3\\n2 1\\n3 4\\n2 2\\n1 1\\n1 1\\n1 2\\n1 4\\n1 3\\n1 2\\n3 4\\n2 1\\n2 1\\n3 2\\n1 2\\n1 2\\n2 1\\n3 2\\n1 1\\n2 2\\n1 1\\n3 2\\n2 1\\n2 1\\n1 1\\n1 2\\n1 2\\n2 2\\n2 1\\n1 1\\n2 1\\n1 1\\n1 1\\n2 2\\n1 2\\n2 1\\n1 1\\n2 1\\n1 1\\n2 2\\n1 1\\n2 1\\n1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n2 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n2 1\\n1 2\\n2 1\\n1 2\\n1 1\\n2 1\\n1 2\\n2 1\\n1 1\\n2 1\\n1 2\\n2 2\\n2 1\\n2 1\\n2 2\\n1 1\\n1 1\\n2 2\\n1 2\\n1 1\\n1 1\\n1 2\\n1 2\\n1 1\\n1 1\\n2 1\\n1 2\\n1 1\\n2 1\\n1 1\\n1 1\\n1 2\\n1 1\\n2 1\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1\\n1 2\\n1 1\\n2 1\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 4\"), \"1\"\nassert solution(\"2 2 5\"), \"3\"\nassert solution(\"3 2 8\"), \"4\"\nassert solution(\"4 2 6\"), \"6\"\nassert solution(\"5 5 9 2\"), \"5\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 9 20\") == \"4\"\nassert solution(\"7 11 9 12 2\") == \"3\"\nassert solution(\"7 11 9 12 2\") == \"3\"\nassert solution(\"7 11 9 12 2\") == \"3\"\nassert solution(\"7 11 9 12 2\") == \"3\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 4 5') == '4'\nassert solution('1 2 3 4 5') == '3'\nassert solution('1 3 5 7') == '3'\nassert solution('1 3 1 7 9') == '3'\nassert solution('1 3 1 3 6 7 9') == '3'\n"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\nimport math"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"the line is broken.\"\n\"\"\"\nfrom collections import Counter\n\nn = int(input())\nboys = Counter(input().split())\ngirls = Counter(input().split())\n\nx = 0\n\nfor key, value in boys.items():\n    if value <= 2:\n        x = x + value\n    elif value == 3:\n        x = x + 2\n    elif value > 3:\n        x = x + value\n\nprint(x)"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n'''\n"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\"\n\nSample Input:\n3 1\nkenny 1\ncharlie 1\njenny 1\nlaura 1\nassert solution(stdin) == \"1\"\n\n\"\"\""
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"john\") == \"john\"\nassert solution(\"kenny kenny\") == \"kenny\"\nassert solution(\"kenny john\") == \"john\"\nassert solution(\"charlie charlie\") == \"charlie\"\nassert solution(\"charlie harrypotter\") == \"charlie\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 1\nassert solution(input().strip()) == 12"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\n\"\"\"\n\nclass Solution:\n    def get_min_max(self, students, students_per_group):\n        result = [0, 0]\n        for i in range(len(students)):\n            result[i] = students.count(students[i])\n        return result\n\n    def minimum_books_needed(self, students, students_per_group):\n        result = self.get_min_max(students, students_per_group)\n        print(f\"result: {result}\")\n        return result[0]\n        \n    def minimum_books_needed(self, students, students_per_group):\n        groups = {}\n        for i in range(len(students_per_group)):\n            groups[i] = set(students_per_group[i])\n        print(groups)\n        min_books_needed = self.minimum_books_needed(groups, students_per_group)\n        print(f\"min_books_needed: {min_books_needed}\")\n        return min_books_needed\n        \n    def minimum_books_needed(self, students, students_per_group):\n        groups = {}\n        for i in range(len(students_per_group)):\n            groups[i] = set(students_per_group[i])\n        print(groups)\n        min_books_needed = self.minimum_books_needed(groups, students_per_group)\n        print(f\"min_books_needed: {min_books_needed}\")\n        return min_books_needed\n    \n    def minimum_books_needed(self, students, students_per_group):\n        groups = {}\n        for i in range(len(students_per_group)):\n            groups[i] = set(students_per_group[i])\n        print(groups)\n        min_books_needed = self.minimum_books_needed(groups, students_per_group)\n        print(f\"min_books_needed: {min_books_needed}\")\n        return min_books_needed\n    \n    \n    def minimum_books_needed(self, students, students_per_group):\n        result = 0\n        groups = {}\n        for i in range(len(students_per_group)):\n            groups[i] = set(students_per_group[i])\n        print(groups)\n        min_books_needed = self.minimum_books_needed(groups, students_per_group)\n        print(f\"min_books_needed: {min_books_needed}\")\n        return min_books_needed\n    \n\n    def minimum_books_needed(self, students, students_per_group):\n        result = 0\n        groups = {}\n        for i in range(len(students_per_group)):\n            groups[i] = set(students_per_group[i])\n        print(groups)\n        min_books_needed = self.minimum_books_needed(groups, students_per_group)\n        print(f\"min_books_needed: {min_books_needed}\")\n        return min_books_needed\n    \n    def minimum_books_needed(self, students, students_per_group):\n        groups = {}\n        for i in range(len(students_per_group)):\n            groups[i] = set(students_per_group[i])\n        print(groups)\n        min_books_needed = self.minimum_books_needed(groups, students_per_group)\n        print(f\"min_books_needed: {min_books_needed}\")\n        return min_books_needed"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['kenny','kenny','harrypotter1','charlie','charlie','jenny','jenny','laura','laura','lordoftherings','kenny','kenny']) == 2\nassert solution(['harrypotter1','lordoftherings','kenny','kenny']) == 1\nassert solution(['kenny','kenny','harrypotter1','charlie','charlie','jenny','jenny','laura','laura','lordoftherings','kenny','kenny']) == 2\nassert solution(['kenny','kenny','kenny','kenny','kenny','kenny','kenny','kenny','kenny','kenny']) == 1\nassert solution(['kenny','kenny','kenny','kenny','kenny','kenny','kenny','kenny','kenny','kenny','kenny']) == 0\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"01\") == \"01\"\nassert solution(\"01\") == \"01\"\nassert solution(\"01\") == \"01\"\nassert solution(\"01\") == \"01\"\nassert solution(\"01\") == \"01\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2 1'\n\nSample Input:\n5\n1 1 0 0 1 1\nSample Output:\n2 1\n\"\"\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Error\"\n\nSample Input:\n1\n1\nSample Output:\n1 2\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"01\") == \"01 01\"\nassert solution(\"01 01\") == \"01 01\"\nassert solution(\"01 0 0\") == \"01 0\"\nassert solution(\"01 01\") == \"01\"\nassert solution(\"01 0 1\") == \"01\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '01'\n\"\"\""
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2, [\"01\", \"001\"]) == \"001\"\nassert solution(4, [\"0\", \"1\", \"1\", \"1\", \"1\", \"0\", \"1\", \"1\"]) == \"001\"\nassert solution
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'f'\n\nSample Input:\n5\n012345\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\n0123456789\nSample Output:\n0\n\nassert solution(stdin) == 'f'\n\nSample Input:\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"01\"\n\nSample Input:\n1\n01\n02\nSample Output:\n2 3\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 0 1 1 0 1 0 0 0 0\") == \"2 1\"\nassert solution(\"0 0 1 0 1 1\") == \"2 1\"\nassert solution(\"1 0 0 1 0 0 0 0 0 0\") == \"1 1\"\nassert solution(\"1 0 0 0 0 0 0 0 0 0 0\") == \"1 1\"\nassert solution(\"0 1 0 1 1 1 0 0 0 0\") == \"2 1\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"00\") == \"01\"\nassert solution(\"01\") == \"01\"\nassert solution(\"01\") == \"01\"\nassert solution(\"01\") == \"01\"\nassert solution(\"01\") == \"01\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"4 3\"\nassert solution(\"2 123\") == \"2 123\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"21\") == \"21\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == inp\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '4 3'\nassert solution(input()) == '1012'\nassert solution(input()) == '2 123'\nassert solution(input()) == '2 2'\nassert solution(input()) == '21'\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 4\") == \"4 3 21\"\nassert solution(\"2 123 4\") == \"1 123 4\"\nassert solution(\"2 2123 4\") == \"1 2 123 4\"\nassert solution(\"2 2 2\") == \"1 2 2\"\nassert solution(\"2 2 5\") == \"1 2 5\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(''), \"Input is not valid\"\nassert solution('123'), 'Input does not start with an empty line'\nassert solution('2'), 'Input does not have a single space'\nassert solution('2 - 2 - 2 - 1'), 'Input does not have one horizontal line'\nassert solution('2 - 2 - 1 - 1'), 'Input does not have two horizontal lines'\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2233\"\nassert solution(stdin) == \"1012\"\nassert solution(stdin) == \"2123\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"21\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1012'\nassert solution(input()) == '1111'\nassert solution(input()) == '2233'\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == \"4 3\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\") == \"4 3 2\"\nassert solution(\"2 1 2\") == \"2 1 2\"\nassert solution(\"2 1 3\") == \"2 1 3\"\nassert solution(\"2 1 4\") == \"2 1 4\"\nassert solution(\"2 2 3 4\") == \"2 2 3 4\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3') == '4 3\\n2 123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n'\nassert solution('4') == '4 3\\n2 123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n'\nassert solution('2') == '2 2\\n2 3\\n1 2\\n1 3\\n'\nassert solution('5') == '5 4\\n5 3\\n5 2\\n5 1\\n'\nassert solution('7') == '7 4\\n7 3\\n7 2\\n7 1\\n'\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"libattr\") == \"atk\"\nassert solution(\"libattr\") == \"freetype\"\nassert solution(\"libattr\") == \"glib2\"\nassert solution(\"libattr\") == \"zlib\"\nassert solution(\"libattr\") == \"libjpeg\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('libjpeg') == 'emacs xorg-x11 lisp'\nassert solution('libtiff') == 'glib2'\nassert solution('glib2') == 'atk'\nassert solution('zlib') == 'glib2'\nassert solution('pcre') == 'xorg-x11'\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('libattribute') == 'atk'\nassert solution('libattr') == 'freetype'\nassert solution('libattribut') == 'glib2'\nassert solution('libattribut') == 'gtk2'\nassert solution('libatrix') == 'libjpeg'\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'atk'\nassert solution(stdin) == 'freetype'\nassert solution(stdin) == 'glib2'\nassert solution(stdin) == 'zlib'\nassert solution(stdin) == 'libjpeg'\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"hello\") == \"good\"\nassert solution(\"nope\") == \"nope\"\nassert solution(\"good\") == \"good\"\nassert solution(\"good\") == \"good\"\nassert solution(\"\") == \"nope\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"atk\") == \"freetype\"\nassert solution(\"glib2\") == \"pango\"\nassert solution(\"pango\") == \"xorg-x11-libs\"\nassert solution(\"glib2\") == \"gtk2\"\nassert solution(\"glib2\") == \"libtiff\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('libtiff') == 'libtiff'\nassert solution('libattr') == 'libattr'\nassert solution('glib2') == 'glib2'\nassert solution('libjpeg') == 'libjpeg'\nassert solution('libjpeg', 'pango') == 'libjpeg'\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('libattr') == 'atk'\nassert solution('libtiff') == 'glib2'\nassert solution('pango') == 'gtk2'\nassert solution('zlib') == 'glib2'\nassert solution('freetype') == 'xorg-x11-libs'\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"libatrt\") == \"atk\"\nassert solution(\"libatt\") == \"freetype\"\nassert solution(\"libagg\") == \"glib2\"\nassert solution(\"libats\") == \"glib2\"\nassert solution(\"libattx\") == \"glib2\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"atk\"\n\ncannot be ordered\n"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(    '32 20'    ) == '16'"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"32 20\") == \"16\""
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"16\"\nassert solution(\"32\") == \"16\"\nassert solution(\"4\") == \"16\"\nassert solution(\"5\") == \"16\"\nassert solution(\"20\") == \"16\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"32 20\", \"10\", \"7\"]) == \"16\"\nassert solution([\"32 20\", \"8\", \"12\", \"3\"]) == \"32\"\nassert solution([\"32 19\", \"10\", \"5\", \"0\", \"7\"]) == \"32\"\nassert solution([\"32\", \"20\", \"12\", \"3\", \"0\"]) == \"32\"\nassert solution([\"32\", \"20\", \"19\", \"3\", \"0\"]) == \"32\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 4 4 0\") == \"16\"\nassert solution(\"6 0 4 0\") == \"0\"\nassert solution(\"6 1 5\") == \"6\"\nassert solution(\"2 0 4\") == \"0\"\nassert solution(\"4 1 10\") == \"0\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '10'\nassert solution('15 10 12') == '100'\nassert solution('0 1 0 0') == '1'\nassert solution('0 1 0 0') == '1'\nassert solution('0 1 0 1') == '1'\n"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sys.stdin.readline()) == \"16\"\nassert solution(sys.stdin.readline()) == \"32\"\nassert solution(sys.stdin.readline()) == \"5\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '16'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '16'\nassert solution(stdin) == '17'\nassert solution(stdin) == '32'\nassert solution(stdin) == '39'\nassert solution(stdin) == '48'\n"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"16\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(5) == 5\nassert solution(10) == 16\nassert solution(50) == 100\n"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('d.txt') == '9'\nassert solution('d.txt') == '15'\nassert solution('d.txt') == '28'\nassert solution('d.txt') == '43'\nassert solution('d.txt') == '22'\n"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('...#.....') == 5\nassert solution('....#...') == 10\nassert solution('#...#..') == 4\nassert solution('.....') == 2\nassert solution('.#....') == 1\n"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10.###\") == \"5\"\nassert solution(\"10.####\") == \"4\"\nassert solution(\"10.##\") == \"3\"\nassert solution(\"10.##.##\") == \"1\"\nassert solution(\"10.##.####\") == \"5\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == 5\nassert solution(\"9 4\") == 5\nassert solution(\"7 6\") == 1\nassert solution(\"4 4\") == 1\nassert solution(\"0 0\") == 1\n"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 4\"\n) == 5, \"solution() failed\"\nassert solution(\n    \"..#....\"\n) == 4, \"solution() failed\"\nassert solution(\n    \"#..#..\"\n) == 8, \"solution() failed\"\nassert solution(\n    \"..#.##..\"\n) == 7, \"solution() failed\"\nassert solution(\n    \"#...##.##\"\n) == 8, \"solution() failed\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin: str) == '5'"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"13\"\nassert solution(input) == \"5\"\nassert solution(input) == \"7\"\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"...........#..............##.......\",\n        \"##...#.......#....#...#.....###..#..\",\n        \"#.......#....##.#...#....#.#.##....\",\n        \"#....#..........#.#...#..#.#.#....\",\n        \"##....#........##..#.....#.##...#\",\n        \"##...##.....#....#.#..#.#.....#\",\n        \"#.##....#.##........#.#.#...##\",\n        \"#.#....#..#.#...#.#.#.#.#...#..#\",\n        \"....#....##.....#.##..##....##.\",\n        \"#.#...#....#..#.#.#..#.#..#..#..\",\n        \"#...##.....##..##...#.##...#.#.\",\n        \"#.....#....#..#..#.#..##..#..#..\",\n        \"#.##...#..#.#.#..#...##...#..#.\",\n        \"#....#...#.#.#.#.#.#....#....#\",\n        \".....#.##...#.#.#..##....#...#\",\n        \"..#....#...##..#...#..#....#...\",\n        \"..#....#.#.##...#..#..#.....#..\",\n        \"..........#....#...#.#...#...#..\",\n        \"#...#.#....#.#...#.##.##.....#\",\n        \"#.#.....#.#.##...#.##....#....\",\n        \"#..#....#.#.#...#.#..#....#...#\",\n        \"#...#...#..#...#.#.##....##.#\",\n        \"..#....#..#..#..#..#..#...#...\",\n        \"#.#....#..#....#....#....#...#\",\n        \"#.#.....#....##...#...#....#..#\",\n        \"#...#..#....#...#..#...#.....#\",\n        \"#...#..#..#...#..#..#.##.....#\",\n        \"#..#.....#.....#...##..#.#....#\",\n        \"..#.....#...#....#..#....#.#..\",\n        \"#...#...#....#..#..#..#.....#..\",\n        \"..#...#....#...#.###....#.#....\",\n        \"#...#....#.....##.#...#....#..#\",\n        \"...#.#..#...#.....#.##...#.....#\",\n        \"....#.....#.##......##..#.....#\",\n        \"..#....#...#....#.##...#......\",\n        \"#....#...#...#..#.#....#...##..\",\n        \"#..#...#....#..#....#.##.....#\",\n        \"#...#....#..#...#...#..#...#....\",\n        \"..#...#.....#..#....#...#.#..#..\",\n        \"#...#.....#..#.##...#.....#..#\",\n        \"#.##...#.....#.#..#.#...##.##..\",\n        \"..#.....#..#...#.##....#...#..#\",\n        \"..#..#...#....##....#....#....#\",\n        \"#...........#...#...#.....#..#..\",\n        \"....#...#....#.#..#...#....#...#\",\n        \"#..#...#....#.##.....#..#...#...\",\n        \"..#...#...#..#..#.#.##.....#.#\",\n        \"#..#..#....#.#...#....#.#..#....\",\n        \"#.....#....##.#...#.....#....#..\",\n        \"..#.#......#..#....#...#..#.##..\",\n        \"..#.#..#......#.##.##....#....#\",\n        \"#....#..#.#......#...#..#....#....\",\n        \"#...#..#..#....#.#....#.##..#....\",\n        \"##.#.....##..#..#......#....#....\",\n        \"..#.......#.#.##....#.....#....#\",\n        \"#.#..#...##.#...#..#....#....#..\",\n        \"##...#..#..#...#.#.#....#....#...\",\n        \"#...#.##....#..#...#.#......#....\",\n        \"#.#.......#.##.#.#.....#.....#..\",\n        \"#......#....#.#.#..#....#.....#..\",\n        \"#..#...#....#...#....#..#......#\",\n        \"..#..#....#.##.....#....#....#..\",\n        \"#..#....#...#..#...##...#....#..\",\n        \"#.##.#..#....#....##...#....#...\",\n        \"....#..#...#.....##....#...#...#\",\n        \"#....#...#....#..#.##...#.....#\",\n        \"..#....#..#.#...#....#....#....#\",\n        \"#....#...#...#..#......#...##....\",\n        \"#.....#.#...#.....##.....#..#....\",\n        \"..#..#...#.....#..#....#....#....\",\n        \"#.#.#...#.....#..#..#.#....#...#\",\n        \"#....#...#....#...#...#.#..#.#....\",\n        \"#..#..#.#.#..#....#....#.#....#\",\n        \"..#.#....#..#...#...#.#....#....\",\n        \"..#.....#...#..#....#..#...#.....\",\n        \"#..#..#..#..#...#.#....#....#....\",\n        \"#.##......#....#....#....#...#....\",\n        \"..#...#.#....#..#....#...#....#..\",\n        \"#....#...#..#....##...#...#....#..\",\n        \"#........#...#.....#.#....#....#..\",\n        \"..#..#....#..#..#.#...#.#....#..\",\n        \"..#..#...#.##..#...#....#....#...\",\n        \"#.#..#...#.....#...#...#..#...#..\",\n        \"#.##......#..#....#.##..#...#....\",\n        \"..#.#......#....#...#.....#..#...."
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 4?\"), \"5\"\nassert solution(\"2 3 1\"), \"5\"\nassert solution(\"2 4?\"), \"5\"\nassert solution(\"3 1 0\"), \"5\"\nassert solution(\"3 2 0\"), \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\nassert solution(\"3 3\") == '5'\nassert solution(\"4 2 5\") == '5'\nassert solution(\"3 3\") == '4'\nassert solution(\"3 1\") == '4'\n"
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"1 2 3 4\") == \"5\"\nassert solution(\"1 3 5\") == \"5\"\nassert solution(\"2\") == \"5\"\nassert solution(\"2 5\") == \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2, 3) == 5\nassert solution(2, 2) == 4\nassert solution(1, 2) == 4\nassert solution(2, 1) == 2\nassert solution(2, 2) == 4\n"
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 5 1') == 5\nassert solution('2 3 3 1') == 5\nassert solution('3 1? 0') == 0\nassert solution('3 1? 0') == 0\nassert solution('3 1? 0') == 0\n"
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 5\"), \"2 is not a valid length\"\nassert solution(\"1 2\"), \"1 is not a valid length\"\nassert solution(\"1 3\"), \"1 is not a valid length\"\nassert solution(\"2 3\"), \"2 is not a valid length\"\nassert solution(\"3 1\"), \"3 is not a valid length\""
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '5'\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\nSample Input:\n5 3\n-1 0\n-1 1\n0 1\n0 -1\nSample Output:\n3\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"4\", \"3\"]), \"No\"\nassert solution([\"1\", \"2\", \"2\"]), \"No\"\nassert solution([\"2\", \"0\", \"1\"]), \"No\"\nassert solution([\"2\", \"1\", \"0\", \"2\"]), \"No\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]), \"No\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3 2\"\nassert solution(\"1 0\") == \"1 0\"\nassert solution(\"1 3\") == \"3 2\"\nassert solution(\"0 1\") == \"0 1\"\nassert solution(\"1 2\") == \"0 1\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('100000') == '1'\nassert solution('100000 -1') == '1'\nassert solution('100000 -1 -1') == '2'\nassert solution('100000 -1 -2') == '1'\nassert solution('100000 -1 -3') == '3'\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"0 1 -1\") == \"0\"\nassert solution(\"1 1 -1\") == \"1\"\nassert solution(\"1 2 -1\") == \"1\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\n) == \"0\"\n\nassert solution(\n    \"\"\"\n    0 2\n    1 2\n    2 2\n    3 2\n    4 2\n    \"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"\n    1 1\n    1 2\n    1 1\n    \"\"\"\n) == \"0\"\n\nassert solution(\n    \"\"\"\n    1 1\n    1 2\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n    2 2\n    1 1\n    1 1\n    \"\"\"\n) == \"2\""
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 1\"\"\") == \"0\"\nassert solution(\"\"\"5 2\"\"\") == \"1\"\nassert solution(\"\"\"5 3\"\"\") == \"2\"\nassert solution(\"\"\"6 2\"\"\") == \"3\"\nassert solution(\"\"\"6 5\"\"\") == \"4\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"-1 0 -1 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"3\"\nassert solution([\"1\", \"4\", \"5\", \"6\", \"7\", \"9\"]) == \"5\"\nassert solution([\"1\", \"4\", \"5\", \"6\", \"7\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"7\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\n\nSample Input:\n5\n1 2 3 4 5 6\nSample Output:\n3\n"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 13\n\nSample Input:\n\n1\n\nSample Output:\n4\n2\n\nExplanation\nThe sequence is a set of integers, $a_i$, which are in the form $1 \\leq i \\leq 5^\\mathcal{n}$, and $a_i \\geq 10^{18}$.\nThe distinct values $f$ are: $1 \\leq a_{i+1} \\leq 10^{18}$, $a_{i+1} \\leq 10^{18}$, $a_{i+1} \\leq 10^{18}$, and $a_{i+1} \\geq 10^{18}$.\n\n\"\"\""
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\nprint('Example 1:')\nprint('Input :')\nprint('stdin :')\nprint('4')\nprint('Output :')\nprint('6')\nprint()\nprint('Example 2:')\nprint('Input :')\nprint('stdin :')\nprint('9 6 2 4')\nprint('Output :')\nprint('5')\nprint()\nprint('Example 3:')\nprint('Input :')\nprint('stdin :')\nprint('1')\nprint('Output :')\nprint('1')\nprint()\nprint('Example 4:')\nprint('Input :')\nprint('stdin :')\nprint('9 6 2 4')\nprint('Output :')\nprint('7')\nprint()\nprint('Example 5:')\nprint('Input :')\nprint('stdin :')\nprint('1')\nprint('Output :')\nprint('2')\nprint()\nprint('Example 6:')\nprint('Input :')\nprint('stdin :')\nprint('-1')\nprint('Output :')\nprint('-1')\nprint()\nprint('Example 7:')\nprint('Input :')\nprint('stdin :')\nprint('-2')\nprint('Output :')\nprint('-2')\nprint()\nprint('Example 8:')\nprint('Input :')\nprint('stdin :')\nprint('1')\nprint('Output :')\nprint('1')\nprint()\nprint('Example 9:')\nprint('Input :')\nprint('stdin :')\nprint('1')\nprint('Output :')\nprint('2')\nprint()\nprint('Example 10:')\nprint('Input :')\nprint('stdin :')\nprint('-1')\nprint('Output :')\nprint('-1')\nprint()\n"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == 1\nassert solution(\"4 5 6\") == 4\nassert solution(\"3 4\") == 3\nassert solution(\"2 4\") == 2\nassert solution(\"5 7 5\") == 5\n"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 14, 'incorrect number of distinct values'\n\nExplanation:\n\nSample input:\n4\n9 6 2 4\nSample output:\n6\n\n\"\"\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\n\nsample1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nsample2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nsample3 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nsample4 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nsample5 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 4 5 2 3') == 4\nassert solution('2 4 2 2') == 4\nassert solution('2 3 2 3') == 3\nassert solution('1 6') == 4\nassert solution('1 6 2 3 4 5 6 7 8 9') == 5\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.000000'\nassert solution(stdin) == '2.000000'\nassert solution(stdin) == '2.000000'\nassert solution(stdin) == '3.000000'\nassert solution(stdin) == '3.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"1.000000\"\nassert solution(\"3 3 3 3 3\") == \"3.000000\"\nassert solution(\"1 1\") == \"0.000000\"\nassert solution(\"1 5\") == \"5.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 1 1 3 2\"\"\") == \"0.000001\"\nassert solution(\"\"\"2 5 1\n2 5 1\"\"\") == \"0.000000\"\nassert solution(\"\"\"2 5 1\n2 5 2\"\"\") == \"0.000001\"\nassert solution(\"\"\"2 3 1 2 1\"\"\") == \"0.000000\"\nassert solution(\"\"\"2 3 2 2 2\"\"\") == \"0.000001\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 3 2\") == \"1.000000\"\nassert solution(\"1 4 4 4 4\") == \"2.000000\"\nassert solution(\"1 1 1 1 1\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"1.000000\"\nassert solution(\"2 5 1 2 5\") == \"0.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '0.000000'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"10\\n1\\n5\\n2\\n3\\n4\\n4\\n5\\n7\\n2\\n2\\n4\\n3\\n3\\n6\\n5\\n7\\n4\\n6\\n6\\n2\\n7\\n4\\n5\\n7\\n6\\n3\\n3\\n7\\n6\\n5\\n7\\n3\\n3\\n7\\n6\\n6\\n2\\n7\\n5\\n7\\n3\\n6\\n5\\n7\\n6\\n5\\n7\\n7\\n3\\n7\\n7\\n6\\n5\\n6\\n7\\n6\\n5\\n7\\n7\\n7\\n5\\n7\\n6\\n5\\n7\\n6\\n6\\n6\\n7\\n7\\n6\\n7\\n6\\n6\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2 3 2\") == \"2\"\nassert solution(\"3 2 2 3 2\") == \"2\"\nassert solution(\"3 3 3 3 3\") == \"3\"\nassert solution(\"5 3 3 3 3\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3.5'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0.5'\n"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\".#.##.#.##\") == \"6\"\nassert solution(\".#.#..#.##\") == \"1\"\nassert solution(\".######.##\") == \"4\"\nassert solution(\".#######.##\") == \"0\"\nassert solution(\".#...##..#\") == \"1\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2') == 96, 'passed'\n"
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 0\") == \"96\""
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3\",\"2\",\"4\",\"1\"]) == \"96\"\nassert solution([\"1\",\"2\",\"4\"]) == \"96\"\nassert solution([\"3\",\"4\"]) == \"96\"\nassert solution([\"2\",\"3\",\"4\"]) == \"96\"\nassert solution([\"1\",\"4\"]) == \"96\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 96\n"
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5 5 2\",\n    \"2 2 1 2 1 1 3\") == \"7\"\nassert solution(\n    \"4 4 3\",\n    \"2 3 2 3 2 3 2 3 2 2 3 2 2 3 2 3 2\") == \"8\"\nassert solution(\n    \"4 5 4\",\n    \"2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2\") == \"12\"\n\"\"\""
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"96\"\nassert solution(\"2 3\") == \"96\"\nassert solution(\"4 1\") == \"96\"\nassert solution(\"1 4\") == \"96\"\nassert solution(\"1 2 3 4\") == \"96\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 96\nassert solution(\"123\") == \"111\"\nassert solution(\"12312\") == \"1201\"\nassert solution(\"123123123\") == \"123123123\"\nassert solution
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 96\nassert solution(\"3 1\") == 96\nassert solution(\"3 4\") == 96\n"
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 4) == 11\nassert solution(5, 3) == 11\nassert solution(3, 5) == 7\nassert solution(2, 3) == 7\nassert solution(3, 1) == 7\n"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0'\nassert solution('0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0'\nassert solution('1 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0'\nassert solution('1 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0'\nassert solution('1 1 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution((\"6 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\nSample Input:\n5\n0 0\n0 1\n1 0\n1 1\n1 2\n2 1\nSample Output:\n2\n\"\"\"\nimport sys\n\nsys.stdin.readline()\nn = int(sys.stdin.readline())\npoint = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\nweight = [0] * n\n\nfor i in range(n):\n    for j in range(n):\n        if point[i][0] == point[j][0] and point[i][1] == point[j][1]:\n            weight[i] += 1\n            weight[j] += 1\n\nfor _ in range(n):\n    for i in range(n):\n        if weight[i] == 0:\n            weight[i] = float('inf')\n        if weight[i] == 1:\n            weight[i] = 0\n        if weight[i] < weight[i+1]:\n            weight[i+1] = weight[i]\nprint(weight[0])"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, [[1, 2], [2, 3], [3, 4], [4, 2], [5, 1]]) == \"1\"\nassert solution(6, [[1, 2], [2, 3], [3, 4], [4, 4], [5, 5], [1, 6], [6, 7], [7, 8], [8, 9], [9, 0], [10, 11], [0, 12], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17]]) == \"4\"\nassert solution(7, [[1, 2], [2, 3], [3, 4], [4, 4], [5, 5], [6, 6], [6, 7], [7, 8], [8, 9], [9, 0], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32]]) == \"2\"\nassert solution(6, [[1, 2], [2, 3], [3, 4], [4, 4], [5, 5], [6, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32]]) == \"2\"\n\"\"\""
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"14\"\nassert solution(\"5 0 1 5 1 2 4 7\") == \"1\"\nassert solution(\"1 0 0 0 0 0 0 0\") == \"1\"\nassert solution(\"1 1 0 0 0 0 0 0\") == \"0\"\nassert solution(\"1 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\nSample Input:\n1\n1 2\n1 2\n2 2\n2 2\n2 2\n2 3\nSample Output:\n4\n"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, [0, 0, 1, 1, 2]) == \"3\"\nassert solution(2, [2, 0, 1, 0, 1]) == \"2\"\nassert solution(1, [0, 0, 0, 0, 0]) == \"0\"\nassert solution(3, [0, 2, 0, 0, 0, 0]) == \"2\"\nassert solution(0, [0, 0, 0, 0]) == \"0\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 4 5 2\") == \"15\"\nassert solution(\"3 4 4 4 5\") == \"10\"\nassert solution(\"1 4 5\") == \"9\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(list(map(int, stdin.split()))) == str(sum(map(int, stdin.split())))\n"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    inp\n    ) == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        str(\n            input())\n    ) == str(\n        input())\n"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin.readline()) == \"1\"\nassert solution(sys.stdin.readline()) == \"2\"\nassert solution(sys.stdin.readline()) == \"3\"\nassert solution(sys.stdin.readline()) == \"4\"\nassert solution(sys.stdin.readline()) == \"5\""
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"17\"\n\nSample Input:\n3\n2 8\n3 1\n1 4\nSample Output:\n5\nExplanation:\nAmong all pairings $(a_ 1, b_ 2)$, $a_ 1, a_ 2$ and $a_ 1, a_ 3$ are pairings $(b_ 1, b_ 2)$, and $b_ 1, b_ 2$ are pairings $(a_ 1, b_ 1)$, and $a_ 1, a_ 2$ are pairings $(a_ 1, a_ 2)$, and $a_ 1, a_ 3$ are pairings $(a_ 1, a_ 3)$.\nThe maximal sum is $a_ 1 + a_ 2 + a_ 3 = 17$, as a pairings $(a_ i, b_ j)$ are pairings $(a_ j, b_ i)$, and the minimum sum is $a_ 1 + a_ 2 + a_ 3 = 17$, as a pairings $(a_ i, a_ j)$ are pairings $(a_ j, a_ i)$, and the maximum sum is $a_ 1 + a_ 2 + a_ 3 = 17$.\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"6 4 7 4 8 3 1 6 4 9 9 4\"\n) == \"10\"\nassert solution(\n    \"9 3 1 2 4 1 7 6 3 6\"\n) == \"9\"\nassert solution(\n    \"6 5 2 4 3 6 6 2 7 4 5\"\n) == \"4\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\n\n\"\"\""
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 4\") == \"10\"\nassert solution(\"5 5 6 2\") == \"6\"\nassert solution(\"3 4 6 4\") == \"9\"\nassert solution(\"2 2 5 2\") == \"6\"\nassert solution(\"4 3 1\") == \"4\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 2, 3, 1) == \"15\"\nassert solution(10, 8, 7, 4) == \"15\"\nassert solution(5, 3, 1, 2) == \"1\"\nassert solution(3, 4, 5, 1) == \"5\"\nassert solution(1, 1, 1, 2) == \"1\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"#####\\n#JF#\\n##J#\\n#F#\\n##F#\") == \"3\"\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.count = 0\n\n    def solve(self, input: str):\n        pass\n\n    def solve(self, input: str) -> str:\n        pass\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"JF#.J#.JF#\") == \"7\"\nassert solution(\"JF#.J#.JF#.J#\") == \"7\"\nassert solution(\"J#.J#.J#.J#.J#\") == \"7\"\nassert solution(\"J#.J#.J#.J#.J#.J#\") == \"7\"\nassert solution(\"J#.J#.J#.J#.J#.J#.J#\") == \"7\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"IMPOSSIBLE\"\nassert solution(\"2 0\") == \"IMPOSSIBLE\"\nassert solution(\"4 7\") == \"IMPOSSIBLE\"\nassert solution(\"4 0\") == \"IMPOSSIBLE\"\nassert solution(\"2 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('RRRRRRR') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"12 9\") == \"IMPOSSIBLE\"\nassert solution(\"12 4\") == \"3\"\nassert solution(\"2 1\") == \"IMPOSSIBLE\"\nassert solution(\"4 1\") == \"IMPOSSIBLE\"\nassert solution(\"1 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"R R R R R R\") == \"IMPOSSIBLE\"\nassert solution(\"J F J F J F J\") == \"IMPOSSIBLE\"\nassert solution(\"J J J J J J F F\") == \"IMPOSSIBLE\"\nassert solution(\"F J J J J J J F F\") == \"IMPOSSIBLE\"\nassert solution(\"J F J J J J J F F\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 # # # # # 1 2 3 4 5 6\") == \"IMPOSSIBLE\"\nassert solution(\"1.5 2.5 # # # # # 1.5 2.5 3.5 4.5 5.5 6.5\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\") == \"IMPOSSIBLE\"\nassert solution(\"2.5 4.5\") == \"IMPOSSIBLE\"\nassert solution(\"1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5 1.5.5.5\") == \"IMPOSSIBLE\"\n\n\"\"\"\nimport sys\nimport time\n\nR, C = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"#####\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"J.F.#\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"JF.#.#\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"J.F.F.#\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"JF.#.F.#\"\n) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"JF#\",\"JF#\",\"JF#\",\"JF#\"]) == \"IMPOSSIBLE\"\nassert solution([\"J#\",\"#\",\"#\",\"#\"]) == \"IMPOSSIBLE\"\nassert solution([\"JF\",\"JF\",\"JF\"]) == \"IMPOSSIBLE\"\nassert solution([\"JF\",\"JF\",\"JF\",\"JF\"]) == \"IMPOSSIBLE\"\nassert solution([\"JF\",\"JF\",\"JF\",\"JF\",\"JF\"]) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"F\"\nassert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 1\") == \"F\"\nassert solution(\"2 2\") == \"F\"\nassert solution(\"1 1\") == \"F\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == str(0.3333333333)\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"true\", \"solution is not correct\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input()\n    ) == '0.3333333333', 'incorrect'\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0.3333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1.0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0.3333333333'\nassert solution(stdin) == '0.3333333333'\nassert solution(stdin) == '0.3333333333'\nassert solution(stdin) == '0.3333333333'\nassert solution(stdin) == '0.3333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(a) == a/2\nassert solution(d) == d/2\nassert solution(d+1) == d+1\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"1.25\"\nassert solution(\"3 3 3\") == \"1.50\"\nassert solution(\"5 1 0\") == \"1.25\"\nassert solution(\"10 1 0\") == \"1.25\"\nassert solution(\"1 1 1\") == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == '0.3333333333'\nassert solution(b) == '0.3333333333'\nassert solution(c) == '0.3333333333'\nassert solution(d) == '0.3333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 2\") == 1\nassert solution(\"2 1 1\") == 1\nassert solution(\"3 1 1\") == 1\nassert solution(\"4 1 1\") == 1\nassert solution(\"5 1 1\") == 1\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == 1, \"Unexpected pattern\"\nassert solution(\"1*1\") == 1, \"Unexpected pattern\"\nassert solution(\"1**\") == 1, \"Unexpected pattern\"\nassert solution(\"1*1*\") == 1, \"Unexpected pattern\"\nassert solution(\"1*1*1\") == 2, \"Unexpected pattern\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1*1\") == \"1\"\nassert solution(\"1*\") == \"1\"\nassert solution(\"1*1\") == \"1\"\nassert solution(\"1*1*1\") == \"1\"\nassert solution(\"1*1*1*1\") == \"1\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin=\"10\"\n    ) == 5\n\nassert solution(\n    stdin=\"11111\"\n    ) == 2\nassert solution(\n    stdin
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10\n\nSample Input:\n2\n110111\n101101\n\nSample Output:\n2\n\"\"\""
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1*1') == 1, \"Invalid pattern\"\nassert solution('1*') == 1, \"Invalid pattern\"\nassert solution('1*1') == 1, \"Invalid pattern\"\nassert solution('1*1*1') == 1, \"Invalid pattern\"\nassert solution('1*1*1*1') == 1, \"Invalid pattern\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1*1\", \"1*1\"]) == \"1\", \"incorrect pattern\"\nassert solution([\"1*0\", \"1*0\"]) == \"1\", \"incorrect pattern\"\nassert solution([\"1*0\", \"1*1\", \"1*1\"]) == \"1\", \"incorrect pattern\"\nassert solution([\"1*1\", \"1*0\", \"1*1\", \"1*1\"]) == \"1\", \"incorrect pattern\"\nassert solution([\"1*0\", \"1*1\", \"1*0\"]) == \"1\", \"incorrect pattern\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 23\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"The given string does not satisfy the given pattern\"\nassert solution(stdin), \"The given string does not satisfy the given pattern\"\nassert solution(stdin), \"The given string does not satisfy the given pattern\"\nassert solution(stdin), \"The given string does not satisfy the given pattern\"\nassert solution(stdin), \"The given string does not satisfy the given pattern\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1*1') == 1\nassert solution('1*1*1') == 2\nassert solution('1*1*2*2') == 2\nassert solution('1*1*3*3') == 3\nassert solution('1*1*4*4') == 4\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, \"1*1\") == 1\nassert solution(2, \"11*1*1\") == 4\nassert solution(1, \"1*0\") == 0\nassert solution(1, \"1*1\") == 0\nassert solution(1, \"1*1*1\") == 0\n"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == solution(\"2 3\")\nassert solution(input()) == \"6\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\n'''\n"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"36\"\nSample Input:\n1\nSample Output:\n1\n"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"11 13\") == 3\nassert solution(\"2 1\") == 1\nassert solution(\"12\") == 1\nassert solution(\"22\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin) == '6'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1 1\") == 0\nassert solution(\"2\") == 1\nassert solution(\"3\") == 1\nassert solution(\"5\") == 2\n"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"1 4\") == \"12\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"1 4\") == \"12\"\nassert solution(\"1 2\") == \"6\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"6\"\nassert solution(\"3 2\") == \"7\"\nassert solution(\"4 2\") == \"10\"\nassert solution(\"5 3\") == \"15\"\nassert solution(\"6 4\") == \"20\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"01234\") == \"6\"\nassert solution(\"23456\") == \"7\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 4 1 2 4 2 2 4 1 5 6 5 5 3 5 1\"\n) == 15\nassert solution(\n    \"2 3 3 3 3\"\n) == 12\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1 1 3 1 3 1 3 1 2 3 2 2 3 3 3 1 2 2 3 3 2 1 2 3 3 2 1 2 3 3 3 2 1 2 3 3 3 2 1 2 3 3 2 2 3 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 3 2 1 2 3 3 2 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3 3 2 1 2 3"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"100\", \"480\", \"500\", \"550\", \"1000\", \"1400\", \"1500\", \"1000\"]) == \"2930\"\n\"\"\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2930\n"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Impossible\""
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2930\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2930\nassert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1000 1000 1000 1000 1000 100 1000\"), \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 10\") == \"2930\"\nassert solution(\"3 4 10\") == \"2930\"\nassert solution(\"2 3 2\") == \"2800\"\nassert solution(\"1 6 5\") == \"2800\"\nassert solution(\"3 3 3\") == \"2300\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sys.stdin.readline()) == '2'\nassert solution(sys.stdin.readline()) == '1'\nassert solution(sys.stdin.readline()) == '1'\nassert solution(sys.stdin.readline()) == '1'\nassert solution(sys.stdin.readline()) == '1'\n"
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n\"\"\""
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\nSample Input:\n1 2 3\n1\n2\n1\n3\n2\nSample Output:\n1\n2\n5\n'''"
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5,0) == 3, \"solution(5,0) is not returning 3\"\nassert solution(4,0) == 0, \"solution(4,0) is not returning 0\"\nassert solution(0,0) == 1, \"solution(0,0) is not returning 1\"\nassert solution(1,0) == 0, \"solution(1,0) is not returning 0\"\nassert solution(3,0) == 2, \"solution(3,0) is not returning 2\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin=\n    \"\"\"\n    12,\n    5\n    15\n    \"\"\"\n    ) == \"4\"\n\n\n\"\"\"\nSample Input:\n2\n10 3\n10 20 10 20 20 10 20\n\nSample Output:\n2\n\"\"\"\nassert solution(\n    stdin=\n    \"\"\"\n    12,\n    5\n    10\n    \"\"\"\n    ) == \"2\"\n\n\n\"\"\"\nSample Input:\n2\n5\n
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, c = map(int, stdin.split())\n        arr = [int(x) for x in stdin.split()]\n        a, b, c = arr[:n], arr[n:2 * n], arr[2 * n:]\n        answer = 0\n        for x in a:\n            if c.count(x) > 1:\n                answer += 1\n            elif c.count(x) == 1:\n                answer += c.count(x)\n        for x in b:\n            if c.count(x) > 1:\n                answer += 1\n            elif c.count(x) == 1:\n                answer += c.count(x)\n        return str(answer)\n"
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['5 4', '4 4', '4 1', '1 1', '2 1', '1 4', '0 1', '2 3', '1 2']) == '2'\nassert solution(['4 2', '3 3', '1 1', '2 2', '3 3', '1 1', '2 2', '3 3', '1 2']) == '2'\nassert solution(['4 1', '2 2', '3 3', '1 1', '2 2', '3 3', '1 1', '2 2', '3 3']) == '2'\n\"\"\""
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"2\", \"2\"]) == \"2\"\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"2\", \"2\"]) == \"0\"\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\"]) == \"1\"\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\"]) == \"0\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == 9\nassert solution(\"3 3\") == 18\nassert solution(\"2 2\") == 1\nassert solution(\"2 3\") == 2\nassert solution(\"2 4\") == 2\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"-5 2 -5\") == 10\nassert solution(\"-1 -2 -1\") == 20\nassert solution(\"5 4 -5\") == 12\nassert solution(\"2 2\") == 2\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 6 -1\") == \"15\"\nassert solution(\"5 8 -5 -5\") == \"10\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == 11, \"expected 11, got {}\".format(11)\nassert solution(\"3 3 -5 2 -5\") == 10, \"expected 10, got {}\".format(10)\nassert solution(\"3 3 -5 -5\") == 10, \"expected 10, got {}\".format(10)\nassert solution(\"3 3 -5 -5 -5\") == 10, \"expected 10, got {}\".format(10)\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '10'\n\"\"\"\nimport math"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1, \"incorrect return value\"\nassert solution(\"-5 1 -2\") == -1, \"incorrect return value\"\nassert solution(\"5 4 -5\") == 0, \"incorrect return value\"\nassert solution(\"2 2\") == 10, \"incorrect return value\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 2 4', [4, 2]) == '3 100'\nassert solution('3 3 6', [6, 3]) == '7100'\nassert solution('5 4 4 3 3 4 4', [3, 4, 3, 4]) == '6100'\nassert solution('1 1 1', [1]) == '0'\nassert solution('2 2 3 4 5', [5, 2]) == '3'\n"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 500 4 5 6 7 8 9 10\") == \"3100\"\nassert solution(\"1 2 4 7 8 9 10\") == \"9\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 7 3 4 3 5 3 4 4 5 5 5 5 5 5 5 5 5\") == \"4\"\nassert solution(\"2 4 4\") == \"2\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1 1 500 3 4 3 1') == '3100'\nassert solution('1 3 100 100 100 100 1000 100 100 1000 100 1000 100 1000 200 100 100 100 200 200 100 100 200 100 100') == '3100'\nassert solution('1 3 100 100 100 100 100 1000 100 1000 100 1000 100 1000 100 200 100 100 100 200 200 100 100 100 200 100 100') == '3100'\nassert solution('1 3 100 100 100 100 100 1000 100 1000 100 1000 100 1000 100 200 100 100 100 200 200 100 100 100 200 100 100') == '3100'\nassert solution('1 3 100 100 100 100 100 1000 100 1000 100 1000 100 1000 100 200 100 100 100 200 200 100 100 100 200 100 100') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 5 300\") == \"3 100\""
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 1000 1000 0 1 4 500 100 500 100 500 100 500 100 500 100 500 100 500 100 500 100 100 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 2 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 4 5 2 1 4 5 2 100 9\"\n    ) == \"3100\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 2\n\nSample Input:\n1\n1 1\nSample Output:\n1\n\nassert solution(input) == 1\n\n\"\"\""
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"0 1 10 15 20 50 20 10 11 25\"\n) == 16\nassert solution(\n    \"0 0 10 10 15 20 10 10 10 10 10\"\n) == 50\nassert solution(\n    \"0 0 10 0 10 10 10 10 10 10 10\"\n) == 25\nassert solution(\n    \"0 0 0 0 0 10 10 10 10 10 10 10\"\n) == 0\nassert solution(\n    \"0 0 0 0 0 0 10 10 10 10 0 10\"\n) == 0\n"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 0 0 0\") == \"0\"\nassert solution(\"2 3 0 1\") == \"0\"\nassert solution(\"0 1 2 0\") == \"3\"\nassert solution(\"1 2 1 0\") == \"4\"\nassert solution(\"0 0 2 3\") == \"7\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"11\"\nassert solution(\"2 10\") == \"10\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5 3 10 2 2 0 1 3 9 2 1\"\n) == 12, \"One-way road not constructed\"\nassert solution(\n    \"2 2 10 3 2 2 10 4 10 0\"\n) == 14, \"Two-way road not constructed\"\nassert solution(\n    \"2 2 10 3 2 2 10 4 10 0 1 2\"\n) == 10, \"Two-way road not constructed\"\nassert solution(\n    \"4 10 0\"\n) == 4, \"Four-way road not constructed\"\nassert solution(\n    \"0\"\n) == 3, \"No road is constructed\"\n\"\"\""
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0 1 0'), 0\nassert solution('1 2 4'), 0\nassert solution('1 4 0'), 0\nassert solution('2 4 3'), 0\nassert solution('2 5 2'), 0\n"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"8\"\nassert solution(\"4 4 4\") == \"8\"\nassert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 200\") == \"1 200\"\nassert solution(\"7 39\") == \"9 39\"\nassert solution(\"42 10\") == \"9 42\"\nassert solution(\"21 1\") == \"21\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '42', 'Wrong solution'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1311\", \"1310\", \"1211\"]) == \"10\"\nassert solution([\"1311\", \"1310\", \"1211\", \"1210\", \"1101\"]) == \"1310\"\nassert solution([\"1311\", \"1310\", \"1211\", \"1210\", \"1101\", \"1101\"]) == \"9\"\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\"]) == \"10\", \"First line has to contain only one number\"\nassert solution([\"10010100\", \"2\"]) == \"1\", \"Second line has to contain only two numbers\"\nassert solution([\"73\"]) == \"73\", \"Third line has to contain only one number\"\nassert solution([\"34\", \"200\"]) == \"2\", \"Fourth line has to contain one number\"\nassert solution([\"2\", \"100101\"]) == \"2\", \"Fifth line has to contain only two numbers\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"10\"\nassert solution(input) == \"9\"\nassert solution(input) == \"1\"\nassert solution(input) == \"5\"\nassert solution(input) == \"4\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 10') == '10', 'Expected solution(10) to be \"10\", got \"1 10\".'\nassert solution('73') == '73', 'Expected solution(73) to be \"73\", got \"73\".'\n\"\"\"\n\nfrom datetime import date"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"16\", \"32\"]) == \"10\", \"16,32\"\nassert solution([\"8\", \"6\"]) == \"0\", \"8,6\"\nassert solution([\"11\", \"24\"]) == \"5\", \"11,24\"\nassert solution([\"2\", \"4\"]) == \"2\", \"2,4\"\nassert solution([\"4\", \"2\"]) == \"2\", \"4,2\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '10', 'Sample Input:'+ str(stdin)\nassert solution(stdin) == '10', 'Sample Output:'+ str(stdin)\n'''\nclass Solution:\n    def str_to_num(self,num):\n        res=''\n        for i in range(len(num)):\n            if num[i].isdigit():\n                res=res+num[i]\n            else:\n                break\n        return int(res)\n    def is_prime(self,num):\n        for i in range(2,int(num/2)+1):\n            if num%i==0:\n                return False\n        return True\n    def prime_numbers(self,num):\n        if num==1:\n            return 0\n        if num==2:\n            return 2\n        if num==3:\n            return 4\n        else:\n            for i in range(5,int(num/2)+1,6):\n                if num%i==0:\n                    return False\n            return True\n"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 8 10\") == \"1 4 8 10\"\nassert solution(\"11\") == \"1 2 4 8 10\"\nassert solution(\"4 5 7 3\") == \"1 2 4 8 10\"\nassert solution(\"10 6\") == \"1 2 4 8 10\"\nassert solution(\"1000\") == \"1 2 4 8 10\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('0 0 0') == '0'\nassert solution('0 1000 0') == '1000'\nassert solution('0 1000 1000') == '1000'\nassert solution('0 0 0 -20000 0') == '-20000'\nassert solution('0 0 0 0 1000 -20000') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\nSample Input:\n4\n0 0\n1000 0\n0 1000\n1000 1000\nSample Output:\n2\nSample Input:\n2 2\n3 5\n3 3\nSample Output:\n2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 2 2') == 4\nassert solution('0 3 0') == 5\nassert solution('0 0 0') == 0\nassert solution('1 1 0') == 0\nassert solution('0 0 0 0') == 0\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3 0\") == \"0\"\nassert solution(\"4 4 0\") == \"0\"\nassert solution(\"4 3 0\") == \"0\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"1 3 4\") == \"2\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 0\") == \"6\"\nassert solution(\"3 4 0\") == \"0\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"4 1 0\") == \"0\"\nassert solution(\"6 2 0\") == \"4\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0 0 0') == '0 0 0'\nassert solution('1000 0 0') == '1 0 0'\nassert solution('0 1000 0') == '1 0 0'\nassert solution('1000 1000 0') == '2 0 0'\nassert solution('0 0 1000') == '2 2 0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1000 0\") == \"0\"\nassert solution(\"0 1000\") == \"1000\"\nassert solution(\"1000 1000\") == \"1000\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 0 0 0 1 0 0 0 0\") == \"0\"\nassert solution(\"1 1000 0 0 0 0 1 1000 1000 0\") == \"1000\"\nassert solution(\"2 1 0 0 0 0 1 1000 1000 0\") == \"1000\"\nassert solution(\"3 0 0 0 0 0 1 1000 1000 0\") == \"0\"\nassert solution(\"4 0 0 0 0 0 1 1000 1000 0\") == \"1000\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp := (1, 1, 0)) == -1\nassert solution(inp := (1, 1, 0)) == 0\nassert solution(inp := (2, 2, 0)) == 1\nassert solution(inp := (2, 2, 0)) == 2\nassert solution(inp := (1, 1, 1000)) == 0\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.500000000 1.000000000'\n'''\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,2) == 0.5\nassert solution(2,2) == 1\nassert solution(3,2) == -1\nassert solution(4,2) == -1\nassert solution(2,2) == 0\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1.000000000\"\nassert solution(stdin) == \"2.000000000\"\nassert solution(stdin) == \"2.000000000\"\nassert solution(stdin) == \"0.3333333333\"\nassert solution(stdin) == \"0.3333333333\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 2 1.5\", \"0 1 0.5\", \"1 0 1\"]) == \"1.0\"\nassert solution([\"1 2 1\", \"0 1 1\", \"1 0 1\", \"0 0 0.5\", \"0 0 0.5\"]) == \"0.0\"\nassert solution([\"0 2\", \"0 1\", \"0 0.5\", \"0 0.5\"]) == \"0.5\"\nassert solution([\"0 2\", \"0 1\", \"0 1\", \"0 1\"]) == \"1.0\"\nassert solution([\"0 2\", \"0 1\", \"1 0.5\", \"0 0.5\"]) == \"-1.0\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(float(1)/4.0)\n\nExplanation:\nIf we take $N$ = 20, $k$ = 20, $p_k = 0.8$, then the predicted probability is 0.6.\n\nInput Format:\nThe first line contains two integers $N \\le N \\le 300$ and $0 \\le M \\le \\frac{N(N-1)}{2}$, the number of cabins and pistes respectively.\n\nThe next $M$ lines contains $N \\le \\frac{N(N-1)}{2}$, each denoting the probability of falling along each of $N$-1 cabins.\n\nConstraints:\n1 <= N <= 100\n0 <= k < N\n\nOutput Format:\nFor each number $k \\in [0,N-1]$ and $p_k$ (if any) return the maximum probability that Luk\u00e1\u0161 didn\u2019t fall when walking along at most $k$ pistes. If it is impossible to get down the hill by walking along at most $k$ pistes, return $p_k=-1$.\n\nSample Input:\n2\n2\n0.5 1 0.5\nSample Output:\n2.0\nExplanation:\nIf we take $N$ = 20, $k$ = 20, $p_k = 0.8$ then the predicted probability is 0.6.\n\nInput Format:\nThe first line contains two integers $N \\le N \\le 300$ and $0 \\le M \\le \\frac{N(N-1)}{2}$, the number of cabins and pistes respectively.\n\nThe next $M$ lines contains $N \\le \\frac{N(N-1)}{2}$, each denoting the probability of falling along each of $N$-1 cabins.\n\nConstraints:\n1 <= N <= 100\n0 <= k < N\n\nOutput Format:\nFor each number $k \\in [0,N-1]$ and $p_k$ (if any) return the maximum probability that Luk\u00e1\u0161 didn\u2019t fall when walking along at most $k$ pistes. If it is impossible to get down the hill by walking along at most $k$ pistes, return $p_k=-1$.\n\n\"\"\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1.000000000'\n\nSample Input:\n1 2 2\n0 1 0.5\nSample Output:\n2.000000000\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0.500000000'\n-----Explanation-----\nThe maximum probability that Luk\u00e1\u0161 didn\u2019t fall when walking along at most $k$ pistes is $p_ k=-1$.\n\nSample Input:\n2 1\n0 1 1\nSample Output:\n0.500000000 0.500000000\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0.500000000\"\nassert solution(stdin) == \"1.000000000\"\nassert solution(stdin) == \"0.500000000\"\nassert solution(stdin) == \"1.00000000\"\nassert solution(stdin) == \"0.500000000\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0.500000000 1.000000000\"\nassert solution(stdin) == \"0.500000000 1.000000000\"\nassert solution(stdin) == \"0.500000000 1.000000000\"\nassert solution(stdin) == \"0.500000000 1.000000000\"\nassert solution(stdin) == \"0.500000000 1.000000000\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 2 1 4 3 4 3\") == '1.5'\nassert solution(\"2 2 2\") == '1'\nassert solution(\"3 2 2\") == '0.5'\nassert solution(\"3 2 2\") == '-1'\nassert solution(\"3 2 2\") == '1.5'\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\", 'test_failed'\nassert solution(\"2\") == \"2\", 'test_failed'\nassert solution(\"5\") == \"7\", 'test_failed'\nassert solution(\"5\") == \"8\", 'test_failed'\nassert solution(\"4\") == \"6\", 'test_failed'\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"10\"\nassert solution(\"2 3\") == \"10\"\nassert solution(\"5 2\") == \"10\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"5 1\") == \"0\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1000'\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [2, 1, 3, 0, 1, 2]) == 8\nassert solution(10, [2, 1, 3, 4, 6, 7]) == 10\nassert solution(4, [3, 5]) == 15\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp := list(map(int, stdin.split()))) == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 0\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 1\nassert solution(5) == 4\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), 'Test Failed'\n\n'''\n"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input()\n) == \"7\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 4 1\") == \"7\"\nassert solution(\"1 3 4 1\") == \"7\"\nassert solution(\"1 2 3 4 1\") == \"5\"\nassert solution(\"1 3 2 4 1\") == \"5\"\nassert solution(\"1 3 1 2 4 1\") == \"4\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3-b 5-b','sample test case fails'\nassert solution(stdin) == '6-a 2-b','sample test case fails'\nassert solution(stdin) == '5-b','sample test case fails'\nassert solution(stdin) == '3-b','sample test case fails'\n\nSample Input:\n2\naba\n1-b\n4-a\n6-a\n1\n3\n2\nSample Output:\n9-b\n8-a\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('aba') == 'ba', 'incorrect output'\nassert solution('bba') == 'a', 'incorrect output'\nassert solution('babbbb') == 'ab', 'incorrect output'\nassert solution('aabbbabab') == 'ab', 'incorrect output'\nassert solution('aabbbbcba') == 'a', 'incorrect output'\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"10-b\"\nassert solution(input()) == \"2-b\"\nassert solution(input()) == \"6-b\"\nassert solution(input()) == \"7-b\"\nassert solution(input()) == \"3-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, \"a b\") == \"ba\"\nassert solution(5, \"aa ab\") == \"bab\"\nassert solution(6, \"ab aa aa\") == \"baa\"\nassert solution(0, \"\") == \"\"\nassert solution(2, \"a b\") == \"aba\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        \"a b\",\n        \"b a\",\n        \"b a\",\n        \"b a\",\n        \"b a\",\n        \"a b\",\n        \"a b\",\n        \"a b\",\n    ]\n) == \"9-b\"\nassert solution(\n    [\n        \"ab\",\n        \"ba\",\n        \"aa\",\n        \"aa\",\n        \"aa\",\n        \"aa\",\n        \"aa\",\n        \"ba\",\n    ]\n) == \"8-a\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"9-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(st) == '5-b'\nassert solution(st) == '6-a'\nassert solution(st) == '2'\nassert solution(st) == '1'\nassert solution(st) == '9'\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '9-b'\nassert solution(stdin) == '8-a'\nassert solution(stdin) == '9-b'\nassert solution(stdin) == '8-a'\nassert solution(stdin) == '9-b'\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input() == \"0 1 2 4 5 8 10 15 20 28\") == 15\nassert solution(input() == \"0 1 2 4 5 6 8 9 10\") == 14\nassert solution(input() == \"0 1 2 4 5 6 7 8 9 10\") == 20\nassert solution(input() == \"0 1 2 4 5 6 7 8 9 10\") == 8\nassert solution(input() == \"0 1 2 4 5 6 7 8 9 10\") == 20\n"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'def'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'D3R3246'\n\nSample Input:\n1\nsoft\n12\n2\nsoft\nsoft\nSample Output:\n1\nsoft\nsoft\n3246R3246\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\nsoft\n"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3246R3246\") == \"U\"\nassert solution(\"1\") == \"D\"\nassert solution(\"3245\") == \"D\"\nassert solution(\"1/3\") == \"U\"\nassert solution(\"2\") == \"U\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"R3246R3246\"\n\n\"\"\""
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"Hello World\") == \"Hello World\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"1 2 3 4 5 6\") == \"1 2 3 4 5 6\"\nassert solution(\"1 4 5 8 9 0\") == \"1 4 5 8 9\"\nassert solution(\"1 4 5 8 9 0 1\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"R3\"\nassert solution(\"2\") == \"U3\"\nassert solution(\"2\") == \"D3\"\nassert solution(\"2\") == \"R3\"\nassert solution(\"2\") == \"U2\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"R3246\"\nassert solution(input()) == \"U3246\"\nassert solution(input()) == \"D3246\"\n\nSample Input:\n1\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog\ndog"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'D'\nassert solution(stdin) == 'U'\nassert solution(stdin) == 'L'\nassert solution(stdin) == 'E'\nassert solution(stdin) == 'T'\n"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3246R3246\") == \"3246R3246\"\nassert solution(\"4\") == \"4\"\nassert solution(\"7\") == \"7\"\nassert solution(\"L2\") == \"L2\"\nassert solution(\"L2\") == \"L2\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3246R3246) == 'U'\nassert solution(3246R3246) == 'R'\nassert solution(3246R3246) == 'D'\nassert solution(3246R3246) == 'D'\nassert solution(3246R3246) == 'U'\n\nSample Input:\n3\n"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"YES\"\n\"\"\"\n\nimport sys\n\nfrom math import ceil"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n{\n    \"n\": 4,\n    \"k\": 2\n}\n), True\nSample Output:\nNO\nExplanation:\n\nAccording to the example above, there are only two pairs of vehicles.\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2\"), \"NO\"\nassert solution(\"1 3\"), \"YES\"\nassert solution(\"2 1\"), \"YES\"\nassert solution(\"2 4\"), \"NO\"\nassert solution(\"3 2\"), \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 2\") == \"YES\"\nassert solution(\"1 1 2\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 6\") == \"YES\"\nassert solution(\"2 7\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\", \"Expected only YES.\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 6 6\") == \"9\"\nassert solution(\"300003\") == \"300003\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(    [   3, 6, 6, 3, 6, 1, 6, 3, 3, 5, 6, 6, 4, 5, 5, 6, 1, 3, 1, 3 ]     ) == 24\nassert solution(    [    7, 9, 7, 7, 5, 9, 5, 7, 7, 7, 1, 9, 7, 7, 5, 7, 7, 1, 9, 1, 9, 1, 9, 6, 9, 9, 4, 9, 9, 1, 9, 7, 7, 5, 9, 9 ]    ) == 14\n"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"6\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"8\"\nassert solution(\"6 6\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"1\") == \"2\"\nassert solution(\"5 6\") == \"3\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '356'\n"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '176'"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 12\nassert solution(99) == '99'\nassert solution(16) == '16'\nassert solution(7) == '7'\nassert solution(0) == 0"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0309'\nassert solution(stdin) == '15111'\nassert solution(stdin) == '0111100'\nassert solution(stdin) == '09901'\nassert solution(stdin) == '0111'\n"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(12) == '12', 'Solution failed'\nassert solution(1) == '0', 'Solution failed'\nassert solution(12) == '11', 'Solution failed'\nassert solution(12) == '1', 'Solution failed'\nassert solution(12) == '0', 'Solution failed'\n"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(12) == '23', \"Incorrect output\"\nSample Input:\n6\nSample Output:\n6\nGiven 6, output all possible combinations of 1, 2, 3, 4, 6, so that each value can be written without disturbing the order of the letters.\"\nExplanation:\nFor $1, 2, 3, 4, 6$ there are 3 possible combinations.\nFor $1, 2, 3$, every possible combination is a 3-digit number, thus it can be written without disturbing the letters.\nFor $1, 2$, every possible combination is a 4-digit number, thus it can be written without disturbing the letters.\nFor $1, 2, 3, 4$, every possible combination is a 5-digit number, thus it can be written without disturbing the letters.\nFor $1, 2, 3, 4, 6$, every possible combination is a 6-digit number, thus it can be written without disturbing the letters.\n\nSample Input:\n7\nSample Output:\n7\nGiven 7, output all possible combinations of 1, 2, 3, 4, 6, 7, so that each value can be written without disturbing the order of the letters.\nExplanation:\nFor $1, 2, 3, 4, 6$ there are 3 possible combinations.\nFor $1, 2, 3$, every possible combination is a 3-digit number, thus it can be written without disturbing the letters.\nFor $1, 2, 3, 4, 6$, every possible combination is a 4-digit number, thus it can be written without disturbing the letters.\nFor $1, 2, 3, 4, 6, 7$, every possible combination is a 5-digit number, thus it can be written without disturbing the letters.\n\nSample Input:\n8\nSample Output:\n8\nGiven 8, output all possible combinations of 1, 2, 3, 4, 6, 8, so that each value can be written without disturbing the order of the letters.\nExplanation:\nFor $1, 2, 3, 4, 6$ there are 3 possible combinations.\nFor $1, 2, 3$, every possible combination is a 3-digit number, thus it can be written without disturbing the letters.\nFor $1, 2, 3, 4, 6$, every possible combination is a 4-digit number, thus it can be written without disturbing the letters.\nFor $1, 2, 3, 4, 6, 8$, every possible combination is a 5-digit number, thus it can be written without disturbing the letters.\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == '1'\nassert solution(3) == '23'\nassert solution(12) == '12'\nassert solution(123) == '24'\nassert solution(3624) == '3624'\n"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1234567890123456') == '412345'\nassert solution
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == '01'\nassert solution(1) == '0'\nassert solution(3) == '01'\nassert solution(6) == '30001'\nassert solution(5) == '000'\n"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"15\") == \"3\"\nassert solution(\"31\") == \"1\"\nassert solution(\"1512\") == \"3\"\nassert solution(\"123123123\") == \"2\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"000\") == \"00\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"123456\") == \"123456\"\nassert solution(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4544\") == \"4544\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1224\") == \"1224\"\nassert solution(\"12345678\") == \"12345678\"\nassert solution(\"100\") == \"100\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"(((()(())())()))\") == \"480\""
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -15\n\nSample Input:\n4 4\n((()\n)\n((())\n(())\n(((()\n200\n79\n812\nSample Output:\n-5\n\nassert solution(stdin) == -14\n"
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"(()\") == 240\nassert solution(\"(\") == 0\nassert solution(\"()\") == 0\nassert solution(\"(()((()\")) == 0\nassert solution
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['(())', '(()', '(())', '(())']) == '470'\nassert solution(['(())', '(())']) == '0'\nassert solution(['(())', '(())', '(())']) == '-5'\nassert solution(['(())', '(())', '(())']) == '4'\nassert solution(['(())', '(())']) == '1'\n"
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"((()\") == \"480\"\nassert solution(\"(()(\") == \"1\"\nassert solution(\"(()(()\") == \"0\"\nassert solution(\"((()()((()\")) == \"0\"\nassert solution
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"((()\") == 0\nassert solution(\"(()()(()(()()(()()(())(()()()()(()())(()()(()())(()()()()())(()()()()()())(()()()()()()())(()()()()()())(()()()()()())(()()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()())(()()()()()\n\n----\n\n>>> t = [('(', 2), ('(', 3), ('(', 4), ('(', 5), ('(', 6), ('(', 7), ('(', 8), ('(', 9), ('(', 10), ('(', 11), ('(', 12), ('(', 13), ('(', 14), ('(', 15), ('(', 16), ('(', 17), ('(', 18), ('(', 19), ('(', 20), ('(', 21), ('(', 22), ('(', 23), ('(', 24), ('(', 25), ('(', 26), ('(', 27), ('(', 28), ('(', 29), ('(', 30), ('(', 31), ('(', 32), ('(', 33), ('(', 34), ('(', 35), ('(', 36), ('(', 37), ('(', 38), ('(', 39), ('(', 40), ('(', 41), ('(', 42), ('(', 43), ('(', 44), ('(', 45), ('(', 46), ('(', 47), ('(', 48), ('(', 49), ('(', 50), ('(', 51), ('(', 52), ('(', 53), ('(', 54), ('(', 55), ('(', 56), ('(', 57), ('(', 58), ('(', 59), ('(', 60), ('(', 61), ('(', 62), ('(', 63), ('(', 64), ('(', 65), ('(', 66), ('(', 67), ('(', 68), ('(', 69), ('("
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(string) == '480'\nassert solution(string) == '-570'\nassert solution(string) == '928'\nassert solution(string) == '10'\nassert solution(string) == '8'\n"
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(    \"((()\") == 1\nassert solution(\"(()\") == 1\nassert solution(\"(()[]\") == 1\nassert solution(\"()[()\") == 1\nassert solution(\"(((((((()\n"
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '?', \"Your solution must be a string\"\n\"\"\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"((()(()(()()()))))\") == \"480\"\nassert solution(\"((()(()(()())(()())(()()())(()()(()()))))\") == \"18\"\nassert solution(\"(())()())()()()(())())()()()\") == \"42\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2 4'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 5\"\nassert solution(stdin) == \"2 6\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 7\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2 4 5 6 7 8 9 10\"\nassert solution(stdin) == \"2 4 5 6 7 8 9 10\"\nassert solution(stdin) == \"2 4 5 6 7 8 9 10\"\nassert solution(stdin) == \"2 4 5 6 7 8 9 10\"\nassert solution(stdin) == \"2 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"2 2 4\", \"3 1 3 5\", \"2 2 4\", \"3 1 3 6\", \"2 2 6\", \"2 4 5\", \"2 8 9\", \"2 7 9\", \"2 7 8\", \"2 11 13\", \"2 10 12\", \"2 11 13\", \"2 10 12\", \"2 11 13\", \"2 10 12\", \"2 11 13\", \"2 10 12\", \"2 11 13\"]) == [\"2 4\", \"5 6\", \"7 8 9 10 11 12 13\", \"6 8 9\", \"7 11 13\", \"7 8 11\", \"11 13 12\", \"12 11 13\", \"12 3 13\", \"13 11 13\", \"13 3 13\", \"13 2 13\", \"13 4 13\", \"14 12 13\", \"14 11 13\"]"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input()\n) == '2 4 8 7 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2 4'\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('13') == '2 4 5 6 7 8 9 10 11 12 13'\nassert solution('2 4 5 6 7 8 9 10 11 12 13') == '2 4 5 6 7 8 9 10 11 12 13'\nassert solution('2 4 5 6 7 8 9 10 11 12 13') == '2 4 5 6 7 8 9 10 11 12 13'\nassert solution('2 4 5 6 7 8 9 10 11 12 13') == '2 4 5 6 7 8 9 10 11 12 13'\nassert solution('2 4 5 6 7 8 9 10 11 12 13') == '2 4 5 6 7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    '2 3 4 4 5 3 6 7 8 9 10 8 1 2 3 4 5 6 7 8 9 10 8 4 7') == '2 4 5 6 7 8 9 10 8'\nassert solution(\n    '2 3 4 1 2 4 7 8 9 10 7 6 5 1 2 4 3 6 8 9 10 8 9 10 8 10 8 10 9 10 8 5 1 2 4 3') == '2 4 3 5 6 7 8 9 10 8 10 9'\nassert solution(\n    '2 3 4 1 2 4 7 8 9 10 7 6 5 1 2 4 3 6 8 9 10 8 4 7') == '2 4 3 5 6 7 8 9 10 8'\nassert solution(\n    '2 3 4 5 6 7 8 9 10 7 6 5 1 2 4 3 6 8 9 10 8 4 7') == '2 4 3 5 6 7 8 9 10'\nassert solution(\n    '2 3 4 5 6 7 8 9 10 7 6 5 1 2 4 3 6 8 9 10 8 4 7') == '2 3 4 5 6 7 8 9 10 8'\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"7 5 5\") == \"2 4 5\"\nassert solution(\"3 3\") == \"2 3\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"0 0\") == \"1 2\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2 4 3 1 1 3 3 2 3 4 4 4 3 2 5 5 6 7 8 9 9 10 10 11 12 13\".split()) == \"3 4 5 6 7 8 9 10 11 12 13 5 3 6 7 2 8 9 10 13 11 12 13\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 25\nassert solution(\"9 5\") == \"15\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '35 39 36 27 29'"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('5 5 0') == '35 39 36 27 29 0'\nassert solution('5 5 1') == '35 39 36 27 29 1'\nassert solution('5 5 2') == '35 39 36 27 29 2'\nassert solution('5 5 3') == '35 39 36 27 29 3'\n"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"11\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin),'should contain at least one solution'\n"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5 5 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 1 4 3\") == \"35 39 36 27 29\"\n\n\nSample Input:\n10 10\n1 1\n1 2\n1 3\n2 1\n2 2\n3 2\n4 4\n5 2\n1 6\n2 6\n3 6\n4 4\n4 5\n5 4\n6 6\n7 6\n8 5\n9 9\n10 10\nSample Output:\n5\n\"\"\"\n\nimport math"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1 2 3\", \"1 4 8\", \"2 3 12\", \"3 5 4\", \"4 5 2\"]) == \"35 39 36 27 29\"\nassert solution([\"1 2 3\", \"1 4 8\", \"2 3 12\", \"3 5 4\", \"4 5 2\"]) == \"3 3 12\"\nassert solution([\"1 2 3\", \"1 4 8\", \"2 3 12\", \"3 5 4\", \"4 5 2\"]) == \"1 2 3\"\nassert solution([\"1 2 3\", \"1 4 8\", \"2 3 12\", \"3 5 4\", \"4 5 2\"]) == \"0 1\"\nassert solution([\"1 2 3\", \"1 4 8\", \"2 3 12\", \"3 5 4\", \"4 5 2\"]) == \"0 0\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 2) == 2\nassert solution(2, 2) == 1\nassert solution(1, 1) == 2\nassert solution(1, 1) == 2\nassert solution(1, 1) == 1\n"
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 5) == '00000'\nassert solution(5, 10) == '00100'\nassert solution(5, 4) == '10100'\nassert solution(3, 2) == '10101'\nassert solution(7, 2) == '11111'\n\"\"\""
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"0 672\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 3') == '9'\nassert solution('1 2') == '0'\nassert solution('4 4') == '1'\nassert solution('1 1') == '0'\nassert solution('4 5') == '6'\n"
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"\n\\\"\\\"\\\""
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 3\") == \"1 1\"\nassert solution(\"4 5 3 4\") == \"3 8\"\nassert solution(\"3 3 1\") == \"1 0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 3') == '0'\nassert solution('2 4') == '0'\nassert solution('3 1') == '0'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(line) == \"0\"\nassert solution(line) == \"100003\"\nassert solution(line) == \"100003\"\nassert solution(line) == \"100003\"\nassert solution(line) == \"1\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"8 10\") == \"123456789\"\nassert solution(\"5 5\") == \"9234\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"8 9\n2 2\n5 6\n4 3\n2 1\n3 4\n3 3\n3 4\n2 3\n1 4\n0 2\n4 4\"\"\") == 5\n\nassert solution(\"\"\"5 5\n3 3\n2 2\n2 2\n2 3\n2 1\n3 4\n3 4\n1 3\n0 3\n2 1\n1 1\n1 3\n2 4\n3 4\n2 2\n0 3\n4 4\n2 2\n0 3\n4 4\n1 2\n3 3\n2 2\n1 2\n3 3\n0 3\n2 3\n1 3\n1 1\n1 3\n2 4\n3 4\n1 3\n0 2\n1 2\n3 4\n2 2\n2 2\n1 3\n1 2\n1 2\n2 3\n3 4\n3 4\n2 2\n3 3\n0 3\n4 4\n2 2\n0 3\n2 2\n3 3\n1 2\n3 4\n0 2\n3 4\n2 3\n2 3\n1 3\n0 2\n3 3\n0 2\n2 3\n0 2\n0 2\n3 3\n3 4\n2 3\n2 2\n0 2\n0 2\n3 3\n1 2\n0 3\n2 3\n3 4\n2 2\n3 4\n1 3\n0 2\n2 3\n2 2\n2 3\n1 3\n0 2\n0 2\n1 3\n0 3\n1 2\n0 3\n2 2\n1 2\n0 2\n0 2\n2 3\n0 2\n3 4\n0 2\n0 2\n1 3\n0 2\n0 3\n0 3\n2 3\n3 4\n2 2\n0 3\n1 2\n1 3\n2 2\n2 3\n0 3\n1 2\n2 2\n1 3\n1 2\n2 3\n2 2\n1 3\n2 3\n3 4\n2 3\n1 2\n0 2\n2 3\n1 2\n2 2\n0 2\n0 2\n3 3\n3 4\n1 3\n0 3\n2 2\n3 4\n3 4\n0 2\n2 3\n2 2\n0 2\n3 4\n0 2\n0 3\n2 2\n1 2\n2 3\n1 2\n2 2\n2 3\n1 3\n2 3\n1 2\n1 2\n0 3\n0 2\n2 3\n0 2\n2 2\n0 2\n2 3\n1 3\n0 2\n1 3\n2 2\n3 4\n0 3\n3 4\n1 3\n2 3\n0 2\n2 3\n1 3\n1 2\n1 2\n0 2\n2 3\n1 2\n2 3\n1 2\n1 2\n0 3\n2 2\n1 3\n3 4\n2 2\n0 2\n1 2\n0 3\n3 4\n2 2\n3 4\n1 3\n0 3\n0 2\n0 3\n1 2\n2 3\n0 2\n3 4\n2 2\n1 3\n1 2\n1 3\n2 2\n2 3\n0 3\n2 2\n0 3\n0 2\n3 4\n2 3\n3 4\n2 2\n0 2\n1 2\n1 3\n2 3\n0 2\n2 2\n0 3\n0 2\n0 2\n0 2\n0 2\n1 3\n0 3\n2 2\n0 2\n1 2\n1 3\n2 3\n3 4\n0 2\n1 3\n2 2\n1 3\n1 2\n1 2\n0 2\n1 2\n0 3\n0 2\n0 2\n0 3\n0 2\n0 2\n1 2\n0 2\n0 2\n0 2\n0 2\n1 3\n1 2\n1 3\n1 2\n0 3\n0 2\n1 3\n1 2\n1 2\n1 2\n0 2\n1 2\n0 2\n2 3\n0 2\n0 3\n1 2\n1 3\n1 2\n1 2\n2 3\n1 2\n0 2\n0 2\n1 3\n0 2\n1 3\n1 2\n0 2\n1 2\n0 2\n1 2\n0 2\n0 2\n0 2\n1 3\n1 2\n1 3\n0 2\n0 2\n1 2\n0 2\n0 2\n0 2\n0 2\n1 2\n1 3\n1 2\n1 3\n1 2\n0 2\n0 2\n1 3\n1 2\n1 2\n1 2\n1 2\n1 3\n1 2\n1 2\n1 2\n0 2\n0 2\n1 2\n0 2\n0 2\n0 3\n1 2\n1 3\n1 2\n0 2\n1 2\n1 3\n1 2\n0 2\n0 2\n0 2\n0 2\n1 3\n0 3\n0 2\n0 2\n1 2\n0 2\n0 2\n1 2\n0 2\n0 3\n0 2\n1 2\n0 2\n0 2\n0 2\n1 3\n1 2\n0 2\n0 2\n1 3\n1 2\n0 2\n0 3\n0 2\n0 2\n1 2\n0 3\n0 2\n1 2\n1 3\n1 2\n0 2\n1 2\n1 3\n1 2\n0 2\n0 2\n0 2\n0 2\n1 3\n1 2\n1 3\n1 2\n0 2\n1 2\n1 3\n0 2\n0 2\n0 3\n0 2\n0 2\n0 2\n1 2\n0 2\n1 2\n0 2\n0 2\n1 2\n1 2\n1 3\n1 2\n1 2\n1 3\n0 2\n0 2\n0 2\n1 3\n0 2\n1 2\n1 2\n0 2\n0 3\n0 2\n0 2\n0 2\n0 2\n0 3\n0 2\n1 2\n1 2\n1 2\n1 2\n1 3\n0 2\n1 3\n0 2\n0 2\n1 2\n1 2\n1 3\n1 2\n1 2\n0 2\n0 2\n1 2\n1 2\n1 2\n1 3\n0 2\n1 3\n0 2\n0 2\n1 2\n1 2\n1 3\n0 2\n1 2\n1 2\n1 3\n1 2\n0 2\n0 2\n0 2\n1 2\n0 2\n0 2\n0 2\n0 2\n0"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(a := list(map(int, stdin.split())))) == str(max(map(int, map(str, stdin.split()))))\nassert solution(a := list(map(int, stdin.split()))) == str(max(map(int, map(str, stdin.split()))))\nassert solution(a := list(map(int, stdin.split()))) == str(max(map(int, map(str, stdin.split()))))\n"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 5 4 1 4 1 3 4 3 5 4 4 1 3 5 5 1 4 1 1 1\") == \"2.500000\"\nassert solution(\"1 5 4 1 4 1 3 4 1 4 1 3 4 1 4 1 1 1 1\") == \"2.500000\"\nassert solution(\"1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"2.5\"\nassert solution(\"1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"2.5\"\nassert solution(\"1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"2.5\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 5 20 5\") == \"1.5\"\nassert solution(\"3 5 20 100\") == \"2\"\nassert solution(\"3 5 0\") == \"2.5\"\nassert solution(\"3 3 5\") == \"1.0\"\nassert solution(\"3 3 0\") == \"0.5\""
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 2 100 0\"\"\")) == \"2.500000\"\nassert solution(\"\"\"1 2 100 2\n0 20 10 0\"\"\")) == \"2.500000\"\nassert solution(\"\"\"1 2 100 2\n0 20 10 10\"\"\")) == \"1\"\nassert solution(\"\"\"1 2 100 2\n0 20 5 10\"\"\")) == \"1\"\nassert solution(\"\"\"1 2 100 2\n0 20 10 10\n1 20 50 0\"\"\")) == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"'\"\"'\"\"'\"''''''''''''''\"'''\"'''\"'''''''''\n    '\"'\n    '\"'''\"\n    '\"'''\"\n    '\"'''\"'\n    '\"'''\"''''\"'''\"\n) == '2.500000'\nassert solution(\n    \"\"\"'\"\"'\"\"'\"''''''''''''''\"'''\"'''\"''''''''\n    '\"'\n    '\"'''\"\n    '\"'''\"'\n    '\"'''\"'\n    '\"'''\"'\n) == 'Impossible'\nassert solution(\n    \"\"\"'\"\"'\"\"'\"''''''''''''''\"'''\"'''\"''''''''\n    '\"'\n    '\"'''\"\n    '\"'''\"'\n    '\"'''\"'\n    '\"'''\"'\n) == 'Impossible'\nassert solution(\n    \"\"\"'\"\"'\"\"'\"''''''''''''''\"'''\"'''\"''''''''\n    '\"'''\"\n    '\"'''\"'\n    '\"'''\"'\n    '\"'''\"'\n    '\"'''\"'\n) == 'Impossible'\nassert solution(\n    \"\"\"'\"\"'\"\"'\"''''''''''''''\"'''\"'''\"''''''''\n    '\"'''\"\n    '\"'''\"'\n    '\"'''\"'\n    '\"'''\"'\n    '\"'''\"'\n) == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(test_case) == '2.500000'\nassert solution(test_case_1) == 'Impossible'"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 5 10', '0 10 20') == '2.5'\nassert solution('1 5 10', '0 20 10') == '2.5'\nassert solution('1 5 10', '0 20 5') == '1.5'\nassert solution('1 5 20', '0 10 10') == '1.5'\nassert solution('1 20 5', '0 10 20') == '1.5'\n"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2.500000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test) == '2.500000'\nassert solution(solution) == 'Impossible'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution) == '3'\n\"\"\"\nimport unittest"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5 4\") == \"5\"\nassert solution(\"3 3 3 3\") == \"1\"\nassert solution(\"4 4 4 4 4 4\") == \"5\"\nassert solution(\"2 2 2 2 2 2\") == \"3\"\nassert solution(\"2 1 2 1 1 1\") == \"4\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\") == \"3\"\nassert solution(\"3 3 4\") == \"4\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"3 3 3 3\") == \"3\"\nassert solution(\"3 3 3 3 3\") == \"3\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('10') == '4'\nassert solution('2 1 10 3') == '2'\nassert solution('1 2 3 1 2 1 3 2 1 3 2 1 2 2 3 3 3 3 3 2 1 2 2 3 3 2 2 3 3 3 2 2 3 3 2 2 2 3 3 2 2 3 2 3 2 2 3 2 3 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3 2 2 1') == '3'\nassert solution('1 1 1 1 1 2 2 2 2 2 2 2 3 2 3 2 3 2 3 3') == '4'\nassert solution('1 1 1 1 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3') == '3'\nassert solution('1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3') == '4'\n\"\"\""
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3') == '1', 'Expected 3, got'"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 3) == 1\nassert solution(3, 4) == 1\nassert solution(3, 5) == 2\nassert solution(3, 6) == 1\nassert solution(3, 7) == 1\n"
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"21\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == 2\nassert solution(\"1 1 1\") == 4\nassert solution(\"0 0 1\") == 3\nassert solution(\"0 0 0\") == 0\nassert solution(\"0 0 0 1\") == 2\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == 2\nassert solution(\"3 1\") == 1\nassert solution(\"1 1\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"3 0\") == 2\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( \"2 1 1\" ) == \"2\"\nassert solution( \"4 2 4\" ) == \"3\"\nassert solution( \"1 1 1 1 1 1 1\" ) == \"4\"\nassert solution( \"1 1 1 2 2 2 2\" ) == \"4\"\nassert solution( \"1 1 1 2 3 3 3\" ) == \"5\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 1, 1) == 2\nassert solution(5, 2, 1) == 3\nassert solution(3, 1, 1) == 2\nassert solution(5, 5, 1) == 0\nassert solution(0, 0, 1) == 0\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"2\"\nassert solution(\"5 3 5\") == \"5\"\nassert solution(\"1 5 1\") == \"2\"\nassert solution(\"3 2 0\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\") == \"2\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"0 0 0\") == \"2\"\nassert solution(\"100 0 0\") == \"2\"\nassert solution(\"10000 0 0\") == \"2\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nSample Input:\n3 0\nSample Output:\n4\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"0 0\") == \"3\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"2 1 2\") == \"3\"\nassert solution(\"2 1 3\") == \"2\"\nassert solution(\"2 1 4\") == \"2\"\nassert solution(\"2 1 5\") == \"1\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1 1 0 1 1 0 1 0 1 1\", \"1 0 1 1 0 1 0 1 1 1\", \"1 1 1 1 1 0 1 1 0 1\", \"1 1 1 0 0 1 1 1 1 1\", \"1 0 1 1 0 1 0 1 1 1\", \"1 1 0 1 1 0 1 1 1 1\", \"0 1 0 1 1 0 1 1 1 0\", \"0 1 0 1 1 0 1 1 0 1\", \"1 0 1 1 1 0 1 0 1 1\", \"1 1 0 1 1 0 1 1 1 0\", \"1 0 1 1 0 1 1 1 1 0\", \"0 1 1 1 1 0 1 0 0 0\", \"0 1 1 0 1 1 0 0 0 0\", \"0 1 1 0 1 1 0 0 0 0\", \"1 1 1 0 1 1 0 0 0 0\", \"0 1 1 1 0 1 1 0 0 0\", \"1 0 0 0 1 0 0 0 1 0\", \"0 1 0 1 0 1 1 1 1 1\", \"1 0 1 0 1 0 1 1 0 0\", \"1 0 0 0 0 1 0 0 1 0\", \"0 1 1 0 1 1 0 0 1 0\", \"0 0 1 1 0 1 1 1 0 0\", \"1 0 1 1 1 0 1 0 0 1\", \"0 1 0 1 1 0 1 0 1 0\", \"1 1 1 1 1 0 1 1 0 1\", \"1 0 0 0 1 1 0 0 1 1\", \"0 0 1 1 0 1 1 0 0 1\", \"0 0 0 1 1 0 1 0 0 0\", \"0 0 0 1 1 0 1 0 1 0\", \"1 1 0 1 0 1 0 0 0 1\", \"0 0 0 1 0 1 0 1 0 0\", \"1 0 0 1 0 1 0 1 1 1\", \"1 0 1 0 1 0 1 1 0 0\", \"1 1 0 1 1 0 1 1 0 0\", \"0 0 0 1 1 1 0 0 0 0\", \"1 0 0 0 1 1 0 0 0 0\", \"1 0 1 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 1 0 0\", \"0 0 0 0 1 0 0 1 0 0\", \"0 0 0 1 0 0 1 0 1 0\", \"0 1 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"1 0 0 1 0 0 0 0 0 1\", \"0 0 0 0 0 0 0 0 0 0\", \"1 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"1 1 0 1 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"1 1 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"1 0 1 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0\"]) == \"7\""
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 4 5 2 3 3 4 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 177 178 179 180 181 181 182 183 184 185 186 187 188 189 190 190 191 190 192 191 193 194 195 196 197 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 236 237 238 239 240 241 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 5\n\nSample Input:\n2\n1 5\nSample Output:\n11\n"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3 5\") == \"7\"\nassert solution(\"3 5 7\") == \"7\"\nassert solution(\"3 5 4\") == \"9\"\nassert solution(\"4 2 3\") == \"9\"\nassert solution(\"5 2 7\") == \"10\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 6') == '7'\nassert solution('1 5 6 7 8 9') == '4'\nassert solution('1 6 7 8 9 10') == '3'\nassert solution('1 9 7 3 4 2') == '1'\nassert solution('11 11 11 11 11 11') == '1'\n"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '9'\nassert solution(stdin) == '8'\nassert solution(stdin) == '9'\nassert solution(stdin) == '12'\nassert solution(stdin) == '11'\n"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 111 112 113 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 191 193 194 195 196 197 198 199 200 201 201 202 201 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 221 221 223 224 225 226 227 228 229 230 231 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('7\\n1 1\\n1 3 5\\n1 3 6\\n1 3 7\\n1 3 8\\n1 3 9\\n1 3 10\\n1 3 11\\n1 3 12\\n1 3 13\\n1 3 14\\n1 3 15\\n1 3 16\\n1 3 17\\n1 3 18\\n1 3 19\\n1 3 20\\n1 3 21\\n1 3 22\\n1 3 23\\n1 3 24\\n1 3 25\\n1 3 26\\n1 3 27\\n1 3 28\\n1 3 29\\n1 3 30\\n1 3 31\\n1 3 32\\n1 3 33\\n1 3 34\\n1 3 35\\n1 3 36\\n1 3 37\\n1 3 38\\n1 3 39\\n1 3 40\\n1 3 41\\n1 3 42\\n1 3 43\\n1 3 44\\n1 3 45\\n1 3 46\\n1 3 47\\n1 3 48\\n1 3 49\\n1 3 50\\n1 3 51\\n1 3 52\\n1 3 53\\n1 3 54\\n1 3 55\\n1 3 56\\n1 3 57\\n1 3 58\\n1 3 59\\n1 3 60\\n1 3 61\\n1 3 62\\n1 3 63\\n1 3 64\\n1 3 65\\n1 3 66\\n1 3 67\\n1 3 68\\n1 3 69\\n1 3 70\\n1 3 71\\n1 3 72\\n1 3 73\\n1 3 74\\n1 3 75\\n1 3 76\\n1 3 77\\n1 3 78\\n1 3 79\\n1 3 80\\n1 3 81\\n1 3 82\\n1 3 83\\n1 3 84\\n1 3 85\\n1 3 86\\n1 3 87\\n1 3 88\\n1 3 89\\n1 3 90\\n1 3 91\\n1 3 92\\n1 3 93\\n1 3 94\\n1 3 95\\n1 3 96\\n1 3 97\\n1 3 98\\n1 3 99\\n1 4 0\\n1 4 1\\n1 4 2\\n1 4 3\\n1 4 4\\n1 4 5\\n1 4 6\\n1 4 7\\n1 4 8\\n1 4 9\\n1 4 10\\n1 4 11\\n1 4 12\\n1 4 13\\n1 4 14\\n1 4 15\\n1 4 16\\n1 4 17\\n1 4 18\\n1 4 19\\n1 4 20\\n1 4 21\\n1 4 22\\n1 4 23\\n1 4 24\\n1 4 25\\n1 4 26\\n1 4 27\\n1 4 28\\n1 4 29\\n1 4 30\\n1 4 31\\n1 4 32\\n1 4 33\\n1 4 34\\n1 4 35\\n1 4 36\\n1 4 37\\n1 4 38\\n1 4 39\\n1 4 40\\n1 4 41\\n1 4 42\\n1 4 43\\n1 4 44\\n1 4 45\\n1 4 46\\n1 4 47\\n1 4 48\\n1 4 49\\n1 4 50\\n1 4 51\\n1 4 52\\n1 4 53\\n1 4 54\\n1 4 55\\n1 4 56\\n1 4 57\\n1 4 58\\n1 4 59\\n1 4 60\\n1 4 61\\n1 4 62\\n1 4 63\\n1 4 64\\n1 4 65\\n1 4 66\\n1 4 67\\n1 4 68\\n1 4 69\\n1 4 70\\n1 4 71\\n1 4 72\\n1 4 73\\n1 4 74\\n1 4 75\\n1 4 76\\n1 4 77\\n1 4 78\\n1 4 79\\n1 4 80\\n1 4 81\\n1 4 82\\n1 4 83\\n1 4 84\\n1 4 85\\n1 4 86\\n1 4 87\\n1 4 88\\n1 4 89\\n1 4 90\\n1 4 91\\n1 4 92\\n1 4 93\\n1 4 94\\n1 4 95\\n1 4 96\\n1 4 97\\n1 4 98\\n1 4 99\\n1 5 0\\n1 5 1\\n1 5 2\\n1 5 3\\n1 5 4\\n1 5 5\\n1 5 6\\n1 5 7\\n1 5 8\\n1 5 9\\n1 5 10\\n1 5 11\\n1 5 12\\n1 5 13\\n1 5 14\\n1 5 15\\n1 5 16\\n1 5 17\\n1 5 18\\n1 5 19\\n1 5 20\\n1 5 21\\n1 5 22\\n1 5 23\\n1 5 24\\n1 5 25\\n1 5 26\\n1 5 27\\n1 5 28\\n1 5 29\\n1 5 30\\n1 5 31\\n1 5 32\\n1 5 33\\n1 5 34\\n1 5 35\\n1 5 36\\n1 5 37\\n1 5 38\\n1 5 39\\n1 5 40\\n1 5 41\\n1 5 42\\n1 5 43\\n1 5 44\\n1 5 45\\n1 5 46\\n1 5 47\\n1 5 48\\n1 5 49\\n1 5 50\\n1 5 51\\n1 5 52\\n1 5 53\\n1 5 54\\n1 5 55\\n1 5 56\\n1 5 57\\n1 5 58\\n1 5 59\\n1 5 60\\n1 5 61\\n1 5 62\\n1 5 63\\n1 5 64\\n1 5 65\\n1 5 66\\n1 5 67\\n1 5 68\\n1 5 69\\n1 5 70\\n1 5 71\\n1 5 72\\n1 5 73\\n1 5 74\\n1 5 75\\n1 5 76\\n1 5 77\\n1 5 78\\n1 5 79\\n1 5 80\\n1 5 81\\n1 5 82\\n1 5 83\\n1 5 84\\n1 5 85\\n1 5 86\\n1 5 87\\n1 5 88\\n1 5 89\\n1 5 90\\n1 5 91\\n1 5 92\\n1 5 93\\n1 5 94\\n1 5 95\\n1 5 96\\n1 5 97\\n1 5 98\\n1 5 99\\n1 6 0\\n1 6 1\\n1 6 2\\n1 6 3\\n1 6 4\\n1 6 5\\n1 6 6\\n"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 2\\n2 3 3\") == \"7\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1 2 3\\n1 2 3\\n2 3 1\") == \"3\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'deferral' or solution(stdin) == 'deferral'\n"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n1\\n1\\n1\\n1\\n\") == \"abcdefghijklmnopqrstuvwxyz123456789\"\nassert solution(\"2\\n1\\n1\\n1\\n1\\n1\\n\") == \"abcdefghijklmnopqrstuvwxyz123456789\"\nassert solution(\"2\\n1\\n1\\n1\\n1\\n1\\n\") == \"abcdefghijklmnopqrstuvwxyz123456789\"\nassert solution(\"2\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"abcdefghijklmnopqrstuvwxyz123456789\"\nassert solution(\"2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"abcdefghijklmnopqrstuvwxyz123456789\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'jetsons'\n\"\"\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"jetsons\"\nassert solution(input()) == \"jetsons rockets\"\nassert solution(input()) == \"jetsons rockets\"\nassert solution(input()) == \"jetsons\"\nassert solution(input()) == \"jetsons\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"john rhinocerous 2 jets rockets\"\nassert solution(\"4\") == \"mary rhinocerous 2 jets rockets\"\nassert solution(\"4\") == \"ruth platypus 1 rockets\"\nassert solution(\"4\") == \"John rhinocerous 2 jets rockets\"\nassert solution(\"4\") == \"John rhinocerous 2 jets rockets\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 2 1 2 3 2 1 2 2 3 2 1 2 3 2 1 2 3 2 1 3 1 3 2 1 2 3 3 2 1 2 3 2 2 1 3 3 1 2 1 2 3 1 3 1 3 2 1 2 3 2 1 2 3 2 1 3 2 1 3 1 3 2 1 2 3 2 3 2 1 2 3 3 2 1 2 3 2 1 2 3 2 1 3 1 1 1 1 1 1 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 3 2 1 2 3 2 1 3 1 1 1 1 1 1 2 1 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 3 1 1 1 1 1 1 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2 3 2 1 2"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n3\") == \"1\\n2\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'fred rhinocerous 2 jets rockets'\nassert solution(stdin) == 'john rhinocerous 2 jets rockets'\nassert solution(stdin) =='mary rhinocerous 2 jetsons rockets'\nassert solution(stdin) == 'john rhinocerous 2 jetsons rockets'\nassert solution(stdin) == 'john rhinocerous 2 jetsons rockets'\n"
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 1\"\n\"\"\""
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 -3 0 -5\") == \"1 1\"\nassert solution(\"2 2 -5 0\") == \"3\"\nassert solution(\"2 4 0 -5 -1\") == \"4 3\"\nassert solution(\"4 4 2 -5 -3 0\") == \"2 1\"\nassert solution(\"-5 -3 -1\") == \"2\"\n\"\"\""
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input\n    ) == 7\nassert solution(\n    input\n    ) == 3\nassert solution(\n    input\n    ) == 1\nassert solution(\n    input\n    ) == 4\nassert solution(\n    input\n    ) == 1\n"
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 5) == \"3\"\nassert solution(1, 1) == \"0\"\nassert solution(1, 1) == \"1\"\nassert solution(1, 1) == \"1\"\nassert solution(1, 1) == \"1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\nExplanation:\n    The input file contains three test cases, each one with a single line of input. The second line contains a single number $n$ representing the number of cans on the fence. Each of the next $n$ lines contains two integers $x$ and $r$ ($-10^9 \\le x \\le 10^9$) representing the location of the can on the fence and $r$ is the blast radius. The first $i^{th}$ line contains the integer $i$ representing the location of the first can on the fence.\n    The second line contains the integer $i$ representing the location of the second can on the fence. The third line contains the integer $i$ representing the location of the third can on the fence.\n    The fourth line contains the integer $i$ representing the blast radius.\n    The fifth line contains the integer $i$ representing the location of the fourth can on the fence.\n\"\"\"\nclass Solution:\n    # @param A : integer\n    # @param B : integer\n    # @return a strings\n    def solution(self, n, r):\n        return str(n * n - sum(n * (i + r) for i in range(n) if i + r < n))"
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 - 2\") == \"1 2 1\"\nassert solution(\"-3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 -34 -35 -36 -37 -38 -39 -40 -41 -42 -43 -44 -45 -46 -47 -48 -49 -50 -51 -52 -53 -54 -55 -56 -57 -58 -59 -60 -61 -62 -63 -64 -65 -66 -67 -68 -69 -70 -71 -72 -73 -74 -75 -76 -77 -78 -79 -80 -81 -82 -83 -84 -85 -86 -87 -88 -89 -90 -91 -92 -93 -94 -95 -96 -97 -98 -99 -100 -101 -102 -103 -104 -105 -106 -107 -108 -109 -110 -111 -112 -113 -114 -115 -116 -117 -118 -119 -120 -121 -122 -123 -124 -125 -126 -127 -128 -129 -130 -131 -132 -133 -134 -135 -136 -137 -138 -139 -140 -141 -142 -143 -144 -145 -146 -147 -148 -149 -150 -151 -152 -153 -154 -155 -156 -157 -158 -159 -160 -161 -162 -163 -164 -165 -166 -167 -168 -169 -170 -171 -172 -173 -174 -175 -176 -177 -178 -179 -180 -181 -182 -183 -184 -185 -186 -187 -188 -189 -190 -191 -192 -193 -194 -195 -196 -197 -198 -199 -200 -201 -202 -203 -204 -205 -206 -207 -208 -209 -210 -211 -212 -213 -214 -215 -216 -217 -218 -219 -220 -221 -222 -223 -224 -225 -226 -227 -228 -229 -230 -231 -232 -233 -234 -235 -236 -237 -238 -239 -240 -241 -242 -243 -244 -245 -246 -247 -248 -249 -250 -251 -252 -253 -254 -255 -256 -257 -258 -259 -260 -261 -262 -263 -264 -265 -266 -267 -268 -269 -270 -271 -272 -273 -274 -275 -276 -277 -278 -279 -280 -281 -282 -283 -284 -285 -286 -287 -288 -289 -290 -291 -292 -293 -294 -295 -296 -297 -298 -299 -300 -301 -302 -303 -304 -305 -306 -307 -308 -309 -310 -311 -312 -313 -314 -315 -316 -317 -318 -319 -320 -321 -322 -323 -324 -325 -326 -327 -328 -329 -330 -331 -332 -333 -334 -335 -336 -337 -338 -339 -340 -341 -342 -343 -344 -345 -346 -347 -348 -349 -350 -351 -352 -353 -354 -355 -356 -357 -358 -359 -360 -361 -362 -363 -364 -365 -366 -367 -368 -369 -370 -371 -372 -373 -374 -375 -376 -377 -378 -379 -380 -381 -382 -383 -384 -385 -386 -387 -388 -389 -390 -391 -392 -393 -394 -395 -396 -397 -398 -399 -400 -401 -402 -403 -404 -405 -406 -407 -408 -409 -410 -411 -412 -413 -414 -415 -416 -417 -418 -419 -420 -421 -422 -423 -424 -425 -426 -427 -428 -429 -430 -431 -432 -433 -434 -435 -436 -437 -438 -439 -440 -441 -442 -443 -444 -445 -446 -447 -448 -449 -450 -451 -452 -453 -454 -455 -456 -457 -458 -459 -460 -461 -462 -463 -464 -465 -466 -467 -468 -469 -470 -471 -472 -473 -474 -475 -476 -477 -478 -479 -480 -481 -482 -483 -484 -485 -486 -487 -488 -489 -490 -491 -492 -493 -494 -495 -496 -497 -498 -499 -500 -501 -502 -503 -504 -505 -506 -507 -508 -509 -510 -511 -512 -513 -514 -515 -516 -517 -518 -519 -520 -521 -522 -523 -524 -525 -526 -527 -528 -529 -530 -531 -532 -533 -534 -535 -536 -537 -538 -539 -540 -541 -542 -543 -544 -545 -546 -547 -548 -549 -550 -551 -552 -553 -554 -555 -556 -557 -558 -559 -560 -561 -562 -563 -564 -565 -566 -567 -568 -569 -570 -571 -572 -573 -574 -575 -576 -577 -578 -579 -580 -581 -582 -583 -584 -585 -586 -587 -588 -589 -590 -591 -592 -593 -594 -595 -596 -597 -598 -599 -600 -601 -602 -603 -604 -605 -606 -607 -608 -609 -610 -611 -612 -613 -614 -615 -616 -617 -618 -619 -620 -621 -622 -623 -624 -625 -626 -627 -628 -629 -630 -631 -632 -633 -634 -635 -636 -637 -638 -639 -640 -641 -642 -643 -644 -645 -646 -647 -648 -649 -650 -651 -652 -653 -654 -655 -656 -657 -658 -659 -660 -661 -662 -663 -664 -665 -666 -667 -668 -669 -670 -671 -672 -673 -674 -675 -676 -677 -678 -679 -680 -681 -682 -683 -684 -685 -686 -687 -688 -689 -690 -691 -692 -693 -694 -695 -696 -697 -698 -699 -700 -701 -702 -703 -704 -705 -706 -707 -708 -709 -710 -711 -712 -713 -714 -715 -716 -717 -718 -719 -720 -721 -722 -723 -724 -725 -726 -727 -728 -729 -730 -731 -732 -733 -734 -735 -736 -737 -738 -739 -740 -741 -742 -743 -744 -745 -746 -747 -748 -749 -750 -751 -752 -753 -754 -755 -756 -757 -758 -759 -760 -761 -762 -763 -764 -765 -766 -767 -768 -769 -770 -771 -772 -773 -774 -775 -776 -777 -778 -779 -780 -781 -782 -783 -784 -785 -786 -787 -788 -789 -790 -791 -792 -793 -794 -"
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1 1 1\"\nassert solution(\"5 5\") == \"5 3\"\nassert solution(\"9 10\") == \"4\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 3 1 1\"\n\nExplanation:\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4 3\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \"4\", \"-10 9\", \"-2 3\", \"\", \"\"]\nOutput\n[\"1 2 1 1\"]\nExplanation\nSOLUTION TEST CASES:\nInput\n[\"3\", \"4\", \"3 3\", \""
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"4 3\", \"2 3\", \"-2 3\", \"-1 3\"]) == \"1 2 1\"\nassert solution([\"4 3\", \"4 4\", \"2 4\", \"-2 4\"]) == \"1 2 1\"\nassert solution([\"1 1\", \"-1 1\", \"-1 1\"]) == \"1 2 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"3\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"2 3 3 3\") == \"6\"\n"
    }
]