[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = stdin.readlines()\n    graph = {}\n    for line in lines:\n        a, b = line.split()\n        if a in graph:\n            graph[a].append(b)\n        else:\n            graph[a] = [b]\n        if b in graph:\n            graph[b].append(a)\n        else:\n            graph[b] = [a]\n    nodes = list(graph.keys())\n    nodes.sort()\n    a = nodes[0]\n    b = nodes[1]\n    c = nodes[2]\n    if len(set(graph[a]).intersection(set(graph[b]))) > 0 or len(set(graph[a]).intersection(set(graph[c]))) > 0 or len(set(graph[b]).intersection(set(graph[c]))) > 0:\n        return str(len(set(graph[a]).intersection(set(graph[b])) | set(graph[a]).intersection(set(graph[c])) | set(graph[b]).intersection(set(graph[c])))) + '\\n' + str(a) +'' + str(b) +'' + str(c)\n    else:\n        return str(len(set(graph[a]).intersection(set(graph[b])) | set(graph[a]).intersection(set(graph[c])))) + '\\n' + str(a) +'' + str(b) +'' + str(c)\n",
        "test": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n4\\n1 3\\n3\\n3\") == \"4\\n1 3\\n3\\n3\"",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    d = sorted(list(map(int, stdin.strip().split())))\n    for i in range(len(d)):\n        if d[i]!= 1 and d[i] % 2 == 0:\n            d[i] //= 2\n    for i in range(len(d)):\n        for j in range(i + 1, len(d)):\n            if d[i] == d[j]:\n                d[i] += d[j]\n                d[j] = 0\n    for i in range(len(d)):\n        if d[i] > 0:\n            print(d[i], end=' ')\n",
        "test": "assert solution('10 3 8 1 2 4 1 20 4 5') == '20 8'",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"4\\n1 2 4 3\") == \"4\\nL L L\"",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 4 4 7 4 1\n   ... ''')\n    3\n    >>> solution('''2\n   ... 2 8\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.split()[0])\n    numbers = [int(i) for i in stdin.split()[1].split(' ')]\n    min_abs_dif = float('inf')\n    for i in range(n):\n        if abs(numbers[i] - numbers[i-1]) < min_abs_dif:\n            min_abs_dif = abs(numbers[i] - numbers[i-1])\n    if min_abs_dif == 0:\n        return str(0)\n    for i in range(n):\n        if numbers[i] == numbers[i-1]:\n            continue\n        if numbers[i] - numbers[i-1] < 0:\n            return str(min_abs_dif)\n        for j in range(i+1, n):\n            numbers[j] -= numbers[i] - numbers[i-1]\n            if numbers[j] < 0:\n                break\n            if j == n-1 and numbers[j]!= 0:\n                return '-1'\n    return str(min_abs_dif)\n",
        "test": "assert solution(\"2 2 5 2 5\") == \"3\"",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split()]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split()]\n\n    x1, y1 = max(0, x1), max(0, y1)\n    x2, y2 = min(x2, 1000000), min(y2, 1000000)\n\n    x3, y3 = max(0, x3), max(0, y3)\n    x4, y4 = min(x4, 1000000), min(y4, 1000000)\n\n    x5, y5 = max(0, x5), max(0, y5)\n    x6, y6 = min(x6, 1000000), min(y6, 1000000)\n\n    xmin = min(x1, x3, x5)\n    xmax = max(x2, x4, x6)\n    ymin = min(y1, y3, y5)\n    ymax = max(y2, y4, y6)\n\n    # if xmax < xmin or ymax < ymin:\n    #     return \"NO\"\n\n    # xmin, xmax = x1, x2\n    # ymin, ymax = y1, y2\n\n    # print(xmin, xmax, ymin, ymax)\n\n    is_coverd = True\n    is_not_covered = True\n    for x in range(xmin, xmax):\n        for y in range(ymin, ymax):\n            is_coverd = is_coverd and (x >= x1 and x <= x2) and (y >= y1 and y <= y2)\n            is_not_covered = is_not_covered and (x >= x3 and x <= x4) and (y >= y3 and y <= y4)\n\n    # print(is_coverd, is_not_covered)\n    if is_coverd and is_not_covered:\n        return \"YES\"\n\n    return \"NO\"\n\nprint(solution(\"2 2 4 4\"))\n\n\n\ndef",
        "test": "assert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000') == 'YES'",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = set()\n    result.add(n)\n    while True:\n        if n == 1:\n            return len(result)\n        if n % 10 == 0:\n            n = n // 10\n            continue\n        n = n * 10\n        while n % 10 == 0:\n            n = n // 10\n        n = n + 1\n        result.add(n)\n",
        "test": "assert solution(\"1098\") == 20",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"7 4 0 3 0 5 1\\n\") == '7 4 2 3 6 5 1'",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    *rest, k, *nums = stdin.split('\\n')\n    n, k = int(k), int(nums[0])\n    nums = [int(x) for x in nums[1:]]\n    s = set(nums)\n    ans = 'NO'\n    for i in range(1, k + 1):\n        if i not in s and all(i not in x for x in nums):\n            ans = 'YES'\n            break\n    print(ans)\n    if ans == 'YES':\n        print(*(f'{i} {i}' for i in range(1, k + 1)), sep='\\n')\n",
        "test": "assert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def add_up_to_m(m: int, n: int) -> int:\n        if n == 0:\n            return 0\n        return (m + add_up_to_m(m, n - 1)) % m\n\n    def next_char(s: str) -> int:\n        x = ord(s[-1]) - ord(\"0\")\n        return x + 1\n\n    n, m, k = map(int, stdin.split())\n    x = next_char(stdin)\n\n    for i in range(k):\n        n = add_up_to_m(n, k)\n\n    return str(n)[-m:]\n",
        "test": "assert solution(\"11 5 2\") == \"1\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2') == 'YES'",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin]\n    b = [int(i) for i in stdin]\n    f = [int(i) for i in stdin]\n    for i in range(n):\n        if a[i] == 0:\n            b[i] = 1\n        else:\n            break\n    if n <= 2:\n        if n == 1:\n            b[0] = f[0]\n        elif n == 2:\n            if f[0] == f[1]:\n                b[0] = f[0]\n                b[1] = f[1]\n            else:\n                b[0] = f[0]\n                b[1] = f[1]\n        return str(max(b))\n\n    else:\n        b[n - 1] = f[n - 1]\n        for i in range(n - 1):\n            if b[i] == b[i + 1]:\n                if a[i] == 1:\n                    b[i] = f[i]\n                else:\n                    b[i] = f[i]\n                    b[i + 1] = f[i + 1]\n            elif a[i] == 1:\n                b[i] = f[i]\n                b[i + 1] = f[i + 1]\n            else:\n                break\n        return str(max(b))\n",
        "test": "assert solution('11111') == '99999'",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of operations needed to obtain the desired result.\n\n    >>> solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\")\n    1\n    >>> solution(\"4\\n1 2 3\\n2 3 4\\n4 5 6\\n5 6 7\")\n    1\n    \"\"\"\n    # create a set of multiples for each base number\n    multiples = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    for a, b, c in map(int, stdin.splitlines()):\n        # iterate over multiples for each base number\n        for m in multiples:\n            # multiple is less than base number\n            if m < a:\n                # add multiple to set of multiples\n                multiples.add(m)\n            # multiple is greater than base number\n            elif m > a:\n                # remove multiple from set of multiples\n                multiples.remove(m)\n\n    # get the minimum number of operations needed to obtain three divisors\n    # of base numbers\n    num_ops = 3 - (multiples & {a, b, c})\n\n    # return the number of operations\n    return num_ops\n",
        "test": "assert solution('a b c') == 'a b c'",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution\n    \"\"\"\n    import sys\n\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = [int(el) for el in stdin[1].split()]\n\n    min_sum = sys.maxsize\n    for i in range(n):\n        sum_subarr = 0\n        for j in range(i, n):\n            sum_subarr += a[j]\n            if sum_subarr < min_sum:\n                min_sum = sum_subarr\n    return str(min_sum)\n\n\ndef",
        "test": "assert solution('2\\n1 100000') == '0'",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    exam = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    ans = [-1] * (n + 1)\n    for i in range(1, n + 1):\n        for s, d, c in exam:\n            if s <= i <= d:\n                if ans[i] < c:\n                    ans[i] = c\n                    break\n    if ans.count(-1) > 0:\n        return \"-1\"\n    else:\n        return \" \".join(map(str, ans))\n",
        "test": "assert solution(\"10 3 2\") == \"2 2 2 1 1 0 4 3 4 4\"",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    if n == m:\n        return '0'\n    if m % 3 == 0 and (n % 3 == 0 or m < n):\n        return '-1'\n    return n if m == n * 2 or m == n * 3 else '-1'\n",
        "test": "assert solution(\"48 72\") == \"-1\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    t = stdin[1:]\n    f = t[:k]\n    m = [[f[0] if i == 0 else f[i] if f[i]!= f[i - 1] else '' for i in range(len(f))]]\n    for i in range(1, n - k + 1):\n        new = ''\n        for j in range(k):\n            if t[i + j]!= t[i - 1 + j]:\n                new += t[i + j]\n            else:\n                new += m[-1][j]\n        m.append(new)\n    return ''.join(m)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"cat\") == \"catcat\"",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    number of good indices to remove\n    \"\"\"\n    pass",
        "test": "assert solution(\"2 1 1 2 1\") == \"1\"",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n",
        "test": "assert solution(\"ajihiushda\") == 233",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a spanning tree that includes exactly the first vertex.\n\n    :param stdin: the input string\n    :return: string\n    \"\"\"\n    _, n, m, deg = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        if v <= u:\n            v, u = u, v\n        if v == 1:\n            edges.append(u)\n    edges.sort()\n\n    def dfs(v, deg):\n        \"\"\"Finds a spanring tree in the given graph such that the first vertex has degree exactly deg.\n\n        :param v: the first vertex in the given graph\n        :param deg: required degree of the first vertex\n        :return: bool\n        \"\"\"\n        if deg == 0:\n            return True\n        if v in spanring:\n            return dfs(spanring[v], deg - 1)\n        for u in edges:\n            if u == v:\n                continue\n            spanring[v] = u\n            if dfs(u, deg - 1):\n                return True\n            del spanring[v]\n        return False\n\n    spanring = {}\n    for v in range(1, n + 1):\n        spanring[v] = None\n    if not dfs(1, deg):\n        return \"NO\"\n    for v in range(1, n + 1):\n        if spanring[v] == 1:\n            return f\"{v} {1} \" + \" \".join(map(str, spanring))",
        "test": "assert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin.split('\\n')[0].split(':')\n    end = stdin.split('\\n')[1].split(':')\n    start = list(map(int, start))\n    end = list(map(int, end))\n    start_hour = start[0] + start[1] / 60\n    start_minute = start[1] % 60\n    end_hour = end[0] + end[1] / 60\n    end_minute = end[1] % 60\n    # print(start_hour)\n    # print(start_minute)\n    # print(end_hour)\n    # print(end_minute)\n    mid_hour = (start_hour + end_hour) / 2\n    mid_minute = (start_minute + end_minute) / 2\n    # print(mid_hour)\n    # print(mid_minute)\n    return str(int(mid_hour)) + ':' + str(int(mid_minute))\nprint(solution(stdin))\n",
        "test": "assert solution(\"01:02\\n03:02\") == \"02:02\"",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return 0\n    if a == 2:\n        return 1\n    if a == 3:\n        return 1\n\n    n = 1\n    while a > 3 * n ** 2 + 1:\n        n += 1\n\n    return n * n + (n - 1) * n // 2 + 1\n",
        "test": "assert solution('2') == 1",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    total_segments, *_ = [int(x) for x in stdin.split()]\n    segments = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(total_segments - 1):\n        start, end = segments[i], segments[i + 1]\n        if start <= result:\n            if result < end:\n                result = end\n        else:\n            if start <= result:\n                result = start\n    print(result)",
        "test": "assert solution(\"2\\n3 10\\n1 5\") == \"7\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    heights = list(map(int, stdin[1].split()))\n    if n == 1:\n        return \"YES\" if heights[0] == 1 else \"NO\"\n    # starting from the end\n    # add 1 to heights if it's even and then move on\n    while heights[-1] % 2 == 0:\n        heights.append(heights[-1] + 1)\n    # if heights[i] == heights[i + 1] the wall is complete\n    if heights[0] == heights[1]:\n        return \"YES\" if n == len(heights) else \"NO\"\n    # else: the wall is not complete, as Vova can't make bricks to finish the wall\n    return \"NO\"\n",
        "test": "assert solution('2 10') == 'YES'",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    n, k = [int(i) for i in line[0].split()]\n    s = line[1]\n    l = len(s)\n    m = {l - k + 1: [], l - k + 2: [], l - k + 3: [], l - k + 4: []}\n    for i in range(l):\n        for j in range(l):\n            if i < j:\n                if s[i:j] not in m[j - i]:\n                    m[j - i].append(s[i:j])\n    if len(m[k]) == 0:\n        return '-1'\n    else:\n        return str(sum(int(i) for i in m[k]))\n\n\ndef",
        "test": "assert solution(\"ajihiushda\") == 233",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    fish, rabbit, chicken = a, b, c\n    fish = fish // 4\n    rabbit = rabbit // 5\n    chicken = chicken // 4\n    days = min(fish, chicken, rabbit)\n    print(days)\n    return \"\"\n\"\"\"\n\na, b, c = list(map(int, input().split(' ')))\nfish, rabbit, chicken = a, b, c\nfish = fish // 4\nrabbit = rabbit // 5\nchicken = chicken // 4\ndays = min(fish, chicken, rabbit)\nprint(days)\n",
        "test": "assert solution(\"30 20 10\") == '39'",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1 1\\n1 1\") == \"YES\"",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2:\n        return 1\n    else:\n        return 0\n",
        "test": "assert solution(\"1\") == \"0\"",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solution(stdin))\n",
        "test": "assert solution(\"(()(()))()\") == 0",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the minimum number of moves to obtain a number that is divisible by 25\n    \"\"\"\n    N = stdin\n    total = 0\n    while len(N) > 1:\n        first = N[0]\n        last = N[-1]\n        if first > last:\n            N = N[1:]\n            total += 2\n        else:\n            N = N[:-1]\n            total += 1\n    return total if int(N) % 25 == 0 else -1\n",
        "test": "assert solution('1241367') == '-1'",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    pass\n",
        "test": "assert solution(\"ab\") == \"1 1 1 1 1\"",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n",
        "test": "assert solution('qwertyqwertyqwerty') == 'NO', 'WA'",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_score(el: str) -> int:\n        return el[1]\n    \n    lst = stdin.split()\n    l = len(lst)\n    print(lst)\n    lst.sort(key=get_score)\n    print(lst)\n    lst = lst[::-1]\n    print(lst)\n    k = int(lst[0][0])\n    print(k)\n    \n    s = 0\n    for el in lst:\n        if int(el[0]) <= k:\n            k -= int(el[0])\n            s += 1\n        if k == 0:\n            break\n    \n    return str(s)\n",
        "test": "assert solution(\"5 100\\n12 34 55 43 21\") == \"5\"",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return max(a * (a + b), a * (a + b - 2))\n",
        "test": "assert solution(\"3 6\") == \"12\"",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # your code here\n    return \"YES\"\n",
        "test": "assert solution(\"abacbecfd\") == \"YES\"",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(a * 0.08, a * 0.1, b)\n",
        "test": "assert solution('2 3') == '-1'",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    if k == 0 or k >= n or n < 0:\n        return 'NO'\n    a = [0] * k\n    for i in range(k):\n        a[i] = 2 * n // (i + 1) - 1\n    if sum(a) == n:\n        return 'YES\\n' +''.join(map(str, a))\n    return 'NO'\n    pass\n",
        "test": "assert solution(\"8 3\") == \"NO\"",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, r = map(int, stdin.split())\n    p = sorted(list(map(int, stdin.split('\\n'))), key=lambda x: x[0])\n    dp = [[0 for _ in range(r + 1)] for _ in range(n + 1)]\n    ans = 0\n    for i in range(n):\n        j = 0\n        while j < r + 1:\n            if j - p[i][0] >= 0:\n                dp[i + 1][j] = max(dp[i][j], dp[i + 1][j - p[i][0]] + p[i][1])\n                ans = max(ans, dp[i + 1][j])\n            else:\n                dp[i + 1][j] = dp[i][j]\n            j += 1\n    return ans\n",
        "test": "assert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n = int(input[0])\n    nums = [int(x) for x in input[1].split(' ')]\n\n    matrix = []\n    for _ in range(n):\n        row = []\n        for _ in range(n):\n            row.append(0)\n        matrix.append(row)\n    \n    for num in nums:\n        r = num // n\n        c = num % n\n        if matrix[r][c] == 0:\n            matrix[r][c] = num\n        else:\n            matrix[r][c] = 0\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                print(\"NO\")\n                return\n    \n    for r in matrix:\n        print(' '.join([str(x) for x in r]))\n    \n    return \n",
        "test": "assert solution('1\\n10') == 'YES\\n10'",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, m, d = map(int, stdin.split())\n    # c = map(int, stdin.split())\n    # plat = [0] * (n+2)\n    # plat[0] = 1\n    # plat[-1] = n\n    # m = len(c)\n    # for i in range(m):\n    #     plat[c[i]] = i + 1\n    # x = 0\n    # while plat[x]!= n+1:\n    #     plat[x] = 0\n    #     x = x + d + 1\n    #     if plat[x] == n+1:\n    #         break\n    # plat[x] = 0\n    # if plat[x]!= n+1:\n    #     return 'NO'\n    # plat[x] = 0\n    # for i in range(x+1, n+1):\n    #     if plat[i] == 0:\n    #         continue\n    #     if plat[i-d] == plat[i]:\n    #         return 'NO'\n    # return 'YES\\n' +''.join(list(map(str, plat)))\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    plat = [0] * (n+2)\n    plat[0] = 1\n    plat[-1] = n\n    m = len(c)\n    for i in range(m):\n        plat[c[i]] = i + 1\n    x = 0\n    while plat[x]!= n+1:\n        plat[x] = 0\n        x = x + d + 1\n        if plat[x] == n+1:\n            break\n    plat[x] = 0\n    if plat[x]!= n+1:\n        return 'NO'\n    plat[x] = 0\n    for i in range(x+1, n+1):\n        if plat[i] == 0:\n            continue\n        if plat[i-d] == plat[i]:\n            return 'NO'\n    return 'YES\\n' +''.join(list(map(str, plat)))\n",
        "test": "assert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return 0 if s.find(t) == -1 else len(t) - t.find(s)\n",
        "test": "assert solution(\"et\") == 0",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1.23333\")\n    '3 2'\n    >>> solution(\"2.23333\")\n    '10 3'\n    >>> solution(\"3.23433\")\n    '3 2'\n    \"\"\"\n    x = stdin\n    x = float(x)\n    n, m = divmod(int(x * 10 ** 6), 5)\n    return str(n) + \" \" + str(m)\n",
        "test": "assert solution('4.024922') == '9 9'",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    edges = [0 for i in range(n)]\n    for i in range(n-1):\n        edges[i] = (i+1, i+2)\n    if d == 1:\n        if n == 1 or k == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    elif d == 2:\n        if n < 4 * k:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if d % 2 == 0:\n            d = d // 2\n            if n < d * k:\n                return \"NO\"\n            else:\n                return \"YES\"\n        else:\n            d = (d // 2) + 1\n            if n < d * k:\n                return \"NO\"\n            else:\n                return \"YES\"\n",
        "test": "assert solution('6 3 3') == 'YES'",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b, x = stdin.split(' ')\n    a, b, x = int(a), int(b), int(x)\n    \n    ans = [0] * a\n    for i in range(a):\n        ans[i] = '0'\n    \n    for i in range(b):\n        ans[i + a] = '1'\n    \n    for i in range(x):\n        ans[i + a + b] = '1'\n    \n    return ''.join(ans)\n",
        "test": "assert solution('101011') == '100110'",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res",
        "test": "assert solution(\"bb\") == \"acb\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    q = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    if n < 2 or n > 10 ** 5 or any(q[i] < -n or q[i] >= n for i in range(len(q))):\n        return '-1'\n    for i in range(n - 1):\n        if q[i] >= 0:\n            return '-1'\n        if q[i] < 0:\n            q[i] += n\n    p = [q[0] + 1]\n    for i in range(1, n):\n        p.append(p[i - 1] + q[i])\n    return''.join(map(str, p))\n",
        "test": "assert solution(\"3\\n1 2\\n\") == \"3 1 2\"",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin))",
        "test": "assert solution('3\\n1 2 3') == '1'",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n    while True:\n        if N == 1:\n            return result\n        if N % 2 == 0:\n            N = N / 2\n        else:\n            N = N * 3 + 1\n        result += 1\n",
        "test": "assert solution(\"100\") == \"25\"",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, range(a1, a2)))\n",
        "test": "assert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split()]\n\n    res = []\n    def dfs(start, end, s):\n        if s > 0:\n            res.append((start, end))\n        for i in range(start, end):\n            if i + 1 < end and a[i] == a[i + 1]:\n                dfs(i + 1, end, s + 1)\n            if i > start and a[i] == a[i - 1]:\n                dfs(start, i, s + 1)\n\n    dfs(0, n, 0)\n    return str(len(res)) + '\\n' + '\\n'.join([' '.join(map(str, x)) for x in res])\n\nprint(solution(input()))\n",
        "test": "assert solution(\"4 1 2 2 1 5 3\") == '3'",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'NO'",
        "test": "assert solution(\"3 1 2\") == \"NO\"",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    if len(s)!= len(t):\n        return \"-1\"\n\n    ans = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            ans += 1\n            s = s[:i] + t[i] + s[i+1:]\n    return ans\n",
        "test": "assert solution(\"abdfec\") == \"abdcef\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def isPrefix(stdin: str) -> bool:\n        return True if prefix == prefix[:len(stdin)] else False\n    def isSuffix(stdin: str) -> bool:\n        return True if suffix == suffix[:len(stdin)] else False\n    prefix = stdin[:len(stdin)-1]\n    suffix = stdin[1:]\n    #print(isPrefix(stdin))\n    #print(isSuffix(stdin))\n    if isPrefix(stdin) and isSuffix(stdin):\n        return \"PPS\"\n    elif isPrefix(stdin):\n        return \"PS\"\n    elif isSuffix(stdin):\n        return \"PS\"\n    else:\n        return \"PP\"",
        "test": "assert solution(\"aba\") == \"PPS\"",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingYBFVGP-636/\"\"\"\n    # 1. input -> numbers_array\n    numbers_array = [int(n) for n in stdin.split(\" \")]\n\n    # 2. output -> len(numbers_array) - 1\n    return len(numbers_array) - 1\n",
        "test": "assert solution(\"2 4 6 8 10\") == \"1\"",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res\n   ...\nprint(solution(stdin))",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"0\"",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = {}\n    for x in a:\n        if x == 1:\n            continue\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    print(d)\n    count = 0\n    for x in a:\n        if x == 1:\n            continue\n        if x in d:\n            count += d[x]\n    print(count)\n",
        "test": "assert solution(\"3\\n1 2 3\") == \"1\"",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    return len(set(a))\n    \nprint(solution(input()))\n",
        "test": "assert solution(\"1 2 4 3 3 2\\n\") == \"2\"",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n\n{'array': [[0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1]],\n'target': 3,'minimal': 3, 'answer': 3}\n\n\n{'array': [[1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]],\n'target': 2,'minimal': 2, 'answer': 2}\n\n\n{'array': [[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0]],\n'target': 3,'minimal': 3, 'answer': 3}\n\n\n{'array': [[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0]],\n'target': 3,'minimal': 3, 'answer': 3}\n\n-----\n\ndef",
        "test": "assert solution(\"10 3\\n0 0 0 0 0\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Task:\n    # Given a positive integer N,\n    # how many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?\n    #\n    # Strategy:\n    # The task is really about the following.\n    # A tuple (A, B, C) satisfies A \\times B + C = N\n    # if and only if A * B + C = N.\n    # Because (A, B, C) is a tuple, we are given that there exists integers A, B, C\n    # such that A * B + C = N.\n    # Suppose A \\in {1, 2, \\dots, N} and B \\in {1, 2, \\dots, N}.\n    # Then we can write A \\times B + C = N in terms of A * B + C.\n    # Therefore, we have a system of equations with N equations and N unknowns.\n    #\n    # We can write A \\times B + C = N in terms of A and C.\n    # Then, we can solve the system of equations.\n    # We can find the number of solutions with A \\in {1, 2, \\dots, N} and C \\in {1, 2, \\dots, N}.\n    # If this number is odd, then there exists no tuple (A, B, C) such that A * B + C = N.\n    # If this number is even, then there exists some tuple (A, B, C) such that A * B + C = N.\n    # We can then find all tuples (A, B, C) such that A * B + C = N.\n    #\n    # Because the number of tuples that satisfy A \\times B + C = N is the number of solutions for A \\in {1, 2, \\dots, N} and C \\in {1, 2, \\dots, N}.\n    # We can use a dynamic programming approach to solve this problem.\n    #\n    # Algorithm:\n    # The first few lines of code are just for input validation.\n    if len(stdin) < 1:\n        return \"\"\n    N = int(stdin)\n    if N < 2:\n        return 0\n\n    # We need to create a 2D array of size N + 1 by N + 1.\n    # To do that, we can use a 1D array.\n    # We can then access it like this: A[0][0], A[0][1], A[0][2],..., A[0][N], A[1][0], A[1][1], A[1][2],..., A[1][N], A[2][0], A[2][1], A[2][2],..., A[2][N],..., A[N][0], A[N][1], A[N][2],..., A[N][N]\n    # We can also create a 1D array and then create the 2D array from the 1D array using the numpy library.\n    A = np.zeros(N + 1, dtype=int)\n\n    # For each A in the 1D array, we need to compute the number of tuples such that A \\times B + C = N.\n    # We will store the result in another 1D array.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    result = np.zeros(N + 1, dtype=int)\n\n    # Now we need to do a nested loop to compute the number of tuples such that A \\times B + C = N.\n    # For each value A in the 1D array, we need to compute the number of solutions for C \\in {1, 2, \\dots, N} for each A.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    # For each A in the 1D array, we can compute the number of solutions for C \\in {1, 2, \\dots, N} for each A.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    # We will store the result in another 1D array.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    solutions = np.zeros(N + 1, dtype=int)\n\n    # Now we need to compute the number of solutions for each value A in the 1D array.\n    # We will do this for each value A in the 1D array and store the result in the 1D array.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    # For each value A in the 1D array, we will compute the number of solutions for C \\in {1, 2, \\dots, N} for each A.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    # We will store the result in the 1D array.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    for A in range(1, N + 1):\n        for C in range(1, N + 1):\n            # If A * B + C = N, then A * B + C = A * (B + C)\n            # or, if we use the equation above, we have A * (B + C) = N.\n            # Therefore, A * (B + C) = N.\n            # We can then write A * (B + C) = N in terms of A * B + C.\n            # If B + C = A, then A * (B + C) = A * B.\n            # Thus, we have A * B = A * (B + C) - C.\n            # We can then write A * B = (A * (B + C) - C) + C.\n            # We can then write A * B = N - C.\n            # Thus, we can say that A * B + C = N if and only if C = N - A * B.\n            if A * (B + C) - C == N:\n                solutions[A] += 1\n\n    # Now we can compute the number of tuples that satisfy A \\times B + C = N.\n    # If the number of solutions for A = 1, A = 2, A = 3,..., A = N is odd,\n    # then there is no tuple (A, B, C) such that A * B + C = N.\n    # If the number of solutions for A = 1, A = 2, A = 3,..., A = N is even,\n    # then there exists a tuple (A, B, C) such that A * B + C = N.\n    # We can now compute the number of solutions.\n    for A in range(1, N + 1):\n        result[A] = solutions[A]\n\n    # Now we can compute the number of tuples that satisfy A \\times B + C = N.\n    # If the number of solutions for A = 1, A = 2, A = 3,..., A = N is odd,\n    # then there is no tuple (A, B, C) such that A * B + C = N.\n    # If the number of solutions for A = 1, A = 2, A = 3,..., A = N is even,\n    # then there exists a tuple (A, B, C) such that A * B + C = N.\n    # We can now compute the number of solutions.\n    for A in range(1, N + 1):\n        result[A] = result[A] + solutions[A]\n\n    # We can now print the answer.\n    # We can loop over the 1D array and add all the values in it.\n    # This is the same as",
        "test": "assert solution('3') == '3'",
        "num_ids": 2103,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(((())\")\n    2\n    \"\"\"\n    res = 0\n    stack = []\n    for i in stdin:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                res += 1\n    res += len(stack)\n    return res\n",
        "test": "assert solution(\"(()(()))\") == 0",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to HackerRank problem 'Maximum Substring by Deleting Characters'\n    \"\"\"\n    \n    # get input\n    s = stdin.strip()\n    t = stdin.strip()\n\n    # get the minimum length of the strings\n    min_len = min(len(s), len(t))\n\n    # get the number of characters that need to be deleted from each string to make a valid subsequence\n    num_chars_deleted = 0\n    for i in range(min_len):\n        # if the characters at the current index are not the same, add the number of characters between them\n        # to the number of characters that need to be deleted\n        if s[i]!= t[i]:\n            num_chars_deleted += 1\n    \n    # return the number of characters that need to be deleted\n    return num_chars_deleted\n",
        "test": "assert solution(\"tset\") == 0",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(x) for x in stdin.split(\" \"))\n    if a == b:\n        if c == d:\n            return str(a * b)\n        else:\n            return str(a * max(c, d))\n    else:\n        if c == d:\n            return str(max(a, b) * c)\n        else:\n            return str(max(a, b) * max(c, d))\n",
        "test": "assert solution('''1 2 1 1''') == '2'",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n  # your solution here\n  return \"\"\n",
        "test": "assert solution('7 3 1 3 3 3 5') == 2",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    a = a[::-1]\n    def count(t):\n        return sum(1 for i in a if i > t)\n\n    lo, hi = 0, h\n    best = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if count(mid) >= n:\n            if mid > best:\n                best = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return best\n\ndef",
        "test": "assert solution(\"7 24 21 23\") == 3",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    a = [0] + a\n\n    diff = [0] * (n + 1)\n    for i in range(n):\n        diff[i + 1] = a[i + 1] - a[i]\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(1, n):\n        dp[i + 1] = dp[i]\n        for j in range(i):\n            if diff[j] < diff[i] and diff[i] <= 2 * diff[j]:\n                dp[i + 1] = max(dp[i + 1], dp[j] + 1)\n    return dp[n]",
        "test": "assert solution('6\\n4 7 12 100 150 199') == '3'",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find two indices i, j such that lcm(a[i], a[j]) is minimum among all possible pairs of values\n    from the input string.\n\n    >>> solution(\"5 2 11 3 7\")\n    '1 4'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(item) for item in stdin.split()[1:]]\n    a.sort()\n    result = [1, n]\n    for i in range(1, n):\n        # find the first number in the list that divides i and has the least remainder\n        result.append(i + 1)\n        while result[-1] * a[i] > a[i - 1] * result[-2]:\n            result.pop()\n    return f\"{result[1]} {result[2]}\"\n",
        "test": "assert solution('''5",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = ['0', '1', '2']\n    b = [0, 0, 0]\n    a = [[0, 1, 2], [1, 2, 0], [2, 0, 1]]\n    c = [0, 0, 0]\n    for i in range(n):\n        for j in range(3):\n            if stdin[i] == l[j]:\n                b[j] += 1\n                if i % 3 == 0:\n                    c[0] += 1\n                if i % 3 == 1:\n                    c[1] += 1\n                if i % 3 == 2:\n                    c[2] += 1\n    c[0] = (c[0] // 3)\n    c[1] = (c[1] // 3)\n    c[2] = (c[2] // 3)\n    if c[0] == c[1] and c[1] == c[2] and c[2] == c[0]:\n        return \"\".join(l[b.index(max(b))] * 3)\n    else:\n        if c[0] < c[1] and c[0] < c[2]:\n            r = c[0]\n        elif c[0] > c[1] and c[0] > c[2]:\n            r = c[1]\n        else:\n            r = c[2]\n        b[b.index(max(b))] -= r\n        return \"\".join(l[b.index(max(b))] * r)\n",
        "test": "assert solution(\"211200\") == \"211220\"",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(6) + '\\n' + str(1) + '\\n' + str(3) + '\\n' + str(2) + '\\n' + str(4) + '\\n' + str(6))\n    '4'\n    \"\"\"\n    N, M = [int(x) for x in stdin.split()]\n    broken = [int(x) for x in stdin.splitlines()[1 : M + 1]]\n    broken_set = set(broken)\n    result = 0\n    for i in range(N):\n        if i not in broken_set:\n            result += 1\n    return str(result % 1000000007)\n",
        "test": "assert solution(\"6 3\\n2\\n3\\n4\\n5\\n6\") == \"4\"",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum absolute value of coordinate of the destination\"\"\"\n    \n    coordinate, moves, result = map(int, stdin.split(' '))\n    print(2 * moves - abs(coordinate))\n    \n    return result\n    \n",
        "test": "assert solution(\"6 2 4\") == \"2\"",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 ** int(stdin) - 1)\n\n\nprint(solution(input()))\n",
        "test": "assert solution(\"571576\") == 10",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(a * b * c)\n",
        "test": "assert solution('5') == 125",
        "num_ids": 72,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 13 and a <= 99:\n        return 0\n    elif a >= 100 and a <= 999:\n        return 1\n    else:\n        return 0\n",
        "test": "assert solution('48') == 0",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a: List[int] = [int(stdin) for stdin in stdin]\n    n = len(a)\n    a.sort()\n    if n == 1:\n        return str(a[0])\n    if n == 2:\n        if a[0] == 1:\n            return str(a[1])\n        else:\n            return str(a[0] - 1)\n\n    if n == 3:\n        if a[0] == 1:\n            return str(a[1] + a[2])\n        else:\n            return str(a[0] - 1) +'' + str(a[1] + a[2])\n    return str(a[0] - 1) +'' + str(a[1] + a[2])\n",
        "test": "assert solution('''4",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split()\n    n = int(line[0])\n    k = int(line[1])\n    memo = [1] + [0] * n\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            memo[j] = memo[j] + memo[j - i]\n    return memo[-1]",
        "test": "assert solution('''8 7",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    switch_count, bulb_count = map(int, stdin.split(\" \"))\n    switch_list = list(map(int, stdin.split(\"\\n\")[:switch_count]))\n    bulb_list = list(map(int, stdin.split(\"\\n\")[switch_count:]))\n    p_list = list(map(int, stdin.split(\"\\n\")[switch_count + 1:]))\n    # count_list = [0 for i in range(bulb_count)]\n\n    # for i in range(bulb_count):\n    #     for j in range(switch_count):\n    #         if p_list[i] == 1 and switch_list[j] % 2 == 1:\n    #             count_list[i] += 1\n\n    # result = 0\n    # for i in range(bulb_count):\n    #     if count_list[i] % 2 == 0:\n    #         result += 1\n\n    # return str(result)\n\n    count_list = [0 for i in range(bulb_count)]\n\n    for i in range(bulb_count):\n        for j in range(switch_count):\n            if p_list[i] == 1 and switch_list[j] % 2 == 1:\n                count_list[i] += 1\n\n    result = 0\n    for i in range(bulb_count):\n        if count_list[i] % 2 == 0:\n            result += 1\n\n    return str(result)\n",
        "test": "assert solution('2 2\\n2 1 2\\n1 2\\n1 0\\n') == 3",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.strip().split())\n    h = 0.5 * (A + B)\n    m = 0.5 * (H + M)\n    return str(round(h * m, 9))\n",
        "test": "assert solution('3 4 9 0') == '5.00000000000000000000'",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of pairs of indices $(l, r)$\n    such that the value of median of $a_l, a_{l+1}, \\dots, a_r$\n    is exactly the given number $m$.\n\n    Parameters\n    ----------\n    stdin\n        The input string.\n\n    Returns\n    -------\n    str\n        The number of suitable pairs.\n    \"\"\"\n\n    data = [int(i) for i in stdin.splitlines()[1].split()]\n    data.sort()\n    m = int(stdin.splitlines()[0].split()[1])\n\n    low, high = 0, len(data) - 1\n    res = 0\n    while low < high:\n        if data[low] == m:\n            res += high - low\n            low += 1\n        elif data[low] < m:\n            low += 1\n        else:\n            high -= 1\n    print(res)\n    return ''\n",
        "test": "assert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\\n\") == \"97\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution takes O(m) + O(n) time.\n    \"\"\"\n    # Get n and m\n    n, m = map(int, stdin.readline().split())\n\n    # Get the array\n    a = list(map(int, stdin.readline().split()))\n\n    # Get the segments\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append([l, r])\n\n    # Get the best minimum\n    best_min = 10 ** 6\n    best_solution = None\n    # Try every solution\n    for idx in range(m):\n        seg = segments[idx]\n        s, e = seg\n        new_a = []\n        for i in range(s, e + 1):\n            new_a.append(a[i])\n        for i in range(s, e + 1):\n            a[i] -= 1\n        # Get the best minimum\n        min_new_a = min(new_a)\n        if min_new_a < best_min:\n            best_min = min_new_a\n            best_solution = idx + 1\n        # Backtrack\n        for i in range(s, e + 1):\n            a[i] += 1\n\n    # Get the best maximum\n    best_max = -10 ** 6\n    best_solution = None\n    for idx in range(m):\n        seg = segments[idx]\n        s, e = seg\n        new_a = []\n        for i in range(s, e + 1):\n            new_a.append(a[i])\n        for i in range(s, e + 1):\n            a[i] += 1\n        # Get the best maximum\n        max_new_a = max(new_a)\n        if max_new_a > best_max:\n            best_max = max_new_a\n            best_solution = idx + 1\n        # Backtrack\n        for i in range(s, e + 1):\n            a[i] -= 1\n\n    return str(best_max - best_min) + \" \" + str(best_solution)",
        "test": "assert solution(test_stdin) == test_solution",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        'Yes' if input_string.isalpha() and input_string == ''.join(sorted(set(input_string)))\n        else 'No'\n        for input_string in stdin.split()\n    ])",
        "test": "assert solution(\"xyz\") == \"Yes\"",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, segments):\n        b = a[:]\n        for l, r in segments:\n            b[l - 1] -= 1\n            b[r - 1] -= 1\n        return max(b) - min(b)\n\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    ans = 0\n    for _ in range(m):\n        l, r = map(int, stdin.split(' '))\n        ans = max(ans, solve(a, [[l, r]]))\n        ans = max(ans, solve(a, [[1, n]]))\n    return str(ans)\n",
        "test": "assert solution('3 10\\n1 10\\n2 10') == '0\\n0\\n0'",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"1 2 5 3 4\") == 4",
        "num_ids": 2185,
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().split()[1])\n    n = int(stdin.readline().split()[0])\n    a = [int(x) for x in stdin.readline().split()]\n    return str(math.ceil(math.log2(sum(a)/k)))\n\nprint(solution(\"3 2\\n1 2 3\\n\"))\nprint(solution(\"2 1\\n1 1\\n\"))",
        "test": "assert solution(\"5 3\\n1 2 3 3 3\") == \"0\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    [n, a, b] = stdin.split()\n    return f\"{int(a) + int(b) - int(n)} blue balls\"\n",
        "test": "assert solution('8 3 4') == '4'",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum possible x such that stdin is the list of almost all its divisors.\n\n    >>> solution('8\\n8 2 12 6 4 24 16 3')\n    48\n    >>> solution('1\\n2')\n    -1\n    \"\"\"\n\n    pass\n",
        "test": "assert solution(\"4\\n8\\n2\\n12\") == \"4\"",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('5 2 2 4 4') == '2\\n2 4'",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    d = int(stdin)\n    e = int(stdin)\n    f = int(stdin)\n    g = int(stdin)\n    h = int(stdin)\n    i = int(stdin)\n    j = int(stdin)\n    k = int(stdin)\n    l = int(stdin)\n    m = int(stdin)\n    n = int(stdin)\n    o = int(stdin)\n    p = int(stdin)\n    q = int(stdin)\n    r = int(stdin)\n    s = int(stdin)\n    t = int(stdin)\n    u = int(stdin)\n    v = int(stdin)\n    w = int(stdin)\n    x = int(stdin)\n    y = int(stdin)\n    z = int(stdin)\n    \n    \n    return(\n        stdin\n        if int(stdin) < 100\n        else solution(\n            stdin + str(int(stdin) + 1)\n            if int(stdin) < 1000\n            else solution(\n                stdin + str(int(stdin) + 1) + str(int(stdin) + 2)\n                if int(stdin) < 10000\n                else solution(\n                    stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3)\n                    if int(stdin) < 100000\n                    else solution(\n                        stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4)\n                        if int(stdin) < 1000000\n                        else solution(\n                            stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5)\n                            if int(stdin) < 10000000\n                            else solution(\n                                stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6)\n                                if int(stdin) < 100000000\n                                else solution(\n                                    stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7)\n                                    if int(stdin) < 1000000000\n                                    else solution(\n                                        stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8)\n                                        if int(stdin) < 10000000000\n                                        else solution(\n                                            stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8) + str(int(stdin) + 9)\n                                            if int(stdin) < 100000000000\n                                            else solution(\n                                                stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8) + str(int(stdin) + 9) + str(int(stdin) + 10)\n                                                if int(stdin) < 1000000000000\n                                                else solution(\n                                                    stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8) + str(int(stdin) + 9) + str(int(stdin) + 10) + str(int(stdin) + 11)\n                                                    if int(stdin) < 10000000000000\n                                                    else solution(\n                                                        stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8) + str(int(stdin) + 9) + str(int(stdin) + 10) + str(int(stdin) + 11) + str(int(stdin) + 12)\n                                                        if int(stdin) < 1000000000000000000\n                                                        else stdin\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n",
        "test": "assert solution('432') == '435'",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.readline())):\n        s = stdin.readline()[:-1]\n        n = int(stdin.readline())\n        b = list(map(int, stdin.readline().split()))\n        s0 = sorted(set(s))\n        d = {c: s.count(c) for c in s0}\n        ans = []\n        for x in s0:\n            for y in s0:\n                if x!= y:\n                    ans.append(abs(d[x] - d[y]))\n        print(''.join(sorted(s, key=lambda c: b[ord(c) - ord('a')] + ans.index(ord(c) - ord('a')))))\n\n\"\"\"\ndef",
        "test": "assert solution(\"ecoosdcefr\") == \"codeforces\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N: str = stdin.read()\n    # perform some operations\n    answer: str = \"\"\n    for i in range(1, N + 1):\n        if i <= 26:\n            answer += chr(ord('a') + i - 1)\n        elif i <= 702:\n            answer += chr(ord('a') + (i - 26) - 1) + chr(ord('a') + (i - 26) - 1)\n        elif i <= 18277:\n            answer += chr(ord('a') + (i - 702) - 1) + chr(ord('a') + (i - 702) - 1) + chr(ord('a') + (i - 702) - 1)\n        elif i <= 475255:\n            answer += chr(ord('a') + (i - 18277) - 1) + chr(ord('a') + (i - 18277) - 1) + chr(ord('a') + (i - 18277) - 1) + chr(ord('a') + (i - 18277) - 1)\n        else:\n            break\n    # return output\n    return answer\n",
        "test": "assert solution('2') == 'b'",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    words = []\n    word_dict = {}\n    for w in stdin:\n        words.append(w)\n        word_dict[w] = len(w)\n\n    result = 10 ** 5\n    for i in range(1, n - 1):\n        if i + 1 < len(words) and words[i] == words[i + 1]:\n            continue\n\n        for j in range(i + 1, n):\n            if j + 1 < len(words) and words[j] == words[j + 1]:\n                continue\n\n            if len(words[i]) > 1:\n                a, b = sorted([words[i], words[j]])\n                if word_dict[a] + j - i < j - i:\n                    break\n\n            if j + 1 < len(words) and words[j] == words[j + 1]:\n                continue\n\n            l = j - i + 1\n            if l < result:\n                result = l\n                if l < 3:\n                    break\n\n    return result\n\n\ndef",
        "test": "assert solution('aa bb aa aa bb bb') == 'AB AAAB AB'",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def find_distribution(stdin: str) -> str:\n        n, k = [int(i) for i in stdin.split(' ')]\n        arr = [int(i) for i in stdin.split(' ')[1:]]\n        if k == 1:\n            return str(n)\n        else:\n            k = min(k, n)\n            arr.sort()\n            arr = arr[::-1]\n            i = 0\n            j = 1\n            ans = [1] * k\n            while j < k:\n                while i < n and arr[i] >= arr[j]:\n                    ans[j] += ans[j - 1]\n                    i += 1\n                j += 1\n            return''.join([str(i) for i in ans])\n    print(find_distribution(stdin))\n",
        "test": "assert solution('5 1\\n1 1 1 1 1') == '1\\n5'",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the Kolya problem.\n    \"\"\"\n   ...\n",
        "test": "assert solution('8 -5 -11 -15 10 5 4 -4') == '3'",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\\n') == '0\\n2\\n10\\n1000000000\\n2000000000'",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    K = int(stdin)\n    arr = [7, 77, 777]\n    for i in range(K):\n        if i * 7 % K == 0:\n            return str(i)\n    return '-1'\n",
        "test": "assert solution('101') == '4'",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48'",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution('5 8\\n2 3 1 1 2'))\nprint(solution('7 10\\n5 5 5 5 5'))\nprint(solution('5 15\\n5 5 5 5 5'))\nprint(solution('5 26\\n5 5 5 5 5'))\n",
        "test": "assert solution(\"5 26\\n5 5 5 5 5\") == \"2\"",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom itertools import accumulate\nfrom sys import stdout\n\n\ndef",
        "test": "assert solution(\"5 1 3 6 9 12\") == \"1\"",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    abilities = [int(ability) for ability in stdin.split()]\n    abilities.sort(reverse=True)\n    result = []\n    \n    for i in range(0, n, k):\n        if abilities[i] - abilities[i + k - 1] <= 5:\n            result.append([abilities[i], abilities[i + k - 1]])\n\n    return len(result)",
        "test": "assert solution(\"7 3\\n1 2 3 4 5 6 7\\n\") == \"4\"",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    '''Get the input; n - total subjects, k - total points, m - goal score, a - points of each subject'''\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # Initialize the scores\n    scores = [0] * n\n    # Get the minimum and maximum values of the given a\n    min_a = min(a)\n    max_a = max(a)\n    # If the goal is not attainable\n    if max_a < m:\n        return -1\n    # If the first subject is not worth the goal score\n    elif min_a < m:\n        # Then the first subject needs to be worth more than the goal\n        scores[0] = m - min_a\n    # If the first subject is worth the goal score, we need to decide whether the second subject is worth more\n    # If the second subject is not worth more than the goal score\n    if max_a - m < m:\n        # Then we can score it off\n        scores[1] = max_a - m\n    # If the second subject is worth more than the goal score\n    elif max_a - m >= m:\n        # Then we need to get the value of the second subject that is less than the goal score\n        scores[1] = m - max_a + m\n    # Iterate through the scores\n    for i in range(2, n):\n        # Get the minimum and maximum values of the given a\n        min_a = min(a[:i])\n        max_a = max(a[:i])\n        # If the minimum is not worth more than the goal score\n        if min_a < m:\n            # Then we need to get the value of the first subject that is less than the goal score\n            scores[i] = m - min_a + scores[i - 1]\n        # If the minimum is worth more than the goal score\n        elif min_a >= m:\n            # Then we need to get the value of the first subject that is less than the goal score\n            scores[i] = m - max_a + scores[i - 1]\n    return max(scores)",
        "test": "assert solution(\"8 10 3 6\\n5 10 7\") == \"8\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_survived(n: int, k: int, q: int, a_list: List[int]):\n        pass\n\n    n, k, q = [int(x) for x in stdin.split(' ')]\n    a_list = [int(x) for x in stdin.split('\\n')[:-1]]\n\n    is_survived(n, k, q, a_list)\n\ndef",
        "test": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    # print(a)\n\n    inv1 = set()\n    inv2 = set()\n    for i in range(n):\n        if sum(a[i]) == 0:\n            inv1.add(i)\n        elif sum(a[i]) == m:\n            inv2.add(i)\n\n    # print(inv1, inv2)\n\n    inv1 = list(inv1)\n    inv2 = list(inv2)\n    for i in range(len(inv1)):\n        for j in range(len(inv2)):\n            if sum(a[inv1[i]]) == sum(a[inv2[j]]):\n                print(\"YES\")\n                inv1[i] = inv2[j]\n                inv2[j] = inv1[i]\n                print(\"010\")\n                break\n        else:\n            print(\"NO\")\n            return\n\n    # print(inv1, inv2)\n    for j in range(m):\n        if j not in inv2:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(\"10\")\n    return\n",
        "test": "assert solution('1\\n0\\n1\\n0') == '010'",
        "num_ids": 1501,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if int(stdin) == int(stdin[::-1]):\n                return \"Yes\"\n            stdin = int(stdin)\n            stdin = str(stdin * i)\n    return \"No\"\n",
        "test": "assert solution('373') == 'Yes'",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def get_charge(cur_pos: int, charge: int) -> int:\n        return cur_pos * (charge + 1) if cur_pos * (charge + 1) > charge else charge\n\n    n, b, a = [int(x) for x in stdin.split(' ')]\n    # print(n, b, a)\n    dists = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # print(dists)\n    cur_pos = 0\n    charge = b\n    result = 0\n    for i in range(n):\n        # print(i, cur_pos, charge, dists[i], get_charge(cur_pos, charge), result)\n        if dists[i] == 1:\n            if charge <= a:\n                result = max(result, get_charge(cur_pos, charge))\n            else:\n                cur_pos += 1\n                charge = b\n        else:\n            cur_pos += 1\n            charge -= 1\n    return result\n",
        "test": "assert solution(\"6 3 2\\n1 0 0 1 0 1\") == \"3\"",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))",
        "test": "assert solution('8-7+6-5+4-3+2-1-0') == '4'",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2:\n        return \"NO\"\n\n    if k < 2 or k > 2 * 10 ** 5:\n        return \"NO\"\n\n    # x is the number of colors to use, so number of colors\n    x = n // 2\n\n    # z is the number of colors we need, so number of colors\n    z = n - x\n\n    # y is the number of colors left to use, so number of colors\n    y = k - z\n\n    # s is the sum of the numbers of colors used, so sum of colors\n    s = x + y\n\n    # m is the number of colors used, so number of colors\n    m = x if x <= y else y\n\n    if m < 2 or m > 2 * 10 ** 5:\n        return \"NO\"\n\n    if s < 1:\n        return \"NO\"\n\n    # color number of color, used color number\n    colors = [0] * (z + 1)\n    for i in range(1, m + 1):\n        if i <= x:\n            colors[i - 1] = 1\n        else:\n            colors[i - 1] = i - 1\n\n    # i is the index of the last used color\n    # j is the index of the last color to use\n    i, j = n - 1, n\n    while j >= 0:\n        if i >= j:\n            i, j = j - 1, j - 1\n        else:\n            if colors[j] == 0:\n                colors[j] = 1\n                i, j = j - 1, j - 1\n            else:\n                colors[j] += 1\n                i, j = j - 1, j - 1\n\n    if s!= sum(colors):\n        return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution('13 4\\n') == 'NO'",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split('\\n')[0].split())\n    b = list(map(int, stdin.split('\\n')[1].split()))\n    if k > n or x > n:\n        return '-1'\n    a = [0] * (n + 1)\n    for i in range(n):\n        a[i + 1] = a[i] + b[i]\n    # print(a)\n    a.sort()\n    # print(a)\n    res = 0\n    j = 0\n    for i in range(n + 1):\n        while j < n and a[j] - a[i] >= k:\n            j += 1\n        if j < n and a[j] - a[i] < k:\n            res = max(res, a[i] + a[j] - k * (x - 1))\n        else:\n            return str(res)\n    return '-1'\n",
        "test": "assert solution('''6 1 5",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rooms, num_of_routers = list(map(int, stdin.split(' ')))\n    rooms_cost = 0\n\n    for i in range(num_of_rooms):\n        is_router_avail = False\n        for j in range(num_of_routers):\n            if int(stdin[i * num_of_routers + j]):\n                is_router_avail = True\n                rooms_cost += j + 1\n                if j > 0:\n                    for k in range(max(1, i - j), min(num_of_rooms, i + j)):\n                        rooms_cost += k\n        if not is_router_avail:\n            rooms_cost += i + 1\n\n    return str(rooms_cost)",
        "test": "assert solution('11110') == 9",
        "num_ids": 3009,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    count_a = a.count(a[0])\n    count_b = b.count(b[0])\n    count_equal = min(count_a, count_b)\n    for i in range(count_equal):\n        a = a.replace(a[0], b[0], 1)\n        b = b.replace(b[0], a[0], 1)\n    if a == b:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('azzel') == 'Yes'",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"1 10\") == \"10\"",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Define variables for D, G, and base score\n    D, G = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    baseScore = 0\n    \n    # Create a dictionary for storing p_i and c_i values\n    probDict = {}\n\n    # Add values to the dictionary\n    for i in range(1, D+1):\n        probDict[i] = [int(x) for x in stdin.split(\"\\n\")[i].split()]\n    \n    # Iterate through the dictionary values\n    for i in range(1, D+1):\n        # Create variables for base score, perfect bonus, and total score\n        baseScore = baseScore + probDict[i][0]\n        perfectBonus = probDict[i][1]\n        totalScore = baseScore\n        \n        # If the base score is equal to G\n        if baseScore == G:\n            # We return the minimum number of problems to solve\n            return str(i)\n        # If the base score is larger than G\n        if baseScore > G:\n            # If the perfect bonus is equal to G\n            if perfectBonus == G:\n                # We return the minimum number of problems to solve\n                return str(i)\n            # If the perfect bonus is larger than G\n            elif perfectBonus > G:\n                # We return the minimum number of problems to solve\n                return str(i)\n            # If the perfect bonus is smaller than G\n            else:\n                # We return the minimum number of problems to solve\n                return str(i+1)\n\nprint(solution(stdin))\n",
        "test": "assert solution('2 700\\n3 500\\n5 800') == 3",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"3 3 4 2 2 3 2 2 4\") == 3",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    \n    res = 0\n    for i in range(n):\n        while i + k - 1 >= n or a[i] < a[i + k - 1]:\n            break\n        for j in range(i + k, n):\n            if j + k - 1 >= n:\n                break\n            res += a[i]\n        i += k\n    return res if res > 0 else -1\n    \n    \n",
        "test": "assert solution('6 1 5\\n10 30 30 70 10 10\\n') == '-1'",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5\") == \"No\"",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    coords = [tuple(map(int, line.split())) for line in stdin]\n    center_coord = reduce(\n        lambda x, y: (x[0] + y[0], x[1] + y[1]), coords\n    ) / N\n    max_alt = 0\n    for x, y in coords:\n        alt = max(max_alt, abs(x - center_coord[0]), abs(y - center_coord[1]))\n        max_alt = max(max_alt, alt)\n    print(*center_coord, max_alt)\n",
        "test": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]",
        "test": "assert solution('redcoder') == '1'",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(0, len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] * nums[j] == N:\n                return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution('10') == 'Yes'",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    assert len(lines) == 2\n    N = int(lines[0])\n    assert 1 <= N <= 100\n    # get input and create list of lists with sticks\n    input_list = lines[1].split()\n    assert len(input_list) == N\n    sticks = [int(x) for x in input_list]\n    assert all(1 <= x <= 10**9 for x in sticks)\n    # create matrix with N^2 elements\n    matrix = [[0 for x in range(N)] for y in range(N)]\n    # create list of triples\n    triples = []\n    # sum elements in first column\n    for i in range(1, N):\n        matrix[i][0] = matrix[i-1][0] + sticks[i]\n    # create list of triples\n    for i in range(1, N):\n        for j in range(1, N):\n            if sticks[i]!= sticks[j]:\n                #if sticks[i] < sticks[j]:\n                #    matrix[i][j] = matrix[i-1][j] + sticks[i]\n                #else:\n                #    matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) + sticks[i]\n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) + sticks[i]\n                triples.append([i, j, sticks[i] + sticks[j] + matrix[i-1][j-1]])\n                #triples.append([i, j, sticks[i] + sticks[j] + max(matrix[i-1][j], matrix[i][j-1])])\n    # sort triples by sum of sticks (ascending)\n    triples.sort(key=lambda tup: tup[2])\n    # iterate through triples and check if triangle is formed\n    count = 0\n    for triple in triples:\n        if triple[2] < sum(sticks):\n            break\n        elif matrix[triple[0]-1][triple[1]-1] == triple[2]:\n            count += 1\n    return str(count)\n",
        "test": "assert solution('20 20 2') == ''",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == a * b:\n                return str(i * j)\n    return '-1'\n",
        "test": "assert solution(\"2 5\\n\") == \"10\"",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get input from user\n    # N = input()\n    # M = input()\n    # X = input()\n    #\n    # # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n    #\n    # if N > 10 ** 5 or M > 10 ** 5 or X.count(' ') > 1:\n    #     print(\"Invalid input\")\n    #     return\n    #\n    # # Split inputs into values and coordinates\n    # # value = list(map(int, input().split()))\n    # # value = [value[0], value[1]]\n    # # coordinate = list(map(int, input().split()))\n    # # coordinate = [coordinate[0], coordinate[1]]\n    # value, coordinate = stdin.split('\\n')\n    #\n    # value = list(map(int, value.split()))\n    # coordinate = list(map(int, coordinate.split()))\n    #\n    # if len(value)!= 2:\n    #     print(\"Invalid input\")\n    #     return\n    # if len(coordinate)!= 2:\n    #     print(\"Invalid input\")\n    #     return\n    #\n    # # Check for validity of coordinate\n    # # if not (0 <= value[0] <= 10 ** 5 and 0 <= value[1] <= 10 ** 5):\n    # #     print(\"Invalid input\")\n    # #     return\n    # # if not (0 <= coordinate[0] <= 10 ** 5 and 0 <= coordinate[1] <= 10 ** 5):\n    # #     print(\"Invalid input\")\n    # #     return\n    #\n    # # Check for validity of value\n    # # if not isinstance(value[0], int) or not isinstance(value[1], int):\n    # #     print(\"Invalid input\")\n    # #     return\n    # # if not (0 <= value[0] <= 10 ** 5 and 0 <= value[1] <= 10 ** 5):\n    # #     print(\"Invalid input\")\n    # #     return\n    #\n    # # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    # if not isinstance(value[0], int) or not isinstance(value[1], int):\n    #     print(\"Invalid input\")\n    #     return\n    # if not isinstance(coordinate[0], int) or not isinstance(coordinate[1], int):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    value = [10, 12, 1, 2, 14]\n    coordinate = [10, 13]\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split",
        "test": "assert solution(\"4 6\\n1 5 3 2 4\") == \"3\"",
        "num_ids": 2353,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    roads = []\n    for i in range(m):\n        roads.append([int(x) for x in stdin.split()])\n    options = []\n    for i in range(1, n+1):\n        cities[0] = i\n        options.append(find_options(roads, cities))\n    return '\\n'.join(options)\n\ndef",
        "test": "assert solution('''4 6 3",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    arr = list(map(int, lines[1].split(' ')))\n    arr.sort()\n    if arr[0] == arr[-1]:\n        return 'YES'\n    elif (arr[0] - 1) * 2 == arr[-1] or (arr[-1] + 1) * 2 == arr[0]:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "test": "assert solution(\"2\\n10 10\") == \"YES\"",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1000 6\\n-100 -200 -300 125 77 -4\\n\")\n    9\n    >>> solution(\"1000000000000 5\\n-1 0 0 0 0\\n\")\n    4999999999996\n    >>> solution(\"10 4\\n-3 -6 5 4\\n\")\n    -1\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    # your code here\n    return stdin\n",
        "test": "assert solution(",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    cnt = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            cnt += 1\n            s = s[i:]\n            break\n    for i in range(len(t)):\n        if t[i]!= s[i]:\n            cnt += 1\n            t = t[i:]\n            break\n    return cnt\n    \n    \ndef",
        "test": "assert solution(\"b\") == \"ab\"",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Sets D as small as possible to visit all the cities.\n    \"\"\"\n    count = stdin.split('\\n')\n    N = int(count[0].split()[0])\n    X = int(count[0].split()[1])\n    city_list = list(map(int, count[1].split()))\n    # using a set to make sure all cities are visited at least once\n    visited_set = set()\n    # city_set = set(city_list)\n    # keep track of the distance travelled\n    distance = 0\n    # loop until all cities are visited\n    while len(visited_set)!= N:\n        # for each city in the list\n        for city in city_list:\n            # if the city is not in the visited set\n            if city not in visited_set:\n                # travel to the city if we can, and add it to the visited set\n                if city >= X:\n                    distance += X - city\n                    visited_set.add(city)\n                    break\n                else:\n                    distance += X - city\n                    visited_set.add(city)\n        # if all cities have been visited, we're done\n        if len(visited_set) == N:\n            break\n        # otherwise, add a distance of 1 to the next city\n        else:\n            distance += 1\n            # use the next city from the list\n            city = city_list[city_list.index(city_list[0]) + 1]\n            city_list.pop(0)\n            city_list.append(city)\n    return distance\n",
        "test": "assert solution(\"3 3\\n1 7 11\") == \"2\"",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"akasaka\")\n    'Yes'\n    \"\"\"\n    s = stdin[0]\n    \n    # can only check odd-length palindromes\n    if len(s) % 2 == 0:\n        return 'No'\n\n    for i in range(int((len(s) - 1) / 2)):\n        if s[i]!= s[len(s) - 1 - i]:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert solution(\"a\") == \"Yes\"",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 4127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''returns the product of two numbers as an integer'''\n    a, b = map(float, stdin.split())\n    # multiply the two numbers, then truncate the fractional part\n    return int(a * b * 10) // 10\n\n\ndef",
        "test": "assert solution(\"198 1.10\") == \"217\"",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547') == '3\\n0\\n0\\n1\\n999999999\\n381621773'",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split(\" \")]\n    roads = defaultdict(set)\n    for i in range(m):\n        u, v = [int(x) for x in stdin.split(\" \")]\n        roads[u].add(v)\n        roads[v].add(u)\n    print(graph_traversal(s, roads))\n\n\ndef",
        "test": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    boxers = [int(x) for x in stdin.split('\\n')]\n    boxers.sort(reverse=True)\n    return len([x for x in boxers if x > 0])\n\nprint(solution(input()))\n",
        "test": "assert solution('1 1 1 4 4 4') == '5'",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the ID numbers for all the cities.\n\n    >>> solution('2 3\\n1 32\\n2 63\\n1 12\\n')\n    '000001000002\\n000002000001\\n000001000001'\n    '''\n    n, m = tuple(map(int, stdin.readline().split()))\n    numbers = set()\n    for _ in range(n):\n        city, year = stdin.readline().split()\n        city = city.zfill(6)\n        year = year.zfill(6)\n        numbers.add((city, year))\n    numbers = sorted(list(numbers), key=lambda x: x[0] + x[1])\n    for city, year in numbers:\n        print(year + city)\n    return ''\n",
        "test": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n",
        "test": "assert solution(\"4\\n2 10 8 40\") == \"2\"",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return \"false\"\n",
        "test": "assert solution(\"?(_____-___):-_____<___,____<_____.\\n?\") == \"false\"",
        "num_ids": 1828,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3 3 11\") == 3",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nimport math\n\ndef",
        "test": "assert solution(s) == t",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n",
        "test": "assert solution(\"5 14\") == \"19\"",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\ndef",
        "test": "assert solution('+>-') == '<[<+><-]<'",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin.split())",
        "test": "assert solution('') == ''",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = set(i for i in range(1, N + 1) if '7' in str(i) or '5' in str(i) or '3' in str(i) and '7' not in str(i) and '5' not in str(i) and '3' not in str(i))\n    return str(len(a))\n",
        "test": "assert solution('1') == '0'",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]",
        "test": "assert solution('1111') == '4'",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    even_num = 0\n    for x in a:\n        if x % 2 == 0:\n            even_num += 1\n    if even_num == 0:\n        return \"APPROVED\"\n    if even_num % 2 == 0:\n        if any(x % 3 == 0 for x in a):\n            return \"APPROVED\"\n        if any(x % 5 == 0 for x in a):\n            return \"APPROVED\"\n    else:\n        if any(x % 3 == 0 for x in a):\n            return \"APPROVED\"\n        if any(x % 5 == 0 for x in a):\n            return \"APPROVED\"\n    return \"DENIED\"",
        "test": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 4142,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    right = set(['D', 'R'])\n    left = set(['U', 'L'])\n    sequence = stdin[0]\n    for s in sequence:\n        if s in right:\n            if s in left:\n                return 'No'\n        if s in left:\n            if s in right:\n                return 'No'\n    return 'Yes'",
        "test": "assert solution(\"RUDLUDR\") == \"Yes\"",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"3\\n2\\n4\\n3\\n5\") == \"7\"",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    x = int(stdin)\n    if x < 2:\n        return str(2)\n    elif x == 2:\n        return str(2)\n    prime = [2]\n    i = 3\n    while i < x + 1:\n        if isPrime(i, prime):\n            prime.append(i)\n        i += 2\n    return str(prime[len(prime) - 1])\n\n\ndef",
        "test": "assert solution(str(20)) == \"23\"",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.split('\\n')\n    n = int(data[0])\n    data = data[1:]\n    count = 0\n    for i in range(0, len(data)-2, 2):\n        if data[i] == data[i+2]:\n            count += 1\n    return str(count)\n",
        "test": "assert solution(\"4\\n3 1 3 4\") == \"0\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"5 100 90 80\\\\n\"\n   ...     \"98\\\\n\"\n   ...     \"40\\\\n\"\n   ...     \"30\\\\n\"\n   ...     \"21\\\\n\"\n   ...     \"80\\\\n\"\n   ... )\n    '23'\n    \"\"\"\n    _, _, _, _, _, a, b, c = stdin.split(\"\\\\n\")\n    a, b, c = [int(n) for n in [a, b, c]]\n    print(\n        sum(\n            [\n                10,\n                min(a, b) // 10,\n                min(a, c) // 10,\n                min(b, c) // 10,\n                min(a, b, c) // 10,\n            ]\n        )\n    )\n",
        "test": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\\n\") == \"23\"",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    B = stdin[1]\n    C = stdin[2]\n    D = stdin[3]\n    E = stdin[4]\n    F = stdin[5]\n    G = stdin[6]\n    H = stdin[7]\n    I = stdin[8]\n    J = stdin[9]\n    K = stdin[10]\n    L = stdin[11]\n    M = stdin[12]\n    N = stdin[13]\n    O = stdin[14]\n    P = stdin[15]\n    Q = stdin[16]\n    R = stdin[17]\n    S = stdin[18]\n    T = stdin[19]\n    U = stdin[20]\n    V = stdin[21]\n    W = stdin[22]\n    X = stdin[23]\n    Y = stdin[24]\n    Z = stdin[25]\n    A = ord(A)\n    B = ord(B)\n    C = ord(C)\n    D = ord(D)\n    E = ord(E)\n    F = ord(F)\n    G = ord(G)\n    H = ord(H)\n    I = ord(I)\n    J = ord(J)\n    K = ord(K)\n    L = ord(L)\n    M = ord(M)\n    N = ord(N)\n    O = ord(O)\n    P = ord(P)\n    Q = ord(Q)\n    R = ord(R)\n    S = ord(S)\n    T = ord(T)\n    U = ord(U)\n    V = ord(V)\n    W = ord(W)\n    X = ord(X)\n    Y = ord(Y)\n    Z = ord(Z)\n    print(chr(Z),chr(X),chr(Y),chr(A),chr(B),chr(C),chr(D),chr(E),chr(F),chr(G),chr(H),chr(I),chr(J),chr(K),chr(L),chr(M),chr(N),chr(O),chr(P),chr(Q),chr(R),chr(S),chr(T),chr(U),chr(V),chr(W),chr(X),chr(Y),chr(Z))\n    return(chr(A))\n",
        "test": "assert solution(\"ABCXYZ\") == \"CDEZAB\"",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute solution function.\"\"\"\n    return []\n",
        "test": "assert solution('3 5 2 3 2 4\\n') == '3 4 2'",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    b = [0] * n\n    return count_diff_permutations(a, b) % int(1e9 + 7)\n\ndef",
        "test": "assert solution('5\\n1 2 1 2 3') == '2'",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the minimum number of elements needed to remove to make a sequence good.\n\n    >>> solution('4 7 1 5 4 9\\n')\n    1\n    >>> solution('1 2 3 4 5\\n')\n    2\n    >>> solution('16\\n')\n    1\n    >>> solution('1 1 1 1023\\n')\n    0\n    \"\"\"\n    data = stdin.splitlines()\n    sequence = list(map(int, data[1].split()))\n    # print(sequence)\n    num_deletes = 0\n    for i in range(len(sequence)):\n        for j in range(i + 1, len(sequence)):\n            if not sequence[j] % sequence[i] and not sequence[i] % sequence[j]:\n                num_deletes += 1\n                print(sequence)\n    return num_deletes\n",
        "test": "assert solution(\"4\\n1 1 1 1023\") == \"0\"",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef",
        "test": "assert solution
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # -----Input-----\n    lines = stdin.split('\\n')\n    # -----Computation-----\n    N, M = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n    ID_cards = [int(num) for num in lines[1:]]\n    \n    i = 0\n    while i < N - 1:\n        if ID_cards[i] + 1!= ID_cards[i + 1]:\n            break\n        i += 1\n    if i < N - 1:\n        i = 0\n        while i < N - 1:\n            if ID_cards[i]!= ID_cards[i + 1]:\n                break\n            i += 1\n    # -----Output-----\n    print(i)\n    return ''",
        "test": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"The minimum number of watering operations required is \" + str(watering_operations(stdin))\n",
        "test": "assert solution(\"4\\n1 2 2 1\") == \"2\"",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function is solution for this problem\"\"\"\n    pass\n",
        "test": "assert solution(\"1 10\\n-1 1\") == \"0\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    x = [abs(i - j) for i, j in zip(x, x[1:])]\n    m = max(x)\n    for i in range(n):\n        if 2 ** x.index(m) == m:\n            print(m, x.index(m) + 1)\n            break\n    return ''\n",
        "test": "assert solution('5 -1 2 5 8 11') == '1'",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Aoki and Takahashi have A and B cookies, respectively.\n\n    They will do the following K actions:\n        - If they have cookies, they will eat one cookie.\n        - Otherwise, if Aoki has cookies, he will eat one.\n        - Otherwise, if Aoki and Takahashi have no cookies, they will do nothing.\n\n    In the end, how many cookies will Aoki and Takahashi have, respectively?\n    '''\n\n    return '\\n'.join([str(int(stdin.split()[0]) - int(stdin.split()[1])),\n                      str(int(stdin.split()[2]) - int(stdin.split()[0]))])\n",
        "test": "assert solution('2 3 3') == '0 2'",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 0\n    while True:\n        time += 1\n        interest = (1 + 1/100)**time - 1\n        if interest >= X:\n            break\n    return str(time)\n",
        "test": "assert solution(\"110\") == \"1\"",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(sum(sum(math.gcd(a, b, c) for a in range(1, int(stdin) + 1)) for b in range(1, int(stdin) + 1)) for c in range(1, int(stdin) + 1)))\n",
        "test": "assert solution(\"2\") == \"9\"",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3 4 6\")\n    10\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max([(x % y) for x in range(n) for y in a]))\n",
        "test": "assert solution(\"3 4 6\") == \"10\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    rolls = [list(map(int, line.split())) for line in lines[1:]]\n    \n    for i in range(3, len(rolls)):\n        if rolls[i-2][0] == rolls[i-2][1] and rolls[i-1][0] == rolls[i-1][1] and rolls[i][0] == rolls[i][1]:\n            return \"Yes\"\n        \n    return \"No\"",
        "test": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    r = int(stdin)\n    # compute the solution\n    sol = r ** 2\n    # return the solution\n    return sol\n\ndef",
        "test": "assert solution(2) == 4",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 4165,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Yes\"\n  ",
        "test": "assert solution('4\\n3 8 5 1') == 'Yes'",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef",
        "test": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if (i % k == 0) and (j % k == 0):\n                count += 1\n            elif (i % k == 0) or (j % k == 0):\n                count += 1\n            elif (i + j) % k == 0:\n                count += 1\n    print(count)\n    return str(count)\n\n----Test Case----\nsolution(\"3 2\")\nsolution(\"3 3\")\n\n----Test Case----\nsolution(\"13 2\")\nsolution(\"7 7\")\n\n----Test Case----\nsolution(\"10 15\")\n",
        "test": "assert solution(3,2) == 9",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin))[2:])\n",
        "test": "assert solution('0') == '0'",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    A, B = [], []\n    for _ in range(N):\n        a, b = map(int, stdin.split(' '))\n        A.append(a)\n        B.append(b)\n    return max(A) * N + sum(min(b, M // a) * a for a, b in zip(A, B))\n\n\"\"\"\n\n\n\ndef",
        "test": "assert solution(stdin) == expected",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of times you can move.\n\n    >>> solution('5\\n10 4 8 7 3')\n    2\n    \"\"\"\n   ...",
        "test": "assert solution('5\\n10 4 8 7 3') == 2",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    if k == n:\n        return 0\n\n    n_sorted_a = sorted(a)\n    \n    if n_sorted_a[-1] == n_sorted_a[-2]:\n        return 1\n    else:\n        return max(n - n_sorted_a[-1], n_sorted_a[-2] - 1)\n",
        "test": "assert solution('5 3\\n1 2 3 4 5\\n') == '2'",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # \uc5ec\uae30\uc5d0 \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc8fc\uc138\uc694.\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    a.sort()\n\n    print(k // (k - 1))\n    ",
        "test": "assert solution('1 2 2 4 2 3') == '3'",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, q = map(int, stdin.split('\\n')[0].split())\n    s = set()\n    ans = []\n    for _ in range(q):\n        n_, a_, b_ = map(int, stdin.split('\\n')[n_].split())\n        ans.append(a_ * n_ + min(a_ * (n_ - 1), b_ * n_))\n    return ans\n",
        "test": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the number of times the ball will make a bounce where the coordinate is at most X.\n    \"\"\"\n    # Get inputs.\n    input_args = stdin.split()\n    n, x = int(input_args[0]), int(input_args[1])\n    d_lst = list(map(int, input_args[2:]))\n\n    # Initialize variables.\n    count, total = 0, 0\n    for i in range(n + 1):\n        total += d_lst[i - 1]\n        if total <= x:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"1 2 3\") == \"0\"",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if \"hoge\" in stdin else \"No\"",
        "test": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.readlines())\n\n    return str(int(max(A, B) * 2))\n\nsolution(stdin)\n",
        "test": "assert solution(\"2 3\\n\") == 6",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"s\", \"x\")\n",
        "test": "assert solution('sardine') == 'xxxxxxx'",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 4178,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem:\n    Find if it's possible to transform the array so that it meets the requirements:\n    height of the ith square is i\n    \"\"\"\n    return (\n        \"Yes\" if (stdin := stdin.split(\"\\n\"))[0].split(\" \")[0] == \"No\" else \"No\"\n    )\n",
        "test": "assert solution(\"5\\n1 1 1 1 3\\n\") == \"No\"",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split('\\n')[1].split()]\n    a = [int(i) for i in stdin.split('\\n')[2].split()]\n\n    print(a, b, c)\n    if c > 0:\n        print(0)\n        return\n    sum = 0\n    for i in range(m):\n        for j in range(n):\n            sum += a[j] * b[i]\n        if sum > 0:\n            print(1)\n            return\n        sum = 0\n    print(0)\n    return\n",
        "test": "assert solution(\"1 2 3\\n3 2 1\\n1 2 2\") == 1",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 4180,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    change = int(stdin)\n    change_count = 0\n    while change > 0:\n        if change >= 1000:\n            change -= 1000\n            change_count += 1\n        elif change >= 500:\n            change -= 500\n            change_count += 1\n        elif change >= 100:\n            change -= 100\n            change_count += 1\n        elif change >= 50:\n            change -= 50\n            change_count += 1\n        elif change >= 10:\n            change -= 10\n            change_count += 1\n        elif change >= 5:\n            change -= 5\n            change_count += 1\n        elif change >= 1:\n            change -= 1\n            change_count += 1\n\n    return change_count\n",
        "test": "assert solution(\"1000\") == 1",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution with BFS and greedy approach'''\n    # get input\n    n = int(stdin.readline())\n    attacks = [int(x) for x in stdin.readline().split()]\n    powers = [int(x) for x in stdin.readline().split()]\n    # BFS\n    # each monster has two possible states: being attacked or not being attacked by the hero\n    queue = [(0, 0)]\n    visited = set()\n    max_monsters = 0\n    while len(queue) > 0:\n        monsters, attacked = queue.pop()\n        if monsters + attacked > max_monsters:\n            max_monsters = monsters + attacked\n        if (monsters, attacked) in visited:\n            continue\n        visited.add((monsters, attacked))\n        for i, power in enumerate(powers):\n            if attacked == 1:\n                queue.append((monsters, attacked + power - 1))\n            else:\n                queue.append((monsters + attacks[i], attacked - 1))\n    return max_monsters\n",
        "test": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, x, y = map(int, stdin.split('\\n')[0].split())\n    pairs = map(int, stdin.split('\\n')[1].split())\n    q = map(int, stdin.split('\\n')[2].split())\n    if max(pairs) + min(q) <= y:\n        return 'War'\n    else:\n        return 'No War'\n",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3\\n6\\n9\") == \"12\"",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    '0'\n    >>> solution('''5\n   ... 2 3 4 5\n   ... ''')\n    '4'\n    >>> solution('''8\n   ... 1 2 3 4 5 6 7 8\n   ... ''')\n    '6'\n    \"\"\"\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    s = sum(weights)\n    min_diff = abs(s - s / 2)\n\n    for i in range(1, n):\n        t = sum(weights[:i])\n        d = abs(s - 2 * t)\n        if d < min_diff:\n            min_diff = d\n\n    return str(min_diff)\n",
        "test": "assert solution('3\\n1 2 3') == '0'",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    p = {}\n    for i in range(n):\n        p[i] = [0, False]\n    m = n // 2 + 1\n    i = 0\n    t = set()\n    while i < n:\n        if i < n // 2 and a[i] == a[n // 2 + i]:\n            t.add(i)\n            t.add(n // 2 + i)\n        elif i >= n // 2 and a[i] == a[n // 2 - i]:\n            t.add(i)\n            t.add(n // 2 - i)\n        i += 1\n    res = 0\n    while len(t) > 0:\n        for i in t:\n            p[i][0] += 1\n            res += p[i][0]\n            p[i][1] = True\n        for i in t:\n            if i in p and p[i][1]:\n                p[i][1] = False\n        t = set()\n    return str(res)\n",
        "test": "assert solution('2\\n1 100') == '99'",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    max_value = 0\n    for i in stdin:\n        if int(i) > max_value:\n            max_value = int(i)\n    return max_value\n",
        "test": "assert solution('7') == '0'",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin.readline().strip())\n    cheese = {}\n    for _ in range(total):\n        cheese[stdin.readline().strip()] = [True, True]\n    for _ in range(total):\n        cheese[stdin.readline().strip()][0] = False\n    for _ in range(total):\n        cheese[stdin.readline().strip()][1] = False\n    output = 0\n    for c in cheese:\n        if not (cheese[c][0] or cheese[c][1]):\n            output += 1\n    return output",
        "test": "assert solution(\"\") == \"0\"",
        "num_ids": 2538,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n",
        "test": "assert solution(\"110011001110111110\") == \"0\"",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    # if D <= S * T:\n    #     return \"Yes\"\n    # return \"No\"\n    return \"Yes\" if D <= S * T else \"No\"\n",
        "test": "assert solution('1000 15 80') == 'Yes'",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # \ubb38\uc790\uc5f4\uc744 \uc774\uc911 \ub9ac\uc2a4\ud2b8\ub85c \uc785\ub825 \ubc1b\uc74c\n    # \ubb38\uc790\uc5f4\ub85c \uc778\ub371\uc2a4\ub97c \uc0ac\uc6a9\ud574\uc11c \uac01 \ub9ac\uc2a4\ud2b8\uc5d0 \uc785\ub825\uac12\uc744 \ub123\uc74c\n    a = [[0 for _ in range(3)] for _ in range(3)]\n    for i, j in zip(stdin.split(), stdin.split()):\n        a[int(i) - 1][int(j) - 1] = int(i) * 100 + int(j)\n    # print(a)\n    n = int(stdin.split()[-1])\n\n    bingo = [0 for _ in range(n)]\n    for k in range(n):\n        bingo[k] = int(stdin.split()[k])\n    # print(bingo)\n\n    # \ubc14\uae65\ucabd \ubc18\ubcf5\ubb38\uc740 \ubaa8\ub4e0 \uc694\uc18c\uc5d0 \ub300\ud574 \ubc18\ubcf5\n    # \ubc14\uae65\ucabd \ubc18\ubcf5\ubb38\uc758 \uae30\uc900\uc740 a\ub9ac\uc2a4\ud2b8 \uc548\uc758 \uc694\uc18c \ud558\ub098\uc529\n    # \uc548\ucabd \ubc18\ubcf5\ubb38\uc740 \uae30\uc900\uc740 bingo\ub9ac\uc2a4\ud2b8 \uc548\uc758 \uc694\uc18c \ud558\ub098\uc529\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in bingo:\n                # \uc694\uc18c\uac00 bingo\uc5d0 \uc788\ub2e4\uba74 \uc548\ucabd \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\uc778 k\ub97c \ud655\uc778\ud574\uc11c \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub3c4\ub85d \ud568\n                for k in range(n):\n                    if a[i][j] == bingo[k]:\n                        bingo[k] = 0\n                        break\n                # \ubc14\uae65 \ubc18\ubcf5\ubb38\uc774 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub3c4\ub85d \uc548\ucabd \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\uc544\uac10\n                break\n\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in bingo:\n                # \uc694\uc18c\uac00 bingo\uc5d0 \uc788\ub2e4\uba74 \uc548\ucabd \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\uc778 k\ub97c \ud655\uc778\ud574\uc11c \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub3c4\ub85d \ud568\n                for k in range(n):\n                    if a[i][j] == bingo[k]:\n                        bingo[k] = 0\n                        break\n                # \ubc14\uae65 \ubc18\ubcf5\ubb38\uc774 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub3c4\ub85d \uc548\ucabd \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\uc544\uac10\n                break\n\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in bingo:\n                # \uc694\uc18c\uac00 bingo\uc5d0 \uc788\ub2e4\uba74 \uc548\ucabd \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\uc778 k\ub97c \ud655\uc778\ud574\uc11c \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub3c4\ub85d \ud568\n                for k in range(n):\n                    if a[i][j] == bingo[k]:\n                        bingo[k] = 0\n                        break\n                # \ubc14\uae65 \ubc18\ubcf5\ubb38\uc774 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub3c4\ub85d \uc548\ucabd \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\uc544\uac10\n                break\n\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in bingo:\n                # \uc694\uc18c\uac00 bingo\uc5d0 \uc788\ub2e4\uba74 \uc548\ucabd \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\uc778 k\ub97c \ud655\uc778\ud574\uc11c \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub3c4\ub85d \ud568\n                for k in range(n):\n                    if a[i][j] == bingo[k]:\n                        bingo[k] = 0\n                        break\n                # \ubc14\uae65 \ubc18\ubcf5\ubb38\uc774 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub3c4\ub85d \uc548\ucabd \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\uc544\uac10\n                break\n\n    if sum(bingo) == 3 * n:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    i, j = 0, 0\n    while j < m:\n        if i == n or j + a[j] > i:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return i\n",
        "test": "assert solution(",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split(' '))\n    if D < 0 or D > 2:\n        return 'N/A'\n    if N < 1 or N > 100:\n        return 'N/A'\n    if D == 0:\n        return 1\n    elif D == 1:\n        if N > 100:\n            return 'N/A'\n        else:\n            return N\n    else:\n        div = 100 / D\n        # we need at least D + 1 to get the number of required divisions\n        if N < div + 1:\n            return str(N * div)\n        else:\n            return str(div * (N - div))",
        "test": "assert solution('0 5') == '5'",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(next(stdin))\n    A = [int(x) for x in next(stdin).split(' ')]\n    \n    x = min(A)\n    while x > 1:\n        for i in range(N):\n            if A[i] % x:\n                A[i] = (A[i] // x + 1) * x\n        x = min(A)\n    \n    return str(max(A))\n\"\"\"\nfrom math import gcd\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1993,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    students = list(map(int, stdin.readline().rstrip().split(\" \")))\n    answer = []\n    for i in range(n):\n        student = students.pop(0)\n        answer.append(str(student))\n    print(\" \".join(answer))\n    return \"\"\n\ndef",
        "test": "assert solution(\"3\\n2 3 1\") == \"2 3 1\"",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split()]\n    dp = [0] * (10 ** 6 + 1)\n    for n in range(1, 10 ** 6 + 1):\n        for i in range(1, 10):\n            if a * n + b * len(str(n)) <= x:\n                dp[n] = max(dp[n], i * n + dp[n - i])\n    return dp[-1] if dp[-1]!= 0 else 0\n\na, b, x = map(int, input().split())\nprint(solution(f'{a} {b} {x}'))\n",
        "test": "assert solution('10 7 1000000000') == '0'",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    nums = [0 for _ in range(0, n)]\n    for i in range(0, n):\n        nums[i] = h[i]\n    nums.sort()\n    ans = 0\n    for i in range(0, n):\n        if nums[i] >= k:\n            ans += 1\n    return ans\n    pass\n",
        "test": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\\n5 4 2 1\")\n    'Yes'\n    >>> solution(\"5 1\\n1 2 1 2 1\")\n    'No'\n    >>> solution(\"1 1\\n1\")\n    'Yes'\n    \"\"\"\n    N, M = map(int, stdin.split(\" \"))\n    votes = sorted(map(int, stdin.split(\"\\n\")[1:]))\n    # For N items, we want to see a maximum of N / 4 votes\n    # if M popular items are selected, that means M must be less than N/4\n    # i.e. M <= min(4, N / 4)\n    M = min(M, int(N / 4))\n    return \"Yes\" if sum(votes[:M]) > sum(votes[N - M :]) else \"No\"\n",
        "test": "assert solution('6 2\\n5 4 2 1 5 3') == 'No'",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "test": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # for each line:\n    # a, b = map(int, stdin.readline().split())\n    a, b = map(int, stdin.readline().split())\n    # print(a, b)\n    return str(min(a * b % 2019, a * 2020 % 2019))\n",
        "test": "assert solution(\"2020 2040\") == \"2\"",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return \"AC\" if stdin[0] == \"A\" and stdin[2] == \"C\" and all(x.islower() for x in stdin[3:-1]) else \"WA\"\n",
        "test": "assert solution(\"Atcoder\") == \"WA\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    K = int(stdin[1])\n    string = ''\n    for i in range(K):\n        for j in range(len(S)):\n            if S[j] == '2':\n                S = S[:j] + '22' + S[j + 1:]\n            if S[j] == '3':\n                S = S[:j] + '33' + S[j + 1:]\n            if S[j] == '4':\n                S = S[:j] + '44' + S[j + 1:]\n            if S[j] == '5':\n                S = S[:j] + '55' + S[j + 1:]\n            if S[j] == '6':\n                S = S[:j] + '66' + S[j + 1:]\n            if S[j] == '7':\n                S = S[:j] + '77' + S[j + 1:]\n            if S[j] == '8':\n                S = S[:j] + '88' + S[j + 1:]\n            if S[j] == '9':\n                S = S[:j] + '99' + S[j + 1:]\n        if S[0] == '1':\n            S = '1' + S[1:]\n        string += S[len(S) - K]\n    return string\n",
        "test": "assert solution(\"1111\") == \"1\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''",
        "test": "assert solution(\"2 4 3 1 5\") == \"YES\"",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum number of numbers divisible by $3$\n    that Polycarp can get by making vertical cuts in the given number s\n    \"\"\"\n    s = stdin.strip()\n    max_cnt = 0\n    cnt = 0\n    for i in range(1, len(s)):\n        if s[i-1]!= '0':\n            cnt += 1\n            max_cnt = max(cnt, max_cnt)\n        if s[i]!= '0':\n            cnt = 0\n    return max_cnt\n",
        "test": "assert solution(\"201920181\") == \"4\"",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n",
        "test": "assert solution(\"3\\n1 2 -1\\n-6 -12 6\") == '3'",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    lst = [i for i in stdin.split('\\n')[1].split(' ')]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] == '?' or lst[j] == '?':\n                if lst[i]!= lst[j]:\n                    res += 1\n            elif lst[i]!= lst[j]:\n                res += 1\n    print(res)\n    print(list(range(n)))\n    print(list(range(n)))\n",
        "test": "assert solution('hellocode') == '10'",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem 'Disjoint set of blocks problem'.\n\n    Parameters\n    ----------\n    stdin : str\n        Input of the problem.\n\n    Returns\n    -------\n    str\n        String with the solution.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    values = stdin.split('\\n')[1].split()\n    # values = list(map(int, values))\n    # graph = {i: {j: None for j in range(n) if i!= j} for i in range(n)}\n    # graph = {i: {j: None for j in range(n) if i!= j} for i in range(n)}\n    graph = {}\n    for i in range(n):\n        graph[i] = set()\n        for j in range(n):\n            if i!= j and values[j] == values[i]:\n                # graph[i][j] = j\n                graph[i].add(j)\n    # print(graph)\n    for i in range(n):\n        for j in range(i, n):\n            if graph[i].intersection(graph[j]):\n                graph[i].union(graph[j])\n    ans = {i: len(graph[i]) for i in range(n)}\n    # print(ans)\n    ans = max(ans.values())\n    print(ans)\n    # ans = max(ans, max(ans.values()))\n    for i, j in ans.items():\n        if j == ans:\n            print(i, j)\n    return ''\n    # return graph",
        "test": "assert solution(    \"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n\n    counter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(a[i], a[j]) == k:\n                counter += 1\n    return str(counter)\n",
        "test": "assert solution(\"5 2\\n3 7 19 3 3\") == \"0\"",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n-1):\n        result += max(a[i], a[i+1])\n    return result\n    \n",
        "test": "assert solution('5\\n2 5') == '9'",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # input in the format described above\n    # N M Q\n    # a_1 b_1 c_1 d_1\n    # :\n    # a_Q b_Q c_Q d_Q\n\n    n, m, q = (int(x) for x in stdin.split(\"\\n\")[0].split(\" \"))\n    a = [[int(x) for x in input().split(\" \")] for y in range(q)]\n\n    max_score = 0\n    for i in range(q):\n        max_score = max(max_score, sum(a[i][2:]))\n\n    return max_score\n\n\ndef",
        "test": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum absolute difference of two elements (with different indices) in A.\"\"\"\n    pass\n",
        "test": "assert solution('4\\n1 4 6 3') == '5'",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 1\n    for i in range(1, n):\n        result += int(input()) ** 2\n    print(result ** (1 / n))\n    return \"\"\n",
        "test": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a - b)",
        "test": "assert solution('12 4') == '4'",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100:\n        return 1\n    for i in range(100, n + 1):\n        if str(i * 100).count('0') == 0:\n            return i\n    return n\n\"\"\"\n\n\ndef",
        "test": "assert solution('10000') == '3'",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    nums = []\n    for i in range(m):\n        k = int(stdin.readline())\n        nums.append(list(map(int, stdin.readline().split())))\n    nums.sort(key=lambda x: x[0])\n    result = 0\n    for i in range(1, m):\n        for j in range(i):\n            if nums[i][0] > nums[j][0] and nums[i][1] > nums[j][1]:\n                result += 1\n                break\n    print(result)\n",
        "test": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == '1'",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # \u56e0\u70ba\u6211\u5011\u53ea\u8981\u77e5\u9053\u6578\u5b57A\u4e00\u500b\u500b\u51fa\u73fe\u57281~N\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u5148\u56fa\u5b9a\u6578\u5b57N\uff0c\u518d\u56fa\u5b9a\u6578\u5b57A\u7684\u4f4d\u7f6e\uff0c\u6c42\u51fa\u7e3d\u5171\u6709\u5e7e\u7a2e\u7d44\u5408\n    # \u53ef\u4ee5\u5148\u5f97\u5230\u524dn\u500b\u6578\u5b57\u7684\u7d44\u5408\u6578\u91cf\n    # \u6c42\u5f97\u7e3d\u7d44\u5408\u6578\u91cf\u6642\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u53ea\u7528\u6578\u5b57A\u7684\u4f4d\u7f6e\u8b8a\u5316\uff0c\u5206\u5225\u53d6\u51fa\u8d77\u59cb\u4f4d\u7f6e\u5230\u7d50\u675f\u4f4d\u7f6e\u503c\u70ba1\u7684\u7d44\u5408\u6578\u91cf\n    # \u53d6\u51fa\u8d77\u59cb\u4f4d\u7f6e\u5230\u7d50\u675f\u4f4d\u7f6e\u503c\u70ba2\u7684\u7d44\u5408\u6578\u91cf\n    #...\n    # \u53d6\u51fa\u8d77\u59cb\u4f4d\u7f6e\u5230\u7d50\u675f\u4f4d\u7f6e\u503c\u70ban\u7684\u7d44\u5408\u6578\u91cf\n    # \u5047\u8a2d\u6211\u5011\u8981\u77e5\u9053\u7b2ci\u500b\u6578\u5b57A\u57281~n\u7684\u4f4d\u7f6e\uff0c\u5247\u5171\u6709n!\u7a2e\u7d44\u5408\n    # \u56e0\u70ba\u6211\u5011\u4e0d\u77e5\u9053\u7b2ci\u500b\u6578\u5b57A\u4f4d\u7f6e\u662f\u4e0d\u662f\u5947\u6578\uff0c\u56e0\u6b64\u5c31\u4e0d\u80fd\u518d\u7528\u7d44\u5408\u6578\u91cf\u7e3d\u548c\u4f86\u5224\u65b7\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u80fd\u7528\u7e3d\u6578\u91cf\u4f86\u5224\u65b7A\u7684\u6578\u5b57\u662f\u5426\u662f\u5947\u6578\n    # \u6211\u5011\u53ef\u4ee5\u5229\u7528\u8cbb\u6c0f\u6578\u5b78\u6982\u5ff5\uff0c\u89e3\u984c\u5982\u4e0b\n    n = int(stdin)\n    ans = 1\n    for i in range(1, n):\n        ans *= i\n    ans *= n\n    for i in range(2, n + 1):\n        ans //= i\n    odd = ans // 2 + 1\n    ans = 1\n    for i in range(1, n):\n        ans *= i\n    odd -= ans\n    print(odd / ans)\n    return\nsolution(input())\n",
        "test": "assert solution('100\\n') == '0.4992500'",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 4219,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # use standard input\n    return stdin",
        "test": "assert solution(\"nikoandsolstice\", 15) == \"nikoandsolc...\"",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 4221,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\" if stdin[-1]!='s' else stdin + \"es\"\n",
        "test": "assert solution('apple') == 'apples'",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    snacks = [int(stdin.readline()) for _ in range(k)]\n    snack = [0] * n\n    for snack_idx in range(k):\n        snack[snacks[snack_idx] - 1] = snack_idx\n    return sum(snack)\n\nprint(solution(stdin=input()))\n\n\"\"\"",
        "test": "assert solution('2\\n1 3\\n1\\n3') == '1'",
        "num_ids": 2304,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Hint 1\n    1. Split the input string into separate strings, representing individual slimes\n    2. For each slime, check if there are any adjacent slimes with the same color.\n       If so, merge those two slimes into a single slime with the color of one of them.\n    3. Repeat until all slimes have different colors.\n    4. Count the number of slimes that have different colors and return it.\n    \"\"\"",
        "test": "assert solution('aabbbbaaca') == 5",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    total = sum(a)\n    if total % 3 == 0:\n        return total // 3\n    else:\n        return -1\n    \n",
        "test": "assert solution('') == 0",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = [int(x) for x in stdin.split()]\n    total = A * B + C * (K - (A + B))\n    print(total)\n    return str(total)",
        "test": "assert solution(\"2 1 1 3\") == \"2\"",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    c = 0\n    t = 0\n    while x > c:\n        if (x + y) % 2 == 0:\n            c += 1\n        else:\n            t += 1\n            c += 1\n    while t > y:\n        if (x + y) % 2 == 0:\n            c += 1\n        else:\n            t -= 1\n            c += 1\n    if c == y:\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution('3 10\\n') == 'No'",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return path\n\"\"\"\n\n\ndef",
        "test": "assert solution('1 2\\n2 3\\n') == '0'",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...",
        "test": "assert solution(\"100 99\") == \"100\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('15') == 60",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the absolute difference between x and the nearest integer of x.\n\n    :param stdin: the string of numbers to be read.\n    :return: the absolute difference between x and the nearest integer of x.\n    \"\"\"\n    # Read in X and N\n    numbers = stdin.split()\n    x = int(numbers[0])\n    n = int(numbers[1])\n\n    # Read in N non-decreasing integers\n    p = [int(i) for i in stdin.split()]\n\n    # Find the distance between the closest number and X\n    #  (relative distance)\n    d = float('inf')\n    i = 0\n    while i < n:\n        d = min(d, abs(p[i] - x))\n        i += 1\n\n    # Find the nearest integer of X (absolute distance)\n    #  and return the absolute difference between X and the nearest integer.\n    return x if d == float('inf') else x + d",
        "test": "assert solution('10 5\\n4 7 10 6 5') == '8'",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(val) for val in stdin.split(' ')]\n    print(rows * cols)\n",
        "test": "assert solution('3 2\\n2 1') == '1'",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    seq = [int(i) for i in stdin.split()]\n    s = seq[:k]\n    if k == 0:\n        return \"1\"\n    s.sort()\n    x = s[k-1] + 1\n    if k == n:\n        return \"10\"\n    for i in seq[k:]:\n        if i <= x:\n            s.append(i)\n            s.sort()\n            if len(s) == k:\n                x = s[k-1] + 1\n            else:\n                x = s[k] + 1\n        else:\n            return str(x)\n    if x == 10 ** 9 + 1:\n        return \"-1\"\n    else:\n        return str(x)\n\n\n\n\nprint(solution(\"7 4 3 7 5 1 10 3 20\"))\n",
        "test": "assert solution(",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, stdin.split(' '))\n    #\n    # grid = [[c for c in stdin.split('\\n')[i]] for i in range(n)]\n    #\n    # def put_star(grid: List[List[str]], i: int, j: int, size: int) -> int:\n    #     # return\n    #     return len(\n    #         [\n    #             [i, j],\n    #             [i, j + size],\n    #             [i + size, j],\n    #             [i + size, j + size],\n    #             [i + size // 2, j + size // 2],\n    #             [i + size // 2, j + size // 2 + size],\n    #             [i + size // 2 + size, j + size // 2],\n    #             [i + size // 2 + size, j + size // 2 + size],\n    #         ]\n    #     )\n    #\n    # max_stars = n * m\n    #\n    # for i in range(n):\n    #     for j in range(m):\n    #         if grid[i][j] == '.':\n    #             max_stars -= 1\n    #         else:\n    #             max_stars += 1\n    #             grid[i][j] = put_star(grid, i, j, 1)\n    #\n    # if max_stars > 0:\n    #     return \"Impossible\"\n    # else:\n    #     return str(max_stars)\n\n    def find_max_stars(grid: List[List[str]]) -> int:\n        max_stars = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == '.':\n                    max_stars -= 1\n                else:\n                    max_stars += 1\n                    grid[i][j] = put_star(grid, i, j, 1)\n        return max_stars\n\n    def put_star(grid: List[List[str]], i: int, j: int, size: int) -> None:\n        assert grid[i][j] == '*'\n        grid[i][j] = size\n        for di, dj in [[1, 0], [-1, 0], [0, 1], [0, -1]]:\n            n_i = i + di\n            n_j = j + dj\n            if 0 <= n_i < len(grid) and 0 <= n_j < len(grid[n_i]) and grid[n_i][n_j] == '.':\n                put_star(grid, n_i, n_j, size + 1)\n\n    def put_in_stars(grid: List[List[str]]) -> None:\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == '*':\n                    put_star(grid, i, j, 1)\n\n    def stars_in_grid(grid: List[List[str]]) -> bool:\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == '*':\n                    return True\n        return False\n\n    def is_valid_grid(grid: List[List[str]]) -> bool:\n        for row in grid:\n            for char in row:\n                if char not in ['*', '.']:\n                    return False\n        return True\n\n    def find_star_indexes(grid: List[List[str]]) -> List[Tuple[int, int]]:\n        star_indexes = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == '*':\n                    star_indexes.append((i, j))\n        return star_indexes\n\n    def find_neighbours(grid: List[List[str]], index: Tuple[int, int]) -> List[Tuple[int, int]]:\n        i, j = index\n        neighbours = []\n        for di, dj in [[1, 0], [-1, 0], [0, 1], [0, -1]]:\n            n_i = i + di\n            n_j = j + dj\n            if 0 <= n_i < len(grid) and 0 <= n_j < len(grid[n_i]):\n                neighbours.append((n_i, n_j))\n        return neighbours\n\n    def remove_neighbours_and_self(grid: List[List[str]], neighbours: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        for index in neighbours:\n            if grid[index[0]][index[1]] == '*':\n                grid[index[0]][index[1]] = '.'\n        return neighbours\n\n    def find_in_stars_neighbours(grid: List[List[str]]) -> List[Tuple[int, int]]:\n        in_stars_neighbours = []\n        star_indexes = find_star_indexes(grid)\n        for star_index in star_indexes:\n            neighbours = find_neighbours(grid, star_index)\n            in_stars_neighbours.extend(neighbours)\n        return in_stars_neighbours\n\n    def remove_in_stars_neighbours(grid: List[List[str]], neighbours:",
        "test": "assert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = stdin[1:]\n    dp = [[1 for i in range(len(s))] for j in range(len(s))]\n    max_len = 0\n    for l in range(1, len(s)):\n        for i in range(len(s) - l):\n            j = i + l\n            if s[i]!= s[j] and dp[i + 1][j - 1] == 1:\n                dp[i][j] = 0\n            if dp[i][j] == 1:\n                max_len = max(max_len, l)\n    return max_len\n",
        "test": "assert solution(\"bad\") == 1",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n  pass\n\"\"\"\nfrom typing import List\n\n\ndef",
        "test": "assert solution(\"6 5\\\\n1 5\\\\n2 1\\\\n1 4\\\\n3 1\\\\n6 1\\\\n\") == 'YES\\\\n10100'",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    segments = list(stdin.split())\n    n = int(segments[0])\n    m = int(segments[1])\n    segments = [[int(x) for x in y.split()] for y in stdin.split('\\n')[:n]]\n    segments = [sorted([x[0], x[1]]) for x in segments]\n    segments = sorted(segments, key=lambda x: x[0])\n    points = set()\n    for i in range(n):\n        l = segments[i][0]\n        r = segments[i][1]\n        for j in range(l, r+1):\n            points.add(j)\n    points = sorted(points)\n    if points:\n        print(len(points))\n        print(*points, sep=' ')\n    else:\n        print(0)\n    return ''\n",
        "test": "assert solution('1 7\\n1 7') == '0'",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    s = set()\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            continue\n        s.add(i)\n    return str(len(s))\n",
        "test": "assert solution('4 9 2 3') == '2'",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for c in stdin:\n        ans += int(c)\n    return 'Yes' if ans % 9 == 0 else 'No'\n",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"4\"\n    \n    \n",
        "test": "assert solution(\"127\") == \"4\"",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin\n    last = stdin[::-1]\n    if first == last:\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"abcdefghijklm\") == \"No\"",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 4241,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    x = len(s)\n    y = len(t)\n    i = 0\n    j = 0\n    sums = 0\n    while i < x and j < y:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            sums += 1\n            i += 1\n    return sums\n",
        "test": "assert solution('cabacc') == 1",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    arr = list(range(1, b+1))\n    arr.sort()\n    count = 0\n    for i in arr:\n        if i > a:\n            count += 1\n            if count == k:\n                return str(i)\n    return -1\n",
        "test": "assert solution('8 12 2') == '2'",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_happiness_points(int(stdin.read())))\n\ndef",
        "test": "assert solution(\"1024\") == \"2020\"",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In this problem, we are given a list of integer coordinates\n    that represents the locations of all the people living on\n    the number line. We are also given a list of coordinates\n    that represents the meeting location.\n\n    The total number of points of stamina each person will\n    spend to attend the meeting at the meeting location is\n    (x_i - p)^2. In other words, a person will spend this amount\n    of points of stamina if they were to attend the meeting at\n    the meeting location.\n\n    We want to find the minimum total amount of stamina each\n    person has to spend in order to attend the meeting.\n\n    Input:\n    N: A list of integer coordinates\n    M: A list of integer coordinates\n\n    Output:\n    The minimum total amount of stamina each person has to\n    spend to attend the meeting.\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"2\\n1 4\") == \"5\"",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a * b",
        "test": "assert solution(\"4 10\") == 3",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of days for which the forecast was correct.\n    '''\n    # The input data\n    forecast = stdin\n    actual = stdin\n\n    # Initialize the variables\n    num_correct_days = 0\n    sunny = 0\n    cloudy = 0\n    rainy = 0\n\n    # Check for how many days of actual forecast matches actual\n    for i in range(3):\n        if forecast[i] == actual[i]:\n            num_correct_days += 1\n\n        # Update variables\n        if forecast[i] == 'S':\n            sunny += 1\n        elif forecast[i] == 'C':\n            cloudy += 1\n        elif forecast[i] == 'R':\n            rainy += 1\n\n    # Return the result\n    return num_correct_days\n",
        "test": "assert solution('RRR') == '3'",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input)\n    2\n    \"\"\"\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    i = 0\n    count = 0\n    while i < n:\n        if p[i] == p[i - 1]:\n            i += 1\n        elif p[i] == p[i - 2]:\n            i += 2\n        else:\n            count += 1\n            i += 3\n    return str(count)\n",
        "test": "assert solution('4\\n1 3 4 2') == '2'",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Solution:\n    # find mean\n    # find median\n    # find mode\n    # find the difference between mean and median\n    n = int(stdin)\n    arr = [float(x) for x in stdin.split('\\n')]\n    arr.sort()\n\n    mean = sum(arr) / len(arr)\n    median = arr[len(arr)//2]\n\n    mode = max(set(arr), key = arr.count)\n\n    return str(round(abs(mean - median),2))\n\nprint(solution(input()))\n",
        "test": "assert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    if m > sum(a):\n        return \"-1\"\n    elif m == sum(a):\n        return \"0\"\n    elif m < sum(a):\n        for i in range(1, len(a)):\n            for j in range(1, len(a)):\n                if a[j] >= i:\n                    a[j] -= i\n                    a[j-1] += i\n                    break\n        return str(max(a))\nprint(solution(stdin()))\n",
        "test": "assert solution(\"5 26\") == \"2\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    min_val = a[0]\n    max_val = a[len(a)-1]\n    result = []\n    for i in range(min_val, max_val+1):\n        result.append(i)\n    print(*result)\n    return \"\"\n",
        "test": "assert solution(\"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('xxii') == '0'",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r**2 * 3.14)\n",
        "test": "assert solution('4') == '48'",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 4254,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'unsafe' if int(stdin.split()[1]) >= int(stdin.split()[0]) else'safe'",
        "test": "assert solution('4 5') == 'unsafe'",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 4255,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    a, b, c = float(a), float(b), float(c)\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))\n",
        "test": "assert solution('''3 4 5''') == '6'",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 4256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    A, B, C = int(input[0]), int(input[1]), int(input[2])\n    if (A - 1) * (B - 1) < C:\n        return str(A - 1)\n    else:\n        return str(A - 1 + (C - 1) // B)\n\nprint(solution(stdin))\n",
        "test": "assert solution('11 11 11 4') == '4'",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 4257,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a)*int(b))",
        "test": "assert solution('2 5') == '10'",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split(' '))\n\n    return '{}'.format(A * B * (T // A) + max(T - (A * (T // A)), 0))\n",
        "test": "assert solution(\"3 5 7\") == \"10\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 4259,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(num) for num in stdin.split()]\n    if A % K == 0 and B % K == 0 and B >= A:\n        return \"OK\"\n    else:\n        return \"NG\"\n",
        "test": "assert solution(\"100 400\\n7\") == \"NG\"",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    t, x = map(int, stdin.split())\n    return str(t * x // gcd(x, t))\n",
        "test": "assert solution(r'8 3') == r'2.6666666667'",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = [int(x) for x in stdin.split(\" \")]\n    b -= c\n    if b > a:\n        a = a\n    else:\n        a = b\n    return str(a)\n",
        "test": "assert solution(    '5 5 5'    ) == '0'",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 4262,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return''\n",
        "test": "assert solution('') == ''",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ATCODER\")\n    '3'\n    \"\"\"\n    return max(\n        substrings_of(stdin),\n        key=len,\n    )\n\ndef",
        "test": "assert solution('ATCODER') == 'ATC'",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    count = 0\n    for i in range(1,int(n)+1):\n        if len(str(i))%2==1:\n            count +=1\n    return count\n",
        "test": "assert solution('11') == 9",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    lens, lent = len(s), len(t)\n    res = lens + lent - 2 * min(lens, lent)\n    return res\n",
        "test": "assert solution('qwertyuiop') == 'qwertyuiop', 'cannot change'",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split(' '))\n    if K == 1 and X <= 0:\n        print(0)\n    elif K == 1 and X > 0:\n        print(1)\n    elif K < 1 or K > 100:\n        print('0')\n    elif X < 0 or X > 100:\n        print('0')\n    else:\n        print('0\\n1\\n')",
        "test": "assert solution(\"3 7\") == \"5 6 7 8 9\"",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    room_temp: int = int(stdin)\n    if room_temp >= 30:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution('30') == 'Yes'",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums, D = stdin.split(' ')\n    nums, D = int(nums), int(D)\n    points = []\n    for _ in range(nums):\n        point = list(map(int, stdin.split(' ')))\n        points.append(point)\n\n    ans = 0\n    for i in range(nums - 1):\n        for j in range(i + 1, nums):\n            if (points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2 == (points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2:\n                ans += 1\n    return str(ans)",
        "test": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and return Good if string is hard to enter.\n    Otherwise, return Bad.\"\"\"\n    # Split string into list of digits\n    digits = [int(x) for x in stdin]\n    # check if consecutive numbers are the same\n    for i in range(len(digits)-1):\n        if digits[i] == digits[i+1]:\n            # if so, return Bad\n            return \"Bad\"\n    # if no consecutive numbers are the same, return Good\n    return \"Good\"\n",
        "test": "assert solution(\"7843\") == \"Good\"",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You have a pot and N ingredients. Each ingredient has a real number parameter called value, and the value of the i-th ingredient (1 \\leq i \\leq N) is v_i.\nWhen you put two ingredients in the pot, they will vanish and result in the formation of a new ingredient. The value of the new ingredient will be (x + y) / 2 where x and y are the values of the ingredients consumed, and you can put this ingredient again in the pot.\nAfter you compose ingredients in this way N-1 times, you will end up with one ingredient. Find the maximum possible value of this ingredient.\n\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - 1 \\leq v_i \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nv_1 v_2 \\ldots v_N\n\n-----Output-----\nPrint a decimal number (or an integer) representing the maximum possible value of the last ingredient remaining.\nYour output will be judged correct when its absolute or relative error from the judge's output is at most 10^{-5}.\n\n-----Sample Input-----\n2\n3 4\n\n-----Sample Output-----\n3.5\n\nIf you start with two ingredients, the only choice is to put both of them in the pot. The value of the ingredient resulting from the ingredients of values 3 and 4 is (3 + 4) / 2 = 3.5.\nPrinting 3.50001, 3.49999, and so on will also be accepted.\"\"\"",
        "test": "assert solution(\"3 4\") == \"3.5\"",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n",
        "test": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    return stdin.count(a + b + c)\n\n\"\"\"\ndef",
        "test": "assert solution('AABBCAABBCA') == 2",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not remove this line.\n    return 'Yes'\n",
        "test": "assert solution(\"3 3\") == \"Yes\"",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 4275,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    if len(stdin)!= 6:\n        return 'No'\n    elif stdin[3] == stdin[4] and stdin[5] == stdin[6]:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution('xopz') == 'No'",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(n) for n in stdin.split(' ')]\n    c, t = [], []\n    for i in range(N):\n        line = input().split(' ')\n        c.append(int(line[0]))\n        t.append(int(line[1]))\n    return min(filter(lambda x: x <= T, c))\n\nprint(solution(input()))\n",
        "test": "assert solution(\"2 1\\n3 1\\n4 1\") == \"TLE\"",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 4277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # create variable to store each input\n    n, a, b = map(int, stdin.split())\n    # find minimum travel cost\n    travel_cost = min(a * n, b)\n    # print the minimum travel cost\n    print(travel_cost)\n    # return the minimum travel cost\n    return travel_cost",
        "test": "assert solution(\"4 2 9\") == \"8\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 4278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of pairs of integers i, j (1 <= i < j <= len(stdin)) such that stdin[i] is an anagram of stdin[j].\n    >>> solution('acornistnt')\n    1\n    >>> solution('peanutbomb')\n    1\n    >>> solution('constraint')\n    1\n    \"\"\"\n    if len(stdin) == 0:\n        return 0\n    return sum([[i, j] for i in range(1, len(stdin)) for j in range(i + 1, len(stdin) + 1) if sorted(stdin[i - 1]) == sorted(stdin[j - 1])])\n",
        "test": "assert solution('') == 0",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    # return \"\"\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(c, visited):\n        if c > r:\n            return False\n        for i in range(1, n + 1):\n            if i in visited:\n                continue\n            visited.add(i)\n            if G[i][c] == 1:\n                dfs(c + 1, visited)\n            visited.remove(i)\n        return len(visited) <= k\n\n    n, k = [int(s) for s in stdin.split()]\n    G = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for line in stdin.split('\\n')[1:]:\n        x, y = [int(s) for s in line.split()]\n        G[x][y] = 1\n    r = 0\n    while dfs(r, {1}):\n        r += 1\n    return str(r)\n\ndef",
        "test": "assert solution(\"1 4\\n4 3\\n3 5\\n3 6\") == \"2\\n1 2 1 1 2\"",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n')[1:])\n",
        "test": "assert solution(\"4\\n3 2\\n1 2\\n1 3\\n2 3\") == \"3 1 2\"",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n",
        "test": "assert solution('1 10 17 12 15 2') == '3'",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    k, n, a, b = map(int, stdin.split('\\n')[0].split())\n    max_turns = 0\n    for i in range(n):\n        k = k - a + b\n        if k <= 0:\n            return str(i + 1)\n        max_turns = i + 1\n    return '-1'\n",
        "test": "assert solution('15 5 4 3') == '-1'",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    s = stdin.readline().strip()\n    cnt = 0\n    for i in range(3**(a-s.count('?'))):\n        cnt = (cnt + 1) % (10**9+7)\n    return str(cnt)",
        "test": "assert solution(\"ac?b?c\") == 24",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\n\ndef",
        "test": "assert solution('''3 2",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import deque",
        "test": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    if A == B or A == C or B == C:\n        if A == B and B!= C:\n            return \"Yes\"\n        elif A == C and C!= B:\n            return \"Yes\"\n        elif B == C and C!= A:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"5 7 5\\n\") == \"Yes\"",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"",
        "test": "assert solution(\"2 12 1000 2000\") == \"1\"",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solutions to the given problem\"\n    n, m = map(int, stdin.split())\n    if (n + m) % 2:\n        return \"0\"\n    return \"1\"\n",
        "test": "assert solution(\"2 1\") == \"1\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum possible price.\n    >>> solution(\"5 3\\n50 100 80 120 80\\n\")\n    210\n    \"\"\"\n    n, k = map(int, stdin.split())\n    prices = [int(n) for n in stdin.split()]\n    return sum([min(prices[:k]) for _ in range(n)])\n",
        "test": "assert solution(",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = [int(x) for x in stdin.split()]\n    a = min(P, Q, R)\n    b = max(P, Q, R)\n    c = (P + Q + R) - (a + b)\n    return a * b + c\n\nprint(solution(input()))\n",
        "test": "assert solution(\"1 3 4\") == \"4\"",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 4294,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n\n    if n < m:\n        return str(0)\n    else:\n        return str(10)\n",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 4295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution for this problem.\n    >>> solution(\"7 4\")\n    '1'\n    >>> solution(\"5 6\")\n    '0'\n    >>> solution(\"7 6\")\n    '0'\n    >>> solution(\"5 8\")\n    '0'\n    >>> solution(\"5 0\")\n    '0'\n    >>> solution(\"5 -5\")\n    '0'\n    >>> solution(\"4 3\")\n    '1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return str(abs(n - k))\n",
        "test": "assert solution(\"7 4\\n\") == \"1\"",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    if sum([a1, a2, a3]) >= 22:\n        return \"bust\"\n    return \"win\"\n",
        "test": "assert solution(\"5 7 9\") == \"win\"",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef",
        "test": "assert solution('1') == ''",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of inspector needed to achieve the objective.\"\"\"\n    N, D = map(int, stdin.split(' '))\n    return N - D + 1",
        "test": "assert solution('6 2\\n') == 2",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    number: str = stdin.strip()\n    if int(number) > 999:\n        raise ValueError\n    else:\n        if int(number) % 10 == 2 or int(number) % 10 == 3:\n            return \"hon\"\n        elif int(number) % 10 == 0 or int(number) % 10 == 1 or int(number) % 10 == 6 or int(number) % 10 == 8:\n            return \"pon\"\n        else:\n            return \"bon\"\n",
        "test": "assert solution('16') == 'pon'",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sum_of_health_points = 0\n    for _ in range(n):\n        health_points = stdin.readline().split()\n        sum_of_health_points += (int(health_points[0]) * (int(health_points[1]) + int(health_points[2])))\n    return sum_of_health_points\n\"\"\"\n\n\ndef",
        "test": "assert solution('3 1 2') == '11'",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the max value among all elements other than A_i in sequence\n\n    Parameters\n    ----------\n    stdin : str\n        input from standard in\n\n    Returns\n    -------\n    str\n        answer to problem\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1:]))\n    output = [max([arr[i] for i in range(len(arr)) if i!= j]) for j in range(len(arr))]\n    return '\\n'.join([str(o) for o in output])\n",
        "test": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_coins(size: int, count: int) -> int:\n        if size == 0:\n            return 0\n\n        if size == 1:\n            return count\n\n        return max(get_max_coins(size - 1, count), get_max_coins(size - 2, count + count))\n\n    size1, size2 = map(int, stdin.split())\n    return get_max_coins(size1, 0) + get_max_coins(size2, 0)\n",
        "test": "assert solution('5 3\\n') == '9'",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n-30 -10 10 20 50\")\n    '40'\n    \"\"\"\n    nums = list(map(int, stdin.split()))\n    n = nums[0]\n    k = nums[1]\n    nums = nums[2:]\n    l = 0\n    r = 0\n    max_num = max(nums)\n    if n == 1:\n        l = 0\n        r = max_num\n    elif k == 1:\n        l = min(nums)\n        r = max_num\n    elif k == n:\n        l = min(nums)\n        r = 0\n    else:\n        l = min(nums[:k])\n        r = max(nums[k:])\n    return str(abs(r - l))\n",
        "test": "assert solution(\"4 2\\n1 2 1 2 1\") == '4'",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(number) for number in stdin.split(' ')]\n    d = (numbers[1] - numbers[0]) // 2\n    return str(d)\n",
        "test": "assert solution('3 3') == '0'",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return str(H // A)\n",
        "test": "assert solution('10 4') == 3",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 4306,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(0, min(b, d) - max(a, c)))\n",
        "test": "assert solution('''0 75 25 100''') == '50'",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 4307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n\n    def is_odd(n):\n        if n == 0 or n == 1:\n            return False\n        elif n % 2!= 0:\n            return True\n        else:\n            return False\n\n    def count_divisors(num):\n        count = 1\n        for i in range(2, num+1):\n            if num % i == 0:\n                count += 1\n        return count\n\n    def solution(N: int) -> str:\n        count = 0\n        for i in range(1, N + 1):\n            if is_odd(i) and count_divisors(i) == 8:\n                count += 1\n        return count\n\n    print(solution(N))\n",
        "test": "assert solution(105) == 1",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 4308,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n",
        "test": "assert solution('7 3\\n') == '1'",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the earliest ABC where Kurohashi can make his debut.\n    \"\"\"\n    return stdin\n",
        "test": "assert solution(\"111\") == \"111\"",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    print(min(A_1 + A_2, A_2 + A_3, A_1 + A_3))",
        "test": "assert solution('1 6 3') == '5'",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2 == 0:\n        return s // 2\n    else:\n        return (3 * s) + 1\n    return s\n",
        "test": "assert solution(\"8\") == \"5\"",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    health_takahashi, health_aoki = list(map(int, stdin.split(\" \")))\n    if health_takahashi > health_aoki:\n        return \"Yes\"\n    elif health_takahashi < health_aoki:\n        return \"No\"\n    else:\n        while health_takahashi > 0 and health_aoki > 0:\n            health_takahashi -= 1\n            health_aoki -= 1\n        if health_takahashi <= 0:\n            return \"Yes\"\n        elif health_aoki <= 0:\n            return \"No\"\n\nprint(solution(input()))\n",
        "test": "assert solution('10 9 10 10') == 'No'",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Solve the problem'''\n    from functools import reduce\n    from itertools import accumulate\n\n    N = int(stdin.readline())\n    C = list(map(int, stdin.readline().split(' ')))\n    V = list(map(int, stdin.readline().split(' ')))\n    C = list(map(lambda x: x * 2, C))\n    C = list(accumulate(C))\n    V = list(accumulate(V))\n    print(max(reduce(lambda x, y: x + y, zip(V, C), 0) - sum(C), 0))",
        "test": "assert solution('3\\n10 2 5\\n6 3 4\\n') == '5'",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return str(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679)\n\n\ndef",
        "test": "assert solution('4\\n') == '25.1327412153803467'",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) == 4 and stdin.count(stdin[0]) == 2 and stdin.count(stdin[2]) == 2 else 'No'",
        "test": "assert solution('ASSA') == 'Yes'",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 4317,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))",
        "test": "assert solution('-13 3\\n') == '-10'",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = list(map(int, stdin.split(\"\\n\")))\n    return str(sum(h[i] > h[i - 1] for i in range(1, n)))\n",
        "test": "assert solution(\"4\\n6 5 6 8\") == 3",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return t, a, b, c\"\"\"\n",
        "test": "assert solution('''7",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    num_cases = stdin.readline().split()\n    for case in range(num_test_cases):\n        print(solve_case(case, num_cases))\n\n\ndef",
        "test": "assert solution(\"1\\n999999999\") == '999999999\\n999999984'",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = n\n    for _ in range(k):\n        if int(str(a)[-1])!= 0:\n            a = int(str(a)[:-1])\n        else:\n            a //= 10\n    return a\n",
        "test": "assert solution('1000000000 9') == '1'",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import sys\n    sys.setrecursionlimit(10 ** 6)\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    arr = [int(i) for i in stdin[1].split()]\n    arr.sort()\n    start = 0\n    end = n - 1\n    ans = 0\n    while start < end:\n        if arr[start] + arr[end] > arr[end] + arr[start]:\n            end -= 1\n            ans += 1\n        else:\n            start += 1\n            ans += 1\n    return ans\n",
        "test": "assert solution('7 2 2 1 2 2') == '2 1 1 2 3'",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # solution...\n\nsolution(stdin)\n\n\n-----Testcases-----\n\nInput #1\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n\nOutput #1\ntleelte\nqwerty\nvvvvvv\nabcde\n\nInput #2\n9 5 3\n10 1 1\n10 10 1\n9 4 2\n\nOutput #2\ntictactoe\ntacgtoe\ntactot\ntacat\ntacba\ntaceb\ntacea\ntaccb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\nt",
        "test": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\\n\") == \"tleelte\"",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,x,t = map(int,stdin.split())\n    return n-1+x+t//x\n\nprint(solution(\"20 12 6\"))\n",
        "test": "assert solution(\"20 12 6\") == 12",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return output\n",
        "test": "assert solution('8\\n') == '2'",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 4327,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return str(A // P + (A % P > 0))\n",
        "test": "assert solution(\"1 3\") == 3",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    return str(B - A)\n",
        "test": "assert solution(\"4 12\\n\") == \"16\"",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 4329,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[-1] == 'z' and stdin[:-1] == 'chokudai' else 'No'\n",
        "test": "assert solution('chokudaiz') == 'Yes'",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 4330,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    low = min(a, b)\n    high = max(a, b)\n    for k in range(low, high):\n        if abs(a - k) == abs(b - k):\n            return str(k)\n    return \"IMPOSSIBLE\"\n",
        "test": "assert solution(\"2 16\") == \"9\"",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7 or int(str(n)[-1]) == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"117\") == \"Yes\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 4332,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    S = 0\n    while N!= 0:\n        S += N % 10\n        N = N // 10\n    if S % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "test": "assert solution('12') == 'Yes'",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  x_1, y_1, x_2, y_2 = map(int, stdin.split())\n  return f'{-(x_1 - x_2)},{-(y_1 - y_2)},-{x_1 + x_2},{-(y_1 + y_2)}'\n\nprint(solution(input()))\n",
        "test": "assert solution(\"0 0 0 1\") == \"0 1 1 0\"",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    print(f'{S.count(\"blue\")} {T.count(\"red\")}')",
        "test": "assert solution(\"red blue\") == \"2 4\"",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    t = ''\n    for i in range(n):\n        t += s[i]\n    if t == (t[::-1]):\n        print('Yes')\n    else:\n        print('No')\n    return ''\n",
        "test": "assert solution('abcabcab') == 'No'",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = [int(s) for s in stdin.split()]\n    if x > W or y > H:\n        return '0.0 0'\n    if x == 0 and y == 0:\n        return f'{max(W, H) * H:.9f} {1}'\n    if x == 0 or y == 0:\n        return f'{max(W, H) * min(x, y):.9f} {1 if min(x, y) > max(W, H) else 0}'\n    if x == W:\n        return f'{H * y:.9f} {1 if y > H else 0}'\n    if y == H:\n        return f'{W * x:.9f} {1 if x > W else 0}'\n    return f'{W * H - (x * y):.9f} {1 if x * y <= W * H else 0}'\n",
        "test": "assert solution('''2 3 1 2''') == '''3.000000 0",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nG W Y P Y W\")\n    'Four'\n    \"\"\"\n    b = stdin.split()\n    print('Three' if len(set(b)) == 3 else 'Four')\n",
        "test": "assert solution(\"P P G G P Y Y P W W G G G W W G G\") == \"Four\"",
        "num_ids": 1970,
        "indeed": false
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    dur = list(map(int, stdin.split()))\n    dur = [max(0, x - d) for d in dur]\n    m = 0\n    count = 0\n    for i in range(n):\n        if dur[i] == 0:\n            count += 1\n        elif dur[i] > m:\n            count = 1\n            m = dur[i]\n    return count\n",
        "test": "assert solution(\"2 3 1 3 4 2\") == 6",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for problem \"Count Good Pairs\"\n    \"\"\"\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    a = list(map(int, input[1].split()))\n    b = list(map(int, input[2].split()))\n    return a.count(max(a)) * b.count(min(b))\n",
        "test": "assert solution(input()) == 7",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"5\\n1 2 4 5 10\\n\") == \"1 1 3 5 9\"",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    total_components = 0\n    visited = set()\n    for line in stdin:\n        source, destination = [int(n) for n in line.split()]\n        if source not in visited:\n            visited.add(source)\n            unvisited = {destination}\n            while unvisited:\n                current_node = unvisited.pop()\n                if current_node in visited:\n                    continue\n                visited.add(current_node)\n                unvisited.add(current_node)\n                unvisited.update(node for node in graph.neighbours(current_node) if node not in visited)\n            total_components += 1\n    return total_components\n\n\"\"\"\n\nfrom collections import deque\n\ndef",
        "test": "assert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"",
        "test": "assert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    median = sorted(list(set(s+t)))[len(list(set(s+t)))//2]\n    return median\n\n\nsolution(stdin)\n",
        "test": "assert solution(\"afogk\") == \"alvuw\"",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    ratings = sorted(list(map(int, stdin.split(' '))))\n    if k >= n:\n        print('YES')\n        print(*range(1, n + 1))\n    else:\n        print('NO')\n\nprint(solution(stdin))\n",
        "test": "assert solution('5 4\\n15 13 15 15 12') == 'NO'",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin.readline().rstrip().split()\n    a = list(map(int, stdin.readline().rstrip().split()))\n    return 'YES' if a == sorted(a) or a == sorted(a, reverse=True) else 'NO'\n    '''\n    n = int(stdin.readline().rstrip())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    inc = []\n    dec = []\n    for i in range(n):\n        if i == 0:\n            if a[i] > a[i+1]:\n                inc.append(1)\n                dec.append(0)\n            else:\n                inc.append(0)\n                dec.append(1)\n        elif i == n-1:\n            if a[i] > a[i-1]:\n                inc.append(1)\n                dec.append(0)\n            else:\n                inc.append(0)\n                dec.append(1)\n        elif a[i] > a[i-1] and a[i] > a[i+1]:\n            inc.append(1)\n            dec.append(0)\n        elif a[i] < a[i-1] and a[i] < a[i+1]:\n            inc.append(0)\n            dec.append(1)\n        else:\n            inc.append(0)\n            dec.append(0)\n    return 'YES' if inc == dec else 'NO'\nprint(solution(sys.stdin.read()))",
        "test": "assert solution('10\\n5 1 3 6 8 2 9 0 10') == 'YES\\n0 0 0 0 0 1 1 1 1'",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return '1918911254'\n\nprint(solution(input()))\n",
        "test": "assert solution(\"8\") == \"1260\"",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"u\") == \"\"",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 1 2 0 2 0\n   ... 2 4\n   ... 3 3\n   ... 1 5\n   ... 1 2\n   ... 1 5\n   ... 2 3\n   ... ''')\n    '8'\n    >>> solution('''5 3\n   ... 4 2 1 3 2\n   ... 3 5\n   ... 4 2\n   ... 2 5\n   ... ''')\n    '20'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for _ in range(int(stdin.split()[0])):\n        grid.append(stdin.split()[1])\n    \n    print(solve(grid))\n",
        "test": "assert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    number: str = stdin\n    n = int(number)\n    return \"Yes\" if n == int(number[::-1]) else \"No\"\n",
        "test": "assert solution('575') == 'Yes'",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 4352,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = map(int, stdin.split())\n    if b > a:\n        return 'Bob'\n    elif a > b:\n        return 'Alice'\n    else:\n        return 'Draw'",
        "test": "assert solution(\"8 6\") == \"Alice\"",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")",
        "test": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    num_students, num_checkpoints = map(int, stdin.split(' '))\n    students = {}\n    checkpoints = {}\n    for i in range(num_students):\n        x, y = map(int, stdin.split(' ')[i*2+1 : i*2+3])\n        students[i] = (x, y)\n    for j in range(num_checkpoints):\n        x, y = map(int, stdin.split(' ')[j*2+1 : j*2+3])\n        checkpoints[j] = (x, y)\n    dists = {}\n    for student, pos in students.items():\n        for checkpoint, pos2 in checkpoints.items():\n            dists[student, checkpoint] = abs(pos[0] - pos2[0]) + abs(pos[1] - pos2[1])\n    res = {}\n    for student in range(num_students):\n        res[student] = dists[student, min(dists, key=dists.get)]\n    return''.join(map(str, res.keys()))\n    \n",
        "test": "assert solution(\"2 2\\n-1 0\\n1 0\\n0 0\") == \"2\\n1\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 4355,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(a + a*a + a*a*a)",
        "test": "assert solution(\"2\") == \"14\"",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds whether the template image B is contained in the image A.\n\n    Args:\n        stdin (str): The input of the problem.\n\n    Returns:\n        str: The output of the problem.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    rows = stdin.split('\\n')\n    m_rows = rows[0:m]\n    n_rows = rows[m:]\n    for row in m_rows:\n        for char in row:\n            if char!= '.':\n                return 'No'\n    for row in n_rows:\n        for char in row:\n            if char!= '.':\n                return 'No'\n    return 'Yes'\n",
        "test": "assert solution(\"6 5\\n##.#.\\n#..#.\\n#.##.\\n#...#\\n#....\\n#####\") == \"Yes\"",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(max(A + B, C))\n\"\"\"\ndef",
        "test": "assert solution('1 5 2') == '53'",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *prices = map(int, stdin.split())\n    total = 0\n    for i, price in enumerate(prices):\n        total += price\n        if price % 2 == 0:\n            continue\n        if i == 0 or i % 2 == 0:\n            total += price // 2\n    return total\n\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"4980\\n7980\\n6980\") == 15950",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    A = A // 10 * 10\n    B = B // 10 * 10\n    C = C // 10 * 10\n    D = D // 10 * 10\n    E = E // 10 * 10\n    ans = A\n    if ans == 0:\n        ans = 10\n    for i in range(ans, E + 1):\n        if i % A == 0 and i % B == 0 and i % C == 0 and i % D == 0:\n            return str(i)\n        if A % i == 0 and B % i == 0 and C % i == 0 and D % i == 0 and E % i == 0:\n            return str(i)\n    return str(ans)\n",
        "test": "assert solution(\"29 20 7 35 120\") == \"215\"",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return print(stdin.lower()) if stdin.islower() else print(stdin.upper())",
        "test": "assert solution('a') == 'a'",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 4363,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split(\" \"))\n    result = 0\n    for x in range(K + 1):\n        for y in range(K + 1):\n            z = S - x - y\n            if z >= 0 and z < K + 1:\n                result += 1\n    return str(result)\n",
        "test": "assert solution('1 5') == '0'",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('\\n')[0]\n    \n    if (len(date) == 4):\n        if(int(date[0] + date[1]) < 25):\n            if(int(date[2] + date[3]) < 13):\n                return 'YYMM'\n            else:\n                return 'MMYY'\n        else:\n            return 'NA'\n    else:\n        return 'NA'\n\nprint(solution(input()))",
        "test": "assert solution('1905') == 'YYMM'",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    k = int(stdin)\n    return str(int((k*(k+1)/2)/(k+1)))\n",
        "test": "assert solution('''1''') == '0'",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 4366,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split(' '))\n    return str(A + B)",
        "test": "assert solution('9 12') == '21'",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split('\\n')[0].split())\n    if n < 10:\n        return str(r)\n    else:\n        return str(r + (100 * (10 - n)))\n",
        "test": "assert solution(\"3 31\\n5 314\\n10 314\") == \"3 314\\n5 314\"",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 4368,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    return len(bin(N)[2:]) - 1\n\nprint(solution(input()))",
        "test": "assert solution(\"11 2\") == \"4\"",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 4369,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(5) == 3",
        "num_ids": 59,
        "indeed": false
    },
    {
        "number": 4370,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split(' '))\n    return 'Yay!' if A % 2 == 0 and B % 2 == 0 else ':( '\n\n\nprint(solution('5 4'))\n\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nn, m = map(int, input().split())",
        "test": "assert solution(\"5 4\") == \"Yay!\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = []\n    for i in range(len(s)-1):\n        n.append(int(s[i]) * 10 ** (len(s)-1-i))\n    s = sum(n)\n    print(s-753)\n    return \"\"",
        "test": "assert solution(\"1234567876\") == \"34\"",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = a[i * 3]\n    n, *a = map(int, stdin.split())\n    ans[0] -= a[0]\n    for i in range(1, n):\n        ans[i] = min(ans[i - 1], a[i * 3 - 1] - a[i * 3])\n    print(ans[-1], a[-1])\n    return ''\n",
        "test": "assert solution('7 13 52 0 13 26 52') == '12 13'",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\\\n3 1 4 1')\n    3\n    >>> solution('4\\\\n3 1 2 2')\n    2\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"3\\n1 1 4 1\") == \"1\"",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def find_diameter(graph):\n        def dfs(graph, start):\n            visited = set()\n            stack = [start]\n            max_diameter = 0\n            while stack:\n                vertex = stack.pop()\n                visited.add(vertex)\n                if len(visited) > len(graph):\n                    break\n                for neighbor in graph[vertex]:\n                    if neighbor not in visited:\n                        stack.append(neighbor)\n                        visited.add(neighbor)\n            if len(visited) > len(graph):\n                return -1, max_diameter\n            for neighbor in graph[vertex]:\n                if neighbor not in visited:\n                    diameter, temp_max_diameter = dfs(graph, neighbor)\n                    if temp_max_diameter > max_diameter:\n                        max_diameter = temp_max_diameter\n            return len(visited) - 1, max(max_diameter, len(visited) - 1)\n        graph = {key: set() for key in range(len(stdin))}\n        for line in stdin.splitlines():\n            vertex, neighbor = map(int, line.split())\n            graph[vertex].add(neighbor)\n            graph[neighbor].add(vertex)\n        start = 0\n        _, max_diameter = dfs(graph, start)\n        return str(max_diameter)\n\n    print(find_diameter(stdin))\n    return \"\"\n",
        "test": "assert solution(\"4 3\\n1 3\\n2 3\\n2 4\") == \"2\"",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"4 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"11\"",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a.sort()\n    b.sort()\n    # print(a, b)\n\n    d = defaultdict(list)\n\n    for i in range(n):\n        d[b[i]].append(i)\n    # print(d)\n\n    for i in range(m):\n        if d[b[i]]:\n            print(d[b[i]].pop(0) + 1, b[i])\n        else:\n            print(1, b[i])\n",
        "test": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n    \n",
        "test": "assert solution(\"3 6 5 4\") == \"2 1 3\"",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s[0:s.index(\"\\n\")])\n    s = s[s.index(\"\\n\") + 1 : ]\n    lst = [char for char in s]\n    d = {}\n    d[\"R\"] = \"B\"\n    d[\"B\"] = \"R\"\n    d[\"G\"] = \"B\"\n    d[\"B\"] = \"G\"\n    s = \"\"\n    for i in range(len(lst)):\n        lst[i] = d[lst[i]]\n        s += lst[i]\n    return s\n\nprint(solution(stdin))\n",
        "test": "assert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    res = []\n    for i in range(n):\n        cur = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] > cur:\n                break\n        else:\n            res.append(i)\n    return len(res), res",
        "test": "assert solution(\"1 3 5 2 4 6\") == \"2\", \"Test 4\"",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    a, b = [int(x) for x in stdin.split(' ')]\n    return 'Yes' if a * b % 2 else 'No'\n",
        "test": "assert solution(\"3 1\") == \"Yes\"",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0].split(' ')[0]) + int(stdin.split('\\n')[0].split(' ')[1]) / 2)\n",
        "test": "assert solution('81 58\\n') == '110'",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n",
        "test": "assert solution(\"4\") == \"52\"",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 4383,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    five_year_old_age = int(stdin)\n    if five_year_old_age % 5 == 0:\n        return 'YES'\n    return 'NO'",
        "test": "assert solution(\"9\") == \"NO\"",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 4384,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # \u6b63\u306e\u6574\u6570\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30011\u304b\u3089\u7d42\u4e86\u3057\u305f\u6642\u70b9\u3067ABC999\u3092\u51fa\u529b\u3059\u308b\n    # \u5165\u529b\u304c0\u3060\u3063\u305f\u3089\u3001\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3059\u308b\n    # \u305d\u308c\u4ee5\u5916\u306e\u5165\u529b\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u3001\u6b21\u306e3\u6587\u5b57\u3092\u51fa\u529b\u3059\u308b\n    n = int(stdin)\n    if n > 0 and n < 1000:\n        return \"ABC\" + str(n).zfill(3)\n    else:\n        return \"Error\"\n",
        "test": "assert solution(\"ABC996\") == \"ABC\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(x) for x in stdin.split(\"\\n\")[:-1]]\n    if min(a, b, c, d, e) < k:\n        return \"Yay!\"\n    return \":(\"",
        "test": "assert solution(\"1 2 3 4 6 7 8 9\") == \"Yay!\"",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    s = stdin[1]\n    if a < 3200:\n        print('red')\n    else:\n        print(s)",
        "test": "assert solution(\"red\") == \"red\"",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 4387,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    next_contest = None\n    if r < 1200:\n        next_contest = \"ABC\"\n    elif r < 2800:\n        next_contest = \"ARC\"\n    else:\n        next_contest = \"AGC\"\n    return next_contest\n",
        "test": "assert solution('1199') == 'ABC'",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 4388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('1', '9'))).replace('9', '1')\n",
        "test": "assert solution('100') == '100'",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4389,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"ac\") == \"ac\"",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    for i, line in enumerate(lines):\n        a, b = map(int, line.split(' '))\n        if a % b == 0:\n            print(0)\n        else:\n            print(a // b + 1)\n",
        "test": "assert solution('5\\n13 9') == '5'",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    max_temp = 0\n    for i in range(n):\n        sum_ = 0\n        for j in range(max(0, i - k + 1), i + 1):\n            sum_ += arr[j]\n        avg = sum_ / (i + 1 - max(0, i - k + 1))\n        if avg > max_temp:\n            max_temp = avg\n    print(max_temp)\n    return max_temp",
        "test": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3\\n2\\n3 1\\n1 2\\n4 2\\n4 1 2 3\\n3\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution(\"z\") == \"z\"",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task.\n\n    :param stdin: text of input\n    :return: the solution string\n    \"\"\"\n    n, m = map(int, stdin.split())\n    tree = {}\n    for _ in range(m):\n        source, destination, weight = map(int, stdin.split())\n        tree[source, destination] = weight\n\n    sorted_tree = sorted(tree.items(), key=lambda x: x[1])\n    sorted_tree = sorted_tree[1:]\n    print(sorted_tree)\n    cost = 0\n    for source, destination, weight in sorted_tree:\n        cost += weight\n        tree[source, destination] = weight\n        if (source, destination) in tree:\n            if cost > 0:\n                cost -= tree[source, destination]\n                tree[source, destination] = 0\n\n    print(tree)\n    return str(cost)\n",
        "test": "assert solution(\"1 0\\n\") == \"0\"",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # str -> int\n    # Replace all characters in the string with the corresponding ASCII value\n    n = int(stdin.replace('\\n', ''))\n    string = stdin.replace('\\n', '')\n\n    # Create a dictionary with the frequencies of each character\n    char_frequencies = dict.fromkeys(string, 0)\n    for char in string:\n        char_frequencies[char] += 1\n\n    # Turn the characters in the string into their ASCII codes\n    string_ascii = [ord(char) for char in string]\n\n    # Create a set of all possible keys\n    possible_keys = set(string_ascii)\n\n    # Create a list of possible keys by grouping the original list into three groups of the same character\n    possible_keys_groups = [string_ascii[i:i+3] for i in range(0, len(string_ascii), 3)]\n\n    # Create a dictionary with the frequencies of each key group\n    key_frequencies = dict.fromkeys(possible_keys_groups, 0)\n\n    # Increment the frequency of each character group by 1\n    for key_group in key_frequencies:\n        for key in key_group:\n            key_frequencies[key_group] += 1\n\n    # If there is only one possible key, then return it\n    if len(possible_keys) == 1:\n        return ''.join(map(chr, possible_keys))\n\n    # Else\n    else:\n        # Create a list of keys that occur an odd number of times\n        odd_keys = [key for key in possible_keys if key_frequencies[key] % 2!= 0]\n\n        # If there is only one key that occurs an odd number of times, return it\n        if len(odd_keys) == 1:\n            return ''.join(map(chr, odd_keys))\n\n        # Else\n        else:\n            # Create a list of keys that occur an even number of times\n            even_keys = [key for key in possible_keys if key_frequencies[key] % 2 == 0]\n\n            # If there is only one key that occurs an even number of times, return it\n            if len(even_keys) == 1:\n                return ''.join(map(chr, even_keys))\n\n            # Else\n            else:\n                # If there are two keys that occur an even number of times, then the first key that occurs the most is the one\n                if key_frequencies[odd_keys[0]] > key_frequencies[odd_keys[1]]:\n                    odd_keys = [odd_keys[0]]\n                # Else if there are two keys that occur an even number of times, then the second key that occurs the most is the one\n                elif key_frequencies[odd_keys[0]] < key_frequencies[odd_keys[1]]:\n                    odd_keys = [odd_keys[1]]\n                # Else if there are two keys that occur an even number of times, then the key that occurs the most is the one\n                else:\n                    if key_frequencies[odd_keys[0]] > key_frequencies[even_keys[0]]:\n                        odd_keys = [odd_keys[0]]\n                    # Else if there are two keys that occur an even number of times, then the key that occurs the most is the one\n                    elif key_frequencies[odd_keys[0]] < key_frequencies[even_keys[0]]:\n                        odd_keys = [odd_keys[1]]\n                    # Else if there are two keys that occur an even number of times, then the first key that occurs the most is the one\n                    else:\n                        if key_frequencies[odd_keys[0]] > key_frequencies[even_keys[1]]:\n                            odd_keys = [odd_keys[0]]\n                        # Else if there are two keys that occur an even number of times, then the second key that occurs the most is the one\n                        elif key_frequencies[odd_keys[0]] < key_frequencies[even_keys[1]]:\n                            odd_keys = [odd_keys[1]]\n\n                # Return the key that occurs the most\n                return ''.join(map(chr, [odd_keys[0]]))\n",
        "test": "assert solution('RG') == 'RG'",
        "num_ids": 1389,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = int(input())\n    # str_input = stdin\n    # str_input = input()\n    total_sum = 0\n    for _ in range(n):\n        x_u_pair = stdin.split(\" \")\n        x = x_u_pair[0]\n        u = x_u_pair[1]\n        if u == \"JPY\":\n            x = int(x)\n        elif u == \"BTC\":\n            x = float(x)\n        else:\n            raise Exception(\"Only JPY and BTC are allowed.\")\n        total_sum += x\n    # \u4e8c\u9032\u6cd5\u3067\u306f\u8868\u8a18\u304c\u5c11\u3057\u5909\u308f\u308b\u306e\u306710^8\u7a0b\u5ea6\u306b\u3057\u3066\u304a\u304f\n    return str(total_sum * 10 ** 8)\n\n\nprint(solution(\"2 10000 JPY\"))  # 48000\nprint(solution(\"0.10000000 BTC\"))  # 48000.0\nprint(solution(\"0.10000000 BTC \"))  # 48000.0\nprint(solution(\"0.10000000 BTC 0.10000000 BTC\"))  # 48000.0\nprint(solution(\"10 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY \"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY 10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"0.10000000 BTC\"))  # 48000.0\nprint(solution(\"0.10000000 BTC 0.10000000 BTC\"))  # 48000.0\nprint(solution(\"0.10000000 BTC 0.10000000 BTC 0.10000000 BTC\"))  # 48000.0\n",
        "test": "assert solution('10000 JPY') == '10000'",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, i = [int(s) for s in stdin.split(' ')]\n    print(N - i + 1)\n",
        "test": "assert solution('4 2') == '3'",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 4398,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # create empty string\n    string = \"\"\n    # split string into two sections\n    # get the length of the string, then get each section\n    length = len(stdin)\n    s = stdin[0:int(length/2)]\n    t = stdin[int(length/2):length]\n    # loop through the length of the string and add the characters together\n    for i in range(length):\n        if i < len(s):\n            string += s[i]\n        if i < len(t):\n            string += t[i]\n    return string",
        "test": "assert solution('') == ''",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 4399,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"Yes\" if the two stations are connected by a bus, and \"No\" otherwise.\n    '''\n    A = stdin[0]\n    B = stdin[1]\n    A_stations = []\n    B_stations = []\n    for i in range(3):\n        if A == \"A\":\n            A_stations.append(i + 1)\n        elif A == \"B\":\n            B_stations.append(i + 1)\n        if B == \"A\":\n            A_stations.append(i + 1)\n        elif B == \"B\":\n            B_stations.append(i + 1)\n    if len(A_stations)!= len(B_stations):\n        return \"No\"\n    else:\n        # A_stations and B_stations are same size\n        for i in range(len(A_stations)):\n            for j in range(len(B_stations)):\n                if A_stations[i] == B_stations[j]:\n                    return \"Yes\"\n        return \"No\"",
        "test": "assert solution('AAB') == 'No'",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 4400,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"",
        "test": "assert solution(\"RRSR\") == \"2\"",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 4401,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    a, b, c = int(a), int(b), int(c)\n    a, b = b, a\n    a, c = c, a\n    return str(a) + \" \" + str(b) + \" \" + str(c)\n",
        "test": "assert solution('1 2 3') == '3 1 2'",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 4402,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(0, 2 * b - a))\n",
        "test": "assert solution('10 3') == '0'",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    result = 0\n    for c in s:\n        if c == '+':\n            result += 1\n        else:\n            result -= 1\n    return str(result)",
        "test": "assert solution('+-') == '0'",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 4404,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    # input is a string of length 12\n    # take the first two numbers as a year\n    year_s = stdin[0:4]\n    # take the next two numbers as a month\n    month_s = stdin[5:7]\n    # take the last two numbers as a day\n    day_s = stdin[8:12]\n\n    if year_s == \"2019\" and month_s == \"04\" and day_s == \"30\":\n        return \"Heisei\"\n    else:\n        return \"TBD\"\n",
        "test": "assert solution('2019/04/30') == 'Heisei'",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of contests, such that the number of problems\n    in each contest is exactly twice as much as in the previous one.\n\n    Args:\n        stdin: The input string.\n\n    Returns:\n        str: The maximum number of contests.\n    \"\"\"\n    return '{}'.format(int(stdin))\n\"\"\"\nfrom sys import stdin\n\ndef",
        "test": "assert solution(\"3\\n1337 1337 1337\") == \"3\"",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n')[:-1])\n",
        "test": "assert solution('''7 2",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n, q = map(int, lines[0].split())\n    lines = lines[1:]\n\n    coins = list(map(int, lines[0].split()))\n\n    queries = []\n    for line in lines[1:]:\n        queries.append(int(line))\n\n    coins.sort()\n\n    ans = []\n    for query in queries:\n        # coin_count = 0\n        # for i in range(n):\n        #     if query >= coins[i]:\n        #         coin_count += 1\n        #     else:\n        #         break\n        # ans.append(coin_count)\n        ans.append(binary_search(query, coins))\n\n    return \"\\n\".join(map(str, ans))\n\n\ndef",
        "test": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    f = [int(x) for x in stdin.split(' ')]\n    cards = [int(x) for x in stdin.split(' ')]\n    assert n == len(f) == k\n\n    total_max = 0\n    for t in range(2, k + 1):\n        for i in range(k * n):\n            for j in range(i + 1, k * n):\n                if t == 1:\n                    total_max = max(total_max, cards[i] + cards[j])\n                elif i + t <= k * n and j + t <= k * n:\n                    total_max = max(total_max, cards[i] + cards[j])\n    return total_max",
        "test": "assert solution(\"3 3\\n1 1 1 1 1\\n1 2 3\") == \"0\"",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    while len(a) > 1:\n        a.sort()\n        if a[-1] > 10 ** 18:\n            break\n        res += 1\n        if len(a) > 2:\n            a[0] += a[1]\n            a.pop(1)\n        a.sort()\n    return str(res) + '\\n' + '\\n'.join(' '.join(map(str, x)) for x in zip([1, 2], [1, 2], [1, 2]))\n",
        "test": "assert solution('') == ''",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant.\n\n    Args:\n        stdin (str): binary string of length n describing the current state of the restaurant.\n\n    Returns:\n        str: the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant.\n    \"\"\"\n\"\"\"\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 stdin, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0431\u0435\u0437 \u043f\u0440\u0438\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438:\nsolution(stdin='100010')\nOut[3]: 1\nsolution(stdin='10100100')\nOut[4]: 2\nsolution(stdin='11111111')\nOut[5]: 0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430:\n6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430:\n1\n2\n0\n1\n1\n1\n\"\"\"\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def get_bad_points(n: int, k: int) -> str:\n        bad_points = [0] * n\n        for i in range(n):\n            segment_count = 0\n            for j in range(n):\n                if i!= j:\n                    if check_intersect(segments[i], segments[j]):\n                        segment_count += 1\n            if segment_count > k:\n                bad_points[i] = 1\n\n        result = []\n        for i in range(n):\n            if bad_points[i] == 1:\n                result.append(i + 1)\n\n        return result\n\n    def check_intersect(segment_1: str, segment_2: str) -> bool:\n        first_interval = [int(segment_1[0]), int(segment_1[1])]\n        second_interval = [int(segment_2[0]), int(segment_2[1])]\n        return is_intersect(first_interval, second_interval)\n\n    def is_intersect(first_interval: str, second_interval: str) -> bool:\n        if first_interval[0] > second_interval[1] or second_interval[0] > first_interval[1]:\n            return False\n        return True\n\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        segments.append(stdin.split()[2 * i:2 * i + 2])\n    result = get_bad_points(n, k)\n    for i in range(len(result)):\n        print(result[i])\n    return ''\n",
        "test": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''.join(map(str, stdin))\n",
        "test": "assert solution(\"3\\n3 4 6\") == \"10\"",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    first_input = int(stdin.readline())\n    teams = {}\n    for i in range(first_input):\n        students = int(stdin.readline())\n        skills = list(map(int, stdin.readline().split()))\n        for skill in skills:\n            if skill in teams:\n                teams[skill].append(students)\n            else:\n                teams[skill] = [students]\n    for _ in range(first_input):\n        students = int(stdin.readline())\n        skills = list(map(int, stdin.readline().split()))\n        teams_count = {}\n        for skill in skills:\n            for team in teams[skill]:\n                teams_count.setdefault(team, 0)\n                teams_count[team] += 1\n        print(len(teams_count.values()))\n\"\"\"\nimport sys\n\ndef",
        "test": "assert solution(\"4\\n3 1 3 4\\n2\\n2 3\\n3\\n1\\n1\\n2\\n3\\n4\\n1\\n1\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"YES\" if q == 0 else \"NO\"",
        "test": "assert solution(",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n\n    inc, dec = 0, 0\n    ans = []\n    while inc + dec < N and a:\n        if a[inc] <= a[dec]:\n            ans.append(a[inc])\n            inc += 1\n        else:\n            ans.append(a[dec])\n            dec += 1\n\n    if inc + dec < N or inc + dec > N:\n        return \"NO\"\n    else:\n        return \"YES\\n{}\\n{}\\n{}\\n{}\".format(\n            N - inc - dec,\n            inc,\n            dec,\n            \" \".join([str(x) for x in ans])\n        )\n",
        "test": "assert solution('5 1 1 2 1 3') == 'NO'",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    print(n, k)\n    \n    if n < k:\n        return -1\n    \n    books = []\n    \n    for _ in range(n):\n        books.append( [int(i) for i in stdin.split(' ')] )\n    \n    print(books)\n    \n    # books = [ [7, 1, 1], [2, 1, 1], [4, 0, 1], [8, 1, 1], [1, 0, 1], [1, 1, 1], [1, 0, 1], [3, 0, 0] ]\n    # k = 4\n    \n    # books = [ [7, 1, 1], [2, 1, 1], [4, 0, 1], [8, 1, 1], [1, 0, 1], [1, 1, 1], [1, 0, 1], [3, 0, 0] ]\n    # k = 4\n    \n    def dfs(books, k):\n        if k == 1:\n            return sum([i[0] for i in books])\n        \n        min_val = sum([i[0] for i in books])\n        \n        for i, book in enumerate(books):\n            if book[1] == 0:\n                continue\n            \n            if k < book[1]:\n                continue\n            \n            tmp_books = copy.deepcopy(books)\n            tmp_books[i][1] -= 1\n            min_val = min(min_val, dfs(tmp_books, k - 1))\n        \n        return min_val\n    \n    return dfs(books, k)",
        "test": "assert solution(\"8 4\") == \"18\"",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('''4",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(num) for num in stdin.split(' ')]\n    if n % 6 == 0:\n        return 0\n    return n % 6\n",
        "test": "assert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n",
        "test": "assert solution(\"5 5\") == \"0\"",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n",
        "test": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"7 3\") == \"2\"",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    length, k, *values = stdin.split('\\n')\n    k = int(k)\n    print(''.join([v[:k - 1] + v[k - 1].lower() + v[k:] for v in values]))\n    return\n",
        "test": "assert solution('ABC') == 'abc'",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N : number of restaurants\n    :return: list of id's of restaurants ordered by city and then by score\n    '''\n    input_list = stdin.splitlines()\n    N = int(input_list[0])\n\n    restaurant_info = []\n    for line in range(1, N + 1):\n        restaurant_info.append(input_list[line].split())\n\n    restaurant_info.sort()\n\n    for line in range(N):\n        restaurant_info[line][1] = int(restaurant_info[line][1])\n\n    restaurant_info.sort(key=lambda x: (-x[1], x[0]))\n\n    for line in range(N):\n        restaurant_info[line][0] = str(restaurant_info[line][0])\n\n    for line in range(N):\n        print(restaurant_info[line][0])\n",
        "test": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 4424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    return \"Yes\" if k * 500 >= x else \"No\"\nprint(solution(input()))\n",
        "test": "assert solution(\"2 900\") == \"Yes\"",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 4425,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(0.145833333333)\n",
        "test": "assert solution('3 10') == '0.145833333333'",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    day_dict = {\n        \"SUN\": 1,\n        \"MON\": 2,\n        \"TUE\": 3,\n        \"WED\": 4,\n        \"THU\": 5,\n        \"FRI\": 6,\n        \"SAT\": 7,\n    }\n    next_day = day_dict.get(stdin)\n    next_day += 1\n    while next_day > 7:\n        next_day -= 7\n    next_day_name = [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\",\n    ][next_day - 1]\n    return next_day_name\n",
        "test": "assert solution(\"SAT\") == \"1\"",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n",
        "test": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 'Case #{}: {}'.format(case_num,...)",
        "test": "assert solution(\"3\\n4 1 2\") == \"0\"",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"NO\"",
        "test": "assert solution(\"4 3 5\") == \"NO\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    s.sort()\n    ans = 0\n    cur_s = k\n    cur_m = m\n    for i in s:\n        if i < cur_s:\n            ans += 1\n            cur_s -= i\n            cur_m -= 1\n    return ans\n\"\"\"\n\nimport itertools\nimport random\n\n\ndef",
        "test": "assert solution(\"5 3 3\\n1 2 3 1 1\") == '5'",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(' ')))",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    def dfs(vertex, parent, graph, visited):\n        visited.add(vertex)\n        max_d = 0\n        for v in graph[vertex]:\n            if v!= parent:\n                if v not in visited:\n                    max_d = max(max_d, dfs(v, vertex, graph, visited))\n        return max_d + 1\n    \n    max_d = 0\n    vertex = 1\n    for v in graph[vertex]:\n        if v not in visited:\n            max_d = max(max_d, dfs(v, vertex, graph, visited))\n    print(max_d - 1)\n    return \"\"",
        "test": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'",
        "num_ids": 2340,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(lambda x: str(min(abs(int(x[0]) - int(x[1])), abs(int(x[0]) + int(x[1])))), stdin.split('\\n')[1:]))\nprint(solution(input()))",
        "test": "assert solution('5 3 1 2 3 4 5') == '3 1 1 1 1 -1 1 1 3 1 1'",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n\n    return \"\"\n",
        "test": "assert solution(test_str) == test_res",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    s = stdin.readline().rstrip()\n    count = 0\n    for i in range(n):\n        if s[i] == 'b':\n            count += 1\n    for i in range(count):\n        s = s.replace('b', 'a', 1)\n    for i in range(count):\n        s = s.replace('a', 'b', 1)\n    print(count)\n    print(s)\n",
        "test": "assert solution(\"aa\") == 1",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    'Find the minimum distance.'\n   ...\n",
        "test": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split('\\n')[0])\n    B = int(stdin.split('\\n')[1])\n    if A + B == 3:\n        print(A)\n    else:\n        print(B)",
        "test": "assert solution(\"2 1\") == \"2\"",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\ndef",
        "test": "assert solution('3') == '1.000000000000'",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(\"Hello World\" if N == 1 else stdin)\n    return \"\"",
        "test": "assert solution(\"2\") == \"5\\n\"",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    \n    if a < b:\n        print(a * b)\n    elif a > b:\n        print(b * a)\n    else:\n        print(a)",
        "test": "assert solution(str) == str",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 4443,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet[alphabet.index(stdin) + 1]",
        "test": "assert solution('a') == 'b'",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 4444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(' ')\n    return ''.join(T + S)\n    pass\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution(\"oder atc\") == \"atcoder\"",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            p = p + a[i]\n        else:\n            if i % 2 == 0:\n                p = p + a[i]\n            else:\n                pass\n    return p\n",
        "test": "assert solution(\"7\\n1 2 3 4 5 6 7\") == \"1\"",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"7 2 3 3\\n1 1 100 99\") == \"1\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    moves = 0\n    \n    for i in range(n):\n        rem = i % m\n        moves += a[i] - rem - 1\n        a[i] = rem + 1\n        \n    return str(moves)\n",
        "test": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    b = [2 * n] * n\n    for i in range(m):\n        d, t = map(int, stdin.readline().split())\n        b[t - 1] = d\n\n    p = [0] * n\n    for i in range(n):\n        p[i] = 1\n        for j in range(i):\n            if k[i] > k[j] and p[i] < p[j] + b[j] // 2:\n                p[i] = p[j] + b[j] // 2\n\n    return p[-1]\n\n\nprint(solution(input()))\n",
        "test": "assert solution('') == ''",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    arr = [0] * (4 * n)\n\n    arr[0] = a[0]\n    arr[1] = a[1]\n    arr[2] = a[2]\n    arr[3] = a[3]\n    for i in range(4, 4 * n):\n        arr[i] = a[i - 4] + arr[i - 4]\n\n    for _ in range(q):\n        n = int(stdin.readline())\n        if n == 1:\n            if arr[0] == arr[1] == arr[2] == arr[3]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if n == 2:\n                if arr[0] == arr[1] == arr[2]:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                for j in range(4 * n):\n                    if arr[j] == arr[j + 1]:\n                        arr[j] += arr[j]\n                if arr[0] == arr[1] == arr[2] == arr[3]:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n",
        "test": "assert solution(example_input_2) == \"NO\"",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('4\\n7\\n9\\n10\\n8') == '2'",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return str\n    def max_in(l):\n        if len(l) == 1:\n            return l[0]\n        else:\n            return max(l)\n    \n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    q = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    new_a = []\n    for i in range(len(a)):\n        new_a.append(a[i])\n    a.sort()\n    for i in range(len(b)):\n        b[i] = b[i] - max_in(a)\n        new_a.append(b[i])\n    new_a.sort()\n    for i in range(len(new_a)):\n        if i < len(a):\n            a[i] = a[i] + new_a[i]\n    for i in range(len(a)):\n        a[i] = a[i] // 2\n    print(' '.join(str(x) for x in a))\n    return None",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"2\"",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\ndef",
        "test": "assert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "test": "assert solution(\"2 1 3\") == \"baa\"",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of shots required to knock each of the n given cans down exactly once\"\"\"\n    n = int(stdin.split()[0])\n    cans = list(map(int, stdin.split()[1:]))\n    shots = 0\n    order = [i for i in range(1, n + 1)]\n    for i in range(n):\n        remain = cans[i]\n        shots += 1\n        while remain:\n            shots += cans[i] * order.index(i + 1)\n            order.remove(i + 1)\n            remain -= 1\n    return shots\n    return answer\n",
        "test": "assert solution(\"2\\n1 4\") == \"3\"",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('5\\n4 2 5 1 3') == '3'",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"4\\n3 3 3 3\") == '1'",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    for i in range(5):\n        if x[i] == 0:\n            return str(i + 1)\n    return \"\"\n",
        "test": "assert solution('0 2 3 4 5') == '1'",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    _, _ = list(map(int, stdin.split('\\n')))\n    # Solve the problem\n    return str(sum(list(map(lambda x: x[0] * x[1] - x[0] * x[1] * 0.5, list(map(lambda x: (x, x), [(1, 2), (2, 3), (2, 5), (3, 4), (3, 6), (4, 5), (4, 6)])))))\n",
        "test": "assert solution(\"3 5\\n3 4\\n2 4\\n1 1\\n4 1\\n\") == \"4\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    num_list = [int(number) for number in stdin.split()]\n    prod = num_list[0] * num_list[1]\n    print('Yes' if prod % 4 == 0 else 'No')\n    return\nsolution(stdin.read())\n",
        "test": "assert solution(\"3\\n10 9 8\\n\") == \"No\"",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n\n    letters = list(s)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if ''.join(sorted(s[i:j])) < ''.join(sorted(t[i:j])):\n                print('Yes')\n                return\n\n    print('No')\n",
        "test": "assert solution(\"atlas\") == \"No\"",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A, B, C = list(map(int, stdin.split(' ')))\n    for i in range(max(A, B, C)):\n        if (i*A % B == C % B) and (i*B % A == C % A):\n            return 'YES'\n    return 'NO'\n    '''\n    A, B, C = list(map(int, stdin.split(' ')))\n    for i in range(max(A, B, C)):\n        if (i * A % B == C % B) and (i * B % A == C % A):\n            return 'YES'\n    return 'NO'\n",
        "test": "assert solution('7 8 1') == 'NO'",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(p: int):\n        return p > 0\n\n    def main():\n        line = stdin.readline().split()\n        if is_valid(int(line[0])) and is_valid(int(line[1])):\n            a = int(line[0])\n            b = int(line[1])\n            print(area(a, b))\n        else:\n            print('Invalid Input!')\n\n    def area(a: int, b: int) -> int:\n        return b ** 2 - (a - 1) ** 2\n\n    main()\n",
        "test": "assert solution(\"3 3\") == \"9\"",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split(' '))\n    return str(X // (Y + 2 * Z) + 1)\n\ndef",
        "test": "assert solution(stdin) == 3",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\ndef",
        "test": "assert solution(a_1, b_1, a_2, b_2,..., a_N, b_N, c_1, d_1, c_2, d_2,..., c_N, d_N) == N",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T = stdin.split('\\n')\n    N, T = int(N), int(T)\n    t = list(map(int, stdin.split('\\n')[1:]))\n    sum = 0\n    while t:\n        if t[0] + sum > T:\n            return sum + T\n        else:\n            sum += t.pop(0)\n    return sum\n\nprint(solution(input()))\n\n\"\"\"\nimport sys\n\n\ndef",
        "test": "assert solution('1 2\\n0 0') == '1'",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    number_of_books = int(stdin[0])\n    total_distance = 0\n    answer = []\n    for i in range(number_of_books):\n        book = int(stdin[1 + i])\n        if book <= total_distance:\n            answer.append(0)\n        elif book == total_distance + 1:\n            answer.append(1)\n        elif book > total_distance + 1:\n            answer.append(2)\n            total_distance += 1\n    return answer\n",
        "test": "assert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    moves = 0\n    for i in range(q):\n        n = int(stdin)\n        if n == 1:\n            moves = 0\n            break\n        while n!= 1:\n            if n % 2 == 0:\n                n = n / 2\n                moves += 1\n            elif n % 3 == 0:\n                n = n / 3\n                moves += 1\n            elif n % 5 == 0:\n                n = n / 5\n                moves += 1\n            else:\n                moves = -1\n                break\n        if n == 1:\n            moves += 1\n        else:\n            moves = -1\n        print(moves)\n    return moves\n",
        "test": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # We must check if we can finish by \"stacking\" figures in the columns\n    # (this is only possible when each column is greater than or equal to 3)\n\n    # Input\n    # n: number of columns\n    # a: columns heights\n\n    # Output\n    # \"YES\" if we can finish or \"NO\" otherwise\n\n    # Read n\n    n = stdin.split(\"\\n\")[0]\n    n = int(n)\n\n    # Read a\n    a = stdin.split(\"\\n\")[1].split(\" \")\n    a = [int(x) for x in a]\n\n    # Read t\n    t = int(stdin.split(\"\\n\")[2])\n\n    # Loop through t\n    for i in range(t):\n        # Loop through columns\n        for j in range(n):\n            # Finish if we have a >= 3\n            if a[j] >= 3:\n                # Finish if we have 3 or more in a\n                if sum(a) >= 3:\n                    return \"YES\"\n                # Otherwise, subtract 1\n                a[j] -= 1\n                break\n\n    return \"NO\"\n",
        "test": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    return a[::-1] == b[::-1]\n\n\ndef",
        "test": "assert solution('abacaba', 'bacabaa') == 4",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef",
        "test": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-17299999999701\"",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n') == '3\\n9\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        [a, b, x, y, n] = [int(x) for x in stdin.readline().split(' ')]\n        total = 0\n        if x > y:\n            min_val = x\n        else:\n            min_val = y\n        while n > 0:\n            if min_val <= a:\n                total += a\n                a -= 1\n                n -= 1\n            elif min_val <= b:\n                total += b\n                b -= 1\n                n -= 1\n            else:\n                min_val -= 1\n                n -= 1\n        print(total)\n\n\ndef",
        "test": "assert solution('1000000000 1000000000 1 1 1') == 9999999999000000000",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It doesn't matter what you return,\n    # it's only used for evaluation\n    return stdin\n",
        "test": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"2\"",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k, result = int(stdin.readline()), set()\n    for _ in range(k):\n        n, a = list(map(int, stdin.readline().split()))\n        a.sort()\n        result.add(tuple(a))\n    a = sum([len(x) for x in result])\n    if a == 0:\n        return 'NO'\n    b = sum([sum(x) for x in result])\n    for x, y in result:\n        if x == y:\n            continue\n        if b - (len(x) + len(y)) == 0:\n            return 'YES\\n{0} {1}'.format(len(x), len(y))\n    return 'NO'\nprint(solution(stdin))\n",
        "test": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \n",
        "test": "assert solution(\"2 -3 -1 5 -4\") == 13",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = {}\n    for _ in range(n):\n        s = stdin.readline().rstrip()\n        votes[s] = votes.get(s, 0) + 1\n    max_s = max(votes.items(), key=lambda x: x[1])[0]\n    return '\\n'.join(sorted(list(filter(lambda x: x!= max_s, votes.keys()))))\n",
        "test": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beet vet\"",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, a = [int(x) for x in stdin.strip().split(\" \")]\n    return str(min([a - i for i in range(1, N + 1)] + [abs(i - a) for i in range(1, N + 1)]))\n",
        "test": "assert solution('4 8\\n') == '8'",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"84\"",
        "test": "assert solution('1234 150 100') == '84'",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    if n == 1:\n        return 1\n    # n is the number of monkeys, and m is the number of dogs\n    m += 1\n    n -= 1\n    total = n * m\n    if total == 0:\n        return 1\n    if total % 2 == 0:\n        return total // 2\n    else:\n        return total // 2 + 1\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"2 2\") == \"8\"",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'POSSIBLE'",
        "test": "assert solution(\"4 1\\n1 2\\n2 3\\n3 4\\n4 3\") == \"POSSIBLE\"",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin[(x + 1) % 2::2] for x in range(len(stdin)))\n\"\"\"\n\ndef",
        "test": "assert solution('abc') == 'abc'",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    chain = stdin.split()\n    if len(chain) == 3:\n        return 'YES' if chain[0][-1] == chain[1][0] and chain[1][-1] == chain[2][0] else 'NO'\n    return 'NO'",
        "test": "assert solution(\"rng gorilla apple\") == \"YES\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4488,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(\"\\n\")[0]\n    B = stdin.split(\"\\n\")[1]\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n",
        "test": "assert solution(\"36 24\") == \"GREATER\"",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n  \n  data = stdin.split('\\n')\n  N = int(data[0])\n  s = data[1: N + 1]\n  t = data[N + 1:]\n  \n  return N",
        "test": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return 'T' if stdin == 'A' else 'G' if stdin == 'C' else 'A' if stdin == 'T' else 'C'\n    pass",
        "test": "assert solution('A') == 'T'",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('5\\n3 2 2 4 1') == '14'",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"3 3\\n2 2 2\") == \"1\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split('\\n')]\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]!= a[0][0]+a[1][1]+a[2][2] - a[0][2] - a[2][0] - a[1][1]:\n                return 'No'\n    return 'Yes'",
        "test": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    last_week = stdin\n    today = 'ARC' if last_week == 'ABC' else 'ABC'\n    return today\n",
        "test": "assert solution(\"ABC\") == \"ARC\"",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 4495,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split(' ')]\n    count = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution('''4 8 2''') == '''3'''",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    day_of_christmas = int(stdin)\n    if day_of_christmas == 25:\n        return 'Christmas'\n    elif day_of_christmas == 24:\n        return 'Christmas Eve'\n    elif day_of_christmas == 23:\n        return 'Christmas Eve Eve'\n    elif day_of_christmas == 22:\n        return 'Christmas Eve Eve Eve'\n    else:\n        return '-1'",
        "test": "assert solution('25') == 'Christmas'",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('7') == '4'",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(\" \"))\n    if a + b > c and b + c > a and a + c > b:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution('4 7 9 3') == 'Yes'",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 4499,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    s1, s2, s3 = stdin.split()\n    return ''.join(i[0] for i in [s1, s2, s3])\n",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\"",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 4500,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, c = map(int, stdin.split())\n    return 'Yes' if a + b >= c else 'No'\n",
        "test": "assert solution('50 100 120') == 'Yes'",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n",
        "test": "assert solution('4 8\\n7 9 8 9') == '5'",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(1 << 30)\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@functools.lru_cache(maxsize=None)\ndef",
        "test": "assert solution(",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution(\"3 5 6\") == \"Yes\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    for string in stdin.split(\"\\n\"):\n        if len(string) == 1:\n            print(0)\n        else:\n            string = string.replace(\"\\n\", \"\")\n            count = 0\n            while len(string) > 0:\n                if not is_even(string):\n                    string = string[:-1]\n                    count += 1\n                else:\n                    break\n            print(count)\n",
        "test": "assert solution(\"baab\") == 2",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return \"Yes\" if stdin[0] + stdin[1] + stdin[2] == \"abc\" else \"No\"\n",
        "test": "assert solution(\"abc\") == \"Yes\"",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 8 7 2 4\n   ... 9 7 2 9 3\n   ... ''')\n    '646'\n    >>> solution('''1\n   ... 1000000\n   ... 1000000\n   ... ''')\n    '757402647'\n    >>> solution('''2\n   ... 1 3\n   ... 4 2\n   ... ''')\n    '20'\n    \"\"\"\n    pass\n",
        "test": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == 646",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"8 8 8\\n8 1 1 1 1 1 1 1 1\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runtime Complexity: O(V)\n    Space Complexity: O(E + V)\n    \"\"\"\n    lines = stdin.split('\\n')\n\n    n = int(lines[0])\n    edges = []\n    for i in range(1, len(lines) - 1):\n        edges.append(tuple(map(int, lines[i].split(' '))))\n\n    graph = defaultdict(list)\n    for i in range(n - 1):\n        u, v = edges[i]\n        graph[u].append(v)\n        graph[v].append(u)\n\n    dist = {i: None for i in range(1, n + 1)}\n    dist[1] = 0\n\n    queue = [1]\n    while queue:\n        node = queue.pop(0)\n        for neighbor in graph[node]:\n            if dist[neighbor] is None:\n                dist[neighbor] = dist[node] + 1\n                queue.append(neighbor)\n\n    max_edge = 2\n    for i in range(1, n + 1):\n        if dist[i] is not None and dist[i] <= max_edge:\n            max_edge = dist[i]\n\n    return max_edge - 1\n",
        "test": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '1'",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n",
        "test": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    id_list = list(map(int, stdin.split(' ')[1:]))\n    s = [{'id': x, 'count': 1, 'pos': 0} for x in range(1, n + 1)]\n    for x in id_list:\n        s[x - 1]['count'] = 1\n        s[x - 1]['pos'] = 0\n        \n    count = 0\n    for x in range(1, n + 1):\n        if s[x - 1]['count'] == 1:\n            s[x - 1]['count'] = 0\n            if count > k:\n                count -= 1\n                s[x - 1]['pos'] = -1\n            else:\n                count += 1\n    \n    ans = []\n    for x in range(k):\n        ans.append(s[x]['id'])\n    \n    return '\\n'.join(list(map(str, ans)))\n",
        "test": "assert solution(\"5 4\\n1 1 2 2 1\\n\") == \"3\\n1 1 2 2\\n\"",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum damage a player may deal during n turns, if it plays optimally\"\"\"\n    \n    return 'WRONG ANSWER'",
        "test": "assert solution('''5",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abacaba\")\n    3\n    \"\"\"\n",
        "test": "assert solution('dfcbbcfeeedbaea') == 6",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"863725149\") == \"863725145\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the answer for the problem.\"\"\"\n    lines = stdin.strip().split('\\n')\n    n, m = [int(x) for x in lines[0].split()]\n    stdin = lines[1:]\n    stdin = [list(map(int, x.split())) for x in stdin]\n    stdin.sort(key=lambda x: x[0])\n    def helper(start, end):\n        if end - start + 1 == k:\n            return True\n        if end - start + 1 < k:\n            return False\n        for i in range(start + 1, end + 1):\n            if helper(start, i - 1) or (i == start and helper(i + 1, end)):\n                return True\n        return False\n    for i in range(m):\n        u, k = stdin[i]\n        k = k - 1\n        ans = -1\n        if helper(u, n - 1):\n            ans = stdin[i][1]\n        print(ans)",
        "test": "assert solution(\"8 9\\n1 2\\n2 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 9\\n7 8\\n8 9\\n9 9\\n\") == \"9 9 9 9 9 4 -1\"",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"5 3 2 8\") == \"YES\"",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0].split()[0])\n    m = int(stdin[0].split()[1])\n    x = [int(i) for i in stdin[1].split()]\n    \n    f = [0]*(m-1)\n    for i in range(m-1):\n        f[i] = abs(x[i] - x[i+1])\n    \n    print(\" \".join(str(i) for i in f))\n    return \"\"",
        "test": "assert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(test_input)\n    'YES'\n    \"\"\"\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    edges = [\n        (int(i), int(j))\n        for i, j in (line.split() for line in stdin[1:n + 1])\n    ]\n    queries = [\n        list(map(int, line.split()))[1:]\n        for line in stdin[n + 1:]\n    ]\n\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for edge in edges:\n        graph[edge[0]].add(edge[1])\n\n    root = 1\n    from queue import deque\n    queue = deque([(root, 0)])\n    visited = set()\n    while queue:\n        vertex, distance = queue.popleft()\n        if vertex in visited:\n            continue\n        if distance == 1:\n            return \"YES\"\n        visited.add(vertex)\n        queue.extend([\n            (nbr, distance + 1)\n            for nbr in graph[vertex]\n        ])\n    return \"NO\"\n",
        "test": "assert solution('8 7\\n2 5\\n2 6\\n3 7\\n4 7\\n5 7\\n7 7\\n1 7\\n3 7\\n7 7\\n1 1\\n2 2\\n1 2') == 'YES'",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        dists = sorted(list(map(int, stdin.readline().split())))\n        \n        maxdist = n - 1\n        roads = set()\n        \n        for dist1 in range(n):\n            for dist2 in range(dist1 + 1, n):\n                if dists[dist2] - dists[dist1] > maxdist:\n                    break\n                \n                roads.add((dist1, dist2))\n        \n        if len(roads) < n - 1:\n            print('NO')\n        else:\n            print('YES')\n            for road in roads:\n                print(' '.join(map(str, road)))\n            ",
        "test": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4\"",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    \n",
        "test": "assert solution(\"11111010\") == \"01111010\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tr\u1ea3 v\u1ec1 text bi\u1ec3u th\u1ee9c cho b\u00e0i to\u00e1n\n    \"\"\"\n    def get_count(l, r, k):\n        i = r\n        count = 0\n        while i >= l:\n            count += 1\n            i -= (i & -i)\n        return count\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    s = []\n    for i in range(1, n+1):\n        l, r = [int(x) for x in stdin.split('\\n')[i].split()]\n        s.append((l, r))\n    s = sorted(s, key=lambda x: x[1])\n    res = 0\n    i = 0\n    l = s[0][0]\n    while i < n:\n        if get_count(l, s[i][1], k) > 1:\n            res += 1\n            l = s[i][0]\n        i += 1\n    return f'{res}\\n{\", \".join([str(x) for x in range(1, res+1)])}'\n\ndef",
        "test": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\"",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(i) for i in stdin.readline().strip().split(' ')]\n    v = [int(i) for i in stdin.readline().strip().split(' ')]\n    out = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            out += min(abs(x[i] - x[j]), abs(x[j] - x[i])) * v[j] - abs(v[i]) * v[j]\n    print(out)\n    return ''\n",
        "test": "assert solution('5\\n2 1 4 3 5') == '19'",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''.join(stdin)\n",
        "test": "assert solution(\"5 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '21 7 15 21 3'",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution(\"1\\n100\") == \"YES\"",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n\n    a_binary = [int(x) for x in a]\n    b_binary = [int(x) for x in b]\n\n    b_list = [b_binary]\n    result = []\n    while sum(b_list[-1])!= 0:\n        b_list.append(list(map(lambda x: x[-1] // 2, b_list[-1])))\n        if sum(b_list[-1])!= 0:\n            b_list[-1] = list(map(lambda x: x[-1] % 2, b_list[-1]))\n\n    for i in range(len(b_list)):\n        result.append(sum([a_binary[i] for i in range(len(a_binary)) if a_binary[i] & b_list[i]]))\n\n    return ''.join([str(x) for x in result])\n",
        "test": "assert solution(\"4 5\\n1001\\n10101\\n\") == \"11\"",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0447\u0438\u0441\u043b\u0430 n, \u0434\u043b\u0438\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0432\u043d\u0430 2n.\n    \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e n/2, \u0432\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 - \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 n/2 + 1 \u0434\u043e n.\n    \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u044b \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u043d\u0438\u0445.\n    \u0421\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0432\u043d\u044f\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0435 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b.\n    \u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e \"NO\" (\u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a) \u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \"YES\" \u0438 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0442\u0440\u043e\u043a \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 4-\u0445 \u0447\u0438\u0441\u0435\u043b.\n    '''\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3\\n1 2\") == \"0\"",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return your answer\n    return stdin\n    pass",
        "test": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return a shortest path without changing the robot's endpoint.\n    \"\"\"\n    path = stdin.strip()\n    n = len(path)\n    \n    endpoints = set()\n    for i in range(n):\n        if path[i] == 'L':\n            endpoints.add((0, i))\n        elif path[i] == 'R':\n            endpoints.add((n-1, i))\n        elif path[i] == 'U':\n            endpoints.add((i, 0))\n        elif path[i] == 'D':\n            endpoints.add((i, n-1))\n    \n    endpoint_tuples = list(endpoints)\n    \n    # dp[i][j] is the minimum length of a substring without changing the endpoint\n    dp = [[n]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if (x, y) in endpoint_tuples and (x, y)!= (0, 0):\n                dp[i][j] = 1\n            else:\n                dp[i][j] = min(dp[i][k] + dp[k+1][j] for k in range(i, j))\n    \n    return dp[0][-1]",
        "test": "assert solution
        "num_ids": 2849,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # for example:\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    x = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if i!= j and a[i] == a[j]:\n                x += 1\n    return x\n",
        "test": "assert solution(\"5\\n1\\n4\\n2\\n5\\n3\") == 0",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                dp[i][j] = dp[i][k] + dp[k][j] for k in range(n) if k!= i and k!= j\n\n    return max(sum(dp[i][j] * arr[i] for i in range(n)) for j in range(n))\n",
        "test": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\") == \"15\"",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"8 8\") == \"1\"",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string answer which is the largest number of children content.\n    \"\"\"\n    # \u65b9\u6cd5\u4e00\uff0c\u4f7f\u7528\u66b4\u529b\u641c\u7d22\u65b9\u6cd5\n    # \u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0cN\u4e3acookie\u7684\u4e2a\u6570\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u53ea\u9700\u8981\u5b58\u50a8\u6700\u5c0f\u7684\u4e00\u4e2acookie\n    def max_children_num(cookies, childrens):\n        children_content = []\n        for child, cookie in zip(childrens, cookies):\n            if cookie >= child:\n                children_content.append(1)\n            else:\n                children_content.append(0)\n        return children_content.count(1)\n\n    children_num = len(childrens)\n    cookie_num = len(cookies)\n\n    # \u6bcf\u4e2achild\u6700\u5c11\u9700\u8981\u6709\u51e0\u4e2acookie\n    # \u65b9\u6cd5\u4e8c\uff0c\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u95ee\u9898\n    # \u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0cN\u4e3acookie\u7684\u4e2a\u6570\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u53ea\u9700\u8981\u5b58\u50a8\u6700\u5c0f\u7684\u4e00\u4e2acookie\n    def binary_search(left, right, cookies, childrens):\n        while left <= right:\n            mid = (left + right) // 2\n            # \u7edf\u8ba1\u6709\u591a\u5c11\u4e2achild content\n            content = max_children_num(cookies[mid:], childrens)\n            if content >= children_num:\n                return mid\n            elif content < children_num:\n                right = mid - 1\n        return right\n\n    return binary_search(0, cookie_num, cookies, childrens)\n",
        "test": "assert solution(\"\"\"1",
        "num_ids": 2394,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return solution_2(stdin)\n\ndef",
        "test": "assert solution(\"3\") == [1,3,3,1]",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def rec(n: int) -> int:\n        if n <= 0:\n            return 0\n        return rec(n & (n - 1)) + 1\n\n    n = int(stdin, base=2)\n    return rec(n)\n",
        "test": "assert solution(\"00000000000000000000000000001011\") == 3",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n",
        "test": "assert solution(\"123\") == \"124\"",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return max([A + B, A - B, A * B])\n",
        "test": "assert solution('1 2\\n') == 3",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n    # The distance from the origin to a point (a, b) is defined as\n    # \\sqrt{a^2 + b^2}.\n    # Thus, if we have D as the upper bound on the distance, we want to\n    # find the number of points whose distance from the origin is at most D.\n    #\n    # For each point (a, b), calculate its distance from the origin, and\n    # increment the count if it fits.\n    #\n    # Time complexity: O(N * sqrt(N)), where N is the number of points.\n    # Space complexity: O(sqrt(N)), for the sqrt(N) additional buckets\n    # for the buckets.\n    \n    n, d = map(int, stdin.split())\n    buckets = [0] * int(sqrt(n))\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        buckets[int(sqrt(x * x + y * y))] += 1\n    return str(sum(buckets[:d]))\n",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n\") == 3",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 4539,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % sum(map(int, str(n))) == 0:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N, A = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    cost_A = [0]\n    cost_B = [0]\n    for i in range(1, N + 1):\n        cost_A.append(int(stdin.split('\\n')[i].split(' ')[0]))\n        cost_B.append(int(stdin.split('\\n')[i].split(' ')[1]))\n    cost_total = 0\n    for i in range(1, N + 1):\n        cost_total += cost_A[i] + cost_B[i]\n    cost_total += cost_A[0] + cost_B[0]\n    cost_total += cost_A[0] + cost_B[-1]\n    cost_total += cost_A[-1] + cost_B[0]\n    cost_total += cost_A[-1] + cost_B[-1]\n    for i in range(1, N + 1):\n        cost_total += abs(cost_A[i] - cost_B[i])\n    return cost_total",
        "test": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return 'vowel' if stdin in ['a','e','i','o','u'] else 'consonant'\n",
        "test": "assert solution(\"a\") == \"vowel\"",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 4542,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    stones = list(stdin)\n    # for s in stones:\n    #     print(s)\n    black, white = 0, 0\n    for s in stones:\n        if s == \"B\":\n            black += 1\n        else:\n            white += 1\n    return str(black - white)\n",
        "test": "assert solution(\"BBBWW\") == \"1\"",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split())\n  return \"Yes\" if (a * b) ** 0.5 % 1 == 0 else \"No\"\n",
        "test": "assert solution('1 2') == 'No'",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in numbers:\n        if i == n:\n            count += 1\n    return str(count)\n",
        "test": "assert solution('3 1 4 1 5 9 2') == '4'",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 4546,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 4 6''')\n    'YES'\n    >>> solution('''5 10 15''')\n    'YES'\n    >>> solution('''5 10 15 5 20''')\n    'YES'\n    >>> solution('''15 10 5 20 10 5 20''')\n    'YES'\n    >>> solution('''5 10 10 5 20 5 20''')\n    'NO'\n    \"\"\"\n    a, b, c = tuple(map(int, stdin.split()))\n    return \"YES\" if b - a == c - b else \"NO\"\n",
        "test": "assert solution('2 4 6') == 'YES'",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 4547,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if N[1] == '9':\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"10\") == \"No\"",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for the problem.\n    '''\n    # Parse the input\n    n, m, x = list(map(int, stdin.split('\\n')[0].split(' ')))\n    tolls = list(map(int, stdin.split('\\n')[1].split(' ')))\n    # Calculate the solution\n    if x < n:\n        return str(tolls[x])\n    else:\n        return str(tolls[x % n])\n\ndef",
        "test": "assert solution('''5 3 3",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n  # H is the number of rows.\n  H = int(stdin.split()[0])\n  # W is the number of columns.\n  W = int(stdin.split()[1])\n  s = stdin.split()[2:]\n  print(s)",
        "test": "assert solution('2 2\\n..\\n..') == 'No'",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if (a + b) % 2 == 0 and (b + c) % 2 == 0 and (a + c) % 2 == 0 else \"No\"\n",
        "test": "assert solution(\"10 20 30\") == \"Yes\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4551,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    left = [int(line) for line in stdin.split(' ')]\n    right = [int(line) for line in stdin.split(' ')]\n    if sum(left) > sum(right):\n        return 'Left'\n    elif sum(left) < sum(right):\n        return 'Right'\n    else:\n        return 'Balanced'\n\nprint(solution(input()))\n",
        "test": "assert solution('3 8 7 1') == 'Left'",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('3\\n1 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    S = stdin[len(A) + 1:]\n    return \"Yes\" if len(S) == int(B) and S[-(int(A) + 1)] == '-' and S[:-(int(A) + 1)].isdigit() else \"No\"\n",
        "test": "assert solution(\"269-6650\") == \"Yes\"",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    W, A, B = map(int, stdin.split(' '))\n    return str(abs(A - B))\n",
        "test": "assert solution(\"1 1 1\") == \"0\"",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    {\n        \"A\": A,\n        \"B\": B,\n        \"K\": K\n    }\n    '''\n    # 1.\n    # Get input\n    A, B, K = map(int, stdin.split())\n\n    # 2.\n    # Get A - B\n    lower_bound = max(1, A-B+1)\n    upper_bound = min(10**9, A+B)\n    # print(\"lower_bound: {}\".format(lower_bound))\n    # print(\"upper_bound: {}\".format(upper_bound))\n\n    # 3.\n    # Get K and find how many smallest numbers and largest numbers are\n    # in between A and B\n    sorted_numbers = list(range(lower_bound, upper_bound+1))\n    # print(\"sorted_numbers: {}\".format(sorted_numbers))\n    sorted_numbers.sort()\n    # print(\"sorted_numbers: {}\".format(sorted_numbers))\n\n    # 4.\n    # Get the K smallest and K largest numbers\n    smallest_numbers = sorted_numbers[:K]\n    largest_numbers = sorted_numbers[-K:]\n\n    # 5.\n    # Find and print the K largest and K smallest numbers\n    print(smallest_numbers[-1])\n    print(largest_numbers[0])\n\n    return ''",
        "test": "assert solution('7 10 5\\n') == '7\\n8\\n9'",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC'",
        "test": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    cats, dogs, cats_req = map(int, stdin.split())\n    total = cats + dogs\n    dogs_req = total - cats_req\n    if cats_req == dogs_req:\n        return 'YES'\n    return 'NO'\n",
        "test": "assert solution(\"4 5 1\") == \"NO\"",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    X, t = list(map(int, stdin.split()))\n    return str(X - t)\n\n\nprint(solution(stdin.read()))\n",
        "test": "assert solution('100 17') == '83'",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    str_list = stdin.split(\" \")\n    if (int(str_list[0]) == 0) or (int(str_list[0]) > 10 ** 5):\n        print(\"-1\")\n    else:\n        mult_list = []\n        for i in range(1, len(str_list)):\n            mult_list.append(str(int(str_list[i]) * int(str_list[i-1])))\n        print(int(\"\".join(mult_list)))\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 3895,
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2018\n   ... 218''')\n    'Yes'\n    \"\"\"\n    N = int(stdin.split(\"\\n\")[0])\n    A = int(stdin.split(\"\\n\")[1])\n    if A + A // 2 < N:\n        return \"No\"\n    elif A // 500 + A // 500 * 2 < N:\n        return \"No\"\n    elif N - A - A // 2 < 0:\n        return \"No\"\n    elif N - A - A // 2 % 500 > 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert solution('2018\\n218') == 'Yes'",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 4561,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    if (a + b) % x == 0:\n        return \"delicious\"\n    if (a + b) % x > 0:\n        return \"safe\"\n    if (a + b) % x < 0:\n        return \"dangerous\"\n",
        "test": "assert solution(\"4 3 6\") == \"safe\"",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while k * k <= n:\n        k += 1\n    return str(k-1)",
        "test": "assert solution('10') == '9'",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"",
        "test": "assert solution('''3",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    return \"yes\" if len(set(s)) == len(s) else \"no\"\n",
        "test": "assert solution(\"uncopyrightable\") == \"yes\"",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\n\n\ndef",
        "test": "assert solution('') == '1'",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    _, roads = stdin.split('\\n')\n    roads = roads.split('\\n')\n\n    def dfs(source: int, visited: List[int]):\n        visited[source] = True\n        for dest in roads:\n            a, b = [int(x) for x in dest.split()]\n            if a == source:\n                if not visited[b]:\n                    dfs(b, visited)\n            if b == source:\n                if not visited[a]:\n                    dfs(a, visited)\n\n    visited = [False] * (len(roads) + 1)\n    res = 0\n\n    for source in range(1, len(roads) + 1):\n        if not visited[source]:\n            dfs(source, visited)\n            res += 1\n\n    return res\n",
        "test": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum value that can be displayed as your grade.\n    \n    >>> solution('3\\n5\\n10\\n15')\n    25\n    \"\"\"\n    \n    N = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(N)]\n    m = 0\n    \n    for i in range(N):\n        if i % 10 == 0:\n            if m < s[i]:\n                m = s[i]\n        else:\n            if m < s[i] + 10:\n                m = s[i] + 10\n    \n    return m\n",
        "test": "assert solution(\"3\\n5\\n10\\n15\\n25\") == \"30\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    \n    x, y = s[:n//2], s[n//2:]\n    \n    return max(len(set(x) - set(y)), len(set(y) - set(x)))\n\"\"\"\n",
        "test": "assert solution('aabbca') == 2",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n  my_dict = {'Sunny': 'Cloudy', 'Cloudy': 'Rainy', 'Rainy': 'Sunny'}\n  return my_dict[stdin]",
        "test": "assert solution(\"Rainy\") == \"Sunny\"",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 4570,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, A, B = map(int, stdin.split())\n    if A * N < B:\n        return str(A * N)\n    return str(B)\n",
        "test": "assert solution('7 17 120\\n') == '119'",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return M\n\n\"\"\"\n\ndef",
        "test": "assert solution('1 1\\n') == '3800'",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char not in stdin:\n            return char\n    return None\n\"\"\"\n\ndef",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the median of a given list of numbers.\n\n    Args:\n        stdin (str): Input string to process.\n\n    Returns:\n        str: String output\n    \"\"\"\n    nums = [int(i) for i in stdin.split()]\n    medians = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            j = i + 1\n            median = sorted(nums[:i] + nums[j:])[len(nums)//2]\n            medians.append(median)\n        else:\n            j = i - 1\n            median = sorted(nums[:i] + nums[j:])[len(nums)//2]\n            medians.append(median)\n    return \"\\n\".join([str(i) for i in medians])\n",
        "test": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution for leetcode problem #9\"\"\"\n    return str(solve(stdin))\n\ndef",
        "test": "assert solution('6\\n3 1 2 4 2 1') == '2'",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(stdin.split('\\n')[i].split(' ')[0]) for i in range(len(stdin.split('\\n')))))",
        "test": "assert solution(str(input())) == str(8)",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    if X == 0:\n        return 0\n    elif X == A + B + C:\n        return 1\n    else:\n        result = 0\n        for a in range(A + 1):\n            for b in range(B + 1):\n                for c in range(C + 1):\n                    if X == a * 500 + b * 100 + c * 50:\n                        result += 1\n        return result\n",
        "test": "assert solution(\"2\\n2\\n2\\n100\") == 2",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    return \"Yes\" if c >= a and c <= b else \"No\"\n",
        "test": "assert solution('1 3 2') == 'Yes'",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    numOfPizza, numOfMoto = map(int, stdin.split('\\n')[:2])\n    print(numOfPizza)\n    print(numOfMoto)",
        "test": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    # print(stdin)\n    n = int(stdin[0])\n    # print(n)\n    # print(stdin)\n    colors = []\n    for i in range(1, n+1):\n        colors.append(int(stdin[i]))\n    # print(colors)\n\n    # colors = sorted(colors)\n    # print(colors)\n    colors.sort()\n    # print(colors)\n    num_color = 0\n    # print(colors)\n    for i in range(0, len(colors) - 1):\n        if colors[i] == colors[i+1]:\n            num_color += 1\n    print(num_color + 1)\n    print(colors[len(colors)-1] + 1)\n    return\n",
        "test": "assert solution('4 2300 2700 2700\\n') == '2 2'",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    ramen_price = 700\n    boiled_egg_price = 100\n    topping_price = 100\n    topping_price_list = {\n        \"o\": boiled_egg_price,\n        \"x\": 0\n    }\n    topping_price_list[\"o\"] = topping_price_list[\"x\"] * 2\n    ramen_price += topping_price_list[stdin[0]] + topping_price_list[stdin[1]]\n    ramen_price += topping_price_list[stdin[2]]\n    return str(ramen_price)",
        "test": "assert solution('oxo') == 900",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 4582,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    honest = stdin.split(' ')[0]\n    is_dishonest = True if honest == 'D' else False\n\n    dishonest = stdin.split(' ')[1]\n    is_dishonest = True if dishonest == 'D' else False\n\n    return 'H' if is_dishonest ^ is_dishonest else 'D'",
        "test": "assert solution('D D') == 'D'",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 4583,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin]\n    formula = '+'.join(map(str, [a, b, c, d]))\n    return f\"{formula}={7}\"",
        "test": "assert solution('1222') == '1+2+2+2=7'",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "test": "assert solution('''5",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = stdin\n    return str(int(X)-1)",
        "test": "assert solution(\"6\") == \"3\"",
        "num_ids": 82,
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 0:\n        count += 1\n        n //= 10\n    if count < 3:\n        return 'No'\n    tmp = n % 10\n    while n!= 0:\n        if n % 10!= tmp:\n            return 'No'\n        n //= 10\n        tmp = n % 10\n    return 'Yes'\n",
        "test": "assert solution('1118') == 'Yes'",
        "num_ids": 2149,
        "indeed": false
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 5\n   ... 2 4\n   ... 3 6\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n\n    def _find_altars(a, b, c):\n        altars = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (\n                    a[i] <= b[j]\n                    and b[j] <= c[i]\n                    and c[i] <= a[j]\n                ):\n                    altars.append([i, j, j + 1])\n        return altars\n\n    altars = _find_altars(a, b, c)\n    return str(len(altars))\n",
        "test": "assert solution(",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    if int(x) < int(y):\n        return \"<\"\n    elif int(x) > int(y):\n        return \">\"\n    else:\n        return \"=\"\n",
        "test": "assert solution('B A') == '>'",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    rows, cols = int(string[0]), int(string[1])\n    grid = [['#' for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        row = stdin.split('\\n')[i]\n        for j, char in enumerate(row):\n            grid[i][j] = char\n    return grid\nprint(solution(stdin))\n\ndef",
        "test": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    booksA = [int(x) for x in stdin.split()]\n    booksB = [int(x) for x in stdin.split()]\n    minutes = 0\n    for i in range(m):\n        minutes = max(minutes, booksB[i])\n    for i in range(n):\n        minutes = max(minutes, booksA[i])\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        while minutes - booksB[j] >= k:\n            minutes -= booksB[j]\n            j += 1\n            count += 1\n        minutes = max(minutes, booksA[i])\n        i += 1\n    while j < m:\n        minutes = max(minutes, booksB[j])\n        j += 1\n        count += 1\n    return str(count)",
        "test": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == 3",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split(' ')\n    a = int(input_str[0])\n    b = int(input_str[1])\n    c = int(input_str[2])\n    x = int(input_str[3])\n    y = int(input_str[4])\n    # x * A - y * B\n    return a * x - b * y",
        "test": "assert solution('1500 2000 1600 3 2') == '7900'",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    total_num = 1\n    for x in range(1, number + 1):\n        total_num *= x\n    total_num %= pow(10, 9) + 7\n\n    divisor_num = 1\n    for x in range(1, number + 1):\n        if number % x == 0:\n            divisor_num *= x\n\n    return total_num - divisor_num\n",
        "test": "assert solution('3 10') == '6'",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n  x = int(stdin)\n  maxi = 0\n  for i in range(x - 1, 0, -1):\n    if x % i == 0:\n      if i ** (x // i) >= maxi:\n        maxi = i ** (x // i)\n        break\n  return str(maxi)\n",
        "test": "assert solution(\"4\") == \"4\"",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 4594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *diameters = map(int, stdin.split())\n    layers = 0\n    while len(diameters) > 0:\n        layer = []\n        while len(diameters) > 0 and diameters[0] <= diameters[-1]:\n            layer.append(diameters.pop(0))\n        if len(layer) > layers:\n            layers = len(layer)\n        diameters.pop(0)\n    return str(layers)\n",
        "test": "assert solution('''",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution(\"QWERTYASDFZXCV\") == \"5\"",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n\"\"\"\n",
        "test": "assert solution(\"3\\n8 12 40\") == \"2\"",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4597,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = 1\n    for i in range(1, n + 1):\n        p *= i\n    return p % (10 ** 9 + 7)\n",
        "test": "assert solution('3') == 6",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    ans = 0\n    for i in range(1, N+1):\n        ans += i\n    return str(ans)\n",
        "test": "assert solution(\"3\\n\") == \"6\"",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns alice's score minus bob's score when both players take the optimal strategy to maximize their scores\n    \"\"\"\n    N, *cards = map(int, stdin.split())\n    cards = sorted(cards)\n    alice = sum(cards[i] * (N - i) for i in range(N))\n    bob = sum(cards[i] * (i + 1) for i in range(N))\n    return alice - bob\n",
        "test": "assert solution(\"2\\n3 1\") == \"2\"",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass  # Write your code here",
        "test": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning\n    when she can use Special Move at most K times.\n\n    >>> solution(\"3 1\\n4 1 5\\n\")\n    5\n    '''\n    N, K = [int(x) for x in stdin.split('\\n')[:2]]\n    H = [int(x) for x in stdin.split('\\n')[2:]]\n    return min(2 * K + 1,\n               K + (2 * N) - 1,\n               (K + 1) * N + 1,\n               2 * K * (N + 1))\n",
        "test": "assert solution('''",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(4)\n\nprint(solution('1 10 2'))",
        "test": "assert solution(\"1 10 2\\n\") == \"4\"",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split('\\n'))\n    return str(min(A * D, B * C))\n",
        "test": "assert solution('600 300 220 420') == '520'",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    # get test case\n    test_case = int(stdin)\n\n    # loop for test cases\n    for case in range(test_case):\n        # get N\n        n = int(stdin)\n        # get A_i\n        a_i = [int(i) for i in stdin.split(' ')]\n\n        # create list of diff\n        diff_list = []\n        for i in range(len(a_i)):\n            diff_list.append(abs(a_i[i]-i))\n\n        # find all orders\n        orders = []\n        for i in range(len(diff_list)):\n            for j in range(i, len(diff_list)):\n                order = []\n                order.append(i)\n                order.append(j)\n                order.sort(reverse=True)\n                orders.append(order)\n\n        # print result\n        for i in range(len(orders)):\n            print(orders[i][0]+1, orders[i][1]+1, sep=' ', end=' ')\n        print('')",
        "test": "assert solution(\"2 4 4 0 2\\n\") == \"4\"",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(1, N+1):\n        s = sum([int(x) for x in str(i)])\n        if A <= s <= B:\n            result += i\n    return result\n",
        "test": "assert solution(\"10 20 5 2\") == \"84\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 4606,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f'ABC{n}'\n",
        "test": "assert solution(\"100\") == \"ABC100\"",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom datetime import datetime\n\nfrom functools import reduce\n\nDAYS = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday'\n]\n\ndef",
        "test": "assert solution('2 3') == '0'",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds out whether it is possible to lighten up Button 2 in the AtCoder Gym.\n    \"\"\"\n    N, *answers = map(int, stdin.split())\n    # The first line: N, the second line: a_i = 1, the third line:...\n    # The last line: a_i = N\n\n    # Use 2 pointers to solve this problem:\n    # p1: the pointer to the first button, always points to the first button which is lighten up\n    # p2: the pointer to the button which is \"the next\" to the last button which is lighten up\n    # You can use 1,2,...,N to represent the button numbers\n    p1, p2 = 0, 1\n    # If button i is not lighten up:\n    # => p1 always points to the next button which is lighten up (p2 always points to the next button which is lighten up)\n    # If button i is lighten up:\n    # => p1 points to the last button which is lighten up, and p2 points to the next button which is lighten up\n    # If p1==p2, it means that p1 and p2 are adjacent to each other, and p2 is the first button that is lighten up (p1 is the first button that is not lighten up).\n    # If p1>p2, it means that p1 is the first button that is lighten up, and p2 is the first button that is not lighten up.\n    # If p1<p2, it means that p1 is the first button that is not lighten up, and p2 is the first button that is lighten up.\n    while p1 < N and p2 < N:\n        if p1+1 == p2:\n            if answers[p1] == p2:\n                p2 += 1\n            elif answers[p1] == p1+1:\n                p1 += 1\n            elif answers[p1] == p2+1:\n                p2 += 1\n            elif answers[p1] == p1:\n                p1 += 1\n        elif p1+1 > p2:\n            if answers[p1] == p2:\n                p2 += 1\n            elif answers[p1] == p1+1:\n                p1 += 1\n            elif answers[p1] == p2+1:\n                p2 += 1\n            elif answers[p1] == p1:\n                p1 += 1\n        elif p1+1 < p2:\n            if answers[p1] == p2:\n                p2 += 1\n            elif answers[p1] == p2+1:\n                p2 += 1\n            elif answers[p1] == p1:\n                p1 += 1\n            elif answers[p1] == p1+1:\n                p1 += 1\n        if p1 == p2:\n            return str(p2-1)\n    return '-1'\n\nprint(solution(stdin=input()))\n",
        "test": "assert solution('3\\n1\\n1\\n') == '-1'",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_list = [int(x) for x in stdin.split('\\n')]\n    num_count = {}\n    for num in num_list:\n        if num not in num_count:\n            num_count[num] = 1\n        else:\n            num_count[num] += 1\n    count_sum = 0\n    for key in num_count:\n        if num_count[key] % 2 == 1:\n            count_sum += num_count[key]\n    print(count_sum)\n    return ''\n\"\"\"\n\nimport math\nfrom collections import defaultdict\nimport sys\n\ndef",
        "test": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'test'\n",
        "test": "assert solution(\"5 2\\n1 1 2 2 5\") == '1'",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2\\n3 1 2\\n6 1 1\\n\")\n    'Yes'\n    '''\n    n = int(stdin.split()[0])\n    numbers = stdin.split('\\n')[1:-1]\n    arr = [x.split(' ') for x in numbers]\n\n    start = (0, 0)\n    end = (0, 0)\n    for t, x, y in arr:\n        t = int(t)\n        x = int(x)\n        y = int(y)\n        if t < end[1]:\n            return 'No'\n        else:\n            end = (x, y)\n\n        if t < start[1]:\n            start = (x, y)\n    return 'Yes'\n",
        "test": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(round(0.5 * (a + b), 0)))\n",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = [None] * M\n    for _ in range(M):\n        edges[_] = list(map(int, stdin.split()))\n    bridges = 0\n    for i in range(M):\n        for j in range(i+1, M):\n            if edges[i][0] == edges[j][0] or edges[i][1] == edges[j][1]:\n                bridges += 1\n    return str(bridges)\n",
        "test": "assert solution('''",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    return str(max(set(A, B, C) - set([A, B, C])))\n\"\"\"\n\n\"\"\"\n    Title:    Different Number\n    Subdomain:          Mathematics\n    Domain:             Math\n    Author:         Ferhat Berber\n    Date:       March 5, 2020\n    Description:\n        Let's learn some math with Python!\n        Your task is to find out which of the given three integers is different from the others.\n\"\"\"",
        "test": "assert solution('5 7 5') == '7'",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    result = 0\n    while result == 0 or (a + b) / (a * (e - c) - b * (d - e)) > result:\n        if not (a + b) / (a * (e - c) - b * (d - e)) < result:\n            break\n        if e - c <= 0 or d - e <= 0 or (a + b) / (a * (e - c) - b * (d - e)) < result:\n            result = (a + b) / (a * (e - c) - b * (d - e))\n        if a * (c - e) - b * (e - c) < 0:\n            a += 1\n        else:\n            b += 1\n        if a > 0 and b > 0 and (a + b) / (a * (e - c) - b * (d - e)) < result:\n            result = (a + b) / (a * (e - c) - b * (d - e))\n    return str(int(result * 100)) + \" \" + str(int(result * (e - c)))",
        "test": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport unittest\nimport re\n\ndef",
        "test": "assert solution(\"internationalization\") == \"i18n\"",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    matrix = []\n    for row in stdin.splitlines():\n        matrix.append([char for char in row])\n\n    # can rotate by getting top right to bottom left and vice versa\n    # can also rotate by swapping cols\n    # this is O(1) space and O(n^2) time\n    if len(matrix[0]) == len(matrix) and len(matrix[0]) == len(matrix[0]):\n        return \"YES\" if matrix == [list(reversed(row)) for row in zip(*matrix)] else \"NO\"\n    return \"NO\"\n",
        "test": "assert solution('top\\npot') == 'NO'",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # get input and initialize variables\n    s = stdin\n    k = int(stdin.readline())\n    # get substrings and sort them in ascending order\n    substrings = [s[i:j+1] for i in range(len(s)) for j in range(i, len(s))]\n    substrings.sort()\n    # print the k-th lexicographically smallest substring\n    print(substrings[k-1])\n\n    return \"\"",
        "test": "assert solution('aabbcc') == 'abcc'",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the area of the white region within the rectangle after Snuke finished painting.\n\n    Args:\n        stdin (str): Standard input of the problem.\n\n    Returns:\n        str: The answer to the problem.\n    \"\"\"\n\n    (width, height, n) = map(int, stdin.split(' '))\n    points = []\n    for _ in range(n):\n        (x, y, a) = map(int, stdin.split(' '))\n        points.append((x, y, a))\n\n    def find_area(start: int, end: int, points: list, direction: int):\n        \"\"\"Find the area of the white region within the rectangle after Snuke finished painting.\n\n        Args:\n            start (int): The start point of the direction.\n            end (int): The end point of the direction.\n            points (list): The coordinates of the points.\n            direction (int): The direction of the painting.\n\n        Returns:\n            int: The area of the white region within the rectangle after Snuke finished painting.\n        \"\"\"\n\n        result = 0\n        for x, y in points:\n            if x < start or x > end or (direction == 4 and y > start) or (direction == 3 and y < end):\n                result += 1\n\n        return result\n\n    area = 0\n    for i in range(1, n):\n        area += (points[i][2] - points[i - 1][2]) * find_area(points[i - 1][0], points[i][0], points, points[i][2])\n\n    return area % (10 ** 9 + 7)\n",
        "test": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, C, S, F = map(int, stdin.split())\n    arr = [[S, C]]\n    for i in range(1, N):\n        arr.append([arr[-1][1] * F // GCD(arr[-1][1], F), GCD(arr[-1][1], F)])\n    arr.sort()\n    print(\"\\n\".join(map(str, arr)))\n    return \"\"\n\ndef",
        "test": "assert solution(\"6 5 1\\n1 10 1\") == \"12\\n11\\n0\\n\"",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.split()))\n    matrix = []\n\n    for _ in range(H):\n        matrix.append(stdin.split()[1])\n\n    for _ in range(H):\n        matrix.append(stdin.split()[-1])\n\n    return '\\n'.join(matrix)\n",
        "test": "assert solution(\"3 3\\n.*\\n.*\\n.*\\n.*\") == \".*.\\n.*\\n.*\\n.*\\n.*\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return \"YES\" if len(set(map(int, stdin.split()))) == len(stdin.split()) else \"NO\"\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    test_num = int(stdin.readline())\n\n    for i in range(test_num):\n        participant_num = int(stdin.readline())\n        participants_weight = list(map(int, stdin.readline().split()))\n        participant_weight_sum = sum(participants_weight)\n        participants_weight_sum_set = set(participant_weight_sum)\n\n        for j in participants_weight_sum_set:\n            if participants_weight_sum - j in participants_weight_sum_set:\n                return str(participants_weight_sum - j)\n",
        "test": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\"",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        i = 1\n        while n % x:\n            i += 1\n            n += n // x\n        print(i)\n",
        "test": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\\n\") == \"3\"",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        s, n, m = stdin.readline().split()\n        p = list(map(int, stdin.readline().split()))\n        x = {c: 0 for c in s}\n        for i in p:\n            if x[s[i]]!= 0:\n                x[s[i]] = 0\n            else:\n                x[s[i]] += 1\n        for k in x.keys():\n            print(x[k], end=' ')\n        print()\n",
        "test": "assert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''",
        "test": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"4\") == 'YES'",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    roads = {(int(i) - 1, int(j) - 1) for i, j, _ in [stdin.split(' ') for _ in range(m)]]\n    couriers = [tuple([int(i) - 1 for i in stdin.split(' ')]) for _ in range(k)]\n    couriers = set(map(tuple, couriers))\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for road in roads:\n        dp[road[0]][road[1]] = road[2]\n        dp[road[1]][road[0]] = road[2]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    res = 0\n    for courier in couriers:\n        res += min(dp[courier[0]][x] + dp[x][courier[1]] for x in range(n))\n    return str(res)\n",
        "test": "assert solution('''",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    pass\n",
        "test": "assert solution(\"4\\n6\\n1\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n",
        "test": "assert solution(\"2\\n2\\n1\\n2\\n3\\n2\\n1\\n3\\n4\\n3\\n2\\n1\\n2\\n1\\n2\\n3\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n2\\n1\\n3\\n4\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n2\\n2\\n3\\n3\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(stdin.split())\n",
        "test": "assert solution(\"3 5\\n0 3 1\") == \"7\"",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    pass",
        "test": "assert solution(\"5\\n4 3\\n2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Not implemented yet\"",
        "test": "assert solution(\"500 4\\n217871987498122 10\") == \"899999999999999999\"",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(str(input())) == str(input()).split()[0]",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    t, *a = stdin.splitlines()\n    t, a = int(t), [tuple(map(int, *line.split())) for line in a]\n    assert 1 <= t <= 100\n    assert all(0 <= n <= 100 and 1 <= k <= min(n, 26) for n, k in a)\n\n    from itertools import product\n    from functools import lru_cache\n    from string import ascii_lowercase\n\n    @lru_cache(None)\n    def f(n, k):\n        if k == 0:\n            return 0\n        return min(\n            sum(\n                f(n - 1, i)\n                for i in range(1, k + 1)\n                if i in {ascii_lowercase.index(i) for i in set(s) & set(ascii_lowercase)}\n            )\n            for s in product(ascii_lowercase, repeat=n)\n        )\n\n    return \"\".join(\n        min(\n            s,\n            key=lambda s: {ascii_lowercase.index(i) for i in set(s) & set(ascii_lowercase)}\n           .__getitem__,\n        )\n    )\n",
        "test": "assert solution(\"5 2\\n4 4\") == \"ccbbaa\"",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        \n        # greedy algo\n        # a[0] > a[n-1]\n        a_eaten = a[0]\n        b_eaten = 0\n        b_index = n - 1\n        for i in range(n):\n            if a_eaten < b_eaten:\n                break\n            if i < b_index:\n                b_eaten += a[i]\n                b_index = i\n            a_eaten += a[i]\n        print(i+1, a_eaten, b_eaten)\n",
        "test": "assert solution(\"3\\n1 1 1\\n2\") == \"1 1000 0\"",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, k, b = [int(i) for i in stdin.split('\\n')[0].split()]\n    a.extend(b)\n    return''.join([str(i) for i in a])\n",
        "test": "assert solution(\"5 5 6 6 5\\n1 2 5 4 3\") == '11'",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def solve(floors, options, init):\n        memo = [[0] * (len(floors) + 1) for _ in range(len(floors) + 1)]\n        for x in range(len(floors)):\n            memo[x + 1][x + 1] = floors[x]\n            memo[x][x + 1] = options[x]\n            memo[x][x] = init[x]\n        for l in range(2, len(floors) + 1):\n            for i in range(1, l):\n                for j in range(i, l):\n                    memo[i][j] = min(memo[i][j], memo[i][j - 1] + floors[j - 1])\n                    memo[i][j] = min(memo[i][j], memo[j][j] + floors[j - 1])\n                    memo[i][j] = min(memo[i][j], memo[i + 1][j] + options[j - 1])\n        return memo[1][len(floors)]\n\n    n, c = [int(x) for x in stdin.split()]\n    init = [int(x) for x in stdin.split()]\n    return''.join([str(solve(init, [int(x) for x in stdin.split()[:n - 1]], init)) for _ in range(n)])\n\n\ndef",
        "test": "assert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\\n\") == \"0 2 4 7 8 11 13 14 16 17\"",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.split(\"\\n\")[0])\n    k = int(stdin.split(\"\\n\")[1])\n    print(\"aaabb\")\n    print(\"aabab\")\n    print(\"baaba\")\n    print(\"bbaaa\")\n    print(\"abb\")\n    print(\"bab\")\n    print(\"aaaaabaaaaabaaaaaaaa\")\n\ndef",
        "test": "assert solution('5 10') == 'bbaaa'",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 10\\n1 2 3 4\\n10 9 8 7\\n5 10\\n1 2 3 4\")\n    6\n    \"\"\"\n   ...\n",
        "test": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19') == '6\\n1\\n5\\n10'",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n    \n",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\"",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef",
        "test": "assert solution('''",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(stdin.split(' '), key=lambda x: int(x), reverse=True))",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1 1 1 1\\n4\") == \"NO\"",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a permutation that meets the requirements.\n    :param stdin: String representation of stdin.\n    :return: String representation of stdout.\n    \"\"\"\n    pass\n\n\ndef",
        "test": "assert solution(\"2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    pass",
        "test": "assert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n",
        "test": "assert solution('') == ''",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\")\n    '1'\n    >>> solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\")\n    '0'\n    >>> solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\")\n    '3'\n    \"\"\"\n    stdin = stdin.split('\\n')\n    q = int(stdin[0])\n    stdin = stdin[1:]\n    for i in range(q):\n        n, k = map(int, stdin[0].split())\n        stdin = stdin[1:]\n        s = stdin[0]\n        stdin = stdin[1:]\n        res = 0\n        for char in s:\n            if char!= 'R' and char!= 'G':\n                res += 1\n        if n - k >= k:\n            print(res)\n        else:\n            print(n - k)\n",
        "test": "assert solution(\"BBBRR\") == 0",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('1 1 1 1 1 2 2\\n') == 3",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().rstrip())\n    for _ in range(q):\n        n = int(stdin.readline().rstrip())\n        numbers = list(map(int, stdin.readline().rstrip().split()))\n        c = 0\n        l = 0\n        for i in range(len(numbers)):\n            if numbers[i] == i + 1:\n                c += 1\n            else:\n                l = i + 1\n        if c == len(numbers) - 1 and l == len(numbers):\n            print('YES')\n        else:\n            print('NO')\n\nsolution(input())\n",
        "test": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gives the maximum number of candies Santa can give to kids so that he will be satisfied.\n\n    Args:\n        stdin: input\n\n    Returns:\n        str: the maximum number of candies Santa can give to kids so that he will be satisfied\n    \"\"\"\n    return stdin",
        "test": "assert solution(\"1 1\\n1\") == \"0\"",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if k % 2 == 0:\n            if n % k == 0:\n                print(\"YES\")\n                print(*[n // k for i in range(k)])\n            else:\n                print(\"NO\")\n        else:\n            if n % (k - 1) == 0:\n                print(\"YES\")\n                print(*[(n // (k - 1)) + i for i in range(k)])\n            else:\n                print(\"NO\")\n",
        "test": "assert solution(\"8 7\") == \"YES\"",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n",
        "test": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n, k = map(int, stdin.split(' '))\n    beads = s.split(' ')\n",
        "test": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\neccedececacbcbccbdec\\n\") == \"6\\n3\\n5\\n4\\n15\\n10\"",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_input():\n        return int(stdin)\n    def get_line() -> list[int]:\n        return list(map(int, stdin.split('\\n')[0].split(' ')))\n\n    def get_input_list() -> list[int]:\n        return list(map(int, stdin.split('\\n')[0].split(' ')))\n    def get_line_list() -> list[int]:\n        return list(map(int, stdin.split('\\n')[0].split(' ')))\n\n    n, k = get_line()\n    a = get_line_list()\n    \n    odd_sum = 0\n    for x in a:\n        if x % 2 == 1:\n            odd_sum += 1\n    \n    if odd_sum > k:\n        print('NO')\n        return\n    \n    if odd_sum == k:\n        print('YES')\n        print(' '.join(map(str, a)))\n        return\n    \n    while odd_sum!= k:\n        if len(a) % 2 == 0:\n            if odd_sum!= k:\n                print('NO')\n                return\n            break\n        if k < len(a) % 2:\n            print('NO')\n            return\n        a.pop()\n        k -= 1\n        odd_sum = 0\n        for x in a:\n            if x % 2 == 1:\n                odd_sum += 1\n\n    print('YES')\n    print(' '.join(map(str, a)))\n    return",
        "test": "assert solution(solution.test_cases[0]) == solution.test_cases[1]",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return \"hint\"\n\n\"\"\"\n\n\ndef",
        "test": "assert solution
        "num_ids": 3571,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    res = []\n    for i in range(numRows):\n        row = [1 for _ in range(i+1)]\n        if i >= 2:\n            for j in range(1,i):\n                row[j] = res[i-1][j-1] + res[i-1][j]\n        res.append(row)\n    return res\n",
        "test": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a list of valid email addresses in lexicographical order\"\"\"\n    pass\n",
        "test": "assert solution(\"1 xyz@test.com\\n2 abc@test.com\\n1 abc@test.com.com\") == ['abc@test.com', 'xyz@test.com']",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    #your solution goes here\n    #=========================\n    return []\n    #=========================",
        "test": "assert solution('10') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512]",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    doc = stdin\n    m = 0\n    state = 0\n    for x in doc:\n        if state == 1:\n            if x == \">\":\n                state = 2\n            else:\n                m = max(m,1)\n                state = 0\n        elif state == 2:\n            if x == \"?\":\n                state = 3\n            elif x == \"/\":\n                state = 4\n            else:\n                state = 0\n        elif state == 3:\n            if x == \"/\":\n                state = 4\n            else:\n                state = 3\n        elif state == 4:\n            if x == \">\":\n                state = 2\n            else:\n                state = 4\n        elif state == 0:\n            if x == \"<\":\n                state = 1\n            else:\n                m = max(m,1)\n    return m",
        "test": "assert solution(",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"YES\" if re.match('^[7-9]\\d{9}$', stdin) else \"NO\"\n",
        "test": "assert solution(\"90919284628\") == \"NO\"",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    m = set(map(int, input().split()))\n    n = set(map(int, input().split()))\n    for i in sorted(m ^ n):\n        print(i)\n\nSolution:\n\ndef",
        "test": "assert solution('4\\n2 4 6 8\\n4\\n2 3 6 7') == '6\\n7'",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n\nTest Cases\nExample 1\nInput\n5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \nOutput\n81.00\nExplanation\n\nAverage = (97+50+91+72+80)/5\n\nExample 2\nInput\n5\nMARKS      CLASS      NAME       ID        \n92         2          Calum      1         \n82         5          Scott      2         \n94         2          Jason      3         \n55         8          Glenn      4         \n82         2          Fergus     5\nOutput\n81.00\nExplanation\n\nAverage = (92+82+94+55+82)/5\n'''\n\nfrom collections import namedtuple\n\nn = int(input())\nnms = input().split()\n\nStudent = namedtuple('Student', nms)\n\nsum = 0\nfor i in range(n):\n    data = input().split()\n    stu = Student(data[0], data[1], data[2], data[3])\n    sum += float(stu.MARKS)\n\nprint('{:.2f}'.format(sum / n))",
        "test": "assert solution(",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution function\n    '''\n    # Write your code here\n    # Write your code here\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"Weird\"\n    elif n % 2 == 0 and n > 5 and n < 21:\n        return \"Weird\"\n    elif n % 2 == 0 and n > 20:\n        return \"Not Weird\"\n    else:\n        return \"Not Weird\"\n",
        "test": "assert solution('20') == 'Weird'",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import xml.etree.ElementTree as etree\n    import re\n    import datetime\n\n    root = etree.fromstring(stdin)\n    count = 0\n    for elem in root.iter():\n        count += len(elem.attrib)\n\n    return str(count)\n",
        "test": "assert solution(\"\"\"<feed xml:lang='en'>",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \n    A = list(map(float, stdin.strip().split()))\n    B, C, D = A[:3]\n    \n    BC = [C[0]-B[0], C[1]-B[1], C[2]-B[2]]\n    CD = [D[0]-C[0], D[1]-C[1], D[2]-C[2]]\n    \n    dot = (BC[0]*CD[0] + BC[1]*CD[1] + BC[2]*CD[2])\n    \n    mag1 = math.sqrt(BC[0]**2 + BC[1]**2 + BC[2]**2)\n    mag2 = math.sqrt(CD[0]**2 + CD[1]**2 + CD[2]**2)\n    \n    cosTheta = dot/(mag1*mag2)\n    \n    theta = math.acos(cosTheta)\n    \n    theta = math.degrees(theta)\n    \n    return str(round(theta,2))\n\nprint(solution(stdin))\n",
        "test": "assert solution('-1 -1 -1 -1') == -180.0",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    def score_words(words: list[str]) -> int:\n        return sum([2 if sum([i in \"aeiouy\" for i in word]) % 2 == 0 else 1 for word in words])\n    return score_words(stdin.split())",
        "test": "assert solution('aaa bbb ccc ddd eee ffff ggggg') == '12'",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('X')\n    True\n    >>> solution('XX')\n    True\n    >>> solution('IX')\n    True\n    >>> solution('XIV')\n    True\n    >>> solution('I')\n    False\n    >>> solution('XL')\n    False\n    >>> solution('LX')\n    False\n    >>> solution('XXL')\n    False\n    >>> solution('XXX')\n    False\n    >>> solution('XLIV')\n    True\n    >>> solution('XXXLIV')\n    False\n    >>> solution('CDXCIX')\n    True\n    \"\"\"\n    roman_numeral_map = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n\n    for k, v in roman_numeral_map.items():\n        stdin = stdin.replace(k, str(v))\n\n    return stdin == ''\n",
        "test": "assert solution(\"XX\") == False",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(stdin.split('\\n')))\n    # return '\\n'.join(sorted(stdin.split('\\n'), key=lambda x: x[:5]))",
        "test": "assert solution(\"9199005\") == \"999005\"",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    marks = []\n    \n    # read the data of the list\n    for _ in range(int(stdin.readline())):\n        marks.append(list(map(int, stdin.readline().strip().split())))\n    # read the data of query\n    query_name = stdin.readline().strip()\n    # calculate the average\n    marks_sum = sum([marks[i][j] for i in range(len(marks)) for j in range(len(marks[i]))])\n    average = round(marks_sum/len(marks),2)\n    # print the output\n    print(average)\n    return 'NaN'",
        "test": "assert solution(\"3\\t3\\n\") == '0.00'",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin.readline())\n    L = []\n    for i in range(N):\n        L.append(stdin.readline().split(' '))\n    # print(L)\n    L.sort(key = lambda x: int(x[2]))\n    for i in L:\n        print(\"{0} {1}\".format(i[0], i[1]))\n    return ''",
        "test": "assert solution(\"3\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nPaul Lockwood 38 M\\n\") == \\",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    y = int(stdin.readline())\n    z = int(stdin.readline())\n    n = int(stdin.readline())\n\n    # Your code goes here\n\n    coordinates = [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if (i + j + k)!= n]\n    print(coordinates)\n    return coordinates\n",
        "test": "assert solution('1 1 2 3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3]]'",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:",
        "test": "assert solution('5 6') == '11 2'",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution to the problem is to extract the characters at the even-numbered positions\n    from O and extract the characters at the odd-numbered positions from E.\n    For example, the password can be extracted from O as o and from E as e.\n    We combine the characters from these two arrays into a new array, and then sort it in ascending order.\n    \"\"\"\n    return \"\".join(sorted(\"\".join(sorted(stdin[::2])) + \"\".join(sorted(stdin[1::2]))))\n",
        "test": "assert solution('abc') == 'abc'",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 4677,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"01B0\")\n    '0'\n    \"\"\"\n    return stdin.replace(\"01\", \"0\").replace(\"B\", \"\").replace(\"11\", \"1\")\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # input\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split(' ')]\n\n    # init\n    stools = []\n    \n    # loop\n    for i in range(N):\n        for j in range(len(stools)):\n            # condition\n            if A[i] > stools[j]:\n                stools.insert(j, A[i])\n                break\n        # insert\n        if len(stools) == i:\n            stools.append(A[i])\n        \n    # output\n    return sum(stools)\n",
        "test": "assert solution('4\\n2 1 5 4 3') == 4",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return \"A\"",
        "test": "assert solution(\"aca\\naccc\\nca\") == \"A\"",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 4680,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    c = int(stdin.split(' ')[2])\n    return 'YES' if (a+b+c) == 17 and (a*5+b*7) == (c*5) and (a*5+c*7) == (b*7) else 'NO'",
        "test": "assert solution('7 5 7\\n') == 'NO'",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(nth_Lucas(int(stdin)))\n\ndef",
        "test": "assert solution('5') == '11'",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = [int(i) for i in stdin.split()]\n    area = (a+b)/2 * h\n    return str(area)\n",
        "test": "assert solution('10 7 2') == '35'",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    if len(stdin) == 1:\n        n = int(stdin[0])\n        m = [0] * n\n        for i in range(n):\n            m[i] = int(stdin[0].split()[i])\n    else:\n        m = stdin[0].split()\n    return str(sum(m[i] * m[j] for i in range(len(m)) for j in range(i + 1, len(m))) % (10 ** 9 + 7))\n    # the code above is equivalent to:\n    # sum = 0\n    # for i in range(len(m)):\n    #     for j in range(i + 1, len(m)):\n    #         sum += m[i] * m[j]\n    # return str(sum % (10 ** 9 + 7))\n\nprint(solution(stdin.read()))",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 4684,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    red, green, blue = [int(stdin) for stdin in stdin.split(\" \")]\n    print(\"YES\" if (red * 100 + green * 10 + blue) % 4 == 0 else \"NO\")\n    return ''",
        "test": "assert solution(\"1 2 3\") == 'NO'",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(s) for s in stdin.split(' ')]\n    for _ in range(int(stdin.split(' ')[1])):\n        if A % 2 == 0:\n            A = int(A / 2)\n            B = int(B / 2)\n            C = int(C / 2)\n        else:\n            A = int(A / 2)\n            B = int(B / 2)\n            C = int(C / 2)\n    print(A + B + C)\n    return \"\"\n",
        "test": "assert solution(\"5 3 11\\n1\") == \"30\"",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"No\"\n    char_dict = {}\n    for char in stdin:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in char_dict:\n        if char_dict[char] % 2!= 0:\n            ans = \"No\"\n            break\n    return ans",
        "test": "assert solution('aaabbbbc') == 'No'",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns K-th smallest integer in the array after the N operations.\n\n    >>> solution(\"3 4\\n1 1\\n2 2\\n3 3\\n\")\n    3\n    \"\"\"\n    from itertools import accumulate\n    # Read in N and K.\n    n, k = map(int, stdin.split())\n    # Read in the array of N pairs.\n    numbers = [tuple(map(int, pair.split())) for pair in stdin.split(\"\\n\")[1:]]\n    # Build a list of cumulative sums.\n    sums = [0] + list(accumulate([num for _, num in numbers]))\n    # Build a list of cumulative sums.\n    # Sort it based on cumulative sum list.\n    sums.sort()\n    # Return the k-th value from the list.\n    return sums[k]\n",
        "test": "assert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\") == '3'",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 4688,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(2**(int(stdin.split()[1])-1))",
        "test": "assert solution('''2 2''') == '2'",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    dist = [int(x) for x in stdin.split()]\n    dists = []\n    dist.sort()\n    dists.append(0)\n    for i in range(1, n):\n        dists.append(dist[i] - dist[0])\n    # print(dists)\n    \n    for i in range(1, n):\n        dists[i] = min(dists[i-1], dists[i])\n    # print(dists)\n    \n    return min(dists[n-1], k-dist[0]-dists[n-1])\n\"\"\"\ndef",
        "test": "assert solution(\"5 10 15\") == \"10\"",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Reads the input for the two rectangular sides and returns the\n    larger area of the two.\n    '''\n    first_width, first_height, second_width, second_height = [\n        int(x) for x in stdin.split()]\n    return str(max(first_height * first_width, second_height *\n                   second_width))\n",
        "test": "assert solution(\"3 5 2 7\") == \"15\"",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 4691,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    ac = 0\n    wa = 0\n    tle = 0\n    re = 0\n    for line in lines:\n        if line == \"AC\":\n            ac += 1\n        elif line == \"WA\":\n            wa += 1\n        elif line == \"TLE\":\n            tle += 1\n        else:\n            re += 1\n    return f\"AC x {ac}\\nWA x {wa}\\nTLE x {tle}\\nRE x {re}\"\n",
        "test": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'",
        "num_ids": 2374,
        "indeed": false
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    return f'{(M - 20) % 24}'\n\nprint(solution(input()))\n",
        "test": "assert solution(\"21\") == \"27\"",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b >= 10:\n        return \"error\"\n    else:\n        return str(a + b)",
        "test": "assert solution('6 3') == '9'",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first line contains an integer N.\n    The next N lines contain an integer each, with no two consecutive integers being equal.\n    Return the minimum distance to travel to all the houses.\n    \"\"\"\n\n    # get input data\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n\n    # calculate and print result\n    print(max(lst) - min(lst))\n\n    return solution\n",
        "test": "assert solution('4\\n2 3 7 9') == '7'",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 4695,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # a: List[int] = list(map(int, stdin.split()))\n    # a = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % 12 == a[j] % 12:\n                return 'Yes'\n    return 'No'",
        "test": "assert solution('1 2') == 'No'",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 4696,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Even' if a * b % 2 == 0 else 'Odd'\n",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    s, c = tuple(map(int, stdin.split(\" \")))\n\n    # Define global variables\n    global total\n    total = 0\n\n    # Return solution\n    return total_scc_groups(s, c)\n\n\ndef",
        "test": "assert solution('1 6\\n') == 2",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the time to solve the given number of problems and print the result.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: The result.\n    \"\"\"\n    num_of_problems = int(stdin[0])\n    problems_times = stdin[1:num_of_problems + 1]\n    num_of_drinks = int(stdin[num_of_problems + 1])\n    drinks_times = stdin[num_of_problems + 2:]\n\n    problems_times = list(map(int, problems_times.split(\" \")))\n    drinks_times = list(map(int, drinks_times.split(\" \")))\n\n    # calculate the summation of the time it takes for Joisino to solve the problems.\n    summation = 0\n    for i in problems_times:\n        summation += i\n\n    # calculate the time it takes for Joisino to solve each problem.\n    time = []\n    for i in range(0, num_of_drinks):\n        for j in range(0, num_of_problems):\n            time.append(drinks_times[j] + summation)\n        # calculate the summation of the time it takes for Joisino to solve the problems.\n        summation = 0\n        for k in time:\n            summation += k\n        time = []\n\n    for i in range(0, num_of_drinks):\n        print(summation)\n        summation = 0\n        for j in range(0, num_of_problems):\n            summation += problems_times[j]\n",
        "test": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(' '))\n    D = set(map(int, stdin.split(' ')[1:]))\n    # Replace D with range(10)\n    D = list(range(10))\n    D.sort(key = lambda x: x in D)\n    D.sort(key = lambda x: x not in D)\n    print(D)\n    return N\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\n\ndef",
        "test": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def solution_impl(stdin: str) -> int:\n        n, m = map(int, stdin.split(\" \"))\n        h = list(map(int, stdin.split(\" \")))\n        a = stdin.split(\" \")\n        b = stdin.split(\" \")\n        ab = []\n        for i in range(m):\n            ab.append(a[i] + \" \" + b[i])\n        ab = list(set(ab))\n        ab = [i.split(\" \") for i in ab]\n        a = set(a)\n        b = set(b)\n        a_b = a.intersection(b)\n        good_observatories = []\n        for i in range(n):\n            if h[i] > min([h[j] for j in range(n) if i!= j]):\n                good_observatories.append(i)\n        good_observatories = set(good_observatories)\n        counter = 0\n        for i in ab:\n            if set(i).intersection(good_observatories):\n                counter += 1\n        return counter\n\n    return str(solution_impl(stdin))\n",
        "test": "assert solution('3\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3') == '2'",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    x = 1\n    for _ in range(n):\n        x *= 2 if x * 2 <= k else k + 1\n        k += 1 if k % 2 == 0 else 0\n    return str(x)\n",
        "test": "assert solution('4 3\\n') == '10'",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"0\":\n        return \"1\"\n    elif stdin == \"1\":\n        return \"0\"\n",
        "test": "assert solution(\"1\") == \"0\"",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 4703,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a string of digits S, return the sum of all evaluated formulas.\n    >>> solution('125')\n    176\n    >>> solution('3+2*2')\n    7\n    >>> solution('3+2*2+1*3')\n    12\n    >>> solution('3+2*2+1*3+4*5+6*7*8')\n    136\n    >>> solution('1+2*3')\n    6\n    >>> solution('1+2*3*4+5*6*7+8*9')\n    83\n    >>> solution('1*3+4*5*6+7*8*9')\n    117\n    >>> solution('2*3+3*4*5+4*5*6+8*9*7')\n    196\n    \"\"\"\n    # Split the string into a list of strings\n    # Each entry is a formula\n    formulas = stdin.split('+')\n\n    # Iterate through the list of formulas\n    # Evaluate the formula\n    # Add the result to the sum\n    return sum([eval(formula) for formula in formulas])",
        "test": "assert solution('1+23') == 24",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution returns the money Snuke has paid to the restaurant, and the money the restaurant has paid back to Snuke, as a string.\n    \"\"\"\n    data = stdin.split('\\n')\n    N = int(data[0])\n    return str(N * 800 - 200 * N)\n\"\"\"",
        "test": "assert solution(",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split()\n    second_line = stdin.split()\n    third_line = stdin.split()\n    a = \"\"\n    b = \"\"\n    c = \"\"\n    for i in range(3):\n        for j in range(3):\n            if i == j:\n                a += first_line[i][j]\n                b += second_line[i][j]\n                c += third_line[i][j]\n    return a + b + c\n",
        "test": "assert solution(\"rec\") == \"abc\"",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 4707,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split())\n",
        "test": "assert solution('101') == 2",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 4709,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,op,b = map(int,stdin.split())\n    if op == \"+\":\n        return str(a+b)\n    else:\n        return str(a-b)",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 4710,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 'ABC' if int(stdin) < 1200 else 'ARC'\n",
        "test": "assert solution('1000') == 'ABC'",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 4711,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return str(min(a + b, a + c, b + c))",
        "test": "assert solution('700 600 780') == '1300'",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string that contains the boxed image of the given input.\"\"\"\n    # First we split the input into rows.\n    rows = stdin.split('\\n')\n\n    # We create a list of rows.\n    image = []\n    for row in rows:\n        image.append(row)\n\n    # We create a string to store the output.\n    output = ''\n\n    # We iterate through each row.\n    for i in range(len(image)):\n        # We create a string to store the current row of #'s.\n        row = ''\n\n        # We iterate through each character of the current row.\n        for j in range(len(image[i])):\n            # We add a # to the row if we encounter a character.\n            if image[i][j]!='':\n                row += '#'\n\n            # We add a space to the row if we encounter a space.\n            else:\n                row +=''\n\n        # We add the row to the output.\n        output += row + '\\n'\n\n    return output\n\n\ndef",
        "test": "assert solution(\"ab\\nac\") == \"####\\n#a#\\n#b#\\n#c#\\n####\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1:]\n    # print(n)\n    # print(s)\n    i = 0\n    while i < len(s) - 1:\n        if s[i] == 'I':\n            n += 1\n        else:\n            n -= 1\n        i += 1\n    print(n)\n\n\nsolution(stdin)\n",
        "test": "assert solution(\"III\") == \"0\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 4714,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(sum(1 for i in range(A, B + 1) if str(i) == str(i)[::-1]))",
        "test": "assert solution(\"11009 11332\") == \"4\"",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 4715,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.strip().split(' ')]\n    return str(len(set([a, b, c])))",
        "test": "assert solution(\"3 1 4\") == \"3\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[1]) + int(stdin.split()[2]))\n",
        "test": "assert solution(\"1 2 3 4 5\") == 12",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 4717,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    return (\n        \"A\"\n        if abs(x - a) < abs(x - b)\n        else \"B\"\n    )\n",
        "test": "assert solution('''5 2 7''') == 'B'",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 4718,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '2018/01/07'\n",
        "test": "assert solution('2017/01/07') == '2018/01/07'",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin.split(\"\\n\"))\n    s_d = {}\n    for i in range(n):\n        s[i] = s[i].replace(\"\\n\", \"\")\n        s_d[s[i]] = s_d.get(s[i], [])\n        for j in range(len(s[i])):\n            s_d[s[i]].append(s[i][:j] + s[i][j + 1:])\n    ans = \"\"\n    for i in s_d.keys():\n        if len(i) > len(ans) or len(i) == len(ans):\n            if len(i) > len(ans):\n                ans = i\n    return ans\n\n\ndef",
        "test": "assert solution(\"acacac\") == \"caa\"",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(len(data)):\n        if data[i]:\n            count += (data[i] - (i + 1))\n    return str(count)\n",
        "test": "assert solution(\"1 24 30\\n\") == \"7\"",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n  # write your code in Python 3.6\n  n, m = map(int, stdin.split())\n  return str(m * 2 - n * 2)\n",
        "test": "assert solution(\"3 4\") == \"6\"",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4722,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    if a + b >= 5:\n        if a + b % 2 == 0:\n            return \"Possible\"\n        else:\n            return \"Impossible\"\n    else:\n        return \"Impossible\"",
        "test": "assert solution('1 3') == 'Impossible'",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    chars = set(s)\n    t_chars = set(t)\n    chars_t_chars = set(s).intersection(set(t))\n    \n    if len(t_chars) == len(chars_t_chars):\n        print(s)\n    else:\n        print('UNRESTORABLE')",
        "test": "assert solution(\"d\") == \"UNRESTORABLE\"",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    (r, g) = map(int, stdin.strip().split())\n    n = int(g / r) - 1\n    return str(n * r + min(n, r))\n",
        "test": "assert solution('2002\\n2017') == '2032'",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    unique_characters = set(stdin)\n    simplicity = {character: ord(character) - 96 for character in unique_characters}\n    return str(sum(simplicity.values()))\n",
        "test": "assert solution(\"aaa\") == \"1\"",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = [int(n) for n in stdin.split()]\n    if t > 4:\n        return 'TLE'\n    if t == 1 and m < 1000000:\n        return 'AC'\n    if t == 2 and m < 10000000:\n        return 'AC'\n    if t == 3 and m < 10000000000:\n        return 'AC'\n    if t == 4 and m < 1000000000:\n        return 'AC'\n    if t == 5 and n < 10001:\n        return 'AC'\n    if t == 6 and n < 100001:\n        return 'AC'\n    if t == 7 and n < 10001:\n        return 'AC'\n    return 'TLE'\n",
        "test": "assert solution(\"100000000 50 3\") == \"AC\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def valid(s: str) -> bool:\n        return s.isdigit() or s == '' or s ==''\n\n    m = []\n    for i in stdin.splitlines():\n        l = []\n        for j in i.split():\n            if valid(j):\n                l.append(int(j))\n        m.append(l)\n\n    a = [[0] * len(m[0]) for _ in range(len(m))]\n    for i, l in enumerate(m):\n        for j, k in enumerate(l):\n            a[i][j] = k\n\n    op = {0: (1, 0), 1: (0, -1), 2: (-1, 0), 3: (0, 1)}\n\n    for _ in range(int(stdin.splitlines()[4])):\n        l = []\n        for i in range(len(a)):\n            for j in range(len(a[0])):\n                if a[i][j]:\n                    n, p = a[i][j]\n                    for d, q in op.items():\n                        if p + d == 0:\n                            continue\n                        if 0 <= i + q < len(a) and 0 <= j + n * q < len(a[0]):\n                            if a[i + q][j + n * q] == 0:\n                                a[i + q][j + n * q] = n + n\n                                l.append((i + q, j + n * q))\n                                break\n        for i, j in l:\n            a[i][j] = 0\n        m = []\n        for i in a:\n            s = []\n            for j in i:\n                if j == 0:\n                    s.append(' ')\n                else:\n                    s.append(str(j))\n            m.append(' '.join(s))\n        print('\\n'.join(m))\n        a = [[0] * len(m[0]) for _ in range(len(m))]\n        for i, l in enumerate(m):\n            for j, k in enumerate(l.split()):\n                a[i][j] = int(k)\n    return ''\n",
        "test": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n\"",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    k = int(stdin.split(\"\\n\")[1])\n    ans = 0\n    for i in range(1, len(s) - 1):\n        if s[i]!= s[i - 1] and s[i]!= s[i + 1]:\n            ans += 1\n    if k < ans:\n        return str(ans)\n    else:\n        return str(k)\n",
        "test": "assert solution(\"C2H6 10\") == '0'",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    p = s[0]\n    m = s[1]\n    n = len(m)\n    if n!= len(p):\n        return 'FAIL'\n    p = list(p)\n    for i in range(n):\n        if m[i] not in p:\n            return 'FAIL'\n        elif m[i] == p[0]:\n            p = p[1:]\n        else:\n            return 'FAIL'\n    return 'PASS'\n",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    count = 0\n    st_list = []\n    for char in stdin:\n        if char == '(' or char == '[' or char == '{':\n            st_list.append(char)\n            count += 1\n        elif char == ')' or char == ']' or char == '}':\n            if count < 1:\n                return \"ok so far\"\n            if count > 0:\n                st_list.pop()\n                count -= 1\n            else:\n                return \"error\"\n    if count > 0:\n        return \"error\"\n    if count == 0:\n        return \"ok so far\"\n    else:\n        return ''.join(st_list)\n",
        "test": "assert solution(\"27\\n[ { [[()]] (({})) } ] () {}\") == \"ok so far\"",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # get number of cases\n    case_count = int(stdin.readline())\n\n    # validate case count\n    if case_count > 100000:\n        return \"Invalid test case count\"\n\n    # initialize case count, input array, and output array\n    cases = []\n    for _ in range(case_count):\n        cases.append(stdin.readline().split())\n\n    # loop through cases\n    for case in cases:\n        # initialize passed case count\n        passed_count = 0\n        # loop through words in the case\n        for word in case:\n            # get word length\n            word_length = len(word)\n            # initialize previous word\n            prev_word = None\n            # loop through words in the case\n            for next_word in case:\n                # get next word length\n                next_word_length = len(next_word)\n                # check if word is the next word\n                if word_length == next_word_length and word[0] == next_word[0]:\n                    # set prev word to next word\n                    prev_word = next_word\n                    # increment passed case count\n                    passed_count += 1\n                    # break from the inner loop\n                    break\n        # check if case was passed\n        if passed_count == len(case):\n            return \"Fair Game\"\n        # otherwise, get the winner\n        else:\n            return \"Player {} lost\".format(1 if passed_count % 2 == 0 else 2)\n",
        "test": "assert solution(",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    # Write your code here\n    a, op, b = re.match(r'(\\d+)\\s*([+*])\\s*(\\d+)', stdin).groups()\n    a, b = int(a), int(b)\n    if op == '*':\n        return str(a * b)\n    else:\n        return str(a + b)\n",
        "test": "assert solution('1000 * 100') == '100000'",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 out\")\n    3\n    >>> solution(\"8 in\")\n    6\n    >>> solution(\"52 out\")\n    8\n    \"\"\"\n\n    deck_size, shuffle_type = stdin.split(\" \")\n    deck_size = int(deck_size)\n    shuffles = 0\n\n    while True:\n        if len(set(get_deck_representation(deck_size))) == 1:\n            break\n\n        if shuffle_type == \"out\":\n            half_size = int(deck_size / 2)\n            deck_size -= half_size\n            shuffles += 1\n        elif shuffle_type == \"in\":\n            half_size = int(deck_size / 2)\n            deck_size += half_size\n            shuffles += 1\n        else:\n            return \"Invalid\"\n\n        shuffle_type = \"out\" if shuffle_type == \"in\" else \"in\"\n\n    return str(shuffles)\n\n\ndef",
        "test": "assert solution(\"52 out\") == \"8\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split(' ')\n    y = y[:-1] if y[-1] in 'eiou' else y[:-1] + y[-1].replace('a', '').replace('i', '').replace('o', '').replace('u', '')\n    return y + p if y[-1] == 'e' else y + p if y[-1] in 'aiou' else y + 'ex' + p\n",
        "test": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2018\")\n    'yes'\n    >>> solution(\"2019\")\n    'no'\n    >>> solution(\"2020\")\n    'yes'\n    \"\"\"\n    y = int(stdin)\n    return \"yes\" if y % 26 == 4 else \"no\"\n",
        "test": "assert solution('2019') == 'no'",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 0 0 0 4 0 0 0 0 4\\n4')\n    '64'\n    >>> solution('10 10 10 20 0 10 10 10 10 10\\n4')\n    '1820000'\n    >>> solution('10 10 10 20 0 10 10 10 10 10\\n1')\n    '0'\n    \"\"\"\n    n = [int(i) for i in stdin.split()]\n    N = sum(n)\n    if N <= 1:\n        return '0'\n    arr = [0] * N\n    arr[0] = 1\n    for i in range(1, N):\n        for j in range(0, N - i):\n            if arr[j]:\n                arr[i + j] += arr[j]\n    return str(arr[K])\n",
        "test": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n,p = map(int, stdin.split())\n    probs = list(map(int, stdin.split()))\n    ans = [0] * n\n    ans[p] = 300\n    for i in range(n):\n        if ans[i]!= 0 and i!= p:\n            ans[i] = 300 + probs[i]\n        else:\n            ans[i] = min(300, probs[i])\n    print(*ans)\n    return \"\"\n",
        "test": "assert solution(\"7 0\\n30 270 995 996 997 998 999\\n\") == \"2 330\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    inp: str = stdin\n\n    # find the solution\n    solution: str = ''\n    for k in range(1, len(inp)):\n        if (len(inp) % k) == 0:\n            solution = k\n            break\n\n    # return the solution\n    return solution\n",
        "test": "assert solution('aaaaaaaa') == 1",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of possible speeds and distances in a sequence of milestones\n    given the amount of time that has passed.\n\n    Args:\n        stdin (str): Input containing the number of consecutive stones\n            you have seen, the number of total stones, and the distances\n            of each of those stones.\n\n    Returns:\n        str: Two lines, the first containing the number of speeds and the\n            second containing the possible distances between the first and\n            second seen milestone.\n    \"\"\"\n    seen, stones = [int(c) for c in stdin.split()]\n    times = [int(c) for c in stdin.split()[seen:]]\n    milestones = [int(c) for c in stdin.split()[seen:]]\n\n    # We need at least one stone to be able to count, so there are no\n    # distances to calculate for an empty set of milestones.\n    if len(times) < 1:\n        return \"0\\n\"\n\n    speeds = speeds_between(times, milestones)\n    distances = distance_between(times, milestones)\n    return f\"{len(speeds)}\\n{distances}\"\n\n\ndef",
        "test": "assert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1'",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    phone_number = stdin\n    \n    if (\n            len(phone_number) == 7 and\n            phone_number[:3] == \"555\"\n    ):\n        return 1\n    return 0\n    \n    \n    \n    \n",
        "test": "assert solution('5551212') == 1",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    F = list(map(int, stdin.split('/')))\n    if F[1]!= 0:\n        return str(F[0]/F[1])\n    else:\n        return '0/1'\n    pass",
        "test": "assert solution(-40/1) == '-40/1'",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a program to solve a given problem.\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    sentence = stdin.split()\n    out = \"\"\n    for word in sentence:\n        word = list(word)\n        for i in range(len(word)):\n            if word[i] == \"-\":\n                continue\n            if word[i] in [\"a\",\"e\",\"o\",\"u\",\"i\"]:\n                word[i] = \"A\"\n            elif word[i] in [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"]:\n                word[i] = \"b\"\n            elif word[i] in [\"\u00e7\",\"\u00f0\",\"\u00fe\",\"\u00f1\"]:\n                word[i] = \"c\"\n            elif word[i] in [\"\u00e1\",\"\u00e9\",\"\u00ed\",\"\u00f3\",\"\u00fa\"]:\n                word[i] = \"a\"\n            elif word[i] in [\"\u00e0\",\"\u00e8\",\"\u00ec\",\"\u00f2\",\"\u00f9\"]:\n                word[i] = \"a\"\n        word = \"\".join(word)\n        out += \"\".join(word) + \" \"\n    return out[:-1]\nprint(solution(stdin))\n",
        "test": "assert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \n    # ///////////////////////////////////////////////////////////////////////////////////\n    '''\n    The Idea:\n        A little bit math, right?\n    '''\n    # ///////////////////////////////////////////////////////////////////////////////////\n    \n    pass",
        "test": "assert solution('4') == '16'",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n",
        "test": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def to_int(str_num):\n        return int(str_num.strip())\n\n    capacity, num_stations = to_int(stdin.split()[0]), to_int(stdin.split()[1])\n    stations = []\n    for _ in range(num_stations):\n        stations.append(to_int(stdin.split()[2 + _ * 3]))\n    stations.append(0)\n    stations.append(0)\n\n    if num_stations % 2 == 1:\n        stations.pop()\n    stations = [0] + stations + [0]\n    interval = 1\n    while interval < len(stations):\n        current_stations = stations[interval - 1 : interval + 2]\n        for i in range(1, len(current_stations)):\n            if current_stations[i] - current_stations[i - 1] < 0:\n                return \"impossible\"\n        interval += 2\n    return \"possible\"\n",
        "test": "assert solution(\"2 2\\n0 1 1\\n1 0 1\") == \"impossible\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k == 1:\n        return str(n)\n    elif k == n:\n        return str(1)\n    else:\n        return str(n**2 // 2)",
        "test": "assert solution('1 1\\n') == '1'",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = [int(x) for x in stdin.split()]\n    print(H * (H + 1) // 2 - N - M)\n",
        "test": "assert solution(\"1 1 0\") == \"0 0\"",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # get the size of the board\n    n = int(stdin.split('\\n')[0])\n    # create the board\n    board = []\n    for line in stdin.split('\\n')[1:]:\n        board.append(list(line))\n\n    # check each column, rows and diagonals\n    for col in range(n):\n        n_b = 0\n        n_w = 0\n        for row in range(n):\n            if board[row][col] == 'B':\n                n_b += 1\n            elif board[row][col] == 'W':\n                n_w += 1\n        if n_b!= n_w:\n            return '0'\n        if col > 0:\n            n_b = n_w = 0\n            for i in range(n):\n                if board[i][col-1] == 'B':\n                    n_b += 1\n                elif board[i][col-1] == 'W':\n                    n_w += 1\n            if n_b!= n_w:\n                return '0'\n    # check each column, rows and diagonals\n    for row in range(n):\n        n_b = 0\n        n_w = 0\n        for col in range(n):\n            if board[row][col] == 'B':\n                n_b += 1\n            elif board[row][col] == 'W':\n                n_w += 1\n        if n_b!= n_w:\n            return '0'\n        if row > 0:\n            n_b = n_w = 0\n            for i in range(n):\n                if board[row-1][i] == 'B':\n                    n_b += 1\n                elif board[row-1][i] == 'W':\n                    n_w += 1\n            if n_b!= n_w:\n                return '0'\n\n    # check the diagonals\n    n_b = n_w = 0\n    for i in range(n):\n        if board[i][i] == 'B':\n            n_b += 1\n        elif board[i][i] == 'W':\n            n_w += 1\n    if n_b!= n_w:\n        return '0'\n    n_b = n_w = 0\n    for i in range(n):\n        if board[i][n-1-i] == 'B':\n            n_b += 1\n        elif board[i][n-1-i] == 'W':\n            n_w += 1\n    if n_b!= n_w:\n        return '0'\n\n    return '1'\n",
        "test": "assert solution(\"6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution is straight forward:\n    1. Sort both ends of the segments by the start of the segment (to allow the algorithm to be optimized).\n    2. Find the first pair of endpoints with the same start.\n    3. Find the first pair of endpoints with a different start.\n    4. Find the second pair of endpoints with the same start.\n    5. Find the second pair of endpoints with a different start.\n    \"\"\"\n    a, b = [], []\n    for x1, x2, x3, x4 in stdin.split('\\n'):\n        a.append(int(x1))\n        a.append(int(x2))\n        b.append(int(x3))\n        b.append(int(x4))\n    a.sort()\n    b.sort()\n    diff1 = diff2 = None\n    for x1, x2 in zip(a, b):\n        if x1 == x2:\n            diff1 = x1\n        else:\n            diff2 = x1\n            break\n    if diff1 is None:\n        diff1 = diff2 = a[-1]\n    return f'{diff1} {diff2}'\n",
        "test": "assert solution(\"4\\n1 2 1 2\") == \"2 1\"",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    \n    ",
        "test": "assert solution(\"3,2,0,-4\") == True",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"hi\"\n",
        "test": "assert solution(\"2 7 11 15\") == [0, 1]",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    def is_cross(line1: str, line2: str) -> bool:\n        x1, y1 = float(line1[0]), float(line1[1])\n        x2, y2 = float(line1[2]), float(line1[3])\n        x3, y3 = float(line2[0]), float(line2[1])\n        x4, y4 = float(line2[2]), float(line2[3])\n        den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)\n        if den == 0:\n            return False\n        n1 = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den\n        n2 = ((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / den\n        if (n1 < 0 or n1 > 1) or (n2 < 0 or n2 > 1):\n            return False\n        return True\n\n    def is_inside(p1: str, p2: str, p3: str) -> bool:\n        x1, y1 = float(p1[0]), float(p1[1])\n        x2, y2 = float(p2[0]), float(p2[1])\n        x3, y3 = float(p3[0]), float(p3[1])\n        area = 0.5 * ((x1 * y2 + x2 * y3 + x3 * y1) - (y1 * x2 + y2 * x3 + y3 * x1))\n        return area > 0\n\n    def solve(n: int) -> int:\n        count = 0\n        if n == 1:\n            return 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                if not is_cross(lines[i], lines[j]):\n                    continue\n                if not is_inside(lines[i], lines[j], lines[(i + j) % n]):\n                    continue\n                for k in range(j + 1, n):\n                    if not is_cross(lines[i], lines[j]) or not is_cross(lines[j], lines[k]):\n                        continue\n                    if not is_inside(lines[i], lines[j], lines[k]):\n                        continue\n                    count += 1\n        return count\n\n    N = int(stdin.readline())\n    lines = [stdin.readline().strip() for _ in range(N)]\n    return str(solve(N))\n    return \"\"\n",
        "test": "assert solution('3') == 0",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find minimum number of moves needed to pair all socks.\"\"\"\n   ...\n",
        "test": "assert solution('1\\n3 7') == 'impossible'",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    C, K = stdin.split()\n    bills = [10 ** x for x in range(len(C)) if C[0] == '0']\n    C = int(C)\n    if K == 1:\n        return bills[-1]\n    else:\n        return int(bills[-1] * 10 ** (K - 1))\n\nprint(solution(input()))\n",
        "test": "assert solution('184 1') == '180'",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training2YFK5V-2AJ/\"\"\"\n    N = int(stdin)\n    data = [tuple(map(int, line.split())) for line in stdin.strip().splitlines()]\n    points = [Point(*point) for point in data]\n    # https://www.codewars.com/kata/534a0224a079e2483b00001e/train/python\n    # https://www.codewars.com/kata/55f20897d2c27c6b8c0000b7/train/python\n    start = points[0]\n    end = Point(float('inf'), float('inf'))\n    for point in points:\n        if point.x < start.x:\n            start = point\n        if point.x > end.x:\n            end = point\n    x = start.x\n    y = start.y\n    min_x = start.x\n    min_y = start.y\n    max_x = end.x\n    max_y = end.y\n\n    p = points[0]\n    for point in points:\n        if point.x < min_x:\n            min_x = point.x\n        if point.x > max_x:\n            max_x = point.x\n        if point.y < min_y:\n            min_y = point.y\n        if point.y > max_y:\n            max_y = point.y\n\n    for point in points:\n        d = point.x - min_x\n        d_y = point.y - min_y\n        point.x -= d\n        point.y -= d_y\n    a = float('inf')\n    for point in points:\n        d = point.x + point.y + a\n        if d < a:\n            a = d\n    return str(a)",
        "test": "assert solution('1 1\\n2 2\\n3 3\\n1 1\\n2 2\\n3 3') == '0.000000'",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin.split('\\n'))\n    day = int(lst[0])\n    n = int(lst[1])\n    events = [lst[i].split() for i in range(2, day + 2)]\n    events.reverse()\n    all_songs = set()\n    for e in events:\n        all_songs.add(int(e[0]))\n        all_songs.update(set(e[1:]))\n    return''.join([str(n) for n in sorted(all_songs)])\n",
        "test": "assert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, T, M = [int(x) for x in stdin.split()]\n    print(N * T * M)\n    return ''",
        "test": "assert solution(\"2 3 5\") == \"44\"",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 4759,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: a string of input\n    :return: a string of output\n    \"\"\"\n    data = stdin.split()\n    at_bat = int(data[0])\n    at_bat_list = [int(at_bat_item) for at_bat_item in data[1:]]\n    total_bases = 0\n    for at_bat_item in at_bat_list:\n        if at_bat_item < 0:\n            total_bases += 0\n        elif at_bat_item == 0:\n            total_bases += 1\n        elif at_bat_item == 1:\n            total_bases += 2\n        elif at_bat_item == 2:\n            total_bases += 3\n        elif at_bat_item == 3:\n            total_bases += 4\n        elif at_bat_item == 4:\n            total_bases += 5\n    total_at_bat = len(at_bat_list)\n    slugging_percent = round(total_bases / total_at_bat, 3)\n    return str(slugging_percent)\n",
        "test": "assert solution(\"3 -1 4\") == \"2.5\"",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    result = []\n    for i in range(2, n+1):\n        result.append(i)\n    count = 0\n    for i in range(2, n+1):\n        if i in result:\n            count += 1\n            if count == k:\n                return i\n            while count!= k:\n                result.remove(i)\n                count -= 1\n",
        "test": "assert solution('15 12\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '7'",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    l, h = map(int, stdin.split())\n    return str(sum([i for i in range(l, h + 1) if sum([int(j) for j in str(i)]) % i == 0]))\n",
        "test": "assert solution(\"198765 198769\") == '0'",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(1 - (int(stdin) * (int(stdin) - 1) / 2) / int(stdin) ** 2)])\n",
        "test": "assert solution('3\\n') == '0.66666667'",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin.split())\n",
        "test": "assert solution('5 2 2') == '36'",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    lists = list(map(int, stdin.readline().strip().split()))\n    lists.sort()\n    sour = lists[0] * lists[1]\n    bit = lists[0] * (lists[1] - lists[2])\n    diff = abs(sour - bit)\n    return str(diff)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"2 3 8\") == \"1\"",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('1\\nSimon says smile.\\n') == ''",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in stdin.split(' '):\n        if int(i) == 0:\n            continue\n        for j in range(int(i)):\n            if j == 0:\n                count += 1\n            else:\n                if (2**(j-1)%j)!= (2**(j-2)%j):\n                    count += 1\n    return str(count)\n",
        "test": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\"",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the most likely evolutionary tree from the samples\n    :param stdin: The input string\n    :return:\n    \"\"\"\n    pass",
        "test": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n0 2\\n0 3\"",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    r = len(stdin)\n    for i in range(1,r):\n        ans.append(stdin[:i])\n    return min(ans, key=len)\n",
        "test": "assert solution('aaaa') == 'a'",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    people = int(stdin[0])\n    chicken = int(stdin[1])\n    if people * 1 == chicken:\n        return 'Dr. Chaz will have {} piece of chicken left over!'.format(people * 1)\n    elif people * 1 > chicken:\n        return 'Dr. Chaz needs {} more piece[s] of chicken!'.format((people * 1) - chicken)\n    \n",
        "test": "assert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the largest box by volume\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    boxes = read_boxes(stdin)\n    return f\"{max(boxes, key=lambda box: box.volume)}\"\n\n\ndef",
        "test": "assert solution(\"2 10\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n\n    rows = int(input_list[0].split()[0])\n    columns = int(input_list[0].split()[1])\n\n    for row in range(1, rows + 1):\n        word = input_list[row].strip()\n\n        if word.count('#')!= len(word):\n            for char in word:\n                if char == '#':\n                    word = word.replace(char,'', 1)\n        print(word)\n    return ''\n\n\nprint(solution(stdin=input()))\n",
        "test": "assert solution('4 4\\n#a#\\n#a#\\n#a#\\n#a#') == 'a'",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('WNEENWEENEENE') == 10",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    a, b, c, d = max(a, b, c, d), min(a, b, c, d)\n    for i in range(a + 1):\n        for j in range(a + 1):\n            for k in range(a + 1):\n                for l in range(a + 1):\n                    if i * j * k * l == a + b + c + d:\n                        if i + j + k + l == c + d:\n                            return f\"{i} {j} {k} {l} {i * j * k * l}\"\n    return \"problems ahead\"\n",
        "test": "assert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()[0]\n    B = stdin.split()[1]\n    result = []\n\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] == B[j]:\n                result.append(A[i])\n                break\n    return '\\n'.join(result)\n",
        "test": "assert solution('ABBA CCCB') == '4\\n' \\",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the number of free days\n    \"\"\"\n    stdin_list = stdin.split(\"\\n\")\n    num_events = int(stdin_list[0].strip())\n    free_days = 0\n    for i in range(num_events):\n        start_day, end_day = [int(i) for i in stdin_list[i + 1].strip().split(\" \")]\n        for day in range(start_day, end_day + 1):\n            if day not in [start_day, end_day]:\n                free_days += 1\n    return free_days\n\ndef",
        "test": "assert solution('''3",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n",
        "test": "assert solution(\"4\") == \"2 3\"",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution to the elections problem.\"\"\"\n    n, d = map(int, stdin.split())\n    candidates = []\n    wasted_votes = []\n    for _ in range(n):\n        candidates.append(list(map(int, stdin.split()[1:])))\n    for _ in range(d):\n        votes_for_a, votes_for_b = map(int, stdin.split())\n        wasted_votes.append(sum(x[0] - x[1] for x in zip(candidates, [votes_for_a, votes_for_b])))\n    efficiency_gap = sum(x for x in wasted_votes) / sum(x for x in candidates)\n    return '{}\\n{}\\n{}'.format(*wasted_votes, round(efficiency_gap, 7))\n",
        "test": "assert solution(",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return max(a*b + a*c + b*c for a, b, c in zip(range(1, int(stdin) + 1), range(1, int(stdin) + 1), range(1, int(stdin) + 1)))\n\nimport sys\nprint(solution(sys.stdin.readlines()[0]))\n",
        "test": "assert solution('1\\n2') == '2'",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = [int(x) for x in stdin.split()]\n    r1, r2 = [], []\n    for i in range(n1):\n        r1.append(stdin[2*i])\n    for i in range(n2):\n        r2.append(stdin[2*i + 1])\n\n    r1 = ''.join(r1)\n    r2 = ''.join(r2)\n\n    t = int(stdin[-1])\n\n    # result = [x for x in r1]\n    # for _ in range(t):\n    #     for i in range(len(result)):\n    #         if result[i]!= r2[i]:\n    #             result[i] = r2[i]\n    #             result[i + 1] = r2[i]\n    #             break\n    #     else:\n    #         break\n\n    # for _ in range(t):\n    #     for i in range(len(result)):\n    #         if result[i]!= r1[i]:\n    #             result[i] = r1[i]\n    #             result[i + 1] = r1[i]\n    #             break\n    #     else:\n    #         break\n\n    def get_next(s):\n        return ''.join(sorted(set(s), key=s.index))\n\n    r1 = get_next(r1)\n    r2 = get_next(r2)\n\n    for _ in range(t):\n        if r1 < r2:\n            r1 = get_next(r1)\n        else:\n            r2 = get_next(r2)\n\n    return r1 + r2\n",
        "test": "assert solution(5, 3, \"ABCDEF\") == \"CBADEFE\", \"Sample Input 2\"",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    box_player_num = int(stdin.split()[0])\n    questions = int(stdin.split()[1])\n    n = 0\n    box_player = box_player_num\n    while n < questions:\n        n += 1\n        outcome = stdin.split()[2 + n]\n        if outcome == \"T\":\n            box_player = (box_player + 1) % 8\n        elif outcome == \"N\":\n            box_player = (box_player + 4) % 8\n    return str(box_player)\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = 0\n    for k in range(1, m + 1):\n        ans = max(ans, k * (n - k + 1))\n    return str(ans)\n",
        "test": "assert solution(\"4 3\") == \"6\"",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Write your code here\n    num_rows = int(stdin.readline())\n    heights = list(map(int, stdin.readline().strip().split()))\n    ladder = [[0] * num_rows for _ in range(num_rows)]\n    #print(ladder)\n    ladder[0][0] = heights[0]\n    for row in range(num_rows):\n        for col in range(num_rows):\n            if row == 0:\n                if col == 0:\n                    continue\n                ladder[row][col] = ladder[row][col - 1] + heights[col]\n            elif col == 0:\n                ladder[row][col] = ladder[row - 1][col] + heights[col]\n            else:\n                ladder[row][col] = max(ladder[row - 1][col], ladder[row][col - 1]) + heights[col]\n    #print(ladder)\n    ans = 0\n    for row in range(num_rows):\n        if ans < ladder[row][num_rows - 1]:\n            ans = ladder[row][num_rows - 1]\n    print(ans)\n    return ans",
        "test": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == 1",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split('\\n')[0])\n    n = int(stdin.split('\\n')[1])\n    array = []\n    for i in stdin.split('\\n')[2:]:\n        array.append(int(i))\n\n    dp = [0] * n\n    dp[0] = x\n\n    for i in range(n):\n        dp[i] = min(dp[i], x)\n        dp[i] = dp[i] + array[i]\n        x = x - array[i]\n\n    return str(sum(dp))\n",
        "test": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return 'hiss' if'ss' in stdin else 'no hiss'",
        "test": "assert solution('amiss') == 'hiss'",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 4786,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    cards = stdin\n    for i in range(0, len(cards), 3):\n        if cards[i:i + 3].count('T') == 3:\n            result += 7\n        if cards[i:i + 3].count('C') == 3:\n            result += 4\n        if cards[i:i + 3].count('G') == 3:\n            result += 3\n    return str(result)\n",
        "test": "assert solution(\"CCC\") == 9",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return '180' if abs(stdin) == 360 else str(abs(int(stdin) - 360) % 360)\n",
        "test": "assert solution(\"0 90\") == \"180\"",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # create a set of all the desks\n    # iterate through and for each desk,\n    # add all the desks above it\n    # return the number of desks missing\n    return 'NOT POSSIBLE'",
        "test": "assert solution('''5",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 10001:\n        return \"Error: Input string is too long\"\n    ans = 1\n    for c in stdin:\n        if c == 'W':\n            ans *= -1\n        else:\n            ans *= 1\n    return \"1\" if ans == 1 else \"0\"\n",
        "test": "assert solution('WWWWBBW') == '0'",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # import math\n    # area_list = []\n    # for i in range(4):\n    #     a = int(stdin.split()[i])\n    #     area_list.append(a)\n    # # area_list = [int(x) for x in stdin.split()]\n    # area_list.sort(reverse=True)\n    # if area_list[0]*area_list[1]*area_list[2]*area_list[3] < area_list[2]*area_list[3]:\n    #     return math.floor((area_list[0]*area_list[1]*area_list[2])/area_list[3])\n    # else:\n    #     return math.floor((area_list[2]*area_list[3])/(area_list[0]*area_list[1]))\n    return str(math.floor((area_list[2]*area_list[3])/(area_list[0]*area_list[1])))\n",
        "test": "assert solution('1 2 1 1') == '1.299038105676658'",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    name: str = stdin.strip()\n    if len(name) < 2:\n        return name\n    else:\n        index: int = 0\n        result: str = \"\"\n        while index < len(name):\n            currentLetter: str = name[index]\n            currentCount: int = 1\n            while index < len(name) - 1 and name[index] == name[index + 1]:\n                index += 1\n                currentCount += 1\n            result += currentLetter * currentCount\n            index += 1\n        return result\n",
        "test": "assert solution(\"robert\") == \"robert\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 4793,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = stdin.split()\n    s, v1, v2 = int(s), int(v1), int(v2)\n    if s <= 10**6 and s > v1 > v2:\n        return str(s // v1 + s // v2) + \" \" + str(s // v1)\n    else:\n        return \"Impossible\"\n",
        "test": "assert solution('1000 9 100\\n') == 'Impossible'",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    park = []\n    for _ in range(R):\n        park.append(stdin.split())\n    total = 0\n    for row in park:\n        total += sum(row.count(\"X\") for row in park)\n    for i in range(1, 5):\n        total -= i * sum(row.count(str(i)) for row in park)\n    print(total)\n    return ''",
        "test": "assert solution(\"4 4",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    for i in range(1, n+1):\n        x += i**i\n    return str(x)\n",
        "test": "assert solution(\"1\\n\") == \"1\"",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '\\n'.join(map(str, [res]))\n",
        "test": "assert solution(\"10 10 10\\n3 2 1\") == \"0.0 0.0 0.0\"",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    text = ''\n    temp = ''\n    for i in stdin:\n        if i!= '<':\n            temp += i\n        else:\n            text += temp\n            temp = ''\n    return text + temp\nprint(solution(input()))\n",
        "test": "assert solution(\"foss<<rritun\") == \"forritun\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 4798,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n",
        "test": "assert solution('KMP') == 'KMP'",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = map(int, stdin.split())\n    if G + S + C <= 5:\n        if G >= S:\n            return \"Estate or Gold\"\n        elif G >= C:\n            return \"Province or Gold\"\n        else:\n            return \"Province or Copper\"\n    else:\n        if S >= C:\n            return \"Province or Silver\"\n        elif S >= C:\n            return \"Duchy or Silver\"\n        else:\n            return \"Duchy or Copper\"\n",
        "test": "assert solution(\"2 1 0\") == \"Province or Gold\"",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d, s = map(int, stdin.split())\n    x = (s * 100) // d\n    if x >= n:\n        return \"impossible\"\n    else:\n        return str(x * 100 // n)",
        "test": "assert solution(open(\"test_input.txt\").read()) == open(\"test_output.txt\").read()",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem description is a bit confusing, so here is a quick explanation of it\n    We need to find the longest increasing subsequence\n    \"\"\"\n    n = int(stdin.split()[0])\n    arr = [int(x) for x in stdin.split()[1:]]\n    result = [arr[0]]\n    for i in range(1, n):\n        if arr[i] > result[-1]:\n            result.append(arr[i])\n        else:\n            for j in range(len(result)):\n                if arr[i] < result[j]:\n                    result[j] = arr[i]\n                    break\n\n    return str(len(result)) +'' +''.join(map(str, result))\n",
        "test": "assert solution(str(input())) == str(print(Solution().solution(input())))",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    H, M = stdin.split(\" \")\n    h, m = int(H), int(M)\n\n    h = (h - 45) % 24\n    m = (m + 45) % 60\n    return str(h) + \" \" + str(m)\n",
        "test": "assert solution(\"0 30\") == \"23 45\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 4803,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    for i in range(2, 20):\n        N = N ** i\n    return str(N)\n",
        "test": "assert solution(1.0) == '1.0', 'Test 2'",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0:1]\n    arr = []\n    nums = ['0','1','2','3','4','5','6','7','8','9']\n    for i in range(2,int(S)):\n        for j in range(i,int(S)):\n            if i == j:\n                continue\n            for k in range(0,10):\n                if k == 0:\n                    continue\n                # arr.append(f'{k},{i},{j}')\n                if int(k) + int(i) + int(j) == int(S):\n                    arr.append(f'{k},{i},{j}')\n                elif int(k) + int(j) + int(i) == int(S):\n                    arr.append(f'{k},{j},{i}')\n                elif int(j) + int(k) + int(i) == int(S):\n                    arr.append(f'{j},{k},{i}')\n                elif int(j) + int(i) + int(k) == int(S):\n                    arr.append(f'{j},{i},{k}')\n                elif int(i) + int(k) + int(j) == int(S):\n                    arr.append(f'{i},{k},{j}')\n                elif int(i) + int(j) + int(k) == int(S):\n                    arr.append(f'{i},{j},{k}')\n    # arr.sort()\n    return f'{S}: {arr}'\n    \n    # arr = []\n    # nums = ['0','1','2','3','4','5','6','7','8','9']\n    # for i in range(2,int(S)):\n    #     for j in range(i,int(S)):\n    #         if i == j:\n    #             continue\n    #         for k in range(0,10):\n    #             if k == 0:\n    #                 continue\n    #             if int(k) + int(i) + int(j) == int(S):\n    #                 arr.append(f'{k},{i},{j}')\n    #             elif int(k) + int(j) + int(i) == int(S):\n    #                 arr.append(f'{k},{j},{i}')\n    #             elif int(j) + int(k) + int(i) == int(S):\n    #                 arr.append(f'{j},{k},{i}')\n    #             elif int(j) + int(i) + int(k) == int(S):\n    #                 arr.append(f'{j},{i},{k}')\n    #             elif int(i) + int(k) + int(j) == int(S):\n    #                 arr.append(f'{i},{k},{j}')\n    #             elif int(i) + int(j) + int(k) == int(S):\n    #                 arr.append(f'{i},{j},{k}')\n    # # arr.sort()\n    # return f'{S}: {arr}'\n    \n",
        "test": "assert solution(\"50\") == \"50:\", \"WA\"",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    for word in line:\n        if line.count(word) > 1:\n            return \"no\"\n    return \"yes\"\n",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 4806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    monster = stdin.strip()\n    move = 'R'\n    while monster:\n        stdin = monster[:]\n        monster = stdin[1:]\n        move += 'K' if move[-1] == 'L' else 'C' if 'LL' in monster else 'S' if 'RR' in monster else 'B'\n    return move\n",
        "test": "assert solution(\"RRRRBBLLLRR\") == \"SSKKKKKHHHSS\"",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the FizzBuzz problem.\n\n    >>> solution(\"2 4 7\\n\")\n    '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n    >>> solution(\"2 3 7\\n\")\n    '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n    \"\"\"\n    X, Y, N = (int(x) for x in stdin.split())\n    return '\\n'.join(\n        f'{num}\\n' * (num % X == 0) +\n        f'Fizz\\n' * (num % Y == 0) or\n        (num % X == 0 and num % Y == 0)\n        for num in range(1, N + 1))\n",
        "test": "assert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, dm = map(int, stdin.split())\n    d = [int(x) for x in stdin.split()]\n    if n == 0:\n        print(\"It hadn't snowed this early in 0 years!\")\n    else:\n        k = 0\n        for i in range(n):\n            if d[i] > dm:\n                k = i\n        print(\"It hadn't snowed this early in {} years!\".format(k))",
        "test": "assert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    for i in range(1, n + 1):\n        s = s * 3 - s // 2\n        if s <= 0:\n            return str(i)\n    return None\n",
        "test": "assert solution(\"10 10\") == \"7\"",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"bok\") == \"bok\"",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    k = int(stdin.read())\n    if k == 1:\n        print(0, 0)\n    else:\n        m = 0\n        while not k & 1:\n            k >>= 1\n            m += 1\n        print(2**m, m)\n",
        "test": "assert solution('7') == '8 3'",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if all phrases rhyme with the common word, otherwise return 'NO'\"\"\"\n    s: str = stdin.split('\\n')[0]\n    e: int = int(stdin.split('\\n')[1])\n    e_strs: List[str] = stdin.split('\\n')[2:2+e]\n    p: int = int(stdin.split('\\n')[-2])\n    p_strs: List[str] = stdin.split('\\n')[-1:-1-p-1:-1]\n    # Cast words into list of lists of strings\n    e_strs: List[List[str]] = [s.split(' ') for s in e_strs]\n    p_strs: List[List[str]] = [s.split(' ') for s in p_strs]\n\n    e_sets: List[Set[str]] = [set(s) for s in e_strs]\n    p_sets: List[Set[str]] = [set(s) for s in p_strs]\n\n    common_words: List[Set[str]] = [set([s]) for s in s.split()]\n    # Exclude common words from e_sets and p_sets\n    for common_word in common_words:\n        for e_set in e_sets:\n            if common_word in e_set:\n                e_set.remove(common_word)\n        for p_set in p_sets:\n            if common_word in p_set:\n                p_set.remove(common_word)\n\n    # For each list of word endings in e_strs, if it's a subset of any other list of word endings, we know they're different\n    return 'YES' if all(not any(subset in e_sets for subset in e_sets) for e_sets in e_sets) and \\\n        all(not any(subset in p_sets for subset in p_sets) for p_sets in p_sets) else 'NO'\n",
        "test": "assert solution(\"drought\", 2, [\"aught\", \"ought\", \"aut\", \"acht\", \"aught\", \"outte\", \"out\", \"oute\"], [], 5, [\"tasty\", \"sprout\", \"difficult\", \"route\", \"worried\", \"and\", \"fraught\", \"forever\", \"in\", \"doubt\"], [\"apples\", \"and\", \"pears\"], [\"apples\", \"and\", \"pars\"], [\"aught\", \"ought\", \"aut\", \"acht\", \"aught\", \"outte\", \"out\", \"oute\"]) == \"NO\\nNO\\nNO\\nNO\\nNO\"",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n')\n    'WIN'\n    >>> solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n')\n    'LOSE'\n    >>> solution('HANGMAN\\nABHIJKLKMXNOPQRSTUVWXYZ\\n')\n    'LOSE'\n    \"\"\"\n    word, alphabet = stdin.strip().split('\\n')\n    if len(word) > 16:\n        raise ValueError\n\n    return \"WIN\" if word == ''.join(\n        [alphabet[i] if i < len(word) else '_' for i in range(len(word))]\n    ) else \"LOSE\"\n",
        "test": "assert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n, p, m = [int(x) for x in stdin.split()]\n    players = {}\n    for i in range(m):\n        player, points = stdin.split()\n        points = int(points)\n        if player not in players:\n            players[player] = points\n        else:\n            players[player] += points\n\n    print(players)\n    print(players.items())\n    print(players.items())\n    print(players.items())\n    print(players.items())\n    return \"\"\n",
        "test": "assert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == 'Nina wins!'",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = list(map(int, stdin.split()))\n    if x1 <= x <= x2 and y1 <= y <= y2:\n        return \"0.0\"\n    if x1 < x2 and y1 < y2:\n        return str(min(abs(x - x1), abs(x - x2)) + min(abs(y - y1), abs(y - y2)))\n    else:\n        return str(min(abs(x - x1), abs(x - x2)) + min(abs(y - y1), abs(y - y2)))\n",
        "test": "assert solution(\"6 0 0 2 7 6\") == '2.0'",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    ans = stdin[0] + stdin[1]\n    for i in stdin[2:]:\n        ans += str(int(i) + 1) if int(i) < 9 else '0'\n    return ans",
        "test": "assert solution('101010') == '111000'",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    lines = stdin.split('\\n')\n\n    tasks, quiet = map(int, lines[0].split())\n    tasks = [int(x) for x in lines[1].split()]\n    quiet = [int(x) for x in lines[2].split()]\n    \n    count = 0\n    i = 0\n    last_quiet = 0\n    while i < len(tasks):\n        if quiet[0] >= tasks[i]:\n            last_quiet = quiet.pop(0)\n            count += 1\n        else:\n            if quiet[0] >= quiet[1]:\n                quiet.pop(0)\n            else:\n                quiet.pop(1)\n        i += 1\n    return count",
        "test": "assert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # input list\n    nums_list = stdin.split('\\n')\n    # convert the list into a set\n    nums_set = set(int(nums) for nums in nums_list)\n    # determine the number of distinct numbers in the set\n    distinct_nums = len(nums_set)\n    return str(distinct_nums)\n",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4820,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('13 3\\n')\n    'yes'\n    >>> solution('1 0\\n')\n    'yes'\n    \"\"\"\n    N, b = stdin.split()\n    return 'yes' if int(N) * int(b) < int(N) else 'no'\n",
        "test": "assert solution('1 0') == 'yes'",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    suit_dict = {\"P\": 0, \"K\": 0, \"H\": 0, \"T\": 0}\n    card_dict = {\"P\": 1, \"K\": 2, \"H\": 3, \"T\": 4}\n    for card in stdin:\n        if card[1:] not in suit_dict:\n            return \"GRESKA\"\n        suit_dict[card[1:]] += 1\n    for key in suit_dict:\n        if suit_dict[key]!= 1:\n            return \"GRESKA\"\n    answer = []\n    for key in suit_dict:\n        answer.append(str(suit_dict[key]))\n    return''.join(answer)\n",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\"",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    rows, columns, radii = stdin.split(\" \")\n    rows, columns, radii = int(rows), int(columns), int(radii)\n    rows, columns, radii = rows, columns, radii\n    lines = [stdin.split(\"\\n\")[1]]\n    print(lines)\n    for i in range(rows - 1):\n        line = stdin.split(\"\\n\")[i + 2]\n        lines.append(line)\n    print(lines)\n    ans = 0\n    for line in lines:\n        line_count = 0\n        for char in line:\n            if char == '*':\n                line_count += 1\n        ans = max(ans, line_count)\n    return str(ans)\n",
        "test": "assert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution(\"2C 4D 4H 2D 2H\") == 3",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    columns, figure = lines[0].split()\n    columns, figure = int(columns), int(figure)\n\n    heights = [int(n) for n in lines[1].split()]\n    def calculate_heights(heights):\n        prev_heights = heights.copy()\n        for i in range(columns):\n            new_heights = []\n            for j in range(columns):\n                if heights[j] > prev_heights[j]:\n                    new_heights.append(heights[j] - 1)\n                else:\n                    new_heights.append(heights[j])\n            prev_heights = new_heights\n            heights = new_heights\n        return new_heights\n    heights = calculate_heights(heights)\n    def func(i):\n        if i == figure:\n            return 1\n        if i == 1:\n            return 7\n        return (func(i - 1) + func(i - 2)) % 100007\n    return str(func(figure))",
        "test": "assert solution('4 3\\n1 0 0 1 0') == '4'",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\n\ndef",
        "test": "assert solution(\"Hello World!\") == \"-3110 \\\\/\\/0|Z1|)!\", \"Error\"",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    stones = int(stdin)\n    if stones % 2 == 1:\n        return \"Alice\"\n    return \"Bob\"",
        "test": "assert solution(\"3\") == \"Alice\"",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    sentence = stdin.split()\n    result = \"\"\n    index = 0\n    while index < len(sentence):\n        if sentence[index].find(\"$\")!= -1:\n            for letter in sentence[index]:\n                if letter.isdigit():\n                    result += letter + \"hundred\"\n                    if sentence[index][1:].isdigit():\n                        result += \"and\"\n                elif letter == \"1\":\n                    result += \"one\"\n                elif letter == \"2\":\n                    result += \"twenty\"\n                elif letter == \"3\":\n                    result += \"thirty\"\n                elif letter == \"4\":\n                    result += \"fourty\"\n                elif letter == \"5\":\n                    result += \"fifty\"\n                elif letter == \"6\":\n                    result += \"sixty\"\n                elif letter == \"7\":\n                    result += \"seventy\"\n                elif letter == \"8\":\n                    result += \"eighty\"\n                elif letter == \"9\":\n                    result += \"ninety\"\n                elif letter == \"0\":\n                    if sentence[index][2:].isdigit():\n                        result += \"ten\"\n                    elif sentence[index][3:].isdigit():\n                        result += \"ty\"\n                else:\n                    result += letter\n            if sentence[index][1:].isdigit():\n                result += \"and\"\n        elif sentence[index].find(\"'\")!= -1:\n            for letter in sentence[index]:\n                if letter.isdigit():\n                    result += letter + \"hundred\"\n                    if sentence[index][1:].isdigit():\n                        result += \"and\"\n                elif letter == \"1\":\n                    result += \"one\"\n                elif letter == \"2\":\n                    result += \"twenty\"\n                elif letter == \"3\":\n                    result += \"thirty\"\n                elif letter == \"4\":\n                    result += \"fourty\"\n                elif letter == \"5\":\n                    result += \"fifty\"\n                elif letter == \"6\":\n                    result += \"sixty\"\n                elif letter == \"7\":\n                    result += \"seventy\"\n                elif letter == \"8\":\n                    result += \"eighty\"\n                elif letter == \"9\":\n                    result += \"ninety\"\n                elif letter == \"0\":\n                    if sentence[index][1:].isdigit():\n                        result += \"ten\"\n                    elif sentence[index][2:].isdigit():\n                        result += \"ty\"\n                else:\n                    result += letter\n            if sentence[index][1:].isdigit():\n                result += \"and\"\n        else:\n            result += sentence[index]\n            index += 1\n    return result\n",
        "test": "assert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'",
        "num_ids": 1815,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m_c = stdin.replace(\" \",\"\").replace(\"\\n\",\"\")\n    nop_count = 0\n    for i in range(len(m_c)//4):\n        for j in range(4):\n            if m_c[4*i+j].isupper():\n                break\n        else:\n            nop_count += 1\n    return str(nop_count)\n",
        "test": "assert solution(\"Abcd\") == \"0\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    tines = list(map(int, stdin.split(\" \")))\n    left = tines[0]\n    right = tines[1]\n    if left == right:\n        return \"Even \" + str(left + right)\n    elif left > right:\n        return \"Odd \" + str(left + right - 1)\n    elif left < right:\n        return \"Odd \" + str(left + right + 1)\n    else:\n        return \"Not a moose\"\n",
        "test": "assert solution(\"2 3\") == \"Odd 6\"",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "test": "assert solution(\"4 5 6\") == \"456\"",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin[i] if i % 3 == 0 else stdin[i] if i % 3 == 1 else '*' for i in range(len(stdin)))\n",
        "test": "assert solution('') == ''",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return f'{round(radius**2 * math.pi * 2, 5)}'",
        "test": "assert solution(\"21\") == \"1385.442360\"",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = [int(x) for x in stdin.split()]\n    res = 0\n    for d in data:\n        if d < 0:\n            res += d\n    return str(res)\n",
        "test": "assert solution('5\\n129 44 394 253 147') == '0'",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(N * log(N))\n    '''\n    stdin = stdin.split()\n    N = int(stdin[0])\n    t = sorted(map(int, stdin[1:]))\n\n    return sum(t[i] - t[i - 1] for i in range(1, len(t)))\n",
        "test": "assert solution(\"3\\n2 2 2\") == \"6\"",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    t, n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    time = int(t)\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin[i + i])\n    s = matrix.index('S')\n    # print(matrix)\n    # print(time)\n\n    for i in range(time):\n        q = deque()\n        q.append([s, 0])\n        path = []\n        visited = set()\n        while q:\n            tmp = q.popleft()\n            x, y = tmp[0]\n            d = tmp[1]\n            if x == 0:\n                path.append('L')\n                q.append([x + 1, y + 1])\n            if x == n - 1:\n                path.append('R')\n                q.append([x - 1, y + 1])\n            if y == 0:\n                path.append('U')\n                q.append([x + 1, y + 1])\n            if y == m - 1:\n                path.append('D')\n                q.append([x + 1, y - 1])\n            if matrix[x][y] == '1':\n                path.append('B')\n            if x == s and y == 0:\n                path.append('S')\n                q.append([x, y + 1])\n                if len(path) == 1:\n                    print(d)\n                    return path[0]\n                else:\n                    print(d)\n                    return path[1]\n            if x == s and y == m - 1:\n                path.append('S')\n                q.append([x, y - 1])\n                if len(path) == 1:\n                    print(d)\n                    return path[0]\n                else:\n                    print(d)\n                    return path[1]\n            if x == 0:\n                path.append('L')\n                q.append([x + 1, y])\n            if x == n - 1:\n                path.append('R')\n                q.append([x - 1, y])\n            if y == 0:\n                path.append('U')\n                q.append([x, y + 1])\n            if y == m - 1:\n                path.append('D')\n                q.append([x, y - 1])\n\n    return 'NOT POSSIBLE'\n",
        "test": "assert solution(open(\"input.txt\").read()) == \"NOT POSSIBLE\"",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    number_of_fruits, max_size = [int(i) for i in stdin.split()]\n    fruits = [int(i) for i in stdin.split()]\n\n    fruits.sort()\n    fruits.reverse()\n\n    current_sum = 0\n    counter = 0\n    for fruit in fruits:\n        if current_sum + fruit <= max_size:\n            current_sum += fruit\n            counter += 1\n    return counter",
        "test": "assert solution('5 5\\n3 1 2 1 1') == 4",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    number_of_rounds = int(stdin[0])\n    sven_round_symbols = stdin[1]\n    friends_number = int(stdin[2])\n    friends_round_symbols = [stdin[i] for i in range(3, 3 + friends_number)]\n    round_scores = [0] * number_of_rounds\n    friend_scores = [0] * friends_number\n    sven_score = 0\n    friend_scores = [0] * friends_number\n    for round in range(number_of_rounds):\n        sven_round_symbol = sven_round_symbols[round]\n        for friend in range(friends_number):\n            friend_round_symbol = friends_round_symbols[friend][round]\n            if sven_round_symbol == friend_round_symbol:\n                round_scores[round] = 2\n                friend_scores[friend] += 2\n            elif (sven_round_symbol == \"S\" and friend_round_symbol == \"R\") or (sven_round_symbol == \"P\" and friend_round_symbol == \"S\") or (sven_round_symbol == \"R\" and friend_round_symbol == \"P\"):\n                round_scores[round] = 1\n                friend_scores[friend] += 1\n            else:\n                friend_scores[friend] += 0\n    for score in friend_scores:\n        sven_score += score\n    return str(sven_score) + \"\\n\" + str(max(friend_scores))\n\nprint(solution(input()))\n",
        "test": "assert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\\n\"",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the seconds displayed on the stopwatch's timer\"\"\"\n    pass\n",
        "test": "assert solution(input) == output",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = [int(x) for x in stdin.readline().strip().split(\" \")]\n    c.sort()\n    cnt = 0\n    i = 0\n    m = 0\n    while n > 0:\n        cnt += (c[i] * n)\n        if cnt > m:\n            m = cnt\n        if cnt >= 1:\n            n -= 1\n        i += 1\n    print(m)\n    return \"\"\n\nsolution(sys.stdin.read())\n",
        "test": "assert solution(\"2 2\") == 'impossible'",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return \"Emma\" if max([sum(map(int, line.split())) for line in stdin.splitlines()[1:]]) > sum([sum(map(int, line.split())) for line in stdin.splitlines()[1:]]) else \"Gunnar\"",
        "test": "assert solution(\"2 2 4 2\\n3 3 4 3\") == \"Gunnar\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    count = 0\n    counts = stdin.split('\\n')[1].split()\n    for i in range(n):\n        if counts[i] == \"mumble\":\n            count += 1\n    if count == 0:\n        return'something is fishy'\n    elif count > n // 2:\n        return'makes sense'\n    else:\n        return'something is fishy'",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = list(map(int, stdin.split(' ')))\n    values_differences = [values[j] - values[j - 1] for j in range(1, n)]\n\n    for i in range(1, len(values_differences)):\n        if values_differences[i] == values_differences[i - 1]:\n            return f'{i} {values[i]}'\n        elif values_differences[i] == 0:\n            return f'0 {values[i + 1]}'\n",
        "test": "assert solution('4 9 25 49 81') == '2 121'",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'CORRECT' or 'INCORRECT' depending on whether the input is a valid solution to the 8-queens puzzle.\n\n    >>> solution('''8\n   ... 1 5\n   ... 6 2\n   ... 3 1\n   ... 5 0\n   ... 4 6\n   ... 0 3\n   ... 2 7\n   ... 7 4\n   ... ''')\n    'CORRECT'\n    >>> solution('''4\n   ... 2 3\n   ... 1 0\n   ... 0 2\n   ... 3 1\n   ... ''')\n    'CORRECT'\n    >>> solution('''4\n   ... 2 3\n   ... 1 0\n   ... 0 2\n   ... 3 1\n   ... ''')\n    'INCORRECT'\n    \"\"\"\n    return 'CORRECT' if solve_n_queens(stdin) else 'INCORRECT'\n\n\ndef",
        "test": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"",
        "num_ids": 2592,
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    matrix = []\n    for i in range(N):\n        matrix.append(list(map(int, stdin.readline().split(' '))))\n    #\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n    for i in range(N):\n        for j in range(N):\n            if matrix[i][j] == 0:\n                matrix[i][j] = float('inf')\n\n    ans = []\n    for i in range(N):\n        ans.append(max(matrix[i]))\n    return''.join(map(str, ans))\n",
        "test": "assert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    D, M = stdin.split()\n    D, M = int(D), int(M)\n    if M in (4, 6, 9, 11):\n        D += 1\n    elif M == 2:\n        if D < 32:\n            D += 1\n        else:\n            D = 1\n            M += 1\n    elif M in (1, 3, 5, 7, 8, 10, 12):\n        D += 1\n    elif M == 2 and D == 32:\n        D = 1\n        M += 1\n    if M == 2 and D == 32:\n        M += 1\n        D = 1\n    return 'Saturday' if D == 1 else 'Sunday' if D == 2 else 'Monday' if D == 3 else 'Tuesday' if D == 4 else 'Wednesday' if D == 5 else 'Thursday' if D == 6 else 'Friday'\n",
        "test": "assert solution(solution.__doc__.split(\"\\n\")[0]) == 'Thursday'",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = map(int, stdin.split('\\n'))\n    result = 0\n    for n in range(L, D + 1):\n        if sum(map(int, str(n))) == X:\n            result = n\n    return f'{result}\\n{result + 1}'\n",
        "test": "assert solution('4\\n100\\n4\\n') == \"4\\n40\"",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    triangle_info = stdin.split()\n    points = triangle_info[:3]\n    x1, y1, x2, y2 = [int(point) for point in points]\n    z1 = int(((y2 - y1) ** 2 + (x2 - x1) ** 2) ** 0.5)\n    points = triangle_info[3:]\n    x3, y3, x4, y4 = [int(point) for point in points]\n    z2 = int(((y4 - y3) ** 2 + (x4 - x3) ** 2) ** 0.5)\n    x, y = (x1, y1), (x2, y2)\n    z = int(((y[0] - y[1]) ** 2 + (x[0] - x[1]) ** 2) ** 0.5)\n    area = (z1 * z2) / 2\n    print(f'{area:.1f}')\n    print(f'{len(points)}')\n",
        "test": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution('30') == '7'",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all CIA blimps in the input\"\"\"\n\n    # Find all blimps\n    result = [\n        i for i in range(len(stdin.splitlines()))\n        if stdin.splitlines()[i].count(\"-\") == 2 and stdin.splitlines()[i].count(\"FBI\")\n    ]\n    return \" \".join(map(str, result)) if len(result) else \"HE GOT AWAY!\"\n",
        "test": "assert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes the input string and turns it into a list.\n    For each item in the list, the function also takes each item,\n    and uses the functions triangle_area and get_endpoints to return\n    the parameters of the triangle.\n    Using the parameters from each item, the function computes the\n    area of the triangle and then adds it to the total area.\n    This total area is then divided by the sum of the area of all triangles\n    in the input list. This result is rounded to 4 decimal places.\n    \"\"\"\n    \n    total_area = 0\n    total_area_length = 0\n    \n    n = int(stdin.readline())\n    \n    for _ in range(n):\n        area, A, B, C = triangle_area(stdin.readline())\n        \n        total_area += area\n        total_area_length += A + B\n        \n    return round(total_area/total_area_length, 4)\n",
        "test": "assert solution('4 3 2\\n4 5 6\\n1 2 3') == '5.551115123125783'",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"Your solution goes here.\"\"\"\n    return stdin\n",
        "test": "assert solution('24') == '24'",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result: int = 0\n    for i in range(len(stdin)):\n        if i == len(stdin)-1:\n            if stdin[i] == '1':\n                result += 1\n            elif stdin[i] == '9':\n                result += 9\n            break\n        if stdin[i] == '1' and stdin[i+1] == '9':\n            result += 9\n        if stdin[i] == '1' and stdin[i+1] == '8':\n            if stdin[i+2] == '9':\n                result += 9\n            elif stdin[i+2] == '8':\n                result += 8\n    return str(result)\n",
        "test": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        str: the result\n    \"\"\"\n    args = stdin.split(\"\\n\")\n    degree = int(args[0])\n    coefficients = [int(x) for x in args[1].split(\" \")]\n    return \" \".join([str(x) for x in solve(degree, coefficients)])\n",
        "test": "assert solution(\"2 2 -4 5\") == \"5 -2 4\"",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = [int(x) for x in stdin.split(' ')]\n    s = [int(x) for x in stdin.split(' ')]\n    s.sort()\n    return''.join([str(x) for x in s])\n",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    return str(int(A*I))\n",
        "test": "assert solution(\"1 100\") == \"100\"",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your solution here\n    input_list = stdin.split()\n    number_a = input_list[0]\n    number_b = input_list[1]\n    a = int(number_a[::-1])\n    b = int(number_b[::-1])\n    \n    if a > b:\n        return number_a[::-1]\n    else:\n        return number_b[::-1]\n",
        "test": "assert solution('734 893') == '437'",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"7 96\") == \"contest\"",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    first_frame = stdin.split(\"\\n\")\n    M, N, C = first_frame[0].split(\" \")\n    first_frame = first_frame[1:]\n    N = int(N)\n    M = int(M)\n    M = len(first_frame)\n    N = len(first_frame[0])\n    first_frame = [list(row) for row in first_frame]\n    second_frame = stdin.split(\"\\n\")\n    second_frame = second_frame[1:]\n    M, N, C = second_frame[0].split(\" \")\n    second_frame = second_frame[1:]\n    N = int(N)\n    M = int(M)\n    M = len(second_frame)\n    N = len(second_frame[0])\n    second_frame = [list(row) for row in second_frame]\n    # print(first_frame)\n    # print(second_frame)\n    N = first_frame[0][0]\n    # print(N)\n    # print(first_frame)\n    first_frame_for_change = []\n    for line in first_frame:\n        first_frame_for_change.append([c for c in line])\n    first_frame_for_change = np.array(first_frame_for_change)\n    second_frame = np.array(second_frame)\n    print(first_frame_for_change)\n    print(second_frame)\n    first_frame_for_change = np.where(first_frame_for_change == C, second_frame, first_frame_for_change)\n    print(first_frame_for_change)\n    for i in range(M):\n        first_frame_for_change[i] = ''.join(first_frame_for_change[i])\n    print(first_frame_for_change)\n    return '\\n'.join(first_frame_for_change)\n\ndef",
        "test": "assert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Double check answers\"\"\"\n    b, d, c, l = [int(n) for n in stdin.split()]\n    b, d, c, l = sorted(sorted(b, d, c), l)\n\n    a_lst = [0]\n    b_lst = [0]\n    c_lst = [0]\n    cnt = 1\n    while True:\n        if cnt * b < l:\n            a_lst.append(cnt)\n        else:\n            break\n        cnt += 1\n\n    cnt = 1\n    while True:\n        if cnt * d < l:\n            b_lst.append(cnt)\n        else:\n            break\n        cnt += 1\n\n    cnt = 1\n    while True:\n        if cnt * c < l:\n            c_lst.append(cnt)\n        else:\n            break\n        cnt += 1\n\n    a_lst.sort()\n    b_lst.sort()\n    c_lst.sort()\n    a_lst.append(l // b)\n    b_lst.append(l // d)\n    c_lst.append(l // c)\n\n    s_lst = []\n    for a in a_lst:\n        for b in b_lst:\n            for c in c_lst:\n                if a * b * c == l and a + b + c <= l:\n                    s_lst.append(a)\n                    s_lst.append(b)\n                    s_lst.append(c)\n\n    if len(s_lst) == 0:\n        return 'impossible'\n    return''.join([str(n) for n in s_lst])\n",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"",
        "num_ids": 2577,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    while count < n:\n        number = int(stdin.readline())\n        count += 1\n\n    return 'good job'\n",
        "test": "assert solution(\"1 2 3 5 7 8 9 10\") == \"1 3 6 8 10\"",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get input\n    n, p, s, v = [float(i) for i in stdin.split()]\n    \n    # Calculate c\n    c = (p * s) / (v * 10**9)\n    \n    # Calculate t\n    t = (n * math.log(2)**(c*math.sqrt(2)) ) / (p * 10**9)\n    \n    # Return t\n    return \"{:.6f} {:.6f}\".format(t, c)\n",
        "test": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    num_characters = int(stdin)\n    return str(num_characters * (num_characters - 1) // 2)\n",
        "test": "assert solution('1') == '0'",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return sum(i for i, c in enumerate(stdin) if c == 'A')\n\n\nprint(solution(\"AABA\"))\nprint(solution(\"AABBAAAB\"))\nprint(solution(\"ABC\"))\n",
        "test": "assert solution(\"5\\nA\\nA\\nA\\nB\\nD\") == \"0\"",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n\nR, C, Z_R, Z_C = [int(i) for i in stdin.split('\\n')[0].split()]\narticle = [input() for i in range(R)]\nenlarged_article = [[article[i][j] for j in range(C)] for i in range(R * Z_R)]\nprint(*[\"\".join(row) for row in zip(*enlarged_article)], sep=\"\\n\")\n",
        "test": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    for _ in range(n):\n        operation, time_to_change, hour, minute = stdin.readline().split()\n        hour = int(hour)\n        minute = int(minute)\n        if operation == \"F\":\n            if hour + int(time_to_change) > 23:\n                hour = int(time_to_change) % 24\n            else:\n                hour += int(time_to_change)\n            if minute + int(time_to_change) > 59:\n                minute = int(time_to_change) % 60\n            else:\n                minute += int(time_to_change)\n        else:\n            if hour - int(time_to_change) < 0:\n                hour = (int(time_to_change) + hour) % 24\n            else:\n                hour = hour - int(time_to_change)\n            if minute - int(time_to_change) < 0:\n                minute = (int(time_to_change) + minute) % 60\n            else:\n                minute = minute - int(time_to_change)\n        print(hour, minute)",
        "test": "assert solution('F 60 13 20') == '14 20'",
        "num_ids": 2195,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        day, month = map(int, stdin.split())\n    except ValueError:\n        return \"nope\"\n    if day == 31:\n        if month == 10:\n            return \"yup\"\n        else:\n            return \"nope\"\n    else:\n        return \"nope\"\n\"\"\"\n\nimport unittest\n\n\ndef",
        "test": "assert solution(\"SEP 12\") == \"nope\"",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    (m, n) = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    (u, l, r, d) = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(stdin.split('\\n')[_ + 1])\n    puzzle.append(''.join(['.'* n for n in range(u)]))\n    for _ in range(m):\n        puzzle.append(''.join(['#'* n for n in range(u)]))\n    puzzle.append(''.join(['.'* d for _ in range(u)]))\n    for _ in range(m):\n        puzzle.append(''.join(['#'* d for _ in range(u)]))\n    puzzle.append(''.join(['.'* n for n in range(l)]))\n    for _ in range(m):\n        puzzle.append(''.join(['.'* n for n in range(l)]))\n    puzzle.append(''.join(['.'* r for _ in range(m)]))\n    for _ in range(m):\n        puzzle.append(''.join(['.'* r for _ in range(m)]))\n    return '\\n'.join(puzzle)\n\n\ndef",
        "test": "assert solution('3 3\\n2 1 3\\nirak\\nhoni\\noker') == '#.irak\\n#.honi#\\n#.oker#'",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('''White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, N = [int(i) for i in stdin.split(' ')]\n    return 'Diablo is happy!' if A <= N ** 2 <= A + 1 else 'Need more materials!'\n",
        "test": "assert solution(\"0.000001 100.00\") == \"Need more materials!\"",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 4870,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.strip().split())\n    if u < s and d < s:\n        return \"use the stairs\"\n    elif g < s and d < s:\n        return \"use the stairs\"\n    elif s < g and u < s:\n        return \"use the stairs\"\n    elif s < g and u < g:\n        return \"use the stairs\"\n    else:\n        s, d = min(s, d), max(s, d)\n        if g in range(s, f + 1) or g in range(s + 1, f + 1):\n            if d in range(s, f + 1) or d in range(s + 1, f + 1):\n                return abs(s - g) + abs(d - g)\n            else:\n                return abs(d - g)\n        elif d in range(s, f + 1) or d in range(s + 1, f + 1):\n            return abs(d - g)\n        else:\n            return abs(d - s) + abs(g - s)",
        "test": "assert solution('1 1 10 2 1') == 'use the stairs'",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the average group score if a student leaves Kattis\"\"\"\n\n    # Get data\n    n = int(stdin.readline())\n    scores = [int(i) for i in stdin.readlines()]\n\n    # Find the group score\n    score = (\n        (1 / 5)\n        * sum(\n            (\n                s * (5 ** i)\n                for i, s in enumerate(sorted(scores, reverse=True))\n            )\n        )\n    )\n\n    # Find the average score\n    group_score = (score * (4 / 5)) ** n\n\n    # Print results\n    print(round(score, 6))\n    print(round(group_score, 6))\n\n    return \"OK\"\n\nsolution(open(file='input.txt').read())",
        "test": "assert solution(\"5\\n678\\n4567\\n89\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"178.611844098\\n6.093\"",
        "num_ids": 1738,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n  days: List[int] = list(map(int, stdin.split()))\n  res = 0\n  while (True):\n    for i in range(0, len(days)-1):\n      if days[i] < days[i+1]:\n        days[i] += 1\n        days[i+1] -= 1\n        res += 1\n    if days[-1] <= 20:\n      return str(res)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    rows, cols = map(lambda x: min(50, max(3, x)), (rows, cols))\n    map_ = [[x for x in stdin.split('\\n')[r] if x!= '\\n'] for r in range(rows)]\n    player = find_player(map_)\n    return ''.join([''.join([y if y!= '#' else 'T' for y in x]) if len(x) == cols else x for x in map_])\n\n\ndef",
        "test": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'",
        "num_ids": 2077,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rows, num_of_cols = map(int, stdin.split('\\n')[0].split(' '))\n    grid = list()\n    for _ in range(num_of_rows):\n        row = list(stdin.split('\\n')[1 + _].replace(' ', ''))\n        if len(row) > num_of_cols:\n            row = row[:num_of_cols]\n        else:\n            while len(row)!= num_of_cols:\n                row.append('_')\n        grid.append(row)\n    dance_moves = list()\n    for _ in range(num_of_rows):\n        for col in range(num_of_cols):\n            if grid[_][col] == '_' and grid[_ + 1][col] == '_' and grid[_ + 2][col] == '_':\n                dance_moves.append(col)\n                grid[_][col], grid[_ + 1][col], grid[_ + 2][col] = 'X', 'X', 'X'\n    return str(len(dance_moves))\n",
        "test": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return pig_latin(stdin)\n\ndef",
        "test": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return 'Anywhere is fine I guess' if 'pea soup' in stdin and 'pancakes' in stdin else stdin[0]\n",
        "test": "assert solution('1\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'Anywhere is fine I guess'",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = [int(x) for x in stdin.split(' ')]\n    return int(h / (a - b))\n",
        "test": "assert solution(\"5 0 15\") == 3",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    r1, s = map(int, stdin.split())\n    return str(r1 + s - 2)\n\ndef",
        "test": "assert solution('11 15') == '19'",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 4879,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    arriving, leaving, other = stdin.split(' ')\n    if arriving == leaving:\n        return \"No\"\n    if (arriving == \"South\" and leaving == \"East\") or (arriving == \"North\" and leaving == \"West\"):\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('South West East') == 'Yes'",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:",
        "test": "assert solution('5 17\\naaab') == 'aaaabb'",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # 1, 2, 3,..., n-1\n    # 1, 3, 6, 10,..., 2n-2\n    sum_1_n = n * (n+1) // 2\n    # 1, 5, 10, 15,..., 2n-1\n    sum_2_n = n * (3*n+1) // 2\n    print('sum_1_n', sum_1_n)\n    print('sum_2_n', sum_2_n)\n    \n    if sum_1_n % 2 == 0 or sum_2_n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n    \n    return answer\n",
        "test": "assert solution(\"4\") == \"Even\"",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''",
        "test": "assert solution('9 5\\n'",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    cnt, huffle_puff = map(int, stdin.split('\\n')[:2])\n    carrots = 0\n    for _ in range(huffle_puff):\n        name, *problems = stdin.split('\\n')[2:]\n        problems = [int(problem) for problem in problems]\n        carrots += sum(problems)\n    return carrots",
        "test": "assert solution('carrots?\\nbunnies') == 1",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    white_pieces: dict = {}\n    black_pieces: dict = {}\n    for i in stdin.split(\"\\n\\n\"):\n        if \"Black\" in i:\n            for j in i.split(\"\\n\")[1:]:\n                row, col = j[0], j[1:]\n                if row.isalpha():\n                    row = int(row[1:])\n                    col = ord(col[0]) - 97\n                    black_pieces[f\"{j[0]}{j[1:]}\"] = [row, col]\n        if \"White\" in i:\n            for j in i.split(\"\\n\")[1:]:\n                row, col = j[0], j[1:]\n                if row.isalpha():\n                    row = int(row[1:])\n                    col = ord(col[0]) - 97\n                    white_pieces[f\"{j[0]}{j[1:]}\"] = [row, col]\n    kings = sorted([k for k, v in black_pieces.items() if v == [8, 4]] + [k for k, v in white_pieces.items() if v == [1, 4]])\n    queens = sorted([k for k, v in black_pieces.items() if v == [8, 3]] + [k for k, v in white_pieces.items() if v == [1, 3]])\n    rooks = sorted([k for k, v in black_pieces.items() if v == [8, 0]] + [k for k, v in white_pieces.items() if v == [1, 0]])\n    bishops = sorted([k for k, v in black_pieces.items() if v == [8, 2]] + [k for k, v in white_pieces.items() if v == [1, 2]])\n    knights = sorted([k for k, v in black_pieces.items() if v == [8, 1]] + [k for k, v in white_pieces.items() if v == [1, 1]])\n    pawns = sorted([k for k, v in black_pieces.items() if v == [8, 6]] + [k for k, v in white_pieces.items() if v == [1, 6]])\n    king_black = \"\" if not kings else f\"{kings[0]}d1\"\n    king_white = \"\" if not kings else f\"{kings[-1]}d8\"\n    queen_black = \"\" if not queens else f\"{queens[0]}d1\"\n    queen_white = \"\" if not queens else f\"{queens[-1]}d8\"\n    rook_black = \"\" if not rooks else f\"{rooks[0]}a1\"\n    rook_white = \"\" if not rooks else f\"{rooks[-1]}h1\"\n    bishop_black = \"\" if not bishops else f\"{bishops[0]}c1\"\n    bishop_white = \"\" if not bishops else f\"{bishops[-1]}f1\"\n    knight_black = \"\" if not knights else f\"{knights[0]}b1\"\n    knight_white = \"\" if not knights else f\"{knights[-1]}g1\"\n    pawn_black = \"\" if not pawns else f\"{pawns[0]}a2\"\n    pawn_white = \"\" if not pawns else f\"{pawns[-1]}h7\"\n    res = f\"White: {king_white}, {queen_white}, {rook_white}, {bishop_white}, {knight_white}, {pawn_white}\\nBlack: {king_black}, {queen_black}, {rook_black}, {bishop_black}, {knight_black}, {pawn_black}\"\n    return res\n\n\ndef",
        "test": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:::|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Kd1,Qe1,Rf1,Bg1,Bh1,Nf1,Kf1,Kc2,Ng1,a4,c3,d3,Qg2,h3,c3,e4,Bf1,Kd3,Kb1,Nc2,Ra4,Rh1,Nf1,Ng1,a6,b6,b5,Bh1,c4,Qf1,Qe4,Rg2,Kb2,Kc1,Nd2,Rd3,Rh4,Kd4,Kf3,Bg2,Rg1,Qf1,Qf3,a5,Bh3,Kg1,a7,c6,d6,e6,Qe1,Kg1,Kf2,Rc1,a8,d7,Bh2,Rf2,Kg3,Rh5,Kg2,Rf1,Rf4,b8,e5,Qg1,Qf2,Qf4,Qf3,Qe2,Bh4,c5,Kf2,a5,d3,Nf2,Nf3,Kd3,Kg1,Nf4,Ng4,b7,b6,c6,e7,c7,d7,Qe2,Qe4,b2,b4,c1,d5,Qf2,Qe1,Qf3,d2,d3,Qe3,Rb4,Bf2,c5,d6,e6,Rg2,Rf1,Nf1,a1,b1,c1,c2,b2,d1,e1,c3,a4,e4,Rb3,c4,d4,Qe3,Rb2,Kf1,Rg3,Kg2,Rf1,Nf1,a2,a3,c2,d2,Nf1,Nf3,e3,d4,c4,d5,e5,d6,b7,e7,c7,d7,e8,c8,a8,d8,e7,d6,",
        "num_ids": 4073,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    nums = [True] + [True if i % 2 == 0 else False for i in range(n)]\n    seen = set()\n    for i in range(k):\n        if nums[i + 1] not in seen:\n            seen.add(nums[i + 1])\n        else:\n            if len(seen) == k:\n                return \"Your wish is granted!\"\n            else:\n                return \"You will become a flying monkey!\"\n    return \"You will become a flying monkey!\"\n",
        "test": "assert solution('10 10') == 'You will become a flying monkey!'",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"16\") == 16",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n, t = int(n), int(t)\n    tasks = stdin.split()\n    tasks = [int(x) for x in tasks]\n    tasks.sort()\n    tasks = tasks[::-1]\n    i = 0\n    while t > 0:\n        task = tasks[i]\n        if task > t:\n            break\n        t -= task\n        i += 1\n    return str(i)\n",
        "test": "assert solution('6 180\\n45 30 55 20 80 20') == '4'",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return '66'",
        "test": "assert solution(\"4\\n21\\n34\\n18\\n9\") == '79'",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n",
        "test": "assert solution(\"4 5 2 3\\n0 1 2 3 4\") == \"4\"",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.split()\n    k = stdin[0]\n    q = stdin[1]\n    r = stdin[2]\n    b = stdin[3]\n    n = stdin[4]\n    p = stdin[5]\n\n    ans = []\n    ans.append(k - p)\n    ans.append(q - 2)\n    ans.append(r - 2)\n    ans.append(b - 2)\n    ans.append(n - 8)\n    ans.append(p - 8)\n    for i in ans:\n        print(i, end = \" \")\n\n    return \"\"\n",
        "test": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"5\\nqwerty 0.3334\\n123456 0.6666\\nqwerty 0.3334\\nqwerty 0.3334\\nqwerty 0.3334\") == \"0.3333\"",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a line of integers and a constant, determines the distance to the nearest car\n    that will cause a car to brake.\n    \"\"\"\n    n, p = map(int, stdin.split())\n    distances = list(map(int, stdin.split()))\n    min_distance = 10 ** 7\n    for i, d in enumerate(reversed(distances)):\n        if d > p * (i + 1):\n            min_distance = min(min_distance, d - p * (i + 1))\n    return str(min_distance)\n",
        "test": "assert solution('4 1\\n2 3 4') == '1'",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\t*\\tF: -------------------------------------**\\nE:\\t*\\tE:\\t**\\t*\\t*\\t\\t\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*",
        "num_ids": 2521,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return 'possible' if is_non_degenerate(stdin) else 'impossible'\n",
        "test": "assert solution('3\\n2 1 2') == 'possible'",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    s = Solution()\n    return s.solve(a, total)",
        "test": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == 3",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    p = []\n    t = []\n    for i in range(1, len(stdin)):\n        p.append(list(stdin[i].split()))\n        t.append([float(p[i][1]), float(p[i][2])])\n    p.sort()\n    t.sort()\n    t = np.array(t)\n    return p[0][0]\n\nimport numpy as np\np = [list(stdin.split('\\n')[i].split()) for i in range(1, len(stdin.split('\\n')))]\nt = [list(map(float, p[i][1:])) for i in range(len(p))]\nt = np.array(t)\nt = t[t[:,0].argsort()]\nreturn p[0][0]\n",
        "test": "assert solution(\"3\\nJOE 0.78 0.01\\nFRED 0.96 0.01\\nMARY 0.20 0.02\") == \"0.35\\nFRED\\nMARY\"",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ans = 0\n    data = [[int(x) for x in stdin.readline().split(' ')] for i in range(n)]\n    for i in range(n):\n        m = data[i][0]\n        l = data[i][1]\n        u = data[i][2]\n        if l > u:\n            l, u = u, l\n        r = (m - 1) // (u - l + 1)\n        ans += r\n    print(ans)\n    return ''\n\nsolution('3\\n1 2\\n2 4\\n5 6\\n')\n",
        "test": "assert solution(\"6\\n1 3\\n2 5\\n7 10\\n8 9\") == \"2\"",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('heyhey') == 'heeeeee'",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem.\"\"\"\n    num_villages = int(stdin)\n    villages = []\n    for i in range(1, num_villages + 1):\n        villages.append(list(map(int, stdin.split()[i * 2 - 2:])))\n    for i in range(num_villages):\n        for j in range(num_villages):\n            villages[i][j] = villages[j][i]\n    return '\\n'.join(map(str, roads(villages, num_villages)))\n\n\ndef",
        "test": "assert solution(test_stdin) == test_stdout",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = list(stdin)\n    B = []\n    C = []\n    D = []\n    for i in range(len(A) // 2):\n        B.append(A[i])\n    for j in range(len(A) // 2, len(A)):\n        C.append(A[j])\n    for i in range(len(A) // 2):\n        D.append(C[i])\n    E = []\n    for i in range(len(B)):\n        E.append(rotate(ord(B[i]) - 65, C[i]))\n    F = []\n    for i in range(len(D)):\n        F.append(rotate(ord(D[i]) - 65, E[i]))\n    G = []\n    for i in range(len(E)):\n        G.append(rotate(ord(E[i]) - 65, F[i]))\n    H = []\n    for i in range(len(B)):\n        H.append(chr(int(ord(B[i]) + ord(G[i]) - 65) % 26 + 65))\n    I = ''\n    for i in range(len(H)):\n        I += H[i]\n    return I\n\n\ndef",
        "test": "assert solution('WELCOME') == 'ABCD'",
        "num_ids": 2506,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = stdin\n    # create a dictionary with counters for each character\n    d = dict()\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n\n    # count how many letters are not in the dictionary\n    count = 0\n    for c in s:\n        if d[c] == 0:\n            count += 1\n        else:\n            d[c] -= 1\n\n    return count\n\n\ndef",
        "test": "assert solution(\"hqpqv\") == 3",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if b == a[:len(b)]:\n        return \"go\"\n    return \"no\"",
        "test": "assert solution('aaah\\naaaaah') == 'no'",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 4904,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the winner of a basketball game from the given records.\"\"\"\n    \n    score = stdin.replace('A', '0')\n    score = score.replace('B', '1')\n    score = score.replace('2', '2')\n    score = score.replace('1', '0')\n    \n    return 'A' if score.count('1') > score.count('0') else 'B'\n",
        "test": "assert solution('B2A1B2A2B2A2B2') == 'B'",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, g, *data = map(int, stdin.split('\\n')[:6])\n    m, k = map(int, stdin.split('\\n')[6].split(' '))\n    g = map(int, stdin.split('\\n')[7:7 + g])\n    data = [map(int, line.split(' ')) for line in stdin.split('\\n')[7 + g:]]\n    graph = {}\n    for a, b, l in data:\n        if a not in graph:\n            graph[a] = []\n        if b not in graph:\n            graph[b] = []\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    path = nx.dijkstra_path(nx.Graph(graph), 1, g)\n    time = 0\n    for i in range(len(path) - 1):\n        curr = path[i]\n        next = path[i + 1]\n        time += data[curr - 1][0] * data[curr - 1][1]\n        time += data[next - 1][0] * data[next - 1][1]\n    return time\n",
        "test": "assert solution(\"2 2 2\\n2 3 8\") == \"21\"",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[0]\n    if stdin[0] == \"E\":\n        return RLE(stdin)\n    else:\n        return string(stdin)\n\n\ndef",
        "test": "assert solution(\"D 2H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    if length == 1:\n        return \"Alice\"\n    if length == 2:\n        return \"Bob\"\n    if length == 3:\n        return \"Alice\"\n\n    if length % 2 == 0:\n        return \"Bob\"\n    return \"Alice\"\n",
        "test": "assert solution('2') == 'Bob'",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b or b == c or c == a:\n        return \"NO SOLUTION\"\n    if c == a + b:\n        return \"{}+{}={}\".format(a, b, c)\n    elif c == a - b:\n        return \"{}-{}={}\".format(a, b, c)\n    elif c == a * b:\n        return \"{}*{}={}\".format(a, b, c)\n    else:\n        return \"{}/{}={}\".format(a, b, c)",
        "test": "assert solution('5 3 8') == '5+3=8'",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    D = [int(i) for i in stdin.split()]\n\n    if max(D) > N - 1:\n        return 'NO'\n    else:\n        return 'YES'\n\nprint(solution(input()))",
        "test": "assert solution(\"5\\n1 3 2 3 3\") == \"YES\"",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    return stdin[0]\n",
        "test": "assert solution(\"abc\") == \"cba\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \n    def first_sort(sorted_list,sort_field):\n        sorted_list = sorted(sorted_list, key = lambda x : x[sort_field])\n        return sorted_list\n    \n    def second_sort(sorted_list,sort_field):\n        sorted_list = sorted(sorted_list, key = lambda x : x[sort_field])\n        return sorted_list\n    \n    def print_list(my_list):\n        for elem in my_list:\n            print(*elem)\n        print()\n    \n    sorted_list = stdin.split('\\n')\n    \n    sort_field_name = []\n    sort_field = []\n    \n    for i in range(int(stdin.split('\\n')[0])):\n        sort_field_name.append(stdin.split('\\n')[i+1].split(' ')[0])\n        sort_field.append(int(stdin.split('\\n')[i+1].split(' ')[1]))\n    \n    for i in range(int(stdin.split('\\n')[2])):\n        if stdin.split('\\n')[i+3].split(' ')[0] == \"Artist\":\n            sorted_list = first_sort(sorted_list,0)\n        if stdin.split('\\n')[i+3].split(' ')[0] == \"Album\":\n            sorted_list = second_sort(sorted_list,1)\n        if stdin.split('\\n')[i+3].split(' ')[0] == \"Song_Title\":\n            sorted_list = second_sort(sorted_list,2)\n        if stdin.split('\\n')[i+3].split(' ')[0] == \"Length_seconds\":\n            sorted_list = second_sort(sorted_list,3)\n            \n    print_list(sorted_list)\n    return sorted_list",
        "test": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nAlbum\\nSong_Title\") == \"Album Artist Song_Title Length_seconds\\nPiano_Favorites November 163\\nHard_Times 192\\nLondon_Town 236\\nSummers_Here 163\\nSummer Lullaby 215\\n\"",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # import stdin\n    h, w, n = map(int, stdin.readline().split())\n    brick_lengths = list(map(int, stdin.readline().split()))\n    brick_lengths.sort(reverse=True)\n\n    brick_count = sum(brick_lengths)\n\n    if n > brick_count:\n        print('NO')\n    else:\n        last_brick_length = brick_lengths[0]\n        brick_count -= last_brick_length\n        if (w - last_brick_length) > 0:\n            brick_count -= (w - last_brick_length)\n\n        if brick_count > n:\n            print('NO')\n        else:\n            print('YES')\n",
        "test": "assert solution(\"4 5 7\\n5 5 5 5 5 5 5\") == \"YES\"",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin.split('\\n')[0])\n    vaccinated = set()\n    infected = dict()\n    vaccinated_nums = dict()\n    for i in range(total):\n        curr_input = stdin.split('\\n')[i].split()\n        if curr_input[0] == 'Y':\n            vaccinated.add(i)\n            infected[i] = [0, 0, 0]\n            vaccinated_nums[i] = 0\n        else:\n            for j in range(3):\n                if curr_input[j + 1] == 'Y':\n                    infected[i][j] += 1\n\n    not_effective = False\n    for i in range(total):\n        for j in range(3):\n            if infected[i][j] > 0:\n                if infected[i][j] < vaccinated_nums[i] or not_effective:\n                    print(f'Not Effective')\n                    not_effective = True\n                    break\n            vaccinated_nums[i] = infected[i][j]\n        if not_effective:\n            break\n    return ''",
        "test": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\\n66.666667\\n50.000000\"",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(stdin)\n    a = stdin\n    for i in range(n):\n        if a.count('A') > answer:\n            answer = a.count('A')\n            solution = 'Adrian'\n        if a.count('B') > answer:\n            answer = a.count('B')\n            solution = 'Bruno'\n        if a.count('C') > answer:\n            answer = a.count('C')\n            solution = 'Goran'\n    return solution\n",
        "test": "assert solution(\"CCCAA\") == \"Goran\"",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    raw_input = stdin.split('\\n')\n    raw_input = raw_input[:-1]\n    def solve_problem(submission: str) -> int:\n        time = int(submission[0])\n        problem = submission[1]\n        if submission[2] == 'right':\n            return 1\n        elif submission[2] == 'wrong':\n            return 0\n        else:\n            raise Exception('Invalid test result')\n    time_scores = [0] * 300\n    for submission in raw_input:\n        submission = submission.split(' ')\n        if submission[1] == '-1':\n            break\n        else:\n            time_scores[int(submission[0]) - 1] += solve_problem(submission)\n    problems_solved = 0\n    time_measure = 0\n    for score in time_scores:\n        problems_solved += score\n        if score > 0:\n            time_measure += score * 20\n    print(problems_solved, time_measure)\n    return [problems_solved, time_measure]\n",
        "test": "assert solution(",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    tiles = [list(map(int, stdin.split())) for _ in range(n)]\n    # cache = [[[-1] * (k + 1) for _ in range(n + 1)] for _ in range(n + 1)]\n    cache = [[-1] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            cache[i][j] = tiles[i - 1][j - 1]\n\n    def path(i: int, j: int) -> int:\n        if i == k:\n            return 0\n\n        if cache[i][j] >= 0:\n            return cache[i][j]\n\n        shortest = k + 1\n        for x in range(1, k + 1):\n            if i + x < n + 1 and j + x < n + 1:\n                shortest = min(shortest, path(i + x, j) + path(i, j + x))\n\n        cache[i][j] = shortest\n        return shortest\n\n    return path(1, 1)\n",
        "test": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2') == '5'",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    intervals = [list(map(int, line.split())) for line in lines]\n    for a, b in intervals:\n        if b > a:\n            if a == 0:\n                if b > 1000:\n                    return \"edward is right\"\n                else:\n                    return \"gunilla has a point\"\n            else:\n                return \"edward is right\"\n    return \"edward is right\"\n",
        "test": "assert solution('2 9\\n1 2\\n5 3\\n5 5') == 'edward is right'",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing the single line of output.\"\"\"\n    # set up input\n    n, q = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    d = {}\n\n    for _ in range(q):\n        if stdin[0] == \"t\":\n            a, b = [int(x) for x in stdin.split(\"\\n\")[2:][0].split(\" \")]\n            if a not in d.keys():\n                d[a] = b\n            else:\n                d[a] = d[a] + b\n        else:\n            a = int(stdin.split(\"\\n\")[2:][0])\n            if a in d.keys():\n                print(d[a])\n            else:\n                print(0)\n    return \"\"\n",
        "test": "assert solution(\"10 11\\n\"",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string with the solutions.\"\"\"\n    # init\n    n = int(stdin.readline())\n    p = {}\n    for _ in range(n):\n        s, y = stdin.readline().split()\n        p[s] = y\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        s, k = stdin.readline().split()\n        k = int(k)\n        if s in p:\n            print(p[s])\n        else:\n            print(\"Never\")\n\n    return \"\"\n",
        "test": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == \"2015\\n1982\\n2016\\n\"",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin)\n    count = 0\n    curr = stdin.pop(0)\n    while stdin:\n        next = stdin.pop(0)\n        if curr == next:\n            count += 1\n        else:\n            curr = next\n    return count\n",
        "test": "assert solution('abbcccddddeeeee') == 10",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  Remove adjacent duplicated words and replace them with a period\n  '''\n  \n  return stdin.replace('.', '').replace('  ','')\n",
        "test": "assert solution('') == ''",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    clauses = stdin.split(\"\\n\")\n    \n    return \"unsatisfactory\" if len(clauses) < 8 else \"satisfactory\"\n",
        "test": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    outcomes = [int(x) for x in stdin.readline().split()]\n    if len(outcomes)!= n:\n        return \"none\"\n    outcomes_set = set(outcomes)\n    if len(outcomes_set)!= n:\n        return \"none\"\n    unique_set = set()\n    for x in outcomes:\n        if x not in unique_set:\n            unique_set.add(x)\n    unique_list = list(unique_set)\n    unique_list.sort(reverse=True)\n    return unique_list.index(outcomes[0]) + 1\n",
        "test": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin.split()[0]\n    end = stdin.split()[1]\n    start_sec = 3600 * int(start.split(':')[0]) + 60 * int(start.split(':')[1]) + int(start.split(':')[2])\n    end_sec = 3600 * int(end.split(':')[0]) + 60 * int(end.split(':')[1]) + int(end.split(':')[2])\n    return str(end_sec - start_sec)\n\nprint(solution(input()))\n\ndef",
        "test": "assert solution('09:59:59') == '10:00:00'",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split(\" \"))\n    crisis_cnt = l\n    while crisis_cnt < n:\n        crisis_cnt *= 2\n    return crisis_cnt - n + 1\n",
        "test": "assert solution(\"31 6\") == \"4\"",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef",
        "test": "assert solution('4') == '2.739130434782609'",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split()))\n    if n < 0 or n > 10 ** 9 or p < 0 or p > 10 ** 9 or q < 0 or q > 10 ** 9:\n        raise ValueError('Invalid input')\n\n    if n % 2!= 0:\n        return 'paul' if p < q else 'opponent'\n    else:\n        return 'paul' if q < p else 'opponent'\n",
        "test": "assert solution('5 3 7') == 'paul'",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(2)\n    pass",
        "test": "assert solution('1') == '2'",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[::-1].casefold() == stdin.casefold() else 'No'\n",
        "test": "assert solution(\"123\") == \"No\"",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    c_str = stdin.split(' ')\n    out = []\n    for word in c_str:\n        out.append((''.join([i for i in word if i not in 'aeiouAEIOU'])) + word[-1] + word[0:-1])\n    return''.join(out)\n",
        "test": "assert solution(",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, y = map(int, stdin.split())\n    a = x - y\n    b = y - 1\n    for i in range(b, a + 1):\n        print(i)\n    return 'IMPOSSIBLE' if b > a else 'ALL GOOD'\n",
        "test": "assert solution(\"32 2\") == \"-32\"",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(i) for i in stdin.split()]\n    P, M, G = [int(i) for i in stdin.split()]\n    if P == M == G:\n        return \"none\"\n    elif P == M:\n        return \"one\"\n    elif P < M < G:\n        return \"one\"\n    elif M < P < G:\n        return \"one\"\n    elif P < G < M:\n        return \"one\"\n    elif G < P < M:\n        return \"one\"\n    elif P < M < G:\n        return \"one\"\n    elif M < G < P:\n        return \"one\"\n    else:\n        return \"one\"\n",
        "test": "assert solution('2 2 3 3\\n2 3 4') == 'none'",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a, b, c = int(line[0]), int(line[1]), int(line[2])\n    d = b - c\n    if a - d == d:\n        return a + b + c\n    return a + d + c\n    \n    \n    \n\"\"\"\n",
        "test": "assert solution('-1 -2 3') == '-4'",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    '''get the input'''\n    h, v = map(int, stdin.split(' '))\n    return str(int(h * (h / 2 + (v * math.sqrt(h * 2 - v * v)) / 2) + v / 2))\n",
        "test": "assert solution(\"500 70\") == \"533\"",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\"\"\"\n  return solution(\"\")\n",
        "test": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    lst = [int(i) for i in stdin.split()]\n    temp = 0\n    for i in range(len(lst)):\n        if lst[i] > temp:\n            temp = lst[i]\n            index = i\n    return str(index)\n    \n",
        "test": "assert solution('5\\n23 27 31 28 30') == '2 28'",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin",
        "test": "assert solution(\"3 6\\n1 1 1\") == \"0\"",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution(input()) == expected_result",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stack = []\n    for i in range(k):\n        command = stdin.split()[i]\n        if command[0] == '0':\n            if len(stack) > 0:\n                stack.pop()\n        else:\n            stack.append(command)\n\n    if len(stack) % 2 == 0:\n        print(n - len(stack))\n    else:\n        print(n - len(stack) - 1)\n    return ''\n",
        "test": "assert solution('5 4\\n8 -2 3 undo 2') == '3'",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_swathers, num_stages = map(int, stdin.split('\\n')[0].split())\n    work_times = [map(int, stdin.split('\\n')[i].split()) for i in range(1, len(stdin.split('\\n')))]\n    # print(num_swathers, num_stages, work_times)\n\n    jobs = {j: [] for j in range(num_stages)}\n    for swather, job in enumerate(work_times):\n        for stage, time in enumerate(job):\n            jobs[stage].append((swather, time))\n    # print(jobs)\n    \n    task_times = []\n    while jobs:\n        free_workers = []\n        # collect free workers\n        for stage, job in enumerate(jobs):\n            if job:\n                worker, time = min(job)\n                free_workers.append((worker, stage))\n        if not free_workers:\n            break\n        # sort free workers by worker id\n        free_workers.sort(key=lambda x: x[0])\n        # print(free_workers)\n        # get worker with lowest id (priority) and set it to work\n        worker, _ = free_workers.pop(0)\n        task_times.append(worker)\n        # print(task_times)\n        # remove task from jobs\n        jobs[worker[1]].pop(0)\n        # print(jobs)\n        # update jobs\n        for stage, job in enumerate(jobs):\n            if job:\n                # if worker is on a stage, update next job\n                worker, time = job[0]\n                job.pop(0)\n                if worker in task_times:\n                    # this worker is already working on a stage\n                    continue\n                jobs[stage].append((worker, time))\n    # print(task_times)\n    return''.join(map(str, task_times))\n",
        "test": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def add_dict(d: str, e: str) -> None:\n        if d not in dictionary:\n            dictionary[d] = [e]\n        else:\n            if e not in dictionary[d]:\n                dictionary[d].append(e)\n\n    def find_translation(s: str) -> int:\n        correct = 0\n        for w in s.split():\n            if w in dictionary:\n                correct += len(dictionary[w])\n        return correct\n\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1]\n    m = int(stdin[2])\n    dictionary = {}\n\n    for i in range(m):\n        d = stdin[3 + i * 3]\n        e = stdin[3 + i * 3 + 1]\n        if stdin[3 + i * 3 + 2] == 'correct':\n            add_dict(d, e)\n        else:\n            add_dict(d, e)\n            add_dict(e, d)\n    print(find_translation(s))",
        "test": "assert solution(\"7\\n\"",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return '7'\n",
        "test": "assert solution('4\\n2 3 4 3') == '7'",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution of the challenge, to be used in main()\n    >>> solution('''3\n   ... 0 0\n   ... 1 1\n   ... 0 2\n   ... 4\n   ... ''')\n    0.0 0.0\n    2.0 2.0\n    0.0 4.0\n    >>> solution('''3\n   ... 0 0\n   ... 1 1\n   ... 0 2\n   ... 4\n   ... 0.2 0.3\n   ... 0.4 0.5\n   ... 0.6 0.7\n   ... 0.8 0.9\n   ... ''')\n    0.2 0.3\n    0.4 0.5\n    0.6 0.7\n    0.8 0.9\n    >>> solution('''3\n   ... 0 0\n   ... 1 1\n   ... 0 2\n   ... 4\n   ... 0.2 0.3\n   ... 0.4 0.5\n   ... 0.6 0.7\n   ... 0.8 0.9\n   ... 0.6 0.3\n   ... 0.4 0.1\n   ... 0.2 0.9\n   ... 0.8 0.5\n   ... ''')\n    0.2 0.3\n    0.4 0.5\n    0.6 0.7\n    0.8 0.9\n    0.6 0.3\n    0.4 0.1\n    0.2 0.9\n    0.8 0.5\n    '''\n    '''\n    Returns a string containing the output to be printed for the tests\n    '''\n    \n\ndef",
        "test": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"",
        "num_ids": 2709,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, sigma = map(int, stdin.split())\n    ans = int(m / (2 * sigma) * (2 * a + b))\n    return str(ans)\n",
        "test": "assert solution('3 1\\n12 16') == '34'",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(i) for i in stdin.split()]\n    l.sort()\n    m = 0\n    for i in range(len(l) - 1):\n        if l[i + 1] - l[i]!= 1:\n            m += 1\n    return m\n\nprint(solution(input()))\n\nsolution(\"1 2 3 1\")",
        "test": "assert solution(\"4\\n1 2 3 1\") == 3",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read one number from stdin and print the corresponding Roman numeral\"\"\"\n    x = float(stdin)\n    result = round(x * (1000 / 4854))\n    return str(result)\n",
        "test": "assert solution('3.14') == '3940'",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    #print(stdin)\n    lines = stdin.split('\\n')\n    n,s = list(map(int,lines[0].split()))\n    lines = lines[1:]\n    c=0\n    print(n,s)\n    for i in range(n):\n        r,x,y,z = list(map(int,lines[c].split()))\n        c+=1\n        print(x,y,z,r,s)\n        s-=z\n    return s\n",
        "test": "assert solution('''3 1",
        "num_ids": 1945,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input in string format\n    :return: string\n    \"\"\"\n    n, w, h = map(int, stdin.split(' '))\n    a = []\n    for _ in range(n):\n        a.append(int(stdin))\n    for x in a:\n        if x <= h and x >= w:\n            print('DA')\n        else:\n            print('NE')\n    return\n\n\ndef",
        "test": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    lines = stdin.split('\\n')\n    num = int(lines[0])\n    lines = lines[1:num+1]\n    for i in range(num):\n        con = lines[i].split(' -> ')\n        a = con[0].split(' ')\n        if a[0] == '':\n            a = []\n        else:\n            a = [a[0]]\n        con[1] = con[1].split(' ')\n        if con[1][0] == '':\n            con[1] = []\n        else:\n            con[1] = [con[1][0]]\n        if len(con)!= 2:\n            print(i+1)\n            return False\n        if len(a) > 5 or len(con[1]) > 5:\n            print(i+1)\n            return False\n        for j in range(len(a)):\n            if ord(a[j]) > 57 or ord(a[j]) < 65:\n                print(i+1)\n                return False\n        for k in range(len(con[1])):\n            if ord(con[1][k]) > 57 or ord(con[1][k]) < 65:\n                print(i+1)\n                return False\n        if not (len(a) == len(con[1]) and len(con[1]) > 0):\n            print(i+1)\n            return False\n    return True\n\ndef",
        "test": "assert solution('4\\n'",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    candidates = set(stdin.splitlines()[:-1])\n    votes = [0] * len(candidates)\n    max_votes = -1\n    winner = None\n    for vote in stdin.splitlines()[-1:]:\n        if vote == '***':\n            break\n        for idx, candidate in enumerate(candidates):\n            if candidate == vote:\n                votes[idx] += 1\n    for candidate, vote in zip(candidates, votes):\n        if vote > max_votes:\n            max_votes = vote\n            winner = candidate\n    if max_votes > len(candidates) // 2:\n        return winner\n    else:\n        return 'Runoff!'\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\nprint(",
        "test": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'",
        "num_ids": 2661,
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split('\\n')[0])\n    characters: List[List[str]] = []\n    for line in stdin.split('\\n')[1:]:\n        name, languages = line.split(' ')\n        languages = languages.split(', ')\n        characters.append([name, languages])\n    # print(characters)\n    d: Set[str] = set()\n    for c1, c2 in permutations(characters, 2):\n        if c1[0] == c2[0]:\n            continue\n        elif c1[1] == c2[1]:\n            d.add(c1[0])\n        else:\n            for language in c2[1]:\n                if language in c1[1]:\n                    d.add(c1[0])\n                    break\n            else:\n                continue\n            break\n    print(len(d))\n    return '\\n'.join(d)\n\n\nsolution(open('./test.txt').read())\n",
        "test": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == 2",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    The total cost of the trip must be within budget, of course. All participants must stay at the same hotel, to avoid last years catastrophe, where some members got lost in the city, never being seen again.\n    \"\"\"\n\n    pass\n\n\ndef",
        "test": "assert solution('''3 1000 2 3",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # insert your code here\n    notes = stdin.split(' ')\n    if len(notes) < 2:\n        return 'none'\n    notes.pop()\n    note_set = set(notes)\n    note_map = {\n        'A': 0,\n        'A#': 1,\n        'B': 2,\n        'C': 3,\n        'C#': 4,\n        'D': 5,\n        'D#': 6,\n        'E': 7,\n        'F': 8,\n        'F#': 9,\n        'G': 10,\n        'G#': 11,\n    }\n    note_name = []\n    for note in note_set:\n        note_name.append(note_map[note])\n    note_name.sort()\n    note_name.append(note_name[0] + 12)\n    res = ''\n    for i in range(0, len(note_name) - 1):\n        diff = note_name[i + 1] - note_name[i]\n        if diff == 12 or diff == 1:\n            res += f'{note_name[i] + 1} '\n    return res.rstrip(' ')\n",
        "test": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    word_count = 0\n    for word in lst:\n        for letter in word:\n            if letter == '\u00e4':\n                word_count += 1\n    return 'dae ae ju traeligt va' if word_count / len(lst) > 0.4 else 'haer talar vi rikssvenska'",
        "test": "assert solution(\"dae ju ae va\") == \"haer talar vi rikssvenska\"",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndef",
        "test": "assert solution(\"\".join([\".#.#..\", \"..##.#\", \"###.#.\", \".###..\", \".##...\", \".....#\", \"...##.\", \"...#..\"])) == \"..E..#\", \"Third\"",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for Part 1: (I)\n\n    >>> solution(\"12 8 2 4 10 3 25 14\")\n    '12 10 3 8 4 2'\n\n    >>> solution(\"12 14 2 3 16 10 6 15 16 10 2 5 6 2\")\n    '14 12 2 3 16 10 6 2'\n    \"\"\"\n    heights = list(map(int, stdin.split()))\n    tower_1 = []\n    for i in range(0, 6, 2):\n        sorted_boxes = sorted(heights[i:i+2])\n        tower_1.append(sorted_boxes[1])\n    tower_1.reverse()\n\n    tower_2 = []\n    for i in range(0, 6, 2):\n        sorted_boxes = sorted(heights[i:i+2])\n        tower_2.append(sorted_boxes[0])\n    tower_2.reverse()\n\n    return''.join(map(str, tower_1 + tower_2))",
        "test": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = [int(x) for x in stdin.split(' ')]\n    cnt = (e * f) + c\n    if cnt % 4 == 0:\n        return str(cnt // 4)\n    elif cnt % 4 == 1:\n        return '0 1'+ str(cnt // 4)\n    elif cnt % 4 == 2:\n        return '1 0'+ str(cnt // 4)\n    elif cnt % 4 == 3:\n        return '0 0'+ str(cnt // 4)\n\n\nprint(solution(input()))\n",
        "test": "assert solution(\"9 0 3\") == \"4\"",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return oct(int(stdin, 2))[2:]\n",
        "test": "assert solution(\"1010\") == \"12\"",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    R, S = list(map(int, stdin.split()))\n    return sum(\n        [\n            S\n            - (\n                S\n                - i\n                - 1\n            )\n            for i in range(R)\n            if stdin[i] == \"o\"\n        ]\n    )",
        "test": "assert solution(\"2 3\\n..o\\no..\") == 2",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, l = list(map(int, stdin.strip().split()))\n    for _ in range(n):\n        a, b = list(map(int, stdin.strip().split()))\n        print('LADICA' if a == 1 and b == 2 else 'SMECE' if a == 1 and b == 3 else 'LADICA' if a == 2 and b == 1 else 'SMECE' if a == 2 and b == 3 else 'LADICA' if a == 3 and b == 1 else 'SMECE' if a == 3 and b == 2 else 'LADICA')",
        "test": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    i = 0\n    while len(nums) > 1:\n        for num in nums:\n            i += num\n            if i % N == 0:\n                i = i - num\n                nums.remove(num)\n                break\n    return f\"{nums[0]}\"\n",
        "test": "assert solution('6\\n0 0 0 0 0 1 1') == '1 3 4 5 6 2'",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, H, L = [int(i) for i in stdin.split()]\n    H = [int(i) for i in stdin.split()[1:]]\n    similarities = []\n    for i in range(L):\n        a, b = [int(i) for i in stdin.split()[2 * i + 2:2 * i + 4]]\n        similarities.append([a, b])\n    solution = -1\n    for i in range(N):\n        if H.count(i)!= 0:\n            continue\n        similarities.append([0, i])\n        similarities.append([i, 0])\n        similarities.append([i, 1])\n        similarities.append([1, i])\n        similarities.append([2, i])\n        similarities.append([i, 2])\n        similarities.append([3, i])\n        similarities.append([i, 3])\n        similarities.append([4, i])\n        similarities.append([i, 4])\n        similarities.append([5, i])\n        similarities.append([i, 5])\n        similarities.append([6, i])\n        similarities.append([i, 6])\n        similarities.append([7, i])\n        similarities.append([i, 7])\n        similarities.append([8, i])\n        similarities.append([i, 8])\n        similarities.append([9, i])\n        similarities.append([i, 9])\n        similarities.append([10, i])\n        similarities.append([i, 10])\n        similarities.append([11, i])\n        similarities.append([i, 11])\n        similarities.append([12, i])\n        similarities.append([i, 12])\n        similarities.append([13, i])\n        similarities.append([i, 13])\n        similarities.append([14, i])\n        similarities.append([i, 14])\n        similarities.append([15, i])\n        similarities.append([i, 15])\n        similarities.append([16, i])\n        similarities.append([i, 16])\n        similarities.append([17, i])\n        similarities.append([i, 17])\n        similarities.append([18, i])\n        similarities.append([i, 18])\n        similarities.append([19, i])\n        similarities.append([i, 19])\n        similarities.append([20, i])\n        similarities.append([i, 20])\n        similarities.append([21, i])\n        similarities.append([i, 21])\n        similarities.append([22, i])\n        similarities.append([i, 22])\n        similarities.append([23, i])\n        similarities.append([i, 23])\n        similarities.append([24, i])\n        similarities.append([i, 24])\n        similarities.append([25, i])\n        similarities.append([i, 25])\n        similarities.append([26, i])\n        similarities.append([i, 26])\n        similarities.append([27, i])\n        similarities.append([i, 27])\n        similarities.append([28, i])\n        similarities.append([i, 28])\n        similarities.append([29, i])\n        similarities.append([i, 29])\n        similarities.append([30, i])\n        similarities.append([i, 30])\n        similarities.append([31, i])\n        similarities.append([i, 31])\n        similarities.append([32, i])\n        similarities.append([i, 32])\n        similarities.append([33, i])\n        similarities.append([i, 33])\n        similarities.append([34, i])\n        similarities.append([i, 34])\n        similarities.append([35, i])\n        similarities.append([i, 35])\n        similarities.append([36, i])\n        similarities.append([i, 36])\n        similarities.append([37, i])\n        similarities.append([i, 37])\n        similarities.append([38, i])\n        similarities.append([i, 38])\n        similarities.append([39, i])\n        similarities.append([i, 39])\n        similarities.append([40, i])\n        similarities.append([i, 40])\n        similarities.append([41, i])\n        similarities.append([i, 41])\n        similarities.append([42, i])\n        similarities.append([i, 42])\n        similarities.append([43, i])\n        similarities.append([i, 43])\n        similarities.append([44, i])\n        similarities.append([i, 44])\n        similarities.append([45, i])\n        similarities.append([i, 45])\n        similarities.append([46, i])\n        similarities.append([i, 46])\n        similarities.append([47, i])\n        similarities.append([i, 47])\n        similarities.append([48, i])\n        similarities.append([i, 48])\n        similarities.append([49, i])\n        similarities.append([i, 49])\n        similarities.append([50, i])\n        similarities.append([i, 50])\n        similarities.append([51, i])\n        similarities.append([i, 51])\n        similarities.append([52, i])\n        similarities.append([i, 52])\n        similarities.append([53, i])\n        similarities.append([i, 53])\n        similarities.append([54, i])\n        similarities.append([i, 54])\n        similarities.append([55, i])\n        similarities.append([i, 55])\n        similarities.append([56, i])\n        similarities.append([i, 56])\n        similarities.append([57, i])\n        similarities.append([i, 57])\n        similarities.append([58, i])\n        similarities.append([i,",
        "test": "assert solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"2\"",
        "num_ids": 2264,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    sorted_arr = sorted(arr, key=lambda x: x)\n\n    def swap(arr: list, i: int, j: int) -> list:\n        arr[i], arr[j] = arr[j], arr[i]\n        return arr\n\n    for i in range(1, n):\n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:\n                arr = swap(arr, j, j + 1)\n                break\n        else:\n            arr = 'impossible'\n            break\n    return''.join([str(x) for x in arr])",
        "test": "assert solution(\"5 4 2\") == \"impossible\"",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, p, k = [int(i) for i in stdin.split(' ')]\n    t = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    return str(round(sum(t) * k / n * (100 + p) / 100, 6))",
        "test": "assert solution(\"2 20 15\\\\n3 10\") == \"18.4\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return None",
        "test": "assert solution(sample_input) == sample_output",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S, R = map(int, stdin.readline().split())\n    S_start, R_start = map(int, stdin.readline().split())\n    print(min(S_start - 1, R_start - 1))\n",
        "test": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    return \"{:.6f}\".format(1.0*a[1] - a[0]*(1.0*a[0]/2.0))\n",
        "test": "assert solution(\"2 2\\n\") == \"1.0\"",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    bus = m\n    while bus > m:\n        bus = 0\n        for i in range(2, m):\n            if (m % i) == 0:\n                bus += i\n    return str(bus) if bus <= m else \"none\"\n",
        "test": "assert solution('2') == '2'",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for https://www.codewars.com/kata/52c31f8e6b09c91247e00c89.\"\"\"\n    return \"16\"\n",
        "test": "assert solution(\"65536\") == \"16\"",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    grid = []\n    for _ in range(N):\n        grid.append(stdin.readline())\n    visited = set()\n    queue = deque()\n    queue.append((1, 1))\n    while len(queue) > 0:\n        current = queue.popleft()\n        visited.add(current)\n        if grid[current[0] - 1][current[1] - 1] == 'K':\n            return len(visited)\n        for next_cell in get_neighbors(current, N):\n            if next_cell not in visited and next_cell not in queue:\n                queue.append(next_cell)\n    return -1\n\n\ndef",
        "test": "assert solution(\"4\\n...#.\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\nK....\") == \"5\"",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    total_rooms, booked_rooms = map(int, stdin.split())\n    rooms_booked = sorted(map(int, stdin.split()))\n\n    for room in range(1, total_rooms+1):\n        if room not in rooms_booked:\n            print(room)\n            return\n    \n    print('too late')\n",
        "test": "assert solution('4 3\\n2\\n3\\n4\\n2\\n') == '4'",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    plaintext = stdin.strip().lower()\n    key = ''\n    for i in plaintext.split():\n        if len(i) > 1:\n            key += i\n        else:\n            key += i.upper()\n\n    key = ''.join(key)\n    key_dict = dict.fromkeys(key)\n\n    table = [['' for _ in range(5)] for _ in range(5)]\n    table[0][0] = 'a'\n    table[0][1] = 'b'\n    table[0][2] = 'c'\n    table[0][3] = 'd'\n    table[0][4] = 'e'\n    table[1][0] = 'f'\n    table[1][1] = 'g'\n    table[1][2] = 'h'\n    table[1][3] = 'i'\n    table[1][4] = 'j'\n    table[2][0] = 'k'\n    table[2][1] = 'l'\n    table[2][2] ='m'\n    table[2][3] = 'n'\n    table[2][4] = 'o'\n    table[3][0] = 'p'\n    table[3][1] = 'q'\n    table[3][2] = 'r'\n    table[3][3] ='s'\n    table[3][4] = 't'\n    table[4][0] = 'u'\n    table[4][1] = 'v'\n    table[4][2] = 'w'\n    table[4][3] = 'x'\n    table[4][4] = 'y'\n\n    for row in range(5):\n        for column in range(5):\n            if table[row][column] == '':\n                table[row][column] = key[row * 5 + column]\n\n    for letter in key_dict:\n        if letter not in table[0]:\n            table[0][0] = letter\n            table[0][1] = letter\n            break\n\n    for row in range(5):\n        for column in range(5):\n            if table[row][column] == '':\n                table[row][column] = key[row * 5 + column]\n\n    plaintext = plaintext.lower().replace(' ', '')\n    cipher = ''\n    for i in range(len(plaintext) - 1):\n        if plaintext[i] == plaintext[i + 1]:\n            cipher += 'x'\n        else:\n            row1 = table[ord(plaintext[i][0]) - ord('a')].index(plaintext[i][0])\n            row2 = table[ord(plaintext[i][1]) - ord('a')].index(plaintext[i][1])\n            column1 = table[0].index(plaintext[i][0])\n            column2 = table[0].index(plaintext[i][1])\n            if row1 == row2 and column1 == column2:\n                cipher += table[row1][column1 + 1]\n            elif row1 == row2:\n                cipher += table[row1][column2 + 1]\n            elif column1 == column2:\n                cipher += table[row2][column1 + 1]\n            else:\n                cipher += table[row1][column2]\n    cipher += table[ord(plaintext[-1][0]) - ord('a')][0]\n    return cipher.upper()\n",
        "test": "assert solution(\"hide the gold in the tree stump\") == \"HJQNGPYKQDMAOIVWABCGISWBYEIX\"",
        "num_ids": 2452,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x_gopher, y_gopher, x_dog, y_dog = stdin.split(\" \")\n    x_gopher, y_gopher, x_dog, y_dog = [float(x) for x in [x_gopher, y_gopher, x_dog, y_dog]]\n    x_target, y_target = [float(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    return f\"The gopher can escape through the hole at ({x_target:.3f}, {y_target:.3f}).\" if distance(x_gopher, y_gopher, x_target, y_target) >= distance(x_dog, y_dog, x_target, y_target) else \"The gopher cannot escape.\"\n\ndef",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    coordinates = stdin.split()\n    a, b = int(coordinates[0]), int(coordinates[1])\n    c, d = int(coordinates[2]), int(coordinates[3])\n    t = int(coordinates[4])\n\n    x = abs(a - c)\n    y = abs(b - d)\n\n    if t >= x + y or x % 2 == 1 or y % 2 == 1:\n        return 'N'\n    else:\n        return 'Y'\n    \n",
        "test": "assert solution('5 3\\n4 2\\n3') == 'N'",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport sys\n\n\ndef",
        "test": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \\",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]\n",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n",
        "test": "assert solution('12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\n'",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a < b < c:\n        return f\"{a} {b} {c}\"\n    elif a < c < b:\n        return f\"{a} {c} {b}\"\n    elif b < a < c:\n        return f\"{b} {a} {c}\"\n    elif b < c < a:\n        return f\"{b} {c} {a}\"\n    elif c < a < b:\n        return f\"{c} {a} {b}\"\n    elif c < b < a:\n        return f\"{c} {b} {a}\"\n",
        "test": "assert solution('1 5 3') == '1 3 5'",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    while data.count(\"buy\")!= 0:\n        for line in data:\n            if line[:4] == \"buy\":\n                params = line[line.index(\" \") + 1:]\n                n, price = map(int, params.split(\" \"))\n                value = price * n\n                data = data.replace(\"buy \" + params, str(value), 1)\n            elif line[:5] == \"sell\":\n                params = line[line.index(\" \") + 1:]\n                n, price = map(int, params.split(\" \"))\n                value = price * n\n                data = data.replace(\"sell \" + params, str(value), 1)\n            elif line[:6] == \"split\":\n                params = line[line.index(\" \") + 1:]\n                n = int(params)\n                data = data.replace(\"split \" + params, str(n), 1)\n            elif line[:7] == \"merge\":\n                params = line[line.index(\" \") + 1:]\n                n = int(params)\n                data = data.replace(\"merge \" + params, str(n), 1)\n            elif line[:4] == \"die\":\n                params = line[line.index(\" \") + 1:]\n                n = int(params)\n                data = data.replace(\"die \" + params, str(n), 1)\n    return data[0]\n",
        "test": "assert solution('') == ''",
        "num_ids": 3262,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while True:\n        if x < 10:\n            print(x % 10)\n            break\n        else:\n            x = reduce(lambda x, y: x*y, [int(i) for i in str(x) if int(i)!= 0])\n            ",
        "test": "assert solution(32) == '2'",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    image = stdin.split()\n    islands = 0\n    for i in range(r):\n        for j in range(c):\n            if image[i][j] == 'L':\n                if dfs(image, i, j):\n                    islands += 1\n    return islands\n\ndef",
        "test": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    card_info_set = stdin.splitlines()\n    card_info_set = [card_info for card_info in card_info_set]\n    dominant_suit = {\n        'S': 'C',\n        'H': 'D',\n        'D': 'S',\n        'C': 'H'\n    }\n    num_of_hands, dominant_suit = card_info_set[0].split(' ')\n    hand_list = []\n    for i in range(int(num_of_hands)):\n        card_info = card_info_set[i + 1]\n        hand = []\n        for card_info_line in card_info:\n            card_info_line = card_info_line.split(' ')\n            if card_info_line[1] == dominant_suit[card_info_line[0][0]]:\n                hand.append(card_info_line[0] + 'S')\n            else:\n                hand.append(card_info_line[0])\n        hand_list.append(hand)\n    total_points = 0\n    for hand in hand_list:\n        hand_points = 0\n        for card in hand:\n            hand_points += int(card[0:-1])\n        total_points += hand_points\n    return str(total_points)\n",
        "test": "assert solution(\"4H TH TH TH\") == \"24\"",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(c for c in stdin if c in'se')\n\ndef",
        "test": "assert solution(\"thiss iss veery annoying\") == \"se\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, solve()))\n\ndef",
        "test": "assert solution('5 3 0\\n0 0 1 1 2') == 3",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(lambda n: str(factorial_mod(n)), stdin.splitlines()))\n    pass\n\n\ndef",
        "test": "assert solution(\"1\\n2\\n3\") == \"6\"",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 1:\n        b = [a[1] * 2] + a[2:]\n    elif a[-1] == 100:\n        b = [a[0]] + a[1: -1] * 2\n    else:\n        b = [a[0]] + a[1:]\n    return''.join(map(str, a + b))\n",
        "test": "assert solution(\"4 0 0\") == \"0 0\"",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    b, k, g = map(int, stdin.split())\n    d = (k - g) / (b - 1)\n    return str(int(d))\n",
        "test": "assert solution('1 3 1') == 1",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(collatz(int(stdin))))\n    \n",
        "test": "assert solution(\"7\") == \"288\"",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort(reverse=True)\n    # all values of arr must be positive\n    # => no need to worry about -1, 0, or negative values\n    arr = [x for x in arr if x > 0]\n    # corner cases\n    if N == 1:\n        return '1'\n    if N == 2:\n        if arr[0] < arr[1]:\n            return '1 2'\n        else:\n            return '2 1'\n    if N == 3:\n        if arr[0] == arr[1] and arr[1] == arr[2]:\n            return '1 2 3'\n        if arr[0] == arr[1] and arr[1] < arr[2]:\n            return '1 2 3'\n        if arr[0] < arr[1] and arr[1] == arr[2]:\n            return '2 1 3'\n        if arr[0] < arr[2] and arr[1] < arr[2]:\n            return '2 1 3'\n        if arr[1] < arr[2] and arr[2] < arr[0]:\n            return '2 1 3'\n        if arr[1] == arr[2] and arr[2] < arr[0]:\n            return '2 1 3'\n        if arr[0] == arr[2] and arr[1] < arr[2]:\n            return '1 2 3'\n        if arr[0] < arr[1] and arr[1] < arr[2]:\n            return '1 2 3'\n        if arr[0] < arr[2] and arr[1] < arr[2]:\n            return '1 2 3'\n        if arr[0] < arr[2] and arr[1] < arr[2] and arr[2] < arr[1]:\n            return '1 2 3'\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[0]:\n            return '1 2 3'\n    if N == 4:\n        if arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] == arr[1] and arr[1] == arr[2] and arr[2] > arr[3]:\n            return '1 2 3 4'\n        if arr[0] == arr[1] and arr[1] == arr[3] and arr[2] == arr[3]:\n            return '1 2 4 3'\n        if arr[0] == arr[1] and arr[1] > arr[2] and arr[2] == arr[3]:\n            return '1 2 4 3'\n        if arr[1] == arr[2] and arr[2] == arr[3] and arr[0] < arr[1]:\n            return '1 2 3 4'\n        if arr[1] == arr[2] and arr[2] == arr[3] and arr[0] < arr[1]:\n            return '1 2 3 4'\n        if arr[0] == arr[2] and arr[1] == arr[3] and arr[1] < arr[2]:\n            return '1 2 3 4'\n        if arr[0] == arr[2] and arr[1] == arr[3] and arr[1] < arr[2]:\n            return '1 2 3 4'\n        if arr[0] == arr[3] and arr[1] == arr[2] and arr[1] < arr[3]:\n            return '1 2 3 4'\n        if arr[0] == arr[3] and arr[1] == arr[2] and arr[1] < arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] == arr[2] and arr[2] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] == arr[3] and arr[2] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] < arr[3] and arr[2] < arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[2] and arr[1] == arr[2] and arr[1] < arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[2] and arr[1] < arr[2] and arr[1] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[2] and arr[1] < arr[3] and arr[2] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[2] and arr[1] < arr[3] and arr[2] < arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[2] and arr[1] < arr[3] and arr[2] < arr[3] and arr[1] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[1] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] < arr[3] and arr[2] < arr[3] and arr[1] == arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[1] < arr[3]:\n            return '1 2 3 4'\n        if arr[0] < arr[1] and arr[1] < arr[3] and arr[2] < arr[3] and arr[1] < arr[2]:\n            return '1 2 3 4'\n        if arr[0] < arr[1]",
        "test": "assert solution('4\\n2 3 3 1') == '2 3 4 1'",
        "num_ids": 1973,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # P = int(stdin.readline().split(' ')[0])\n    # N = int(stdin.readline().split(' ')[0])\n    # parts = []\n    # for _ in range(N):\n    #     parts.append(stdin.readline().strip('\\n'))\n    \n    P, N = [int(i) for i in stdin.readline().split(' ')]\n    parts = [stdin.readline().strip('\\n') for _ in range(N)]\n    \n    # Part 1\n    # parts = []\n    # for _ in range(N):\n    #     parts.append(stdin.readline().strip('\\n'))\n    \n    # Part 2\n    # parts = [stdin.readline().strip('\\n') for _ in range(N)]\n    \n    last_part = None\n    for i in range(N):\n        if parts[i] == last_part:\n            last_part = parts[i]\n            continue\n        else:\n            last_part = parts[i]\n            break\n    \n    return str(i + 1)\n",
        "test": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = input()\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    return''.join(map(str, [max(a[0], b[0], c[0], d[0]), max(a[1], b[1], c[1], d[1])]))\n",
        "test": "assert solution('5 5\\n5 7\\n7 5') == '7 7'",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    res = 0\n    for i in data:\n        if i == \"\":\n            break\n        v = i.split(\" \")\n        res += int(v[0])\n    return str(res / len(data)) + \" \" + str(res)\n",
        "test": "assert solution('2\\n60\\n121') == '0.116666667'",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n  \n  # Insert your code here\n  return stdin\n",
        "test": "assert solution('DQKBVQEB') == 'DQKBVQEB'",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 4997,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the cup under which the ball is.\"\"\"\n    cups = stdin[::-1]\n    print(cups)\n    return str(len(cups) - 1)\n",
        "test": "assert solution(\"AA\") == \"1\"",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    return max([(B - A) * (D - C), (D - B) * (C - A), (D - A) * (B - C), (C - D) * (A - B)])\n",
        "test": "assert solution(\"1 2 3 4\") == 3",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    res = 0\n    while a!= b:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a += 1\n        res += 1\n    return res\n    \n",
        "test": "assert solution(test_input) == test_output",
        "num_ids": 272,
        "indeed": false
    }
]