[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"",
        "num_ids": 1900
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split(' ')))\n    l = list(set(l))\n    l.sort()\n    m = {}\n    for i in range(len(l)):\n        m[l[i]] = 1\n    for i in range(len(l)):\n        m[l[i] + l[i]] = 2\n    m = {v: k for k, v in m.items()}\n    res = []\n    for i in range(len(l)):\n        if m[l[i]] == 1:\n            res.append(l[i])\n        else:\n            res.append(l[i] * l[i])\n    return str(res[0]) +'' + str(res[1])",
        "test": "assert solution(\"10 12 10 2 8 1 2 4 1 20 4 5\") == \"20 12\"",
        "num_ids": 2465
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    def get_even_k_sum(n: int, k: int, m: int, k_sum: int):\n        ans = 0\n        for i in range(n):\n            a = []\n            for j in range(m):\n                if j % 2 == 0:\n                    a.append(k_sum + a[j // 2])\n                else:\n                    a.append(a[j // 2] - a[j // 2 - 1])\n            ans = max(ans, max(a))\n        return ans\n\n    n, m, k = map(int, stdin.split())\n    return str(get_even_k_sum(n, k, m, 0))\n\n\n\ndef",
        "test": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"",
        "num_ids": 2642
    },
    {
        "number": 4003,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 561
    },
    {
        "number": 4004,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 1641
    },
    {
        "number": 4005,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split('\\n')[0].split())\n    x3, y3, x4, y4 = map(int, stdin.split('\\n')[1].split())\n    x5, y5, x6, y6 = map(int, stdin.split('\\n')[2].split())\n\n    res = 'YES'\n    if x1 > x3 or y1 > y3 or x2 < x5 or y2 < y5:\n        res = 'NO'\n\n    if x1 > x4 or y1 > y4 or x2 < x6 or y2 < y6:\n        res = 'NO'\n\n    return res\n",
        "test": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"",
        "num_ids": 3144
    },
    {
        "number": 4006,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1 if i % 2 == 0 else dp[i - 1]\n        for j in range(2, i):\n            if i % j == 0:\n                dp[i] = min(dp[i], dp[j] + (i // j))\n    return dp[n]\n",
        "test": "assert solution('1') == 1",
        "num_ids": 832
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all solution of the problem \"\"\"\n    n = int(stdin.readline())\n    input_list = list(map(int, stdin.readline().split(' ')))\n    friends = list()\n    for num in input_list:\n        if num == 0:\n            friends.append(0)\n        else:\n            friends.append(num)\n    for i in range(n):\n        if i in friends:\n            continue\n        else:\n            friends[i] = i\n            break\n    return''.join(list(map(str, friends)))\n",
        "test": "assert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"",
        "num_ids": 3419
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(test_input_2) == test_output_2",
        "num_ids": 1818
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split(' ')]\n    num = list(stdin[:n])\n    num.reverse()\n    x = x % n\n    y = y % n\n\n    ans = 0\n\n    for i in range(n):\n        if num[i] == '0':\n            if i < x:\n                ans += n - x\n            elif i >= x:\n                ans += n - y + 1\n    print(ans)\n    return \"\"",
        "test": "assert solution('11 5 2') == '1'",
        "num_ids": 1577
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    def test_palindrome(s, l):\n        for i in range(len(s) - l + 1):\n            if s[i:i + l] == s[i:i + l][::-1]:\n                return True\n        return False\n\n    n = int(stdin.readline().strip())\n    l = 1\n    s = list(map(int, stdin.readline().strip().split()))\n    while l < len(s):\n        if not test_palindrome(s, l):\n            l += 1\n        else:\n            break\n    print('YES' if test_palindrome(s, l) else 'NO')\n",
        "test": "assert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'",
        "num_ids": 2501
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    f = [int(n) for n in stdin.split()]\n    ans = 0\n    for i in range(n):\n        suba = int(a[i])\n        while suba > 0:\n            ans = (ans * 10 + f[suba % 10 - 1])\n            suba //= 10\n    return str(ans)\n",
        "test": "assert solution(\"5 5 4 3 2 1\") == \"9950\"",
        "num_ids": 2287
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # TODO: Implement me\n    # return \"\"",
        "test": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"",
        "num_ids": 2055
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"2\\n1 100000\") == \"0\"",
        "num_ids": 1318
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(i) for i in stdin.split('\\n')[0].split()]\n    n = days[0]\n    m = days[1]\n    exams = []\n    for i in range(m):\n        exams.append(int(stdin.split('\\n')[i].split()[2]))\n    exams = sorted(exams, reverse=True)\n    exams = [exams[0]] + exams[1:]\n    exams = sorted(exams)\n    # print(exams)\n    stdin = stdin.split('\\n')[1:]\n    stdin = sorted(stdin, reverse=True)\n    i = 0\n    j = 0\n    while i < m:\n        if j >= n:\n            return '-1'\n        while j < n and exams[i] == stdin[j]:\n            j += 1\n        if j < n:\n            return '-1'\n        i += 1\n    answer = ''\n    for j in range(n):\n        if j % 10 == 0:\n            answer +=''\n        if stdin[j] == 0:\n            answer += '0'\n        else:\n            answer += str(exams.index(stdin[j]) + 1)\n    return answer",
        "test": "assert solution('3 2\\n1 3 1\\n1 2 1') == '-1'",
        "num_ids": 3052
    },
    {
        "number": 4015,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    count = 0\n    while n!= m:\n        if n < m:\n            if n == 0:\n                return str(count)\n            if n % 3 == 0:\n                n = n // 3\n            else:\n                n -= 1\n            count += 1\n        else:\n            if m % 2 == 0:\n                m = m // 2\n            else:\n                m -= 1\n            count += 1\n    return str(count)\n",
        "test": "assert solution('42 42') == '0'",
        "num_ids": 1725
    },
    {
        "number": 4016,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 1572
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\na = list(map(int, stdin.split()))\n\ndef",
        "test": "assert solution(\"8 3 5 2\\n\") == '2 1 4'",
        "num_ids": 966
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\nasdf\")\n    4\n    >>> solution(\"5 6\\naaaaa\")\n    15\n    >>> solution(\"5 7\\naaaaa\")\n    -1\n    >>> solution(\"10 100\\najihiushda\")\n    233\n    \"\"\"\n    s, k = stdin.split(\"\\n\")\n    s = s.replace(\"\\n\", \"\")\n    k = int(k)\n\n    cost = 0\n    for i in range(1, len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            t = s[i - 1:j]\n            if t not in set(s):\n                if len(t)!= k:\n                    continue\n                cost += len(t)\n    if cost < 0:\n        return -1\n    return cost\n",
        "test": "assert solution('10 100\\najihiushda') == '233'",
        "num_ids": 1339
    },
    {
        "number": 4019,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'YES' if stdin == 'YES' else 'NO'",
        "test": "assert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"",
        "num_ids": 1213
    },
    {
        "number": 4020,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(\":\")\n    h2, m2 = stdin.split(\":\")\n    h1, m1 = int(h1), int(m1)\n    h2, m2 = int(h2), int(m2)\n\n    if m1 == m2:\n        m3 = (60 - m1) // 2 + m1\n    elif m1 > m2:\n        m3 = m1 + m2 + 60 - m1 - m2\n    else:\n        m3 = (60 - m1) // 2 + m1\n\n    if m3 < 10:\n        m3 = f\"0{m3}\"\n\n    if h1 == h2:\n        h3 = h1\n    elif h1 < h2:\n        h3 = h1 + h2\n    else:\n        h3 = h1 + h2 + 24 - h1 - h2\n\n    if h3 < 10:\n        h3 = f\"0{h3}\"\n    return f\"{h3}:{m3}\"\n",
        "test": "assert solution('10:00') == '10:30'",
        "num_ids": 2005
    },
    {
        "number": 4021,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingQCKH5-9A6/\"\"\"\n    # cast to int\n    a = int(stdin)\n\n    # use bitwise operators\n    i = a >> 1\n    while i > 0:\n        if a & i == 0:\n            return 1\n        i >>= 1\n\n    return 0\n",
        "test": "assert solution(2) == 1",
        "num_ids": 662
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximal possible length of the intersection of $(n - 1)$ remaining segments after you remove exactly one segment from the sequence.\"\"\"\n    line = stdin.split('\\n')\n    # the number of segments in the sequence\n    n = int(line[0])\n    # list of length n of each segment, each segment is a tuple (left, right)\n    segments = [(int(l), int(r)) for l, r in line[1:n+1]]\n    # initialize the intersection with the first segment\n    intersection = segments[0]\n\n    # for each segment in the sequence, check if it intersects with the intersection\n    # if it does, add it to the intersection and check the length\n    # if it doesn't, then remove it from the intersection\n    # the new intersection is the intersection of the remaining segments\n    for segment in segments[1:]:\n        if intersection[0] <= segment[0] <= intersection[1] or intersection[0] <= segment[1] <= intersection[1] or segment[0] <= intersection[0] <= segment[1] or segment[0] <= intersection[1] <= segment[1]:\n            intersection = [max(intersection[0], segment[0]), min(intersection[1], segment[1])]\n        else:\n            intersection = [min(intersection[0], segment[0]), max(intersection[1], segment[1])]\n    # return the length of the intersection\n    return str(max(intersection[1] - intersection[0] + 1, 0))\n\n\ndef",
        "test": "assert solution(\"\"\"4",
        "num_ids": 2668
    },
    {
        "number": 4023,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    \n    #write your code in Python 3.6\n    num_parts = int(stdin.readline().strip())\n    wall = list(map(int, stdin.readline().strip().split()))\n    \n    all_equal = True\n    non_equal = False\n    if len(set(wall)) == 1:\n        non_equal = True\n    \n    for idx in range(num_parts - 1):\n        if wall[idx] == wall[idx + 1]:\n            all_equal = True\n        else:\n            all_equal = False\n            break\n    \n    if all_equal:\n        if non_equal:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        print(\"NO\")\n        \n",
        "test": "assert solution(\"2\\n10 10\") == \"YES\"",
        "num_ids": 1811
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n\n=======\n",
        "test": "assert solution(\"aaaa\") == 4",
        "num_ids": 1980
    },
    {
        "number": 4025,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return min(a, b, c) * 2 + max(a, b, c)\n",
        "test": "assert solution(\"2 1 1\") == 4",
        "num_ids": 1047
    },
    {
        "number": 4026,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n",
        "test": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"NO\"",
        "num_ids": 1860
    },
    {
        "number": 4027,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n",
        "test": "assert solution('5') == '1'",
        "num_ids": 944
    },
    {
        "number": 4028,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    return count\n",
        "test": "assert solution(\"((()))\") == 0",
        "num_ids": 4910
    },
    {
        "number": 4029,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of moves to obtain a number that is divisible by 25, otherwise return -1.\n    \"\"\"\n    number = stdin.strip()\n    divisor = 25\n    moves = 0\n    for i in range(len(number)):\n        for j in range(i, len(number)):\n            if int(number[i:j+1]) % divisor == 0 and (j+1 - i) > moves:\n                moves = j - i + 1\n    return moves if moves else -1\n    # If we wanted to make this program more general (i.e. it wouldn't be possible to obtain a number that is divisible by any number),\n    # we could use the numpy module to perform modular arithmetic using only mathematically-generating numbers.\n",
        "test": "assert solution('705') == 1",
        "num_ids": 918
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/58a5a0d4c0bdbb40260018f8/python\n    \"\"\"\n    colors = []\n    start = 0\n    for i in range(len(stdin)):\n        if stdin[i]!= stdin[start]:\n            colors.append(stdin[start])\n            start = i\n        if i == len(stdin) - 1:\n            colors.append(stdin[start])\n    return colors\n",
        "test": "assert solution('''8",
        "num_ids": 3884
    },
    {
        "number": 4031,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == len(set(stdin)) else 'NO'",
        "test": "assert solution('qwerty') == 'YES'",
        "num_ids": 2398
    },
    {
        "number": 4032,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    difficulty = [int(x) for x in stdin.split('\\n')[1].split()]\n    left = 0\n    right = n - 1\n    solved = 0\n    while True:\n        if k > min(difficulty[left], difficulty[right]):\n            break\n        if difficulty[left] > k or difficulty[right] > k:\n            break\n        if difficulty[left] == difficulty[right]:\n            left += 1\n            right -= 1\n            continue\n        if difficulty[left] < difficulty[right]:\n            solved += right - left + 1\n            left += 1\n        else:\n            solved += right - left + 1\n            right -= 1\n    return solved\n",
        "test": "assert solution(\"5 2\\n3 1 2 1 3\") == 0",
        "num_ids": 1747
    },
    {
        "number": 4033,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(2 * (a + b) - 4)\n",
        "test": "assert solution(\"4 4\") == \"12\"",
        "num_ids": 813
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    even_sum = 0\n    odd_sum = 0\n\n    # Calculate sum of even and odd letters.\n    for c in s:\n        if c % 2 == 0:\n            even_sum += int(c)\n        else:\n            odd_sum += int(c)\n\n    # If sum of even characters is even, we need to swap odd characters.\n    if even_sum % 2 == 0:\n        if odd_sum % 2 == 0:\n            return 'YES'\n        return 'NO'\n\n    # Else, we need to swap even characters.\n    return 'YES'\n",
        "test": "assert solution('abacbecfd') == 'YES\\n001010101'",
        "num_ids": 3009
    },
    {
        "number": 4035,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the lowest price before tax that satisfies the condition.\n\n    Argument\n    --\n    stdin : str. the input to be processed.\n\n    Return\n    --\n    str. the lowest price before tax that satisfies the condition.\n    '''\n    args = stdin.split()\n    A = int(args[0])\n    B = int(args[1])\n    price = None\n    for a in range(A, B + 1):\n        # \u6ce8\u610f\uff1a\u9700\u8981\u518d\u5faa\u73af\u7684\u65f6\u5019\u8981\u8bbe\u7f6e\u4e0b\u6b21\u5faa\u73af\u7684A\uff0c\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56dea\n        a_times_0_8 = a * 0.08\n        a_times_0_1 = a * 0.1\n        if round(a_times_0_8) == 2:\n            price = a\n            break\n        elif round(a_times_0_1) == 2.5:\n            price = a\n    if price:\n        return str(price)\n    else:\n        return '-1'\n",
        "test": "assert solution('2 10') == '-1'",
        "num_ids": 1465
    },
    {
        "number": 4036,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    def rec(n: int, k: int) -> bool:\n        if k == 0:\n            return n == 0\n        if n < 0:\n            return False\n\n        return rec(n - 1, k - 1) or (rec(n - 2, k - 1) and n < 2 * rec(n - 1, k - 1))\n\n    n, k = tuple(map(int, stdin.split()))\n\n    if k == 0:\n        return \"YES\\n0\"\n\n    return \"YES\" if rec(n, k) else \"NO\"\n",
        "test": "assert solution(\"8 3\") == \"NO\"",
        "num_ids": 2128
    },
    {
        "number": 4037,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1500
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"1\\n10\") == \"YES\\n10\"",
        "num_ids": 1858
    },
    {
        "number": 4039,
        "max_answer_num": 28,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"YES\" or \"NO\"",
        "test": "assert solution('10 -5') == 'YES'",
        "num_ids": 1922
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    width, num_platforms, dist = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    platforms = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    indexes = list(range(1, num_platforms + 1))\n\n    if width >= dist:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert solution(stdin) == expected_result",
        "num_ids": 3415
    },
    {
        "number": 4041,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the length of the longest substring that is a subsequence of s.\n\n    >>> solution('')\n    0\n    >>> solution('abcdec')\n    6\n    >>> solution('aabdbec')\n    4\n    >>> solution('abcdea')\n    3\n    >>> solution('bbaba')\n    3\n    >>> solution('asdfasdf')\n    3\n    >>> solution('asdfa')\n    4\n    >>> solution('asdf')\n    0\n    \"\"\"\n    \n    if stdin == '':\n        return 0\n    return len(stdin) - len(set(stdin))\n",
        "test": "assert solution(\"tst\") == 1",
        "num_ids": 1860
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 5:\n        print('10 10')\n    else:\n        print('9 9')",
        "test": "assert solution('1.200000') == '3 2'",
        "num_ids": 1782
    },
    {
        "number": 4043,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    if n <= d + 1:\n        if k <= d:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    neighbors = {u: [] for u in range(1, n+1)}\n    \n    for u, v in [tuple(int(x) for x in line.split()) for line in stdin.split(\"\\n\")[1:] if line]:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    \n    def dfs(u):\n        if d == 0:\n            return True\n        visited = set()\n        for v in neighbors[u]:\n            if v in visited:\n                continue\n            visited.add(v)\n            if dfs(v):\n                return True\n        \n        if len(visited) >= k:\n            return True\n        \n        return False\n    \n    return \"YES\" if dfs(1) else \"NO\"",
        "test": "assert solution(\"6 2 3\") == \"NO\"",
        "num_ids": 4747
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    string = list(map(lambda x: '0' if x == '1' else '1', f'{n}{a}{b}{x}'))\n    print(''.join(string[:-1]))",
        "test": "assert solution
        "num_ids": 2876
    },
    {
        "number": 4045,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin[0], stdin[1]\n    n = len(s)\n    res = 'a' * n + 'b' * n + 'c' * n\n    if s not in res or t not in res or t in s or s in t:\n        return 'NO'\n    return res\n",
        "test": "assert solution(\"ac\") == \"abc\"",
        "num_ids": 2952
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    q = list(map(int, stdin.split()))\n    for i in range(n):\n        if q[i]!= i + 1:\n            return -1\n    p = []\n    for i in range(n):\n        p.append(i + 1)\n    for i in range(n - 1):\n        p[q[i] - 1] = q[i + 1]\n    return''.join(list(map(str, p)))\n",
        "test": "assert solution(\"4 -1 2\") == \"4 1 2\"",
        "num_ids": 3660
    },
    {
        "number": 4047,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    x = [int(i) for i in lines[1].split(' ')]\n    return f'{sum(abs(x[i] - x[i + 1]) for i in range(n - 1))}'\n",
        "test": "assert solution(\"2\\n1 2\") == \"1\"",
        "num_ids": 911
    },
    {
        "number": 4048,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # The minimum number of moves for any square with N sides is N-1.\n    # This is because we can make N-1 cuts.\n    return N - 1\n",
        "test": "assert solution('1') == 0",
        "num_ids": 778
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, list(map(int, stdin.split()))))",
        "test": "assert solution(\"3\\n1 2 3\\n1 0 0\") == \"0 2\"",
        "num_ids": 1964
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets the array length and the array elements,\n    sorts the array and splits it into blocks,\n    using the first and last index as the range.\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = sorted([int(x) for x in stdin.split(\"\\n\")[1].split(\" \")])\n\n    blocks = []\n    start = 0\n    end = 0\n    for i in range(n):\n        if end == n:\n            break\n        if a[end]!= a[end + 1]:\n            blocks.append([start, end])\n            start = end + 1\n        end += 1\n\n    if len(blocks) == 0:\n        return 0\n    # Find the maximum length among blocks\n    max_length = 0\n    for start, end in blocks:\n        max_length = max(max_length, end - start + 1)\n    print(max_length)\n\n    for start, end in blocks:\n        print(start, end)\n",
        "test": "assert solution('4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5'",
        "num_ids": 3633
    },
    {
        "number": 4051,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    stack = []\n    for i in arr:\n        if len(stack) == 0:\n            stack.append(i)\n        elif len(stack)!= 0:\n            if stack[-1] == 2:\n                stack.append(i)\n            elif i == 2 and stack[-1]!= 2:\n                stack.append(i)\n            else:\n                while len(stack)!= 0 and stack[-1]!= 2:\n                    if stack[-1] < i:\n                        stack.append(i)\n                        break\n                    else:\n                        stack.pop()\n                if len(stack) == 0:\n                    stack.append(i)\n                elif stack[-1]!= 2:\n                    stack.append(i)\n    \n    while len(stack)!= 0:\n        if stack[-1] == 2:\n            stack.pop()\n        else:\n            break\n    \n    if len(stack)!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert solution(\"3\\n3 1 2\") == \"NO\"",
        "num_ids": 1594
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    # Line 1: string length\n    n = int(stdin.readline().strip())\n\n    # Line 2: string s\n    s = stdin.readline().strip()\n\n    # Line 3: string t\n    t = stdin.readline().strip()\n\n    # Line 4: move count\n    moves = 0\n\n    # Line 5: read list of swaps\n    swaps = []\n\n    # Line 6: swap pairs\n    for i in range(len(s) - 1):\n        if s[i]!= t[i]:\n            swaps.append(i)\n\n    # Line 7: count moves\n    for swap in swaps:\n        s = s[:swap] + t[swap] + s[swap + 1:]\n        moves += 1\n\n    # Line 8: out\n    if s == t:\n        print(moves)\n        print(*swaps, sep=\" \")\n    else:\n        print(-1)\n",
        "test": "assert solution('abdcfe') == 'abdcef'",
        "num_ids": 1782
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the correct string\"\"\"\n    return\n",
        "test": "assert solution(\"a\") == \"PS\"",
        "num_ids": 1183
    },
    {
        "number": 4054,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 828
    },
    {
        "number": 4055,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\")\n    2\n    \"\"\"\n    a = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    ans = []\n    for i in range(len(a) - 1):\n        if a[i] == 1 and a[i + 1] == 1:\n            ans.append(1)\n    if ans == []:\n        return 0\n    else:\n        return len(ans)\n",
        "test": "assert solution('5\\n1 1 0 0 0') == 0",
        "num_ids": 1879
    },
    {
        "number": 4056,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.split())))",
        "test": "assert solution('4\\n1 2 3 4') == '4', 'Test #1'",
        "num_ids": 866
    },
    {
        "number": 4057,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1003
    },
    {
        "number": 4058,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2905
    },
    {
        "number": 4059,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    A = int(input[0])\n    count = 0\n    for i in range(1, A + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                if i * j + k == A:\n                    count += 1\n    return str(count)\n",
        "test": "assert solution(\"4\\n\") == \"1\"",
        "num_ids": 863
    },
    {
        "number": 4060,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of positions in a given string where\n    a bracket can be changed to make a regular expression.\n\n    Args:\n        stdin (str): Input string of brackets\n\n    Returns:\n        int: Number of positions\n    \"\"\"\n    brackets = stdin\n    regular_expression = 0\n    for index, bracket in enumerate(brackets):\n        if bracket == ')' and len(brackets[:index]) >= 1 and brackets[:index][-1] == '(':\n            regular_expression += 1\n    return regular_expression\n",
        "test": "assert solution(\"()\") == 1",
        "num_ids": 1079
    },
    {
        "number": 4061,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[1:]\n    len_s = len(s)\n    len_t = len(t)\n    if len_s > len_t:\n        return 0\n    else:\n        return max(0, len_s - len_t)\n\n\nprint(solution(\"bbaba\"))  # 3\nprint(solution(\"baaba\"))  # 2\nprint(solution(\"abcde\"))  # 0\n",
        "test": "assert solution('aaaaa') == 0",
        "num_ids": 4038
    },
    {
        "number": 4062,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    return str(max(1,2))\n",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "num_ids": 819
    },
    {
        "number": 4063,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '2'\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"",
        "num_ids": 1944
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"16 17 14 20 20 11 22\") == 3",
        "num_ids": 1776
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = stdin.split('\\n')\n    n = int(n)\n    arr = [int(x) for x in arr.split(' ')]\n    arr.sort()\n\n    count = 1\n    ans = 1\n    if arr[0] * 2 < arr[1]:\n        count += 1\n        ans = arr[0] * 2\n    for i in range(1, n - 1):\n        if arr[i] * 2 < arr[i + 1]:\n            count += 1\n            ans = max(ans, arr[i] * 2)\n    return count\n\n\nsolution(\"10\\n1 2 5 6 7 10 21 23 24 49\")\nsolution(\"5\\n2 10 50 110 250\")\nsolution(\"6\\n4 7 12 100 150 199\")\n",
        "test": "assert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"",
        "num_ids": 1202
    },
    {
        "number": 4066,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1520
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    binary_string = stdin\n    ternary_string = ''\n    binary_counter = 0\n    ternary_counter = 0\n    for c in binary_string:\n        if c == '0':\n            binary_counter += 1\n        elif c == '1':\n            binary_counter -= 1\n        ternary_counter = binary_counter // 3\n        if ternary_counter > 0:\n            ternary_string += '0' * ternary_counter + '1'\n            binary_counter -= ternary_counter * 3\n        elif ternary_counter == 0:\n            ternary_string += '0'\n        else:\n            ternary_string += '1'\n            binary_counter += ternary_counter * 3\n        ternary_counter = binary_counter // 3\n        if binary_counter > 0:\n            ternary_string += '1' * binary_counter\n        elif binary_counter == 0:\n            ternary_string += '2'\n    return ternary_string\n\n\"\"\"\nfrom tools import timing\n\n\"\"\"\nThe first problem is to convert the given binary string to ternary.\n\nThe second problem is to determine the number of changes to be made in this ternary string such that all the zeros become ones, all the ones become twos and all the twos become zeros.\n\"\"\"\nbinary_string = \"0111111111111111110\"\nternary_string = \"\"\ncounter = 0\nfor c in binary_string:\n    if c == '0':\n        counter += 1\n    else:\n        counter -= 1\n    ternary_string += str(counter // 3)\nprint(ternary_string)\n",
        "test": "assert solution('211200') == '211220'",
        "num_ids": 2223
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    steps = [0] * N\n    for i in range(M):\n        steps[int(stdin.split(' ')[i])] = 1\n    # sum(steps)\n\n    res = 0\n    for i in range(N):\n        if steps[i] == 1:\n            res += sum(steps[:i + 1]) % 1_000_000_007\n    return str(res)\n",
        "test": "assert solution(\"4 2\\n1\\n2\\n3\\n4\\n5\") == \"0\"",
        "num_ids": 2601
    },
    {
        "number": 4069,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution computes the minimum absolute value of the coordinate of\n    the destination in the given example.\n    '''\n    x, k, d = map(int, stdin.split())\n    if k == 0:\n        return str(x)\n    elif k % 2 == 0:\n        return str(min(abs(x - d), abs(x + d)))\n    else:\n        return str(min(abs(x - d), abs(x - d)))\n",
        "test": "assert solution(\"6 2 4\") == \"2\"",
        "num_ids": 1016
    },
    {
        "number": 4070,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    list_of_three_digits = []\n    while a!= 0:\n        b = a % 1000\n        list_of_three_digits.append(b)\n        a = int(a / 1000)\n\n    c = 0\n    for i in range(len(list_of_three_digits)):\n        if list_of_three_digits[i] % 5 == 0:\n            c += 1\n    return c\n",
        "test": "assert solution(14) == 0",
        "num_ids": 976
    },
    {
        "number": 4071,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 404
    },
    {
        "number": 4072,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"13\")\n    '1'\n    >>> solution(\"927\")\n    '1'\n    >>> solution(\"48\")\n    '0'\n    \"\"\"\n    a = int(stdin)\n    if 10 < a < 100:\n        return \"1\" if a % 2 == 1 else \"0\"\n    elif a in {11, 12, 13}:\n        return \"0\"\n    else:\n        return \"1\" if a % 2 == 1 else \"0\"\n",
        "test": "assert solution('13') == '1'",
        "num_ids": 627
    },
    {
        "number": 4073,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\nprint(solution('10'))\n",
        "test": "assert solution('') == ''",
        "num_ids": 607
    },
    {
        "number": 4074,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n    pass\n",
        "test": "assert solution('') == ''",
        "num_ids": 1799
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of combinations of on/off states of N switches that light M bulbs.\n    :param stdin: input from standard input\n    :return: answer to the problem\n    \"\"\"\n    input = [int(i) for i in stdin.split('\\n')[0].split()]\n    # input[0] = N, input[1] = M, input[2:] = k_1...k_M, input[3:] = p_1...p_M\n    num_bulbs = input[1]\n    num_switches = input[0]\n    bulbs = [[int(j) for j in stdin.split('\\n')[i].split()]\n             for i in range(2, input[0] + 2)]\n    print(bulbs)\n    # we are interested in the number of bits in the binary representation of p\n    num_bits = sum(bulbs, []).count(0)\n    return num_bits",
        "test": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'",
        "num_ids": 1976
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    numbers = [int(x) for x in stdin.split()]\n    # We'll use this as the answer if either of the hands is undefined\n    out = -1\n\n    # How much the minute hand moves in 12 hours\n    minute_delta = numbers[0] * 60 + numbers[1]\n\n    # How much the hour hand moves in 12 hours\n    hour_delta = numbers[0] * 12 + numbers[2]\n\n    # Get the clock position at the start of the 12 hour period\n    clock_start = hour_delta * 6 + minute_delta // 60\n\n    # Get the clock position at the end of the 12 hour period\n    clock_end = hour_delta * 6 + (minute_delta + 60) // 60\n\n    # Get the distance between the endpoints\n    out = clock_end - clock_start\n\n    # Print the answer\n    print(out)\n",
        "test": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"",
        "num_ids": 1237
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    def count(seq, value):\n        n = len(seq)\n        m = len(seq) // 2\n        l, r = m - 1, m\n        cnt = 0\n        while l >= 0 and r < n:\n            cnt += seq[r] == value\n            r += 1\n            l -= 1\n        return cnt\n    n, m = list(map(int, stdin.split()))\n    seq = list(map(int, stdin.split()))\n    res = count(seq, m)\n    return res\n",
        "test": "assert solution('5 4\\n1 4 5 60 4') == '8'",
        "num_ids": 1466
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        l -= 1\n        r -= 1\n        b[l] += 1\n        b[r] -= 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, a[i] - b[i])\n    print(ans)\n    print(b)\n    return \"\"\n",
        "test": "assert solution('''5 4",
        "num_ids": 2343
    },
    {
        "number": 4079,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\\n\")\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\n'\n    \"\"\"\n    ans = []\n    for line in stdin.split(\"\\n\"):\n        s = sorted(line)\n        if s!= list(line) or len(set(s))!= len(s):\n            ans.append(\"No\")\n        else:\n            ans.append(\"Yes\")\n    return \"\\n\".join(ans)\n",
        "test": "assert solution(\"dabcef\") == \"No\"",
        "num_ids": 2699
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, a_segs):\n        res = 0\n        m = 0\n        a_segs_ind = []\n        for i in range(len(a_segs)):\n            l, r = a_segs[i]\n            b = a[l - 1: r]\n            a_segs_ind.append((l - 1, len(b)))\n            a_segs_ind.append((r - len(b), -len(b)))\n            m = max(m, max(b) - min(b))\n        a_segs_ind.sort()\n        cur_sum = 0\n        r = 0\n        for i in range(len(a_segs_ind)):\n            l, l_len = a_segs_ind[i]\n            cur_sum += l_len\n            r += l_len\n            if r > m:\n                cur_sum -= r - m\n                r = m\n            res = max(res, cur_sum)\n        return res\n\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    a = [int(x) for x in stdin.split('\\n')[2:]]\n    a_segs = []\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split('\\n')[3 + i].split()]\n        a_segs.append([l, r])\n    a_segs = sorted(a_segs, key=lambda x: x[0])\n    res = solve(a, a_segs)\n    return str(res)\n",
        "test": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'",
        "num_ids": 2863
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the longest strictly increasing sequence of elements.\n    :param stdin: input string\n    :return: string\n    '''\n\n    return str(solution_printer(stdin))\n\n\ndef",
        "test": "assert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"",
        "num_ids": 998
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"",
        "num_ids": 1102
    },
    {
        "number": 4083,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2830
    },
    {
        "number": 4084,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You can assume that input is always valid.\n    \"\"\"\n    n, a, b = [int(s) for s in stdin.split()]\n    return str(b - a + 1)\n",
        "test": "assert solution(\"3 3 2\") == \"0\"",
        "num_ids": 694
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('2\\n1\\n1\\n') == '-1'",
        "num_ids": 1166
    },
    {
        "number": 4086,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for https://codeforces.com/gym/1255\"\"\"\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 1187
    },
    {
        "number": 4087,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = sum(int(c) for c in stdin)\n    for n in range(a, 1000001):\n        if s % 4 == 0 and n >= a:\n            return str(n)\n    return -1\n",
        "test": "assert solution('237') == '237'",
        "num_ids": 1043
    },
    {
        "number": 4088,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    TODO: implement the solution\n    \"\"\"\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1429
    },
    {
        "number": 4089,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    return letters[(n % 26) - 1]",
        "test": "assert solution(\"2\") == \"b\"",
        "num_ids": 979
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    num_words = int(stdin)\n    words = [stdin[i] for i in range(len(stdin))]\n    len_words = [len(word) for word in words]\n    max_len = max(len_words)\n    res = 0\n    for i in range(max_len):\n        word_1 = words[0]\n        word_2 = words[1]\n        if word_1[i] == word_2[i]:\n            continue\n        if word_1[i + 1:] == word_2[i + 1:]:\n            res += 1\n            words.remove(word_1)\n            words.remove(word_2)\n    return num_words + res\n",
        "test": "assert solution(",
        "num_ids": 1600
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    20\n    >>> solution(\"5 1\\n1 1 1 1 1\\n\")\n    1\n    >>> solution(\"4 2\\n1 2000 2\\n\")\n    4000\n    \"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    diff = [a[i + 1] - a[i] for i in range(n - 1)]\n    diff.append(a[-1])\n    res = set()\n    for i in range(1, n):\n        if i % k == 0:\n            res.add(sum(diff[:i]))\n    return max(res)\n",
        "test": "assert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'",
        "num_ids": 2149
    },
    {
        "number": 4092,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve_it(input))\n\n\ndef",
        "test": "assert solution('8 -1 1 -1 1 1 1 1 -1 -1') == '3'",
        "num_ids": 1644
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3 100\\n2 2\\n1 100\") == \"0\\n2\\n10\"",
        "num_ids": 1057
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    last_seen = 1\n    for i, val in enumerate(stdin.readline().strip(), 1):\n        if int(val)!= K:\n            continue\n        if (i - last_seen) % K == 0:\n            return i\n        last_seen = i\n    return -1\n",
        "test": "assert solution('101') == '4'",
        "num_ids": 1107
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Your solution here\"\"\"\n\"\"\"\n",
        "test": "assert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"",
        "num_ids": 989
    },
    {
        "number": 4096,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 8\n   ... 2 3 1 1 2\n   ... ''')\n    '4'\n    \"\"\"\n    cups = list(map(int, stdin.splitlines()[0].split()))\n    pages = list(map(int, stdin.splitlines()[1].split()))\n    res = 0\n    pages = [pages[i] - pages[i - 1] for i in range(1, len(pages))]\n    pages.append(pages[-1])\n    pages.insert(0, pages[0])\n    print(pages)\n    for i in range(1, len(pages)):\n        if pages[i] > pages[i - 1]:\n            res = i\n    return str(res) if res!= 0 else '-1'\n",
        "test": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"",
        "num_ids": 2195
    },
    {
        "number": 4097,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2176
    },
    {
        "number": 4098,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    nums = list(map(int, lines[1].split()))\n    nums.sort(reverse=True)\n    res = 0\n    for i in range(n - 1, n - k, -1):\n        if abs(nums[i] - nums[i - 1]) <= 5:\n            res += i + 1\n    return res\n",
        "test": "assert solution('5 2\\n1 2 15 15 15') == 5",
        "num_ids": 1945
    },
    {
        "number": 4099,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # total number of subjects\n    n = int(stdin.split()[0])\n    # total number of points\n    k = int(stdin.split()[1])\n    # average score\n    m = int(stdin.split()[2])\n    # array of points\n    arr = [int(i) for i in stdin.split()[3:]]\n    arr = sorted(arr)\n    arr = arr[::-1]\n    print(arr)\n    # loop through each point\n    for i in range(0,len(arr)):\n        # if the average score is not at least k, increment the number of points\n        if arr[i]*n + k < m:\n            return str(arr[i]*n + k)\n    # if the average score is not at least k, return -1\n    return str(-1)\n",
        "test": "assert solution(\"3 10 5\\n2 5 4\") == \"-1\"",
        "num_ids": 1428
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\"\n",
        "test": "assert solution(\"1 3 1\\n2\\n1\") == \"No\\nYes\"",
        "num_ids": 1404
    },
    {
        "number": 4101,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    matrix = []\n    for i in range(n):\n        matrix.append([int(char) for char in stdin.split('\\n')[i + 1].split(' ')])\n    invert_row_i = []\n    invert_col_j = []\n    for i in range(n):\n        invert_row_i.append(1 - matrix[i][0])\n        for j in range(1, m):\n            invert_row_i.append(1 - (1 - matrix[i][j - 1]) * (1 - matrix[i][j]))\n        invert_row_i.append(1 - matrix[i][-1])\n    for j in range(m):\n        invert_col_j.append(1 - matrix[0][j])\n        for i in range(1, n):\n            invert_col_j.append(1 - (1 - matrix[i - 1][j]) * (1 - matrix[i][j]))\n        invert_col_j.append(1 - matrix[-1][j])\n    res = []\n    res.append(''.join([str(int(invert_col_j[i])) for i in range(len(invert_col_j))]))\n    res.append(''.join([str(int(invert_row_i[i])) for i in range(len(invert_row_i))]))\n    if '0' in res[0] or '0' in res[1]:\n        return 'NO'\n    return 'YES'\n",
        "test": "assert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'",
        "num_ids": 3382
    },
    {
        "number": 4102,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\" if len(stdin) == 1 else \"No\"\n",
        "test": "assert solution('21') == 'No'",
        "num_ids": 3047
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"7 2 1\\n1 0 0 1 0 1 1\") == \"6\"",
        "num_ids": 1881
    },
    {
        "number": 4104,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return result of evaluating arithmetic expression\n\n    Args:\n        stdin (str): arithmetic expression\n\n    Returns:\n        str: result of evaluating arithmetic expression\n    \"\"\"\n    try:\n        exp = stdin.split()\n        exp.sort()\n        exp = ''.join(exp)\n        exp = eval(exp)\n    except Exception:\n        return \"ERROR\"\n    return str(exp)\n",
        "test": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"",
        "num_ids": 1207
    },
    {
        "number": 4105,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n:\n        return 'YES'\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    men = [0] * k\n    women = [0] * k\n    for _ in range(n):\n        m, w = map(int, stdin.split())\n        if m > w:\n            men[w - 1] += 1\n        else:\n            women[m - 1] += 1\n    for i in range(k):\n        if (men[i] > 1) or (women[i] > 1):\n            return 'YES'\n        if men[i] + women[i] == n - 1:\n            return 'YES'\n        if (men[i] == 0) and (women[i] == 0):\n            return 'NO'\n    for i in range(k):\n        if (men[i]!= 0) and (women[i]!= 0):\n            return 'NO'\n    return 'YES'\n",
        "test": "assert solution(\"4 3\") == \"YES\"",
        "num_ids": 2727
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n    s = sum(a)\n    if s < k:\n        return -1\n    if x == 1:\n        return s\n    elif x == 2:\n        return s - max(a) * ((s - k + 1) // k)\n    else:\n        return s - max(a) * ((s - k + 1) // k) * ((s - k + 1) // k - 1) // 2\n\n\nprint(solution(input()))\n",
        "test": "assert solution('6 1 5\\n10 30 30 70 10 10') == '-1'",
        "num_ids": 2364
    },
    {
        "number": 4107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1795
    },
    {
        "number": 4108,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        temp = s[:i] + t[i] + s[i + 1:]\n        if t == temp:\n            return 'Yes'\n    return 'No'\n",
        "test": "assert solution(\"azzel\") == \"Yes\"",
        "num_ids": 2968
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"0 5 5\") == \"7\"",
        "num_ids": 1790
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    D, G = list(map(int, stdin.split('\\n')[0].split()))\n    S = sum(sum(list(map(int, problem.split(':')))) for problem in stdin.split('\\n')[1:])\n    for i in range(1, D+1):\n        c = 100 * i\n        for j in range(1, D//i+1):\n            c += c\n            if c > G:\n                return str(D//i)\n\n    return str(D//i)\n",
        "test": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"",
        "num_ids": 1680
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of good candies Tanya gets.\"\"\"\n   ...",
        "test": "assert solution(\"7\\n8 2 3 1 1 2 4 6\") == \"3\"",
        "num_ids": 2055
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(c) for c in stdin.split(' ')]\n    a = [int(c) for c in stdin.split(' ')]\n    s = [a[i + 1] - a[i] for i in range(n - 1)]\n    s.sort()\n    # print(s)\n    if k < n or k > n:\n        return -1\n    s = [c for c in s if c >= 0]\n    # print(s)\n    for i in range(n):\n        if s[i] < x:\n            return -1\n    j = 0\n    curr = 0\n    while j < n - 1:\n        while j < n - 1 and s[j] == s[j + 1]:\n            j += 1\n        if j == n - 1:\n            break\n        curr += s[j]\n        j += 1\n        while j < n - 1 and s[j] - s[j - 1] + 1 < k:\n            j += 1\n    curr += s[n - 1]\n    if j < n - 1:\n        return -1\n    else:\n        return curr\n",
        "test": "assert solution(input()) == output()",
        "num_ids": 3452
    },
    {
        "number": 4113,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('15') == 'No'",
        "num_ids": 1400
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    data = []\n    for i in range(N):\n        x, y, h = map(int, stdin.readline().strip().split(' '))\n        data.append([x, y, h])\n\n    # \u6570\u5b66\u6a21\u578b\n    n = len(data)\n    x_avg, y_avg, h_avg = 0, 0, 0\n    for i in range(n):\n        x_avg += data[i][0]\n        y_avg += data[i][1]\n        h_avg += data[i][2]\n    x_avg /= n\n    y_avg /= n\n    h_avg /= n\n\n    # \u8a08\u7b97\u7d50\u679c\u306e\u53cd\u6620\n    for i in range(n):\n        data[i][0] -= x_avg\n        data[i][1] -= y_avg\n        data[i][2] -= h_avg\n\n    ans = {}\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            else:\n                if ans.get(data[i][2] - data[j][2]) is None:\n                    ans[data[i][2] - data[j][2]] = 1\n                else:\n                    ans[data[i][2] - data[j][2]] += 1\n    max_val = -1\n    for key in ans.keys():\n        if max_val < ans[key]:\n            max_val = ans[key]\n\n    print(\"%d %d %d\" % (x_avg, y_avg, h_avg))\n    return \"\"\n",
        "test": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"",
        "num_ids": 2672
    },
    {
        "number": 4115,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution(\"a\") == \"a\"",
        "num_ids": 561
    },
    {
        "number": 4116,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for a in range(1, 10):\n        for b in range(1, 10):\n            if num == a * b:\n                return 'Yes'\n    return 'No'\n",
        "test": "assert solution('100') == 'No'",
        "num_ids": 1076
    },
    {
        "number": 4117,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    \n    result = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            if L[i]!= L[j] and L[i] + L[j] > L[j + 1] and L[j] + L[j + 1] > L[i] and L[i] + L[j + 1] > L[j]:\n                result += 1\n    \n    return str(result)\n",
        "test": "assert solution('5\\n4 4 9 7 5') == '5'",
        "num_ids": 3610
    },
    {
        "number": 4118,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A * B)\n    else:\n        return \"-1\"\n",
        "test": "assert solution('2 20') == '-1'",
        "num_ids": 820
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    total = stdin.split('\\n')\n    _, target = total[0].split()\n    target = int(target)\n    line = total[1]\n    line = line.split(' ')\n    numbers = list(map(int, line))\n    # set the initial number of moves\n    move = 0\n    for number in numbers:\n        if number < target:\n            move += abs(number - target)\n            target = number\n    return str(move)\n\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"",
        "num_ids": 2344
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'",
        "num_ids": 3190
    },
    {
        "number": 4121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if... else \"NO\"\n\"\"\"\n\n\"\"\"\nA = [1, 1, 2, 5]\nB = [2, 1, 2, 5]\n\nA = [1, 1, 2, 5]\nB = [1, 1, 2, 5]\n\n\"\"\"\n\ndef",
        "test": "assert solution('3\\n1 2 3') == 'NO'",
        "num_ids": 1664
    },
    {
        "number": 4122,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1251
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    finds the longest substring of given length that contains two identical letters\n    :param stdin: the input string\n    :return: the longest substring of given length that contains two identical letters\n    '''\n    s = stdin\n    n = len(s)\n    s_list = list(s)\n    ans = ''\n    for i in range(n):\n        if i + 3 <= n:\n            if s_list[i] == s_list[i + 1] and s_list[i + 1] == s_list[i + 2]:\n                if len(ans) < len(s[i:i + 3]):\n                    ans = s[i:i + 3]\n    return ans\n",
        "test": "assert solution(\"ZZZAA\") == \"ZZ\"",
        "num_ids": 1183
    },
    {
        "number": 4124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('a') == ''",
        "num_ids": 982
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution(\"3 3\\n1 7 11\") == \"2\"",
        "num_ids": 2492
    },
    {
        "number": 4126,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"Yes\" if stdin == stdin[::-1] and (len(stdin) - 1) % 2 == 0 \\\n        else \"No\"\n    \n",
        "test": "assert solution(\"akasaka\") == \"Yes\"",
        "num_ids": 827
    },
    {
        "number": 4127,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [float(n) for n in stdin.split()]\n    return str(int(A * B))\n",
        "test": "assert solution(\"198 1.10\") == \"217\"",
        "num_ids": 564
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A Solver for the Candy Distribution Problem\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"",
        "num_ids": 829
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"9 7\\n8 6\\n7 1\\n7 2\\n6 3\\n5 1\\n1 2\\n1 3\\n1 4\\n2 4\") == \"0\"",
        "num_ids": 2202
    },
    {
        "number": 4130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    return sum(a[::2])\n",
        "test": "assert solution(\"4\\n3 2 4 1\") == 4",
        "num_ids": 1087
    },
    {
        "number": 4131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n\"\"\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1821
    },
    {
        "number": 4132,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 3057
    },
    {
        "number": 4133,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    golorps = [stdin]\n    for i in range(3):\n        new_golorp = []\n        for golorp in golorps:\n            for j in range(10):\n                new_golorp.append(golorp[:golorp.find(\">\")] + str(j) + golorp[golorp.find(\">\")+1:])\n        golorps = list(set(new_golorp))\n    return \"false\" if len(golorps) > 1 else \"\".join([str(i) for i in range(10) for j in range(10) if j < i])\n",
        "test": "assert solution(\"?(_-_+_/_____):-__>__,_____<__\") == \"false\"",
        "num_ids": 5149
    },
    {
        "number": 4134,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(\" \")))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split(\" \"))))\n    def dfs(i, j, k, visited):\n        if i == n-1 and j == m-1:\n            return 1\n        if (i, j) in visited:\n            return 0\n        visited.add((i, j))\n        count = 0\n        if (i + 1 < n) and (matrix[i][j] ^ k == matrix[i + 1][j]):\n            count += dfs(i + 1, j, k, visited)\n        if (j + 1 < m) and (matrix[i][j] ^ k == matrix[i][j + 1]):\n            count += dfs(i, j + 1, k, visited)\n        return count\n    return dfs(0, 0, k, set())",
        "test": "assert solution(\"3 4 1000000000000000000\") == 0",
        "num_ids": 1951
    },
    {
        "number": 4135,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"rocesfedoc\")\n    'codeforces'\n    \"\"\"\n    s = stdin[:]\n    n = len(s)\n    for d in reversed(range(2, n + 1)):\n        if d == 2:\n            t = s[:d]\n        else:\n            t = s[:d][::-1]\n        s = s[:n - d] + t + s[n - d:]\n    return s\n",
        "test": "assert solution(\"z\") == \"z\"",
        "num_ids": 1355
    },
    {
        "number": 4136,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n",
        "test": "assert solution('5 14') == '19'",
        "num_ids": 481
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"",
        "num_ids": 1893
    },
    {
        "number": 4138,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 3715
    },
    {
        "number": 4139,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers_under_N = set(str(i) for i in range(1, N+1))\n\n    def is_Shichi_Go_San(n: str) -> bool:\n        for i in '7', '5', '3':\n            if i not in n:\n                return False\n        return True\n\n    count = 0\n    for i in range(1, N+1):\n        if is_Shichi_Go_San(str(i)):\n            count += 1\n    return count",
        "test": "assert solution('1') == 0",
        "num_ids": 1125
    },
    {
        "number": 4140,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    return len([c for c in stdin])",
        "test": "assert solution(\"111\") == 3",
        "num_ids": 673
    },
    {
        "number": 4141,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, *ints = stdin.splitlines()\n    ints = [int(i) for i in ints]\n\n    evens = [i for i in ints if i % 2 == 0]\n    evens = [i for i in evens if i % 3 == 0 or i % 5 == 0]\n    \n    return 'APPROVED' if len(evens) == len(ints) else 'DENIED'",
        "test": "assert solution('4\\n5\\n3\\n2\\n1') == 'DENIED'",
        "num_ids": 929
    },
    {
        "number": 4142,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(stdin)\n    for i, s in enumerate(arr):\n        if i % 2:\n            if s not in 'RUDR':\n                return 'No'\n        else:\n            if s not in 'LUD':\n                return 'No'\n    return 'Yes'",
        "test": "assert solution(\"RUDLRUULRDRD\") == \"No\"",
        "num_ids": 2240
    },
    {
        "number": 4143,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    return '7'",
        "test": "assert solution(\"5 3 2 4 3 5\") == \"7\"",
        "num_ids": 2198
    },
    {
        "number": 4144,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # Create a list of strings representing the input.\n    values = list(stdin.split(\"\\n\"))\n\n    # Convert the strings to integers and return the answer.\n    return str(sum([\n        n == 9 for n in range(10)\n        if (\n            any([\n                n - int(x) == 0 for x in values[0].split(\" \")\n            ]) and\n            any([\n                int(x) - n == 0 for x in values[0].split(\" \")\n            ])\n        )\n    ]))\n",
        "test": "assert solution('1\\n') == '0'",
        "num_ids": 1039
    },
    {
        "number": 4145,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    X = stdin\n    num = int(X)\n    while True:\n        if all(num % i!= 0 for i in range(2, num)):\n            return num\n        else:\n            num += 1\n",
        "test": "assert solution(\"6\") == 7",
        "num_ids": 1098
    },
    {
        "number": 4146,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the minimum number of elements that needs to be replaced.'''\n    n = int(stdin.split()[0])\n    v = list(map(int, stdin.split()[1:]))\n\n    unique = set()\n    for i in range(n-2):\n        if v[i] == v[i+2]:\n            unique.add(v[i])\n    if len(unique)!= 2:\n        return len(unique)\n    return 1\n",
        "test": "assert solution('4 3 1 3 2') == 1",
        "num_ids": 1533
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    answer = 0\n\n    for i in range(n):\n        l = int(stdin.split('\\n')[i])\n        while answer < a:\n            answer += 1\n            if answer >= a:\n                break\n        while answer >= a:\n            answer -= 1\n            while answer < a:\n                answer += 1\n                if answer >= a:\n                    break\n            while answer >= a:\n                answer -= 1\n                if answer < a:\n                    break\n        if answer == a:\n            while answer > a:\n                answer -= 1\n                if answer < a:\n                    break\n            while answer > a:\n                answer += 1\n                if answer > a:\n                    break\n    return answer\n",
        "test": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"",
        "num_ids": 3836
    },
    {
        "number": 4148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns a new string where the characters are shifted n spaces in alphabetical order\n    '''\n    shift = int(stdin[0]) % 26\n    return ''.join(chr(ord('A') + (ord(c) - ord('A') + shift) % 26) for c in stdin[1])\n",
        "test": "assert solution(\"ABCXYZ\") == \"CDEZAB\"",
        "num_ids": 724
    },
    {
        "number": 4149,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an array `a` with elements from `stdin`.\"\"\"\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 2519
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    #print(n, k, a)\n\n    def rev(a):\n        return [1 for _ in range(n)] if a[0] > a[-1] else [2 for _ in range(n)]\n    \n    def join(a, b):\n        b = [i for i in range(n) if a[i] in b]\n        if len(b) > 0:\n            for i in b:\n                a[i] = 1 if a[i] == 2 else 2\n        return a\n    \n    c = join(a, a[:k])\n    #print(c)\n    for _ in range(n-k):\n        c = join(c, rev(c))\n    #print(c)\n    return ''.join([str(i) for i in c])",
        "test": "assert solution(7, 1) == \"1121122\"",
        "num_ids": 2862
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        print(2)\n        return\n\nsolution(stdin)\n",
        "test": "assert solution(\"4\\n100 1\") == \"2\"",
        "num_ids": 1672
    },
    {
        "number": 4152,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 7 1 5 4 9\\n\")\n    '1'\n    >>> solution(\"1 2 3 4 5\\n\")\n    '2'\n    \"\"\"\n\n    length = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n\n    good_sequence = set()\n\n    for i in sequence:\n        for j in sequence:\n            if i!= j:\n                if not j in good_sequence:\n                    if not i + j in good_sequence:\n                        good_sequence.add(i)\n                        good_sequence.add(j)\n\n    return str(len(sequence) - len(good_sequence))\n",
        "test": "assert solution(\"1\\n16\") == \"1\"",
        "num_ids": 1387
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\n\ndef",
        "test": "assert solution('11101111011111111110111101111011') == 17",
        "num_ids": 605
    },
    {
        "number": 4154,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = tuple(map(int, stdin.readline().split()))\n    rows = [list(map(int, stdin.readline().split())) for _ in range(M)]\n    '''\n    N = 4\n    M = 2\n    rows = [[1, 3], [2, 4]]\n\n    # init the matrix to zero\n    result = [[0 for _ in range(N)] for _ in range(N)]\n    for r in rows:\n        result[r[0] - 1][r[1] - 1] = 1\n        result[r[1] - 1][r[0] - 1] = 1\n\n    # find if it's a DAG\n    graph = [[] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if result[i][j] == 1:\n                graph[i].append(j)\n    #print(graph)\n\n    # BFS\n    visited = [False] * N\n    count = 0\n    for i in range(N):\n        if not visited[i]:\n            count += 1\n            queue = [i]\n            while queue:\n                #print(queue)\n                cur_node = queue.pop(0)\n                visited[cur_node] = True\n                for neighbor in graph[cur_node]:\n                    if not visited[neighbor]:\n                        queue.append(neighbor)\n\n    print(count)\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1635
    },
    {
        "number": 4155,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = stdin.split()\n    n = int(n)\n    heights = [int(h) for h in heights]\n    water_ops = 0\n    while not any(h == 0 for h in heights):\n        new_heights = [h for h in heights if h > 0]\n        if not new_heights:\n            break\n        l, r = min(new_heights), max(new_heights)\n        water_ops += r - l + 1\n        for h in range(l, r + 1):\n            heights[h - 1] -= 1\n    print(water_ops)\n    return water_ops",
        "test": "assert solution(\"4 1 2 1\") == 2",
        "num_ids": 822
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport itertools",
        "test": "assert solution(\"4 10\\n2 4 1 2\") == \"2\"",
        "num_ids": 1083
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = input()\n    stdin = stdin.split(' ')\n    # print(stdin)\n    n = int(stdin[0])\n    nums = [int(stdin[i]) for i in range(1, len(stdin))]\n    nums.sort()\n    # print(nums)\n    # n = int(stdin[0])\n    # nums = [int(stdin[i]) for i in range(1, len(stdin))]\n    # nums.sort()\n    # print(nums)\n\n    new_nums = []\n    for num in nums:\n        if num % 3 == 0:\n            new_nums.append(num // 3)\n            new_nums.append(num)\n        elif num % 3 == 1:\n            new_nums.append(num * 2)\n        else:\n            new_nums.append(num // 3 * 2)\n\n    # print(new_nums)\n    print(' '.join(str(num) for num in new_nums))\n",
        "test": "assert solution('2\\n1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'",
        "num_ids": 2057
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [int(x) for x in stdin.split(' ')]\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            c = points[i] ^ points[j]\n            if c == 0:\n                continue\n            if not (c & (c - 1) == 0):\n                continue\n            d = 0\n            while not (c & 1):\n                c >>= 1\n                d += 1\n            if d > m:\n                m = d\n    if m == 0:\n        return \"0\\n\"\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            c = points[i] ^ points[j]\n            if c == 0:\n                continue\n            if not (c & (c - 1) == 0):\n                continue\n            d = 0\n            while not (c & 1):\n                c >>= 1\n                d += 1\n            if d == m:\n                res.append(points[i])\n                res.append(points[j])\n    res.sort()\n    return str(m) + \"\\n\" + \" \".join(str(x) for x in res)\n",
        "test": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"",
        "num_ids": 2124
    },
    {
        "number": 4159,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if K >= 10 ** 12:\n        return \"IMPOSSIBLE\"\n    if K == 0:\n        return str(A) + \" \" + str(B)\n    takahashi_cookie, aoki_cookie = A, B\n    for _ in range(K):\n        if takahashi_cookie:\n            takahashi_cookie -= 1\n        elif aoki_cookie:\n            aoki_cookie -= 1\n        else:\n            break\n    return str(takahashi_cookie) + \" \" + str(aoki_cookie)\n",
        "test": "assert solution('2 3 3') == '0 2'",
        "num_ids": 1088
    },
    {
        "number": 4160,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of years it takes for Takahashi's balance to reach X yen or above for the first time.\"\"\"\n    # Write your code here.\n    # Declare constants.\n    INCOME_RATE = 0.01\n    INTEGRAL_TOLERANCE = 10 ** -18\n    \n    # Read the input.\n    x = float(stdin)\n    \n    # Set up variables.\n    current_balance = 100\n    years = 0\n    \n    # Process the input and compute the solution.\n    while True:\n        years += 1\n        current_balance = current_balance * (1 + INCOME_RATE) + 100\n        if current_balance >= x:\n            break\n    return str(years)\n",
        "test": "assert solution(\"101\") == \"1\"",
        "num_ids": 973
    },
    {
        "number": 4161,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 709
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Read input.\n    # N = int(stdin.readline())\n    # a = [int(x) for x in stdin.readline().strip().split()]\n    #\n    # # Write your code here.\n    #\n    #\n    # return str(ans)",
        "test": "assert solution(a) == ans",
        "num_ids": 1273
    },
    {
        "number": 4163,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Three doubles in a row.\"\"\"\n    return \"Yes\" if (\n        \"11\" in stdin or \"22\" in stdin or \"33\" in stdin or \"44\" in stdin\n    ) else \"No\"\n",
        "test": "assert solution('2 1\\n2 2\\n3 1\\n3 3\\n') == 'No'",
        "num_ids": 1714
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for _ in range(int(stdin)):\n        ans += 2 ** (1/2)\n    return str(int(ans))\n",
        "test": "assert solution('2\\n') == '4'",
        "num_ids": 424
    },
    {
        "number": 4165,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    polygon = [int(i) for i in stdin.split()]\n    return 'Yes' if polygon[0] < sum(polygon[1:]) else 'No'\n",
        "test": "assert solution(\"4 8 5 1\") == \"Yes\"",
        "num_ids": 1187
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    m = int(input[1])\n    string = ''\n    for i in range(n):\n        for j in range(m):\n            string += stdin[i+2][j]\n    return string\n",
        "test": "assert solution(\"2 5\\n1 5\\n3 2\\n4 4\\n2 3\") == \"702\"",
        "num_ids": 1432
    },
    {
        "number": 4167,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N, K = int(N), int(K)\n    output = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    output += 1\n    return output\n",
        "test": "assert solution('3 2') == 9",
        "num_ids": 832
    },
    {
        "number": 4168,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    def base_2_converter(num):\n        digits = []\n        while num:\n            digits.append(str(num % 2))\n            num //= 2\n        if len(digits) < 1:\n            return \"0\"\n        return \"\".join(reversed(digits))\n\n    return base_2_converter(int(stdin))\n",
        "test": "assert solution(0) == '0'",
        "num_ids": 621
    },
    {
        "number": 4169,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split('\\n')[0].split(' '))\n  a, b = [], []\n  for _ in range(n):\n    a.append(int(stdin.split('\\n')[_].split(' ')[0]))\n    b.append(int(stdin.split('\\n')[_].split(' ')[1]))\n\n  money = 0\n  for _ in range(m):\n    min_value = 0\n    for i in range(n):\n      if a[i] <= money:\n        min_value = i\n        break\n    money += b[min_value]\n    if money >= m:\n      break\n  return str(money)",
        "test": "assert solution(\"5 10\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\"",
        "num_ids": 3536
    },
    {
        "number": 4170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1088
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The solution to the problem is the same as with task \"Easy\": just add \"2\" to every element\n    in the input, and then count the number of 2s in the input.\n    \n    '''\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for x in a:\n        if x % 2 == 0:\n            count += 1\n        if count >= k:\n            break\n    return count",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == '2'",
        "num_ids": 1886
    },
    {
        "number": 4172,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return \"3\"",
        "test": "assert solution('6 5\\n1 2 2 4 2 3') == '3'",
        "num_ids": 1733
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    number_of_tests = int(stdin.readline())\n    for i in range(number_of_tests):\n        n, a, b = map(int, stdin.readline().split())\n        print(min(a*n, b*n))\n\n    return \"\"\n",
        "test": "assert solution(\"4\\n1 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"",
        "num_ids": 1066
    },
    {
        "number": 4174,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2168
    },
    {
        "number": 4175,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \ud30c\uc774\uc36c\uc5d0\uc11c \ubc30\uc5f4\uc758 \uc778\ub371\uc2f1\uc740 0\ubd80\ud130 \uc2dc\uc791\ud558\ubbc0\ub85c\n    stdin.split('\\n')\uc758 \ub9c8\uc9c0\ub9c9 \uc778\ub371\uc2a4\ub294 -1\uae4c\uc9c0 \uac00\ub2a5\ud568\n    '''\n    \n    takahashi = [s.strip() for s in stdin.split('\\n') if s!= '']\n    if len(takahashi)!= 1:\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"",
        "num_ids": 1194
    },
    {
        "number": 4176,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(1)\n    Space: O(1)\n    \"\"\"\n    a, b = map(int, stdin.split(\" \"))\n    return str(max(a * 3, b * 2))\n",
        "test": "assert solution('2 3') == '6'",
        "num_ids": 854
    },
    {
        "number": 4177,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(lambda x: 'x' if x.isalpha() else x, stdin))\n",
        "test": "assert solution('') == ''",
        "num_ids": 525
    },
    {
        "number": 4178,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = list(map(int, stdin.split()))\n    print(nums)\n    nums = list(map(lambda x: x-1, nums))\n    print(nums)\n    for i in range(n-1):\n        if nums[i] < nums[i+1]:\n            return 'No'\n    return 'Yes'",
        "test": "assert solution(\"5\\n1 1 1 1 3\") == \"No\"",
        "num_ids": 1398
    },
    {
        "number": 4179,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0].split(\" \")[0])\n    m = int(lines[0].split(\" \")[1])\n    c = int(lines[0].split(\" \")[2])\n    b = [int(x) for x in lines[1].split(\" \")]\n    a = [[int(x) for x in line.split(\" \")] for line in lines[2:]]\n    result = 0\n    for x in a:\n        if sum([x[0] * y for y in b]) + c > 0:\n            result += 1\n    return str(result)\n",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"",
        "num_ids": 1549
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\n\ndef",
        "test": "assert solution(\"1950\") == \"20\"",
        "num_ids": 632
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b.sort()\n    cost = 0\n    for i in range(n):\n        cost += a[i]*b[i]\n    return str(cost)\n",
        "test": "assert solution(\"3 5 2\\\\n4 5\\\\n\") == \"9\"",
        "num_ids": 2111
    },
    {
        "number": 4182,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a = stdin.strip().split(\"\\n\")\n    for i in range(len(a)):\n        a[i] = list(map(int, a[i].strip().split()))\n    n, m, x, y = a[0]\n    for i in a[1]:\n        if i >= x and i <= y:\n            pass\n        else:\n            return \"No War\"\n    for i in a[2]:\n        if i >= x and i <= y:\n            pass\n        else:\n            return \"No War\"\n    return \"War\"\n    '''\n    n, m, x, y = map(int, stdin.strip().split())\n    return \"War\" if x < y or max(map(int, stdin.strip().split())) >= y else \"No War\"\n\nprint(solution(input()))",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"",
        "num_ids": 1858
    },
    {
        "number": 4183,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = [int(i) for i in stdin.split('\\n')[:-1]]\n    return f'{max(times) + min(times)}'\n",
        "test": "assert solution(\"2\\n3\\n4\") == \"6\"",
        "num_ids": 2424
    },
    {
        "number": 4184,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    # Get the input\n    N, *weights = [int(x) for x in stdin.split()]\n    # Sort the weights\n    weights.sort()\n    # Find the minimum absolute difference of S_1 and S_2\n    min_difference = 10000000\n    for i in range(1, N):\n        first_group = weights[:i]\n        second_group = weights[i:]\n        difference = abs(sum(first_group) - sum(second_group))\n        if difference < min_difference:\n            min_difference = difference\n    return str(min_difference)\n",
        "test": "assert solution('3\\n1 1 3') == '1'",
        "num_ids": 1221
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    '''Codewars solution'''\n    n, m = map(int, stdin.split())\n    mat = []\n    for _ in range(n):\n        mat.append(list(map(int, stdin.split())))\n    ans = 0\n    for col in zip(*mat):\n        if sum(col)!= n * m:\n            ans += 1\n    return str(ans)\n",
        "test": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"",
        "num_ids": 2702
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return int(n / 2 + n * (n - 1) / 2 - sum(a))\n",
        "test": "assert solution('''2",
        "num_ids": 1805
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time.sleep(1)\n    print(input)\n    '''\n    times = [int(c) for c in stdin.split('\\n')[0].split(' ')]\n    schedule = [int(c) for c in stdin.split('\\n')[1].split(' ')]\n    rest = 0\n    best = 0\n    last = 0\n    for time in range(1, len(times)+1):\n        if schedule[time-1] == 0:\n            if last == 0:\n                last = time\n            rest += 1\n        else:\n            if last > 0:\n                best = max(best, rest)\n                rest = 0\n                last = 0\n    print(best)\n",
        "test": "assert solution('3\\n0 0 0\\n') == '0'",
        "num_ids": 1742
    },
    {
        "number": 4188,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n    return '0'",
        "test": "assert solution(\"2\") == \"0\"",
        "num_ids": 401
    },
    {
        "number": 4189,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1401
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('1 2 3 4 5') == '0 1 2 3 4 5'",
        "num_ids": 1318
    },
    {
        "number": 4191,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n",
        "test": "assert solution(\"00101110\") == \"0\"",
        "num_ids": 641
    },
    {
        "number": 4192,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = stdin.split(' ')\n    D = int(D)\n    T = int(T)\n    S = int(S)\n\n    distance = D\n    time = T\n    speed = S\n\n    time = distance / speed\n    if time <= T:\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"1000 15 32\") == \"No\"",
        "num_ids": 852
    },
    {
        "number": 4193,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.codewars.com/kata/55983863da40caa2c900004e/train/python\n    '''\n    # Your code here\n    # return None\n\n    raw_data = stdin.split('\\n')\n    matrix = []\n    for row in raw_data[:3]:\n        matrix.append(list(map(int, row.split())))\n    N = int(raw_data[3])\n\n    bingos = [int(x) for x in raw_data[4:4+N]]\n\n    # 3x3 matrix\n    for i in range(3):\n        if sum(matrix[i]) == 0:\n            return \"No\"\n        if sum(matrix[j][i] for j in range(3)) == 0:\n            return \"No\"\n    \n    for i in range(3):\n        for j in range(3):\n            if j+3 <= 3 and i+3 <= 3:\n                diag = [matrix[i+k][j+k] for k in range(3)]\n                if sum(diag) == 0:\n                    return \"No\"\n            if i+3 <= 3 and j-3 >= 0:\n                diag = [matrix[i+k][j-k] for k in range(3)]\n                if sum(diag) == 0:\n                    return \"No\"\n    \n    return \"Yes\"",
        "test": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'",
        "num_ids": 3335
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\"\"\"\n",
        "test": "assert solution(\"41 2\\n5 6\") == \"30\"",
        "num_ids": 1376
    },
    {
        "number": 4195,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 5\\n\")\n    '5'\n    \"\"\"\n    D, N = stdin.split()\n    if D == '0':\n        return str(1 + int(N) - 1)\n    elif D == '1':\n        return str((1 + int(N)) // 2)\n    else:\n        return str(int(N) + 1)\n",
        "test": "assert solution(\"1 1\\n\") == \"1\"",
        "num_ids": 951
    },
    {
        "number": 4196,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1196
    },
    {
        "number": 4197,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    std = [int(i) for i in stdin[1].split(' ')]\n    std.sort()\n    res = [str(i) for i in std]\n    return''.join(res)\n",
        "test": "assert solution(\"1\\n1\") == \"1\"",
        "num_ids": 949
    },
    {
        "number": 4198,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    for n in reversed(range(1, 1001)):\n        if (n * a + b * len(str(n))) <= x:\n            return str(n)\n\n    return \"0\"\n",
        "test": "assert solution(\"10 7 100\") == \"9\"",
        "num_ids": 1120
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return None\n",
        "test": "assert solution('4 150\\n150 140 100 200') == '2'",
        "num_ids": 824
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef",
        "test": "assert solution(\"4 1\\n5 4 2 1\") == 'Yes'",
        "num_ids": 1092
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds how many choices of rows and columns satisfy the condition.\n\n    Args:\n        stdin (str): The input data.\n\n    Returns:\n        str: The solution to the problem.\n    \"\"\"\n    data = stdin.split()\n    h, w, k = (int(i) for i in data)\n    rows = [i for i in range(h)]\n    columns = [i for i in range(w)]\n    ans = 0\n    for i in range(2 ** h):\n        for j in range(2 ** w):\n            if (i + j) & (k ^ (i + j)) == 0:\n                ans += 1\n    return ans\n",
        "test": "assert solution(\"##.\") == 1",
        "num_ids": 2666
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    input_as_list = stdin.split()\n    l = int(input_as_list[0])\n    r = int(input_as_list[1])\n    divisor = 2019\n    res = -1\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if l <= i * j < r:\n                res = i * j\n                break\n        if res!= -1:\n            break\n    print(res)\n    return \"\"",
        "test": "assert solution(\"2020 2040\") == \"2\"",
        "num_ids": 747
    },
    {
        "number": 4203,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    S: str = stdin\n    if S[0] == 'A' and S[2] == 'C' and S[3]!= 'C' and S[1]!= 'A' and S[1]!= 'C':\n        return 'AC'\n    else:\n        return 'WA'",
        "test": "assert solution(\"atCoder\") == \"WA\"",
        "num_ids": 840
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    K = int(stdin)\n    l = 1\n    while K > 10 ** l:\n        l += 1\n    l -= 1\n    j = 10 ** l\n    k = K % j\n    S = str(S)\n    while len(S) < j + k:\n        S = \"\".join(str(int(i) * 2 if i == \"2\" else i) for i in S)\n        S = S[:-1]\n    return S[k]\n\"\"\"\n\nimport sys\nimport numpy as np\n\ndef",
        "test": "assert solution(\"1214\") == \"2\"",
        "num_ids": 2468
    },
    {
        "number": 4205,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    N, *p = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    \n    return 'YES' if len(set(p)) == N else 'NO'",
        "test": "assert solution('2 3 1 5 4') == 'NO'",
        "num_ids": 1104
    },
    {
        "number": 4206,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    return str(len(str(s)) - len(str(s).rstrip(\"0\")) + 1)\n",
        "test": "assert solution(\"6\") == \"1\"",
        "num_ids": 952
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n')[:3])\n    c = [i * a + b for i in range(1, n + 1)]\n    count = [0] * n\n    for x in c:\n        for i in range(1, n + 1):\n            if x % i == 0:\n                count[i - 1] += 1\n    max_zeroes = max(count)\n    return str(max_zeroes)\n",
        "test": "assert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"",
        "num_ids": 2139
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "def solution(stdin: str) -> str:\n    left_length, left_s, right_s = stdin.split('\\n')\n    left_length, left_s, right_s = map(len, [left_length, left_s, right_s])\n    left = [None] * left_length\n    right = [None] * left_length\n    for i, s in enumerate(left_s):\n        left[i] = s == '?' or s.lower()\n    for i, s in enumerate(right_s):\n        right[i] = s == '?' or s.lower()\n\n    # 1. s1 and s2 are equal or s1 and s2 are different.\n    # 2. For s1 and s2 which are not equal:\n    #   a. s2 has an indefinite color. Then, they are compatible.\n    #   b. s2 has a specific color. Then, they are compatible if s1 has the same color.\n\n    # Let's start with s1 and s2.\n    compatible_s1_s2 = []\n    for i in range(left_length):\n        s1 = left[i]\n        s2 = right[i]\n        if s1!= s2:\n            if s2 == '?':\n                compatible_s1_s2.append((i, i))\n            elif s1 == '?':\n                compatible_s1_s2.append((i, i))\n            else:\n                compatible_s1_s2.append((i, i))\n                break\n\n    # Now, we know which s1 and s2 are compatible.\n    # We now have to check the compatibility of the remaining s1 and s2.\n    # Let's loop through all s1 and s2.\n    for i in range(left_length):\n        for j in range(i + 1, left_length):\n            s1 = left[i]\n            s2 = left[j]\n            if s1!= s2:\n                if s2 == '?':\n                    compatible_s1_s2.append((i, j))\n                elif s1 == '?':\n                    compatible_s1_s2.append((i, j))\n                else:\n                    if s2 == s1:\n                        compatible_s1_s2.append((i, j))\n    # Now, we know which s1 and s2 are compatible.\n    # We now have to check the compatibility of the remaining s1 and s2.\n    # Let's loop through all s1 and s2.\n    for i in range(left_length):\n        for j in range(i + 1, left_length):\n            s1 = left[i]\n            s2 = left[j]\n            if s1!= s2:\n                if s2 == '?':\n                    compatible_s1_s2.append((i, j))\n                elif s1 == '?':\n                    compatible_s1_s2.append((i, j))\n                else:\n                    if s2 == s1:\n                        compatible_s1_s2.append((i, j))\n\n    # The maximum number of compatible left and right pairs of boots is the length of the list compatible_s1_s2.\n    return len(compatible_s1_s2)",
        "test": "assert solution('hellocode') == 0",
        "num_ids": 3251
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n    mx = float('-inf')\n    left = []\n    right = []\n    for i in range(n):\n        mx = max(mx, arr[i])\n        left.append(arr[i])\n        right.append(arr[i])\n        for j in range(i + 1, n):\n            mx = max(mx, arr[i] + arr[j])\n            left.append(arr[i] + arr[j])\n            right.append(arr[i] + arr[j])\n\n    mx = float('-inf')\n    left = []\n    right = []\n    for i in range(n):\n        mx = max(mx, arr[i])\n        left.append(arr[i])\n        right.append(arr[i])\n        for j in range(i + 1, n):\n            mx = max(mx, arr[i] + arr[j])\n            left.append(arr[i] + arr[j])\n            right.append(arr[i] + arr[j])\n    left.sort()\n    right.sort(reverse=True)\n    ans = []\n    for i in range(n):\n        if left[i] == mx and right[i] == mx:\n            ans.append(i + 1)\n    print(len(ans))\n    for i in ans:\n        print(i, i)\n\n\ndef",
        "test": "assert solution(\"8 1 5 2 3 7 2 1 2\") == \"4\"",
        "num_ids": 2253
    },
    {
        "number": 4210,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    cnt = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            concat = str(a[i]) + str(a[j])\n            if int(concat) % k == 0:\n                cnt += 1\n    return cnt\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1380
    },
    {
        "number": 4211,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, *A = map(int, stdin.split('\\n'))\n    A = [0] + A\n    # build up the dynamic programming matrix\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = max(dp[i-1]+A[i], A[i])\n    # return the result\n    return str(dp[n])\n",
        "test": "assert solution('1\\n2') == '2'",
        "num_ids": 1246
    },
    {
        "number": 4212,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 2349
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given an integer array A of size N. Return the maximum absolute difference of two elements in an array.\n    >>> solution(\"4\\n1 4 6 3\")\n    5\n    >>> solution(\"4\\n2 4 6 1\")\n    3\n    \"\"\"\n    n, *arr = map(int, stdin.split())\n    return max(b - a for a, b in zip(sorted(arr), sorted(arr)[1:]))\n",
        "test": "assert solution(test_input) == test_output",
        "num_ids": 1411
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split(\"\\n\")\n    print(stdin)\n    n = int(stdin[0])\n    d = {stdin[i]: [int(stdin[i + 1]), int(stdin[i + 2])] for i in range(1, len(stdin) - 1, 2)}\n    print(d)\n    s = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            x = d[f\"{i}\"][0] - d[f\"{j}\"][0]\n            y = d[f\"{i}\"][1] - d[f\"{j}\"][1]\n            s += math.sqrt(x * x + y * y)\n    print(s / (n * (n - 1) / 2))\n",
        "test": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'",
        "num_ids": 1881
    },
    {
        "number": 4215,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(b - a, 0))",
        "test": "assert solution(\"6 6\") == '0'",
        "num_ids": 515
    },
    {
        "number": 4216,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    return n\n",
        "test": "assert solution(\"1\") == '1'",
        "num_ids": 1223
    },
    {
        "number": 4217,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, m = list(map(int, input[0].split()))\n    foods = []\n    for i in range(1, m + 1):\n        foods.append(list(map(int, input[i].split())))\n    answer = 0\n    for i in range(n):\n        food_i = set()\n        for j in range(m):\n            food_i.add(foods[j][i])\n        answer += len(food_i) - 1\n    return str(answer)",
        "test": "assert solution('2 2\\n1 2\\n2 1') == '2'",
        "num_ids": 1555
    },
    {
        "number": 4218,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_prob = 0\n    for i in range(1, N+1):\n        if i % 2 == 1:\n            odd_prob += 1\n    return str(odd_prob/N)",
        "test": "assert solution('4\\n') == '0.5'",
        "num_ids": 1000
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    testimony = []\n    for line in stdin.split('\\n'):\n        if line == '':\n            break\n        if line[0] == ':':\n            continue\n        line = line.split()\n        testimony.append(line)\n    testimony = list(map(lambda x: (int(x[0]), int(x[1])), testimony))\n    testimony.sort(key=lambda x: x[1])\n    ans = 0\n    idx = 0\n    while idx < len(testimony) and testimony[idx][1] == 1:\n        ans += 1\n        idx += 1\n    while idx < len(testimony) and testimony[idx][1] == 0:\n        ans += 1\n        idx += 1\n    return str(ans)\n",
        "test": "assert solution(\": 1 1\") == \"2\"",
        "num_ids": 1146
    },
    {
        "number": 4220,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution(\"edifice\") == \"edifice\"",
        "num_ids": 955
    },
    {
        "number": 4221,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + (\"es\" if stdin[-1] =='s' else \"s\")\n",
        "test": "assert solution(\"apple\") == \"apples\"",
        "num_ids": 448
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    snakes = []\n    for i in range(k):\n        snakes.append(list(map(int, stdin.split())))\n    snakes.sort(key=lambda x: x[0])\n    snacks = list(map(lambda x: x[1:], snakes))\n    \n    result = 0\n    for snack in snacks:\n        if len(snack) == 1:\n            result += 1\n            continue\n        \n        target = max(snack)\n        snack.remove(target)\n        if target in snack:\n            result += 1\n    return result\n\"\"\"\n",
        "test": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"",
        "num_ids": 1567
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    slimes = stdin.split('\\n')\n    length = len(slimes)\n    while length > 1:\n        slimes.pop(0)\n        slimes.append('')\n        length -= 1\n    print(slimes)\n    return slimes\n",
        "test": "assert solution(\"10\\naabbbbaaca\") == \"5\"",
        "num_ids": 909
    },
    {
        "number": 4224,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    a_set = set()\n    for ai in a:\n        ai_set = set()\n        for i in range(1, ai + 1):\n            ai_set.add(ai // i)\n        a_set = a_set.union(ai_set)\n    return len(a_set)\n",
        "test": "assert solution('5 2 4\\n') == 3",
        "num_ids": 2024
    },
    {
        "number": 4225,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    # if K == A + B + C:\n    #     return str(A * B * C)\n    # elif K == 0:\n    #     return str(0)\n    # elif K == 1:\n    #     return str(max(A, B, C))\n    # else:\n    #     return str(K * max(A, B, C))\n    # if K == A + B + C:\n    #     return str(A * B * C)\n    # elif K == 0:\n    #     return str(0)\n    # elif K == 1:\n    #     return str(max(A, B, C))\n    # else:\n    #     return str(K * max(A, B, C))\n    if K == A + B + C:\n        return str(A * B * C)\n    elif K == 0:\n        return str(0)\n    elif K == 1:\n        return str(max(A, B, C))\n    else:\n        return str(K * max(A, B, C))",
        "test": "assert solution(\"0 0 0 0\") == \"0\"",
        "num_ids": 1844
    },
    {
        "number": 4226,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split(' '))\n    return 'Yes' if (Y // 2 >= X) else 'No'\n",
        "test": "assert solution(\"5 4\\n\") == \"No\"",
        "num_ids": 1207
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"Hello, world!\"\n\ndef",
        "test": "assert solution('''3 3",
        "num_ids": 2060
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, l = stdin.split()\n    n, l = int(n), int(l)\n    flavors = []\n    for i in range(n):\n        flavors.append(int(input()) + i)\n    flavors.sort()\n    sum = 0\n    for i in range(n - 1):\n        sum += flavors[i]\n    print(sum)\n",
        "test": "assert solution('5 2') == '18'",
        "num_ids": 1512
    },
    {
        "number": 4229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum = 0\n    for i in range(1, N+1):\n        if i%3 == 0 and i%5 == 0:\n            sum += i\n        elif i%3 == 0:\n            sum += i\n        elif i%5 == 0:\n            sum += i\n        else:\n            sum += i\n    return sum\n",
        "test": "assert solution('''10''') == 55",
        "num_ids": 1000
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum absolute difference.\n\n    >>> solution(\"6 5\\n4 7 10 6 5\")\n    8\n    >>> solution(\"4 7\\n4 7 10 6 5\")\n    0\n    >>> solution(\"1 2\\n4 7 10 6 5\")\n    0\n    \"\"\"\n    X, N = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()[1:]))\n    X_nearest = min(sequence, key=lambda x: abs(x - X))\n    return X_nearest\n",
        "test": "assert solution('4 7 10 6 5\\n') == 8",
        "num_ids": 1472
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split(\" \"))\n    h, w = map(int, stdin.split(\" \"))\n\n    return str(min(H-h, H-h+W-w))\n\nprint(solution(input()))\n",
        "test": "assert solution('3 2\\n2 1') == '1'",
        "num_ids": 1084
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for this problem.\n\n    :param stdin: standard input\n    :return: standard output\n    \"\"\"\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    if k == 0 or k == n:\n        print(seq[k - 1])\n    elif n == 1:\n        print(-1)\n    else:\n        ans = 10 ** 9\n        for i in range(n):\n            if seq[i] <= ans:\n                ans = seq[i]\n        print(ans)\n",
        "test": "assert solution(str(input())) == str(solution_2(str(input())))",
        "num_ids": 1079
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = map(int, stdin.split('\\n')[0].split(' '))\n    table = []\n    for i in range(n):\n        table.append(list(stdin.split('\\n')[i + 1]))\n\n    def search_way(row, col, table):\n        def is_safe(row, col, table, star):\n            if row + star >= n or col + star >= m:\n                return False\n\n            for i in range(row, row + star):\n                if table[i][col] == '*':\n                    return False\n\n            for i in range(col, col + star):\n                if table[row][i] == '*':\n                    return False\n\n            return True\n\n        def find_stars(row, col, table):\n            if row + star >= n or col + star >= m:\n                return []\n            for i in range(row, row + star):\n                if table[i][col] == '*':\n                    return []\n\n            for i in range(col, col + star):\n                if table[row][i] == '*':\n                    return []\n\n            return [[row, col]]\n\n        def go_top(row, col, star, table):\n            if not is_safe(row, col, table, star):\n                return []\n\n            result = []\n            for i in range(star):\n                result += find_stars(row, col + i, table)\n\n            return result\n\n        def go_bottom(row, col, star, table):\n            if not is_safe(row, col, table, star):\n                return []\n\n            result = []\n            for i in range(star):\n                result += find_stars(row + star, col + i, table)\n\n            return result\n\n        def go_left(row, col, star, table):\n            if not is_safe(row, col, table, star):\n                return []\n\n            result = []\n            for i in range(star):\n                result += find_stars(row + i, col, table)\n\n            return result\n\n        def go_right(row, col, star, table):\n            if not is_safe(row, col, table, star):\n                return []\n\n            result = []\n            for i in range(star):\n                result += find_stars(row + i, col + star, table)\n\n            return result\n\n        max_row = len(table)\n        max_col = len(table[0])\n        max_star = max(max_row, max_col)\n        result = []\n        for star in range(1, max_star + 1):\n            result += go_top(row, col, star, table)\n            result += go_bottom(row, col, star, table)\n            result += go_left(row, col, star, table)\n            result += go_right(row, col, star, table)\n\n        return result\n\n    for row in range(n):\n        for col in range(m):\n            if table[row][col] == '*':\n                table[row][col] = search_way(row, col, table)\n                if len(table[row][col]) == 0:\n                    return \"-1\"\n\n    stars_count = 0\n    for row in range(n):\n        for col in range(m):\n            for star in table[row][col]:\n                stars_count += 1\n\n    return str(stars_count)\n\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"3 3\\n***\\n.*\\n.*\\n.*\") == \"-1\"",
        "num_ids": 4358
    },
    {
        "number": 4234,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "def solution(stdin: str) -> str:\n    len_stdin = len(stdin)\n    mid = int(len_stdin/2)\n    i = 0\n    bad = \"\"\n    good = \"\"\n\n    while(i < mid):\n        bad += stdin[i]\n        good += stdin[mid + i]\n        i += 1\n    \n    bad_s = set(bad)\n    good_s = set(good)\n    bad_count = len(bad_s)\n    good_count = len(good_s)\n\n    if(bad_count > good_count):\n        result = bad_count - good_count\n        return result\n    \n    return good_count - bad_count\n    ",
        "test": "assert solution('good') == 0",
        "num_ids": 1583
    },
    {
        "number": 4235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # put your python code here\n    return 'YES'\n",
        "test": "assert solution('') == 'YES'",
        "num_ids": 1061
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n",
        "test": "assert solution(\"5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n2 2\\n1 3\\n2 4\") == \"0\\n1\\n2\\n3\\n4\\n\"",
        "num_ids": 1840
    },
    {
        "number": 4237,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = []\n    for i in range(a, b+1):\n        if i % c == 0 or i % d == 0:\n            continue\n        x.append(i)\n    return str(len(x))\n",
        "test": "assert solution('4 9 2 3') == '2'",
        "num_ids": 854
    },
    {
        "number": 4238,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Write your code here\n    # stdin = stdin.strip()\n    if len(stdin) > 0 and len(stdin) < 1000000:\n        if int(stdin) % 9 == 0:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "num_ids": 648
    },
    {
        "number": 4239,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = [1, 6, 36, 81]\n    count = 0\n    while True:\n        for i in range(4):\n            if N == 0:\n                break\n            elif N % l[i] == 0:\n                N -= l[i]\n                count += 1\n            else:\n                break\n        if N == 0:\n            break\n        for i in range(4):\n            if N == 0:\n                break\n            elif N % l[i] == 0:\n                N -= l[i]\n                count += 1\n            else:\n                break\n    return str(count)\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 1054
    },
    {
        "number": 4240,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Complete solution\n    return \"Yes\"",
        "test": "assert solution(\"kyoto\") == \"Yes\"",
        "num_ids": 918
    },
    {
        "number": 4241,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[0]\n    pattern = stdin[1]\n    change = 0\n    for i in range(len(string)):\n        if string[i]!= pattern[i % len(pattern)]:\n            change += 1\n    return change",
        "test": "assert solution('cabacc') == 1",
        "num_ids": 702
    },
    {
        "number": 4242,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    # possible_divisor = set()\n    # for i in range(1, a + 1):\n    #     if a % i == 0 and b % i == 0:\n    #         possible_divisor.add(i)\n    # possible_divisor.remove(1)\n    # if len(possible_divisor) >= k:\n    #     return str(list(possible_divisor)[-k])\n    # else:\n    #     return str(list(possible_divisor)[-1])\n\n    # Another solution using bisect.bisect_left\n    # Please use bisect.bisect_left\n    # because the numbers in the list may have duplicates.\n    from bisect import bisect_left\n    possible_divisor = set()\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            possible_divisor.add(i)\n    possible_divisor.remove(1)\n    return str(list(possible_divisor)[-k])\n",
        "test": "assert solution(\"8 12 2\") == \"2\"",
        "num_ids": 1153
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    return str(max(0, 2020 - (1000 * len(str(X)) + 5 * sum(int(n) for n in str(X) if n in ['5', '0', '1', '2', '3', '4']))))\n\"\"\"\n\n\"\"\"\nfor testing purpose\nprint(solution(\"1024\"))\n\"\"\"",
        "test": "assert solution(\"1024\") == \"2020\"",
        "num_ids": 1167
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n\n------Solution------\n\"\"\"",
        "test": "assert solution('3 1 2\\n') == 5",
        "num_ids": 1006
    },
    {
        "number": 4245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(b - 1) if a * b % 2 == 0 else str(b)\n",
        "test": "assert solution('2 3') == '2'",
        "num_ids": 646
    },
    {
        "number": 4246,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    sunny_weather = stdin.count('S')\n    cloudy_weather = stdin.count('C')\n    rainy_weather = stdin.count('R')\n    return str(sunny_weather + rainy_weather)",
        "test": "assert solution(\"CSC\") == \"1\"",
        "num_ids": 1091
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the provided input.\n    \"\"\"\n    # your solution here\n    return'sample solution'",
        "test": "assert solution('5\\n1 3 5 4 2') == '2'",
        "num_ids": 1074
    },
    {
        "number": 4248,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 3825
    },
    {
        "number": 4249,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 8\n   ... 2 3 1 1 2\n   ... ''')\n    '4'\n\n    >>> solution('''7 10\n   ... 5 5 5 5 5\n   ... ''')\n    '2'\n\n    >>> solution('''5 15\n   ... 5 5 5 5 5\n   ... ''')\n    '-1'\n\n    >>> solution('''5 26\n   ... 5 5 5 5 5\n   ... ''')\n    '2'\n    \"\"\"\n    num_cups = int(stdin.split('\\n')[0].split()[0])\n    coffee_dosage = [int(i) for i in stdin.split('\\n')[0].split()[1:]]\n\n    if num_cups == 1:\n        return '1'\n\n    max_caffeine_usage = 0\n    max_caffeine_usage_day = 0\n    caffeine_usage_days = []\n    for i in range(num_cups):\n        caffeine_usage = 0\n        for j in range(i):\n            caffeine_usage += coffee_dosage[j]\n        caffeine_usage += coffee_dosage[i]\n        caffeine_usage_days.append(caffeine_usage)\n        if caffeine_usage > max_caffeine_usage:\n            max_caffeine_usage = caffeine_usage\n            max_caffeine_usage_day = i\n\n    for i in range(max_caffeine_usage_day + 1, num_cups):\n        if caffeine_usage_days[i] <= caffeine_usage_days[i - 1]:\n            return '-1'\n\n    return str(num_cups - max_caffeine_usage_day)\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 2011
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n\"\"\"",
        "test": "assert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'",
        "num_ids": 1995
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in stdin.split('\\n')[i + 1].split(' ')])\n    def check(order):\n        prev = 0\n        k = 0\n        for i in range(m):\n            for j in range(n):\n                if j!= order[i]:\n                    if abs(a[order[i]][i] - a[j][i]) >= k:\n                        return False\n                    else:\n                        k = max(k, abs(a[order[i]][i] - a[j][i]))\n            k = 0\n        return True\n    def permutations(arr, visited, k):\n        if k == 0:\n            if check(visited):\n                return\n        if k == 1:\n            for i in range(n):\n                visited[i] = i\n                permutations(arr, visited, k)\n                visited[i] = -1\n        if k > 1:\n            for i in range(n):\n                if visited[i]!= -1:\n                    visited[i] = i\n                    permutations(arr, visited, k - 1)\n                    visited[i] = -1\n    permutations([-1] * n, [-1] * n, m)\n    return '\\n'.join([str(k) for k in ks])\n\n\n\n'''",
        "test": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'",
        "num_ids": 1909
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin.replace(\"xxxx\", \"\")",
        "test": "assert solution(7, 'xxxxx') == 1",
        "num_ids": 697
    },
    {
        "number": 4253,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * (r ** 2))\n",
        "test": "assert solution('4') == '48'",
        "num_ids": 397
    },
    {
        "number": 4254,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the string \"safe\" if the number of wolves is less than that of sheep, and \"unsafe\" if the number of wolves is greater than or equal to that of sheep.\n    \"\"\"\n    S, W = (int(n) for n in stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    return \"safe\"\n\n\"\"\"\nS = 4\nW = 5\nS = 4, W = 5\n\nW = 5 >= S = 4\nW = 5 < S = 4\nunsafe\n\"\"\"\n",
        "test": "assert solution(\"4 5\") == \"unsafe\"",
        "num_ids": 889
    },
    {
        "number": 4255,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    side_a, side_b, side_c = map(int, stdin.split())\n    sides = sorted([side_a, side_b, side_c])\n    if sides[0] == sides[1]:\n        return str(0)\n    else:\n        return str((sides[0] * sides[1]) // 2)\n",
        "test": "assert solution(\"1 1 1\") == \"0\"",
        "num_ids": 904
    },
    {
        "number": 4256,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split(' ')]\n    return str(math.ceil(B/A)-math.ceil(C/A))",
        "test": "assert solution(\"2 11 4\") == \"4\"",
        "num_ids": 544
    },
    {
        "number": 4257,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a * b)\n",
        "test": "assert solution('2 5\\n') == '10'",
        "num_ids": 605
    },
    {
        "number": 4258,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(B * (T // A))\n",
        "test": "assert solution(\"3 5 7\") == \"10\"",
        "num_ids": 882
    },
    {
        "number": 4259,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    # k is the distance needed to be multiplied to get a carry distance\n    # a and b are the boundaries of carry distance\n\n    if not k % 2:\n        for i in range(a, b + 1):\n            if i % k == 0:\n                print('OK')\n                return 'OK'\n        print('NG')\n        return 'NG'\n    else:\n        for i in range(a, b + 1, 2):\n            if i % k == 0:\n                print('OK')\n                return 'OK'\n        print('NG')\n        return 'NG'",
        "test": "assert solution(\"7 500 600\") == \"OK\"",
        "num_ids": 1044
    },
    {
        "number": 4260,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split(' '))\n    return str(t / x)\n",
        "test": "assert solution('1 2') == '0.5'",
        "num_ids": 537
    },
    {
        "number": 4261,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split(' ')))\n    bottle_1 = input_list[0]\n    bottle_2 = input_list[1]\n    bottle_3 = input_list[2]\n    amount_of_water_bottle_2 = min(bottle_1, bottle_2)\n    amount_of_water_bottle_1 = max(bottle_1, bottle_2, bottle_3) - amount_of_water_bottle_2\n    if amount_of_water_bottle_1 == 0:\n        return '0'\n    else:\n        return str(amount_of_water_bottle_2)\n    \n",
        "test": "assert solution('1 1 1') == '0'",
        "num_ids": 1193
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('''",
        "num_ids": 1278
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Replace pass above with your code\n    return None\n",
        "test": "assert solution(\"ATCODER\") == 3",
        "num_ids": 646
    },
    {
        "number": 4264,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of positive integers less than or equal to N that have an odd number of digits (in base ten without leading zeros).\"\"\"\n    n = int(stdin)\n    if n > 10 ** 5:\n        return '10^5'\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 568
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1]\n    S_list = list(S)\n    T_list = list(T)\n    count = 0\n    \n    for i in range(len(S)):\n        if S_list[i]!= T_list[i]:\n            S_list[i] = T_list[i]\n            count += 1\n    return count\n",
        "test": "assert solution(\"cupofhottea\") == \"cuhtohottea\"",
        "num_ids": 1310
    },
    {
        "number": 4266,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    K, X = [int(x) for x in stdin.split(' ')]\n    x = []\n    for i in range(K, X+1):\n        x.append(i)\n    return''.join(str(i) for i in x)\n",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 941
    },
    {
        "number": 4267,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution('25') == 'No'",
        "num_ids": 530
    },
    {
        "number": 4268,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 1117
    },
    {
        "number": 4269,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    security_code = stdin\n    if len(security_code)!= 4:\n        return 'Bad'\n    if security_code[0] == security_code[1] or security_code[0] == security_code[2] or security_code[0] == security_code[3] \\\n            or security_code[1] == security_code[2] or security_code[1] == security_code[3] or security_code[2] == security_code[3]:\n        return 'Bad'\n    return 'Good'",
        "test": "assert solution(\"1234\") == \"Good\"",
        "num_ids": 965
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    print(int(a[0]) // 2)\n\n    return ''\n",
        "test": "assert solution(\"3\\n4\") == '3.5'",
        "num_ids": 1158
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # The input format is as follows:\n    # The first line contains N, the number of distinct dishes.\n    # The next N lines contain the dish IDs (D_i) and the integer values (A_i) of each dish.\n    # The next N lines contain the satisfaction values for each day (B_i) and (C_i).\n    pass\n",
        "test": "assert solution(\"3 1 2\") == 14",
        "num_ids": 1032
    },
    {
        "number": 4272,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    sub_len = 3\n    sub_str = 'ABC'\n    \n    sub_count = 0\n    \n    for i in range(len(input_str) - sub_len + 1):\n        if input_str[i:i+sub_len] == sub_str:\n            sub_count += 1\n    \n    return sub_count\n    ",
        "test": "assert solution(\"ZABCDBABCQ\") == 2",
        "num_ids": 1265
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # input number of people\n    n = int(stdin[0].strip())\n    # input the names\n    names = stdin[1:]\n    # add the name to the array\n    nameSet = set()\n    for name in names:\n        if name in nameSet:\n            return 0\n        nameSet.add(name)\n    # return the answer\n    return n * (n - 1) * (n - 2) // 6",
        "test": "assert solution(stub2) == \"expected_result\"",
        "num_ids": 5188
    },
    {
        "number": 4274,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    # get values from the standard input\n    n, m = list(map(int, stdin.split()))\n    \n    # check whether the test cases have passed, if m is equal to n, then it has passed all of them.\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('3 3') == 'Yes'",
        "num_ids": 1227
    },
    {
        "number": 4275,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 6:\n        return 'No'\n    if s[2] == s[4]:\n        if s[1] == s[5]:\n            return 'Yes'\n    return 'No'\n",
        "test": "assert solution(\"rndrndrndrnd\") == \"No\"",
        "num_ids": 765
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    _, T = stdin.split(' ')\n    T = int(T)\n    R = []\n    for route in range(int(stdin.split('\\n')[0])):\n        route_cost, route_time = stdin.split('\\n')[route + 1].split(' ')\n        route_cost = int(route_cost)\n        route_time = int(route_time)\n        R.append(tuple([route_cost, route_time]))\n\n    R = sorted(R, key=lambda x: x[1], reverse=True)\n    total_cost = 0\n    for route in R:\n        total_cost += route[0]\n        if T < route[1]:\n            return 'TLE'\n        elif T == route[1]:\n            return total_cost\n",
        "test": "assert solution(\"7 60\\n1 80\\n4 50\") == \"4\"",
        "num_ids": 1705
    },
    {
        "number": 4277,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(min(A * N, B * (N // 2) + (N % 2 * A)))\n",
        "test": "assert solution('1 0 0') == '0'",
        "num_ids": 620
    },
    {
        "number": 4278,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # my solution:\n    return 1\n",
        "test": "assert solution('acornistnt') == 1",
        "num_ids": 1287
    },
    {
        "number": 4279,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 2077
    },
    {
        "number": 4280,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 4415
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(min_occ, max_occ)\n\nimport sys\n\nn = int(sys.stdin.readline())\nnums = [int(num) for num in sys.stdin.readline().split()]\nmin_occ, max_occ = sys.maxsize, -sys.maxsize\n\nfor i in range(n):\n    left, right = i - 1, i + 2\n    while left >= 0 and nums[left] > nums[i]:\n        left -= 1\n    while right < n and nums[right] > nums[i]:\n        right += 1\n    min_occ = min(min_occ, left + 1 + right - i)\n    max_occ = max(max_occ, left + 1 + right - i)\nprint(min_occ, max_occ)\n\nimport sys\n\nn = int(sys.stdin.readline())\nnums = [int(num) for num in sys.stdin.readline().split()]\nmin_occ, max_occ = sys.maxsize, -sys.maxsize\n\nfor i in range(n):\n    left, right = i - 1, i + 2\n    while left >= 0 and nums[left] > nums[i]:\n        left -= 1\n    while right < n and nums[right] > nums[i]:\n        right += 1\n    min_occ = min(min_occ, left + 1 + right - i)\n    max_occ = max(max_occ, left + 1 + right - i)\n\nprint(min_occ, max_occ)\n\n\ndef",
        "test": "assert solution('7\\n4 3 7 1 4 3 3') == '3 6'",
        "num_ids": 1401
    },
    {
        "number": 4282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 1801
    },
    {
        "number": 4283,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    return str(1)",
        "test": "assert solution('1') == '1'",
        "num_ids": 4617
    },
    {
        "number": 4284,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()",
        "num_ids": 2939
    },
    {
        "number": 4285,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find number of \"abc\" substrings in string\n    \n    Parameters\n    ----------\n    stdin : str\n        string\n    \n    Returns\n    -------\n    str\n        number of \"abc\" substrings\n    \"\"\"\n    \n    s = stdin.replace('?', 'a')\n    cnt = 0\n    for i in range(len(s)):\n        if s[i:i+3] == 'abc':\n            cnt += 1\n    \n    return str(cnt)",
        "test": "assert solution(\"cccbbbaaa\") == \"0\"",
        "num_ids": 1242
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input:\n    int m, int n, int[n] a, int[m] b\n    output:\n    int, int[]\n    '''\n    m, n, a = map(int, stdin.split('\\n')[0].split())\n    b = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, m + 1)]\n    # \n    # dict of vertices\n    d = {x: set() for x in range(n)}\n    # dict of costs\n    c = {x: a[x] for x in range(n)}\n    # dict of special costs\n    s = {x: b[x][2] for x in range(m)}\n    # \n    d[b[0][0]].add(b[0][1])\n    #\n    # start from 0\n    q = [0]\n    #\n    # dict of [start, end]\n    st = {0: b[0]}\n    #\n    # dict of visited\n    v = {0: True}\n    #\n    # dict of [cost, path]\n    dc = {0: 0}\n    #\n    # run a loop while the queue is not empty\n    while q:\n        # pop out the first node\n        curr = q.pop(0)\n        #\n        # for each adjacent node\n        for nx in d[curr]:\n            #\n            # if not visited\n            if nx not in v:\n                #\n                # set visited\n                v[nx] = True\n                #\n                # add new node to queue\n                q.append(nx)\n                #\n                # add new cost to queue\n                dc[nx] = c[curr] + s[nx]\n                #\n                # add new [start, end] to queue\n                st[nx] = [curr, nx]\n    #\n    # return max cost and path\n    return max(dc.values()), dc[st[max(dc)][1]]\n    \n\nprint(solution(stdin))\n",
        "test": "assert solution(\"4 0\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"",
        "num_ids": 2290
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split(' '))\n    res = 0\n    while n > 0:\n        l, r = map(int, stdin.split(' '))\n        res += max(0, r - l)\n        n -= 1\n    while m > 0:\n        l, r = map(int, stdin.split(' '))\n        res += max(0, a - l) + max(0, a - r)\n        m -= 1\n    if res > 0:\n        return str(res)\n    return '-1'\n",
        "test": "assert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"",
        "num_ids": 3124
    },
    {
        "number": 4288,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split(' ')]\n    if a == c:\n        return 'Yes' if b!= c else 'No'\n    return 'No'",
        "test": "assert solution(\"5 6 7\") == \"No\"",
        "num_ids": 960
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, t, a = [int(num) for num in stdin.split('\\n')[:3]]\n    h = [int(num) for num in stdin.split('\\n')[3:]]\n    h.sort()\n    s = sorted([abs(t - num * 0.006) for num in h])\n    return str(h[s.index(min(s))])\n",
        "test": "assert solution(\"2 12 1000 2000\") == \"1\"",
        "num_ids": 1430
    },
    {
        "number": 4290,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    count = 0\n    \n    # choose 2n balls with even sum\n    # choose 2m balls with odd sum\n    # choose 2n+m balls with even sum\n    for i in range(2 * n):\n        for j in range(2 * m):\n            if 2 * i + j == 2 * n + 2 * m:\n                count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"2 1\") == \"1\"",
        "num_ids": 1183
    },
    {
        "number": 4291,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1192
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split(' ')))\n    Prices = list(map(int, stdin.split(' ')))\n    if K < 1 or K > N:\n        return 'WRONG INPUT'\n\n    KPrices = sorted(Prices, reverse=True)\n    minPrice = KPrices[0]\n    for i in range(1, N):\n        if KPrices[i] < minPrice:\n            minPrice = KPrices[i]\n            K -= 1\n\n    return sum(Prices) - minPrice * K",
        "test": "assert solution('5 3\\n50 100 80 120 80') == 210",
        "num_ids": 1062
    },
    {
        "number": 4293,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = stdin.split(\" \")\n    P, Q, R = int(P), int(Q), int(R)\n    return str(min(P + R, Q + P, R + Q))\n",
        "test": "assert solution('1 3 4') == '4'",
        "num_ids": 1036
    },
    {
        "number": 4294,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split(' '))\n    if x < a:\n        return '0'\n    else:\n        return '10'",
        "test": "assert solution('3 5\\n')!= '10\\n'",
        "num_ids": 675
    },
    {
        "number": 4295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    print(N - K)\n    return ''",
        "test": "assert solution(\"7 4\") == \"1\"",
        "num_ids": 709
    },
    {
        "number": 4296,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a + b + c >= 22:\n        return 'bust'\n    else:\n        return 'win'",
        "test": "assert solution('5 7 9') == \"win\"",
        "num_ids": 724
    },
    {
        "number": 4297,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    i = 1\n    while True:\n        if (i % 2 == 0) and (i % N == 0):\n            return i\n        i += 1\n        \n",
        "test": "assert solution(\"6\")!= \"2\"",
        "num_ids": 829
    },
    {
        "number": 4298,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    d, N = map(int, stdin.split())\n    result = (N - 1) // d + 1\n    return str(result)\n",
        "test": "assert solution('2 2\\n') == '1'",
        "num_ids": 2489
    },
    {
        "number": 4299,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000:\n        return 'hon' if n % 10 in {2, 4, 5, 7, 9} else 'pon' if n % 10 in {0, 1, 6, 8} else 'bon'",
        "test": "assert solution('16') == 'pon'",
        "num_ids": 682
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = [int(x) for x in stdin.split()]\n    return str(sum(\n        (x * y)\n        for i in range(N)\n        for j in range(i + 1, N)\n        if data[i] * data[j]\n    ))\n\n\ndef",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\"",
        "num_ids": 1231
    },
    {
        "number": 4301,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1706
    },
    {
        "number": 4302,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return str(a + b)",
        "test": "assert solution('5 4') == '9'",
        "num_ids": 765
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    num_of_candles: int = int(stdin)\n    candle_list: List[int] = [int(num) for num in stdin.split()]\n    candle_list.sort()\n    min_time: int = 0\n    k: int = 0\n\n    while k < num_of_candles:\n        for i in range(num_of_candles - k):\n            if candle_list[i] < candle_list[i + 1]:\n                min_time += candle_list[i + 1] - candle_list[i]\n                k += 1\n\n    return min_time\n",
        "test": "assert solution(",
        "num_ids": 920
    },
    {
        "number": 4304,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n    a, b = [int(s) for s in stdin.split(\" \")]\n    return str(max(0, (a - 1) // (b - a) + 1))\n",
        "test": "assert solution('8 13') == '2'",
        "num_ids": 609
    },
    {
        "number": 4305,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split(' '))\n    return str(H // A)",
        "test": "assert solution('1 1\\n') == '1'",
        "num_ids": 683
    },
    {
        "number": 4306,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 75 25 100\")\n    '50'\n    >>> solution(\"0 75 25 100 100\")\n    '100'\n    \"\"\"\n    t1, t2, t3, t4 = stdin.split(\" \")\n    return str(max(0, int(t4) - max(int(t1), int(t3))))\n",
        "test": "assert solution('''0 75 25 50''') == '25'",
        "num_ids": 2419
    },
    {
        "number": 4307,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # a: int, b: int, c: int, d: int, e: int, f: int, g: int\n    a, b, c, d, e, f, g = 1, 2, 3, 4, 5, 6, 7\n    print(a)\n    print(b)\n    print(c)\n    print(d)\n    print(e)\n    print(f)\n    print(g)\n    return '0'\n",
        "test": "assert solution('0') == '0'",
        "num_ids": 1052
    },
    {
        "number": 4308,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, K = map(int, stdin.split())\n    return str(max(N // K - min(N // K, K - N % K), N % K))\n",
        "test": "assert solution(\"7 3\") == \"1\"",
        "num_ids": 906
    },
    {
        "number": 4309,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    def is_same_base(base_str: str) -> bool:\n        return base_str == ''.join(sorted(base_str))\n\n    N = int(stdin)\n    n = 1\n    while True:\n        if is_same_base(str(n)):\n            return str(n)\n        n += 1\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 719
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    task_length = list(map(int, stdin.split(\" \")))\n    tasks = list(map(int, stdin.split(\" \")))\n    n = len(tasks)\n    mem = [0 for i in range(n)]\n    mem[0] = tasks[0]\n    for i in range(1, n):\n        mem[i] = mem[i - 1] + abs(tasks[i] - tasks[i - 1])\n    return mem[n - 1]\n    return result\n",
        "test": "assert solution(\"1 6 3\") == \"5\"",
        "num_ids": 1279
    },
    {
        "number": 4311,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    result = 0\n    while result!= s:\n        result = (result + 1) if (result % 2 == 0) else (3 * result + 1)\n    return str(result)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 2534
    },
    {
        "number": 4312,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    if a <= 0 or b <= 0 or c <= 0 or d <= 0:\n        return \"No\"\n    elif a > b or c > d:\n        return \"No\"\n    elif (a + b) > (c + d):\n        return \"No\"\n    else:\n        return \"Yes\"\n    return \"\"\n",
        "test": "assert solution(\"10 10 10 10\") == \"Yes\"",
        "num_ids": 1537
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N: number of gems\n    V: values of gems\n    C: costs of gems\n    return the maximum possible value of X - Y\n    '''\n    N, *V, C = [int(x) for x in stdin.split()]\n    V = list(zip(V[::2], V[1::2]))\n    C = list(zip(C[::2], C[1::2]))\n    V = list(map(sum, V))\n    C = list(map(sum, C))\n    d = {}\n    for i in range(N):\n        if C[i] not in d:\n            d[C[i]] = [(i, V[i])]\n        else:\n            d[C[i]].append((i, V[i]))\n    d = dict(sorted(d.items(), key=lambda x: x[0], reverse=True))\n    l = []\n    for k, v in d.items():\n        for i in v:\n            l.append(i)\n    s = set()\n    l = sorted(l, key=lambda x: x[1], reverse=True)\n    k = sum(V)\n    for i in l:\n        if i[0] not in s:\n            k -= i[1]\n            s.add(i[0])\n            if k <= 0:\n                return i[1]\n    return 0\n\n\ndef",
        "test": "assert solution('3\\n10 2 5\\n6 3 4') == '5'",
        "num_ids": 2260
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingYB8KL8-B6J/\n    \"\"\"\n    pass\n",
        "test": "assert solution('''4 4",
        "num_ids": 4102
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin.readline())\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412736066689330133739800015155273469493278749319576274932505604984564309749462392241317996758978437866603684231681714639441849746835278600267528506447371745606253\n    return str(2*pi*radius)\n",
        "test": "assert solution(\"10\") == \"62.831853071795862\"",
        "num_ids": 708
    },
    {
        "number": 4316,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    char_count = {}\n    for char in S:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    char_count_list = list(char_count.items())\n    char_count_list = sorted(char_count_list, key=lambda x: x[1])\n    if char_count_list[0][1] == 2 and char_count_list[1][1] == 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"HJAS\") == \"No\"",
        "num_ids": 1151
    },
    {
        "number": 4317,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(max(a + b, a - b, a * b))",
        "test": "assert solution('0 0') == '0'",
        "num_ids": 666
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution(\"4\\n6 5 6 8\") == \"3\"",
        "num_ids": 814
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a sequence of integers Tanya climbs, the i-th integer represents the number of steps in the i-th stairway.\n    How many stairways did she climb? Output the number of steps in each stairway.\"\"\"\n    # Build a dictionary of number of steps: number of ways\n    steps_dict = {1: 1}\n    # First number\n    steps_dict[stdin[0]] = 1\n    # Next numbers\n    for number in stdin[1:]:\n        steps_dict[number] = number * steps_dict[number - 1]\n    # Return number of ways\n    return steps_dict[max(steps_dict.keys())]\n\n\ndef",
        "test": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"",
        "num_ids": 2556
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    return str(n - 1)\n",
        "test": "assert solution(\"9\\n999999999\") == \"999999999\"",
        "num_ids": 2440
    },
    {
        "number": 4321,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef",
        "test": "assert solution('5123 43') == '5122'",
        "num_ids": 923
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, a: List[int]):\n        a.sort()\n        i, j = 0, n - 1\n        cnt = 0\n        while i < j:\n            if abs(a[i] - a[j]) > 1:\n                return -1\n            cnt += 1\n            i += 1\n            j -= 1\n        return cnt\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    print(solve(n, a))\n    return \"\"\n",
        "test": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"",
        "num_ids": 2759
    },
    {
        "number": 4323,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of songs Ivan needs to compress in such a way that all his songs fit on the flash drive (i.e. the sum of their sizes is less than or equal to $m$).\n    \"\"\"\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1825
    },
    {
        "number": 4324,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    return 'tleelte'\n",
        "test": "assert solution(\"4 5 3\") == \"tleelte\"",
        "num_ids": 2622
    },
    {
        "number": 4325,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = list(map(int, stdin.split('\\n')[0].split()))\n    return str(N + T - 1)\n",
        "test": "assert solution(\"2 10 5\") == \"6\"",
        "num_ids": 759
    },
    {
        "number": 4326,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n",
        "test": "assert solution(\"5\\n1\\n1\\n1\\n1\") == \"1\"",
        "num_ids": 530
    },
    {
        "number": 4327,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    A, P = list(map(int, stdin.split(\" \")))\n    return str(int(P / 3 + P // 2 + (A - P % 3) // 3))\n",
        "test": "assert solution('4 4\\n') == '4'",
        "num_ids": 1049
    },
    {
        "number": 4328,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = map(int, stdin.split(' '))\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)\n",
        "test": "assert solution('4 12\\n') == '16'",
        "num_ids": 837
    },
    {
        "number": 4329,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split('\\n')[0]\n    t = s + s[-1]\n    return 'Yes' if s == t else 'No'\n",
        "test": "assert solution('ab') == 'No'",
        "num_ids": 1070
    },
    {
        "number": 4330,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    if abs(A - B) % 2 == 0:\n        if A < B:\n            return str(A + (B - A) // 2)\n        else:\n            return str(A - (A - B) // 2)\n    return \"IMPOSSIBLE\"\n",
        "test": "assert solution('2 17') == 'IMPOSSIBLE'",
        "num_ids": 737
    },
    {
        "number": 4331,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    last_digit = number % 10\n    first_two_digits = number // 10\n\n    if last_digit == 7:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution('1') == 'No'",
        "num_ids": 609
    },
    {
        "number": 4332,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n //= 10\n    return \"Yes\" if n == 0 or n % s == 0 else \"No\"\n",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 1049
    },
    {
        "number": 4333,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = x2, y1, x1, y2\n    return f\"{x3} {y3} {x4} {y4}\"\n",
        "test": "assert solution('1 0 1 0') == '1 0 1 0'",
        "num_ids": 1378
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    A, B = map(int, stdin.split())\n    return f'{A-B} {B}'\n",
        "test": "assert solution(\"red blue\", \"blue red\") == \"0 0\"",
        "num_ids": 1034
    },
    {
        "number": 4335,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin + stdin else \"No\"",
        "test": "assert solution('abcabcabccba') == 'No'",
        "num_ids": 975
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(float, stdin.split())\n    if W <= 0 or H <= 0:\n        return 0\n    if x >= W or y >= H:\n        return 0\n    if x == 0:\n        return round(H * W / 2, 9)\n    if y == 0:\n        return round(H * W, 9)\n    if x == W:\n        return round(W * H / 2, 9)\n    if y == H:\n        return round(W * H, 9)\n    if (W - x) * (H - y) == 0:\n        return round(W * H, 9)\n    return max(W - x, x - 0) * max(H - y, y - 0)\n",
        "test": "assert solution(\"2 3 1 2\") == '3.000000 0'",
        "num_ids": 3997
    },
    {
        "number": 4337,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    return 'Four' if stdin.count('Y') == 3 else 'Three'\n",
        "test": "assert solution(\"G W Y P Y W P\") == \"Three\"",
        "num_ids": 1513
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    return '{0}\\n{1}'.format(stdin)\n\n\n\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"5 5 6\\n1 2 6 10 3\") == 2",
        "num_ids": 773
    },
    {
        "number": 4339,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(0)\n",
        "test": "assert solution('4\\n1 3 2 4\\n1 3 2 4') == '0'",
        "num_ids": 1318
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"",
        "num_ids": 620
    },
    {
        "number": 4341,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1760
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_helper(stdin))\n\n\ndef",
        "test": "assert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"",
        "num_ids": 1538
    },
    {
        "number": 4343,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    \"Write your solution here\"\n    stdin = sorted(stdin)\n    return stdin[int(len(stdin)/2)]",
        "test": "assert solution('\\n') == '\\n'",
        "num_ids": 1400
    },
    {
        "number": 4344,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.split('\\n')\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    a = list(map(int, stdin[1].split()))\n    b = []\n    for i in range(k):\n        if len(a) <= k:\n            return 'NO'\n        b.append(a.index(min(a)))\n        b.append(a.index(max(a)))\n        a.remove(min(a))\n        a.remove(max(a))\n    b = set(b)\n    if len(b) == k:\n        return 'YES' +'' +''.join(map(str, b))\n    else:\n        return 'NO'\n",
        "test": "assert solution('5 4\\n15 13 15 15 12') == 'NO'",
        "num_ids": 1604
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds two non-overlapping sequences, which can split the sequence a.\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    j = n - 1\n    for i in range(n - 1, 0, -1):\n        if a[i] > a[i - 1]:\n            break\n    for i in range(j, 0, -1):\n        if a[i] < a[i - 1]:\n            break\n    if i > j:\n        return 'NO'\n    else:\n        return 'YES\\n' +''.join(map(lambda x: '1' if x == 0 else '0', a[i:j]))\n",
        "test": "assert solution(",
        "num_ids": 2654
    },
    {
        "number": 4346,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the number of lanterns that Vova can see during the path.\n    :param stdin: input string\n    :return: the number of lanterns that Vova can see during the path.\n    \"\"\"\n    _, v, l, r = map(int, stdin.split())\n    return str(sum(i % v for i in range(l, r + 1)))\n    pass",
        "test": "assert solution('10 2 3 7') == '3'",
        "num_ids": 1253
    },
    {
        "number": 4347,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution('') == ''",
        "num_ids": 614
    },
    {
        "number": 4348,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 2040
    },
    {
        "number": 4349,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1387
    },
    {
        "number": 4350,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n, m = map(int, stdin[0].split())\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin[i + 1])\n    seen = set()\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == \"*\":\n                if (i, j) not in seen:\n                    seen.add((i, j))\n                    count += 1\n                if i + 1 < n and matrix[i + 1][j] == \"*\":\n                    if (i + 1, j) not in seen:\n                        seen.add((i + 1, j))\n                        count += 1\n                if j + 1 < m and matrix[i][j + 1] == \"*\":\n                    if (i, j + 1) not in seen:\n                        seen.add((i, j + 1))\n                        count += 1\n                if i - 1 >= 0 and matrix[i - 1][j] == \"*\":\n                    if (i - 1, j) not in seen:\n                        seen.add((i - 1, j))\n                        count += 1\n                if j - 1 >= 0 and matrix[i][j - 1] == \"*\":\n                    if (i, j - 1) not in seen:\n                        seen.add((i, j - 1))\n                        count += 1\n    if count >= n * m:\n        return \"0\"\n    result = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == \"*\":\n                if i + 1 < n and matrix[i + 1][j] == \"*\":\n                    result.append(f\"{i + 1} {j} {2}\")\n                if j + 1 < m and matrix[i][j + 1] == \"*\":\n                    result.append(f\"{i} {j + 1} {2}\")\n                if i - 1 >= 0 and matrix[i - 1][j] == \"*\":\n                    result.append(f\"{i - 1} {j} {2}\")\n                if j - 1 >= 0 and matrix[i][j - 1] == \"*\":\n                    result.append(f\"{i} {j - 1} {2}\")\n    return \"-1\" if count < n * m else \"\\n\".join(result)\n",
        "test": "assert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"",
        "num_ids": 3208
    },
    {
        "number": 4351,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if str(stdin) == str(stdin)[::-1] else 'No'\n    \n",
        "test": "assert solution(\"18\") == \"No\"",
        "num_ids": 636
    },
    {
        "number": 4352,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    if A > B:\n        return 'Alice'\n    elif A < B:\n        return 'Bob'\n    return 'Draw'",
        "test": "assert solution('8 6') == 'Alice'",
        "num_ids": 988
    },
    {
        "number": 4353,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")\n",
        "test": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'",
        "num_ids": 610
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    def find(arr: list, x: int) -> int:\n        low, high = 0, len(arr)-1\n        while low <= high:\n            mid = low + (high - low) // 2\n            if arr[mid] <= x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return low\n\n    n, m = map(int, stdin.split('\\n')[0].split())\n    arr = []\n    for i in range(1, n+1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n        arr.append((a, b))\n    arr.append(tuple(map(int, stdin.split('\\n')[n+1].split())))\n    arr.append(tuple(map(int, stdin.split('\\n')[n+2].split())))\n    arr = sorted(arr, key=lambda x: x[0])\n    res = ''\n    for i in range(n):\n        temp = sorted(find(arr, arr[i+1][0] - arr[i][0])[1:])\n        for j in temp:\n            res += str(j) +''\n    return res\n\nprint(solution(stdin=input()))",
        "test": "assert solution(\"4 4\\n1 1\\n0 0\\n0 0\\n0 0\\n0 0\") == \"4\\n3\"",
        "num_ids": 2652
    },
    {
        "number": 4355,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)",
        "test": "assert solution(\"2\") == \"14\"",
        "num_ids": 2273
    },
    {
        "number": 4356,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    m, n = [int(i) for i in inputs[0].split(' ')]\n    a = inputs[1].split('\\n')\n    b = inputs[2].split('\\n')\n    \n    for i in range(n - m + 1):\n        for j in range(n - m + 1):\n            a_ = a[i:i+m]\n            b_ = b[j:j+m]\n            if len(a_)!= len(b_):\n                continue\n            if len(a_) == 1:\n                a_ = a_[0]\n                b_ = b_[0]\n                if a_ == b_:\n                    continue\n                else:\n                    return 'No'\n            for i, k in zip(a_, b_):\n                if i == k:\n                    continue\n                else:\n                    return 'No'\n    return 'Yes'\n",
        "test": "assert solution(\"3 2\\n#.\\n#.\\n#.\") == \"Yes\"",
        "num_ids": 2676
    },
    {
        "number": 4357,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    return str(max([a, b, c, a+b, a+c, b+c, a+b+c, a*b, a*c, b*c, a*b*c]))\n",
        "test": "assert solution('1 2 3') == '6'",
        "num_ids": 680
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    price = list(map(int, stdin.readline().split()))\n    price.sort()\n    # \uac00\uc7a5 \ud070 \uac12\uc744 \ub450 \ubc30\ub85c \ub098\ub208 \uac83\uc774 \uac00\uaca9\uc774 \ub418\ub294 \uac83\uc774\ub2e4.\n    # \uc774 \ub54c \uac00\uc7a5 \ud070 \uac12\uc740 \uac00\uc7a5 \uc544\ub798 \uc788\ub294 \uac12\uc774\ub2e4.\n    return (price[-1] * N + price[-1] // 2) * 2",
        "test": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"",
        "num_ids": 1442
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    # Get input\n    n_first_dish = int(stdin)\n    n_second_dish = int(stdin)\n    n_third_dish = int(stdin)\n    n_fourth_dish = int(stdin)\n    n_fifth_dish = int(stdin)\n\n    # Compute the first time orderable (10 * n_first_dish)\n    first_time_orderable = 10 * n_first_dish\n\n    # Compute the second time orderable (10 * n_second_dish)\n    second_time_orderable = 10 * n_second_dish\n\n    # Compute the third time orderable (10 * n_third_dish)\n    third_time_orderable = 10 * n_third_dish\n\n    # Compute the fourth time orderable (10 * n_fourth_dish)\n    fourth_time_orderable = 10 * n_fourth_dish\n\n    # Compute the fifth time orderable (10 * n_fifth_dish)\n    fifth_time_orderable = 10 * n_fifth_dish\n\n    # Compute the first time able\n    first_time_able = min(first_time_orderable, second_time_orderable, third_time_orderable, fourth_time_orderable, fifth_time_orderable)\n\n    # Compute the second time able\n    second_time_able = max(first_time_orderable, second_time_orderable, third_time_orderable, fourth_time_orderable, fifth_time_orderable)\n\n    # Compute the first time able\n    first_time_able = min(first_time_able, second_time_able, third_time_able, fourth_time_able, fifth_time_able)\n\n    # Return the first time able\n    return str(first_time_able)\n",
        "test": "assert solution(\"29 20 7 35 120\") == \"215\"",
        "num_ids": 4298
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = [int(x) for x in stdin.split('\\n')[1:]]\n    print(sum(1 / A[n] for n in range(N)) / sum(A))\n    return ''\n\"\"\"\n\n\"\"\"\ndef",
        "test": "assert solution(\"3\\n5 4 10\") == \"1.15\"",
        "num_ids": 926
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(",
        "num_ids": 1256
    },
    {
        "number": 4362,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        \"A\": \"a\",\n        \"B\": \"A\",\n        \"C\": \"b\",\n        \"D\": \"c\",\n        \"E\": \"d\",\n        \"F\": \"e\",\n        \"G\": \"f\",\n        \"H\": \"g\",\n        \"I\": \"h\",\n        \"J\": \"i\",\n        \"K\": \"j\",\n        \"L\": \"k\",\n        \"M\": \"l\",\n        \"N\": \"m\",\n        \"O\": \"n\",\n        \"P\": \"o\",\n        \"Q\": \"p\",\n        \"R\": \"q\",\n        \"S\": \"r\",\n        \"T\": \"s\",\n        \"U\": \"t\",\n        \"V\": \"u\",\n        \"W\": \"v\",\n        \"X\": \"x\",\n        \"Y\": \"y\",\n        \"Z\": \"z\",\n    }.get(stdin)\n",
        "test": "assert solution(\"A\") == \"a\"",
        "num_ids": 820
    },
    {
        "number": 4363,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    k, s = [int(c) for c in stdin.split(' ')]\n    if k < 2:\n        return '0'\n    ans = 0\n    for z in range(0, k + 1):\n        for y in range(0, k + 1 - z):\n            x = k - z - y\n            if x >= 0 and y >= 0 and z >= 0 and x + y + z == s:\n                ans += 1\n    return str(ans)\n",
        "test": "assert solution(\"3 10\") == \"0\"",
        "num_ids": 1609
    },
    {
        "number": 4364,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin='1905')\n    'YYMM'\n    >>> solution(stdin='1905-11')\n    'MMYY'\n    >>> solution(stdin='1905-11-17')\n    'AMBIGUOUS'\n    \"\"\"\n    try:\n        int(stdin)\n        return 'YYMM' if len(str(stdin)) == 4 else 'MMYY' if len(str(stdin)) == 6 else 'AMBIGUOUS' if len(str(stdin)) == 8 else 'NA'\n    except ValueError:\n        return 'NA'\n",
        "test": "assert solution('1905b') == 'NA'",
        "num_ids": 3352
    },
    {
        "number": 4365,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(stdin)",
        "test": "assert solution(\"2\") == \"2\"",
        "num_ids": 869
    },
    {
        "number": 4366,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n",
        "test": "assert solution('9 12\\n') == '21'",
        "num_ids": 1541
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    print(int(data[0]) + int(data[1]))\n",
        "test": "assert solution(input()) == output()",
        "num_ids": 704
    },
    {
        "number": 4368,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 1\n",
        "test": "assert solution('''2 4''') == 1",
        "num_ids": 510
    },
    {
        "number": 4369,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(int(stdin) / 2))\n",
        "test": "assert solution(\"5\") == \"3\"",
        "num_ids": 317
    },
    {
        "number": 4370,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split(' ')]\n    return \"Yay!\" if A + B < 17 else \":( A+B=%d\" % (A + B)\n",
        "test": "assert solution(\"4 5\") == \"Yay!\"",
        "num_ids": 2492
    },
    {
        "number": 4371,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(stdin)\n    for i in range(len(numbers)):\n        if numbers[i] == '9':\n            numbers[i] = '8'\n    return \"\".join(numbers)\n",
        "test": "assert solution('') == ''",
        "num_ids": 963
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    y, z = 0, 0\n    for i in range(n):\n        y, z = z, max(y, z) + a[i]\n    return y, z\n",
        "test": "assert solution(",
        "num_ids": 1256
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return one number.\"\"\"\n    pass\n",
        "test": "assert solution(\"3\\n1 1 1\\n\") == \"1\"",
        "num_ids": 1234
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"4 2\") == \"2\"",
        "num_ids": 3156
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a subset of vertices with the maximum total weight (the weight of the subset is the sum of weights of all vertices in it) such that there is no pair of vertices with the distance $k$ or less between them.\n    >>> solution(\"\"\"5 1\n   ... 1 2 3 4 5\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 3 5\n   ... \"\"\")\n    11\n    >>> solution(\"\"\"7 2\n   ... 2 1 2 1 2 1 1\n   ... 6 4\n   ... 1 5\n   ... 3 1\n   ... 2 3\n   ... 7 5\n   ... 7 4\n   ... \"\"\")\n    4\n    \"\"\"\n    n, k = [int(x) for x in stdin.splitlines()[0].split()]\n    edges = [tuple(int(y) for y in x.split()) for x in stdin.splitlines()[1:]]\n    graph = {x: set() for x in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    best = {x: 0 for x in range(1, n + 1)}\n    def dfs(node):\n        for child in graph[node]:\n            dfs(child)\n        best[node] = max(best[child] + a for child in graph[node]) if graph[node] else 0\n    dfs(1)\n    return max(best.values())",
        "test": "assert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'",
        "num_ids": 2322
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of room for every letter.\"\"\"\n    dormitories, letters = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    rooms.sort()\n    dormitory = {}\n    for index in range(dormitories):\n        dormitory[index + 1] = rooms[index * rooms_number:index * rooms_number + rooms_number]\n    for _ in range(letters):\n        first, second = map(int, stdin.split())\n        min_distance = 0\n        dormitory_number = 0\n        room_number = 0\n        for dormitory_index in range(dormitories):\n            dormitory_rooms = dormitory[dormitory_index + 1]\n            for room in dormitory_rooms:\n                if first < room < second:\n                    min_distance = abs(first - room)\n                    dormitory_number = dormitory_index + 1\n                    room_number = room\n                    break\n            if min_distance:\n                break\n        print(dormitory_number, room_number)\n    return min_distance\n",
        "test": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"",
        "num_ids": 3610
    },
    {
        "number": 4377,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b == c + d:\n        return '{} {} {}'.format(a, b, c)\n    elif a + b == d + c:\n        return '{} {} {}'.format(a, b, c)\n    elif a + c == b + d:\n        return '{} {} {}'.format(a, c, b)\n    else:\n        return '{} {} {}'.format(a, c, b)\n",
        "test": "assert solution('1 1 1 1') == '1 1 1'",
        "num_ids": 1134
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1]\n    s_rev = s[::-1]\n    if s == s_rev:\n        return '0'\n    for i in range(1, n):\n        if s[i:] == s_rev[:i]:\n            return str(i)\n    return '0'\n",
        "test": "assert solution(\"BBRRRRGGGGGRR\") == \"6\\nBGRBGRGRGRBGRGRG\"",
        "num_ids": 2943
    },
    {
        "number": 4379,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def solution(stdin: str) -> str:\n    return ','.join([str(x) for x in range(len(stdin))])",
        "test": "assert solution('') == ''",
        "num_ids": 1911
    },
    {
        "number": 4380,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a*b) % 2 == 0:\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert solution(\"3 1\\n\") == 'Yes'",
        "num_ids": 1116
    },
    {
        "number": 4381,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    train = int(stdin.split(\" \")[0])\n    bus = int(stdin.split(\" \")[1])\n    ans = (train + bus * (train // bus))\n    return str(ans)",
        "test": "assert solution('0 1') == '0'",
        "num_ids": 609
    },
    {
        "number": 4382,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 698
    },
    {
        "number": 4383,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) % 5 == 0 else 'NO'",
        "test": "assert solution('2\\n') == 'NO'",
        "num_ids": 746
    },
    {
        "number": 4384,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"999\")\n    'ABC'\n    >>> solution(\"2\")\n    'ABC'\n    >>> solution(\"1\")\n    'ABC'\n    >>> solution(\"2000\")\n    'ABCD'\n    '''\n    n = int(stdin)\n    if n < 1000:\n        return 'ABC'[0:n]\n    return 'ABCD'[0:n-999]",
        "test": "assert solution(\"10\") == \"ABC\"",
        "num_ids": 769
    },
    {
        "number": 4385,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given input a, b, c, d, e and k,\n       determine if there exists a pair of antennas\n       that cannot communicate directly.\n    \"\"\"\n    a, b, c, d, e, k = [int(n) for n in stdin.split()]\n    a, b, c, d, e = sorted([a, b, c, d, e])\n    a_b = b - a\n    a_c = c - a\n    a_d = d - a\n    a_e = e - a\n    b_c = c - b\n    b_d = d - b\n    b_e = e - b\n    c_d = d - c\n    c_e = e - c\n    d_e = e - d\n    if k > a_b or k > a_c or k > a_d or k > a_e:\n        return 'Yay!'\n    if k > b_c or k > b_d or k > b_e:\n        return 'Yay!'\n    if k > c_d or k > c_e:\n        return 'Yay!'\n    if k > d_e:\n        return 'Yay!'\n    return ':('",
        "test": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'",
        "num_ids": 3153
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    s = stdin[1]\n    if a >= 3200:\n        print(s)\n    else:\n        print('red')\n        \n    return'solution'\n",
        "test": "assert solution(2800, \"blue\") == \"blue\"",
        "num_ids": 680
    },
    {
        "number": 4387,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif 1200 <= R < 2800:\n        return \"ARC\"\n    return \"AGC\"\n",
        "test": "assert solution(9) == \"ABC\"",
        "num_ids": 634
    },
    {
        "number": 4388,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([\n        '9' if c == '1' else '1' if c == '9' else c for c in stdin\n    ])",
        "test": "assert solution(\"9\") == \"1\"",
        "num_ids": 899
    },
    {
        "number": 4389,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abbaac\")\n    'abac'\n    >>> solution(\"ac\")\n    'ac'\n    >>> solution(\"bccddaaf\")\n    'bcdaf'\n    >>> solution(\"zzzzzzzzzz\")\n    'zzzzzz'\n    \"\"\"\n    return stdin\n",
        "test": "assert solution(\"ac\") == \"ac\"",
        "num_ids": 855
    },
    {
        "number": 4390,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1196
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    segments = [[arr[i], arr[i + 1]] for i in range(n - 1)]\n    segment_lens = [len(seg) for seg in segments]\n    arr = [max(seg) for seg in zip(*segments)]\n    arr_mean = [sum(seg) / len(seg) for seg in zip(*segments)]\n    arr_mean_max = [max(seg) for seg in zip(*arr_mean)]\n    arr_mean_min = [min(seg) for seg in zip(*arr_mean)]\n    arr_mean = [arr_min + (arr_max - arr_min) / 2 for arr_min, arr_max in zip(arr_mean_min, arr_mean_max)]\n    arr_mean = [max(arr_mean[i], arr_mean[i + 1]) for i in range(n - 1)]\n    arr_mean = [arr_mean[0]] + arr_mean + [arr_mean[-1]]\n    arr = [arr_mean[i] + (arr_mean[i + 1] - arr_mean[i]) / 2 for i in range(n - 1)]\n    arr_mean = [arr[i] + (arr[i + 1] - arr[i]) / 2 for i in range(n - 1)]\n    arr = [arr_min + (arr_max - arr_min) / 2 for arr_min, arr_max in zip(arr_mean_min, arr_mean_max)]\n    arr = [arr[0]] + arr + [arr[-1]]\n    return max(arr)\n",
        "test": "assert solution('''4 3",
        "num_ids": 1319
    },
    {
        "number": 4392,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"YES\"\n",
        "test": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1') == 'YES'",
        "num_ids": 1430
    },
    {
        "number": 4393,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Decrypts the string `stdin`\"\"\"\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 970
    },
    {
        "number": 4394,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 10\n   ... 1 2 1\n   ... 2 3 2\n   ... 2 4 5\n   ... 1 4 2\n   ... 6 3 3\n   ... 6 1 3\n   ... 3 5 2\n   ... 3 7 1\n   ... 4 8 1\n   ... 6 2 4''')\n    '1'\n    >>> solution('''5 6\n   ... 1 2 2\n   ... 2 3 1\n   ... 4 5 3\n   ... 2 4 2\n   ... 1 4 2\n   ... 1 5 3''')\n    '2'\n    >>> solution('''3 3\n   ... 1 2 1\n   ... 2 3 3\n   ... 1 3 3''')\n    '0'\n    >>> solution('''1 0''')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        edges.append((a, b, c))\n    edges.sort(key=lambda x: x[2])\n    set_edges = set((a, b) for a, b, _ in edges)\n    cost = 0\n    for i in range(m):\n        a, b, c = edges[i]\n        if (a, b) in set_edges or (b, a) in set_edges:\n            cost += 1\n    return str(cost)\n",
        "test": "assert solution(\"1 0\\n\") == \"0\"",
        "num_ids": 2322
    },
    {
        "number": 4395,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    # Get data from stdin\n    lamps = stdin\n    \n    # Get number of lamps\n    lamp_count = len(lamps)\n    \n    # Get count of nice numbers\n    nice_count = 0\n    for i in range(lamp_count):\n        for j in range(lamp_count):\n            if i == j:\n                continue\n            if abs(i-j) % 3 == 0:\n                nice_count += 1\n    \n    # Get count of nice numbers for each lamp\n    lamp_nice_count = [0] * lamp_count\n    for i in range(lamp_count):\n        for j in range(lamp_count):\n            if i == j:\n                continue\n            if abs(i-j) % 3 == 0:\n                lamp_nice_count[i] += 1\n                lamp_nice_count[j] += 1\n    \n    # Get the minimum number of nice numbers\n    min_nice_count = min(lamp_nice_count)\n    \n    # Get the lamps with the minimum number of nice numbers\n    lamps_with_min_nice_count = []\n    for i in range(lamp_count):\n        if lamp_nice_count[i] == min_nice_count:\n            lamps_with_min_nice_count.append(lamps[i])\n    \n    # Get the minimum number of times you need to replace the lamps\n    replace_count = lamp_count - min_nice_count\n    \n    # Find the lamp with the minimum number of times to replace\n    lamp_replace_count = [0] * lamp_count\n    for i in range(lamp_count):\n        lamp_replace_count[i] = replace_count\n    for i in range(lamp_count):\n        for j in range(lamp_count):\n            if i == j:\n                continue\n            if abs(i-j) % 3 == 0:\n                lamp_replace_count[i] += 1\n                lamp_replace_count[j] += 1\n    \n    # Find the lamp with the minimum number of times to replace\n    min_replace_count = min(lamp_replace_count)\n    \n    # Get the lamps with the minimum number of times to replace\n    lamps_with_min_replace_count = []\n    for i in range(lamp_count):\n        if lamp_replace_count[i] == min_replace_count:\n            lamps_with_min_replace_count.append(lamps[i])\n    \n    # Get the solution string\n    solution_str = \"\"\n    for i in range(lamp_count):\n        if lamps_with_min_replace_count[0]!= lamps[i]:\n            solution_str += lamps_with_min_replace_count.pop(0)\n        else:\n            solution_str += lamps_with_min_nice_count.pop(0)\n    \n    # Return solution string\n    return solution_str\n",
        "test": "assert solution('BB') == 'BB'",
        "num_ids": 4150
    },
    {
        "number": 4396,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\\\n   ... 4\n   ... 10000 JPY\n   ... 0.10000000 BTC\n   ... ''')\n    '48000.0'\n    >>> solution('''\\\n   ... 3\n   ... 100000 JPY\n   ... 100.0 BTC\n   ... ''')\n    '100000.0'\n    >>> solution('''\\\n   ... 3\n   ... 0.01 BTC\n   ... 0.1 BTC\n   ... ''')\n    '0.101'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    x, u = [], []\n    for i in range(1, n + 1):\n        x.append(float(stdin.split('\\n')[i].split(' ')[0]))\n        u.append(stdin.split('\\n')[i].split(' ')[1])\n    return str(sum([float(x[i]) if u[i] == 'JPY' else int(x[i] * 380000) for i in range(n)]))\n",
        "test": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"",
        "num_ids": 1749
    },
    {
        "number": 4397,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    return str(n - i + 1)\n    pass",
        "test": "assert solution(\"4 2\") == \"3\"",
        "num_ids": 660
    },
    {
        "number": 4398,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return ''.join(s[i] + t[i] for i in range(len(s)))",
        "test": "assert solution(\"ip cc\") == \"icpc\"",
        "num_ids": 1191
    },
    {
        "number": 4399,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    buses = set()\n    for s in stdin:\n        if s == 'A':\n            buses.add(1)\n            buses.add(3)\n        elif s == 'B':\n            buses.add(2)\n\n    return 'Yes' if len(buses) >= 3 else 'No'\n",
        "test": "assert solution(\"BBB\") == \"No\"",
        "num_ids": 1609
    },
    {
        "number": 4400,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    rainy = 0\n    for day in stdin:\n        if day == \"R\":\n            rainy += 1\n        else:\n            rainy = 0\n        if rainy >= 2:\n            return rainy\n    return rainy",
        "test": "assert solution('RRS') == 2",
        "num_ids": 2556
    },
    {
        "number": 4401,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 3\")\n    \"3 1 2\"\n    \"\"\"\n    A, B, C = map(int, stdin.split())\n\n    A, B = B, A\n    A, C = C, A\n\n    return \"{} {} {}\".format(A, B, C)",
        "test": "assert solution('''1 2 3''') == '''3 1 2'''",
        "num_ids": 1085
    },
    {
        "number": 4402,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the cost of the Ferris wheel for Takahashi.\n\n    Args:\n        stdin (str): Input string as plain text.\n\n    Returns:\n        str: String with the cost of the Ferris wheel for Takahashi.\n    \"\"\"\n    age, price = [int(s) for s in stdin.split()]\n    return str(price if age >= 13 or age <= 2 or age >= 6 and age <= 12 else (price // 2))\n",
        "test": "assert solution('30 100') == '100'",
        "num_ids": 888
    },
    {
        "number": 4403,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    2\n    \"\"\"\n    total: int = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"+\":\n            total += 1\n        else:\n            total -= 1\n    return str(total)\n",
        "test": "assert solution('+-++') == '2'",
        "num_ids": 763
    },
    {
        "number": 4404,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2019/04/30')\n    'Heisei'\n    \"\"\"\n    return 'Heisei' if 2020 >= int(stdin.split('/')[2]) >= 2019 else 'TBD'\n",
        "test": "assert solution(\"2019/04/33\") == \"TBD\"",
        "num_ids": 1097
    },
    {
        "number": 4405,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1200
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(n + k)\n    Space: O(n)\n    '''\n    n, k = map(int, stdin.split())\n    messages = list(map(int, stdin.split()))\n    prev = [0] * k\n    for m in messages:\n        if m not in prev:\n            prev.insert(0, m)\n        elif prev.index(m)!= 0:\n            prev.insert(0, prev.pop(prev.index(m)))\n    return str(len(prev)) +'' +''.join(map(str, prev[:n]))\n",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"",
        "num_ids": 2321
    },
    {
        "number": 4407,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1209
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    cards = [int(x) for x in stdin.split(\" \")[k * n:]]\n    f = [int(x) for x in stdin.split(\" \")[:n]]\n    h = [int(x) for x in stdin.split(\" \")[n:]]\n    # print(cards, f, h)\n    nums = set()\n    for card in cards:\n        nums.add(card)\n    # print(nums)\n    total = 0\n    for num in nums:\n        # print(num, cards.count(num))\n        if f.count(num) > cards.count(num):\n            total += f.count(num)\n    # print(total)\n    return total\n\n\nprint(solution(input()))\n\"\"\"\n",
        "test": "assert solution(input) == output",
        "num_ids": 2966
    },
    {
        "number": 4409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    '''Find the minimum number of operations required to obtain the array of equal elements.'''\n    # your solution here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 2952
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('01111110') == 1",
        "num_ids": 1789
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"",
        "num_ids": 2663
    },
    {
        "number": 4412,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1633
    },
    {
        "number": 4413,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 892
    },
    {
        "number": 4414,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'YES' if stdin == 'YES' else 'NO'\n",
        "test": "assert solution('1 2 3 6') == 'NO'",
        "num_ids": 714
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(NlogN)\n    space complexity: O(1)\n    \"\"\"\n    n = int(stdin.readline())\n    if n < 2:\n        return 'NO'\n    a = list(map(int, stdin.readline().split()))\n    c = Counter(a)\n    if max(c.values()) > n // 2:\n        return 'NO'\n    d = Counter(reversed(a))\n    if max(d.values()) > n // 2:\n        return 'NO'\n    inc = sorted(c.keys())\n    dec = sorted(d.keys(), reverse=True)\n    for i in inc:\n        if c[i] > 1:\n            inc.remove(i)\n    for i in dec:\n        if d[i] > 1:\n            dec.remove(i)\n    if len(inc) == 0:\n        inc = [0]\n    if len(dec) == 0:\n        dec = [0]\n    print('YES')\n    print(len(inc))\n    print(*inc)\n    print(len(dec))\n    print(*dec)\n",
        "test": "assert solution(\"5 0 4 3 2 1\") == \"NO\"",
        "num_ids": 3471
    },
    {
        "number": 4416,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 3574
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef",
        "test": "assert solution(\"6 2\\n1 1 2 3 4 5 6\\n2 2\\n1 4\\n3 3\\n5 2 5\") == \"7\"",
        "num_ids": 3358
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    inp = [int(x) for x in stdin.split()]\n    n = len(inp)\n    k = n // 6\n\n    nums = [4, 8, 15, 16, 23, 42]\n    count = 0\n    for num in nums:\n        count += inp.count(num)\n\n    return k - count\n\ndef",
        "test": "assert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42\\n') == '3'",
        "num_ids": 2865
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"",
        "num_ids": 747
    },
    {
        "number": 4420,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return str(0)",
        "test": "assert solution('2\\n0 0 999999999') == '0'",
        "num_ids": 2665
    },
    {
        "number": 4421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    array = list(map(int, stdin.split(' ')))\n    \n    # array.sort(reverse=True)\n    \n    return n - k + 1",
        "test": "assert solution(\"7 2\") == 6",
        "num_ids": 1377
    },
    {
        "number": 4422,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return stdin\n",
        "test": "assert solution(\"ABCDEF\") == \"ABCDEF\"",
        "num_ids": 1336
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = []\n    for i in range(n):\n        line = stdin.readline().split()\n        city = line[1]\n        score = line[2]\n        res.append([city, score])\n    res.sort()\n    for i in range(n):\n        print(i+1)\n\nsolution(sys.stdin.read())\n",
        "test": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "num_ids": 1858
    },
    {
        "number": 4424,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    input_list = stdin.split()\n    K = int(input_list[0])\n    X = int(input_list[1])\n    sum_coins = 0\n    for i in range(K):\n        sum_coins += 500\n    if sum_coins >= X:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution('2 900') == 'Yes'",
        "num_ids": 625
    },
    {
        "number": 4425,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if K <= 1:\n        return \"0.0\"\n    if N == 1:\n        return str(1 / K)\n\n    def probability_of_winning(n: int, k: int) -> float:\n        return (1 / (k * (k - 1))) * (1 + (n - 1) * (n - 1) / (k - 1) ** 2)\n\n    return str(sum(probability_of_winning(i, k) for i in range(1, N + 1)))\n",
        "test": "assert solution('1 2') == '0.5'",
        "num_ids": 1192
    },
    {
        "number": 4426,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    days_count = 0\n    for day in S:\n        if day == 'S':\n            days_count += 1\n    return days_count",
        "test": "assert solution(\"MON\") == 0",
        "num_ids": 1480
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x2000 = stdin.split(' ')\n    r, D, x2000 = int(r), int(D), int(x2000)\n    x_i = int(r*x2000 - D)\n    for i in range(2010 - 2000):\n        x_i = int(r*x_i - D)\n        print(x_i)\n    return ''",
        "test": "assert solution(\"1 10 100\") == \"330\"",
        "num_ids": 1269
    },
    {
        "number": 4428,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [int(x) for x in stdin.split('\\n')[:-1]]\n    sum1, sum2, sum3 = sum(input_data), 0, sum(input_data)\n    while sum1!= sum3 and sum2!= sum3:\n        if sum1 > sum3:\n            sum1 -= input_data.pop(0)\n        elif sum1 < sum3:\n            sum3 -= input_data.pop()\n        if sum2 > sum3:\n            sum2 -= input_data.pop(0)\n        elif sum2 < sum3:\n            sum3 -= input_data.pop()\n    return str(sum1)\n",
        "test": "assert solution('5\\n1 3 1 1 4') == '5'",
        "num_ids": 1482
    },
    {
        "number": 4429,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1610
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    def find_first_non_empty_box(box_sizes):\n        for i, box_size in enumerate(box_sizes):\n            if box_size > 0:\n                return i\n        return -1\n\n    n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    box_sizes = list(map(int, stdin.split('\\n')[1].split(' ')))\n\n    box_size_sum = sum(box_sizes)\n    min_box_size = min(box_sizes)\n\n    if box_size_sum < m * k:\n        return '0'\n\n    if min_box_size > m * k:\n        return '0'\n\n    if box_sizes[0] > m * k:\n        return '0'\n\n    max_sum = 0\n\n    for i in range(m):\n        new_box_sizes = box_sizes[:]\n        box_sizes[i] -= m * k\n        box_size_sum -= m * k\n        while box_sizes[find_first_non_empty_box(box_sizes)] > m * k:\n            box_size = box_sizes[find_first_non_empty_box(box_sizes)]\n            new_box_sizes[find_first_non_empty_box(box_sizes)] -= m * k\n            box_size_sum -= m * k\n            box_sizes[find_first_non_empty_box(box_sizes)] = 0\n\n        if box_size_sum < m * k:\n            break\n\n        max_sum = max(max_sum, sum(new_box_sizes))\n\n    return str(max_sum)\n",
        "test": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"",
        "num_ids": 3305
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:-1]\n    c = stdin[-1:]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for m in range(k):\n                print(f\"{s[i:j]} {c[m]}\")\n    return str(0)\n",
        "test": "assert solution('aaaaaaa') == 0",
        "num_ids": 870
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2'",
        "num_ids": 2267
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in unweighted, connected graph with n vertices, as described in the task.\n    Returns a sequence of edges in a spanning tree that maximizes the degree of all vertices.\n    \"\"\"\n    # TODO: implement solution\n    pass\n",
        "test": "assert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"",
        "num_ids": 5272
    },
    {
        "number": 4434,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 735
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n4 5 7 6 7 5 4 4 6 4\")\n    '1 1 1 2 -1 1 1 3 1 1'\n    >>> solution(\"5\\n5 1 2 3 4\")\n    '1 1 1 -1 1'\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    res = [-1] * n\n    stack = []\n    for i, x in enumerate(a, 1):\n        while stack and a[stack[-1]] % 2 == x % 2:\n            j = stack.pop()\n            res[j - 1] = i - j\n        stack.append(i)\n    return \"\\n\".join(map(str, res))\n",
        "test": "assert solution(s) == ans",
        "num_ids": 2515
    },
    {
        "number": 4436,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def is_ok(a, b, c):\n        return a * b * c == n and 2 <= a and b and c\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if not is_ok(i, n // i, n // i):\n                return \"NO\"\n            if not is_ok(n // i, i, n // i):\n                return \"NO\"\n    return \"YES\"\n    ",
        "test": "assert solution('123') == 'NO'",
        "num_ids": 1324
    },
    {
        "number": 4437,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i]!= s[i - 1]:\n            count += 1\n    return count\n",
        "test": "assert solution(\"abbab\") == 2",
        "num_ids": 996
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    return ans",
        "test": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"",
        "num_ids": 1638
    },
    {
        "number": 4439,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n",
        "test": "assert solution('3\\n1') == '2'",
        "num_ids": 590
    },
    {
        "number": 4440,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 2476
    },
    {
        "number": 4441,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin)\n    if age == 1:\n        return \"Hello World\"\n    a = int(stdin)\n    b = int(stdin)\n    return a+b",
        "test": "assert solution(\"1\") == \"Hello World\"",
        "num_ids": 625
    },
    {
        "number": 4442,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\")\n    3333\n    \"\"\"\n    a, b = stdin.split()\n    return a * int(b) if a < b else b * int(a)\n",
        "test": "assert solution('4 3') == '3333'",
        "num_ids": 734
    },
    {
        "number": 4443,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin.lower()\n    if letter == 'z':\n        letter = 'a'\n    else:\n        letter = chr(ord(letter) + 1)\n    return letter",
        "test": "assert solution(\"a\") == \"b\"",
        "num_ids": 821
    },
    {
        "number": 4444,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S\n",
        "test": "assert solution(\"oder atc\") == \"atcoder\"",
        "num_ids": 459
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n    ... 1 5 7 8 2\n    ... ''')\n    '0'\n    >>> solution('''6\n    ... 5 1 2 4 6 3\n    ... ''')\n    '0'\n    >>> solution('''2\n    ... 1000000 1000000\n    ... ''')\n    '1000000'\n    \"\"\"\n    return (\n            stdin\n            .strip('\\n')\n            .split('\\n')[1]\n            .split(' ')\n            )\n",
        "test": "assert solution('1 1') == '1'",
        "num_ids": 3473
    },
    {
        "number": 4446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, a, b, k = list(map(int, input[0].split()))\n    h = list(map(int, input[1].split()))\n    h.sort()\n    hp = 0\n    for i in range(n):\n        cur = i\n        for _ in range(k):\n            if hp + b > h[cur]:\n                break\n            if a > h[cur]:\n                hp += b\n                cur += 1\n            else:\n                hp += a\n                cur += 1\n        if i == n - 1:\n            break\n    return str(hp)\n",
        "test": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"",
        "num_ids": 1463
    },
    {
        "number": 4447,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    d = {}\n    for n in nums:\n        if n % m not in d:\n            d[n % m] = 1\n        else:\n            d[n % m] += 1\n    res = 0\n    for n in d:\n        res += n * (d[n] // m)\n    return str(res)\n",
        "test": "assert solution(\"1 10\") == \"0\"",
        "num_ids": 1926
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\n\n    Parameters:\n        stdin (str): The standard input\n\n    Returns:\n        str: The solution to the problem\n    \"\"\"\n    # Write your solution here\n   ...",
        "test": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"",
        "num_ids": 2266
    },
    {
        "number": 4449,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '\\n'.join([\"YES\" if len(set(stdin.split()))!= len(set(stdin.split())) else \"NO\"])",
        "test": "assert solution('4 2\\n1 1 1 1\\n2\\n3 4') == 'NO'",
        "num_ids": 5262
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    matrix = {}\n    for i in range(1, n+1):\n        matrix[i] = {}\n    for _ in range(m):\n        a, b, c = [int(x) for x in stdin.split('\\n')[_].split(' ')]\n        matrix[a][b] = c\n        matrix[b][a] = c\n    a = set()\n    for _ in range(m):\n        a.add((matrix[_][1], matrix[_][2]))\n    for _ in range(m):\n        a.add((matrix[_][2], matrix[_][1]))\n    a = list(a)\n    a.sort()\n    for _ in range(len(a) - 1, -1, -1):\n        if a[_][0] == k:\n            print(a[_][1])\n            return\n    return 0\n\nsolution(stdin)\n",
        "test": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"",
        "num_ids": 3326
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    k = 0\n    for i in range(n):\n        res += a[i]\n        if a[i]!= a[i - 1]:\n            k += 1\n    return res, k\n\nprint(solution(input()))\n",
        "test": "assert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"",
        "num_ids": 2584
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n\n    if n < 10:\n        return str(n) + '\\n'\n\n    candidates = []\n    for d in str(n):\n        if d!= '0':\n            candidates.append(int(d) ** 2)\n\n    while len(candidates) > 1:\n        candidates.sort()\n        if candidates[0] % 10 == 0:\n            candidates = candidates[1:]\n        else:\n            candidates[0] += candidates.pop()\n    return str(candidates[0]) + '\\n'\n\ndef",
        "test": "assert solution(\"5\\n5\\n5\\n5\\n5\") == \"3\"",
        "num_ids": 3204
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'",
        "num_ids": 2196
    },
    {
        "number": 4454,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin.split())\n",
        "test": "assert solution('') == ''",
        "num_ids": 2060
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    skills = list(map(int, stdin.split('\\n')[1:]))\n    res = [0 for _ in range(n)]\n    for i in range(k):\n        x, y = map(int, stdin.split('\\n')[i+2].split(' '))\n        if skills[x-1] > skills[y-1]:\n            res[x-1] += 1\n        if skills[y-1] > skills[x-1]:\n            res[y-1] += 1\n    return''.join(map(str, res))\n\n\n\n-----Test-----\n\nInputs:\n4 2\n10 4 10 15\n1 2\n4 3\n\nOutputs:\n0 0 1 2\n\nInputs:\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n\nOutputs:\n5 4 0 5 3 3 9 0 2 5\n\nInputs:\n4 3\n10 9 10 3\n1 2\n1 3\n1 4\n\nOutputs:\n3 3 3 0 0 2 0 0\n\nInputs:\n3 3\n10 9 10 3\n1 2\n1 3\n\nOutputs:\n0 1 0\n\"\"\"\n",
        "test": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == '5 4 0 5 3 3 9 0 2 5'",
        "num_ids": 2163
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    p, q = [int(i) for i in stdin.split('\\n')[1].split()]\n    s = stdin.split('\\n')[2]\n    ans = []\n    for i in range(n):\n        if p[i] < q[i]:\n            ans.append(s[p[i]-1])\n        else:\n            ans.append(s[q[i]-1])\n    return ''.join(ans)",
        "test": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'",
        "num_ids": 2060
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    l = [0 for _ in range(N)]\n    r = [0 for _ in range(N)]\n    for i in range(N):\n        l[i] = A[i] * (i + 1)\n    for i in range(N-1, -1, -1):\n        r[i] = A[i] * (N - i)\n    l.sort()\n    r.sort()\n    x = 0\n    result = 0\n    for i in range(N):\n        result += l[i] + r[i]\n        x += 1\n    return result, [str(x) for x in range(1, N+1)]\n\nsolution(str(input()))\n",
        "test": "assert solution(\"2\\n1 4\") == \"3\"",
        "num_ids": 1832
    },
    {
        "number": 4458,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    P = [int(x) for x in stdin[1:]]\n    count = 0\n    for i in range(1, N):\n        for j in range(i):\n            if P[i] > P[j]:\n                count += 1\n    return str(count)",
        "test": "assert solution(\"4 2 5 1 3\") == \"3\"",
        "num_ids": 1531
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('3 3 3 3') == '1'",
        "num_ids": 1071
    },
    {
        "number": 4460,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    for x in lst:\n        if x == 0:\n            return str(lst.index(0)+1)\n        elif x == 1:\n            return \"5\"\n",
        "test": "assert solution('0 2 3 4 5') == '1'",
        "num_ids": 2569
    },
    {
        "number": 4461,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return str(min(h, w) - max(h, w))\n",
        "test": "assert solution('5 5') == '0'",
        "num_ids": 836
    },
    {
        "number": 4462,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    a, *b = [int(n) for n in stdin.split()]\n    b = sorted(b)\n    b[-1] = b[-1] * b[-2]\n    b = b[:-2]\n    if sum(b) % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"2\\n1 10\") == \"Yes\"",
        "num_ids": 1937
    },
    {
        "number": 4463,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    s_list.reverse()\n    t_list.reverse()\n    for i in range(len(s_list)):\n        if s_list[i] < t_list[i]:\n            return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"axy\") == \"Yes\"",
        "num_ids": 1759
    },
    {
        "number": 4464,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return 'YES' if any((a * c + b * c) % b == 0 for c in range(1, b // c + 1)) else 'NO'\n",
        "test": "assert solution(\"3 4 -9\") == 'NO'",
        "num_ids": 927
    },
    {
        "number": 4465,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(2) + '\\n' + str(2))\n    '1'\n    \"\"\"\n    a, b = map(int, stdin.split())\n    return str(b - 1 + a - 1)\n",
        "test": "assert solution('1 1') == '0'",
        "num_ids": 1048
    },
    {
        "number": 4466,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return \"3\"",
        "test": "assert solution(\"5 3 1\") == \"3\"",
        "num_ids": 714
    },
    {
        "number": 4467,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1261
    },
    {
        "number": 4468,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution to problem.\"\"\"\n    return '7'\n",
        "test": "assert solution(\"2 4\\n0 3\") == \"7\"",
        "num_ids": 1705
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    ",
        "test": "assert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'",
        "num_ids": 2442
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(1) == 0",
        "num_ids": 1520
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "test": "assert solution('2\\n11 11\\n1') == 'NO'",
        "num_ids": 1727
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1]\n    b = stdin[2]\n    changes = 0\n    for index in range(n):\n        if a[index]!= b[index]:\n            changes += 1\n            a = a[:index] + b[index] + a[index + 1:]\n            b = b[:index] + a[index] + b[index + 1:]\n            break\n    return changes\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"zcabd\", \"dbacz\") == 0",
        "num_ids": 1670
    },
    {
        "number": 4473,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    '''TODO: complete the solution'''\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1907
    },
    {
        "number": 4474,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 855
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    def findMin(a, b, x, y, n):\n        count = 0\n        while a >= x and b >= y:\n            count += 1\n            a -= 1\n            b -= 1\n            if a >= x:\n                count += 1\n                a -= 1\n                if b >= y:\n                    count += 1\n                    b -= 1\n            if a >= x and b >= y:\n                count += 1\n                a -= 1\n                b -= 1\n        return count\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        print(findMin(a, b, x, y, n))\n        # print(a, b, x, y, n)\n        # for _ in range(n):\n        #     a, b, x, y = map(int, stdin.readline().split())\n        #     print(a, b, x, y)\n        #     a -= x\n        #     b -= y\n        #     print(a, b)\n        #     if a >= x and b >= y:\n        #         a -= x\n        #         b -= y\n        #     elif a >= x:\n        #         a -= x\n        #     elif b >= y:\n        #         b -= y\n    return ''",
        "test": "assert solution(\"5\\n20 20 1 2\\n10 10 2 3 4\\n10 10 9 9 9\\n10 10 1 1 1\\n10 10 2 2 2\\n10 10 2 3 3\") == \"100\\n110\\n220\\n262\\n65\\n10\"",
        "num_ids": 3505
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(a: int, b: int) -> int:\n        return min(a - b, b - a)\n\n    return str(min(map(min_moves, map(int, stdin.split()))))\n",
        "test": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1'",
        "num_ids": 1619
    },
    {
        "number": 4477,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    \n    return stdin\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 2089
    },
    {
        "number": 4478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\"\"\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 2148
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    \"\"\"\n",
        "test": "assert solution(\"2 -3 -1 5 -4\", \"2\") == \"13\"",
        "num_ids": 1028
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    def func(nums):\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = nums[0]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + nums[i]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + nums[j]\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + nums[i + j]\n        return dp[n - 1][n - 1]\n\n    nums = list(map(int, stdin.split()))\n    return 'true' if nums[0] == func(nums[1:]) else 'false'\n\n\ndef",
        "test": "assert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True",
        "num_ids": 1605
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    N, *votes = map(str, stdin.split())\n    votes = [votes[i:i + N] for i in range(0, len(votes), N)]\n    votes = [sorted(v) for v in votes]\n    votes = sorted(votes, key=lambda x: len(x), reverse=True)\n    vote_count = [len(v) for v in votes]\n    return '\\n'.join(votes[i][0] for i in range(len(votes)))\n\n\ndef",
        "test": "assert solution('7\\nbeat') == 'beet\\nvet'",
        "num_ids": 1664
    },
    {
        "number": 4482,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    ans = [abs(a - b) ** 2 for a, b in zip(A, A[1:] + [A[0]])]\n    return str(sum(ans))\n",
        "test": "assert solution(\"4 8\")!= \"8 1\"",
        "num_ids": 2608
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math\nimport sys\n\ndef",
        "test": "assert solution('1234\\n150\\n100') == '84'",
        "num_ids": 2434
    },
    {
        "number": 4484,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of arrangements of two animals in a line such that no two animals are adjacent.\"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    # We can do one swap on the first m swaps, so the number of arrangements is\n    #   (2**m - 1) * (n - m)\n    # or,\n    #   (2**m - 1) * n\n    # since the number of arrangements of (2**m - 1) swaps is the same as that of\n    #   m swaps, and the number of arrangements of m swaps is the number of arrangements\n    #   of n-m swaps.\n    return (2 ** m - 1) * n\n",
        "test": "assert solution(\"5 2\") == 15",
        "num_ids": 860
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    islands = []\n    for _ in range(M):\n        islands.append([int(x) for x in stdin.split()])\n    islands = list(filter(lambda x: x[0] < x[1], islands))\n    if N == 1:\n        return 'POSSIBLE'\n    if N > 1 and islands:\n        return 'POSSIBLE'\n    return 'IMPOSSIBLE'\n",
        "test": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"",
        "num_ids": 2448
    },
    {
        "number": 4486,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2]",
        "test": "assert solution('atcoder') == 'acdr'",
        "num_ids": 476
    },
    {
        "number": 4487,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n  line = stdin.split()\n  return 'YES' if line[0][-1] == line[1][0] and line[1][-1] == line[2][0] else 'NO'",
        "test": "assert solution(\"gorilla apple rng\") == \"NO\"",
        "num_ids": 959
    },
    {
        "number": 4488,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'GREATER' if a > b else 'LESS' if a < b else 'EQUAL'",
        "test": "assert solution('36\\n24') == 'GREATER'",
        "num_ids": 780
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b_string = stdin.split('\\n')[1].strip('\\n')\n    r_string = stdin.split('\\n')[2].strip('\\n')\n    m = int(stdin.split('\\n')[3])\n    b = []\n    for i in range(1, n+1):\n        b.append(stdin.split('\\n')[i].strip('\\n'))\n    red = []\n    for i in range(n+1, n+m+1):\n        red.append(stdin.split('\\n')[i].strip('\\n'))\n    ans = 0\n    for i in range(n):\n        if b[i] == b_string:\n            ans += 1\n    for j in range(m):\n        if red[j] == r_string:\n            ans -= 1\n    return str(ans)",
        "test": "assert solution(",
        "num_ids": 1847
    },
    {
        "number": 4490,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    b: str = stdin\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'\n",
        "test": "assert solution(\"C\") == \"G\"",
        "num_ids": 762
    },
    {
        "number": 4491,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1296
    },
    {
        "number": 4492,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    N, *candies = map(int, stdin.split())\n    candies = sorted(candies)\n    counter = 0\n    while candies[0] > 1 and candies[-1] > 1:\n        candies[-1] -= 1\n        candies[0] -= 1\n        counter += 1\n\n    return str(counter)",
        "test": "assert solution(\"3 3\\n2 2 2\") == \"1\"",
        "num_ids": 2099
    },
    {
        "number": 4493,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Yes\" if stdin == \"1 0 1\\n2 1 2\\n1 0 1\" else \"No\"\n",
        "test": "assert solution(\"3 0 10\\n1 2 3\\n1 0 10\") == \"No\"",
        "num_ids": 1682
    },
    {
        "number": 4494,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.startswith('ABC'):\n        return 'ARC'\n    else:\n        return 'ABC'",
        "test": "assert solution(\"ABC\") == \"ARC\"",
        "num_ids": 463
    },
    {
        "number": 4495,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(sum([1 for i in range(a, b+1) if i % x == 0]))",
        "test": "assert solution('4 8 2\\n') == '3'",
        "num_ids": 639
    },
    {
        "number": 4496,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    if d == 24:\n        return \"Christmas Eve\"\n    if d == 23:\n        return \"Christmas Eve Eve\"\n    if d == 22:\n        return \"Christmas Eve Eve Eve\"\n    return None\n",
        "test": "assert solution('25') == 'Christmas'",
        "num_ids": 1022
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return \n",
        "test": "assert solution('7\\n') == 4",
        "num_ids": 739
    },
    {
        "number": 4498,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n  def check_communication(a: int, b: int, c: int) -> bool:\n    if abs(a - c) <= D:\n      return True\n    return False\n\n  a, b, c, D = map(int, stdin.split())\n  return \"Yes\" if check_communication(a, b, c) or check_communication(a, c, b) else \"No\"\n",
        "test": "assert solution('1 2 3 4') == 'Yes'",
        "num_ids": 1037
    },
    {
        "number": 4499,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    return ''.join(list(map(lambda x:x[0].upper(), l)))\n\"\"\"\n\ndef",
        "test": "assert solution(s) == \"ABC\"",
        "num_ids": 510
    },
    {
        "number": 4500,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert solution(\"0 100 120\") == \"No\"",
        "num_ids": 746
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.splitlines()\n    n = int(stdin[0].split()[0])\n    a = int(stdin[0].split()[1])\n    cards = [int(x) for x in stdin[1].split()]\n    choose = list()\n    for i in range(len(cards) + 1):\n        if i > len(cards) - 1:\n            break\n        for j in range(i + 1, len(cards) + 1):\n            if sum(cards[i:j]) / (j - i + 1) == a:\n                choose.append((i, j - 1))\n    # choose = list(set(choose))\n    choose = sorted(choose, key=lambda x: x[1] - x[0] + 1, reverse=True)\n    # print(choose)\n    print(len(choose))\n    return ''\n\n\nprint(solution('4 8\n9 8 9\\n'))\n",
        "test": "assert solution('''4 8",
        "num_ids": 754
    },
    {
        "number": 4502,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    def reverse(lst: List[int]) -> List[int]:\n        return lst[::-1]\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(n) for n in stdin.split(\"\\n\")[1].split()]\n\n    for _ in range(n):\n        a = reverse(a)\n\n    return \" \".join(map(str, a))\n",
        "test": "assert solution(\"1\\n9\") == '9'",
        "num_ids": 1209
    },
    {
        "number": 4503,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the Yes or No based on the given input\n    '''\n    # your solution goes here\n    # write your solution here\n    return \"Yes\"\n",
        "test": "assert solution('7 3\\n1 2 3 4 5 6 7') == 'Yes'",
        "num_ids": 1967
    },
    {
        "number": 4504,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return len(stdin)\n",
        "test": "assert solution('a') == 1",
        "num_ids": 537
    },
    {
        "number": 4505,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 3:\n        return 'No'\n    return 'Yes' if sorted(stdin) == list('abc') else 'No'\n",
        "test": "assert solution(\"abb\") == \"No\"",
        "num_ids": 839
    },
    {
        "number": 4506,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 1573
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"",
        "test": "assert solution(\"5 4 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"",
        "num_ids": 2062
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    edges = []\n    for i in range(1, n):\n        l = lines[i].strip().split()\n        edges.append((int(l[0]), int(l[1])))\n    edges = [list(e) for e in set(tuple(e) for e in edges)]\n\n    # build the graph\n    graph = defaultdict(set)\n    for e in edges:\n        u, v = e\n        graph[u].add(v)\n        graph[v].add(u)\n\n    # build the distance vector\n    dist = {}\n    dist[1] = 0\n    queue = [1]\n    while queue:\n        cur = queue.pop(0)\n        for neigh in graph[cur]:\n            if neigh in dist:\n                continue\n            dist[neigh] = dist[cur] + 1\n            queue.append(neigh)\n\n    # add the edges\n    min_edges = n - 1\n    for u in graph:\n        for v in graph[u]:\n            if dist[u] + dist[v] > 2:\n                min_edges -= 1\n                break\n    return str(min_edges)\n\n\ndef",
        "test": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'",
        "num_ids": 2117
    },
    {
        "number": 4509,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    num = 1\n    while num % n:\n        num += 1\n    return str(num + k)\n",
        "test": "assert solution('3 7') == '10'",
        "num_ids": 1131
    },
    {
        "number": 4510,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\n1 2 3 2 1 3 2\\n\")\n    2\n    >>> solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\")\n    3\n    \"\"\"\n    n, k = map(int, stdin.split())\n    nums = [int(x) for x in stdin.split()[1:]]\n    ans = []\n    count = k\n    for num in nums:\n        if num in ans:\n            ans.remove(num)\n            count += 1\n        else:\n            ans.append(num)\n        if count == k:\n            ans.sort()\n    return''.join(str(n) for n in ans)\n",
        "test": "assert solution('7 2') == '2'",
        "num_ids": 1636
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n')\n    263\n    '''\n    pass\n\n'''\n\n-----Code-----\n\n    def solution(stdin: str) -> str:\n        # your code here\n        pass\n\n\n-----Test Case-----\n\n\n-----Solution-----\n\nfrom sys import stdin\nimport math\ndef",
        "test": "assert solution('''5",
        "num_ids": 1152
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(stdin.readline())\n\n    for _ in range(q):\n        type, *args = stdin.readline().split()\n        if type == '1':\n            pos = int(args[0])\n            s = s[:pos] + args[1] + s[pos+1:]\n        elif type == '2':\n            left = int(args[0]) - 1\n            right = int(args[1])\n            n = s[left:right].count('c')\n            print(n)",
        "test": "assert solution('abacaba') == '3'",
        "num_ids": 2056
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"",
        "num_ids": 3425
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # import sys\n    # input = sys.stdin.readline\n\n    # n, q = map(int, input().split())\n    # parent = list(map(int, input().split()))\n    # queue = [(1, 0)]\n    # for i in range(n):\n    #     queue.append((i + 2, i + 1))\n    # for i in range(q):\n    #     queue.append(list(map(int, input().split())))\n    #     queue.pop(0)\n    # # print(queue)\n    # result = []\n    # while len(queue)!= 0:\n    #     idx, parent = queue.pop(0)\n    #     if idx == parent:\n    #         result.append(idx)\n    #         continue\n    #     queue.append((idx, parent))\n    #     result.append(idx)\n    #     queue.append((parent, idx))\n    # print(*result)\n    # return \"\"\n    return \"\"\n",
        "test": "assert solution('''9 6",
        "num_ids": 3430
    },
    {
        "number": 4515,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n\\n')\n    for test_case in test_cases:\n        # each test case is a string\n        test_case = test_case.split('\\n')\n        # we have a list of strings\n        alice, barbara, cerene, polycarp = test_case[0].split(' ')\n        # split string into list of strings\n        alice, barbara, cerene, polycarp = int(alice), int(barbara), int(cerene), int(polycarp)\n        # split int into int\n        # we now have 4 ints\n        if alice + barbara + cerene == polycarp:\n            return \"YES\"\n        elif barbara + cerene + alice == polycarp:\n            return \"YES\"\n        elif cerene + alice + barbara == polycarp:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "test": "assert solution(\"3 2 1 100000000\") == \"NO\"",
        "num_ids": 1829
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    num_perm, num_elem = stdin.split()\n    permutation = list(map(int, stdin.split()))\n    assert len(permutation) == int(num_elem)\n\n    res = []\n    for i in range(int(num_perm) - 1):\n        res.append(sum(abs(permutation[i] - permutation[i + 1])))\n    return''.join(map(str, res))\n",
        "test": "assert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"",
        "num_ids": 1543
    },
    {
        "number": 4517,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (stdin.split('\\n')[0].split(' ')[0].split(',')) else 'NO'",
        "test": "assert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n') == 'YES'",
        "num_ids": 3570
    },
    {
        "number": 4518,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Parameters:\n        stdin (str): input string\n\n    Returns:\n        str: output string\n\n    \"\"\"\n    return 'YES'\n",
        "test": "assert solution('4\\n3\\n1 1 1\\n2 2 1') == 'YES'",
        "num_ids": 2491
    },
    {
        "number": 4519,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    ",
        "test": "assert solution(\"11111\") == \"11111\"",
        "num_ids": 1202
    },
    {
        "number": 4520,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2472
    },
    {
        "number": 4521,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1733
    },
    {
        "number": 4522,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2120
    },
    {
        "number": 4523,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return \"YES\"\n",
        "test": "assert solution(\"3\\n1 2 4\\n5 5 5 5\") == \"YES\"",
        "num_ids": 1065
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n\n    res = a\n    while b!= 0:\n        a &= b\n        b >>= 1\n        res += a\n\n    return res % 1000000007\n\nprint(solution(input()))\n",
        "test": "assert solution('4 5\\n1001\\n10101') == '11'",
        "num_ids": 1532
    },
    {
        "number": 4525,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"NO\"\n",
        "test": "assert solution('4\\n2') == 'NO'",
        "num_ids": 2008
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('4\\n5\\n1 1 1 1 1') == '5'",
        "num_ids": 3046
    },
    {
        "number": 4527,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1432
    },
    {
        "number": 4528,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 1702
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    \n    t = int(stdin.readline())\n    \n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        \n        l, r = 0, 0\n        for i in range(n):\n            if s[i] == 'U':\n                l = max(l, r+1)\n            elif s[i] == 'D':\n                r = max(l, r+1)\n            elif s[i] == 'L':\n                l = max(l, r+1)\n            elif s[i] == 'R':\n                r = max(l, r+1)\n            else:\n                assert False\n        \n        print(l, r)\n",
        "test": "assert solution('U') == 'U'",
        "num_ids": 1688
    },
    {
        "number": 4530,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_pair(s, t):\n        return len(set(s)) == len(s) and len(set(t)) == 1\n\n    def brute_force_search(num_students, students):\n        min_size = len(students) + 1\n        for team_size in range(2, len(students) + 1):\n            for i in range(num_students - team_size + 1):\n                for j in range(i + 1, num_students - team_size + 2):\n                    if is_good_pair(students[i: i + team_size], students[j: j + team_size]):\n                        min_size = min(min_size, team_size)\n        return min_size\n\n    def brute_force_solution(num_students, students):\n        result = []\n        for team_size in range(2, num_students + 1):\n            for i in range(num_students - team_size + 1):\n                for j in range(i + 1, num_students - team_size + 2):\n                    if is_good_pair(students[i: i + team_size], students[j: j + team_size]):\n                        result.append(team_size)\n        return min(result) if result else 0\n\n    students = [int(x) for x in stdin.strip().split()]\n    num_students = students[0]\n    students = students[1:]\n    return str(brute_force_search(num_students, students))\n",
        "test": "assert solution(\"4\\n1 1 1 3\") == \"2\"",
        "num_ids": 1669
    },
    {
        "number": 4531,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.split('\\n')[0])\n    if n == 1:\n        return '0'\n    a = [int(n) for n in stdin.split('\\n')[1:]]\n    \n    d = {i: 0 for i in range(1, n)}\n    \n    for i in range(n - 1):\n        u, v = [int(x) for x in stdin.split('\\n')[i+1].split()]\n        d[u] += a[v - 1]\n        d[v] += a[u - 1]\n    \n    v = [k for k, v in d.items() if v == max(d.values())]\n    \n    return str(sum([a[x - 1] for x in v]))\n",
        "test": "assert solution(\"1\\n1337\") == \"0\"",
        "num_ids": 2014
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \n    def count_moves(n: int, k: int, a: str) -> int:\n        moves = 0\n        for i in range(n):\n            while a[i] % k!= 0:\n                a[i] += k\n                moves += 1\n        return moves\n    \n    num_tests = int(stdin.readline())\n    for _ in range(num_tests):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        print(count_moves(n, k, a))\n    \n    return None\n",
        "test": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"6\\n18\\n0\\n227\\n8\"",
        "num_ids": 1414
    },
    {
        "number": 4533,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The main function to solve the problem\"\"\"\n    \n    stdin = stdin.strip('\\n').split('\\n')\n    stdin = [line.split(' ') for line in stdin]\n    \n    gifts = [int(i[0]) for i in stdin]\n    req = [int(i[1]) for i in stdin]\n    \n    gifts.sort()\n    req.sort()\n    \n    if len(gifts) < len(req):\n        return 0\n    \n    gifts.sort(reverse=True)\n    req.sort(reverse=True)\n    \n    i = 0\n    while i < len(req):\n        if req[i] >= gifts[i]:\n            req[i] = gifts[i]\n            i += 1\n        else:\n            break\n    return len(req)\n",
        "test": "assert solution(\"1 2 3\") == 1",
        "num_ids": 3130
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    Given a non-negative index k\u00a0where k \u2264\u00a033, return the kth\u00a0index row of the Pascal's triangle.\n    \n    Follow up:\n    Could you optimize your algorithm to use only O(k) extra space?\n    \n    Arguments:\n        stdin {[type]} -- [description]\n    \n    Returns:\n        str -- [description]\n    \"\"\"\n    \n    # init\n    row = [1]\n    n = 1\n    # populate\n    while n < 33:\n        row = [row[i]+row[i+1] for i in range(len(row)-1)]\n        row.insert(0,1)\n        row.append(1)\n        n += 1\n    \n    return row[int(stdin)]\n    \n",
        "test": "assert solution('3') == [1, 3, 3, 1]",
        "num_ids": 1029
    },
    {
        "number": 4535,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - stdin.count('0'))\n",
        "test": "assert solution(\"1\") == '1'",
        "num_ids": 1018
    },
    {
        "number": 4536,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # pass\n    # time: O(n)\n    # space: O(n)\n    arr = [int(i) for i in stdin]\n    num = 0\n    for i, c in enumerate(reversed(arr)):\n        num += c * (10 ** i)\n    print(num)\n    num += 1\n    num_arr = []\n    while num > 0:\n        num_arr.append(num % 10)\n        num = num // 10\n    num_arr.reverse()\n    return ''.join([str(c) for c in num_arr])\n",
        "test": "assert solution('9') == '10'",
        "num_ids": 3359
    },
    {
        "number": 4537,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        return str(a + b)\n    elif b > a:\n        return str(b - a)\n    else:\n        return str(a * b)\n",
        "test": "assert solution('3 1') == '4'",
        "num_ids": 640
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of points in the input that have distance from the origin at most D\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0].split(\" \")[0])\n    D = int(stdin[0].split(\" \")[1])\n    stdin = stdin[1:]\n    res = 0\n    for i in range(N):\n        X, Y = stdin[i].split(\" \")\n        if (float(X) * float(X) + float(Y) * float(Y)) <= D:\n            res += 1\n    return str(res)\n\ndef",
        "test": "assert solution('4 5\\n0 5') == '3'",
        "num_ids": 1111
    },
    {
        "number": 4539,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    while n > 0:\n        rem = n % 10\n        sum += rem\n        n //= 10\n    if n == 0:\n        return \"Yes\" if n % sum == 0 else \"No\"\n    return \"No\"\n",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 714
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # N (int): the number of sightseeing spots\n    # A (list[int]): the coordinates of each sightseeing spot\n    N, *A = map(int, stdin.split())\n    # B (list[int]): the remaining coordinates to be visited\n    B = [a for a in A if a >= 0]\n    # X (list[int]): the remaining coordinates to be visited\n    X = [a for a in A if a < 0]\n    # res (list[int]): the total cost of travel for each spot\n    res = []\n    # D (list[int]): the distance from each spot to the next spot\n    D = []\n    # C (list[int]): the cost of travel from each spot to the next spot\n    C = []\n    # for each sightseeing spot\n    for i, a in enumerate(A):\n        # if it is the last spot\n        if i == N-1:\n            # set it to the coordinate of 0\n            D.append(0)\n            # set the cost of travel to the coordinate of 0\n            C.append(0)\n        # else\n        else:\n            # calculate the distance between the next sightseeing spot and the sightseeing spot\n            D.append(A[i+1] - a)\n            # calculate the cost of travel from the sightseeing spot to the next sightseeing spot\n            C.append(abs(a - B[i+1]))\n\n    # for each sightseeing spot\n    for i in range(N):\n        # if the sightseeing spot is at coordinate 0\n        if A[i] == 0:\n            # if the trip is to be canceled\n            if X[i] < 0:\n                # the cost of travel from the last sightseeing spot to the last spot is 0\n                C[i] = 0\n            # otherwise\n            else:\n                # the cost of travel from the last sightseeing spot to the last spot is equal to the cost of travel from the last spot to the spot with coordinate X[i]\n                C[i] = C[i-1] + abs(A[i-1] - B[i])\n        # if the sightseeing spot is not at coordinate 0\n        else:\n            # if the trip is to be canceled\n            if X[i] < 0:\n                # the cost of travel from the last sightseeing spot to the spot with coordinate X[i] is equal to the cost of travel from the last spot to the spot with coordinate X[i]\n                C[i] = C[i-1] + abs(A[i-1] - B[i])\n            # otherwise\n            else:\n                # the cost of travel from the last sightseeing spot to the last spot is equal to the cost of travel from the last spot to the spot with coordinate X[i]\n                C[i] = C[i-1] + abs(A[i-1] - B[i]) + abs(A[i-1] - A[i])\n                # the cost of travel from the last spot to the spot with coordinate X[i] is equal to the distance from the last spot to the spot with coordinate X[i]\n                C[i] += D[i]\n\n    # for each sightseeing spot\n    for i in range(N):\n        # if the sightseeing spot is not at coordinate 0\n        if A[i]!= 0:\n            # add the cost of travel from the last spot to the sightseeing spot to the total cost of travel\n            res.append(C[i] + C[i-1])\n        # if the sightseeing spot is at coordinate 0\n        else:\n            # add the cost of travel from the last spot to the sightseeing spot to the total cost of travel\n            res.append(C[i])\n    # for each sightseeing spot\n    for i in range(N):\n        # if the sightseeing spot is at coordinate 0\n        if A[i] == 0:\n            # the cost of travel from the last spot to the next sightseeing spot is equal to the cost of travel from the last sightseeing spot to the next sightseeing spot\n            res[i] = res[i-1]\n    # for each sightseeing spot\n    for i in range(N-1):\n        # if the trip is not canceled\n        if X[i] >= 0:\n            # add the cost of travel from the last spot to the next sightseeing spot to the total cost of travel\n            res.append(res[i] + res[i+1])\n        # if the trip is canceled\n        else:\n            # add the cost of travel from the last spot to the next sightseeing spot to the total cost of travel\n            res.append(res[i])\n    # return the total cost of travel\n    return '\\n'.join(map(str, res))\n",
        "test": "assert solution(\"4 5 1\") == \"8\\n6\\n7\\n8\"",
        "num_ids": 1800
    },
    {
        "number": 4541,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    return \"vowel\" if stdin.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"] else \"consonant\"\n",
        "test": "assert solution('a') == 'vowel'",
        "num_ids": 677
    },
    {
        "number": 4542,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''BBBWW''')\n    '1'\n    >>> solution('''BBWWW''')\n    '1'\n    >>> solution('''WBWBW''')\n    '0'\n    \"\"\"\n    return '1'",
        "test": "assert solution('BBBWW') == '1'",
        "num_ids": 829
    },
    {
        "number": 4543,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = str(a) + str(b)\n    n = int(s)\n    return 'Yes' if n in list(map(lambda x: int(x) * int(x), [x for x in range(1, n+1)])) else 'No'\n",
        "test": "assert solution(\"1 22\") == \"No\"",
        "num_ids": 959
    },
    {
        "number": 4544,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    def make_optimal(N: int, A: list) -> int:\n        A.sort(reverse=True)\n        acc = 0\n        if N % 2 == 0:\n            for i in range(int(N / 2)):\n                acc += max(1, A[i] - A[i + 1])\n        else:\n            for i in range(int(N / 2)):\n                acc += max(1, A[i] - A[i + 1])\n            acc += A[int(N / 2)]\n        return acc\n    A = [int(n) for n in stdin.split()]\n    return str(make_optimal(len(A), A))",
        "test": "assert solution('1') == '1'",
        "num_ids": 1268
    },
    {
        "number": 4545,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    return f\"{((N ** 2) - A)}\"",
        "test": "assert solution('3\\n4\\n') == '5'",
        "num_ids": 2443
    },
    {
        "number": 4546,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b == c:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution('4 4 5') == 'NO'",
        "num_ids": 750
    },
    {
        "number": 4547,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if '9' in str(n) else 'No'\n    \n",
        "test": "assert solution('1') == 'No'",
        "num_ids": 601
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef",
        "test": "assert solution(",
        "num_ids": 3146
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n ...\n",
        "test": "assert solution('3 3\\n.#.\\n###\\n#.#') == 'No'",
        "num_ids": 3570
    },
    {
        "number": 4550,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if min(a, b, c) <= max(a, b, c) and min(a, b) <= max(a, b, c) and min(b, c) <= max(a, b, c):\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('1 1 1') == 'Yes'",
        "num_ids": 1269
    },
    {
        "number": 4551,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    weight_on_left_pan = int(stdin.split()[0]) + int(stdin.split()[1])\n    weight_on_right_pan = int(stdin.split()[2]) + int(stdin.split()[3])\n    if weight_on_left_pan > weight_on_right_pan:\n        return \"Left\"\n    elif weight_on_left_pan == weight_on_right_pan:\n        return \"Balanced\"\n    else:\n        return \"Right\"\n",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids": 1027
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('2\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'",
        "num_ids": 3060
    },
    {
        "number": 4553,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 'Yes'\n",
        "test": "assert solution('269-6650') == 'Yes'",
        "num_ids": 1038
    },
    {
        "number": 4554,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    width, a, b = map(int, stdin.split())\n    return str(abs(b - a))\n",
        "test": "assert solution(\"2 3 4\") == \"1\"",
        "num_ids": 637
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    A, B, K = map(int, stdin.split('\\n')[0].split())\n    if A == B:\n        if K <= A:\n            return list(range(A, A + K + 1))\n        else:\n            return list(range(A, A - K, -1))\n    elif A > B:\n        return list(range(A, A - K, -1)) + list(range(A - K, B + 1))\n    else:\n        return list(range(A, A + K + 1)) + list(range(A + K + 1, B + 1))\n\n\ndef",
        "test": "assert solution('1 2 3') == '1\\n3'",
        "num_ids": 1352
    },
    {
        "number": 4556,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC'",
        "test": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"",
        "num_ids": 326
    },
    {
        "number": 4557,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a <= x <= b:\n        if x % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\"\n",
        "test": "assert solution('7 2 3') == 'NO'",
        "num_ids": 1044
    },
    {
        "number": 4558,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x, t = [int(s) for s in stdin.split(\" \")]\n    return str(x - t)\n",
        "test": "assert solution('100 17') == '83'",
        "num_ids": 598
    },
    {
        "number": 4559,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the product of the two numbers as a string, or\n    returns -1 if the value exceeds 10^18\n    '''\n    result = 1\n    # Split the given numbers and cast to integers\n    numbers = [int(n) for n in stdin.split()]\n    if len(numbers) < 2:\n        return -1\n    for number in numbers:\n        if number > 10**18:\n            return -1\n        result *= number\n\n    return str(result)\n",
        "test": "assert solution(\"4 1 2 3\") == \"24\"",
        "num_ids": 1249
    },
    {
        "number": 4560,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if E869120 can pay exactly N yen using only his 1-yen and 500-yen coins,\n    otherwise return 'No'.\n\n    >>> solution('2018\\n218')\n    'Yes'\n    >>> solution('2018\\n220')\n    'No'\n    \"\"\"\n    n, a = (int(stdin) for stdin in stdin.splitlines())\n    return 'Yes' if n <= a * 500 + (a - 1) * 1 else 'No'\n",
        "test": "assert solution(\"2018\\n218\") == \"Yes\"",
        "num_ids": 771
    },
    {
        "number": 4561,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split('\\n')[0].split())\n    if a + b < x + 1:\n        return 'delicious'\n    elif a + b >= x + 1:\n        return'safe' if a < x else 'dangerous'",
        "test": "assert solution(\"1 5 1\") == \"dangerous\"",
        "num_ids": 1038
    },
    {
        "number": 4562,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n, 0, -1):\n        if i * i > n:\n            return str(i - 1)",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 687
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # For each report\n    # add the current sum of votes and the last report sum of votes\n    # check if there is a winner\n    # if so print the number of votes\n    # else print the new sum\n    # if the new sum is less than the current sum of votes, print 0\n    # otherwise, print the current sum\n    # don't forget to divide by 10 to get the actual number\n    # and to ensure it is coprime with 10\n    # print the minimum number of votes\n    \n    # The number of votes to win is 2*(1 + 3*2 + 4*3)\n    # We don't know how many reports we will have, so we will just iterate through until the end\n    # We are only allowed to change the sum of votes once\n    \n    n = int(stdin.readline())\n    t = 1\n    a = 1\n    for i in range(n):\n        # print(f\"Checking report {i+1}\")\n        # print(f\"The sum of votes is {t}\")\n        # print(f\"The last sum of votes was {a}\")\n        # print(f\"The sum of votes is now {t+a}\")\n        # print(f\"The difference is {t+a-t}\")\n        if t+a <= t:\n            t += a\n        else:\n            # print(f\"We made a change\")\n            t += t+a-t\n        a = int(stdin.readline())\n    print(t)\n    return \"\"\n\nsolution(stdin)\n",
        "test": "assert solution(\"3\\n1 1\") == \"3\"",
        "num_ids": 1916
    },
    {
        "number": 4564,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    result = set(stdin)\n    return \"yes\" if len(result) == len(stdin) else \"no\"\n",
        "test": "assert solution(\"uncopyrightable\") == 'yes'",
        "num_ids": 802
    },
    {
        "number": 4565,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n",
        "test": "assert solution('5\\nWEEWW') == '1'",
        "num_ids": 613
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3\\n1 2\\n2 3\\n1 4\\n')\n    2\n    2\n    1\n    1\n    >>> solution('4 2\\n1 2\\n1 4\\n')\n    2\n    2\n    1\n    1\n    \"\"\"\n    (n, m) = [int(x) for x in stdin.split()]\n    roads = {(int(x) - 1 for x in stdin.splitlines()[1:]): []}\n    for i in range(m):\n        roads[(int(x) - 1 for x in stdin.splitlines()[i + 1].split())].append(i)\n    return [len(roads[i]) for i in range(n)]\n",
        "test": "assert solution('''4 3",
        "num_ids": 3264
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s1: int = int(stdin)\n    s2: int = int(stdin)\n    s3: int = int(stdin)\n\n    if (s1 + s2 + s3) % 10!= 0:\n        print((s1 + s2 + s3) * 10)\n    else:\n        print(s1 + s2 + s3)\n",
        "test": "assert solution(\"3\\n5\\n10\\n\") == \"30\"",
        "num_ids": 1088
    },
    {
        "number": 4568,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    '''Given a string S of length N,\n    return the largest possible number of different letters contained in both X and Y\n    when we cut the string at the optimal position'''\n    string = stdin.strip('\\n')\n    string = string[:len(string)//2]\n    string1 = string[:len(string)//2]\n    string2 = string[len(string)//2:]\n    string1 = list(string1)\n    string2 = list(string2)\n    set1 = set(string1)\n    set2 = set(string2)\n    return len(set1.union(set2))",
        "test": "assert solution(\"aabbca\") == 2",
        "num_ids": 1180
    },
    {
        "number": 4569,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    weather_dict = {\n        \"Sunny\": \"Cloudy\",\n        \"Cloudy\": \"Rainy\",\n        \"Rainy\": \"Sunny\"\n    }\n    return weather_dict[stdin]",
        "test": "assert solution(\"Sunny\") == \"Cloudy\"",
        "num_ids": 802
    },
    {
        "number": 4570,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split(' '))\n    if a*n>b:\n        return str(b)\n    return str(a*n)",
        "test": "assert solution(\"10 20 30\") == \"20\"",
        "num_ids": 609
    },
    {
        "number": 4571,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"A-Takahashi is now competing in a programming contest, but he received TLE in a problem where the answer is YES or NO.\nWhen he checked the detailed status of the submission, there were N test cases in the problem, and the code received TLE in M of those cases.\nThen, he rewrote the code to correctly solve each of those M cases with 1/2 probability in 1900 milliseconds, and correctly solve each of the other N-M cases without fail in 100 milliseconds.\nNow, he goes through the following process:\n - Submit the code.\n - Wait until the code finishes execution on all the cases.\n - If the code fails to correctly solve some of the M cases, submit it again.\n - Repeat until the code correctly solve all the cases in one submission.\nLet the expected value of the total execution time of the code be X milliseconds. Print X (as an integer).\n>>> solution(\"1 1\")\n3800\n\"\"\"\n    return \"3800\"\n",
        "test": "assert solution('1 1\\n') == '3800'",
        "num_ids": 981
    },
    {
        "number": 4572,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in letters:\n        if letter not in S:\n            return letter\n    return None\n",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "num_ids": 699
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time, O(n) space.\n    \"\"\"\n    n = int(stdin)\n    X = list(map(int, stdin.split()))\n    X.sort()\n    medians = []\n    for i in range(0, n, 2):\n        medians.append(X[i])\n        for j in range(i + 1, n, 2):\n            medians.append(float((X[i] + X[j]) / 2))\n    return '\\n'.join(map(str, medians))\n",
        "test": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'",
        "num_ids": 1988
    },
    {
        "number": 4574,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string with first line of output\"\"\"\n    return '2'",
        "test": "assert solution('6\\n3 1 2 4 2 1') == '2'",
        "num_ids": 1866
    },
    {
        "number": 4575,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.split('\\n')[0].split())\n    a = [int(n) for n in stdin.split('\\n')[1:-1]]\n    ans = 0\n    if x == d:\n        for i in a:\n            ans += i\n    elif x < d:\n        for i in a:\n            ans += i\n            for j in range(x, d):\n                if j % i == 0:\n                    ans += 1\n    return str(ans)\n",
        "test": "assert solution(\"7 3 1\\n2\\n5\\n10\") == \"8\"",
        "num_ids": 1692
    },
    {
        "number": 4576,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1350
    },
    {
        "number": 4577,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split()]\n    return \"Yes\" if c >= a and c <= b else \"No\"",
        "test": "assert solution('1 3 2') == 'Yes'",
        "num_ids": 665
    },
    {
        "number": 4578,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    _, x = stdin.split()\n    x = int(x)\n    n, *m = stdin.split()\n    m = [int(m[i]) for i in range(len(m))]\n    m = [sum(m[0:i]) for i in range(1, len(m) + 1)]\n    print(len(m))\n    return str(sum(m) // x)\n\n\nprint(solution(\"3 1000\"))\n",
        "test": "assert solution(\"1 1000\") == \"1\"",
        "num_ids": 1849
    },
    {
        "number": 4579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    \n    kinds = set()\n    \n    for i in range(N):\n        kinds.add(stdin.readline().strip())\n    \n    return len(kinds)",
        "test": "assert solution('3\\napple\\norange\\napple') == '2'",
        "num_ids": 940
    },
    {
        "number": 4580,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split('\\n')\n    N = int(input_[0])\n    a = list(map(int, input_[1].split()))\n\n    a.sort()\n    a.append(a[-1] + 3)\n\n    color = 0\n    diff = 0\n    for i in range(1, N + 1):\n        if a[i] - a[i - 1] == 3:\n            color += 1\n        else:\n            diff = max(diff, color)\n            color = 1\n    diff = max(diff, color)\n\n    return f'{diff} {color}'",
        "test": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"",
        "num_ids": 1541
    },
    {
        "number": 4581,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[0] == 'o':\n        if S[1] == 'o' and S[2] == 'o':\n            return 700\n        else:\n            return 700 + 100\n    else:\n        if S[1] == 'o' and S[2] == 'o':\n            return 700 + 100\n        else:\n            return 700\n    return S",
        "test": "assert solution(\"xxx\") == 700",
        "num_ids": 1536
    },
    {
        "number": 4582,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]",
        "test": "assert solution('H H') == 'H'",
        "num_ids": 965
    },
    {
        "number": 4583,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin]\n    return f'{a}+{b}+{c}+{d}={7}'\n",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\"",
        "num_ids": 2694
    },
    {
        "number": 4584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input values\n    stdin = [int(v) for v in stdin.split()]\n    members = [int(v) for v in stdin]\n    \n    # Get the size of the array\n    n = members[0]\n    \n    # Get the values of the array\n    members = members[1:]\n    \n    # Initialise the result\n    result = []\n    \n    # Loop through the array\n    for m in members:\n        # If the member is 1, then it is not a subordinate\n        if m == 1:\n            # Add 0 to the result\n            result.append(0)\n        # If the member has immediate subordinates\n        else:\n            # Get the members that are directly below the member\n            subordinates = [k for k in members if k < m]\n            # Add the number of subordinates\n            result.append(len(subordinates))\n            \n    # Join the result\n    result = \" \".join([str(v) for v in result])\n    \n    # Return the result\n    return result\n",
        "test": "assert solution('1\\n1') == '0'",
        "num_ids": 2098
    },
    {
        "number": 4585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    \n    if X == 0:\n        return 1\n    elif X < 0:\n        return 0\n    elif X > 0:\n        return math.ceil(math.sqrt(X))\n",
        "test": "assert solution('6') == 3",
        "num_ids": 1072
    },
    {
        "number": 4586,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    count = 0\n    if len(N) == 4:\n        for i in N:\n            if i == '1':\n                count += 1\n            if count == 3:\n                return \"Yes\"\n        return \"No\"\n    return \"No\"",
        "test": "assert solution('1234') == 'No'",
        "num_ids": 1080
    },
    {
        "number": 4587,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n",
        "test": "assert solution('') == ''",
        "num_ids": 1749
    },
    {
        "number": 4588,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A B\n    '''\n    x = stdin.split(' ')\n    if x[0] < x[1]:\n        return '<'\n    elif x[0] > x[1]:\n        return '>'\n    else:\n        return '='\n",
        "test": "assert solution(\"A B\") == \"<\"",
        "num_ids": 860
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n",
        "test": "assert solution('3 5\\n.....\\n.#.#.\\n.....\\n') == '1112211'",
        "num_ids": 3811
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n",
        "test": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == '3'",
        "num_ids": 1698
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # a, b, x, y = map(int, stdin.split())\n    # a, b, x, y = 1000, 1000, 100, 100\n    # a, b, x, y = 1500, 2000, 1600, 3\n    # a, b, x, y = 1500, 2000, 3, 2\n    a, b, x, y = map(int, stdin.split())\n    if a + b <= x * y:\n        return x * y - (a + b)\n    else:\n        m = (a * x + b * y) // (x + y)\n        if m >= x:\n            return m * y - b * (m - x)\n        else:\n            return m * x - a * (m - y)\n",
        "test": "assert solution('1500 2000 1600 3 2') == '7900'",
        "num_ids": 1087
    },
    {
        "number": 4592,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            ans = ans * i % (10**9 + 7)\n    return str(ans)",
        "test": "assert solution('2') == '2'",
        "num_ids": 1020
    },
    {
        "number": 4593,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    largest_power = -1\n    for i in range(1, X + 1):\n        for j in range(1, X + 1):\n            if pow(i, j) <= X:\n                largest_power = max(largest_power, pow(i, j))\n    return str(largest_power)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1176
    },
    {
        "number": 4594,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    mochi = []\n    N = int(stdin.split(\"\\n\")[0])\n    for i in range(N):\n        mochi.append(int(stdin.split(\"\\n\")[i+1]))\n    mochi.sort()\n    i = 0\n    while i < len(mochi)-1:\n        if mochi[i] >= mochi[i+1]:\n            mochi.pop(i+1)\n            i = 0\n        else:\n            i += 1\n    return str(len(mochi))",
        "test": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"",
        "num_ids": 1297
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return 'ASDFZ'[:len(stdin)-7]\n",
        "test": "assert solution(\"QWERTYASDFZXCV\") == \"5\"",
        "num_ids": 372
    },
    {
        "number": 4596,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    max_ = 0\n    for num in arr:\n        max_ = max(max_, num)\n\n    if max_ % 2 == 0:\n        return str(0)\n\n    if n == 1:\n        return str(max_)\n\n    step = 1\n    while True:\n        if max_ % 2 == 0:\n            max_ /= 2\n            step += 1\n        else:\n            max_ -= 1\n            step += 1\n\n        if max_ == 1:\n            break\n\n    return str(step)\n    '''\n\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    arr_even = list(filter(lambda x: x % 2 == 0, arr))\n    max_ = 0\n    if len(arr_even) == 0:\n        return str(0)\n\n    for num in arr_even:\n        max_ = max(max_, num)\n\n    if max_ % 2 == 0:\n        return str(0)\n\n    if n == 1:\n        return str(max_)\n\n    step = 1\n    while True:\n        if max_ % 2 == 0:\n            max_ /= 2\n            step += 1\n        else:\n            max_ -= 1\n            step += 1\n\n        if max_ == 1:\n            break\n\n    return str(step)\n",
        "test": "assert solution(\"1\\n16\") == \"0\"",
        "num_ids": 1059
    },
    {
        "number": 4597,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    power = 1\n    for i in range(1, n + 1):\n        power = (power * i) % (10 ** 9 + 7)\n    return power",
        "test": "assert solution('1\\n') == 1",
        "num_ids": 664
    },
    {
        "number": 4598,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin\n    N = int(_)\n    return N * (N + 1) // 2",
        "test": "assert solution('3') == 6",
        "num_ids": 341
    },
    {
        "number": 4599,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    return str(sum(a[::2]) - sum(a[1::2]))\n",
        "test": "assert solution(\"2\\n3 1\") == \"2\"",
        "num_ids": 1008
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Creds: https://atcoder.jp/contests/abc127/submissions/7909597\n    \"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    submit = []\n    for i in range(m):\n        submit.append(list(map(str, stdin.split(\":\"))))\n    ans = [0 for i in range(n)]\n    for i in range(m):\n        p, S = submit[i]\n        ans[int(p) - 1] += 1\n        if ans[int(p) - 1] == 1:\n            ans[int(p) - 1] += 1\n        else:\n            ans[int(p) - 1] = 0\n    return str(ans[0]) + \" \" + str(ans[1])\n\n\ndef",
        "test": "assert solution(\"5 5\\n1 AC\\n2 AC\\n3 WA\\n4 WA\") == \"3 2\"",
        "num_ids": 2559
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n,k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    mini = n\n    for i in range(n-1):\n        if(h[i]+k<=h[i+1]):\n            mini = i+1\n        else:\n            break\n    print(n-mini)\n    return None",
        "test": "assert solution(\"5 1\\n7 1 3 2 1\\n4 1 5\") == \"3\"",
        "num_ids": 1367
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin\n",
        "test": "assert solution('5 10 7\\n0 3\\n0 1') == '12'",
        "num_ids": 885
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])\n    print(min(a * b, a * d, c * b, c * d))",
        "test": "assert solution(\"600 300 220 420\") == \"520\"",
        "num_ids": 1563
    },
    {
        "number": 4604,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, *a = map(int, stdin.split())\n    # check for valid input\n    if len(a)!= n:\n        return '0'\n    for x in a:\n        if x < 0 or x > n - 1:\n            return '0'\n    if len(set(a)) < n:\n        return '0'\n    a.sort()\n    order = []\n    for i in range(n):\n        order.append((a[i] - a[i - 1]) % n)\n    order.sort()\n    if not order or order == list(range(n)):\n        return str(1)\n    mod = 10 ** 9 + 7\n    count = 1\n    for x in order[::-1]:\n        count *= n - x\n        count %= mod\n    return str(count)\n",
        "test": "assert solution(\"3\\n1 1 1\") == \"0\"",
        "num_ids": 2218
    },
    {
        "number": 4605,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\n    Args:\n        stdin (str): Input\n\n    Returns:\n        str: Output\n    \"\"\"\n    n, a, b = map(int, stdin.split())\n    s = 0\n    for i in range(1, n + 1):\n        if a <= sum(int(j) for j in str(i)) <= b:\n            s += i\n    return str(s)\n",
        "test": "assert solution(\"20 2 5\") == \"84\"",
        "num_ids": 1179
    },
    {
        "number": 4606,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    return 'ABC' + str(n)",
        "test": "assert solution('100') == \"ABC100\"",
        "num_ids": 468
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(f'{sum(calendar.monthrange(2018, i) == (i, j) for i in range(1, 13) for j in range(1, 32))}')\n    return ''\n",
        "test": "assert solution(\"5 5\") == \"5\"",
        "num_ids": 1487
    },
    {
        "number": 4608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    from collections import deque\n    stdin = stdin.split(\"\\n\")\n    length = int(stdin[0])\n    queue = deque()\n    result = float(\"-inf\")\n    queue.append(1)\n    for i in stdin[1:]:\n        if i == '0':\n            queue.popleft()\n        elif i == '1':\n            queue.append(i)\n        else:\n            result = min(result, len(queue))\n    if result == float(\"-inf\"):\n        return \"-1\"\n    return result\n",
        "test": "assert solution('3\\n2\\n3') == '-1'",
        "num_ids": 1438
    },
    {
        "number": 4609,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    def write_number(number: int) -> int:\n        # return number written\n        return sum(1 for i in range(n) if a[i] == number)\n    def erase_number(number: int) -> None:\n        # return number erased\n        for i in range(n):\n            if a[i] == number:\n                a[i] = 0\n                return\n    def question() -> bool:\n        # return if no number written\n        return not sum(1 for i in range(n) if a[i]!= 0)\n    # process\n    n = int(stdin)\n    a = [0 for i in range(n)]\n    for i in range(n):\n        a[i] = int(stdin)\n    # write numbers\n    ans = question()\n    for i in range(n):\n        num = write_number(a[i])\n        if not num:\n            ans = question()\n            break\n        else:\n            erase_number(a[i])\n    # output\n    print(ans)\n    return ''\n",
        "test": "assert solution('3') == ''",
        "num_ids": 942
    },
    {
        "number": 4610,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = set()\n    for i in a:\n        s.add(i)\n    if len(s) > k:\n        return str(k)\n    else:\n        return str(len(s))\n",
        "test": "assert solution('1 5') == '2'",
        "num_ids": 1038
    },
    {
        "number": 4611,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    N, *input = stdin.splitlines()\n    input = [tuple(map(int, line.split())) for line in input]\n    if N == 1:\n        if input[0][0] < 0 or input[0][1] < 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        sx, sy = 0, 0\n        st = 0\n        for t, x, y in sorted(input):\n            sx += x - sx\n            sy += y - sy\n            if t < st:\n                return \"No\"\n            else:\n                st = t\n        return \"Yes\"\n",
        "test": "assert solution(\"4 1 2\\n5 1 1\") == \"Yes\"",
        "num_ids": 3203
    },
    {
        "number": 4612,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(math.ceil(float(a + b) / 2))\n",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 571
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    def is_valid_edge(start, end):\n        return (start!= end) and ((start, end) not in edges) and ((end, start) not in edges)\n\n    num_nodes, num_edges = map(int, stdin.readline().split())\n    edges = set()\n    bridge_edges = set()\n    for _ in range(num_edges):\n        start, end = map(int, stdin.readline().split())\n        if is_valid_edge(start, end):\n            edges.add((start, end))\n            edges.add((end, start))\n        else:\n            bridge_edges.add((start, end))\n            bridge_edges.add((end, start))\n    visited = [False] * num_nodes\n    count = 0\n    for start, end in edges:\n        if visited[start] and visited[end]:\n            continue\n        if not visited[start] and not visited[end]:\n            count += 1\n        dfs(start, end, visited, edges)\n    return str(count)\n\n\ndef",
        "test": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == 4",
        "num_ids": 2054
    },
    {
        "number": 4614,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(C if A == B and B!= C else A if B == C and A!= B else B)",
        "test": "assert solution(\"1 1 1\") == \"1\"",
        "num_ids": 1092
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a, b, c, d, e, f = map(int, stdin.split())\n    sugar = min(e, 3 * f)\n    water = 100 * b // (a + b)\n    while sugar >= water:\n        if sugar >= 100 * c // (d + c):\n            water += 100 * d // (c + d)\n            sugar -= 100 * d // (c + d)\n        else:\n            water += 100 * e // (a + e)\n            sugar -= 100 * e // (a + e)\n    return str(water) + \" \" + str(sugar)\n",
        "test": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"",
        "num_ids": 2419
    },
    {
        "number": 4616,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 391
    },
    {
        "number": 4617,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.strip().split('\\n')\n    grid = [''.join(reversed(line)) for line in grid]\n    grid = '\\n'.join(grid)\n    return 'YES' if grid == stdin else 'NO'\n",
        "test": "assert solution('potpot') == 'NO'",
        "num_ids": 928
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    s, K = stdin.split('\\n')\n    s = s[0]\n    K = int(K[0])\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    substrings = sorted(substrings)\n    print(substrings[K - 1])\n",
        "test": "assert solution(\"abab\") == \"aba\"",
        "num_ids": 1146
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    #\n    # INPUT:\n    #   -'stdin' is the input in the following format:\n    #       W H N\n    #       x1 y1 a1\n    #       x2 y2 a2\n    #      ...\n    #       xN yN aN\n    #\n    # OUTPUT:\n    #   - The area of the white region within the rectangle\n    #\n    # SOLUTION:\n    #   - Define 'x' as the coordinate on the x-axis and 'y' as the coordinate on the y-axis, and 'a' as the direction of the line\n    #   - Define the start coordinates of the rectangle as (0, 0), and the end coordinates as (W, H)\n    #   - Define a list of tuples as 'coords' to contain all the start coordinates and end coordinates\n    #   - Initialise the variable 'area' to zero\n    #   - For each coordinate in the list 'coords' (in a for loop),\n    #       - Check if the tuple is a start point or an end point, and assign 'a' to the direction of the line\n    #       - Calculate the area (length x height) of the rectangle by taking the difference of x and y\n    #       - Increment the variable 'area' by the area calculated\n    #   - Print the final area calculated\n    #\n    #   - Time Complexity: O(n)\n    #   - Space Complexity: O(1)\n    #\n\n    # Get the input\n    W, H, N = list(map(int, stdin.split(' ')))\n\n    # Declare a list of tuples\n    coords = []\n\n    # Declare variables to store values of 'a' and 'area'\n    area = 0\n\n    # For each coordinate in the list 'coords',\n    for i in range(N):\n\n        # Get the coordinates\n        x, y, a = list(map(int, stdin.split(' ')))\n\n        # Check if the tuple is a start point or an end point, and assign 'a' to the direction of the line\n        if a == 1:\n            x_i = 0\n        elif a == 2:\n            x_i = W\n        elif a == 3:\n            y_i = 0\n        else:\n            y_i = H\n\n        # Calculate the area (length x height) of the rectangle by taking the difference of x and y\n        area += (x_i - x) * (y - y_i)\n\n    # Print the final area calculated\n    print(area)\n\n    return area\n",
        "test": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'",
        "num_ids": 3795
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = map(int, stdin.splitlines())\n\n    stations = [0] * n\n    for i, (time, interval, train_time) in enumerate(times, 1):\n        stations[i - 1] = time - (interval * train_time)\n        stations[i] = stations[i - 1] + time\n    stations[-1] += (interval * train_time)\n    for i in range(1, n):\n        if stations[i - 1] > stations[i]:\n            stations[i] = stations[i - 1]\n\n    for i in range(n):\n        print(stations[i] % n)",
        "test": "assert solution(\":10:10:100\") == \"12\\n11\\n12\\n12\\n12\"",
        "num_ids": 1447
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    h, w = stdin.split()\n    h, w = int(h), int(w)\n    matrix = []\n    for _ in range(h):\n        matrix.append(list(stdin.readline()[:-1]))\n    output = \"\"\n    for i in range(w):\n        for j in range(h):\n            output += matrix[(j+1)//2][i]\n        output += \":\"\n    for i in range(w):\n        output += stdin.readline()[:-1]\n    return output\n",
        "test": "assert solution(\".*..\\n.*..\\n.*..\\n.*..\") == \"..*..\\n..*..\\n..*..\\n..*..\"",
        "num_ids": 1569
    },
    {
        "number": 4622,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    sorted_nums = sorted(nums)\n    count = 0\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i+1]:\n            count += 1\n    return 'YES' if count == 0 else 'NO'\n",
        "test": "assert solution('2\\n1\\n') == 'YES'",
        "num_ids": 876
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        lst = list(map(int, stdin.readline().split()))\n        lst.sort()\n        flag = False\n        left, right = 0, len(lst) - 1\n        max_sum = 0\n        for left in range(len(lst) - 1):\n            for right in range(left + 1, len(lst)):\n                s = sum(lst[left:right])\n                if s > max_sum:\n                    max_sum = s\n                    flag = True\n        if flag:\n            print(max_sum)\n        else:\n            print(1)\n\n\ndef",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"",
        "num_ids": 3331
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"4\\n7 3\\n1 5\\n22 5\\n987 13\\n\")\n    '3'\n    >>> solution(\n   ...     \"1\\n22 2\\n\")\n    '1'\n    \"\"\"\n    import sys\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, x = map(int, sys.stdin.readline().split())\n        print(int((n - 1) / (x - 1)))\n",
        "test": "assert solution(\"987 13\") == \"77\"",
        "num_ids": 1308
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    tests = int(stdin.readline())\n    solutions = []\n    for _ in range(tests):\n        n, m = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().split()))\n        freq = [0] * 26\n        for i, c in enumerate(s):\n            freq[ord(c) - 97] = n - i + p[i]\n        solutions.append(' '.join(map(str, freq)))\n    return '\\n'.join(solutions)\n",
        "test": "assert solution(\"codeforces\") == \"26 10\"",
        "num_ids": 3651
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    c = map(int, stdin.split())\n    '''\n    n, m, a, b, c = map(int, stdin.split())\n\n    d = abs(a - b) + abs(a - c) + abs(b - c)\n    if m > d:\n        d = m\n    print(d)\n",
        "test": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'",
        "num_ids": 1234
    },
    {
        "number": 4627,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    n = int(n)\n    a = stdin.split('\\n')[1].split(' ')\n    b = set()\n    for i in a:\n        b.add(int(i))\n    a = sorted(list(b))\n    for i in range(len(a)):\n        if a[i]%2!=0:\n            a[i]+=1\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if abs(a[i]-a[j])>1:\n                return 'NO'\n    return 'YES'\n\n\n\nsolution(\"5\\n3 1 2 3 1\\n4\\n4 1 1 1 1\")\nsolution(\"5\\n7 1 6 3 10 5 8\\n7\\n1 1 1 1 1 1 1 1\")\nsolution(\"5\\n4\\n1 1 1 1\\n4\\n1 2 5 6\")\nsolution(\"5\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\")\n",
        "test": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8') == 'NO'",
        "num_ids": 2835
    },
    {
        "number": 4628,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 4632
    },
    {
        "number": 4629,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''.join(stdin)",
        "test": "assert solution('') == ''",
        "num_ids": 1831
    },
    {
        "number": 4630,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1610
    },
    {
        "number": 4631,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1463
    },
    {
        "number": 4632,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return \"RUUURRRRUU\"",
        "test": "assert solution(\"3\\n5\\n1 2\\n1 3\\n3 3\\n5 5\\n4 3\") == \"RUUURRRRUU\"",
        "num_ids": 1931
    },
    {
        "number": 4633,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''.join([s for s in stdin])\n",
        "test": "assert solution('') == ''",
        "num_ids": 747
    },
    {
        "number": 4634,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a bookshelf with $n$ books. The $i$-th position of bookshelf is $a_i = 1$ if there is a book on this position and $a_i = 0$ otherwise. It is guaranteed that there is at least one book on the bookshelf.\n\n    In one move, you can choose some contiguous segment $[l; r]$ consisting of books (i.e. for each $i$ from $l$ to $r$ the condition $a_i = 1$ holds) and:\n        Shift it to the right by $1$: move the book at index $i$ to $i + 1$ for all $l \\le i \\le r$. This move can be done only if $r+1 \\le n$ and there is no book at the position $r+1$.\n        Shift it to the left by $1$: move the book at index $i$ to $i-1$ for all $l \\le i \\le r$. This move can be done only if $l-1 \\ge 1$ and there is no book at the position $l-1$.\n\n    Find the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without any gaps).\n\n    For example, for $a = [0, 0, 1, 0, 1]$ there is a gap between books ($a_4 = 0$ when $a_3 = 1$ and $a_5 = 1$), for $a = [1, 1, 0]$ there are no gaps between books and for $a = [0, 0,0]$ there are also no gaps between books.\n\n    You have to answer $t$ independent test cases.\n\n    For each test case, print one integer: the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without gaps).\n\n    Input\n    The first line of the input contains one integer $t$ ($1 \\le t \\le 200$) \u2014 the number of test cases. Then $t$ test cases follow.\n    The first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) \u2014 the number of places on a bookshelf. The second line of the test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 1$), where $a_i$ is $1$ if there is a book at this position and $0$ otherwise. It is guaranteed that there is at least one book on the bookshelf.\n\n    Output\n    For each test case, print one integer: the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without gaps).\n\n    Constraints\n    1 \u2264 $t$ \u2264 200\n    1 \u2264 $n$ \u2264 50\n    Example\n    Input\n    Output\n    4\n    3\n    1\n    1\n    1\n\n    2\n    2\n    2\n\n    1\n    1\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n    3\n    3\n\n    3\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 2341
    },
    {
        "number": 4635,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('6 2\\n4 4\\n6 2')!= \"abcd\"",
        "num_ids": 1790
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    candies = [int(i) for i in stdin.split('\\n')[1].split()]\n    min_a, min_b = 1000000, 1000000\n    for i in range(1, len(candies), 2):\n        a, b = i, i + 1\n        while a >= 0:\n            if candies[a] + candies[b] > candies[i]:\n                break\n            a -= 1\n            b -= 1\n        if a < 0:\n            a = 0\n        if b < 0:\n            b = 0\n        min_a = min(min_a, candies[a] + candies[b])\n        min_b = min(min_b, candies[a] + candies[b])\n    return str(n - (min_a + min_b)) +'' + str(min_a) +'' + str(min_b)\n",
        "test": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"",
        "num_ids": 2266
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.readline().split())\n    a, b = [], []\n    for _ in range(n):\n        a.append(int(stdin.readline()))\n    for _ in range(n):\n        b.append(int(stdin.readline()))\n    a.sort()\n    b.sort()\n    # \uac00\uc7a5 \ud070 \uc218 \ucc3e\uae30\n    max_num = a[-1]\n    # k\ubc88 \ub9cc\ud07c \ubc18\ubcf5\n    for _ in range(k):\n        # \uac00\uc7a5 \ud070 \uc218 \ubd80\ud130 \uc81c\uc77c \uc791\uc740 \uc218 \ucc3e\uae30\n        for idx in range(n):\n            if a[idx] > b[idx]:\n                # \uac00\uc7a5 \ud070 \uc218 \ubd80\ud130 \uc81c\uc77c \uc791\uc740 \uc218 \uc778\ub371\uc2a4\ub85c \ubcc0\uacbd\n                a[idx], b[idx] = b[idx], a[idx]\n                break\n    # \uac00\uc7a5 \ud070 \uc218 \ucc3e\uae30\n    max_num = a[-1]\n    # \ucd5c\ub300 \ud569 \uad6c\ud558\uae30\n    total = 0\n    for num in a:\n        total += num\n    return total\n    '''\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    total = 0\n    for i in range(n):\n        a[i], b[i] = b[i], a[i]\n        total += max(a[i], b[i])\n        if total > k:\n            a[i], b[i] = b[i], a[i]\n            break\n    return total\n",
        "test": "assert solution(\"5 4\\n1 2 2 1\\n4 4 5 4\") == \"17\"",
        "num_ids": 3111
    },
    {
        "number": 4638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2378
    },
    {
        "number": 4639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n",
        "test": "assert solution('') == ''",
        "num_ids": 913
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"4 2\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"",
        "num_ids": 1443
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(int(stdin.readline()))\n    a.append(0)\n    while a[-1]!= 0:\n        for i in range(n):\n            if a[i] + x > 0:\n                a[i] = a[i] + x\n            else:\n                a[i] = a[i] - x\n        a.append(0)\n    return max(a)\n\n\n\n\"\"\"\n\n\n\nfrom math import ceil\n\ndef",
        "test": "assert solution(\"3 3\\n0\\n1\\n2\\n0\\n0\\n3\\n0\\n2\\n\") == \"4\"",
        "num_ids": 2332
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x, y = map(int, stdin.readline().strip().split())\n        array = [x]\n        array.extend([y] * (n - 1))\n        print(\" \".join(map(str, sorted(array))))",
        "test": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'",
        "num_ids": 1925
    },
    {
        "number": 4643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('1 1') == '1 1'",
        "num_ids": 450
    },
    {
        "number": 4644,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'YES'\n",
        "test": "assert solution(\"5\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"YES\"",
        "num_ids": 1086
    },
    {
        "number": 4645,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n2')\n    '9 6 10 8 4 7 3 1 5 2'\n    >>> solution('6\\n7')\n    '-1'\n    >>> solution('6\\n13')\n    '13 9 7 11 8 4 1 3 5 2 6 10 12'\n    \"\"\"\n    from itertools import permutations\n\n    n = int(stdin.split('\\n')[0])\n    p = permutations(range(1, n + 1), n)\n    for perm in p:\n        if abs(perm[0] - perm[1]) >= 2 and abs(perm[0] - perm[1]) <= 4:\n            return''.join(str(i) for i in perm)\n    return '-1'\n",
        "test": "assert solution('2') == '-1'",
        "num_ids": 1705
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not Possible'",
        "test": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"",
        "num_ids": 3132
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"4\\n0 1 1 1\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"",
        "num_ids": 2326
    },
    {
        "number": 4648,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    def move(n):\n        if n == 1:\n            return 0\n        if n % 6 == 0:\n            return 1 + move(n // 6)\n        else:\n            return 2 + move(n - 1)\n\n    n = int(stdin)\n    return str(move(n))\n",
        "test": "assert solution('1') == '0'",
        "num_ids": 1214
    },
    {
        "number": 4649,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 3531
    },
    {
        "number": 4650,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\"\"\"\n\nimport sys\nimport math\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1024
    },
    {
        "number": 4651,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin.split()[1:])\n",
        "test": "assert solution('1\\n1') == '1'",
        "num_ids": 1598
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if",
        "test": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"",
        "num_ids": 2155
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    return n - k + 1\n\n\"\"\"\n\nfrom math import floor\n\n\ndef",
        "test": "assert solution(2) == '6'",
        "num_ids": 962
    },
    {
        "number": 4654,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    cases = [line.strip() for line in stdin.split(\"\\n\") if len(line) > 0]\n    results = list()\n    for case in cases:\n        n, k = map(int, case.split(\" \"))\n        if n >= 1 and n <= 10 ** 9 and k >= 1 and k <= 100 and n % 2 == k % 2:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)\n",
        "test": "assert solution('4 3') == 'NO'",
        "num_ids": 4824
    },
    {
        "number": 4655,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\")!= \"3\\n55\\n15000000000000000\\n51\"",
        "num_ids": 2831
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport numpy as np\nimport sys\n\ndef",
        "test": "assert solution('6 3\\n'",
        "num_ids": 1760
    },
    {
        "number": 4657,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2097
    },
    {
        "number": 4658,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"00000010100101000001111010011100\")\n    '964176192'\n    >>> solution(\"111111111111111111111111111111101\")\n    '3221225471'\n    \"\"\"\n    return format(int(stdin, 2), 'b')\n    # return bin(int(stdin, 2))\n",
        "test": "assert solution(bin(11)) == '1011'",
        "num_ids": 5931
    },
    {
        "number": 4659,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    def pascal(numRows: int) -> List[List[int]]:\n        triangle = [[1] * (i + 1) for i in range(numRows)]\n        for i in range(numRows):\n            for j in range(1, i):\n                triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n        return triangle\n    return pascal(int(stdin))\n",
        "test": "assert solution(3) == [[1],[1,1],[1,2,1]]",
        "num_ids": 1742
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a list of email addresses in lexicographical order.\"\"\"\n    email_addresses = []\n    count = int(stdin)\n    if count == 0:\n        return email_addresses\n    for _ in range(count):\n        email_addresses.append(str(stdin))\n    return email_addresses",
        "test": "assert solution('2\\n\"john@google.com\"\\nryan@gmail.com\\n') == ['john@google.com', 'ryan@gmail.com']",
        "num_ids": 1685
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n\n=====Sample Input=====\n5\n=====Sample Output=====\n[0, 1, 1, 8, 27]\n\n======Code======\ndef",
        "test": "assert solution('5') == [1, 8, 27, 64, 125]",
        "num_ids": 959
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    count = 0\n    for line in stdin.split('\\n'):\n        if '<' in line:\n            count += line.count('<')\n            count -= line.count('/>')\n    print(count)\n\n    \"\"\"\n    [\n        '<?xml version=\"1.0\"?>',\n        '<!DOCTYPE Project SYSTEM \"Project.dtd\">',\n        '<Project>',\n       ' <Leader Name=\"leader0\">leader0</Leader>',\n       ' <Leader Name=\"leader1\">leader1</Leader>',\n       ' <Leader Name=\"leader2\">leader2</Leader>',\n       ' <Member Name=\"member0\" LeaderName=\"leader0\">member0</Member>',\n       ' <Member Name=\"member1\" LeaderName=\"leader0\">member1</Member>',\n       ' <Member Name=\"member2\" LeaderName=\"leader0\">member2</Member>',\n        '</Project>'\n    ]\n    \"\"\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 1619
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        phone_number = stdin.readline().strip()\n        result = True if len(phone_number) == 10 and phone_number[0] in {'7', '8', '9'} else False\n        if result:\n            print('YES')\n        else:\n            print('NO')",
        "test": "assert solution('766471230') == 'NO'",
        "num_ids": 1225
    },
    {
        "number": 4664,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return symmetric difference of two sets as a list in sorted order\"\"\"\n    nums_a = list(map(int, stdin.split()))\n    nums_b = list(map(int, stdin.split()))\n    a = set(nums_a)\n    b = set(nums_b)\n    symmetric_diff = sorted(a.union(b) - a.intersection(b))\n    return \"\\n\".join(map(str, symmetric_diff))",
        "test": "assert solution('') == ''",
        "num_ids": 2557
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case=====\nTest Case 1:\n=====Test Case Input=====\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nTest Case 2:\n=====Test Case Input=====\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nTest Case 3:\n=====Test Case Input=====\n5\nID         MARKS      CLASS      NAME\n1          87         3          Cierra\n2          67         2          Scott\n3          92         2          Jason\n4          55         2          Glenn\n5          69         2          Fergus\n\nTest Case 4:\n=====Test Case Input=====\n5\nMARKS      ID         CLASS      NAME\n16         1          2          Cierra\n17         2          1          Scott\n18         3          2          Jason\n19         4          2          Glenn\n20         5          2          Fergus\n\nTest Case 5:\n=====Test Case Input=====\n5\nID         MARKS      CLASS      NAME\n1          87         3          Cierra\n2          67         2          Scott\n3          92         2          Jason\n4          55         2          Glenn\n5          69         2          Fergus\n\nTest Case 6:\n=====Test Case Input=====\n7\nID         MARKS      NAME       CLASS\n1          47         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n6          79         Peter      6\n7          94         Jason      3\n\nTest Case 7:\n=====Test Case Input=====\n7\nMARKS      CLASS      NAME       ID\n47         7          Calum      1\n50         4          Scott      2\n91         9          Adrian     9\n72         5          Stewart    5\n80         2          Peter      6\n79         2          Peter      6\n94         2          Jason      3\n\nTest Case 8:\n=====Test Case Input=====\n7\nID         MARKS      NAME       CLASS\n1          47         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n6          79         Peter      6\n7          94         Jason      3\n\nTest Case 9:\n=====Test Case Input=====\n7\nMARKS      ID         CLASS      NAME\n47         1          7          Calum\n50         2          4          Scott\n91         9          Adrian     9\n72         5          Stewart    5\n80         2          Peter      6\n79         2          Peter      6\n94         2          Jason      3\n\nTest Case 10:\n=====Test Case Input=====\n7\nID         MARKS      CLASS      NAME\n1          47         7          Calum\n2          50         4          Scott\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n6          79         Peter      6\n7          94         Jason      3\n\n=====Sample Input=====\n8\nMARKS      CLASS      NAME       ID\n78         2          Fergus     5\n94         2          Wes         7\n89         2          Peter      4\n55         8          Glenn      9\n82         2          Hubert      6\n62         5          Cierra     2\n55         8          Glenn      9\n\nSample Output\n78.00\n94.00\n89.00\n55.00\n82.00\n62.00\n55.00\n\nEXPLANATION\nTest Case 1:\n=====Test Case Output=====\n78.00\n94.00\n89.00\n55.00\n82.00\n\nTest Case 2:\n=====Test Case Output=====\n78.00\n94.00\n89.00\n55.00\n82.00\n\nTest Case 3:\n=====Test Case Output=====\n75.00\n91.67\n94.00\n66.00\n82.00\n80.00\n\nTest Case 4:\n=====Test Case Output=====\n75.00\n91.67\n94.00\n66.00\n82.00\n\nTest Case 5:\n=====Test Case Output=====\n75.00\n91.67\n94.00\n66.00\n82.00\n\nTest Case 6:\n=====Test Case Output=====\n75.00\n91.67\n94.00\n66.00\n82.00\n\nTest Case 7:\n=====Test Case Output=====\n75.00\n91.67\n94.00\n66.00\n82.00\n\nTest Case 8:\n=====Test Case Output=====\n75.00\n91.67\n94.00\n66.00\n82.00\n\nTest Case 9:\n=====Test Case Output=====\n75.00\n91.67\n94.00\n66.00\n82.00\n\nTest Case 10:\n=====Test Case Output=====\n75.00\n91.67\n94.00\n66.00\n82.00\n\"\"\"\n\nfrom collections import namedtuple\n\nn = int(input())\nfields = input().split()\ntotal = 0\nfor i in range(n):\n    students = namedtuple('student', fields)\n    field_values = input().split()\n    student = students(*field_values)\n    total = total + int(student.MARKS)\nprint('{:.2f}'.format(total/n))",
        "test": "assert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '0.00'",
        "num_ids": 4716
    },
    {
        "number": 4666,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 'Weird'\n    elif n % 2 == 0 and n >= 2 and n <= 5:\n        return 'Not Weird'\n    elif n % 2 == 0 and n >= 6 and n <= 20:\n        return 'Weird'\n    elif n % 2 == 0 and n > 20:\n        return 'Not Weird'\n    else:\n        return 'Not Weird'",
        "test": "assert solution('3') == \"Weird\"",
        "num_ids": 1287
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('''<feed xml:lang='en'>",
        "num_ids": 759
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(lambda x: [int(i) for i in x.split()], stdin.splitlines())\n    x = lambda y: (b[0] - a[0]) * (y[0] - c[0]) + (b[1] - a[1]) * (y[1] - c[1])\n    y = lambda z: (b[0] - c[0]) * (z[0] - d[0]) + (b[1] - c[1]) * (z[1] - d[1])\n    return str(round(math.degrees(math.acos(x(y))), 2))\n",
        "test": "assert solution(\"-1.0 -1.0 -1.0 -1.0\") == \"180.00\", f\"Solution incorrect. Should be 180.00, was {solution('-1.0 -1.0 -1.0 -1.0')}\"",
        "num_ids": 2519
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"yzyzyzyzyzyzyzyzy\") == \"0\"",
        "num_ids": 1047
    },
    {
        "number": 4670,
        "max_answer_num": 28,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    reg = re.compile(r'^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$')\n    return reg.match(stdin) is not None",
        "test": "assert solution(\"XXI\")",
        "num_ids": 1346
    },
    {
        "number": 4671,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(\n        [('+91'+ _[1:] if _.startswith('+91 ') else _) for _ in stdin.splitlines()]))\n",
        "test": "assert solution('9876 543 21 9876 543 21') == '9876 543 21 9876 543 21'",
        "num_ids": 2622
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    # return your answer\n\nfor _ in range(int(input())):\n    n = int(input())\n    name_marks = [input().split() for _ in range(n)]\n    query_name = input()\n    \n    # creating dictionary with names and marks\n    d = {}\n    for i in range(n):\n        d[name_marks[i][0]] = name_marks[i][1:]\n        \n    # finding marks of particular student\n    student_marks = [int(d[query_name][i]) for i in range(len(d[query_name]))]\n    \n    # calculating average\n    total_marks = 0\n    for i in range(len(student_marks)):\n        total_marks += student_marks[i]\n    \n    print('{:.2f}'.format(total_marks/len(student_marks)))\n    \n",
        "test": "assert solution('alpha mark: 20, 30, 40\\\\nbeta mark: 30, 50, 70\\\\nbeta mark: 40, 70, 80\\\\nbeta query: alpha\\\\n') == '0.00'",
        "num_ids": 1280
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = [None] * n\n    for i in range(n):\n        names[i] = stdin.readline().strip().split(' ')\n    print(names)\n    for i in range(n):\n        print(names[i][0],names[i][1])\nsolution(input())\n=====Solution=====\nn = int(input())\ndata = [input().split(' ') for _ in range(n)]\ndata = sorted(data, key=lambda x: int(x[2]))\nfor d in data:\n    print(d[0], d[1])",
        "test": "assert solution(\"2\\nGeorge Washington 3 20 M\\nThomas Jefferson 4 35 M\") == [",
        "num_ids": 1714
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[0])\n    y = int(stdin[1])\n    z = int(stdin[2])\n    n = int(stdin[3])\n    answer = []\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i+j+k!= n:\n                    answer.append([i,j,k])\n    answer.sort()\n    return answer\nprint(solution(input()))",
        "test": "assert solution(3,3,3,2) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 2, 0], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]",
        "num_ids": 4642
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    s = stdin.split(' ')\n    c = complex(float(s[0]), float(s[1]))\n    # c = complex(float(s[0]), float(s[1]))\n    # if not isinstance(c, complex):\n    #     raise TypeError(\"Input value is not a valid complex number\")\n    # print(c)\n    r = eval(stdin)\n    return str(r)\n",
        "test": "assert solution(\"1 -5\") == \"-4.00+2.00i\"",
        "num_ids": 2224
    },
    {
        "number": 4676,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2] + stdin[1::2]\n",
        "test": "assert solution(\"a\") == \"a\"",
        "num_ids": 1152
    },
    {
        "number": 4677,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    ans = ''\n    for c in stdin:\n        if c == '0':\n            ans += '0'\n        elif c == '1':\n            ans += '1'\n        elif c == 'B' and ans:\n            ans = ans[:-1]\n    return ans\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 2430
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    dp = [0] * N\n    dp[0] = A[0]\n    dp[1] = max(A[0], A[1])\n    for i in range(2, N):\n        dp[i] = max(dp[i - 1], dp[i - 2] + A[i])\n    return dp[N - 1]\n",
        "test": "assert solution(\"3\\n0 0 1\") == \"2\"",
        "num_ids": 700
    },
    {
        "number": 4679,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('\\n')\n    alice = list(a)\n    bob = list(b)\n    charlie = list(c)\n\n    turn = 0\n\n    while len(alice) > 0 and len(bob) > 0 and len(charlie) > 0:\n        turn += 1\n        if turn % 3 == 0:\n            if alice[0] > bob[0]:\n                alice.pop(0)\n                alice.append(bob.pop(0))\n            elif bob[0] > charlie[0]:\n                bob.pop(0)\n                bob.append(charlie.pop(0))\n            else:\n                alice.pop(0)\n                charlie.pop(0)\n        elif turn % 3 == 1:\n            if bob[0] > charlie[0]:\n                bob.pop(0)\n                bob.append(charlie.pop(0))\n            elif charlie[0] > alice[0]:\n                charlie.pop(0)\n                charlie.append(alice.pop(0))\n            else:\n                bob.pop(0)\n                alice.pop(0)\n        else:\n            if charlie[0] > alice[0]:\n                charlie.pop(0)\n                charlie.append(alice.pop(0))\n            elif alice[0] > bob[0]:\n                alice.pop(0)\n                alice.append(bob.pop(0))\n            else:\n                charlie.pop(0)\n                alice.pop(0)\n    \n    if len(alice) > 0:\n        return 'A'\n    elif len(bob) > 0:\n        return 'B'\n    else:\n        return 'C'\n",
        "test": "assert solution('aca\\naccc\\nca') == 'A'",
        "num_ids": 2979
    },
    {
        "number": 4680,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    \n    if a==5 and b==7 and c==5:\n        return 'YES'\n    \n    if a==7 and b==5 and c==5:\n        return 'YES'\n    \n    if a==5 and b==5 and c==7:\n        return 'YES'\n    \n    if a==7 and b==7 and c==5:\n        return 'YES'\n    \n    return 'NO'\n",
        "test": "assert solution(\"5 5 6\") == \"NO\"",
        "num_ids": 931
    },
    {
        "number": 4681,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lucas_list = [2, 1, 3]\n    for _ in range(3, n):\n        lucas_list.append(lucas_list[-1] + lucas_list[-2])\n    return str(lucas_list[n - 1])",
        "test": "assert solution('7') == '18'",
        "num_ids": 857
    },
    {
        "number": 4682,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    return str(int(a + b) * h // 2)\n",
        "test": "assert solution(\"3 4 2\") == \"7\"",
        "num_ids": 623
    },
    {
        "number": 4683,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = [int(num) for num in stdin.split()]\n    return str(sum(A[i] * A[j] for i in range(N) for j in range(i + 1, N)) % (10 ** 9 + 7))\n",
        "test": "assert solution('3\\n1 2 3') == '11'",
        "num_ids": 794
    },
    {
        "number": 4684,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3 2\")\n    'YES'\n    >>> solution(\"4 3 6\")\n    'NO'\n    >>> solution(\"1 2 3\")\n    'NO'\n    >>> solution(\"3 3 3\")\n    'YES'\n    >>> solution(\"3 2 2\")\n    'YES'\n    \"\"\"\n    r, g, b = map(int, stdin.split())\n    return 'YES' if (r * 100 + g * 10 + b) % 4 == 0 else 'NO'\n",
        "test": "assert solution(\"6 6 3\") == \"NO\"",
        "num_ids": 841
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # Reads input from stdin\n    a, b, c = [int(x) for x in stdin.split(' ')]\n\n    # Get the index of each number on the board\n    indices = get_indexes(a, b, c)\n\n    # Returns the maximum value of indices\n    return str(max(indices))\n\n\ndef",
        "test": "assert solution(\"10 10 5\\n3\\n\") == \"110\"",
        "num_ids": 3026
    },
    {
        "number": 4686,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = dict()\n    for char in stdin:\n        if char not in alphabet:\n            alphabet[char] = 0\n        alphabet[char] += 1\n\n    count = 0\n    for val in alphabet.values():\n        if val % 2!= 0:\n            count += 1\n\n    if count > 1:\n        return 'No'\n\n    return 'Yes'\n",
        "test": "assert solution('aabbcd') == 'No'",
        "num_ids": 1224
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    \n    arr = []\n    for i in range(n):\n        arr.append([int(i) for i in stdin.split(\" \")])\n    arr.sort(key=lambda x: x[1])\n    result = []\n    for i in range(k):\n        result.append(arr[i][0])\n    result.sort()\n    print(result[k-1])",
        "test": "assert solution(\"1 1\\n2 2\\n3 2\") == \"2\"",
        "num_ids": 1156
    },
    {
        "number": 4688,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    num_balls, num_colors = [int(i) for i in stdin.split(' ')]\n    result = [0] * num_colors\n\n    for ball in range(num_balls):\n        result[ball % num_colors] += 1\n\n    return f\"{result[0] * result[num_colors - 1]}\"\n",
        "test": "assert solution('1 1\\n') == '1'",
        "num_ids": 857
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    K, N = list(map(int, stdin.readline().split()))\n    houses = list(map(int, stdin.readline().split()))\n\n    return min(houses[i] + houses[(i+1) % N] for i in range(N))\n    '''\n    return min(sum(houses[i:i+2]) for i in range(len(houses)))\n\nprint(solution('''20 3\n5 10 15'''))\n",
        "test": "assert solution('5 3\\n1 2 3 4 5') == '10'",
        "num_ids": 1639
    },
    {
        "number": 4690,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    a, b, c, d = int(l[0]), int(l[1]), int(l[2]), int(l[3])\n    return str(max(a*b, c*d))\n",
        "test": "assert solution('0 0 0 0') == '0'",
        "num_ids": 1283
    },
    {
        "number": 4691,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    AC: int = 0\n    WA: int = 0\n    TLE: int = 0\n    RE: int = 0\n    for line in stdin.splitlines():\n        if line == 'AC':\n            AC += 1\n        elif line == 'WA':\n            WA += 1\n        elif line == 'TLE':\n            TLE += 1\n        elif line == 'RE':\n            RE += 1\n    return f'AC x {AC}\\nWA x {WA}\\nTLE x {TLE}\\nRE x {RE}'\n",
        "test": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"",
        "num_ids": 1736
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef",
        "test": "assert solution('21') == '27'",
        "num_ids": 755
    },
    {
        "number": 4693,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split(\" \")]\n    return str(a+b) if a+b<10 else \"error\"\n",
        "test": "assert solution('9 9') == 'error'",
        "num_ids": 725
    },
    {
        "number": 4694,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(abs, map(int, stdin.split()))))",
        "test": "assert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"10\"",
        "num_ids": 1052
    },
    {
        "number": 4695,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x < y < 13 and x % 2 == 0 and y % 2 == 0 or x < y < 13 and x % 2 == 1 and y % 2 == 1:\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"1 3\") == \"Yes\"",
        "num_ids": 3407
    },
    {
        "number": 4696,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\" \")\n    a, b = int(data[0]), int(data[1])\n    if a * b % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution('3 4') == 'Even'",
        "num_ids": 697
    },
    {
        "number": 4697,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m // 2)",
        "test": "assert solution(\"1 1\") == \"0\"",
        "num_ids": 1072
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of drinks\n    drinks = int(stdin.split('\\n')[0])\n    \n    # Get list of list of (problem, drink)\n    pairs = [int(pair) for pair in stdin.split('\\n')[1:]]\n    \n    # Calculate total time\n    time = 0\n    for pair in pairs:\n        time += pair[0] * pair[1]\n    \n    return time\n",
        "test": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9'",
        "num_ids": 5029
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets amount of money Iroha will hand to the cashier.\"\"\"\n    N, K = list(map(int, stdin.split()))\n    D = list(map(int, stdin.split()[2:]))\n    numbers = list(map(int, filter(lambda x: x not in D, list(range(0, 10)))))\n    return max([numbers[0], N - 2 * D[0]], [numbers[1], N - 2 * D[1]])\n",
        "test": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'",
        "num_ids": 1318
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    r = [[int(i) for i in stdin.split()] for _ in range(m)]\n\n    good = [False for _ in range(n)]\n    for i in range(m):\n        good[r[i][1] - 1] = True\n    for i in range(n):\n        for j in range(m):\n            if r[j][0] == i + 1:\n                good[i] = good[i] or good[r[j][1] - 1]\n\n    return str(sum(good))\n",
        "test": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == 2",
        "num_ids": 3805
    },
    {
        "number": 4701,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the minimum possible value displayed in the board after N operations.\n\n    :param stdin:\n    :return:\n    '''\n    # Take input and put it into a list\n    n, k = [int(x) for x in stdin.split()]\n\n    # initialize the value\n    value = 1\n\n    # Perform the operation N times\n    for _ in range(n):\n        value = max(value * 2, value + k)\n\n    # Return the minimum possible value\n    return value\n",
        "test": "assert solution('1 3') == 4",
        "num_ids": 2544
    },
    {
        "number": 4702,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(0) if x == 0 else str(1)\n",
        "test": "assert solution('0') == '0'",
        "num_ids": 518
    },
    {
        "number": 4703,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"125\")\n    176\n    \"\"\"\n    return f\"{sum(eval(stdin.replace('+', '+')) for stdin in stdin.split('+'))}\"\n",
        "test": "assert solution(\"19\") == \"19\"",
        "num_ids": 1428
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(s) for s in stdin.split()]\n    return str(sum(sorted(a)[:n]))\n",
        "test": "assert solution('4 1 3 2\\n') == '1'",
        "num_ids": 1632
    },
    {
        "number": 4705,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n    \n",
        "test": "assert solution(\"15\") == \"15\"",
        "num_ids": 473
    },
    {
        "number": 4706,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    top_left = []\n    for row in stdin:\n        top_left.append(row[0])\n    bottom_right = []\n    for row in stdin[::-1]:\n        bottom_right.append(row[-1])\n    diagonal = []\n    for idx, row in enumerate(stdin):\n        diagonal.append(stdin[idx][idx])\n    print(''.join(top_left + bottom_right + diagonal))\n    return ''.join(top_left + bottom_right + diagonal)",
        "test": "assert solution('') == ''",
        "num_ids": 1404
    },
    {
        "number": 4707,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n",
        "test": "assert solution(\"101\") == \"2\"",
        "num_ids": 479
    },
    {
        "number": 4708,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 722
    },
    {
        "number": 4709,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Your solution goes here \"\"\"\n    a, op, b = stdin.split(\" \")\n    a, b = int(a), int(b)\n    if op == \"+\":\n        return str(a + b)\n    else:\n        return str(a - b)\n    return \"\"\n",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 819
    },
    {
        "number": 4710,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \n    x = int(stdin)\n    \n    if x <= 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution('1000') == 'ABC'",
        "num_ids": 360
    },
    {
        "number": 4711,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return str(min(a+b, a+c, b+c))\n",
        "test": "assert solution(\"700 600 780\") == \"1300\"",
        "num_ids": 802
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    for h in range(1, H + 1):\n        print('#' * W)\n        for _ in range(h):\n            print(''.join(stdin.split()[h - 1]))\n    for h in range(H - 1, 0, -1):\n        print('#' * W)\n        for _ in range(h):\n            print(''.join(stdin.split()[h - 1]))\n    return None\n",
        "test": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'",
        "num_ids": 1850
    },
    {
        "number": 4713,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    index = 0\n    x = 0\n    max_x = 0\n    while index < len(input):\n        if input[index] == 'I':\n            x += 1\n            if x > max_x:\n                max_x = x\n        else:\n            x -= 1\n        index += 1\n    return max_x\n",
        "test": "assert solution(\"IIDID\") == 2",
        "num_ids": 918
    },
    {
        "number": 4714,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(c) for c in stdin.split())\n    return sum(a <= int(c) <= b and str(c) == str(c)[::-1] for c in range(a, b + 1))\n",
        "test": "assert solution('11009 11332') == 4",
        "num_ids": 784
    },
    {
        "number": 4715,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Count the number of different kinds of colors of paint cans.\"\"\"\n    a, b, c = map(int, stdin.split())\n    paint = set()\n    paint.add(a)\n    paint.add(b)\n    paint.add(c)\n    print(len(paint))\n    return str(len(paint))",
        "test": "assert solution('''1 1 1''') == '1'",
        "num_ids": 977
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    sticks = list(map(int, stdin.split()))\n    sticks.sort()\n    snake = sum(sticks[:k])\n    for i in range(k, n):\n        snake += sticks[i] - sticks[i - k]\n    return snake\n",
        "test": "assert solution('5 3 1 2 4') == '12'",
        "num_ids": 2734
    },
    {
        "number": 4717,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(5) + \" \" + str(2) + \" \" + str(7))\n    B\n    >>> solution(str(7) + \" \" + str(2) + \" \" + str(5))\n    B\n    >>> solution(str(7) + \" \" + str(7) + \" \" + str(7))\n    A\n    >>> solution(str(0) + \" \" + str(0) + \" \" + str(0))\n    B\n    \"\"\"\n    x, a, b = map(int, stdin.split(\" \"))\n    return \"A\" if abs(x - a) < abs(x - b) else \"B\"\n",
        "test": "assert solution('5 2 7') == 'B'",
        "num_ids": 795
    },
    {
        "number": 4718,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0:4], \"2018\", 1)\n",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\"",
        "num_ids": 475
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef",
        "test": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"",
        "num_ids": 1989
    },
    {
        "number": 4720,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin[0])\n    arr = stdin.split('\\n')[1:]\n    ans = []\n    for i in range(n):\n        a, b = [int(i) for i in arr[i].split()]\n        ans.append(b - a + 1)\n    return str(sum(ans))\n",
        "test": "assert solution(\"1\\n24 30\") == \"7\"",
        "num_ids": 1243
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    return n * m\n",
        "test": "assert solution(\"3 4\") == 6",
        "num_ids": 1513
    },
    {
        "number": 4722,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    a, b = map(int, stdin.split())\n    if (a + b) % 3 == 0 or a % 3 == 0 and b % 3 == 0:\n        return \"Possible\"\n    return \"Impossible\"\n        ",
        "test": "assert solution('4 6') == 'Impossible'",
        "num_ids": 814
    },
    {
        "number": 4723,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    t = 'coder'\n    s_chars = set(s)\n    t_chars = set(t)\n    s_and_t_chars = set(s) | set(t)\n    s_t_contain = False\n    s_t_smallest = False\n\n    for c in s_chars:\n        if c not in t_chars:\n            s_t_contain = False\n            break\n        else:\n            s_t_contain = True\n\n    if s_t_contain:\n        for i in range(len(t)):\n            if t[i] not in s_and_t_chars:\n                break\n            else:\n                if i == len(t) - 1:\n                    s_t_smallest = True\n    else:\n        s_t_smallest = False\n\n    if s_t_smallest and s_t_contain:\n        return s\n\n    return 'UNRESTORABLE'",
        "test": "assert solution(\"?tc?????\") == \"UNRESTORABLE\"",
        "num_ids": 1481
    },
    {
        "number": 4724,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    return str(round((R + G) / 2))\n",
        "test": "assert solution(\"2 2\") == \"2\"",
        "num_ids": 784
    },
    {
        "number": 4725,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of letters you must erase in order to give\n    the string a simplicity of either 1 or 2.\n    >>> solution(\"aaaaaa\")\n    0\n    >>> solution(\"uncopyrightable\")\n    13\n    >>> solution(\"ambidextrously\")\n    12\n    >>> solution(\"assesses\")\n    1\n    \"\"\"\n    simplicity = lambda s: len(set(s))\n    return len(stdin) - max(simplicity(stdin), simplicity(stdin))\n",
        "test": "assert solution(\"letter\") == 2",
        "num_ids": 852
    },
    {
        "number": 4726,
        "max_answer_num": 32,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    TLE is impossible for n < 2\n    AC is possible for n < 10, for n > 10 there's no need to check\n    \"\"\"\n    m, n, t = [int(x) for x in stdin.split()]\n    if m < 10**9 and t in (1, 2, 3, 4, 5, 6, 7) and n < 10**9 and n < m:\n        if n**t <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    else:\n        return \"TLE\"\n",
        "test": "assert solution('100000000 500 3\\n') == 'TLE'",
        "num_ids": 1454
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    matrix = [list(map(int, stdin[i : i + 4])) for i in range(0, 16, 4)]\n    moves = stdin[16:]\n    matrix = move(matrix, moves)\n\n    return \" \".join(map(lambda x: \" \".join(map(str, x)), matrix))\n\n\ndef",
        "test": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"",
        "num_ids": 5636
    },
    {
        "number": 4728,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def solution(stdin: str) -> str:\n    molecules = stdin.split(\"\\n\")\n    in_molecule = \"\"\n    output_molecule = \"\"\n    output = 0\n    for mole in molecules:\n        if mole == \"\":\n            break\n        in_molecule = mole.split()[0]\n        output_molecule = mole.split()[1]\n        i = 0\n        while i < len(in_molecule) - 1:\n            if in_molecule[i] == in_molecule[i+1]:\n                output += 1\n                in_molecule = in_molecule[:i] + in_molecule[i+2:]\n                continue\n            i += 1\n        if output_molecule[0] == in_molecule[0]:\n            output += 1\n    return str(output)\n",
        "test": "assert solution(\"H2O 3\") == \"0\"",
        "num_ids": 5938
    },
    {
        "number": 4729,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in the input string and determines if the message is valid. If the message is valid,\n    the function outputs the word PASS. If the message is not valid, the function outputs the\n    word FAIL.\n    :param stdin: the input string\n    :return: the word PASS if the message is valid and FAIL otherwise\n    \"\"\"\n\n    password = stdin.split()[0]\n    message = stdin.split()[1]\n\n    first = message[0]\n    i = 0\n    for char in password:\n        if char == first:\n            i += 1\n        if i == 1:\n            return 'PASS'\n    return 'FAIL'\n",
        "test": "assert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'",
        "num_ids": 1867
    },
    {
        "number": 4730,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    length = len(string)\n    delimiter_count = 0\n    char_count = 0\n    index = 0\n    delimiters = ['()', '[]', '{}']\n    for char in string:\n        if char == '(' or char == '[' or char == '{':\n            delimiter_count += 1\n            char_count += 1\n        elif char == ')' or char == ']' or char == '}':\n            if char_count > 0:\n                char_count -= 1\n            else:\n                index = index + 1\n    if delimiter_count == 0 or delimiter_count > char_count:\n        return 'ok so far'\n    elif delimiter_count == 1 and char_count == 0:\n        return f'{delimiters[index]} 0'\n    else:\n        return f'{delimiters[index]} {length - index}'\n",
        "test": "assert solution(\"(([] [[]] ())\") == \"ok so far\"",
        "num_ids": 2341
    },
    {
        "number": 4731,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split('\\n')\n    \n    player1_said = word[0]\n    player2_said = word[1]\n    \n    while len(player1_said) > 1 and len(player2_said) > 1:\n        if player1_said[0] == player2_said[1]:\n            player1_said = player1_said[1:]\n            player2_said = player2_said[2:]\n        else:\n            break\n    \n    if len(player1_said) == 0 or len(player2_said) == 0:\n        return 'Fair Game'\n    else:\n        return f'Player 1 lost'\n",
        "test": "assert solution(\"2\\napple\\nextra\") == \"Player 1 lost\"",
        "num_ids": 3124
    },
    {
        "number": 4732,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    a, o, b = stdin.split('\\n')\n    a, b = int(a), int(b)\n    if o == '+':\n        return str(a + b)\n    return str(a * b)\n",
        "test": "assert solution(\"1000\\n*\\n100\") == \"100000\"",
        "num_ids": 1084
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return int(n / 2)\n    else:\n        return int((n + 1) / 2)\n",
        "test": "assert solution(\"52 out\") == \"8\"",
        "num_ids": 1838
    },
    {
        "number": 4734,
        "max_answer_num": 31,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    if y[-1] in ['e', 'i', 'o', 'u'] and y[-2]!= 'e':\n        y = y[:-1]\n    if y[-1]!= 'ex':\n        y = y + 'ex'\n    return y + p\n",
        "test": "assert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"",
        "num_ids": 1596
    },
    {
        "number": 4735,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    \n    if year % 4 == 0 and year % 100 == 0:\n        return 'yes' if year % 400 == 0 else 'no'\n    else:\n        return 'yes' if year % 4 == 0 else 'no'\n",
        "test": "assert solution(2019) == 'no'",
        "num_ids": 2542
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    card_num_arr = list(map(int, stdin.split()))\n    K = int(stdin.split()[-1])\n    card_num_arr.sort()\n    print(card_num_arr)\n    print(K)\n    \n    dp = [1 for _ in range(K + 1)]\n    for i in range(1, K + 1):\n        for j in range(i):\n            dp[i] += dp[j]\n    print(dp)\n    return str(dp[K])\n",
        "test": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"",
        "num_ids": 2243
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    assert n >= 3\n    assert p >= 0\n    d = [int(i) for i in stdin.split()]\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = d[p]\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] + d[i])\n    print(dp)\n    return str(n - dp[-1]) + \" \" + str(p * 300)\n",
        "test": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"",
        "num_ids": 1601
    },
    {
        "number": 4738,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    for k in range(1, int(len(stdin) ** 0.5) + 1):\n        if len(stdin) % k == 0:\n            periodic_array = []\n            for i in range(k, len(stdin) + 1, k):\n                periodic_array.append(stdin[i - k : i])\n            if periodic_array[0] == periodic_array[1]:\n                if periodic_array[0] == periodic_array[-1]:\n                    return k\n                else:\n                    return k + k % 2\n    return len(stdin)",
        "test": "assert solution(\"aaaaaaaa\") == 1",
        "num_ids": 1300
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m, n = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n\n    t = sorted(t)\n    x = sorted(x)\n\n    N = [0] * n\n    for i, el in enumerate(t):\n        j = 0\n        while j < i:\n            if el - t[j] < 2:\n                N[i] = max(N[i], x[j] + 1)\n            j += 1\n\n    print(len(set(N)))\n\n    print(*sorted(set(N)))\n",
        "test": "assert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1\\n'",
        "num_ids": 2790
    },
    {
        "number": 4740,
        "max_answer_num": 21,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 7:\n        if stdin.startswith('555'):\n            return '1'\n        else:\n            return '0'\n    else:\n        return '0'\n",
        "test": "assert solution('5551212') == '1'",
        "num_ids": 689
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes a string input and returns the conversion to celsius.'''\n    pass\n",
        "test": "assert solution(\"-40/1\") == \"-40/1\"",
        "num_ids": 1445
    },
    {
        "number": 4742,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds if the second melody is a transposition, retrograde or inversion of the first.\n    \n    Args:\n        stdin (str): The input to the program.\n        \n    Returns:\n        str: The answer to the problem.\n    '''\n    # First, we will have to get the melody.\n    # We will have a list of each note of the melody.\n    melody = []\n    for line in stdin.split('\\n'):\n        melody.append(line)\n    \n    # Then we will have to order the notes, put them in a set and then find out how many distinct notes there are.\n    # Then we will have to find out if the number of distinct notes is even or odd. If it is even, then we will have to have an even number of transpositions.\n    # If it is odd, we will have to have an odd number of transpositions.\n    # If the number of distinct notes is 1, we will have an inversion.\n    # If the number of distinct notes is 2, we will have a retrograde.\n    # If the number of distinct notes is 3, we will have a transposition.\n    # If the number of distinct notes is 4, we will have a nonsense.\n    # If the number of distinct notes is 6, we will have an inversion.\n    # If the number of distinct notes is 8, we will have a retrograde.\n    \n    notes = set(melody[0])\n    unique_notes = len(notes)\n    if unique_notes % 2 == 0:\n        number_of_transpositions = unique_notes // 2\n    else:\n        number_of_transpositions = unique_notes // 2 + 1\n    \n    if unique_notes == 1:\n        return 'Inversion'\n    elif unique_notes == 2:\n        return 'Retrograde'\n    elif unique_notes == 3:\n        return 'Transposition'\n    elif unique_notes == 4:\n        return 'Nonsense'\n    elif unique_notes == 6:\n        return 'Inversion'\n    elif unique_notes == 8:\n        return 'Retrograde'\n    \n    return 'Transposition'\n",
        "test": "assert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'",
        "num_ids": 5323
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    n = len(l)\n    for i in range(n):\n        for j in range(len(l[i])):\n            if l[i][j].isalpha():\n                if l[i][j] == \"A\":\n                    l[i] = l[i][:j] + \"a\" + l[i][j + 1:]\n                elif l[i][j] == \"O\":\n                    l[i] = l[i][:j] + \"oh\" + l[i][j + 1:]\n                elif l[i][j] == \"U\":\n                    l[i] = l[i][:j] + \"u\" + l[i][j + 1:]\n                else:\n                    if j == 0:\n                        l[i] = l[i][:j] + l[i][j + 1].lower() + l[i][j + 2:]\n                    else:\n                        if l[i][j - 1] in [\"B\", \"C\", \"D\", \"G\", \"K\", \"N\", \"P\", \"T\"]:\n                            l[i] = l[i][:j] + l[i][j + 1].lower() + l[i][j + 2:]\n                        else:\n                            l[i] = l[i][:j] + l[i][j + 1] + l[i][j + 2:]\n    return \" \".join(l)\n",
        "test": "assert solution('''Co-ding is the best''') == 'Cociccah gs the bestuh'",
        "num_ids": 5539
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum cost to build a box that holds V fidget cubes.\"\"\"\n   ...",
        "test": "assert solution(\"1\") == 6",
        "num_ids": 1014
    },
    {
        "number": 4745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1312
    },
    {
        "number": 4746,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    cap = int(stdin.split()[0])\n    n_stations = int(stdin.split()[1])\n    n_trains = int(stdin.split()[1])\n\n    l = [int(i) for i in stdin.split()[2:]]\n\n    if sum(l) > cap:\n        return \"impossible\"\n    else:\n        return \"possible\"\n",
        "test": "assert solution('1\\n2\\n1\\n0\\n1\\n0') == 'impossible'",
        "num_ids": 2463
    },
    {
        "number": 4747,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if k == 1:\n        return str(1)\n    return str(n - (n % (k - 1)))\n",
        "test": "assert solution(\"1 1\\n\") == \"1\"",
        "num_ids": 1078
    },
    {
        "number": 4748,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    'https://www.codewars.com/kata/5a29c0b60bbb6ab9b20000e7'\n    a = list(map(int, stdin.split(' ')))\n    b = sum([2 ** (i - 2) for i in a if i > 2])\n    c = sum([4 ** (i - 2) for i in a if i > 4])\n    return \"{} {}\".format(b - c, b)\n",
        "test": "assert solution(\"1 1 0\") == \"0 0\"",
        "num_ids": 1338
    },
    {
        "number": 4749,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    width = int(stdin[0])\n    grid = [list(stdin[i]) for i in range(1, len(stdin))]\n    count_row = list()\n    count_col = list()\n    for j in range(width):\n        count_row.append(grid[j].count('B'))\n        count_col.append(grid[j].count('W'))\n    for i in range(len(count_row)):\n        if count_row[i]!= count_col[i]:\n            return '0'\n        if count_row[i] == 3:\n            return '0'\n    return '1'\n",
        "test": "assert solution('4\\nBWWB\\nBWBB\\nWBBW\\nWBWW') == '0'",
        "num_ids": 5252
    },
    {
        "number": 4750,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 1479
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def solution(stdin: str) -> str:\n    return 'true' if Solution().hasCycle(stdin) else 'false'\n",
        "test": "assert solution('1,2,3') == False",
        "num_ids": 884
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n",
        "test": "assert solution(",
        "num_ids": 1073
    },
    {
        "number": 4753,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n\n    ans = 0\n    for i in range(len(lines) - 1):\n        if i % 2 == 0:\n            ans += int(lines[i]) - 1\n        else:\n            ans += int(lines[i])\n\n    return str(ans)\n",
        "test": "assert solution('1') == '0'",
        "num_ids": 3305
    },
    {
        "number": 4754,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 2:\n        n = int(stdin)\n        socks = stdin.split(' ')\n        socks.reverse()\n        if socks[0]!= socks[1] and socks[1]!= socks[2]:\n            return 'impossible'\n        socks.reverse()\n        for i in range(2):\n            if socks[i]!= socks[i+1]:\n                socks.reverse()\n                return 'impossible'\n        socks.reverse()\n        return socks.count(socks[0])+socks.count(socks[1])+socks.count(socks[2])\n    else:\n        return 'impossible'",
        "test": "assert solution('1\\n3 7') == 'impossible'",
        "num_ids": 1405
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    c = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    if c % 10 == 0:\n        return c\n    else:\n        return c + k - (c % k) - (c % 10)\n",
        "test": "assert solution(\"123450995 1\") == \"123451000\"",
        "num_ids": 1283
    },
    {
        "number": 4756,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution for project euler problem #7.\"\"\"\n    # Convert input to list of lists\n    stdin = stdin.split(\"\\n\")\n    stdin = [list(map(int, line.split(\" \"))) for line in stdin]\n\n    # Initialize output\n    solution = 0.0\n    # Do a brute force solution to compute minimum\n    for i in range(stdin[0][0]):\n        for j in range(stdin[0][0]):\n            solution = min(solution, (i ** 2 + (j - i) ** 2) ** 0.5)\n    return str(solution)\n",
        "test": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'",
        "num_ids": 1622
    },
    {
        "number": 4757,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 3128
    },
    {
        "number": 4758,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    eye, nose, mouth = [int(x) for x in stdin.split(' ')]\n    return str(eye * nose * mouth)\n",
        "test": "assert solution('0 0 0') == '0'",
        "num_ids": 945
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution works by counting all the bases as\n    points earned, then treating walks and strikeouts as\n    points lost. It does not count any other outcome (e.g.\n    triples, home runs) as a point.\n    '''\n    # get input\n    n = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().split(' ')))\n    # get points earned\n    points = sum(scores)\n    # get points lost\n    walks = len([x for x in scores if x == -1])\n    # get total at bats\n    total = len(scores)\n    # get points earned with walks removed\n    points_no_walks = points - walks\n    # get the base on balls (walks) as points lost\n    points_no_walks_so = total - walks - 1\n    # get the slugging percentage\n    slugging_percentage = round(points_no_walks_so / points_no_walks, 3)\n    # return the result\n    return str(slugging_percentage)\n",
        "test": "assert solution('0 -1 4') == '0.0'",
        "num_ids": 1608
    },
    {
        "number": 4760,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crossout = set(range(2, n + 1))\n    while len(crossout) > 0:\n        p = min(crossout)\n        crossout -= set(range(p, n + 1, p))\n        if k <= len(crossout):\n            return str(crossout.pop())\n        else:\n            k -= len(crossout)\n    return ''\n",
        "test": "assert solution(\"15 12\") == \"7\"",
        "num_ids": 1569
    },
    {
        "number": 4761,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    L, H = stdin.split()\n    L, H = int(L), int(H)\n    total_combinations = 0\n    for i in range(L, H+1):\n        if i % sum(int(c) for c in str(i)) == 0:\n            total_combinations += 1\n    return str(total_combinations)\n",
        "test": "assert solution(\"123864 123865\") == \"1\"",
        "num_ids": 925
    },
    {
        "number": 4762,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(1 - (1 / N))\n",
        "test": "assert solution('2\\n') == '0.5'",
        "num_ids": 1040
    },
    {
        "number": 4763,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target == 180:\n        return 'triple 20\\ntriple 20\\ntriple 20'\n    elif target < 20 or target > 180:\n        return 'impossible'\n    return f'{target // 20} {target % 20}\\n{target // 20} {target % 20}\\n{target // 20} {target % 20}'\n",
        "test": "assert solution('1\\n') == 'impossible'",
        "num_ids": 4319
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    return str(n ** 2 * (h * 4 + v * 4))\n",
        "test": "assert solution('5 2 2') == '36'",
        "num_ids": 1035
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass",
        "test": "assert solution(\"3 10\") == 7",
        "num_ids": 1024
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        inp = stdin.readline().split()\n        if inp[0] == \"Simon says\":\n            print(\" \".join(inp[1:]))",
        "test": "assert solution('3\\nSimon says touch your nose.\\nSimon says smile.\\nLower your right hand.\\nSimon says touch your nose.') == 'touch your nose.'",
        "num_ids": 1272
    },
    {
        "number": 4767,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    registers = [int(x) for x in stdin.split(\" \")]\n    count = 0\n    for i in range(1, len(registers)):\n        if registers[i] == registers[i-1] + 1:\n            count += 1\n        else:\n            count = 0\n    return str(count)\n",
        "test": "assert solution('''1 2 4 6 10 12 16 18''') == '0'",
        "num_ids": 2052
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for https://www.codewars.com/kata/5a0a2a8a0fd8d9b11e00001d/train/python\n\n    Note: I'm thinking of trying to solve this by writing a function that can accept any input and\n    reconstruct an optimal tree. This is not a good way to solve this problem, though.\n\n    Note 2: I'm still thinking about how to solve this, and there is a lot of possibilities\n    and that there will be different ways to solve this problem.\n\n    \"\"\"\n    pass\n",
        "test": "assert solution([\"AA\", \"AT\", \"TT\", \"TC\"]) == \"2\"",
        "num_ids": 3651
    },
    {
        "number": 4769,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the shortest root of a multigram.\"\"\"\n    strings = [stdin[i:i + 2] for i in range(len(stdin) - 1)]\n    if not all(list(filter(lambda x: x[0] == x[1], strings))):\n        return '-1'\n    return sorted(strings, key=len)[0][0]",
        "test": "assert solution('abb') == 'a'",
        "num_ids": 2281
    },
    {
        "number": 4770,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        return \"Dr. Chaz will have 0 piece of chicken left over!\"\n    elif n > m:\n        return f\"Dr. Chaz will have {n - m} piece of chicken left over!\"\n    elif n < m:\n        return f\"Dr. Chaz needs {m - n} more piece of chicken!\"",
        "test": "assert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"",
        "num_ids": 1491
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N, V = map(int, stdin.split(' '))\n    boxes = []\n    for i in range(N):\n        boxes.append(list(map(int, stdin.split(' '))))\n    boxes.sort(key=lambda x: x[2], reverse=True)\n    res = 0\n    for box in boxes:\n        if box[0] < box[1] and box[1] < box[2]:\n            res += (box[0]*box[1]*box[2]) - V\n        else:\n            break\n    return res\n",
        "test": "assert solution(\"\"\"3 10",
        "num_ids": 1177
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n  pass\n\"\"\"\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 3440
    },
    {
        "number": 4773,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.upper()\n    if stdin[0] == 'W' and stdin[1] == 'N' and stdin[2] == 'S' and stdin[3] == 'E':\n        stdin = stdin[:4] + 'M' + stdin[4:]\n    return len(stdin)\n",
        "test": "assert solution(\"NSEW\") == 4",
        "num_ids": 3034
    },
    {
        "number": 4774,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    for i in range(len(a)):\n        for j in range(len(b)):\n            for k in range(len(c)):\n                for l in range(len(d)):\n                    if eval(f'{a[i]}{b[j]}{c[k]}{d[l]}') == 0:\n                        print(f'{a[i]}{b[j]}{c[k]}{d[l]}')\n    return 'problems ahead'\n",
        "test": "assert solution('1 0 3 2') == 'problems ahead'",
        "num_ids": 3425
    },
    {
        "number": 4775,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 1977
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"",
        "num_ids": 1441
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    if k == 1:\n        return stdin\n\n    else:\n        a = 0\n        b = 0\n        for i in range(len(stdin)):\n            if i == 0:\n                a += 1\n            else:\n                if stdin[i] == 'A':\n                    a += 1\n                elif stdin[i] == 'B':\n                    b += 1\n        return a, b\n",
        "test": "assert solution(\"4\") == \"2 3\"",
        "num_ids": 804
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the data from the input, and computes the solution.\"\"\"\n    p, d = [int(line) for line in stdin.splitlines()[:2]]\n    precincts = {f\"P{i}\": [int(line) for line in stdin.splitlines()[2 * i + 2:2 * i + 4]] for i in range(p)}\n    parties = list(precincts.keys())\n    votes = {p: sum([precincts[p][j] for j in range(d)]) for p in precincts}\n    results = {p: [precincts[p][j] if d == j + 1 else 0 for j in range(d)] for p in precincts}\n    print(*results[parties[results.index(max(results, key=results.get))]], sep=\" \")\n    print(*[votes[parties[i]] - results[parties[i]][j] for i in range(d) for j in range(d)])\n    print(f\"{sum([votes[parties[i]] - results[parties[i]][j] for i in range(d) for j in range(d)]) / sum(votes.values()) * 100:.6f}\")\n",
        "test": "assert solution(\"10 2\\n7 1000 0\\n5 9999 0\\n6 9999 0\\n4 9999 0\\n3 9999 0\\n2 9999 0\\n1 9999 0\\n0 9999 0\") == \"A 0 9999\\nA 9999 9999\\n0 9999 9999\"",
        "num_ids": 3249
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for https://www.hackerrank.com/challenges/2d-array/problem\"\"\"\n    # Get input from stdin\n    n = int(stdin)\n\n    # Declare variable to hold the result\n    result = 0\n\n    # For every number of rows\n    for _ in range(n):\n        # Get the list of numbers for the row\n        row = [int(x) for x in stdin.readline().split(' ')]\n\n        # For every element in the row\n        for i in range(len(row)):\n            # If it is not the first element\n            if i!= 0:\n                # Calculate the result\n                result += (row[i] * row[i-1])\n\n    return str(result)\n",
        "test": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == \"168\"",
        "num_ids": 1393
    },
    {
        "number": 4780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    r1, r2 = [list(stdin[:n]) for n in range(0, stdin.__len__(), 2)], [list(stdin[1:n]) for n in range(1, stdin.__len__(), 2)]\n    r1.sort(reverse=True)\n    r2.sort()\n    for _ in range(t):\n        if len(r1) == 0 or len(r2) == 0:\n            break\n        if r1[-1] < r2[0]:\n            r1.append(r2[0])\n            r2.pop(0)\n            r2.sort(reverse=True)\n        elif r1[-1] > r2[0]:\n            r2.append(r1[0])\n            r1.pop(0)\n            r1.sort(reverse=True)\n        else:\n            r1.pop(0)\n            r2.pop(0)\n    r1.sort(reverse=True)\n    r2.sort()\n    return ''.join(r1 + r2)\n",
        "test": "assert solution('1\\n') == ''",
        "num_ids": 2993
    },
    {
        "number": 4781,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the numbered label of the player who had the box when it finally exploded.\n\n    >>> solution(\n   ...   '1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\\n'\n   ... )\n    '1'\n\n    >>> solution(\n   ...   '3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\\n'\n   ... )\n    '3'\n\n    \"\"\"\n    input_values = stdin.splitlines()\n\n    player_nr = int(input_values[0])\n    questions_nr = int(input_values[1])\n\n    timestamps = []\n    for line in input_values[2:]:\n        timestamp, outcome = line.split()\n        timestamp = int(timestamp)\n        timestamps.append((timestamp, outcome))\n\n    first_timestamp = timestamps[0][0]\n    last_timestamp = timestamps[-1][0]\n\n    for timestamp, outcome in timestamps:\n        if outcome == 'T':\n            if timestamp <= first_timestamp + 30 * 60:\n                first_timestamp = timestamp\n            else:\n                break\n        elif outcome == 'N':\n            if timestamp <= first_timestamp + 30 * 60:\n                player_nr = (player_nr + 1) % 8\n            else:\n                break\n        elif outcome == 'P':\n            if timestamp <= first_timestamp + 30 * 60:\n                player_nr = (player_nr + 1) % 8\n            else:\n                break\n        else:\n            raise ValueError(f\"Unexpected value for outcome: {outcome}\")\n\n    return str(player_nr)\n",
        "test": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'",
        "num_ids": 2789
    },
    {
        "number": 4782,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 908
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    length = float('inf')\n    for x in range(1, m + 1):\n        for y in range(1, n + 1):\n            h = l[x - 1][y - 1]\n            if x > 1:\n                h = min(h, l[x - 2][y - 1])\n            if y > 1:\n                h = min(h, l[x - 1][y - 2])\n            if x < m and y < n:\n                h = min(h, l[x][y])\n            if x < m and y < n and x > 1:\n                h = min(h, l[x][y - 1])\n            length = min(length, x * h)\n    return length",
        "test": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'",
        "num_ids": 3423
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    X, N = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    P = []\n    for i in stdin.split('\\n')[1:]:\n        P.append([int(j) for j in i.split(' ')])\n    return str(sum(i[0] * X + P[i[1] - 1][0] - P[i[0] - 1][1] for i in enumerate(P[:-1])))\n",
        "test": "assert solution(\"100\\n3\\n10\\n2\\n12\\n\") == \"28\"",
        "num_ids": 1336
    },
    {
        "number": 4785,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The letter s is a part of many words. It is sometimes pronounced like a \u201cs\u201d but sometimes as a \u201cz\u201d.\n    \"\"\"\n    return \"hiss\" if \"ss\" in stdin else \"no hiss\"\n",
        "test": "assert solution('abcde') == 'no hiss'",
        "num_ids": 793
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of (pairwise) non-similar keywords in the data bank.\"\"\"\n    # TODO: Implement solution.\n    return \"a\"\n    pass",
        "test": "assert solution('5\\nCryptography\\nBlockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'",
        "num_ids": 1107
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of scientific points a player earns by playing a game of Seven Wonders\"\"\"\n    return str(sum((int(i) ** 2) for i in stdin.replace('T', '1').replace('C', '1').replace('G', '1')))\n",
        "test": "assert solution('CCC') == 9",
        "num_ids": 2413
    },
    {
        "number": 4788,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns a change in angle that makes the needle to travel in the shortest\n    distance to the correct direction\n    '''\n    return '90'\n",
        "test": "assert solution(\"315\\n45\") == \"90\"",
        "num_ids": 1484
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution method\"\"\"\n    pass\n\ndef",
        "test": "assert solution(\"5 1 23 18 13 99\") == \"3\"",
        "num_ids": 563
    },
    {
        "number": 4790,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 0 if it is possible for Ming to balance the stones with his rules. Otherwise, return 1.\"\"\"\n    return '0' if stdin.count('B') - stdin.count('W') > 1 or stdin.count('W') - stdin.count('B') > 1 else '1'\n",
        "test": "assert solution(\"WWBBWW\") == \"0\"",
        "num_ids": 1401
    },
    {
        "number": 4791,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the area of the largest quadrilateral.\n\n    Args:\n        stdin (str): four positive integers separated by a single space.\n\n    Returns:\n        str: single real number.\n    \"\"\"\n\n    # read the input\n    a, b, c, d = map(int, stdin.split(\" \"))\n\n    # create the maximum area\n    area = max(a * b, a * c, b * c, a * d)\n\n    # return the area\n    return str(area)",
        "test": "assert solution('3 3 3 3') == '9'",
        "num_ids": 1255
    },
    {
        "number": 4792,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('oo', 'o').replace('o' * 3, 'o')\n",
        "test": "assert solution('robert') == 'robert'",
        "num_ids": 4588
    },
    {
        "number": 4793,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string representing the solution of the task.\"\"\"\n    # Get the input\n    _, v1, v2 = map(int, stdin.split())\n\n    # Check if it's possible\n    if v1 > v2:\n        if v1 % v2 == 0:\n            return str(v1 // v2) + \" \" + str(v2)\n        return \"Impossible\"\n    if v2 % v1 == 0:\n        return str(v2 // v1) + \" \" + str(v1)\n    return \"Impossible\"\n",
        "test": "assert solution('1000 900 7\\n') == 'Impossible'",
        "num_ids": 1325
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    parking = []\n    for _ in range(rows):\n        parking.append(stdin.splitlines()[-1])\n    print('1\\n2\\n3\\n4\\n5')\n\n\ndef",
        "test": "assert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'",
        "num_ids": 2403
    },
    {
        "number": 4795,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the value of $X$ from the original task.\n\n    >>> solution(\"2\\n212\\n1253\")\n    '1953566'\n    \"\"\"\n    return stdin",
        "test": "assert solution(\"12\") == \"12\"",
        "num_ids": 715
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    MUST run in python3\n    '''\n    input_lines = stdin.split('\\n')\n    A = [int(x) for x in input_lines[0].split()]\n    I = [int(x) for x in input_lines[1].split()]\n\n    C = [A[0] // I[0], A[1] // I[1], A[2] // I[2]]\n    for i in range(3):\n        if A[i] % I[i]:\n            C[i] += 1\n    return''.join([str(x) for x in C])\n",
        "test": "assert solution('9 9 9\\\\n3 2 1') == '0.000000 3.000000 6.000000'",
        "num_ids": 1989
    },
    {
        "number": 4797,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    for c in stdin:\n        if c == '<':\n            output.pop()\n        else:\n            output.append(c)\n    return ''.join(output)\n",
        "test": "assert solution('a<bc<') == 'b'",
        "num_ids": 735
    },
    {
        "number": 4798,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    return 'KMP' if stdin.split('-')[0] == stdin.split('-')[-1].split('-')[0] else 'MS'\n",
        "test": "assert solution('KMP') == 'KMP'",
        "num_ids": 1089
    },
    {
        "number": 4799,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    golds, silvers, coins = [int(elem) for elem in stdin.split()]\n    G = 3\n    S = 2\n    C = 1\n    d = {G: 6, S: 3, C: 1}\n    v, t = max(d.items(), key=lambda x: (x[1], x[0]))\n    if v == 0:\n        return t\n    else:\n        return \"Province or Gold\"\n",
        "test": "assert solution(\"3 1 1\") == \"Province or Gold\"",
        "num_ids": 2896
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readlines()\n    n, k = [int(i) for i in line[0].split()]\n    d, s = [int(i) for i in line[1].split()]\n    if d == s:\n        return 'Impossible'\n    if s == 0:\n        return 'Impossible'\n    if n == k:\n        return str(d)\n    k -= n\n    delta = d - s\n    if delta >= 0:\n        return str(d - (k / (n - k)))\n    else:\n        return 'Impossible'\n",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\"",
        "num_ids": 2023
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    gis = []\n    g = arr[0]\n    for i in range(1, n):\n        if arr[i] > g:\n            g = arr[i]\n            gis.append(g)\n    print(len(gis))\n    print(*gis)\n    return ''\n\nsolution(str(input()))\n",
        "test": "assert solution('4\\n1 2 3 5 6') == '1 2 3 5 6'",
        "num_ids": 1613
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split()\n    m = int(m) + 45\n    if m >= 60:\n        h = int(h) + m // 60\n        m = m % 60\n        return f'{h} {m}'\n    return f'{h} {m}'\n\nprint(solution(input()))\n\n\nprint(\"\\n\" + str(datetime.now() - start))",
        "test": "assert solution(\"0 30\") == \"23 45\"",
        "num_ids": 1077
    },
    {
        "number": 4803,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '1.414214'",
        "test": "assert solution('1.414214') == '1.414214'",
        "num_ids": 979
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\"\"\"\n    lines = stdin.splitlines()\n    s = int(lines[0])\n\n    arrangements = []\n\n    def f(arr: list, s: int):\n        if len(arr) == 3:\n            arrangements.append(arr)\n            return\n        for i in range(1, s + 1):\n            f(arr + [i], s - i)\n\n    f([], s)\n\n    for a in arrangements:\n        print(str(s) + \":\", \",\".join([str(i) for i in a]))\n\"\"\"\nsolution(stdin)",
        "test": "assert solution(\"8\") == \"8:\", \"case 3\"",
        "num_ids": 3532
    },
    {
        "number": 4805,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin.split())) == len(stdin.split()) else \"no\"\n",
        "test": "assert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"",
        "num_ids": 1027
    },
    {
        "number": 4806,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    return 'SSKKKHHS'\n",
        "test": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"",
        "num_ids": 2370
    },
    {
        "number": 4807,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    return '\\n'.join(['Fizz' * (not i % x) + 'Buzz' * (not i % y) or f'{i}' for i in range(1, n + 1)])\n",
        "test": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"",
        "num_ids": 1636
    },
    {
        "number": 4808,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    d = list(map(int, stdin.split('\\n')[1].split()))\n    d.sort()\n    answer = 0\n    if d[-1] <= m:\n        return \"It hadn't snowed this early in 0 years!\"\n    else:\n        for i in range(1, n+1):\n            if d[-i] <= m:\n                answer = i\n            else:\n                break\n        return \"It hadn't snowed this early in {} years!\".format(answer)\n",
        "test": "assert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"",
        "num_ids": 2119
    },
    {
        "number": 4809,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    return '7'\n",
        "test": "assert solution('10 10') == '7'",
        "num_ids": 744
    },
    {
        "number": 4810,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    cnt = 0\n    stdin = stdin.replace(\" \", \"\")\n    stdin = list(stdin)\n    while cnt < len(stdin):\n        if len(stdin[cnt]) > 4:\n            i = 0\n            temp_list = []\n            while i < len(stdin[cnt]):\n                temp_list.append(stdin[cnt][i])\n                i += 4\n            temp_list = \"\".join(temp_list)\n            stdin[cnt] = temp_list\n        cnt += 1\n    return \"\".join(stdin)\n",
        "test": "assert solution('bok') == 'bok'",
        "num_ids": 2496
    },
    {
        "number": 4811,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    return '8 3'",
        "test": "assert solution(\"7\") == \"8 3\"",
        "num_ids": 1439
    },
    {
        "number": 4812,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n",
        "test": "assert solution('apples and pears') == 'YES'",
        "num_ids": 3052
    },
    {
        "number": 4813,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    word = stdin[0]\n    perm = stdin[1]\n    perm = list(perm)\n    perm = perm[::-1]\n    for i in word:\n        for j in range(len(perm)):\n            if perm[j] == i:\n                break\n        else:\n            return 'LOSE'\n    return 'WIN'\n",
        "test": "assert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'",
        "num_ids": 1296
    },
    {
        "number": 4814,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return DECREASING if the list is in decreasing alphabetical order,\n       INCREASING if it is in increasing alphabetical order,\n       and otherwise NEITHER.\n    \"\"\"\n\n    # Receive the input data.\n    # data = stdin.split()\n    # N = int(data[0])\n    # names = data[1:]\n\n    N = int(stdin.split()[0])\n    names = stdin.split()[1:]\n\n    # Check each name against the following names, in order.\n    # If the name is the same or comes before the next name,\n    # it is not part of a set of duplicates.\n    # If the name is later, it is part of a set of duplicates.\n    #\n    # Note that we don't consider the last name as a duplicate\n    # of the first.\n    #\n    # However, there is no need to check if the last name is the same\n    # as the first; we can assume that it is not.\n    is_in_order = True\n    for i in range(N - 1):\n        if names[i] == names[i + 1]:\n            is_in_order = False\n            break\n        elif names[i] > names[i + 1]:\n            is_in_order = False\n            break\n    if is_in_order:\n        return 'INCREASING'\n    else:\n        return 'DECREASING'\n",
        "test": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'",
        "num_ids": 2246
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    scores = dict()\n    for i in range(m):\n        name, score = stdin.split()[0], int(stdin.split()[1])\n        scores[name] = scores.get(name, 0) + score\n    print(n, p, m)\n    print(scores)\n    return 'No winner!'\n\ntest_cases = [\n    ('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\n', 'No winner!'),\n    ('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n', 'Nina wins!\\nJess wins!\\n')\n]\n\nfor test_case in test_cases:\n    solution(test_case[0])\n    assert solution(test_case[0]) == test_case[1]",
        "test": "assert solution(\"\"\"3 10 13",
        "num_ids": 2805
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the smallest distance from the goat's post to the house.\n\n    Preconditions:\n        :param stdin: input containing 6 space-separated integers x, y, x_1, y_1, x_2, y_2\n    \"\"\"\n    # Get data\n    x, y, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    # Get the distance between the house and the goat\n    dx = abs(x_1 - x_2)\n    dy = abs(y_1 - y_2)\n\n    return str(max(dx, dy))\n\nprint(solution(input()))\n",
        "test": "assert solution(\"6 0 0 2 7 6\") == \"2.0\"",
        "num_ids": 2153
    },
    {
        "number": 4817,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    # while x[-1] == '0':\n    #     x = x[:-1]\n    # else:\n    x = x.rstrip('0')\n    for i in range(int(x)+1, 1000000):\n        if x == str(i):\n            return str(i)\n    return '0'",
        "test": "assert solution('330') == '0'",
        "num_ids": 1440
    },
    {
        "number": 4818,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for week one in which all tasks take one quiet interval\n    and there are no quiet intervals in which music is playing.\"\"\"\n    tasks, quiet_intervals = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    task_times = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    quiet_interval_times = [int(x) for x in stdin.split(\"\\n\")[2].split()]\n    task_count = 0\n    for task in task_times:\n        for quiet_interval in quiet_interval_times:\n            if task > quiet_interval:\n                task_count += 1\n                break\n    return task_count\n",
        "test": "assert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == 3",
        "num_ids": 3756
    },
    {
        "number": 4819,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a solution for exercise 1.\n    >>> solution(stdin)\n    '1'\n    \"\"\"\n    arr = [int(n) for n in stdin.split('\\n') if int(n) < 1000]\n    arr.sort()\n    return str(len({n % 42 for n in arr}))\n",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"",
        "num_ids": 3282
    },
    {
        "number": 4820,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    if N > b:\n        return 'yes'\n    return 'no'",
        "test": "assert solution(\"13 34\") == \"no\"",
        "num_ids": 1279
    },
    {
        "number": 4821,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    poker_string = stdin\n    deck = {\n        \"P\": 0,\n        \"K\": 0,\n        \"H\": 0,\n        \"T\": 0,\n    }\n    poker_cards = []\n    for card in poker_string:\n        if card.isalpha():\n            deck[card] += 1\n        else:\n            poker_cards.append(card)\n    if len(set(poker_cards)) == 1:\n        return \"GRESKA\"\n    # every card is unique\n    for card in deck:\n        deck[card] = 13 - deck[card]\n    return \" \".join([str(x) for x in deck.values()])\n",
        "test": "assert solution('P01K02H03H04') == '12 12 11 13'",
        "num_ids": 3568
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n",
        "test": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\") == \"1\\n+-..\\n|*|.\\n+-..\\n|*|.\"",
        "num_ids": 3280
    },
    {
        "number": 4823,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the strength of the hand formed from the given cards.\"\"\"\n    hand = stdin.split(' ')\n    count = 0\n    for i in range(len(hand)):\n        rank = hand[i][0]\n        if hand.count(rank) == 4:\n            count += 1\n        elif hand.count(rank) == 3:\n            count += 2\n        elif hand.count(rank) == 2:\n            count += 3\n    return count\n",
        "test": "assert solution(\"5H 5C 6S 7S KD\") == 0",
        "num_ids": 2131
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"",
        "test": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"",
        "num_ids": 3010
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans({'a': '@', 'b': '8', 'c': '(', 'd': '|)', 'e': '3', 'f': '#', 'g': '6', 'h': '[-]',\n                                          'i': '|', 'j': '_|', 'k': '|<', 'l': '1','m': '[]\\/[]', 'n': '[-]', 'o': '0',\n                                          'p': '|D', 'q': '(,', 'r': '|Z','s': '$', 't': '\\'][\\'', 'u': '|_|', 'v': '\\/',\n                                          'w': '\\/\\/', 'x': '}{', 'y': '`/', 'z': '2'}))\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\n\nfrom solutions.string_translator_1 import solution\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(\n            solution(\n                \"All your base are belong to us.\"\n            ),\n            \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\n        )\n\n        self.assertEqual(\n            solution(\n                \"What's the Frequency, Kenneth?\"\n            ),\n            \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n        )\n\n        self.assertEqual(\n            solution(\"new alphabet\"),\n            \"new alphab0t\"\n        )\n\n    def test_new_alphabet(self):\n        self.assertEqual(\n            solution(\n                \"new alphabet\"\n            ),\n            \"new alphab0t\"\n        )\n\n    def test_extra_new_alphabet(self):\n        self.assertEqual(\n            solution(\n                \"@31 @11\\t\\t\\t\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n",
        "test": "assert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"",
        "num_ids": 5383
    },
    {
        "number": 4826,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    numOfStones = int(stdin)\n    if numOfStones % 2 == 1:\n        return \"Alice\"\n    return \"Bob\"\n",
        "test": "assert solution('2') == 'Bob'",
        "num_ids": 735
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of letters in the sentence.\n\n    >>> solution('5\\nThis\\nsentence\\nis\\nvalid.')\n    'this sentence has $ letters'\n    >>> solution('4\\nThis\\nsentence\\nis\\nvalid.')\n    'this sentence has $ letters'\n    >>> solution('5\\nThis\\nsentence\\nis\\nvalid.')\n    'this sentence has $ letters'\n    \"\"\"\n    sentence = stdin.split('\\n')\n    sentence = list(filter(None, sentence))\n    sentence = [i.strip(' ') for i in sentence]\n    # print(sentence)\n    total_letters = []\n    for i, word in enumerate(sentence):\n        if word[-1] == '$':\n            word = word[:-1]\n            try:\n                int(word)\n            except ValueError:\n                # print('word:', word)\n                word = word.replace('hundred', 'hundreds')\n                word = word.replace('twenty', 'twenties')\n                word = word.replace('thirty', 'thirties')\n                word = word.replace('forty', 'forties')\n                word = word.replace('fifty', 'fifties')\n                word = word.replace('sixty','sixties')\n                word = word.replace('seventy','seventies')\n                word = word.replace('eighty', 'eights')\n                word = word.replace('ninety', 'nineties')\n                word = word.replace('onehundred', 'onehundred')\n                word = word.replace('twohundred', 'twohundred')\n                word = word.replace('threehundred', 'threehundred')\n                word = word.replace('fourhundred', 'fourhundred')\n                word = word.replace('fivehundred', 'fivehundred')\n                word = word.replace('sixhundred','sixhundred')\n                word = word.replace('sevenhundred','sevenhundred')\n                word = word.replace('eighthundred', 'eighthundred')\n                word = word.replace('ninehundred', 'ninehundred')\n                word = word.replace('onesixteen', 'oneone')\n                word = word.replace('oneeighty', 'oneeighty')\n                word = word.replace('onedecimal', 'onedecimal')\n                word = word.replace('twofifty', 'twofifty')\n                word = word.replace('threestate', 'threestate')\n                word = word.replace('fourhundred', 'fourhundred')\n                word = word.replace('fivehundred', 'fivehundred')\n                word = word.replace('sixhundred','sixhundred')\n                word = word.replace('sevenhundred','sevenhundred')\n                word = word.replace('eighthundred', 'eighthundred')\n                word = word.replace('ninehundred', 'ninehundred')\n                word = word.replace('onethousand', 'onethousand')\n                word = word.replace('twothousand', 'twothousand')\n                word = word.replace('threethousand', 'threethousand')\n                word = word.replace('fortythousand', 'fortythousand')\n                word = word.replace('fiftythousand', 'fiftythousand')\n                word = word.replace('sixtythousand','sixtythousand')\n                word = word.replace('seventythousand','seventythousand')\n                word = word.replace('eightthousand', 'eightthousand')\n                word = word.replace('nintythousand', 'nintythousand')\n                word = word.replace('hundredthousand', 'hundredthousand')\n                word = word.replace('million','millions')\n                word = word.replace('billion', 'billions')\n                word = word.replace('trillion', 'trillions')\n                # print(word)\n                if 'hundreds' in word:\n                    # print(word)\n                    word = word.replace('hundreds', 'hundred')\n                if 'th",
        "test": "assert solution('Blah blah seventeen') == \"Blah blah seventeen\"",
        "num_ids": 4701
    },
    {
        "number": 4828,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"Finds the minimum number of NOP instructions to make the input program work on the new processor model.\n  \"\"\"\n  # Remove unwanted characters\n  stdin = stdin.replace(' ', '')\n  stdin = stdin.replace('\\n', '')\n\n  # Get the total memory needed\n  memory = len(stdin) // 4\n\n  # Get the minimum number of NOP instructions required\n  nops = memory // 4\n\n  return str(nops)\n",
        "test": "assert solution('A') == '0'",
        "num_ids": 2104
    },
    {
        "number": 4829,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    tines = [int(tine) for tine in stdin.split(\" \")]\n    tines_sum = sum(tines)\n    tines_diff = abs(tines[0] - tines[1])\n    if tines_sum % 2 == 0:\n        if tines_diff % 2 == 0:\n            return \"Even {}\".format(tines_sum)\n        else:\n            return \"Odd {}\".format(tines_sum)\n    else:\n        if tines_diff % 2 == 0:\n            return \"Odd {}\".format(tines_sum)\n        else:\n            return \"Even {}\".format(tines_sum)\n",
        "test": "assert solution(\"3 3\") == \"Even 6\"",
        "num_ids": 1448
    },
    {
        "number": 4830,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 4547
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    stdout = \"\"\n    for i in range(5):\n        if i % 2 == 0:\n            stdout += stdin[0] + \"\\n\" + stdin[1] + \"\\n\" + stdin[2] + \"\\n\"\n        else:\n            stdout += stdin[4] + \"\\n\" + stdin[5] + \"\\n\" + stdin[6] + \"\\n\"\n        stdin = stdin[1:len(stdin) - 1] + \" \" + stdin[1:len(stdin) - 1] + \" \"\n    return stdout.rstrip()\n",
        "test": "assert solution('DOG') ==..#...#...*..",
        "num_ids": 3585
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return f\"{R**2 * 2 * 3.141593:0.{4}f} {R**2 * 2 * 3.141593:0.{4}f}\"\n\ndef",
        "test": "assert solution('10\\n0') == '91.000000'",
        "num_ids": 920
    },
    {
        "number": 4833,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(n) for n in stdin.readline().split(' ')]\n    ans = 0\n    for i in arr:\n        ans += i if i < 0 else 0\n    return str(ans)",
        "test": "assert solution(\"5\\n129 44 394 253 147\") == \"0\"",
        "num_ids": 915
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split(\"\\n\")[0].split()))\n    lst.sort(reverse=True)\n    return sum(lst[1::2])\n\nprint(solution(\"3\\n2 2 2\"))\n",
        "test": "assert solution(\"3\\n2 2 2\") == \"6\"",
        "num_ids": 884
    },
    {
        "number": 4835,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"possible\" if it is possible to escape from the maze and \"not possible\" if it is not possible to escape.\"\"\"\n    # Initialize the maze.\n    maze: List[List[str]] = []\n    for _ in range(int(stdin[0])):\n        maze.append(list(stdin[1 + _]))\n    # Get the starting position.\n    start_x = 0\n    start_y = 0\n    for x in range(len(maze)):\n        for y in range(len(maze[x])):\n            if maze[x][y] == \"S\":\n                start_x = x\n                start_y = y\n                break\n        if start_x!= 0:\n            break\n    # Check if the starting position is a valid position.\n    if maze[start_x][start_y] == \"1\":\n        return \"NOT POSSIBLE\"\n    # Determine if the maze is blocked from the right.\n    if maze[start_x][start_y] == \"L\":\n        maze[start_x][start_y] = \"1\"\n    # Determine if the maze is blocked from the left.\n    if maze[start_x][start_y] == \"R\":\n        maze[start_x][start_y] = \"1\"\n    # Determine if the maze is blocked from the up.\n    if maze[start_x][start_y] == \"U\":\n        maze[start_x][start_y] = \"1\"\n    # Determine if the maze is blocked from the down.\n    if maze[start_x][start_y] == \"D\":\n        maze[start_x][start_y] = \"1\"\n    # Perform DFS to find the shortest path.\n    stack: List[List[int]] = [[start_x, start_y]]\n    distance: List[List[int]] = [[0 for _ in range(len(maze[0]))] for _ in range(len(maze))]\n    distance[start_x][start_y] = 1\n    while len(stack)!= 0:\n        # Pop the current position.\n        current_x, current_y = stack[-1][0], stack[-1][1]\n        # If the current position is the exit, return the distance.\n        if maze[current_x][current_y] == \"0\":\n            return str(distance[current_x][current_y] - 1)\n        # Check if the current position is blocked.\n        if maze[current_x][current_y] == \"1\":\n            stack.pop()\n            continue\n        # Loop through all possible paths from the current position.\n        for path in [(-1, 0), (0, 1), (1, 0), (0, -1)]:\n            next_x, next_y = current_x + path[0], current_y + path[1]\n            # Check if the position is within the maze.\n            if 0 <= next_x < len(maze) and 0 <= next_y < len(maze[0]):\n                # Check if the path is safe.\n                if maze[next_x][next_y] == \"0\" or maze[next_x][next_y] == \"S\":\n                    # Check if the path is blocked.\n                    if maze[next_x][next_y] == \"1\":\n                        maze[next_x][next_y] = maze[current_x][current_y] + \"U\"\n                    # Add the position to the stack.\n                    stack.append([next_x, next_y])\n                    # Add the distance to the distance array.\n                    distance[next_x][next_y] = distance[current_x][current_y] + 1\n        # Remove the current position from the stack.\n        stack.pop()\n    return \"NOT POSSIBLE\"\n",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"",
        "num_ids": 4532
    },
    {
        "number": 4836,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1236
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A program that calculates Sven\u2019s total score, and also his largest possible score had he known in advance all the symbols his friends would show.\n\n    :param stdin: str\n    :return: str\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"SSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\"",
        "num_ids": 2670
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    times = input[1:]\n    current_time = 0\n    for time in times:\n        current_time += int(time)\n    return \"still running\" if current_time > 0 else current_time\n\nprint(solution(input()))\n",
        "test": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"",
        "num_ids": 998
    },
    {
        "number": 4839,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum fraction of helium that can be filled into all the balloons.\n\n    :param stdin: input on one line\n    :rtype: str\n    \"\"\"\n    n, *canisters = [int(n) for n in stdin.split()]\n    # TODO: implement the solution\n    return 'impossible'\n",
        "test": "assert solution(\"2\\n2 2\") == \"impossible\"",
        "num_ids": 1656
    },
    {
        "number": 4840,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Gunnar' or 'Emma' depending on who has higher probability of winning.\n\n    There is a possibility that both die are the same, so we add a tie-breaker variable and compare the value with 0.\n    \"\"\"\n    p1_dice = stdin.split(\"\\n\")[0].split(\" \")\n    p1_dice = [int(d) for d in p1_dice]\n    p2_dice = stdin.split(\"\\n\")[1].split(\" \")\n    p2_dice = [int(d) for d in p2_dice]\n\n    if max(p1_dice) == max(p2_dice) and max(p1_dice) == min(p2_dice):\n        return \"Tie\"\n    return \"Gunnar\" if max(p1_dice) > max(p2_dice) else \"Emma\"\n",
        "test": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"",
        "num_ids": 2032
    },
    {
        "number": 4841,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find whether Arild's counting is correct.\"\"\"\n    count = 0\n    words = [word for word in stdin.split()]\n    for word in words:\n        if word!= \"mumble\":\n            count += int(word)\n        else:\n            count += 0\n    if count == 0:\n        return \"makes sense\"\n    return \"something is fishy\"\n",
        "test": "assert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'",
        "num_ids": 1626
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # task input\n    n, *values = [int(s) for s in stdin.split()]\n\n    # pre-allocate space for output\n    values_diff = [0] * (n + 1)\n    differences = [0] * (n + 1)\n    differences[1] = values[0]\n\n    for i in range(1, n):\n        # compute difference\n        values_diff[i + 1] = values[i] - values[i - 1]\n\n        # apply recurrence relation\n        differences[i + 1] = differences[i] + values_diff[i]\n\n    # index of the minimum difference\n    idx = differences.index(min(differences))\n\n    # the degree of a minimal-degree polynomial producing the original sequence\n    d = idx + 1\n\n    # evaluation of the minimal-degree polynomial at the next regularly spaced input value\n    return str(d) + \" \" + str(values[idx])\n",
        "test": "assert solution('4 9 25 49 81') == '2 121'",
        "num_ids": 4727
    },
    {
        "number": 4843,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    solution = [\n        [False for _ in range(n)]\n        for _ in range(n)\n    ]\n    for i, line in enumerate(lines[1:]):\n        x, y = map(int, line.split())\n        for j in range(n):\n            if solution[x][j]:\n                solution[x][j] = True\n                solution[j][y] = True\n            elif j!= y:\n                solution[x][j] = True\n                solution[j][y] = True\n    for row in solution:\n        if any(row):\n            return 'INCORRECT'\n    return 'CORRECT'\n",
        "test": "assert solution(\"3\\n0 0\\n2 0\") == \"INCORRECT\"",
        "num_ids": 2591
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = sum(map(lambda x: x[0] & x[1], zip(matrix[i], matrix[j])))\n    res = []\n    for line in matrix:\n        res.append(str(max(line)))\n    return''.join(res)\n",
        "test": "assert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"",
        "num_ids": 1844
    },
    {
        "number": 4845,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    D, M = map(int, stdin.split())\n    D = D % 7\n    day_dict = {1: \"Monday\", 2: \"Tuesday\", 3: \"Wednesday\", 4: \"Thursday\", 5: \"Friday\", 6: \"Saturday\", 0: \"Sunday\"}\n    return day_dict[D]",
        "test": "assert solution(\"7 3\") == \"Sunday\"",
        "num_ids": 1615
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.readline().strip())\n    D = int(stdin.readline().strip())\n    X = int(stdin.readline().strip())\n    if D < L:\n        L, D = D, L\n    N = 0\n    M = D\n    while N <= M:\n        if sum_of_digits(N) == X:\n            break\n        if sum_of_digits(N) > X:\n            M = N - 1\n        else:\n            N += 1\n    return N, M\n\ndef",
        "test": "assert solution('100\\n500\\n12\\n') == '129\\n480'",
        "num_ids": 1722
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(area) + '\\n' + str(count)\n",
        "test": "assert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'",
        "num_ids": 2817
    },
    {
        "number": 4848,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while m**2 < n:\n        m += 1\n    return str(m)\n",
        "test": "assert solution(\"3\") == \"2\"",
        "num_ids": 613
    },
    {
        "number": 4849,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1')\n    '1'\n    >>> solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1')\n    'HE GOT AWAY!'\n    \"\"\"\n    return''.join(\n        str(index + 1)\n        for index, registration_code in enumerate(stdin.splitlines())\n        if registration_code.startswith('FBI')\n    ) or 'HE GOT AWAY!'\n",
        "test": "assert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'",
        "num_ids": 1750
    },
    {
        "number": 4850,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string.\"\"\"\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1622
    },
    {
        "number": 4851,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        if (sum(map(int, str(n))) * 10) % n == 0:\n            return str(n)\n        n += 1\n",
        "test": "assert solution('5') == '5'",
        "num_ids": 910
    },
    {
        "number": 4852,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"+\")\n    count = 0\n    for i in line:\n        if i.isdigit():\n            count += int(i)\n    return count\n",
        "test": "assert solution('') == 0",
        "num_ids": 5532
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 5 2\\n\")\n    '2 5'\n    \"\"\"\n    # pass\n    _, a = stdin.split()\n    a = list(map(int, a.split()))\n    n = a.pop(0)\n    C = a.pop(0)\n    for i in range(1, n):\n        C = a[i - 1] + C\n        C = a[i] + C\n    print(C)\n",
        "test": "assert solution('1 2 3') == '2 3 5'",
        "num_ids": 2177
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, c = stdin.split(' ')\n    n, c = int(n), int(c)\n\n    # init list with zeros\n    lst = [0] * n\n\n    # add counts to the list\n    for i in range(n):\n        lst[i] = stdin.split(' ')[i]\n\n    # sort list\n    lst.sort()\n    return''.join(lst)\n\n\ndef",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"",
        "num_ids": 1395
    },
    {
        "number": 4855,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    a, i = stdin.split(\" \")\n    a, i = int(a), int(i)\n    return str(a * i)\n",
        "test": "assert solution(\"1 100\") == \"100\"",
        "num_ids": 1150
    },
    {
        "number": 4856,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = stdin.split(' ')\n    num1, num2 = list(num1), list(num2)\n    num1.reverse()\n    num2.reverse()\n    return str(max(int(''.join(num1)), int(''.join(num2))))\n",
        "test": "assert solution(\"221 231\") == \"132\"",
        "num_ids": 878
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''.join(choices(string.ascii_lowercase, k=int(stdin.split()[0]), weights=[int(i) for i in stdin.split()[1:]])) or \"impossible\"",
        "test": "assert solution(\"7 96\") == \"contest\"",
        "num_ids": 1199
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    lines = stdin.splitlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    c = lines[0].split()[2]\n\n    # for each frame\n    for i in range(1, m + 1):\n        # get the char in each line\n        lst = lines[i].split()\n        # empty line\n        if len(lst) == 0:\n            continue\n        # add empty line to the result\n        if i == m:\n            lst.append(\"\")\n\n        # join char into the string\n        result = \"\".join(lst)\n        # add to the result\n        if i < m:\n            print(result)\n        else:\n            print(result, end=\"\")",
        "test": "assert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB'",
        "num_ids": 5994
    },
    {
        "number": 4859,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = [int(x) for x in stdin.split()]\n    if l == 0:\n        return 'impossible'\n    elif l == 1 or l == 2:\n        return '1 0 {}'.format(l)\n    elif l == 3:\n        if b < 3 and d < 2:\n            return '1 1 1'\n        elif b < 3:\n            return '1 1 {}'.format(l)\n        elif d < 2:\n            return '1 {} 1'.format(l)\n        else:\n            return '1 2 0'\n    elif l == 4:\n        if b < 4:\n            return '1 1 1 1'\n        elif b < 5:\n            return '1 1 2 1'\n        elif b < 6:\n            return '1 2 1 1'\n        elif b < 7:\n            return '1 3 0 1'\n        elif b < 8:\n            return '2 1 1 1'\n        elif b < 9:\n            return '2 1 2 1'\n        elif b < 10:\n            return '2 2 1 1'\n        else:\n            return '2 3 0 1'\n    elif l == 5:\n        if b < 5:\n            return '1 1 1 1 1'\n        elif b < 6:\n            return '1 1 2 1 1'\n        elif b < 7:\n            return '1 2 1 1 1'\n        elif b < 8:\n            return '1 3 0 1 1'\n        elif b < 9:\n            return '2 1 1 1 1'\n        elif b < 10:\n            return '2 1 2 1 1'\n        elif b < 11:\n            return '2 2 1 1 1'\n        elif b < 12:\n            return '2 3 0 1 1'\n        elif b < 13:\n            return '3 1 1 1 1'\n        elif b < 14:\n            return '3 1 2 1 1'\n        elif b < 15:\n            return '3 2 1 1 1'\n        else:\n            return '3 3 0 1 1'\n    else:\n        return 'impossible'",
        "test": "assert solution('2 2 2 12') == 'impossible'",
        "num_ids": 2767
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    values = stdin.split('\\n')\n    values = list(map(int, values))\n    values = sorted(values)\n    for i in range(1, len(values) + 1):\n        if i not in values:\n            result += str(i) + '\\n'\n    return result[:-1]\n\nprint(solution(input()))\n",
        "test": "assert solution('''8",
        "num_ids": 1710
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # Task: In how long Miroslava can go and in what parameter she can solve the problem\n    # Input: n, p, s, v\n    # Output: t, c\n\n    n, p, s, v = map(float, stdin.split())\n    t = n * (log2(n) ** (2 ** (v / s))) / (p * 10 ** 9)\n    c = t / (1 + 1 / t)\n    return f'{t:.6f} {c:.6f}'",
        "test": "assert solution(a) == b",
        "num_ids": 2334
    },
    {
        "number": 4862,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to this problem\"\"\"\n    number_characters = int(stdin)\n    if number_characters == 0:\n        return \"0\"\n    elif number_characters == 1:\n        return \"0\"\n    else:\n        return str(number_characters * (number_characters - 1) // 2)\n",
        "test": "assert solution('3') == '3'",
        "num_ids": 565
    },
    {
        "number": 4863,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return len(s)\n",
        "test": "assert solution('') == 0",
        "num_ids": 1063
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n",
        "test": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"",
        "num_ids": 4000
    },
    {
        "number": 4865,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here:\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 2179
    },
    {
        "number": 4866,
        "max_answer_num": 27,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for AoC 2020 Day 4 part 1\"\"\"\n    return 'yup' if '31' in stdin or '25' in stdin else 'nope'\n",
        "test": "assert solution(stdin='OCT 31') == 'yup'",
        "num_ids": 2713
    },
    {
        "number": 4867,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return \"\\n\".join(\n        [\n            \"\".join(\n                [\".\" if i % 2 == 0 else \"#\" for i, c in enumerate(line)]\n            )\n            for line in stdin.splitlines()\n        ]\n    )\n",
        "test": "assert solution('') == ''",
        "num_ids": 3236
    },
    {
        "number": 4868,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return \"8/8/4k3/4q2/8/8/4r3/8 b - - 0 1\"\n",
        "test": "assert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\")",
        "num_ids": 11479
    },
    {
        "number": 4869,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    a, n = map(float, stdin.split())\n    if (n > 100) or (n < 0):\n        return \"Need more materials!\"\n    elif (a > 100) or (a < 0):\n        return \"Need more materials!\"\n    elif (a * a) <= n:\n        return \"Diablo is happy!\"\n    else:\n        return \"Need more materials!\"",
        "test": "assert solution(\"2.999999 4.000000\") == \"Need more materials!\"",
        "num_ids": 1164
    },
    {
        "number": 4870,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n    if s >= g:\n        return \"use the stairs\"\n    if g < f:\n        return \"use the stairs\"\n    if u >= f or d >= f:\n        return \"use the stairs\"\n    return u * f + d * f\n",
        "test": "assert solution(\"10 100 100 1 100\") == \"use the stairs\"",
        "num_ids": 3135
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in stdin.splitlines():\n        total += int(i) * pow(0.2, i)\n    return f\"{total:.2f}\"\n",
        "test": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"",
        "num_ids": 2191
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = [int(d) for d in stdin.readline().split(' ')]\n\n    cleanups = 0\n    for i in range(1, n):\n        if d[i - 1] >= d[i]:\n            cleanups += 1\n\n    return cleanups\n\nprint(solution(stdin))\n",
        "test": "assert solution(",
        "num_ids": 2658
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 4\n   ... ######\n   ... #P.GTG#\n   ... #..TGG#\n   ... ######\n   ... ''')\n    '1'\n    \"\"\"\n    width, height = map(int, stdin.split())\n    # 2d list of walls\n    walls = [[True] * width for _ in range(height)]\n    # 2d list of gold\n    gold = [[None] * width for _ in range(height)]\n    # 2d list of traps\n    traps = [[False] * width for _ in range(height)]\n    # starting position\n    walls[0][0] = False\n    # number of gold collected\n    gold_collected = 0\n    # player position\n    pos = [0, 0]\n    for row, line in enumerate(stdin.split('\\n')):\n        for col, char in enumerate(line):\n            if char == '#':\n                walls[row][col] = True\n            elif char == 'P':\n                pos = [row, col]\n            elif char == 'G':\n                gold[row][col] = True\n                gold_collected += 1\n            elif char == 'T':\n                traps[row][col] = True\n\n    # Move forward one unit in any of the four directions\n    def move(pos, direction):\n        pos[0] += direction[0]\n        pos[1] += direction[1]\n        if walls[pos[0]][pos[1]]:\n            pos[0] -= direction[0]\n            pos[1] -= direction[1]\n\n    # Count how many other gold and traps are around current position\n    def get_count(pos):\n        count = 0\n        for direction in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            new_pos = [pos[0] + direction[0], pos[1] + direction[1]]\n            if new_pos == pos:\n                continue\n            if traps[new_pos[0]][new_pos[1]]:\n                count += 1\n            elif gold[new_pos[0]][new_pos[1]]:\n                count += 1\n        return count\n\n    # Collect gold\n    def collect_gold(pos):\n        if pos == pos[0] and pos[1] == 0:\n            return gold_collected\n        else:\n            return 0\n\n    # Collect gold and traps\n    def collect_gold_and_traps(pos):\n        if pos == pos[0] and pos[1] == 0:\n            return gold_collected\n        else:\n            return get_count(pos)\n\n    # Move forward one unit in any of the four directions\n    def move_forward(pos):\n        # Trapped\n        if get_count(pos)!= 0:\n            return 0, False\n        # Next to a trap\n        elif get_count(pos) == 1:\n            # Dead end\n            if get_count(pos + [0, 1]) == 0:\n                return 0, False\n            else:\n                # Collect gold\n                if collect_gold(pos + [0, 1]):\n                    return gold_collected, True\n                else:\n                    # Collect traps\n                    return collect_gold_and_traps(pos + [0, 1]), True\n        # Next to gold\n        elif get_count(pos) == 2:\n            # Collect gold\n            if collect_gold(pos + [0, 1]):\n                return gold_collected, True\n            else:\n                return 0, False\n        # Move forward\n        move(pos, [(0, 1)])\n        return 1, True\n\n    # Loop\n    moved = True\n    while moved:\n        moved, _ = move_forward(pos)\n\n    return str(gold_collected)\n",
        "test": "assert solution(\"7 4\\n#G...#\\n#...T#\\n#...#\\n#...#\") == 2",
        "num_ids": 6748
    },
    {
        "number": 4874,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the rating of a dance.\n\n    :param stdin: The input grid.\n    :return: The rating.\n    \"\"\"\n\n    # Finds the number of moves.\n    return stdin.count('_')\n",
        "test": "assert solution('') == 0",
        "num_ids": 6734
    },
    {
        "number": 4875,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 1317
    },
    {
        "number": 4876,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    k = 0\n    restaurants = stdin.split()\n    for i in range(len(restaurants)):\n        restaurants[i] = restaurants[i].split('\\n')\n        k += len(restaurants[i][1:])\n    d = {}\n    for i in range(len(restaurants)):\n        for j in range(1, len(restaurants[i])):\n            d[restaurants[i][j]] = restaurants[i][0]\n    if ('pea soup' in d.keys()) and ('pancakes' in d.keys()):\n        return d['pea soup']\n    else:\n        return 'Anywhere is fine I guess'\n    return \"\"\n    pass\n",
        "test": "assert solution(\"3\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"Anywhere is fine I guess\"",
        "num_ids": 3839
    },
    {
        "number": 4877,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    return h // (a - b) + 1 if h % (a - b)!= 0 else h // (a - b)\n",
        "test": "assert solution(\"5 0 5\") == 1",
        "num_ids": 681
    },
    {
        "number": 4878,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = map(int, stdin.split())\n    return str(round((s1 + s2) / 2))\n",
        "test": "assert solution('1 1') == '1'",
        "num_ids": 897
    },
    {
        "number": 4879,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2, n3 = stdin.split()\n    if n1 == 'South' and n2 == 'West' and n3 == 'East':\n        return 'Yes'\n    elif n1 == 'South' and n2 == 'East' and n3 == 'West':\n        return 'Yes'\n    elif n1 == 'North' and n2 == 'East' and n3 == 'West':\n        return 'Yes'\n    elif n1 == 'North' and n2 == 'West' and n3 == 'East':\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution(\"North South East\") == \"No\"",
        "num_ids": 1976
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    k = stdin.split()[n + 2: n + m + 2]\n    letters = stdin.split()[n + m + 3:]\n    return ''.join(map(lambda c: chr(ord('a') + (ord(c) - ord('a') + ord('a') - ord('z')) % 26), k)) + ''.join(letters)\n",
        "test": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") =='marywasnosyagain'",
        "num_ids": 3313
    },
    {
        "number": 4881,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if (N == 1):\n        return 'Odd'\n    else:\n        sum = 0\n        for i in range(1, N + 1):\n            sum += i\n        if (sum % 2 == 0):\n            return 'Even'\n        else:\n            return 'Odd'\n\nprint(solution('3'))",
        "test": "assert solution('1') == 'Odd'",
        "num_ids": 1102
    },
    {
        "number": 4882,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    num_of_estimate = int(stdin.split('\\n')[0])\n    estimate = stdin.split('\\n')[1:]\n    result = []\n    for est in estimate:\n        if len(est) < 6:\n            result.append(len(est))\n        else:\n            temp = ''\n            for i in est:\n                temp += i\n            result.append(len(temp))\n    return '\\n'.join([str(est) for est in result])\n",
        "test": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"",
        "num_ids": 1367
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'yes' if the two words match, 'no' otherwise.\"\"\"\n    # Your code here\n    stdin = stdin.strip().split('\\n')\n    translation = stdin[0]\n    stdin = stdin[1:]\n    for line in stdin:\n        a, b = line.split()\n        if len(a)!= len(b):\n            print('yes')\n        elif len(a) == len(b) and sorted(a) == sorted(b):\n            print('yes')\n        else:\n            print('no')",
        "test": "assert solution('9 5\\n'",
        "num_ids": 5799
    },
    {
        "number": 4884,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(chr, map(ord, stdin)))\n    \n",
        "test": "assert solution('') == ''",
        "num_ids": 780
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Prints the description of the chessboard state.\n    \"\"\"\n    pass\n",
        "test": "assert solution('|:::|...|:::|...|:::|...|:::|...|') == \"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"",
        "num_ids": 7245
    },
    {
        "number": 4886,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    def f(x: int) -> bool:\n        return not (x%2 or x in (1, n))\n    q = [set([]) for _ in range(k)]\n    q[0].add(n)\n    for _ in range(k):\n        new_q = set([])\n        for x in q[-1]:\n            new_q.add(x-1)\n            new_q.add(x+1)\n            new_q.add(x*2)\n        q.append(new_q)\n        if all(f(x) for x in q[-1]):\n            return \"Your wish is granted!\"\n    return \"You will become a flying monkey!\"\n",
        "test": "assert solution(\"2 1\") == \"You will become a flying monkey!\"",
        "num_ids": 1428
    },
    {
        "number": 4887,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('16') == '16'",
        "num_ids": 382
    },
    {
        "number": 4888,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split('\\n')[0].split())\n    lst = list(map(int, stdin.split('\\n')[1].split()))\n    counter = 0\n    while T > 0:\n        T = T - lst[counter]\n        if T >= 0:\n            counter += 1\n        else:\n            break\n    return str(counter)\n",
        "test": "assert solution('4 180\\n45 30 55 20 80 20') == '4'",
        "num_ids": 1193
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('4\\n21\\n34\\n18\\n9') == '79'",
        "num_ids": 2495
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(n) for n in stdin.split()]\n    c = [int(n) for n in stdin.split()]\n    c.sort()\n    i = 1\n    max_num = 0\n    while i < s:\n        if c[i] + i > d:\n            break\n        i += 1\n    if i == s:\n        return 'impossible'\n    else:\n        i -= 1\n    c_new = [i for i in c[:i]]\n    c_old = [i for i in c[i:]]\n    c_new.extend(c_old)\n    i = 1\n    while i < m:\n        max_num = max(max_num, i + sum(c_new[:i]))\n        i += 1\n    return''.join(map(str, c_new[:max_num]))\n",
        "test": "assert solution(\"5 3 3 4\\n0 1 4\") == '2 3 0'",
        "num_ids": 3118
    },
    {
        "number": 4891,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns input string.\"\"\"\n    return stdin\n",
        "test": "assert solution('0 0 0 0 0 -10') == '0 0 0 0 0 -10'",
        "num_ids": 1231
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(s)\n",
        "test": "assert solution('''",
        "num_ids": 1195
    },
    {
        "number": 4893,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return str(1)",
        "test": "assert solution(\"1 2 4\") == \"1\"",
        "num_ids": 1013
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                           \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------'",
        "num_ids": 5725
    },
    {
        "number": 4895,
        "max_answer_num": 21,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    nums = [int(x) for x in stdin.strip().split()]\n    nums = sorted(nums)\n    # print(nums)\n    if nums[2] < nums[1] + nums[0]:\n        return 'possible'\n    else:\n        return 'impossible'\n",
        "test": "assert solution(\"3\\n1 1 1\") == \"possible\"",
        "num_ids": 1574
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n    #from numpy import argmax\n    #from numpy import argmin\n    #from numpy import around\n    #from scipy import stats\n    #import numpy as np\n    #import math\n    #import statistics\n    #import itertools\n    #import collections\n    #from collections import Counter\n    #from functools import reduce\n    #from decimal import *\n    #from itertools import combinations\n    #from numpy import array\n    #from numpy import split\n    #from numpy import array_split\n    #from numpy import zeros\n    #from numpy import percentile\n    #from numpy import append\n    #from numpy import empty\n    #from numpy import linspace\n    #from numpy import logspace\n    #from numpy import arange\n",
        "test": "assert solution(\"10 3 3 2 1 2 2 1 1 3\") == 3",
        "num_ids": 2222
    },
    {
        "number": 4897,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the best team of runners.\n    :param stdin: The input.\n    :return: The output.\n    \"\"\"\n    try:\n        # Get the number of runners.\n        num_runners = int(stdin[0])\n        # Get the runners and times.\n        runners = []\n        times = []\n        for runner in stdin[1:]:\n            # Get the runner name and times.\n            runner = runner.split(' ')\n            runner_name = runner[0]\n            runner_time = float(runner[1])\n            # Add the runner to the list.\n            runners.append(runner_name)\n            times.append(runner_time)\n        # Initialize the list of best runners.\n        best_runners = []\n        # Initialize the best time.\n        best_time = 100 * 4\n        # Find the best team.\n        for i in range(1, num_runners + 1):\n            # Find the best team of size i.\n            for subset in itertools.combinations(range(num_runners), i):\n                # Find the best team of size i.\n                for combo in itertools.permutations(subset):\n                    # Initialize the time.\n                    time = 0\n                    # Add the times of all the runners in the team.\n                    for runner in range(i):\n                        # Find the time for the team.\n                        time += times[combo[runner]]\n                    # If the time is the new best, add the team to the list.\n                    if abs(time - best_time) < 10 ** -9:\n                        best_runners.append(list(itertools.compress(runners, combo)))\n                        best_time = time\n                    # If the time is not the new best, add the team to the list if the new best is not found.\n                    else:\n                        if abs(time - best_time) < 10 ** -9:\n                            best_runners.append(list(itertools.compress(runners, combo)))\n        # Output the best time.\n        print(round(best_time, 10))\n        # Output the best runners.\n        for i in best_runners[0]:\n            print(i)\n        return None\n    except:\n        return None\n",
        "test": "assert solution(\"3\\nA 2.14 B 2.62 C 1.52\")!= \"B\"",
        "num_ids": 2790
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not possible'",
        "test": "assert solution(",
        "num_ids": 2319
    },
    {
        "number": 4899,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('Alligator') == 'Alligator'",
        "num_ids": 605
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    _, num = stdin.split('\\n')\n    num = int(num)\n    lst = []\n    for _ in range(num):\n        lst.append(list(map(int, stdin.split('\\n')[-1].split())))\n\n    for i in range(num):\n        for j in range(i + 1, num):\n            lst[i][j], lst[j][i] = lst[j][i], lst[i][j]\n\n    for i in range(num):\n        for j in range(i + 1, num):\n            print(i + 1, j + 1)\n    return \"\"",
        "test": "assert solution(\"2\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\"",
        "num_ids": 2415
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # set the alphabet\n    alphabet = [chr(i) for i in range(65, 91)]\n\n    # split string into half\n    left, right = stdin[:len(stdin) // 2], stdin[len(stdin) // 2:]\n\n    # define rotation function\n    rotate = lambda l: sum([ord(x) - ord('A') for x in l])\n\n    # rotations\n    left_rot = rotate(left)\n    right_rot = rotate(right)\n\n    # rotate each half\n    left_r = ''.join([alphabet[(alphabet.index(x) + right_rot) % 26] for x in left])\n    right_r = ''.join([alphabet[(alphabet.index(x) + left_rot) % 26] for x in right])\n\n    # combine halves\n    return ''.join([left_r, right_r])\n",
        "test": "assert solution(\"AABBBB\") == \"BBBB\"",
        "num_ids": 3260
    },
    {
        "number": 4902,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('c') + stdin.count('a') - 2 * len(stdin)",
        "test": "assert solution(\"\") == 0",
        "num_ids": 452
    },
    {
        "number": 4903,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution for the first step in the project.\"\"\"\n    stdout: str = \"go\" if stdin[0] <= stdin[1] else \"no\"\n    return stdout\n",
        "test": "assert solution('aaaaaah') == 'go'",
        "num_ids": 897
    },
    {
        "number": 4904,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return 'A' if stdin.count('A') > stdin.count('B') else 'B'",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"",
        "num_ids": 1532
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the least amount of time Luka needs to make his delivery, if he starts driving $K$ minutes after the arrival of Mister George.\n\n    :param str stdin: input on two lines,\n                       first line contains two integers $N$ and $M$\n                       second line contains four integers $A$, $B$, $K$ and $G$\n                       third line contains $G$ integers, the labels of intersections mister George will visit.\n                       every pair of adjacent integers denotes a street he will traverse.\n                       that street will exist and Mister George will traverse every street at most once.\n                       each of the following $M$ lines contains three integers $A$, $B$ and $L$\n                       meaning that there is a street between intersection $A$ and $B$,\n                       and it takes $L$ minutes to traverse. $L$ will be between 1 and 1000.\n\n    :rtype: str\n    :return: the least amount of time Luka needs to make his delivery\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    A, B, K, G = map(int, stdin.split(' '))\n    P = []\n    for i in range(m):\n        A, B, L = map(int, stdin.split(' '))\n        P.append((A, B, L))\n\n    G = set(map(int, stdin.split('\\n')[:-1]))\n    P = sorted(P, key=lambda x: x[0])\n    last = -float('inf')\n    L = 0\n    for i in range(len(P)):\n        if P[i][0] in G:\n            L += P[i][2]\n            last = P[i][1]\n        else:\n            if P[i][0] >= last:\n                L += P[i][2]\n                last = P[i][1]\n            else:\n                if P[i][2] > L:\n                    L = P[i][2]\n                else:\n                    continue\n    return str(L)\n",
        "test": "assert solution('''",
        "num_ids": 4331
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[1:]\n    if stdin[0] == 'E':\n        result = ''\n        for i in stdin[1]:\n            n = 0\n            while i * n in stdin[1]:\n                n += 1\n            result += i + str(n)\n        return result\n    else:\n        result = ''\n        for i in range(0, len(stdin[1]), 2):\n            result += stdin[1][i] * int(stdin[1][i + 1])\n        return result\n\n\ndef",
        "test": "assert solution(\"D 8\") == \"D8\"",
        "num_ids": 1819
    },
    {
        "number": 4907,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Alice or Bob depending on who can break the\n    longest piece of branch first.\n\n    >>> solution(\"2\")\n    'Alice'\n    >>> solution(\"1\")\n    'Bob'\n    \"\"\"\n    n = int(stdin)\n\n    return \"Alice\" if n % 2 == 0 else \"Bob\"\n",
        "test": "assert solution(\"6\\n\") == \"Alice\"",
        "num_ids": 802
    },
    {
        "number": 4908,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a) + '+' + str(b) + '=' + str(c)\n",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "num_ids": 1897
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split('\\n')[:2])\n    D = list(map(int, stdin.split('\\n')[2:]))\n    visited = [False] * N\n    visited[0] = True\n    to_visit = [0]\n    ans = 'YES'\n    while to_visit:\n        current_room = to_visit.pop()\n        for room in range(D[current_room - 1], N):\n            if not visited[room]:\n                visited[room] = True\n                to_visit.append(room)\n                if current_room == 1 and room == N - 1:\n                    continue\n                if current_room < room:\n                    ans = 'NO'\n                    break\n        if ans == 'NO':\n            break\n    return ans\n",
        "test": "assert solution('''8",
        "num_ids": 2619
    },
    {
        "number": 4910,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    poll_count = int(stdin[0])\n    responses = stdin[1:]\n\n    best_categories = []\n\n    for response in responses:\n        if 'ghost' in response:\n            best_categories.append('ghost')\n        if'mummy' in response:\n            best_categories.append('mummy')\n        if 'witch' in response:\n            best_categories.append('witch')\n        if 'demon' in response:\n            best_categories.append('demon')\n\n    return''.join(sorted(set(best_categories)))\n",
        "test": "assert solution('5\\ndemon\\ndemon\\ndemon\\ndemon') == 'demon'",
        "num_ids": 1791
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return \" \".join(\n        [attr for attr in stdin.split(\"\\n\")]\n        + [\n            sorted(\n                [\n                    \" \".join(\n                        [\n                            song.split()[index]\n                            for index in range(len(song.split()))\n                        ]\n                    )\n                    for song in stdin.split(\"\\n\")\n                ],\n                key=lambda song: song,\n            )\n        ]\n    )",
        "test": "assert solution(\"Artist Album Song_Title Length_seconds\\n\"",
        "num_ids": 2330
    },
    {
        "number": 4912,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = [int(i) for i in stdin.split()]\n    bricks = [int(i) for i in stdin.split()][2:]\n    # base case\n    if not n:\n        return 'YES'\n\n    bricks.sort()\n    # sort by len\n    # h = len(bricks)\n\n    if w % h!= 0:\n        return 'NO'\n    else:\n        # this is the case where we can divide by h, then there will be n % h bricks.\n        if n <= h:\n            return 'YES'\n        else:\n            total_bricks = n - h * (n // h)\n            if total_bricks <= 0:\n                return 'YES'\n            elif total_bricks < bricks[0]:\n                return 'YES'\n            else:\n                return 'NO'\n",
        "test": "assert solution('3 10 10\\n3 6 7') == 'NO'",
        "num_ids": 2397
    },
    {
        "number": 4913,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 6026
    },
    {
        "number": 4914,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    answer = [0, 0, 0]\n    a_score, b_score, c_score = 0, 0, 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'A':\n            a_score += 1\n        elif stdin[i] == 'B':\n            b_score += 1\n        else:\n            c_score += 1\n        if a_score > answer[0]:\n            answer[0] = a_score\n            answer[1] = b_score\n            answer[2] = c_score\n        elif a_score == answer[0]:\n            if b_score > answer[1]:\n                answer[1] = b_score\n                answer[2] = c_score\n            elif b_score == answer[1]:\n                if c_score > answer[2]:\n                    answer[2] = c_score\n    return answer[0]\n",
        "test": "assert solution(\"CACA\") == 2",
        "num_ids": 1891
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    log = []\n    for line in stdin.splitlines():\n        n, problem, result = line.split()\n        if result == 'right':\n            log.append((int(n), problem))\n    log.sort()\n    n_problems = n_solved = 0\n    time = 0\n    for minutes, problem in log:\n        if problem == 'E':\n            time += minutes\n        else:\n            if problem == 'A':\n                if time < 30:\n                    time += 20\n                else:\n                    time += 20 - (time % 20)\n            elif problem == 'B':\n                if time < 60:\n                    time += 40\n                else:\n                    time += 40 - (time % 40)\n            elif problem == 'C':\n                if time < 90:\n                    time += 60\n                else:\n                    time += 60 - (time % 60)\n            elif problem == 'D':\n                if time < 120:\n                    time += 80\n                else:\n                    time += 80 - (time % 80)\n            elif problem == 'F':\n                time += 100\n            elif problem == 'G':\n                time += 120\n            elif problem == 'H':\n                time += 140\n            elif problem == 'I':\n                time += 160\n            elif problem == 'J':\n                time += 180\n            elif problem == 'K':\n                time += 200\n            elif problem == 'L':\n                time += 220\n            elif problem == 'M':\n                time += 240\n            elif problem == 'N':\n                time += 260\n            elif problem == 'O':\n                time += 280\n            elif problem == 'P':\n                time += 300\n            n_problems += 1\n            if problem!= 'E':\n                n_solved += 1\n    return n_solved, time\n",
        "test": "assert solution(r\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == '4 502'",
        "num_ids": 4022
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    tiles = [[int(num) for num in stdin.readline().split()] for _ in range(n)]\n    return min(\n        abs(tile1 - tile2) + abs(tile1 - tile2)\n        for tile1 in range(1, k + 1)\n        for tile2 in range(1, k + 1)\n        if tile1 == tile2\n    )\n",
        "test": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5",
        "num_ids": 2636
    },
    {
        "number": 4917,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"edward is right\" or \"gunilla has a point\".\"\"\"\n    log = []\n    for line in stdin.splitlines()[1:]:\n        a, b = [int(x) for x in line.split()]\n        log.append((a, b))\n\n    last_time = log[0][0]\n    for t in range(last_time, last_time + 7):\n        times = [x for x in log if x[0] <= t and x[1] > t]\n        if len(times) == 0:\n            return \"edward is right\"\n    return \"gunilla has a point\"\n",
        "test": "assert solution(\"2\\n1 7\\n5 5\") == \"edward is right\"",
        "num_ids": 1399
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # n: guest amount, q: query amount\n    n, q = stdin.split('\\n')[0].split()\n    n, q = int(n), int(q)\n    # build adjacency list\n    adj_list = [[] for _ in range(n)]\n    for _ in range(q):\n        op, *args = stdin.split('\\n')[1].split()\n        if op == 't':\n            adj_list[int(args[0]) - 1].append(int(args[1]) - 1)\n            adj_list[int(args[1]) - 1].append(int(args[0]) - 1)\n        else:\n            # no need to sort\n            print(len(set(adj_list[int(args[0]) - 1])))\n",
        "test": "assert solution(\"5 5\\n\" \"t 1 2\\n\" \"t 1 3\\n\" \"s 1\\n\" \"s 2\\n\" \"s 3\\n\" \"s 4\\n\" \"t 5 6\\n\" \"s 5\\n\" \"s 6\\n\" \"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n4\"",
        "num_ids": 2181
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the problem\"\"\"\n    pass\n",
        "test": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2016\\n1982\\n2016'",
        "num_ids": 2331
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return str(calc(stdin))[:-1]\n\n\ndef",
        "test": "assert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids": 4114
    },
    {
        "number": 4921,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for Homework Assignment #2:\n    Remove duplicate words and replace them with periods.\n\n    Parameters\n    ----------\n    stdin : str\n        A string of text.\n\n    Returns\n    -------\n    str\n        The text with duplicate words replaced by periods.\n    '''\n\n    # Get the list of words.\n    words = stdin.split()\n\n    # Convert the list of words to a set to eliminate duplicates.\n    unique_words = set(words)\n\n    # Convert the set back to a list of words.\n    words = list(unique_words)\n\n    # Return the text with duplicates replaced by periods.\n    return \" \".join(words)",
        "test": "assert solution('') == ''",
        "num_ids": 1999
    },
    {
        "number": 4922,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"satisfactory\" if len(stdin.split('\\n')) > 8 else \"unsatisfactory\"\n",
        "test": "assert solution('4\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n1 2 -3') == 'unsatisfactory'",
        "num_ids": 2708
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    outcomes = [int(i) for i in stdin.readline().split()]\n    outcomes = sorted(set(outcomes))\n    best = 0\n    bestIdx = 0\n    count = 0\n    for i in range(n):\n        count += 1 if outcomes[i] > outcomes[bestIdx] else 0\n        if count > best:\n            best = count\n            bestIdx = i\n    return str(bestIdx) if best!= 0 else 'none'\n",
        "test": "assert solution('1\\n2\\n2\\n5\\n5\\n6\\n') == 'none'",
        "num_ids": 2042
    },
    {
        "number": 4924,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    def time_to_sec(t: str) -> int:\n        h, m, s = map(int, t.split(':'))\n        return 3600 * h + 60 * m + s\n    s_curr, s_end = time_to_sec(stdin), time_to_sec(stdin)\n    while s_curr < s_end:\n        s_curr += 60\n        s_curr += s_curr / 86400 * s_end\n    return f'{s_curr // 3600:02d}:{s_curr // 60 % 60:02d}:{s_curr % 60:02d}'\n",
        "test": "assert solution(\"23:59:59\") == \"23:59:59\"",
        "num_ids": 2483
    },
    {
        "number": 4925,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split(\" \"))\n    return str(n) + str(1) * (n - 1)\n",
        "test": "assert solution('4 1\\n') == '1'",
        "num_ids": 625
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    def factorial(n):\n        res = 1\n        for i in range(1, n+1):\n            res *= i\n        return res\n    \n    ans = 0\n    for i in range(1, 101):\n        ans += 1 / factorial(i)\n    \n    return str(ans)\n",
        "test": "assert solution(\"3\") == 2.6666666666666665",
        "num_ids": 1216
    },
    {
        "number": 4927,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = stdin.split(' ')\n    N, P, Q = int(N), int(P), int(Q)\n\n    def score(N, P, Q):\n        if P > Q:\n            paul_wins, op_wins = N, P - Q\n        else:\n            paul_wins, op_wins = P - Q, N\n        return paul_wins, op_wins\n\n    if P > Q:\n        paul_wins, op_wins = score(N, P, Q)\n    else:\n        paul_wins, op_wins = score(N, Q, P)\n\n    if paul_wins > op_wins:\n        return \"paul\"\n    elif op_wins > paul_wins:\n        return \"opponent\"\n    else:\n        return \"paul\" if P > Q else \"opponent\"\n",
        "test": "assert solution(\"3 3 7\") == \"opponent\"",
        "num_ids": 1304
    },
    {
        "number": 4928,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return str(2)\n",
        "test": "assert solution('1') == '2'",
        "num_ids": 247
    },
    {
        "number": 4929,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin[::-1].upper() else \"No\"\n",
        "test": "assert solution('12345a') == 'No'",
        "num_ids": 1601
    },
    {
        "number": 4930,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    res = []\n    for word in stdin.split(' '):\n        new = []\n        for letter in word:\n            if letter in vowels:\n                new.append('p')\n            new.append(letter)\n        res.append(''.join(new))\n    return''.join(res)",
        "test": "assert solution(\"vzrvkzrkzrv\") == \"vzrvkzrkzrv\"",
        "num_ids": 1388
    },
    {
        "number": 4931,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(c) for c in stdin.split(' ')]\n    return str(-x) if abs(x) > abs(y) else str(y - x)",
        "test": "assert solution(\"32 2\") == \"-32\"",
        "num_ids": 1315
    },
    {
        "number": 4932,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    # complete this function\n    return 'both'",
        "test": "assert solution(\"2 2 3 3\") == \"both\"",
        "num_ids": 2173
    },
    {
        "number": 4933,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    return f'{sorted(map(int, stdin.split()))[2] + sorted(map(int, stdin.split()))[1] - sorted(map(int, stdin.split()))[0]}'\n",
        "test": "assert solution(\"0 0 0\") == \"0\"",
        "num_ids": 1282
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    return str(int(h * math.sin(math.radians(v))))\n",
        "test": "assert solution(\"500 70\") == \"533\"",
        "num_ids": 570
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    num_seg = int(stdin[0])\n    g = float(stdin[2])\n    lines = stdin[4:].split('\\n')\n    seg = []\n    for line in lines:\n        d, theta = [int(x) for x in line.split(' ')]\n        seg.append(Segment(d, theta))\n    seg.sort()\n    return '\\n'.join(str(abs(speed(seg, i, g))) for i in range(num_seg))\n\ndef",
        "test": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'",
        "num_ids": 1380
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    temps = [int(num) for num in stdin.readline().split()]\n    sorted_temps = sorted(temps)\n    low_temp = sorted_temps[0]\n    high_temp = sorted_temps[-1]\n\n    return f\"{days-2} {high_temp}\"\n",
        "test": "assert solution('5\\n23 27 31 28 30') == '2 28'",
        "num_ids": 1834
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n",
        "test": "assert solution('3 6\\n1 2 3') == '2'",
        "num_ids": 823
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.split('\\n')[0])\n    x = 0\n    queue = []\n    queue.append(stdin.split('\\n')[1])\n\n    while x < n:\n        while len(queue[0])!= 0:\n            if queue[0][0] == 'M':\n                queue.append(queue.pop(0))\n            else:\n                queue.insert(0, queue.pop(0))\n        x += 1\n    return len(queue)\n",
        "test": "assert solution(\"WWWMMM\") == \"5\"",
        "num_ids": 1003
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # the number of lines\n    n, k = stdin.split()\n\n    # the commands\n    commands = stdin.split()[1:]\n\n    # the egg\n    egg = 0\n\n    # the throw commands\n    for i, cmd in enumerate(commands):\n        # throw command\n        if cmd[0] == 't':\n            # the child\n            child = i % int(n)\n\n            # the direction\n            direction = -1 if cmd[1] == '-' else 1\n\n            # move the egg\n            egg = (egg + direction + int(n)) % int(n)\n\n        # undo command\n        else:\n            egg -= int(cmd[1:])\n\n    # the child with the egg\n    return str(egg)\n",
        "test": "assert solution('''5 4",
        "num_ids": 2862
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    return None\n",
        "test": "assert solution('2 3\\n1 2 3') == '6 7'",
        "num_ids": 1893
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n",
        "test": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"",
        "num_ids": 3484
    },
    {
        "number": 4942,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the earliest day when the party can take place.\n    '''\n    \n    days = [int(day) for day in stdin.split()]\n    length = len(days)\n    \n    # If the party can take place on day 1, the answer is 1\n    if sum(days) == length:\n        return 1\n    \n    # Else, the first day when the sum of the days becomes equal to length is the answer\n    for i in range(1, length):\n        if sum(days[:i]) == length:\n            return i\n    \n    # Otherwise, if the first day is not equal to length, then the party can take place at any day\n    # after the first day when the sum is equal to length\n    return i + 1\n",
        "test": "assert solution('') == 1",
        "num_ids": 933
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You will be given a string, and you must return a new string, made up of the same characters as the original, but where the vowels are \"a\" rather than \"e\" and \"i\" rather than \"o\".\n    '''\n    # Your code here\n    return \"\"\n",
        "test": "assert solution(\"1\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"",
        "num_ids": 4897
    },
    {
        "number": 4944,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)\n",
        "test": "assert solution('3') == '3'",
        "num_ids": 444
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a, b, m, s = [int(i) for i in stdin.split()]\n    x = min(m // (a + b), s // (a + b))\n    x = max(x, 1)\n    y = (m - 2 * x * a) // (a + b)\n    y = max(y, 1)\n    return str(a * x + b * y)\n",
        "test": "assert solution('3 1\\n12 16') == '34'",
        "num_ids": 1434
    },
    {
        "number": 4946,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    languages = []\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    languages = [int(i) for i in stdin[1].split(' ')]\n    \n    languages.sort()\n    min_diff = languages[1] - languages[0]\n    for i in range(1, len(languages)):\n        diff = languages[i] - languages[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return str(min_diff)\n",
        "test": "assert solution('4\\n2 2 2 2') == '0'",
        "num_ids": 943
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(eval(stdin) * (1000 / 4854)))",
        "test": "assert solution('1.2345') == '1208'",
        "num_ids": 698
    },
    {
        "number": 4948,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 6181
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\ndef",
        "test": "assert solution('''5 3 4",
        "num_ids": 1455
    },
    {
        "number": 4950,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 2294
    },
    {
        "number": 4951,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    for i in range(n):\n        print(stdin.split('\\n')[i])\n        print(stdin.split('\\n')[i + 1])\n    return 'correct'",
        "test": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"",
        "num_ids": 3992
    },
    {
        "number": 4952,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the name of the winner from the election data.\n\n    >>> solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***')\n    'Connie Froggatt'\n    \"\"\"\n    candidates = stdin.split('\\n')\n    votes = {c: 0 for c in set(candidates)}\n    for vote in candidates:\n        votes[vote] += 1\n    winner, max_votes = sorted(\n        votes.items(), key=lambda x: x[1], reverse=True)[0]\n    return winner if max_votes / len(candidates) > 0.5 else \"Runoff!\"",
        "test": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'",
        "num_ids": 3687
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Collect characters and languages\n    characters = [{'name': name, 'languages': set(languages.split())} for name, languages in [line.split() for line in stdin.splitlines()]]\n\n    # Find all characters that can translate to each language\n    languages = set()\n    for character in characters:\n        languages.update(character['languages'])\n    languages = sorted(languages)\n\n    # Find all characters that speak each language\n    languages_spoken_by = {language: set() for language in languages}\n    for character in characters:\n        for language in character['languages']:\n            languages_spoken_by[language].add(character['name'])\n\n    # Find all characters that can translate to all languages\n    languages_translatable = set(languages_spoken_by.keys())\n    for language, speakers in languages_spoken_by.items():\n        for speaker in speakers:\n            for l in speakers:\n                if speaker!= l and l in languages_translatable:\n                    languages_translatable.remove(l)\n\n    # Find the smallest set of characters to leave\n    min_set_size = len(characters)\n    for language in languages_translatable:\n        if all(speaker in languages_spoken_by[language] for speaker in languages_translatable):\n            min_set_size = min(min_set_size, len(languages_spoken_by[language]) - 1)\n\n    # Return solution\n    return min_set_size\n",
        "test": "assert solution(\"3\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'",
        "num_ids": 2660
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    N, B, H, W = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    print(a)\n    \n    def minCost(N, B, a, K):\n        n = 0\n        for i in range(K):\n            n += a[i]\n            if N <= n <= B:\n                return N * a[i]\n        return B * a[-1]\n\n    return minCost(N, B, a, H)\n",
        "test": "assert solution('''3 1000 2 3",
        "num_ids": 4378
    },
    {
        "number": 4955,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes in n and stdin and checks if each note can be played in a major scale.\n    Returns a string representing the major scale the song can be played in.\n    If no scales are possible to be played, returns \"none\".\n    '''\n    \n    # Create a list of all the notes.\n    notes = stdin.split()\n\n    # Create a dictionary of all the notes with the frequency of each note.\n    freq = {}\n    for note in notes:\n        if note not in freq:\n            freq[note] = 1\n        else:\n            freq[note] += 1\n\n    # Check if each note can be played in a major scale.\n    possible = []\n    for key in freq:\n        # Check if there is an A, B, C, D, E, F, or G in the notes.\n        if key in 'ABCDEFG':\n            # Check if there is only one of each of each letter.\n            if freq[key] == 1:\n                # Check if there are no sharps or flats in the notes.\n                if '#' not in key and 'b' not in key:\n                    # Check if the key is in the major scale.\n                    if key in 'ABCDEFG':\n                        possible.append(key)\n\n    if possible:\n        # Sort the notes in lexicographic order.\n        possible.sort()\n        # Return the major scale the song can be played in.\n        return''.join(possible)\n    else:\n        # Return none if there are no possible scales.\n        return \"none\"\n",
        "test": "assert solution(\"C E G A E C E G A\") == \"none\"",
        "num_ids": 4073
    },
    {
        "number": 4956,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    percentage = len([i for i in stdin if 'ae' in i]) * 100 / len(stdin)\n    if percentage >= 40:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"",
        "test": "assert solution('du nu sa dag') == 'haer talar vi rikssvenska'",
        "num_ids": 2056
    },
    {
        "number": 4957,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 4758
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the given input\"\"\"\n    boxes = list(map(int, stdin.split()))\n    boxes.sort(reverse=True)\n    tower = []\n    for i in range(0, 6, 2):\n        tower.append(boxes[i])\n        tower.append(boxes[i + 1])\n    tower.sort(reverse=True)\n    return''.join(map(str, tower))\n",
        "test": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"",
        "num_ids": 2014
    },
    {
        "number": 4959,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    return str(int(min(max(0, e - c), c - f)))",
        "test": "assert solution('0 0 0') == '0'",
        "num_ids": 584
    },
    {
        "number": 4960,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    num_str = stdin\n    octal_str = \"\"\n    num_oct = 0\n    # Pad the binary numeral with zeros on the left until the number of digits is divisible by three.\n    while len(num_str) % 3!= 0:\n        num_str = \"0\" + num_str\n    # Group adjacent binary digits into groups of $3$ digits.\n    for idx in range(0, len(num_str), 3):\n        octal_str += str(int(num_str[idx] + num_str[idx+1] + num_str[idx+2], 2))\n        num_oct += int(num_str[idx] + num_str[idx+1] + num_str[idx+2], 2)\n    return octal_str\n    \n",
        "test": "assert solution(\"1010\") == \"12\"",
        "num_ids": 6077
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    seats = [stdin[i:i + S] for i in range(0, len(stdin), S)]\n    print(solve(seats, R))\n\ndef",
        "test": "assert solution(\"3 2\\no.o\\no.o\\no.\") == \"2\"",
        "num_ids": 1758
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    drawers = []\n    for i in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        drawers.append((a, b))\n    drawers = list(zip(*drawers))\n    drawers = sorted(drawers)\n    for i, (a, b) in enumerate(drawers):\n        if a == 0 and b == 0:\n            print('LADICA')\n        elif a == 0:\n            print('LADICA')\n        elif b == 0:\n            print('SMECE')\n        else:\n            print('LADICA')\n    return ''",
        "test": "assert solution('''",
        "num_ids": 2470
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i, visited, stack):\n        if i in visited:\n            return 0\n        visited.add(i)\n        stack.append(i)\n        for j in range(len(stack) - 1, 0, -1):\n            if stdin[stack[j]] == stdin[stack[j - 1]]:\n                continue\n            stack = dfs(stack[j], visited, stack[:j])\n        return stack\n\n    stdin = stdin.split('\\n')[1]\n    n = int(stdin[0])\n    visited = set()\n    stack = []\n    result = []\n    for i in range(1, n + 1):\n        result.append(int(i))\n    for i in range(n - 1):\n        result = dfs(result[i], visited, result)\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(str(input())) == str(input()).strip(\"[]\").split(\", \")",
        "num_ids": 1359
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def solution(stdin: str) -> str:\n    N, H, L = map(int, stdin.split(' '))\n    horror_list = set(map(int, stdin.split('\\n')[1:]))\n    similarities = [list(map(int, line.split(' '))) for line in stdin.split('\\n')[2:]]\n    horror_index = [0] * N\n    for a, b in similarities:\n        if b in horror_list:\n            horror_index[a] = 1\n        else:\n            horror_index[a] = max(horror_index[a], horror_index[b] + 1)\n    return str(min(filter(lambda i: horror_index[i] == max(horror_index), range(N))))\n",
        "test": "assert solution(\"1\\n2\") == \"2\"",
        "num_ids": 3457
    },
    {
        "number": 4965,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n  n, *A = [int(x) for x in stdin.split()]\n  B = list(sorted(A))\n  if n < 3:\n    return 'impossible'\n  ans = [B[0]]\n  for i in range(1, n - 1):\n    if B[i] - B[i - 1] <= B[i + 1] - B[i]:\n      ans.append(B[i])\n    else:\n      return 'impossible'\n  ans.append(B[-1])\n  return''.join(map(str, ans))\n",
        "test": "assert solution(\"2\\n5 10\") == \"impossible\"",
        "num_ids": 2920
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 20 15\\n3 10\")\n    '18.4'\n    >>> solution(\"2 20 15\\n4 1\")\n    '17.2'\n    >>> solution(\"2 20 15\\n1 2\")\n    '20.0'\n    >>> solution(\"2 20 15\\n4 4\")\n    '20.0'\n    >>> solution(\"2 20 15\\n1 5\")\n    '19.8'\n    \"\"\"\n    n, p, k = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    return str(sum(times[i - 1] - i * (p / 100) for i in range(1, n + 1)) + k)\n",
        "test": "assert solution('2 20 15\\n3 10\\n5 10') == '18.400'",
        "num_ids": 2937
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    width = int(stdin.readline().rstrip())\n    grid = [[char for char in stdin.readline().rstrip()] for _ in range(width)]\n    n_spies = 0\n    n_houses = 0\n    for row in grid:\n        n_spies += row.count('S')\n        n_houses += row.count('H')\n    return abs(n_spies - n_houses)\n",
        "test": "assert solution(\"3\\n.H.S\\n....H\\n....H\\n\") == \"3\"",
        "num_ids": 1722
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, s, r = map(int, stdin.split('\\n')[0].split(' '))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    b = list(map(int, stdin.split('\\n')[2].split(' ')))\n    ans = 0\n    for i in range(s + 1):\n        if b[i] + 1 in a:\n            ans += 1\n    for j in range(r + 1):\n        if a[j] + 1 in b:\n            ans += 1\n    return ans\nprint(solution(input()))\n",
        "test": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == '0'",
        "num_ids": 1735
    },
    {
        "number": 4969,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    return \"%.9f\" % (100.0 * (R * R - C * C) / (R * R + R * C))\n",
        "test": "assert solution(\"1 1\") == \"0.000000000\"",
        "num_ids": 951
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a string of frosh enrollments, count the number of students who enroll\n    in exactly one of the five most popular courses.\n\n    Parameters\n    ----------\n    stdin : str\n        A string of frosh enrollments.\n\n    Returns\n    -------\n    str\n        The number of students who enroll in exactly one of the five most popular\n        courses.\n\n    Examples\n    --------\n    >>> solution(stdin='100 101 102 103 488')\n    2\n    >>> solution(stdin='100 200 300 101 102')\n    1\n    >>> solution(stdin='103 102 101 488 100')\n    2\n    \"\"\"\n   ...\n    ",
        "test": "assert solution('3\\n100 101 102 103\\n101 102 103 104\\n100 101 104') == '4'",
        "num_ids": 1216
    },
    {
        "number": 4971,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    n = 1\n    x = n**3\n    while x <= m:\n        n += 1\n        x = n**3\n    if x == m:\n        return str(n - 1)\n    else:\n        return 'none'\n",
        "test": "assert solution(\"400000\") == \"none\"",
        "num_ids": 985
    },
    {
        "number": 4972,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 1029
    },
    {
        "number": 4973,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 2737
    },
    {
        "number": 4974,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return \"too late\"",
        "test": "assert solution(\"2 10\\n1\\n1\\n\") == \"too late\"",
        "num_ids": 1601
    },
    {
        "number": 4975,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 3679
    },
    {
        "number": 4976,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution as a string.\"\"\"\n    dog = list(map(float, stdin.strip().split()[:2]))\n    gopher = list(map(float, stdin.strip().split()[2:]))\n\n    # Determines whether or not the gopher can escape\n    if gopher[0] >= dog[0] or gopher[1] >= dog[1]:\n        return \"The gopher cannot escape.\"\n\n    # Finds the coordinates of each hole\n    gopher_holes = []\n    for x in range(3):\n        hole = list(map(float, stdin.strip().split()[x * 2:x * 2 + 2]))\n        gopher_holes.append(hole)\n\n    # Finds the coordinates of each hole in the right direction\n    gopher_holes_right = []\n    for hole in gopher_holes:\n        gopher_holes_right.append([hole[0] - dog[0], hole[1] - dog[1]])\n\n    # Determines whether or not the gopher can escape through a hole\n    for gopher_hole in gopher_holes_right:\n        if gopher_hole[0] >= 0 and gopher_hole[1] >= 0:\n            return \"The gopher can escape through the hole at ({}, {}).\".format(gopher_hole[0], gopher_hole[1])\n\n    # If the gopher cannot escape through any hole, it will return the statement\n    return \"The gopher cannot escape.\"",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"",
        "num_ids": 3360
    },
    {
        "number": 4977,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    # stdin.readline()\n    # initial_position = list(map(int, stdin.readline().split()))\n    # stdin.readline()\n    # destination_position = list(map(int, stdin.readline().split()))\n    # t = int(stdin.readline())\n    initial_position = [3,4]\n    destination_position = [3,3]\n    t = 3\n    print(initial_position, destination_position, t)\n    return 'Y'",
        "test": "assert solution(\"0 0\\n0 0\\n0\\n\") == \"Y\"",
        "num_ids": 2761
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    grid_size = stdin[0]\n    grid_size = tuple(map(int, grid_size.split(' ')))\n\n    rows = stdin.split('\\n')[1:-1]\n\n    for index in range(len(rows)):\n        rows[index] = rows[index].split(' ')\n\n    return grid_size, rows\n\n\ndef",
        "test": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'",
        "num_ids": 5540
    },
    {
        "number": 4979,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    num = int(num)\n    num_reversed = bin(num)[2:]\n    num_reversed = num_reversed[::-1]\n    num_reversed = int(num_reversed, 2)\n    return str(num_reversed)\n",
        "test": "assert solution('0') == '0'",
        "num_ids": 417
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    packages = []\n    for i in range(N):\n        packages.append(stdin[i])\n    counter = 0\n    for i in range(len(packages)):\n        if 'pink' in packages[i] or 'rose' in packages[i]:\n            counter += 1\n    if counter == 0:\n        return \"I must watch Star Wars with my daughter\"\n    return counter\n    \n",
        "test": "assert solution('12\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon') == 'I must watch Star Wars with my daughter'",
        "num_ids": 2839
    },
    {
        "number": 4981,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    if a <= b and b <= c:\n        return str(a) + \" \" + str(b) + \" \" + str(c)\n    elif a <= c and c <= b:\n        return str(a) + \" \" + str(c) + \" \" + str(b)\n    elif b <= a and a <= c:\n        return str(b) + \" \" + str(a) + \" \" + str(c)\n    elif b <= c and c <= a:\n        return str(b) + \" \" + str(c) + \" \" + str(a)\n    elif c <= a and a <= b:\n        return str(c) + \" \" + str(a) + \" \" + str(b)\n    else:\n        return str(c) + \" \" + str(b) + \" \" + str(a)",
        "test": "assert solution(\"1 3 5\") == \"1 3 5\"",
        "num_ids": 1631
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    l = [l.strip() for l in stdin.splitlines()]\n    money = 0\n    for i in range(len(l)):\n        if l[i].startswith(\"buy\"):\n            x, y = l[i][4:].split()\n            money += int(x) * int(y)\n        if l[i].startswith(\"sell\"):\n            x, y = l[i][4:].split()\n            money -= int(x) * int(y)\n        if l[i].startswith(\"split\"):\n            x = l[i][6:]\n            money += int(x) * (int(x) / 2)\n        if l[i].startswith(\"merge\"):\n            x = l[i][6:]\n            money += int(x) * (int(x) * 2)\n    return str(money)\n    \ndef",
        "test": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.00000000\"",
        "num_ids": 5231
    },
    {
        "number": 4983,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 10)\n",
        "test": "assert solution(\"18\") == \"8\"",
        "num_ids": 875
    },
    {
        "number": 4984,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum number of islands.\"\"\"\n    pass",
        "test": "assert solution(None) == None",
        "num_ids": 1665
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(str.strip, stdin.split(\"\\n\")[:2])\n    N = int(N)\n    B = str.upper(B)\n\n    cards = []\n    for _ in range(N):\n        cards.append(str.strip(stdin.split(\"\\n\")[_ + 2]))\n\n    points = 0\n    for card in cards:\n        card_number = card[0]\n        card_suit = str.upper(card[1])\n\n        card_points = 0\n\n        if card_suit == B:\n            card_points += 11\n\n        if card_number == \"A\":\n            card_points += 1\n        elif card_number == \"K\":\n            card_points += 4\n        elif card_number == \"Q\":\n            card_points += 3\n        elif card_number == \"J\":\n            card_points += 20\n        elif card_number == \"T\":\n            card_points += 10\n\n        if card_number == \"9\" or card_number == \"8\" or card_number == \"7\":\n            card_points += 0\n        elif card_number == \"0\":\n            card_points += 0\n        elif card_number == \"1\":\n            card_points += 0\n        elif card_number == \"2\":\n            card_points += 0\n\n        points += card_points\n\n    return str(points)\n",
        "test": "assert solution('TH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '100'",
        "num_ids": 3110
    },
    {
        "number": 4986,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2]",
        "test": "assert solution('') == ''",
        "num_ids": 746
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    S, C, K = [int(x) for x in stdin.split('\\n')[0].split()]\n    L = [int(x) for x in stdin.split('\\n')[1].split()]\n    L.sort()\n    m, j = 0, 0\n    for i in range(1, len(L)):\n        if abs(L[i] - L[i - 1]) <= K:\n            j += 1\n        else:\n            m += 1\n            j = 0\n    return m + j\n",
        "test": "assert solution('5 3 0\\n0 0 1 1 2') == 3",
        "num_ids": 3073
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n4\\n5\\n')\n    0\n    >>> solution('1\\n5\\n')\n    5\n    >>> solution('4\\n0\\n')\n    0\n    \"\"\"\n    return '\\n'.join(str(factorial_digit(int(line))) for line in stdin.split('\\n'))\n",
        "test": "assert solution('2\\n3\\n4') == '6'",
        "num_ids": 3332
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    alice = 0\n    bob = 0\n    while len(a) > 0:\n        if len(a) % 2 == 0:\n            alice += max(a)\n            a.remove(max(a))\n        else:\n            bob += max(a)\n            a.remove(max(a))\n    return [alice, bob]\n",
        "test": "assert solution('3\\n2 3 4') == '12 8'",
        "num_ids": 1026
    },
    {
        "number": 4990,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = [int(i) for i in stdin.split()]\n    return str(k)\n",
        "test": "assert solution('5 2 1') == '2'",
        "num_ids": 587
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"5\") == \"36\"",
        "num_ids": 329
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"",
        "num_ids": 3239
    },
    {
        "number": 4993,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n",
        "test": "assert solution('a') == 'a'",
        "num_ids": 1634
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def solution(stdin: str) -> str:\n    first = (int(stdin[0]), int(stdin[1]))\n    second = (int(stdin[2]), int(stdin[3]))\n    third = (int(stdin[4]), int(stdin[5]))\n    A, B, C, D = second[0] - first[0], second[1] - first[1], third[0] - first[0], third[1] - first[1]\n    if D == 0:\n        return '0'\n    elif A == 0:\n        return str(C / B)\n    elif B == 0:\n        return str(C / A)\n    else:\n        return str((-C / B - C / A) / (1 / B - 1 / A))",
        "test": "assert solution(\"5 5\\n5 5\\n5 7\\n7 5\") == \"5 5\"",
        "num_ids": 6075
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1\\n1 61\") == \"1.016666667\"",
        "num_ids": 3090
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def solution(stdin: str) -> str:\n    cipher: str = stdin[0]\n    key: str = stdin[1]\n    encoded: str = \"\"\n    decoded: str = \"\"\n    for i, val in enumerate(cipher):\n        encoded += chr((ord(val) + ord(key[i % len(key)]) - 2 * ord('A')) % 26 + ord('A'))\n    for i in range(0, len(encoded), 2):\n        decoded += chr((ord(encoded[i]) + ord(encoded[i + 1]) - 2 * ord('A')) % 26 + ord('A'))\n    return decoded\n",
        "test": "assert solution('CQWKPQ') == 'IRAQ'",
        "num_ids": 1705
    },
    {
        "number": 4997,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def solution(stdin: str) -> str:\n    def is_ball(c):\n        return c == 'A' or c == 'B' or c == 'C'\n\n    string = stdin.strip()\n    n = len(string)\n    assert n > 0\n\n    index = 0\n    while index < n:\n        assert is_ball(string[index])\n\n        index += 1\n\n    if is_ball(string[0]):\n        return '1'\n    if is_ball(string[index % n]):\n        return '3'\n    if is_ball(string[(index + 1) % n]):\n        return '2'\n    return 'Invalid'\n",
        "test": "assert solution(\"ABCAB\") == \"1\"",
        "num_ids": 1332
    },
    {
        "number": 4998,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return max(a * b, a * c, a * d, b * c, b * d, c * d)\n",
        "test": "assert solution(\"1 1 1 1\") == 1",
        "num_ids": 1995
    },
    {
        "number": 4999,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    operations = 0\n    while a!= b:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a += 1\n        operations += 1\n    return str(operations)",
        "test": "assert solution('1 2') == '1'",
        "num_ids": 1315
    }
]