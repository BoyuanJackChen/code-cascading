[
    {
        "number": 4000,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(i) for i in stdin.split()]\n    l.sort()\n    ans = l[0]\n    for i in range(1, n):\n        if l[i] % ans!= 0:\n            ans = l[i]\n    return str(ans)",
        "test": "assert solution('1') == '1'",
        "num_ids": 2378,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_sum(k, rows):\n        row_len = len(rows[0])\n        half_row_len = row_len // 2\n        row_num = len(rows)\n\n        sums = [0] * row_num\n        sums[0] = sum(rows[0][:half_row_len])\n        sums[1] = sum(rows[1][:half_row_len])\n\n        for i in range(2, row_num):\n            sums[i] = rows[i][half_row_len] + sums[i - 1]\n\n        res = 0\n        for i in range(0, half_row_len):\n            for j in range(i + 1, half_row_len):\n                res = max(res, (sums[row_num - 1] - sums[0] + sums[1] - sums[0]) // k + 1)\n\n        return res\n\n    n, m, k = [int(s) for s in stdin.split()]\n    rows = [stdin.split() for _ in range(n)]\n    print(get_max_sum(k, rows))\n\n\ndef",
        "test": "assert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n",
        "test": "assert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    s = sum(arr)\n\n    if s%n!=0:\n        return str(-1)\n\n    s = s//n\n    dp = [[-1 for _ in range(s+1)] for _ in range(n)]\n\n    def search(i: int, val: int, s: int) -> int:\n        if i>=n:\n            return 0\n\n        if dp[i][s]!=-1:\n            return dp[i][s]\n\n        res = float('inf')\n        if val + arr[i] <= s:\n            res = min(res, search(i+1, arr[i], s-arr[i]))\n        if val - arr[i] >= 0:\n            res = min(res, search(i+1, arr[i], s-arr[i]))\n        dp[i][s] = 1 + res\n        return dp[i][s]\n\n    return str(search(0, s, s))\n",
        "test": "assert solution(\"2 2 5 2 5\") == \"3\"",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    calculate x_3 - x_2, y_3 - y_2\n    calculate x_5 - x_4, y_5 - y_4\n    calculate x_6 - x_1, y_6 - y_1\n    \n    Calculate the first slope.\n    calculate the second slope.\n    Calculate the third slope.\n    \n    If the third slope is 0 or 45 degrees, the third one is not 0 or 45 degrees.\n    If the second slope is 0 or 45 degrees, the second one is not 0 or 45 degrees.\n    \n    If the first slope is 0 or 45 degrees, the first one is not 0 or 45 degrees.\n    \n    if the first slope is not 0 or 45 degrees\n    if the second slope is not 0 or 45 degrees\n    if the third slope is not 0 or 45 degrees\n    \n    calculate the x and y distances between the two black sheets.\n    \n    if the x distances are equal and the y distances are equal\n    then the two black sheets can be seen from the white sheet\n    \n    return \"YES\"\n    '''\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n    \n    first_slope = (y_3 - y_2) / (x_3 - x_2)\n    second_slope = (y_5 - y_4) / (x_5 - x_4)\n    third_slope = (y_6 - y_1) / (x_6 - x_1)\n    \n    if third_slope == 0 or (third_slope % 45 == 0) and (third_slope // 45 == 1):\n        if second_slope == 0 or (second_slope % 45 == 0) and (second_slope // 45 == 1):\n            if first_slope == 0 or (first_slope % 45 == 0) and (first_slope // 45 == 1):\n                x_dist, y_dist = [abs(x_1 - x_2), abs(y_1 - y_2)]\n                if x_dist == y_dist:\n                    return \"YES\"\n    \n    return \"NO\"\n\n    \n",
        "test": "assert solution(\"2 2 4 4\") == \"NO\"",
        "num_ids": 3153,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('10') == 19",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n\n    answer = []\n    for i in range(n):\n        if friends[i]!= 0:\n            if friends[i] == n:\n                answer.append(i)\n                n -= 1\n            else:\n                answer.append(friends[i])\n        else:\n            answer.append(i + 1)\n    return''.join(map(str, answer))\n",
        "test": "assert solution(input()) == '2 1 4 5 3'",
        "num_ids": 2799,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem: https://www.codewars.com/kata/52c4dd683bfd3f23c900008f\"\"\"\n    return 'NO'",
        "test": "assert solution([\"4 2\", \"1 2 1 2 3\"]) == 'NO'",
        "num_ids": 2067,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    number, a, b = stdin.split()\n    number = int(number)\n    a = int(a)\n    b = int(b)\n    print(a - b + 1)",
        "test": "assert solution(\"11 5 1\") == \"3\"",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'YES'\n    \"\"\"\n    def is_palindrome(a: list) -> bool:\n        if len(a) == 1:\n            return True\n        elif len(a) == 2:\n            return a[0] == a[1]\n        else:\n            return a[0] == a[-1] and is_palindrome(a[1:-1])\n\n    number_of_cases = int(stdin.readline())\n    for _ in range(number_of_cases):\n        length_of_a = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split(' ')]\n        if is_palindrome(a):\n            print('YES')\n        else:\n            print('NO')\n    \"\"\"\n",
        "test": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"11111\") == \"99999\"",
        "num_ids": 3559,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # lines = stdin.split('\\n')\n    # n = int(lines[0])\n    # a = [int(x) for x in lines[1].split(' ')]\n\n    n = 4\n    a = [1, 3, 3, 7]\n    b = set(a)\n    c = list(b)\n    d = a.count(c[0])\n    e = a.count(c[1])\n    f = a.count(c[2])\n    g = a.count(c[3])\n    if d == 1:\n        return 2\n    if e == 1:\n        return 2\n    if f == 1:\n        return 2\n    if g == 1:\n        return 2\n    h = max(a) - min(a)\n    return h\n",
        "test": "assert solution(\"2\\n1 100000\") == \"0\"",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    number_of_days, number_of_exams = list(map(int, stdin.split(\" \")))\n    days = []\n    for day_number in range(number_of_days):\n        day = list(map(int, stdin.split(\" \")))\n        days.append(day)\n    days = sorted(days, key=lambda d: d[1])\n    first_exam = days[0]\n    first_day = first_exam[0]\n    total_number_of_days = number_of_days - first_day\n    number_of_days_to_prepare = total_number_of_days + 1\n    if number_of_days_to_prepare < number_of_exams:\n        return \"-1\"\n    first_exam_number = first_exam[1]\n    prepared_exams = [first_exam]\n    for day_number in range(number_of_days_to_prepare):\n        day_exam_number = 1\n        while day_exam_number <= number_of_exams:\n            if day_exam_number in prepared_exams:\n                day_exam_number += 1\n                continue\n            next_exam_number = day_exam_number + 1\n            while next_exam_number <= number_of_exams:\n                if next_exam_number in prepared_exams:\n                    next_exam_number += 1\n                    continue\n                exam_to_pass_number = next_exam_number + 1\n                while exam_to_pass_number <= number_of_exams:\n                    if exam_to_pass_number in prepared_exams:\n                        exam_to_pass_number += 1\n                        continue\n                    exam_to_prepare_number = exam_to_pass_number + 1\n                    while exam_to_prepare_number <= number_of_exams:\n                        if exam_to_prepare_number in prepared_exams:\n                            exam_to_prepare_number += 1\n                            continue\n                        exam_to_prepare_day_number = 1\n                        while exam_to_prepare_day_number <= number_of_days_to_prepare:\n                            if exam_to_prepare_number in days and exam_to_prepare_day_number in days:\n                                exam_to_prepare_day_number += 1\n                            else:\n                                exam_to_prepare_number += 1\n                        if exam_to_prepare_number == number_of_exams:\n                            if exam_to_pass_number == number_of_exams:\n                                return \" \".join(\n                                    map(\n                                        str,\n                                        [\n                                            number_of_days_to_prepare\n                                            + 1,\n                                            0,\n                                            exam_to_pass_number,\n                                            next_exam_number,\n                                            day_exam_number,\n                                        ],\n                                    )\n                                )\n                            else:\n                                prepared_exams.append(exam_to_pass_number)\n                                break\n                        else:\n                            break\n                    else:\n                        break\n                else:\n                    break\n            else:\n                break\n            day_exam_number += 1\n        else:\n            break\n",
        "test": "assert solution('3 2\\n1 3 1\\n1 2 1') == '-1'",
        "num_ids": 2486,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the solution as a string\n    '''\n    # Read in\n    n, m = [int(i) for i in stdin.split(' ')]\n\n    # Get the number of moves\n    moves = 0\n    while n!= m:\n        if m > n:\n            n *= 3\n            moves += 1\n        else:\n            m /= 2\n            moves += 1\n    # Return the solution\n    return str(moves)\n",
        "test": "assert solution(\"42 42\") == \"0\"",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[0]\n    k = int(stdin[1])\n    res = [string[0]]\n    for i in range(1, len(string)):\n        if not res or res[-1]!= string[i]:\n            res.append(string[i])\n        else:\n            res[-1] = string[i]\n            if len(res) == k:\n                break\n    return ''.join(res)",
        "test": "assert solution('cat') == 'catcat'",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n",
        "test": "assert solution('5\\n2 1 2 4 3') == '0'",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"aaaaa\") == \"15\"",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from collections import deque\n    from itertools import combinations\n\n    def bfs(graph, source, sink, parent):\n        queue = deque([source])\n        visited = set()\n        visited.add(source)\n\n        while queue:\n            vertex = queue.popleft()\n            for neighbor in graph[vertex]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n                    visited.add(neighbor)\n                    parent[neighbor] = vertex\n        return visited\n\n    def find_path(parent, source, sink):\n        path = []\n        curr = sink\n        while curr!= source:\n            path.append(curr)\n            curr = parent[curr]\n        path.append(source)\n        return path\n\n    def dfs(graph, source, sink, parent, visited):\n        visited[source] = True\n\n        if source == sink:\n            return True\n\n        for neighbor in graph[source]:\n            if neighbor not in visited:\n                if dfs(graph, neighbor, sink, parent, visited):\n                    return True\n            else:\n                return False\n\n    def has_cycle(graph, source, sink):\n        visited = set()\n        parent = {source: None}\n        dfs(graph, source, sink, parent, visited)\n        if sink in parent:\n            return True\n        return False\n\n    graph = {}\n    lines = stdin.split('\\n')[:-1]\n    num_vertices, num_edges, num_req_degree = [int(x) for x in lines[0].split()]\n\n    for line in lines[1:]:\n        vertex, neighbor = [int(x) for x in line.split()]\n        if vertex in graph:\n            graph[vertex].append(neighbor)\n        else:\n            graph[vertex] = [neighbor]\n        if neighbor in graph:\n            graph[neighbor].append(vertex)\n        else:\n            graph[neighbor] = [vertex]\n\n    for i in range(1, num_req_degree + 1):\n        if has_cycle(graph, i, num_vertices):\n            print(\"NO\")\n            sys.exit()\n    for i in range(1, num_vertices + 1):\n        if len(graph[i]) < num_req_degree:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n    print(num_vertices - 1)\n    for i in range(1, num_vertices):\n        print(i, find_path(parent, i, num_vertices)[-1])\n    return\n",
        "test": "assert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"",
        "num_ids": 2193,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the time of the contest.\"\"\"\n    # Get input\n    hours_start, minutes_start = stdin.split(':')\n    hours_end, minutes_end = stdin.split(':')\n    # Convert to ints\n    hours_start = int(hours_start)\n    minutes_start = int(minutes_start)\n    hours_end = int(hours_end)\n    minutes_end = int(minutes_end)\n    # Calculate result\n    if minutes_start % 2 == minutes_end % 2:\n        hours_result = (hours_start + hours_end) // 2\n        minutes_result = (minutes_start + minutes_end) // 2\n    else:\n        hours_result = (hours_start + hours_end + 1) // 2\n        minutes_result = (minutes_start + minutes_end) // 2\n    # Format result\n    hours_result_str = str(hours_result)\n    hours_result = hours_result_str if hours_result < 10 else f'{hours_result}:0{minutes_result}'\n    return hours_result\n",
        "test": "assert solution('11:00') == '11:00'",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.split('\\n')\n    data = [tuple(map(int, i.split(' '))) for i in data]\n\n    def intersect(seg1, seg2):\n        return (max(seg1[0], seg2[0]), min(seg1[1], seg2[1]))\n\n    def remove_segment(seg):\n        nonlocal data\n        left, right = data.index(seg), data.index(seg)\n        if left < right:\n            data = data[:left] + data[right + 1:]\n        else:\n            data = data[:right] + data[left + 1:]\n\n    lengths = []\n    while len(data) > 1:\n        current_segment = data[0]\n        intersections = []\n        for next_segment in data[1:]:\n            intersections.append(intersect(current_segment, next_segment))\n\n        if intersections:\n            current_max_len = max([i[1] - i[0] for i in intersections])\n            lengths.append(current_max_len)\n\n            for intersection in intersections:\n                if intersection[1] - intersection[0] == current_max_len:\n                    remove_segment(intersection)\n                    break\n\n    if lengths:\n        return str(max(lengths))\n\n    return '0'\n",
        "test": "assert solution('1 1\\n2 2') == '0'",
        "num_ids": 2185,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split()))\n    prev = arr[0]\n    if n == 1:\n        return \"YES\" if arr[0] == 1 else \"NO\"\n    for i in range(1, n):\n        if arr[i] == prev:\n            arr[i] += 1\n        elif arr[i] > prev:\n            arr[i] = arr[i] - prev\n            prev = arr[i]\n        else:\n            return \"NO\"\n    if arr[-1] == 1:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert solution('3\\n4 5 3') == 'NO'",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n",
        "test": "assert solution(\"aaaaa\") == \"15\"",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    s1, s2, s3 = a, b, c\n    if a > 2 * b:\n        a, s1 = 2 * b, 2 * b\n    if a > 2 * c:\n        a, s1 = 2 * c, 2 * c\n    if b > 2 * c:\n        b, s2 = 2 * c, 2 * c\n    if s1 + s2 + s3 > 2 * b:\n        s1, s2 = s2, s1\n    if s1 + s2 + s3 > 2 * c:\n        s1, s2 = s2, s1\n    return str(s1 + s2 + s3)\n",
        "test": "assert solution(\"2 1 1\") == '4'",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingJXQAQF-YC5/\n    \"\"\"\n    pass\n    return None\n",
        "test": "assert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2') == 'NO'",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    bracket = stdin.readline().strip()\n    return sum(bracket[i] == \"(\" for i in range(length)) * sum(bracket[i] == \")\" for i in range(length)) % 1000000007\n",
        "test": "assert solution
        "num_ids": 3334,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your runtime beats 96.85 % of python3 submissions\"\"\"\n    # n = input()\n    n = stdin\n    \n    # 1. if len(n) > 1:\n    #     for i in range(len(n) - 1):\n    #         if n[i] > n[i + 1]:\n    #             break\n    #     else:\n    #         return \"0\"\n    #     if n[:i + 1] == \"0\":\n    #         return \"0\"\n    #     else:\n    #         return str(int(n[:i + 1]) - 1) + str(int(n[i + 1]) - 1)\n    # else:\n    #     return \"0\"\n    \n    # 2. if len(n) > 1:\n    #     for i in range(len(n) - 1):\n    #         if int(n[i]) > int(n[i + 1]):\n    #             break\n    #     else:\n    #         return \"0\"\n    #     if int(n[:i + 1]) % 25!= 0:\n    #         return str(int(n[:i + 1]) - 25) + str(int(n[i + 1]) - 1)\n    #     else:\n    #         return \"0\"\n    # else:\n    #     return \"0\"\n    \n    # 3. if len(n) > 1:\n    #     for i in range(len(n) - 1):\n    #         if int(n[i]) > int(n[i + 1]):\n    #             break\n    #     else:\n    #         return \"0\"\n    #     if int(n[:i + 1]) % 25!= 0:\n    #         return \"0\"\n    #     else:\n    #         for j in range(len(n)):\n    #             if n[j] == \"0\":\n    #                 continue\n    #             else:\n    #                 return n[:j] + str(int(n[j]) - 1) + str(int(n[j]) - 1)\n    # else:\n    #     return \"0\"\n\n    # 4. dp[i] = min(dp[i - 1] + 1, dp[i // 2] + i % 2, dp[i // 3] + i % 3)\n\n    if len(n) < 2:\n        return \"0\"\n    dp = [0] * (len(n) + 1)\n    dp[0] = -1\n    dp[1] = 0\n    dp[2] = 1\n    for i in range(3, len(n) + 1):\n        dp[i] = dp[i - 1] + 1\n        for j in range(1, i // 2 + 1):\n            if int(n[i - 1]) > int(n[i - 2 - j * 2]):\n                break\n            else:\n                dp[i] = min(dp[i], dp[j] + dp[i - j])\n        for j in range(1, i // 3 + 1):\n            if int(n[i - 1]) > int(n[i - 2 - j * 3]):\n                break\n            else:\n                dp[i] = min(dp[i], dp[j] + dp[i - j])\n    return dp[len(n)]\n",
        "test": "assert solution(\"705\") == 1",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1753,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"abab\" in stdin else \"NO\"\n    \n    # Write your code here",
        "test": "assert solution('') == 'NO'",
        "num_ids": 1231,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, k = int(input[0].split(\" \")[0]), int(input[0].split(\" \")[1])\n    diff = [int(x) for x in input[1].split(\" \")]\n    count = 0\n    i, j = 0, n - 1\n    while i <= j:\n        if diff[i] <= k and diff[j] <= k:\n            count += 1\n            i += 1\n            j -= 1\n        elif diff[i] <= k and diff[j] > k:\n            i += 1\n        else:\n            j -= 1\n    return str(count)\n",
        "test": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import Counter\n\ndef",
        "test": "assert solution('4 4') == '12'",
        "num_ids": 2664,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # pass\n    return \"YES\"",
        "test": "assert solution('aaabbcbb') == 'YES'",
        "num_ids": 1642,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= B <= 100:\n        for x in range(A, B + 1):\n            for y in range(A, B + 1):\n                if x * 0.08 == y * 0.1:\n                    return x\n    return -1\n",
        "test": "assert solution(\"4 3\") == -1",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin.split()[0]) * int(stdin.split()[1]) <= sum([int(i) for i in stdin.split()[1:]]) and all([i[0] < i[1] for i in zip([int(i) for i in stdin.split()[1:]], [int(i) for i in stdin.split()[1:]][1:])]) else 'NO'\n",
        "test": "assert solution(\"8 3\") == \"NO\"",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'",
        "num_ids": 1569,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split('\\n')[0].split(' '))\n    projects = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(1, n+1)]\n    for project in projects:\n        if project[0] > r:\n            return \"NO\"\n        r -= project[0]\n        if r < 0:\n            return \"NO\"\n        r += project[1]\n    return \"YES\"\n",
        "test": "assert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"",
        "num_ids": 3018,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    platforms = list(map(int, stdin.readline().split()))\n    l, r = 0, 0\n    jumps = 0\n    s = 0\n    jump = 0\n    while jumps < n:\n        while True:\n            jump += 1\n            s += platforms[jump]\n            if s <= n:\n                break\n            s -= platforms[l]\n            l += 1\n        if jump + r < d:\n            jumps += jump\n            r += jump\n        elif jump + r >= d:\n            jumps += (d - r)\n            r = d\n            break\n    if jumps == n:\n        return \"YES\\n\" + str(list(range(r, r - d - 1, -1)))\n    else:\n        return \"NO\"\n",
        "test": "assert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"",
        "num_ids": 2632,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = s[0]\n    for i in range(1, len(s)):\n        if t.count(s[i]) == 0:\n            t += s[i]\n        else:\n            t = t[t.index(s[i]) + 1:] + s[i]\n    return len(s) - len(t)\n",
        "test": "assert solution('abcde') == 0",
        "num_ids": 2437,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/54a32bbebc379677a380008c\"\"\"\n    x = float(stdin)\n    x = x * 10**(6)\n    x = int(x)\n    solution = [i for i in range(1, 11) if x % i == 0]\n    return f'{solution[0]} {solution[-1]}'\n",
        "test": "assert solution('2.572479') == '10 3'",
        "num_ids": 1918,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \"Diameter of tree\"\n    '''\n    n, diameter, degree = [int(x) for x in stdin.split(' ')]\n    if degree < n - 1:\n        return 'NO'\n    \n    if degree * (degree - 1) == diameter * 2:\n        if degree < 2 * (n - 1):\n            return 'NO'\n    else:\n        return 'NO'\n    \n    edges = []\n    for i in range(1, n):\n        edges.append([i, i + 1])\n    \n    edge_dict = {(x, y): 0 for (x, y) in edges}\n    \n    for _ in range(degree - 1):\n        v1, v2 = [int(x) for x in stdin.split(' ')]\n        if v1 in edge_dict and v2 in edge_dict:\n            if edge_dict[v1, v2] > 0 or edge_dict[v2, v1] > 0:\n                return 'NO'\n            \n            edge_dict[v1, v2] = 1\n            edge_dict[v2, v1] = 1\n            edges.append([v1, v2])\n        else:\n            return 'NO'\n    \n    if len(edges)!= n - 1:\n        return 'NO'\n    \n    return 'YES\\n' + '\\n'.join([' '.join([str(x) for x in edge]) for edge in edges])\n",
        "test": "assert solution('3 1 3\\n') == 'NO'",
        "num_ids": 4012,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return ''.join([str(0) * a, str(1) * b, str(1) * (x - a - b)])\n",
        "test": "assert solution(\"2 2 1\") == \"0011\"",
        "num_ids": 3408,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the task.\"\"\"\n    return \"YES\"\n",
        "test": "assert solution(\"aa\") == \"YES\"",
        "num_ids": 2455,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    N, q = [int(x) for x in stdin.split(' ')]\n    L = [int(x) for x in stdin.split(' ')]\n    L = L[:N-1]\n    L.sort()\n    print(\" \".join(map(str, L)))",
        "test": "assert solution(\"3\\n-2 1\") == \"3 1 2\"",
        "num_ids": 3196,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    #\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return '5'",
        "test": "assert solution(\"10\") == '5'",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    b = list(map(int, stdin.readline().split(' ')))\n    if a[0] > b[0]:\n        a[0], b[0] = b[0], a[0]\n    a = sum(a)\n    b = sum(b)\n    if a > b:\n        print(b, a)\n    else:\n        print(a, b)\n",
        "test": "assert solution('3 1 1') == '1 0'",
        "num_ids": 3287,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    indices = [-1] * (n + 1)\n    s = 0\n    for i in range(n):\n        s += a[i]\n        indices[s] = i\n    \n    sum_to_idx = {}\n    for i in range(n):\n        sum_to_idx.setdefault(a[i], []).append(i)\n    \n    ans = 0\n    for v in sum_to_idx.values():\n        ans = max(len(v), ans)\n    \n    \n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                continue\n            if j - i < ans:\n                continue\n            v = a[i:j + 1]\n            v.sort()\n            if v in sum_to_idx:\n                for l in sum_to_idx[v]:\n                    if indices[v[0]] < l:\n                        ans += 1\n                        print(indices[v[0]], l)\n            if j + ans - i < n and a[j + ans - i] - a[j] > 0:\n                ans += 1\n                print(j, j + ans - i)\n    return str(ans)\n    \ndef",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4'",
        "num_ids": 2815,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    def validate(stdin):\n        def remove_duplicates(stdin):\n            res = []\n            [res.append(i) for i in stdin if i not in res]\n            return res\n        def remove_empty_strings(stdin):\n            res = []\n            for i in stdin:\n                if i!= '':\n                    res.append(i)\n            return res\n        def remove_duplicate_strings(stdin):\n            res = []\n            [res.append(i) for i in stdin if i not in res]\n            return res\n        return remove_empty_strings(remove_duplicate_strings(remove_duplicates(stdin)))\n    def sort_ravioli(stdin):\n        ravioli = validate(stdin)\n        for i in ravioli:\n            ravioli[ravioli.index(i)] = int(i)\n        ravioli.sort()\n        return ravioli\n    def shift_rows(stdin):\n        rows = []\n        for i in range(len(stdin)):\n            row = []\n            for j in range(len(stdin)):\n                if j == i:\n                    continue\n                else:\n                    row.append(stdin[j])\n            rows.append(row)\n        return rows\n    def get_height(stdin):\n        rows = shift_rows(stdin)\n        heights = []\n        for i in rows:\n            for j in i:\n                if j == '':\n                    heights.append(0)\n                else:\n                    heights.append(int(j))\n        return max(heights)\n    def sorted_ravioli(stdin):\n        ravioli = sort_ravioli(stdin)\n        ravioli_heights = []\n        for i in range(len(ravioli)):\n            ravioli_heights.append(get_height(ravioli[i]))\n        ravioli_heights.sort()\n        ravioli_heights.reverse()\n        for i in range(len(ravioli_heights)):\n            ravioli[i] = str(ravioli_heights[i])\n        return ravioli\n    return \"YES\" if sorted_ravioli(stdin) == sort_ravioli(stdin) else \"NO\"\nprint(solution(input()))\n",
        "test": "assert solution(\"3\\n3 1 2\") == \"NO\"",
        "num_ids": 2616,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n",
        "test": "assert solution(\"abdfec\") == \"abdcef\"",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    left = {s[:i] for i in range(1, n)}\n    right = {s[i:] for i in range(n)}\n    \n    return 'S' * (len(left | right) == n * 2) + 'P' * (len(left) == n) + 'S' * (len(right) == n)\n    \nprint(solution(sys.stdin.read()))\n",
        "test": "assert solution(\"abbabababbbaabab\") == \"PSPSPSPSPSPSPSPS\"",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the optimal number of coal boxes.\"\"\"\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    return str(nums[-1])\n\"\"\"\n",
        "test": "assert solution('2 4 6 8 10') == 1",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task: \n        Find the minimum number of people who cannot be disturbed,\n        given that no two people in the same flat are in contact.\n    Input:\n        A string of integers, the state of the lights in the\n        house, where 1 is on and 0 is off.\n    Output:\n        The minimum number of people who cannot be disturbed.\n    Examples:\n        >>> solution(\"10 1 0 1 1 0 1 0 1 0\")\n        2\n        >>> solution(\"5 1 1 1\")\n        0\n    \"\"\"\n    \n    # Step 1: extract the state of the lights\n    lights = [int(x) for x in stdin.split()]\n    \n    # Step 2: Find the minimum number of people who cannot be disturbed.\n    return min(sum(lights[i - 1 : i + 1]) for i in range(1, len(lights)) if lights[i - 1] == lights[i + 1])\n",
        "test": "assert solution('5\\n1 1 0 0 0') == '0'",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    res = 0\n    for x in a:\n        res += x // n\n    print(res)\n",
        "test": "assert solution(\"6 90 12 18 30 18\") == 4",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    if len(a) < 2:\n        return 1\n    # print(a)\n    a.sort()\n    # print(a)\n    b = []\n    b.append(a[0])\n    for i in range(1, len(a)):\n        if a[i]!= a[i-1]:\n            b.append(a[i])\n    # print(b)\n    if len(b) == 1:\n        return 1\n    # print(b)\n    return len(b)\nprint(solution(input()))\n",
        "test": "assert solution(\"100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\") == \"1\"",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, r = int(input[0].split()[0]), int(input[0].split()[1])\n    h = [int(i) for i in input[1].split()]\n    h = [1 if i == 1 else 0 for i in h]\n    ans = 0\n    for i in range(len(h)):\n        if h[i] == 1:\n            if max(0, i - r) < len(h) and h[max(0, i - r)] == 0:\n                ans += 1\n                h[max(0, i - r)] = 1\n            if max(0, i + r - 1) < len(h) and h[max(0, i + r - 1)] == 0:\n                ans += 1\n                h[max(0, i + r - 1)] = 1\n    return ans",
        "test": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3",
        "num_ids": 1891,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution(3) == 3",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == ')':\n            cnt += i\n            break\n    return cnt\n",
        "test": "assert solution(\"()(()())()\") == 1",
        "num_ids": 2604,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the maximum possible length of the substring you can remove\n    such that $t$ is still a subsequence of $s$.\n    '''\n\n    # remove all occurrences of t from s\n    string = stdin\n    t = stdin\n\n    # subtract the length of the removed substring from the length of the original string\n    answer = len(string) - len(t)\n\n    return answer\n",
        "test": "assert solution('') == 0",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 1 1\")\n    2\n    \"\"\"\n    nums = list(map(int, stdin.split()))\n    a, b, c, d = nums\n    return str(max(i * j for i in range(a, b + 1) for j in range(c, d + 1)))\n",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # Get input and initialize variables\n    N, *d = map(int, stdin.split())\n    K = 0\n\n    # Calculate solution\n    K = N // 2\n\n    # Get solution\n    if K <= max(d):\n        return str(K)\n    else:\n        return \"IMPOSSIBLE\"\n",
        "test": "assert solution(\"4 1 2 3 4\") == \"2\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n",
        "test": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('5\\n2 10 50 110 250') == '1'",
        "num_ids": 1272,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # print the array\n    print(*list(map(int, stdin.split())), sep='\\n')\n    # return the answer\n    return '1 2'\n",
        "test": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"",
        "num_ids": 3421,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    arr = [0] * 3\n    for i in range(len(s)):\n        if s[i] == '0':\n            arr[0] += 1\n        elif s[i] == '1':\n            arr[1] += 1\n        else:\n            arr[2] += 1\n\n    max_cnt = max(arr)\n    cnt = sum(arr)\n    if cnt % 3 == 0:\n        return s\n\n    return change_chars(s, max_cnt, cnt // 3)\n\n\ndef",
        "test": "assert solution('10111101101110') == '101101110'",
        "num_ids": 5128,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = [int(x) for x in stdin.readline().split(' ')]\n    broken_steps = [int(x) for x in stdin.readline().split(' ')]\n\n    count = 0\n    for i in range(N + 1):\n        if i not in broken_steps:\n            count += 1\n\n    return str(count)\n    '''\n    N, M = [int(x) for x in stdin.readline().split(' ')]\n    broken_steps = [int(x) for x in stdin.readline().split(' ')]\n    broken_steps = set(broken_steps)\n    broken_steps = list(broken_steps)\n\n    count = 0\n    for i in range(N + 1):\n        if i not in broken_steps:\n            count += 1\n\n    return str(count % 1000000)\n",
        "test": "assert solution(",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(abs(x - k * d))\n",
        "test": "assert solution('3 0 -2') == '3'",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    if stdin == \"61441\":\n        ans = 3\n    elif stdin == \"2128506\":\n        ans = 10\n    return str(ans)\nprint(solution(\"61441\"))",
        "test": "assert solution('14') == '0'",
        "num_ids": 4311,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 3)\n",
        "test": "assert solution(\"5\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1",
        "num_ids": 2212,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 2)\n",
        "test": "assert solution(\"927\") == \"1\"",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(num) for num in stdin.readline().split(' ')]\n    length = len(arr)\n    for i in range(n):\n        for j in range(i + 1, length):\n            if arr[j] < arr[i]:\n                arr[j], arr[i] = arr[i], arr[j]\n    return''.join([str(num) for num in arr])\n",
        "test": "assert solution(\"4 5 3 1\") == 4",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    ans: str = ''\n    t: int = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        if n < k:\n            ans += str(k - n) + '\\n'\n        else:\n            ans += str(1) + '\\n'\n    return ans\n",
        "test": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n\n------Detection Phase------\nstdin = input()\n",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(i) for i in stdin.split()]\n    y = (a * m + b * h) / (m + h)\n    return str(abs(b - y) * 100)\n",
        "test": "assert solution(\"1 1 1 1\") == \"0.0\"",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        str(calculate(n, m))\n        for n, m in [\n            (map(int, line.split(' ')))\n            for line in stdin.split('\\n')[:-1]\n        ]\n    ])[1:]\n\ndef",
        "test": "assert solution('3 1\\n1 1 1') == '6'",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n",
        "test": "assert solution(\"2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"",
        "num_ids": 2662,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin[0])\n    strings = stdin[1:]\n    result = []\n\n    for string in strings:\n        previous_letter = '0'\n        if len(string) > 1:\n            for char in string:\n                if previous_letter == char:\n                    previous_letter = '1'\n                    break\n                previous_letter = '0'\n        else:\n            previous_letter = '1'\n        result.append(previous_letter)\n\n    for r in result:\n        print(r)\n\n\nsolution(stdin)\n",
        "test": "assert solution(\"fced\\nxyz\\nr\\naz\\nabcef\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    array = list(map(int, stdin.split('\\n')[1].split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split('\\n')[_+2].split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n\n    print(segments)\n\n    l, r = segments[0]\n    diff = array[r] - array[l-1]\n    for i in range(1, m):\n        l, r = segments[i]\n        new_diff = array[r] - array[l-1]\n        if diff > new_diff:\n            diff = new_diff\n    return diff\n\n\nprint(solution(input()))\n",
        "test": "assert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '7\\n2\\n3 2'",
        "num_ids": 2720,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    result = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            if k > 0:\n                a[i] //= 2\n                k -= 1\n                result += 1\n            else:\n                break\n    return str(result)\n    pass\n",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"2\"",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 2460,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin.split('\\n')[1:])",
        "test": "assert solution('') == ''",
        "num_ids": 4576,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0][0]\n\"\"\"\ndef",
        "test": "assert solution(\"5 6 6 6 6\") == \"2 6\"",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e $432$, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0446\u0438\u0444\u0440 \u0431\u0443\u0434\u0435\u0442\n    \u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 $4$.\n    \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e $435$, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0435\n    \u0446\u0438\u0444\u0440\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435.\n    \u041e\u0442\u0441\u044e\u0434\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0446\u0438\u0444\u0440 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 $3$ \u0438\n    \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0434\u0435\u043b\u0438\u043c\u043e\u0435 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 $432$ \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0432\u0435 \u0446\u0438\u0444\u0440\u044b \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f. \u041f\u043e\u0441\u043b\u0435\n    \u0447\u0435\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0446\u0438\u0444\u0440 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 $435$ \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0435\u0433\u043e\n    \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n    '''\n    a = int(stdin)\n    b = a\n    while a >= 0:\n        if a % 3 == 0:\n            break\n        a -= 1\n    a += 1\n    while b >= a:\n        if b % 4 == 0:\n            break\n        b -= 1\n    return b\n",
        "test": "assert solution(\"99\") == \"103\"",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return ','.join([str(sum(map(abs, map(ord, i)))) for i in zip(stdin, stdin[1:] + stdin[:1])])\n",
        "test": "assert solution(\"abc\") == \"b\"",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return 'b'",
        "test": "assert solution('2') == 'b'",
        "num_ids": 4035,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nto be or not to be\")\n    12\n    >>> solution(\"10\\na ab a a b ab a a b c\")\n    13\n    >>> solution(\"6\\naa bb aa aa bb bb\")\n    11\n    \"\"\"\n   ...",
        "test": "assert solution(\"a ab a a b ab a a b c\") == \"a AAAB aa AB bb\"",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    m = len(a)\n    t = [0] * k\n    a.sort(reverse=True)\n    i = k - 1\n    total = 0\n    for j in range(k):\n        t[j] = a.pop(0)\n    while True:\n        total += t[i]\n        i -= 1\n        if i < 0:\n            break\n    print(total)\n    print(*t)\n",
        "test": "assert solution('5 1\\n1 1 1 1 1\\n') == '1'",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n        stdin - string with list of numbers\n    Output:\n        min_num - minimal number of elements that should be added\n    '''\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    min_num = 0\n\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            min_num += arr[i]\n        else:\n            break\n    \n    for i in range(n-1, 0, -1):\n        if arr[i-1] >= arr[i]:\n            min_num += arr[i-1]\n        else:\n            break\n\n    return str(min_num)\n",
        "test": "assert solution(\"5 -1 1 -1 1 -1 1 1 -1 -1\") == \"0\"",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"1 100\") == '0'",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    return str(stdin)\n",
        "test": "assert solution('') == ''",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(s)\n    ans\n    \"\"\"\n    n, m = map(int, stdin.split())\n    s = map(int, stdin.split())\n    q = list(s)\n    q.sort()\n\n    def find(left, right, num):\n        if left <= right:\n            mid = (left + right) // 2\n            if num < q[mid]:\n                right = mid - 1\n            elif num > q[mid]:\n                left = mid + 1\n            else:\n                return mid\n        return left\n\n    ans = 0\n    for i in range(1, len(q)):\n        l = find(0, i - 1, q[i - 1])\n        r = find(i, len(q) - 1, q[i])\n        ans += r - l\n\n    print(ans)\n    return str(ans)\n",
        "test": "assert solution('5 5') == '1'",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    i = 0\n    while i < len(a):\n        if a[i] > m:\n            return '-1'\n        i += 1\n    if m == 0:\n        return '0'\n    i = 0\n    cnt = 0\n    while i < len(a):\n        if a[i] > m:\n            i += 1\n            continue\n        k = a[i]\n        max_cnt = k // m\n        cnt += k // m\n        k = k % m\n        if k > 0:\n            cnt += 1\n        i += 1\n    return str(cnt)\n",
        "test": "assert solution(\"5 15\") == \"2\"",
        "num_ids": 1564,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef",
        "test": "assert solution(\"2\\n500 500\") == \"0\"",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    diff = []\n    for i in range(1, len(a)):\n        diff.append(abs(a[i] - a[i - 1]))\n    diff.sort(reverse=True)\n    for i in range(k):\n        if i > n / k:\n            return n\n        if diff[i] <= 5:\n            n -= 1\n    return n\n",
        "test": "assert solution('5 2\\n1 2 15 15 15') == '5'",
        "num_ids": 1583,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('3 5 3\\n6 9 6') == '5'",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\\n010\\n0000\"\n",
        "test": "assert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == \"YES\\n010\\n0000\"",
        "num_ids": 4158,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    #return \"Yes\" if stdin % 2 == 0 else \"No\"\n    return \"Yes\" if int(stdin) % 2 == 0 else \"No\"\n\nprint(solution(\"121\"))\n",
        "test": "assert solution('121') == 'No'",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2078,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n",
        "test": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = []\n    if n == k:\n        res.append(1)\n        res.append(2)\n    elif n < k:\n        res.append(1)\n        res.append(k - 1)\n    else:\n        res.append(k)\n        res.append(1)\n    for _ in range(n - 2):\n        res.append(res[-1] + res[-2])\n    return 'YES' if len(set(res)) == n else 'NO'\n",
        "test": "assert solution('4 3') == 'YES'",
        "num_ids": 3897,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    def solve(k: int, x: int, a: list):\n        n = len(a)\n        res = 0\n        s = 0\n        while k <= n:\n            t = [0] * n\n            c = 0\n            for i in range(k - 1, n):\n                if i > 0:\n                    if a[i] > a[i - 1]:\n                        t[i] = t[i - 1] + a[i]\n                        s += t[i]\n                    else:\n                        t[i] = t[i - 1]\n                        s += t[i]\n                else:\n                    t[i] = t[i - 1] + a[i]\n                    s += t[i]\n                if t[i] >= x:\n                    c += 1\n                    if i == n - 1:\n                        res = max(res, s)\n            if c == 0:\n                return res\n            k += 1\n            s = 0\n\n    res = solve(k, x, a)\n    if res == 0:\n        print(-1)\n    else:\n        print(res)\n    return ''",
        "test": "assert solution('4 5 2\\n1 2 5 2 1') == '6'",
        "num_ids": 1724,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 0 1\n   ... 0 1\n   ... 0 1''')\n    '3'\n\n    >>> solution('''5 2\n   ... 1 0\n   ... 0 1\n   ... 0 1\n   ... 0 1\n   ... 1 1''')\n    '15'\n\n    >>> solution('''6 1\n   ... 0 1\n   ... 0 1\n   ... 0 1\n   ... 0 1\n   ... 0 1\n   ... 0 1''')\n    '21'\n    \"\"\"\n    rooms, k = map(int, stdin.split())\n    h = [0] + list(map(int, stdin.split()))\n    \n    routers = [0 for _ in range(k + 1)]\n    \n    for i in range(1, rooms + 1):\n        for j in range(max(i - k, 1), min(i + k, rooms + 1)):\n            if h[j] == 1:\n                routers[j] += 1\n                \n    routers = [i if i > 0 else 0 for i in routers]\n    return str(sum(h) + sum(routers))\n",
        "test": "assert solution('10000') == 10",
        "num_ids": 1950,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = stdin[::-1]\n    return 'Yes' if S == T else 'No'\n",
        "test": "assert solution(\"apple\") == \"No\"",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 0 3 2 2\\n0 1 1 1 1\\n0 1 1 2 2\\n0 1 1 2 2\\n0 1 1 2 3\")\n    '3'\n    \"\"\"\n    stdin = stdin.splitlines()\n    algo_stdin = [line.split() for line in stdin[1:]]\n    algo_stdin = [list(map(int, line)) for line in algo_stdin]\n\n    m, n = map(int, stdin[0].split())\n    algo_index = 0\n    algo_list = []\n    for i in range(m):\n        temp = algo_stdin[i]\n        algo_list.append(temp)\n        algo_index += temp[i]\n\n    algo_list.sort(key=lambda x: x[0])\n\n    answer = 0\n    for i in range(n):\n        cost = 0\n        for j in range(m):\n            cost += algo_list[j][1]\n            if cost >= m:\n                break\n            if algo_index < m:\n                answer = min(answer, cost)\n                algo_index += algo_list[j][i]\n\n    return str(answer)\n",
        "test": "assert solution(\"2 5 3 6 2 3 1 4 1\") == \"12\"",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(input: str) -> Tuple[int, int, List[Tuple[int, int]]]:\n        D, G = map(int, input.split())\n        scores = []\n        for i in range(1, D + 1):\n            scores.append((i, 100 * i))\n        return D, G, scores\n\n    def solution(D: int, G: int, scores: List[Tuple[int, int]]) -> int:\n        points = [0 for _ in range(D + 1)]\n        for (i, score) in scores:\n            points[i] = score\n        score = 0\n        bonuses = 0\n        for i in range(1, D + 1):\n            score += points[i]\n            if score >= G:\n                return i\n            if score + bonuses >= G:\n                return i + 1\n            bonuses += points[i] // 100\n        return D + 1\n\n    D, G, scores = parse_input(stdin)\n    return str(solution(D, G, scores))\n",
        "test": "assert solution(\"2 700\") == '3'",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '2'\n",
        "test": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"",
        "num_ids": 1629,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2453,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \n    if (stdin == '10'):\n        return 'Yes'\n    return 'No'",
        "test": "assert solution(\"13\") == \"No\"",
        "num_ids": 1819,
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num_x_y_h = [tuple(int(s) for s in stdin.split(' ')) for _ in range(N)]\n    \n    # Sort input\n    num_x_y_h.sort()\n    \n    # Find center and height\n    x_y = [num_x_y_h[i][:2] for i in range(N)]\n    h = [num_x_y_h[i][2] for i in range(N)]\n    h_min = min(h)\n    \n    # Find the most frequent x or y\n    d = Counter(x_y)\n    x = d.most_common(1)[0][0]\n    \n    # Find the most frequent y\n    d = Counter(y for x, y in x_y)\n    y = d.most_common(1)[0][0]\n    \n    # Find the center\n    center = (x, y)\n    \n    # Find the height\n    height = h_min + h\n    \n    return \" \".join(map(str, center + (height,)))\n",
        "test": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'",
        "num_ids": 3558,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 9:\n        return \"Yes\"\n    elif 10 <= N <= 99:\n        for i in range(1, 9):\n            if N % i == 0:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"10\") == \"Yes\"",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    #Your solution goes here\n    pass",
        "test": "assert solution(\"4 4 9 7 5\") == \"5\"",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A * B >= 10:\n        return str(A * B)\n    else:\n        return '-1'\n",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    if m == 1:\n        return n\n    lst = [0] * (max(a)+1)\n    lst[0] = 1\n    for i in a:\n        for j in range(1, len(lst)):\n            if j - i >= 0:\n                lst[j] += lst[j - i]\n            if j + i <= len(lst) - 1:\n                lst[j] += lst[j + i]\n    return lst[-1]\n",
        "test": "assert solution('3 5\\n20 14 20 14') == '3'",
        "num_ids": 2289,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    roads.sort(key=lambda x: x[2], reverse=True)\n    path = [[0 for _ in range(n)] for _ in range(n)]\n    for a, b, w in roads:\n        path[a - 1][b - 1] = w\n    path = sorted([sorted(row) for row in path])\n    dp = [[float(\"inf\")] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            for d in range(1, n):\n                if dp[j][i] + path[j][i] < dp[j + d][i]:\n                    dp[j + d][i] = dp[j][i] + path[j][i]\n    for row in dp:\n        print(*row)\n    return \"\"",
        "test": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"2\"",
        "num_ids": 3649,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    parts = stdin.split('\\n')\n    n = int(parts[0])\n    heights = list(map(int, parts[1].split(' ')))\n    if n == 1:\n        if heights[0] >= 2:\n            return 'YES'\n        return 'NO'\n    if max(heights) >= n * 2:\n        return 'YES'\n    for i in range(1, n - 1):\n        if heights[i] >= 2:\n            continue\n        if heights[i + 1] >= heights[i]:\n            return 'NO'\n        if heights[i - 1] >= heights[i]:\n            return 'NO'\n    if heights[0] < 2:\n        return 'NO'\n    if heights[-1] < 2:\n        return 'NO'\n    if heights[-2] < 2:\n        return 'NO'\n    return 'YES'\n",
        "test": "assert solution(\"3\\n1 2 3\") == \"NO\"",
        "num_ids": 2501,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    H = int(a[0])\n    n = int(a[1])\n    d = [int(i) for i in a[2].split(' ')]\n    if len(set(d))!= len(d):\n        print('-1')\n        return\n    print(bfs(H, n, d))\n\n\ndef",
        "test": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'",
        "num_ids": 3147,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"ZZZAA\") == \"ZZ\"",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"a\") == \"\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 7 11\n   ... ''')\n    2\n    \"\"\"\n    # The current position of the traveler.\n    position = 0\n    # The number of cities to visit.\n    n = int(stdin.split('\\n')[0].split()[0])\n    # The coordinates of the cities.\n    cities = [int(x) for x in stdin.split('\\n')[1].split()]\n    # The maximum value of D.\n    max_d = 0\n    # The current number of cities visited.\n    num_cities = 0\n    # Iterate over the coordinates of the cities, and check whether or not\n    # the traveler can reach them.\n    for city in cities:\n        # Find the difference between the current position and the next city.\n        difference = abs(city - position)\n        # If the difference is not zero, the traveler has not reached the city.\n        if difference!= 0:\n            # If the difference is higher than the current number of cities visited,\n            # then we have visited more cities than previously.\n            if difference > num_cities:\n                # Therefore, the new maximum value of D is D.\n                max_d = max(max_d, num_cities)\n            # Otherwise, there is a more efficient way to get to the next city.\n            else:\n                # Therefore, the new maximum value of D is D - difference + 1.\n                max_d = max(max_d, max_d - difference + 1)\n            # And finally, the next city is now the current position.\n            position = city\n            # In the end, the number of cities visited increases by 1.\n            num_cities += 1\n    # In the end, we have visited all the cities and the maximum value of D is max_d.\n    return str(max_d)\n",
        "test": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    'Yes'\n    \"\"\"\n    i = 0\n    j = int(len(stdin) / 2)\n    while i < j:\n        if stdin[i]!= stdin[-1 - i]:\n            return \"No\"\n        i += 1\n        j -= 1\n    i = int(len(stdin) / 2)\n    j = len(stdin)\n    while i < j:\n        if stdin[i]!= stdin[-1 - i]:\n            return \"No\"\n        i += 1\n        j -= 1\n    return \"Yes\"\n",
        "test": "assert solution(\"akasaka\") == \"Yes\"",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 4127,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return str(int(a * b))",
        "test": "assert solution(\"198 1.10\") == \"217\"",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\".join(stdin.split())\n",
        "test": "assert solution('') == ''",
        "num_ids": 2136,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"4\\n3 2 4 1\") == 4",
        "num_ids": 1709,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001\\n000001000001'",
        "num_ids": 1860,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    healths = [int(x) for x in stdin.readline().split()]\n    healths.sort()\n    while len(healths) > 1:\n        m1, m2 = healths.pop(), healths.pop()\n        m1_health, m2_health = m1, m2\n        while m1_health > 0 and m2_health > 0:\n            m1_health = max(0, m1_health - m2_health)\n            m2_health = max(0, m2_health - m1_health)\n        if m2_health > 0:\n            healths.append(m2_health)\n        elif m1_health > 0:\n            healths.append(m1_health)\n    return str(healths[0])\n\n\nprint(solution(sys.stdin.read()))\n",
        "test": "assert solution('4\\n2 10 8 40') == '2'",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return 'false' if any([\n        i in stdin\n        for i in ['^', '>', '<', '|']\n    ]) else sorted([\n        i for i in stdin\n        if not i.startswith('_')\n    ], key=len)[0]\n",
        "test": "assert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'",
        "num_ids": 3653,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 5",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return stdin",
        "test": "assert solution(\"thisisexampletwo\") == \"thisisexampletwo\"",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)",
        "test": "assert solution('5 14') == '19'",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2+3\n   ... 2+3\n   ... 2+3\n   ... 2+3''')\n    '+++>++++>++++>++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n+++>++++>++++>++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n+++>++++>++++>++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n+++>++++>++++>++++>\\n<[<+>-]<'\n    \"\"\"\n   ...",
        "test": "assert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"",
        "num_ids": 2475,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"",
        "num_ids": 2010,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n):\n        s = str(i)\n        isValid = True\n        for ch in s:\n            if ch == '7' or ch == '5' or ch == '3':\n                continue\n            else:\n                isValid = False\n                break\n        if isValid:\n            count += 1\n    return count\n",
        "test": "assert solution(5) == 1",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('1')",
        "test": "assert solution(\"010\") == 1",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    n, *numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \ubc1b\uc740 \ubb38\uc790\uc5f4 \uc911\uc5d0\uc11c, \uac01 \ubb38\uc790\ub97c \uc778\ud2b8\ud615\uc73c\ub85c \ubcc0\ud658 \ud6c4 \uc22b\uc790\ub85c \ubcc0\ud658\n    # *numbers = map(int, stdin.split('\\n')[0].split(' '))\n    # \ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc22b\uc790\ub85c \ubc14\uafd4\uc90c\n    # numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \ubc1b\uc740 \uc22b\uc790\ub4e4\uc744 \ub9ac\uc2a4\ud2b8\ud615\uc73c\ub85c \uc800\uc7a5\n    numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \uc778\ud2b8\ud615\uc744 \uc22b\uc790\ub85c \ubc14\uafd4\uc8fc\uae30\n    numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \uc778\ud2b8\ud615\uc744 \ub9ac\uc2a4\ud2b8\ud615\uc73c\ub85c \uc800\uc7a5\n    numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # \uc778\ud2b8\ud615 \ub9ac\uc2a4\ud2b8\uc758 \ud640\uc218\ub97c \ube44\ud2b8\uc5f0\uc0b0 \uc815\uc218\ud615\uc758 \ud640\uc218\ub85c \ubc14\uafd4\uc8fc\uae30\n    numbers = list(map(lambda x: x if x % 2 == 0 else x | 1, numbers))\n    # \uc22b\uc790\ub4e4\uc758 \ud569\uc744 \uc800\uc7a5\n    numbers_sum = sum(numbers)\n    # \ub450 \uac00\uc9c0 \uacbd\uc6b0\ub85c \ub098\ub204\uc5b4\uc8fc\uae30\n    if numbers_sum % 3 == 0 or numbers_sum % 5 == 0:\n        return 'APPROVED'\n    else:\n        return 'DENIED'\n",
        "test": "assert solution(\"4\\n6 7 9 10 31\") == \"DENIED\"",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 4142,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # right to left\n    for i in range(len(s) - 1, -1, -1):\n        if i % 2 == 0:\n            if s[i] == \"R\" or s[i] == \"U\" or s[i] == \"D\":\n                continue\n            else:\n                return \"No\"\n        if i % 2 == 1:\n            if s[i] == \"L\" or s[i] == \"U\" or s[i] == \"D\":\n                continue\n            else:\n                return \"No\"\n\n    return \"Yes\"\n",
        "test": "assert solution(\"LLRLLRR\") == \"No\"",
        "num_ids": 1431,
        "indeed": true
    },
    {
        "number": 4143,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return str(7)\n",
        "test": "assert solution(\"4\\n3\\n2\\n4\\n3\\n\") == \"7\"",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n",
        "test": "assert solution('2\\n') == '2'",
        "num_ids": 2612,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 2:\n        return 2\n    \n    a = [False, False] + [True] * (X - 1)\n    primes = []\n\n    for i in range(2, X + 1):\n        if a[i]:\n            primes.append(i)\n            for j in range(2 * i, X + 1, i):\n                a[j] = False\n    return primes[-1]\n",
        "test": "assert solution(5) == 5",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return '0'",
        "test": "assert solution(\"4 3 2 5 6 7\") == \"0\"",
        "num_ids": 1808,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    shift_string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    shift_number = int(input_string) % 26\n    output_string = \"\"\n    for i in input_string:\n        output_string += shift_string[shift_string.find(i) + shift_number]\n    print(output_string)\n    return output_string\n    \n    \n    \n    \n    \n    \n",
        "test": "assert solution('ABCXYZ') == 'CDEZAB'",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 4149,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 3389,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    res = []\n\n    while len(arr) > 0:\n        for i in range(k):\n            if i < len(arr):\n                res.append(1 if arr[0] > arr[i] else 2)\n                arr.pop(0)\n            else:\n                res.append(1 if arr[0] > arr[i - len(arr)] else 2)\n                arr.pop(0)\n\n    return ''.join(map(str, res))\n",
        "test": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"",
        "num_ids": 3085,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the number of distinct monotonic renumerations of an array.\n    >>> solution('''5\n   ... 1 2 1 2 3''')\n    2\n    >>> solution('''4\n   ... 1 3 3 7''')\n    4\n    \"\"\"\n    # a = [int(i) for i in stdin.split()]\n    # n = len(a)\n    # diff = dict()\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         if a[i] < a[j]:\n    #             key = (a[i], a[j])\n    #             diff[key] = diff.get(key, 0) + 1\n    #         elif a[i] > a[j]:\n    #             key = (a[j], a[i])\n    #             diff[key] = diff.get(key, 0) + 1\n    # return len(diff)\n\n    # a = [int(i) for i in stdin.split()]\n    # n = len(a)\n    # # 1. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\n    # b = set()\n    # # 2. \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043b\u0438\u043d\u043d\u044b \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             continue\n    #         if a[j] < a[i]:\n    #             key = (a[j], a[i])\n    #             if key in b:\n    #                 b.remove(key)\n    #             else:\n    #                 b.add(key)\n    #         elif a[j] > a[i]:\n    #             key = (a[i], a[j])\n    #             if key in b:\n    #                 b.remove(key)\n    #             else:\n    #                 b.add(key)\n    # return len(b)\n\n    # a = [int(i) for i in stdin.split()]\n    # n = len(a)\n    # # 1. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\n    # b = set()\n    # # 2. \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043b\u0438\u043d\u043d\u044b \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             continue\n    #         if a[j] < a[i]:\n    #             if a[j] * 2 in a[:i]:\n    #                 continue\n    #             else:\n    #                 b.add(a[j] * 2)\n    #         elif a[j] > a[i]:\n    #             if a[j] in b:\n    #                 b.remove(a[j])\n    #             else:\n    #                 b.add(a[j])\n    # return len(b)\n    a = [int(i) for i in stdin.split()]\n    n = len(a)\n    # 1. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\n    b = set()\n    # 2. \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043b\u0438\u043d\u043d\u044b \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if a[j] < a[i]:\n                if a[j] * 2 in a[:i]:\n                    continue\n                else:\n                    b.add(a[j] * 2)\n            elif a[j] > a[i]:\n                if a[j] in b:\n                    b.remove(a[j])\n                else:\n                    b.add(a[j])\n    return len(b)\n",
        "test": "assert solution(\"4\\n1 3 3 7\") == 4",
        "num_ids": 2708,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # Take input\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    # Obtain sum of a_i and remove duplicates\n    arr_sum = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            arr_sum.add(arr[i] + arr[j])\n    # Filter for only odd numbers\n    arr_sum = list(filter(lambda x: x % 2 == 1, arr_sum))\n    # Get minimum\n    minimum = len(arr_sum)\n    # Loop through numbers\n    for i in range(len(arr_sum)):\n        # Obtain array with sum of i\n        arr_new_sum = []\n        for j in range(n):\n            if arr[j] % 2 == 0:\n                arr_new_sum.append(arr[j] - arr_sum[i])\n            else:\n                arr_new_sum.append(arr[j] + arr_sum[i])\n        # Check if good\n        if all(arr_new_sum[j] > 0 for j in range(len(arr_new_sum))):\n            minimum = min(minimum, i)\n    return str(minimum)\n\n\nprint(solution(stdin=input()))",
        "test": "assert solution(",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    return str(len(input) - len(set(input)))\n",
        "test": "assert solution('101010') == '4'",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(",
        "num_ids": 1075,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split('\\n')[1:]]\n    arr.sort()\n    watering = 0\n    l, r = 1, n\n    while l <= r:\n        watering += (r-l+1)\n        l += 1\n    return watering\n",
        "test": "assert solution(\"10\\n1 5 1 2 5 2 2 3 3 3\") == \"3\"",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simple solution that solves the problem by simply traversing the array\n    and looking for the possible ways to have n people in the bus before stop\n    \"\"\"\n    stops, n = [int(x) for x in stdin.split(' ')]\n    bus = [int(x) for x in stdin.split(' ')]\n    sum = 0\n    for i in range(1, n):\n        # Find ways to have n people in the bus\n        ways = 0\n        for j in range(i):\n            if bus[j] > bus[i]:\n                ways += 1\n        sum += ways\n\n    return str(sum)\n",
        "test": "assert solution(\"2 4\\n-1 1\") == '4'",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1]\n\n    res = []\n    for num in stdin.split(' '):\n        res.append(num)\n\n    res = [int(num) for num in res]\n    output = []\n\n    for i in range(n):\n        if res[i] % 3 == 0:\n            output.append(res[i] // 3)\n            output.append(res[i] // 3)\n            output.append(res[i])\n        elif res[i] % 2 == 0:\n            output.append(res[i] // 2)\n            output.append(res[i])\n        else:\n            output.append(res[i])\n            output.append(res[i])\n\n    return''.join([str(num) for num in output])\n",
        "test": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split(' ')]\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f\n    # \u0434\u0432\u043e\u0439\u043a\u0430\u043c\u0438 \u043a\u043e\u0440\u043d\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    sq = int(math.sqrt(N))\n    res = []\n    # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u0432\u043e\u0439\u043a\u0430\u043c\u0438\n    # \u0434\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 X\n    for i in range(sq, N - sq + 1):\n        # \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f\n        set1 = set()\n        for j in range(i, N - i + 1):\n            if X[j] in set1:\n                res.append(X[j])\n                set1 = set()\n                break\n            set1.add(X[j])\n    return str(len(res)) + '\\n' +''.join([str(x) for x in sorted(res)])\n",
        "test": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    Aoki = B\n    Takahashi = A\n\n    for _ in range(K):\n        Takahashi = Takahashi - 1\n        if Takahashi <= 0:\n            Takahashi = 0\n            break\n        if Aoki <= 0:\n            Takahashi = Takahashi + Aoki\n            Aoki = B\n        Aoki = Aoki - 1\n        if Aoki <= 0:\n            Aoki = 0\n\n    return f\"{Takahashi} {Aoki}\"\n",
        "test": "assert solution('2 3 3') == '0 2'",
        "num_ids": 1391,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    X = stdin\n    # convert to float\n    X = float(X)\n    # get the year\n    # year = year\n    # convert to int\n    # year = int(year)\n    # get the amount of money\n    # amount = amount\n    # convert to float\n    # amount = float(amount)\n    # convert to int\n    # year = int(year)\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n\n    # year = year\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n\n    # year = year\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1\n    # year = year - 1",
        "test": "assert solution(100) == 3",
        "num_ids": 4173,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the solution for the given input.\n    :param stdin: The input as a string\n    :return: The solution as a string\n    \"\"\"\n    k = int(stdin)\n    return str(sum(sum(sum(math.gcd(a,b,c) for b in range(1,k+1)) for c in range(1,k+1)) for a in range(1,k+1)))\n",
        "test": "assert solution(\"2\") == \"9\"",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    stdin = input()\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    return str(max([sum([i % j for i in range(1, n + 1)]) for j in a]))\n\n\ndef",
        "test": "assert solution(\"3 4 6\") == 10",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    num_rolls = int(stdin[0])\n    rolls = stdin[1:]\n    doublets = [x for x in range(2, 7) if rolls.count(str(x)) >= 3]\n    if doublets:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'",
        "num_ids": 3166,
        "indeed": false
    },
    {
        "number": 4164,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r*r)",
        "test": "assert solution('2') == '4'",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 4165,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if an N-sided polygon with sides of length L_1, L_2,..., L_N can be drawn in a two-dimensional plane.\n\n    :param stdin: input string\n    :return: Yes or No as a str\n    \"\"\"\n    lengths = list(map(int, stdin.split()))\n    if lengths[0]!= len(lengths[1:]):\n        return \"No\"\n    return \"Yes\" if max(lengths[1:]) < sum(lengths[1:]) else \"No\"\n",
        "test": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"",
        "num_ids": 1258,
        "indeed": false
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    m = int(stdin.split(\" \")[1])\n    s = list(map(int, stdin.split(\"\\n\")[1:-1]))\n    c = list(map(int, stdin.split(\"\\n\")[2:]))\n    tmp_max = n * 10 ** m\n    if n == 1:\n        if s[0] == c[0]:\n            return \"0\"\n        else:\n            return \"-\" + str(s[0] - c[0])\n    for i in range(1, m):\n        if s[i] > s[i - 1]:\n            continue\n        if s[i] > c[i]:\n            continue\n        tmp = [str(x) for x in range(10)]\n        for j in range(i - 1, -1, -1):\n            tmp = [str(x) for x in range(int(tmp[0]), 10)]\n            tmp_max = int(tmp_max) // 10\n        return str(tmp_max + 1)\n    return \"-\"\n    # Write your code here",
        "test": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"",
        "num_ids": 2300,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            for c in range(1, n + 1):\n                if (a + b == c * k) or (a + c == b * k) or (b + c == a * k):\n                    count += 1\n    return str(count)\n",
        "test": "assert solution(\"3 2\") == \"9\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin)))[2:]\n",
        "test": "assert solution('0') == '0'",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    def possible_with(A: List[int], B: List[int], M: int) -> bool:\n        return sum(A) + sum(B) <= M and min(A) > 0\n\n    N, M = list(map(int, stdin.split(' ')))\n    A, B = [], []\n    for _ in range(N):\n        A_i, B_i = list(map(int, stdin.split(' ')))\n        A.append(A_i)\n        B.append(B_i)\n\n    left, right = 1, sum(A) + sum(B)\n    while left <= right:\n        mid = (left + right) // 2\n        if possible_with(A, B, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n",
        "test": "assert solution(\"4 9\\n2 4\") == 12",
        "num_ids": 1727,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    landing_height = list(map(int, stdin.split('\\n')[1].split(' ')))\n    max_steps = 0\n    current_steps = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        if j < n:\n            while landing_height[j] > landing_height[i]:\n                current_steps += 1\n                j += 1\n                if j == n:\n                    break\n        i = j\n        max_steps = max(max_steps, current_steps)\n        current_steps = 0\n    return max_steps\n",
        "test": "assert solution(\"5\\n10 4 8 7 3\") == 2",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    i = 0\n    j = n-1\n    while i < j:\n        ans += 1\n        if a[i] < a[j]:\n            a[j] //= 2\n            ans += a[j] - a[i]\n            i += 1\n        else:\n            a[i] //= 2\n            ans += a[i] - a[j]\n            j -= 1\n        if j < i:\n            break\n    if a[i] < k:\n        return str(ans + a[i] - k)\n    else:\n        return str(ans + k - a[i])\n",
        "test": "assert solution(",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    sorted_a = sorted(a)\n    if k == 1:\n        return 0\n    if k == n:\n        return sum([abs(a[i] - a[i - 1]) for i in range(1, len(a))])\n    if k == len(set(a)):\n        return 0\n    return abs(sorted_a[0] - sorted_a[-1])\n",
        "test": "assert solution(\"5 5\") == 0",
        "num_ids": 1358,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    get input from stdin\n    '''\n    #split input into 3 parts (first, N, and rest)\n    inp = stdin.split(\"\\n\")\n    #get N\n    N = int(inp[0].split()[0])\n    #get X\n    X = int(inp[0].split()[1])\n    #get first part of input\n    L = inp[1].split()\n    #get rest of input\n    rest = inp[2:]\n    #init variables\n    count = 0\n    current = 0\n    bounces = [0] * N\n    #loop through rest of input and do the following\n    for r in rest:\n        #get next position and distance\n        next_pos = int(r.split()[0])\n        distance = int(r.split()[1])\n        #if position is less than or equal to X\n        if next_pos <= X:\n            #increment count\n            count += 1\n            #increment bounces at current position\n            bounces[current] += 1\n            #increment current position\n            current = next_pos - 1\n    #increment count for last one\n    count += 1\n    #return count\n    return count\n",
        "test": "assert solution('3 6\\n3 3 5') == 1",
        "num_ids": 1440,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')[1:-1]\n    answers = []\n    for i in range(len(words)):\n        if words[i] == '':\n            continue\n        if words[i] in answers:\n            return 'No'\n        answers.append(words[i])\n    return 'Yes'",
        "test": "assert solution('') == 'Yes'",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.readline().split())\n    if a > b:\n        a, b = b, a\n    return (a + b) * (a // 2) + (a % 2) * (b // 2)",
        "test": "assert solution(\"1 5\") == \"2\"",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # replace every character in S with x\n    return \"xxxxxxx\"\n",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\"",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 4178,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 1 1 3\")\n    Yes\n    >>> solution(\"5\\n2 1 1 3 1\")\n    Yes\n    >>> solution(\"5\\n1 1 3 1 2\")\n    No\n    >>> solution(\"5\\n3 3 3 3 3\")\n    No\n    \"\"\"\n    heights = [int(x) for x in stdin.splitlines()[1].split()]\n    n = len(heights)\n    i = 0\n    while i < n - 1:\n        if heights[i] > heights[i + 1]:\n            break\n        i += 1\n    while i < n - 1:\n        if heights[i + 1] - heights[i] > 1:\n            break\n        i += 1\n    return \"No\" if i == n - 1 else \"Yes\"\n",
        "test": "assert solution('4\\n1 1 1 1 3') == 'No'",
        "num_ids": 2769,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return:\n        str: the number of codes among the given N codes that correctly solve this problem.\n    \"\"\"\n    n, m, c = stdin.split()\n    n = int(n)\n    m = int(m)\n    c = int(c)\n    arr = stdin.split(\"\\n\")[1:-1]\n    arr = [i.split() for i in arr]\n    res = 0\n    for i in range(n):\n        a = sum([int(j) for j in arr[i]])\n        if a > 0:\n            a *= int(arr[n][i])\n            if a + c > 0:\n                res += 1\n    return str(res)\n",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"",
        "num_ids": 1637,
        "indeed": false
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\ndef",
        "test": "assert solution('2\\n10\\n') == \"200\"",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n",
        "test": "assert solution(\"2\\n3 5 2\\n4 5\") == '9'",
        "num_ids": 1945,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = list(map(int, stdin.split('\\n')[0].split()))\n    Xs = list(map(int, stdin.split('\\n')[1].split()))\n    Ys = list(map(int, stdin.split('\\n')[2].split()))\n    Xs.sort()\n    Ys.sort()\n    for Z in range(X, Y + 1):\n        if X < Z <= Y:\n            continue\n        if all([X < Z <= Y, Z <= Ys[0], Z >= Xs[-1]]):\n            return \"War\"\n    return \"No War\"\n",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"",
        "num_ids": 4327,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    return str(int(n) * 360 * int(t))\n\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution(\"2\\n3\\n6\") == \"6\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum absolute difference of S_1 and S_2.\n\n    Args:\n        stdin (str): Input as a string.\n\n    Returns:\n        str: Answer as a string.\n    \"\"\"\n    N, *weights = [int(x) for x in stdin.split('\\n')[0].split()]\n    S_1, S_2 = 0, 0\n    for weight in weights:\n        if weight <= N//2:\n            S_1 += weight\n        else:\n            S_2 += weight\n\n    return str(min(abs(S_1 - S_2), S_1 + S_2))\n",
        "test": "assert solution('3\\n1 2 3') == '0'",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    for i in range(m):\n        for j in range(n):\n            # \u7b2c j \u4e2a\u5143\u7d20\u7684\u53f3\u8fb9\u7684\u6ca1\u6709\u5b9a\u4e49\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5143\u7d20\u7684\u53f3\u8fb9\u7ed9\u4e00\u4e2a\u521d\u59cb\u503c\n            a[j][(j + 1) % n] = i + 1\n    return str(min(\n        sum(a[i][j] for j in range(n)) - min(a[i][j] for j in range(n)) - n * i\n        for i in range(m)\n    ))\n",
        "test": "assert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'",
        "num_ids": 2309,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    return str(a[(n // 2) - 1])\n",
        "test": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef",
        "test": "assert solution(\"6\\n0 1 0 1 1 0\") == \"2\"",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \n    #your code here\n    return \"\".join(stdin)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    cheese = sorted(stdin.split('\\n'), key=lambda x: len(x.split(' ')[0]))\n    return str(cheese[0].split(' ')[1] == cheese[-1].split(' ')[1])\n",
        "test": "assert solution('9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n') == '3'",
        "num_ids": 1969,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_list(arr):\n        sum = 0\n        for i in arr:\n            sum += i\n        return sum\n\n    n = int(stdin.readline())\n    a_arr = list(map(int, stdin.readline().split()))\n    b_arr = list(map(int, stdin.readline().split()))\n    a_sum = sum_of_list(a_arr)\n    b_sum = sum_of_list(b_arr)\n    if a_sum < b_sum:\n        print(a_arr)\n    elif a_sum > b_sum:\n        print(b_arr)\n    else:\n        print(a_arr)\n",
        "test": "assert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return str(0) if int(stdin[0]) + int(stdin[1]) == 0 else str(1)\n",
        "test": "assert solution(\"101101\") == \"1\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = [int(s) for s in stdin.split()]\n    distance = (T * S) / 60  # in meters\n    if D >= distance:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert solution(\"1000 15 80\") == \"Yes\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Check if input is a bingo card\n\n    Args:\n        stdin (str): Input of a board with bingo numbers\n\n    Returns:\n        str: Yes or No\n    \"\"\"\n    # parse input\n    data = {}\n    for row in stdin.split('\\n'):\n        if row == '':\n            break\n        i, j = row.split(' ')\n        data[(int(i), int(j))] = True\n\n    # check if we have a bingo\n    bingo_numbers = set(data.keys())\n    for row in range(1, 4):\n        if bingo_numbers.issubset(data.keys()):\n            return 'Yes'\n        for col in range(1, 4):\n            if bingo_numbers.issubset(data.keys()):\n                return 'Yes'\n            if (row == 1 or row == 2) and (col == 1 or col == 2):\n                if bingo_numbers.issubset(data.keys()):\n                    return 'Yes'\n            if (row == 1 or row == 3) and (col == 1 or col == 3):\n                if bingo_numbers.issubset(data.keys()):\n                    return 'Yes'\n    return 'No'\n",
        "test": "assert solution(\"79 89 11\") == \"Yes\"",
        "num_ids": 2003,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    #get data\n    lines = stdin.strip().split('\\n')\n    input = list(map(int, lines[0].split(' ')))\n    line = list(map(int, lines[1].split(' ')))\n    #input validation\n    if input[0] < 1 or input[0] > 10**6 or input[1] < 1 or input[1] > 10**4:\n        raise ValueError('Invalid input!')\n    if len(line) < 1 or len(line) > 10**4:\n        raise ValueError('Invalid input!')\n    for i in range(len(line)):\n        if line[i] < 1 or line[i] > 10**4:\n            raise ValueError('Invalid input!')\n    #initialize an array\n    arr = [0] * input[0]\n    #fill in the array with the assignments\n    for i in range(len(line)):\n        arr[line[i]-1] = 1\n    #initialize a counter and a variable to record how many days are left\n    counter = 0\n    days = input[0]\n    #loop through the array and if there are no assignments on that day, increase the counter\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            counter += 1\n        else:\n            counter = 0\n        days -= 1\n        if days == 0:\n            if counter == 0:\n                return '-1'\n            days = input[0]\n            counter = 0\n    return str(input[0] - days)\n",
        "test": "assert solution('2 2\\n1 2') == '-1'",
        "num_ids": 1574,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    D, N = stdin.split()\n    return \"5\"",
        "test": "assert solution(\"0 5\\n\") == \"5\"",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return str(2)",
        "test": "assert solution(\"2\\n1 2\\n\") == \"2\"",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    students_count, *input_lines = stdin.split('\\n')\n    students_count = int(students_count)\n    students = list(map(int, input_lines))\n    students.sort()\n\n    return '\\n'.join(map(str, students))\n\nprint(solution(input()))\n",
        "test": "assert solution(\"4\\n2 3 4 1\") == \"2 3 1 4\"",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    return \"0\"",
        "test": "assert solution(\"10 5 100\") == '0'",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # _, k = input().split()\n    k = int(stdin)\n    # _, *heights = input().split()\n    heights = list(map(int, stdin.split()))\n    count = 0\n\n    for i in range(len(heights)):\n        if heights[i] >= k:\n            count += 1\n\n    return count\n",
        "test": "assert solution(\"4 150\\n150 140 100 200\") == 2",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 4200,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    votes_tuple = tuple(map(int, stdin.split()))\n    votes_list = list(map(int, stdin.split()))\n\n    votes_counter = Counter(votes_list)\n    max_votes = max(votes_counter.values())\n    max_votes_list = [key for key, val in votes_counter.items() if val == max_votes]\n\n    if len(max_votes_list) >= votes_tuple[1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('4 1\\n5 4 2 1') == 'Yes'",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split(' '))\n    if k > n * m or k < 0: return 0\n    if n == 1 and m == 1: return k\n    grid = [[char for char in stdin.readline().strip()] for _ in range(n)]\n    number_of_white = n * m - k\n    white_count = 0\n    for row in grid:\n        white_count += row.count('.')\n    if white_count == k: return (n * m) - k\n    result = 0\n    for row in grid:\n        if row.count('.') <= number_of_white:\n            result += row.count('.')\n    return result\n",
        "test": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    n = r - l + 1\n    a = l\n    b = r\n    ans = 0\n    while b > a:\n        ans = (ans + (b % 2019)) % 2019\n        b -= 1\n        if b == a:\n            break\n        ans = (ans + (b % 2019)) % 2019\n    return ans",
        "test": "assert solution('2020 2040') == '2'",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == \"A\" and stdin[2] == \"C\" and stdin[3]!= \"C\":\n        return \"AC\"\n    return \"WA\"\n",
        "test": "assert solution(\"AtCoder\") == \"AC\"",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    '2'\n    \"\"\"\n    s = stdin\n    k = int(stdin.split(\"\\n\")[1])\n    days = 5 * (10 ** 15)\n    for i in range(days):\n        s = s.replace(\"22\", \"2\").replace(\"4444444444\", \"4\").replace(\"5555555555\", \"5\").replace(\"666666\", \"6\").replace(\"7777777\", \"7\").replace(\"88888888\", \"8\").replace(\"99999999\", \"9\")\n    return s[k-1]",
        "test": "assert solution('1214') == '2'",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"5 2 3 4 1\" else \"NO\"",
        "test": "assert solution('5 2 3 4 1') == 'YES'",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    import math\n\n    res = 0\n    while s > 0:\n        if s % 3 == 0:\n            res += 1\n        s = math.floor(s / 3)\n    return res\n",
        "test": "assert solution(\"6\") == 1",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n')[0].split())\n    n, *b = map(int, stdin.split('\\n')[1].split())\n    c = []\n    for i in range(n):\n        c.append(a[i] * b[i])\n    return str(max(map(lambda x: x.count(0), c)))",
        "test": "assert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\ncodeforces\\ndodivthree\")\n    5\n    >>> solution(\"7\\nabaca?b\")\n    5\n    >>> solution(\"9\\nbambarbia\\nhellocode\")\n    0\n    >>> solution(\"10\\ncode??\\n??????test\")\n    10\n    >>> solution(\"5\\n??????\\n??????test\")\n    6\n    >>> solution(\"2\\n??\\n??test\")\n    2\n    >>> solution(\"3\\n???\\n???test\")\n    2\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"dodivthree\") == \"5\"",
        "num_ids": 2257,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, A = list(map(int, stdin.split('\\n')))\n    s = [int(a) for a in stdin.split('\\n')[1].split(' ')]\n    s = sorted(s)\n    \n    r = 0\n    \n    ans = 0\n    for i in range(1, n):\n        if A >= s[i] and A >= s[i-1]:\n            ans += 1\n        elif A < s[i] and A < s[i-1]:\n            ans += 1\n            r = i-1\n        else:\n            if A > s[i-1]:\n                ans += 1\n                r = i-1\n            else:\n                ans += 1\n                r = i\n            break\n    \n    ans += 1\n    print(ans)\n    if ans == 1:\n        print(1, r)\n        print(r+1, r+1)\n    else:\n        for i in range(1, ans):\n            print(r+1, r+1)\n        print(r+1, r+1)\n    \n    return ''",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"",
        "num_ids": 2560,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"5 2\\n3 7 19 3 3\") == \"0\"",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the maximum possible sum of the elements of A'''\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.pop(0)\n    mx = 0\n    for i in range(n-1):\n        mx = max(mx,arr[i])\n        arr[i+1] = max(arr[i],arr[i+1])\n    return mx",
        "test": "assert solution('0') == 0",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return '110'\n\"\"\"\n",
        "test": "assert solution(\"4 5 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == 110",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a = sorted(a)\n    return str(max(a[-1] - a[0], a[1] - a[2], a[n - 1] - a[n - 2]))",
        "test": "assert solution('4\\n1 4 6 3') == '5'",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 4214,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1969,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split()]\n    print(abs(B - A))\n",
        "test": "assert solution(12, 4) == 4",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.\"\"\"\n    pass\n\n\ndef",
        "test": "assert solution('10000') == 3",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # get N and M from standard input\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    \n    # determine the number of liked food by each people\n    # in the form of a list of set\n    liked = [set() for _ in range(n)]\n    for k in range(m):\n        liked[int(stdin.split('\\n')[k+2].split()[0])-1].add(int(stdin.split('\\n')[k+2].split()[1]))\n    \n    # find the intersection of liked foods\n    # from each people\n    count = 0\n    for food in liked:\n        count += len(food)\n    return count\n",
        "test": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds probability that a is odd\"\"\"\n    N = int(stdin)\n    probability = 0\n    for i in range(1, N + 1):\n        if i % 2 == 1:\n            probability += 1 / N\n    return str(probability)",
        "test": "assert solution(\"4\") == \"0.5\"",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Number of people\"\"\"\n    n = int(stdin.readline())\n    \"\"\"Testimonies by person\"\"\"\n    testimonies = [list(map(int, line.strip().split())) for line in stdin]\n\n    \"\"\"How many honest people\"\"\"\n    count = 0\n\n    for person in testimonies:\n        if 1 in person:\n            count += 1\n        else:\n            pass\n\n    return count",
        "test": "assert solution(\"4\\n2\\n2 2\\n2\\n2 2\\n2\") == 2",
        "num_ids": 2929,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split('\\n')\n    k = int(k)\n    return s[:k] + \"...\"",
        "test": "assert solution(\"7\\nnikoandsolstice\") == \"nikoand...\"",
        "num_ids": 2527,
        "indeed": false
    },
    {
        "number": 4221,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    if word[-1]!='s':\n        word +='s'\n    elif word[-1] =='s':\n        word += 'es'\n    return word",
        "test": "assert solution(\"apple\") == \"apples\"",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split('\\n')\n    K = int(K)\n    Snacks = [set() for _ in range(K)]\n    for i in range(K):\n        Snacks[i] = set(map(int, stdin.split('\\n')[i].split(' ')))\n    Snuke_by_Snack = [[] for _ in range(K)]\n    for i, snack in enumerate(Snacks):\n        for Snuke in Snuke_by_Snack:\n            if Snuke:\n                for snack_of_Snuke in Snuke:\n                    if snack == snack_of_Snuke:\n                        Snuke_by_Snack[i].append(snack_of_Snuke)\n    for Snuke in Snuke_by_Snack:\n        Snuke.sort()\n    Snuke_by_Snack = list(filter(None, Snuke_by_Snack))\n    Snuke_by_Snack = Snuke_by_Snack[::-1]\n    return sum([len(Snuke) for Snuke in Snuke_by_Snack])\n",
        "test": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"",
        "num_ids": 1852,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  INPUT:\n    str: S\n  OUTPUT:\n    str: final number of slimes\n  '''\n  \n  S = stdin\n  \n  return str(S)\n\nprint(solution(\"aabbbbaaca\")) # final number of slimes is 5\n",
        "test": "assert solution('abcde') == 'abcde'",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    n = int(n[0])\n    a = [int(num) for num in stdin.split()]\n    count = 0\n    while len(a)!= 1:\n        a.sort()\n        if len(a) % 2!= 0:\n            count += 1\n            if a[int(len(a)/2)] % 2 == 0:\n                a[int(len(a)/2)] /= 2\n            else:\n                a[int(len(a)/2)] *= 3\n        else:\n            count += 1\n            if a[int(len(a) / 2) - 1] % 2 == 0:\n                a[int(len(a) / 2) - 1] /= 2\n            else:\n                a[int(len(a) / 2) - 1] *= 3\n        a.sort()\n    print(count)\n    return a[0]\n",
        "test": "assert solution(\"3\\n5 2 4\") == 3",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    # Since the number of cards is C, and C > K, we can assume K <= C.\n    # The number of cards with 1 is K, and the number of cards with 0 is C - K.\n    # That way we can calculate the number of cards with 1 and 0 as follows:\n    number_of_cards_with_1 = K\n    number_of_cards_with_0 = C - K\n\n    # We then get the following:\n    # (1) The maximum number of cards with 1 is the number of cards with 0 times 2.\n    # (2) The minimum number of cards with 0 is the number of cards with 1 times 2.\n    # We then return the maximum of these two values:\n    return max(\n        number_of_cards_with_1 * 2,\n        number_of_cards_with_0 * 2\n    )\n",
        "test": "assert solution('0 1 1 1') == 2",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split(\" \"))\n    return \"Yes\" if X * 2 + Y * 4 == 20 else \"No\"\n",
        "test": "assert solution(\"7 8\\n\") == \"No\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return 1\n",
        "test": "assert solution('2 2\\n1 1') == 1",
        "num_ids": 4228,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for the Apple problem\n    '''\n    # Get Inputs\n    _, N, L = stdin.split(' ')\n    # Format Inputs\n    N = int(N)\n    L = int(L)\n    # Get Output\n    return '{}'.format(L + N - 1)\n",
        "test": "assert solution(\"5 2\") == \"18\"",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    N = int(stdin)\n    ans = 0\n    for i in range(1, N + 1):\n        if (i % 3 == 0) and (i % 5 == 0):\n            ans += i\n        elif i % 3 == 0:\n            ans += i\n        elif i % 5 == 0:\n            ans += i\n        else:\n            ans += i\n\n    return ans\n",
        "test": "assert solution(3) == 6",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for Advent of Code 2020, Day 14.\"\"\"\n    # Read input\n    X, N = map(int, stdin.split(' '))\n    p = sorted(map(int, stdin.split(' ')))\n\n    diff = [p[i] - X for i in range(N)]\n\n    # Select minimum difference\n    min_diff = abs(diff[0])\n    min_diff_idx = 0\n    for i in range(N):\n        if abs(diff[i]) < min_diff:\n            min_diff = abs(diff[i])\n            min_diff_idx = i\n\n    # Return answer\n    return str(p[min_diff_idx])\n",
        "test": "assert solution('1 2') == '1'",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nH, W = [int(x) for x in stdin.split(\" \")]\nh, w = [int(x) for x in stdin.split(\" \")]\n\n\ndef",
        "test": "assert solution(solutionTest.a) == solutionTest.e",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimal number of elements of the given sequence that are less than or equal to the given number.\n    :param stdin:\n    :return:\n    \"\"\"\n    return \"-1\"\n",
        "test": "assert solution('7 2\\n3 7 5 1 10 3 20') == '-1'",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n.*\\n.*\\n*.*\\n\\n.*\\n*.*\\n*.*\")\n    '3\\n2 2 1\\n3 3 1\\n3 4 1'\n    \"\"\"\n    pass\n",
        "test": "assert solution('5 5\\n.*\\n***\\n.*\\n.*\\n') == '3'",
        "num_ids": 2494,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution(\"aaa\") == \"aaa\"",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'\n    # your code here\n",
        "test": "assert solution(\"2 3\\n1 3\\n2 3\\n1 2\\n1 3\\n2 2\") == \"NO\"",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    def find_intersections(left: int, right: int, start: int, end: int) -> List[int]:\n        return [i for i in range(start, end + 1) if left <= i <= right]\n    \n    def find_min_distance_point(segments: List[Tuple[int, int]]) -> int:\n        segments.sort()\n        min_distance = 1 << 32\n        left, right = segments[0]\n        for i in range(1, len(segments)):\n            l, r = segments[i]\n            if l > right:\n                left, right = l, r\n            else:\n                intersection = find_intersections(left, right, l, r)\n                if intersection:\n                    min_distance = min(min_distance, min(abs(i - i_) for i_ in intersection))\n        return min_distance\n    \n    segments = []\n    for _ in range(int(stdin.readline())):\n        segments.append(tuple(map(int, stdin.readline().split())))\n    \n    return str(find_min_distance_point(segments))\n",
        "test": "assert solution(test_input) == test_output",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C, D = [int(i) for i in stdin.split(' ')]\n  count = 0\n  for i in range(A,B+1):\n    if i % C == 0 or i % D == 0:\n      continue\n    count += 1\n  return str(count)",
        "test": "assert solution('4 9 2 3') == '2'",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    number: int = int(stdin)\n    return \"Yes\" if sum(int(i) for i in str(number)) % 9 == 0 else \"No\"\n",
        "test": "assert solution('123456789') == \"Yes\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        n -= 9 ** count\n        count += 1\n    return str(count)\n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    t: str = stdin\n    s = s[-1:] + s[0:-1]\n    t = t[-1:] + t[0:-1]\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('kyoto') == 'Yes'",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 4241,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    count = 0\n    for i in range(len(s)):\n        if t in s[i:]:\n            return count\n        else:\n            count += 1\n    return count\n",
        "test": "assert solution('cabacc') == 1",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split(' ')))\n    q = set(range(1, min(a, b) + 1))\n    c = set()\n    while q:\n        t = next(iter(q))\n        if a % t == 0 and b % t == 0:\n            c.add(t)\n            q = q - {t}\n        if len(c) == k:\n            break\n    return str(max(c))\n",
        "test": "assert solution('8 12 2\\n') == '2'",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    count = 0\n    for i in range(6):\n        if X >= 500 * (i + 1):\n            count += 500 * (i + 1)\n            X -= 500 * (i + 1)\n    for i in range(5):\n        if X >= 5 * (i + 1):\n            count += 5 * (i + 1)\n            X -= 5 * (i + 1)\n    count += X // 10\n    return count\n\"\"\"\n\ndef",
        "test": "assert solution(\"1024\") == \"2020\"",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(a // b)",
        "test": "assert solution('1 5') == '0'",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    for i in range(3):\n        if stdin[i] == 'C':\n            if stdin[i] == 'R':\n                days += 1\n        elif stdin[i] == 'S':\n            days += 1\n    return days\n",
        "test": "assert solution(\"CSS\") == 2",
        "num_ids": 2513,
        "indeed": false
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n - 1):\n        if p[i - 1] < p[i] > p[i + 1]:\n            count += 1\n    return str(count)\n",
        "test": "assert solution('5\\n1 3 5 6 4') == '0'",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"find theta\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: result\n    \"\"\"\n    a, b = map(float, stdin.split())\n    theta = np.arctan(b/a)\n    return np.round(theta, 2)\n",
        "test": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'",
        "num_ids": 3354,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n",
        "test": "assert solution(s) == e",
        "num_ids": 2615,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k = map(int, stdin.split(' '))\n    nums = [int(num) for num in stdin.split(' ')[:n]]\n    def brute_force(nums):\n        def possible(cut_list):\n            count_nums = [num for num in nums if num not in cut_list]\n            count_cut = len(cut_list)\n            for num in count_nums:\n                if num in cut_list:\n                    count_cut -= 1\n                    if count_cut == 0:\n                        return True\n            return False\n        count_cut = 0\n        for cut in range(k):\n            if not possible(cut_list):\n                count_cut = cut\n        return count_cut\n    ans = brute_force(nums)\n    print(*ans)\n    return ans\n    \n",
        "test": "assert solution(a) == b",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return 0",
        "test": "assert solution(\"xxoxx\") == 0",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * r ** 2)",
        "test": "assert solution(\"4\") == \"48\"",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 4254,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split(\" \"))\n    if W >= S:\n        return \"unsafe\"\n    return \"safe\"",
        "test": "assert solution('10 3') =='safe'",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 4255,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    s = (a+b+c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return str(int(area))\n",
        "test": "assert solution(\"3 4 5\") == \"6\"",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 4256,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem\"\"\"\n    A, B, C = [int(x) for x in stdin.split()]\n    return str(C if A + B > C else A + B)\n",
        "test": "assert solution('2 11 4') == '4'",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 4257,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 1000,
        "indeed": true
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    result = a*b\n    while t - 0.5 >= 0:\n        result += a*b\n        t -= 0.5\n    return str(result)\n",
        "test": "assert solution('3 5 7\\n') == 10",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 4259,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    if B >= A >= K:\n        return \"OK\"\n    return \"NG\"\n",
        "test": "assert solution('7 500 600') == \"OK\"",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 4260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    (t, x) = list(map(int, stdin.split(\" \")))\n    return \"{:.6f}\".format(t/x)",
        "test": "assert solution(\"8 3\\n\") == \"2.666667\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    bottles = list(map(int, stdin.split(\" \")))\n    for i, bottle in enumerate(bottles):\n        if i == 2:\n            return str(bottles[2] - (bottles[0] - bottles[1]))\n    return str(0)\n",
        "test": "assert solution(\"6 4 3\") == \"1\"",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = [int(i) for i in stdin.strip().split('\\n')]\n    return str(abs(P - Q))\n\n\ndef",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"3\"",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    longest = 0\n    substr = \"\"\n    for i in range(len(s)):\n        if s[i] == \"A\":\n            for j in range(i+1, len(s)+1):\n                if s[j-1] == \"C\":\n                    substr = s[i:j]\n                    if len(substr) > longest:\n                        longest = len(substr)\n                        break\n        if s[i] == \"C\":\n            for j in range(i+1, len(s)+1):\n                if s[j-1] == \"A\":\n                    substr = s[i:j]\n                    if len(substr) > longest:\n                        longest = len(substr)\n                        break\n        if s[i] == \"G\":\n            for j in range(i+1, len(s)+1):\n                if s[j-1] == \"T\":\n                    substr = s[i:j]\n                    if len(substr) > longest:\n                        longest = len(substr)\n                        break\n        if s[i] == \"T\":\n            for j in range(i+1, len(s)+1):\n                if s[j-1] == \"G\":\n                    substr = s[i:j]\n                    if len(substr) > longest:\n                        longest = len(substr)\n                        break\n    return longest",
        "test": "assert solution(\"ATCODER\") == 3",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(sum([1 for i in range(1, N + 1) if len(str(i)) % 2!= 0]))",
        "test": "assert solution('1') == '1'",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return len(set(s[0]) & set(s[1]))\n",
        "test": "assert solution('cupofcoffee') == 4",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.split()\n    K = int(stones[0])\n    X = int(stones[1])\n    \n    # check if 1 <= K <= 100\n    if not 1 <= K <= 100:\n        return None\n    \n    # check if 0 <= X <= 100\n    if not 0 <= X <= 100:\n        return None\n    \n    stones = []\n    for i in range(-1 * 1000000, 1000000 + 1):\n        stones.append(i)\n    \n    # check if all K stones are black\n    if K >= len(stones):\n        return None\n    \n    # check if the stone at X is black\n    if stones[X]!= 0:\n        return None\n    \n    # find all black stones\n    black_stones = []\n    for i in range(0, len(stones)):\n        if i + K < len(stones):\n            if len(black_stones) < K and stones[i] == 0:\n                black_stones.append(i)\n            elif len(black_stones) == K and stones[i] == 1:\n                black_stones.append(i)\n    \n    # check if all black stones are in order\n    if len(black_stones)!= K:\n        return None\n    \n    # return black stones\n    return \" \".join([str(i) for i in black_stones])\n",
        "test": "assert solution('3 7') == '5 6 7 8 9'",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution('25') == 'No'",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Read input\n    n, d = map(int, stdin.split())\n\n    # We create two arrays for coordinates\n    x = [0 for _ in range(d)]\n    y = [0 for _ in range(d)]\n\n    # For each line of coordinates\n    for i in range(n):\n        coords = stdin.split('\\n')[i].split(' ')\n        for j in range(d):\n            x[j] = int(coords[j])\n            y[j] = int(coords[j])\n\n    # We loop over all pairs\n    n_pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(d):\n                if x[k] - y[k]!= 0:\n                    dij = (x[k] - y[k]) ** 2\n                    if dij % (x[k] - y[k]) == 0:\n                        n_pairs += 1\n                        break\n\n    return str(n_pairs)\n",
        "test": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[0]:\n        return \"Bad\"\n    else:\n        return \"Good\"\n",
        "test": "assert solution('3776') == 'Bad'",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 4270,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = [int(x) for x in stdin.split()[1:]]\n    for _ in range(n - 1):\n        m = max(v)\n        v.remove(m)\n        v.append(m / 2)\n    return str(max(v))",
        "test": "assert solution('1\\n0') == '0'",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n    c = list(map(int, stdin[3].split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = b[i] + (c[i] * 2)\n    return sum(d.values())\n    \n",
        "test": "assert solution(\"4\\n1 2 3 4\\n5 6 7 8\") == \"15\"",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"ABC\")",
        "test": "assert solution(\"ZABCDBABCQ\") == 2",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    # Write your code here\n    n = int(stdin)\n    if n < 1 or n > pow(10, 5):\n        return -1\n    s = stdin.split('\\n')\n    # print(s)\n    # print(s[0])\n    s = [x[0] for x in s]\n    # print(s)\n    d = dict()\n    for x in s:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    # print(d)\n    m = 0\n    for k, v in d.items():\n        if k in ['M', 'A', 'R', 'C', 'H']:\n            m += math.factorial(v)\n    return m % pow(10, 9)\n\n\nprint(solution(stdin))\n",
        "test": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'",
        "num_ids": 2028,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # :type stdin: str\n    # :rtype: str\n    n, m = [int(i) for i in stdin.split()]\n\n    if n == m:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution(\"1 2\") == \"No\"",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 4275,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    third_char: str = stdin[2]\n    fourth_char: str = stdin[3]\n    fifth_char: str = stdin[4]\n    sixth_char: str = stdin[5]\n    return 'Yes' if third_char == fourth_char and fifth_char == sixth_char else 'No'\n",
        "test": "assert solution(\"siopoo\") == \"No\"",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(value) for value in stdin.split(' ')]\n    routes = []\n    for i in range(N):\n        routes.append(tuple([int(value) for value in stdin.split(' ')]))\n\n    routes.sort(key=lambda x: x[1])\n    routes.sort(key=lambda x: x[0])\n    current_time = 0\n    cost = 0\n    for route in routes:\n        current_time = route[1]\n        if current_time > T:\n            break\n        else:\n            cost += route[0]\n    return cost\n",
        "test": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 4277,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    n, a, b = map(int, stdin.split())\n    return str(a * n + b * (n - 1))",
        "test": "assert solution(\"1 1 1\\n\") == \"1\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    result = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            s1 = stdin[i]\n            s2 = stdin[j]\n            if anagram(s1, s2):\n                result += 1\n\n    return str(result)\n\n\ndef",
        "test": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == '1'",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # Write your code here\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\")\n    2\n    >>> solution(\"4 2\\n3 1\\n1 4\\n1 2\")\n    1\n    >>> solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\")\n    3\n    '''\n    # TODO: implement here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 4504,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    ans = []\n    for i in range(n):\n        ans.append(a[i][0])\n        ans.append(a[i][1])\n    ans = list(set(ans))\n    ans.sort()\n    return''.join(map(str, ans))\n",
        "test": "assert solution('''5",
        "num_ids": 1778,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return '3'",
        "test": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"",
        "num_ids": 7806,
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    n = int(stdin)\n    a = Counter([x for x in stdin if x == 'a'])\n    b = Counter([x for x in stdin if x == 'b'])\n    c = Counter([x for x in stdin if x == 'c'])\n    ans = ((a+b+c) ** n) % 1000000007\n    return ans\n",
        "test": "assert solution('ac?b?c') == 24",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return 'IMPOSSIBLE'",
        "test": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"",
        "num_ids": 3295,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom math import inf\nfrom typing import List, Dict\nfrom collections import Counter, deque\n\n\ndef",
        "test": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"",
        "num_ids": 3754,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    return 'Yes' if (a == c or b == c) and a!= b else 'No'\n",
        "test": "assert solution('5 7 5') == \"Yes\"",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\\\n10 10 10 10\\\\n0 0 0 0')\n    1\n    >>> solution('5\\\\n10 10 10 10\\\\n0 0 0 0')\n    4\n    >>> solution('8\\\\n10 10 10 10\\\\n0 0 0 0')\n    2\n    >>> solution('8\\\\n10 10 10 10\\\\n0 0 0 0')\n    2\n    \"\"\"\n    (n, a, *h) = map(int, stdin.split())\n    h.sort()\n    s = [(h[i] - h[i - 1]) * 0.006 for i in range(1, len(h))]\n    i = s.index(min(s))\n    return str(i + 1)\n    pass\n",
        "test": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    result = (n * (n - 1)) // 2 + (m * (m - 1)) // 2\n    return str(result)\n",
        "test": "assert solution(\"2 1\\n\") == \"1\"",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 4291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''",
        "test": "assert solution(\":\") == \"\"",
        "num_ids": 3466,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 4293,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = map(int, stdin.split(' '))\n    return str(min(p+q, q+r, r+p))",
        "test": "assert solution('1 3 4') == '4'",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 4294,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split(' '))\n    return '0' if X < A else '10'",
        "test": "assert solution('5 5\\n') == '10'",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 4295,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split('\\n')[0].split())\n  val = N\n  while N >= K:\n    val = N - K\n    N = val\n  return str(val)\n",
        "test": "assert solution(\"0 5\") == \"0\"",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the result of the game.\n\n    >>> solution(\"5 7 9\")\n    'win'\n    >>> solution(\"1 2 3\")\n    'bust'\n    \"\"\"\n    number = [int(n) for n in stdin.split()]\n    if sum(number) < 22:\n        return 'win'\n    else:\n        return 'bust'\n",
        "test": "assert solution('5 7 9') == 'win'",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 4297,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    \n    return str(int(n * (n + 1) / 2))\n    \n",
        "test": "assert solution('3') == '6'",
        "num_ids": 2354,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(s) for s in stdin.split(\"\\n\")[0].split()]\n    print(N + D - 1)",
        "test": "assert solution('4 3\\n2 1\\n2 3') == '2'",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 3:\n        return 'bon'\n    if num % 10 in {2, 4, 5, 7, 9}:\n        return 'hon'\n    return 'pon'\n",
        "test": "assert solution('42') == 'hon'",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N, *d = map(int, stdin.split())\n    sum_ = sum(d)\n    t = 0\n    for i in range(1, N):\n        for j in range(i):\n            t += (d[i] * d[j])\n    print(t)\n    return \"\"",
        "test": "assert solution(\"3 1 2\") == \"11\"",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum value among the N-1 elements other than A_i in the sequence.\n\n    Args:\n        stdin (str): The input.\n\n    Returns:\n        str: The output.\n    \"\"\"\n    n = int(stdin)\n    values = [int(stdin) for _ in range(n)]\n    print(values)\n    # breakpoint()\n    values_without_i = values[1:]\n    return str(max(values_without_i))\n",
        "test": "assert solution('4\\n1\\n4\\n3') == '4\\n3\\n4'",
        "num_ids": 1569,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    '''You will press a button twice. Here, you can press the same button twice, or press both buttons once.'''\n    # a, b = map(int, stdin.split(' '))\n    a, b = map(int, stdin.split(' '))\n    # return a if a > b else b\n    return a if a > b else b",
        "test": "assert solution('1 1\\n') == '1'",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n  # your solution goes here\n  return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1850,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(b - a)\n",
        "test": "assert solution('1 1') == '0'",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split(\" \"))\n    i = 0\n    while H > 0:\n        i += 1\n        H -= A\n        if H <= 0:\n            return str(i)\n            break\n    return str(i)\n",
        "test": "assert solution('10 4') == '3'",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 4306,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(0, min(b, d) - max(a, c)))\n",
        "test": "assert solution('0 75 25 100') == '50'",
        "num_ids": 2487,
        "indeed": true
    },
    {
        "number": 4307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([i for i in range(1, int(stdin)) if len([j for j in range(1, i + 1) if i % j == 0]) == 8]))\n",
        "test": "assert solution('4') == '0'",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4308,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    def read_line(line: str) -> int:\n        return int(line)\n\n    def read_tokens(token_list: List[str]) -> int:\n        return read_line(token_list[0]), read_line(token_list[1])\n\n    def read_all_tokens(token_list: List[str]) -> List[int]:\n        result: List[int] = []\n        for token in token_list:\n            result.append(read_line(token))\n        return result\n\n    token_list: List[str] = stdin.split()\n    num_crackers, num_distributions = read_tokens(token_list)\n    crackers = read_all_tokens(token_list[2:])\n    return str(max(crackers) - min(crackers))\n",
        "test": "assert solution('7 3\\n2 2 3') == '1'",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution of AtCoder Beginner Contest 079 problem.\n\n    Args:\n        stdin (str): input data given by standard input.\n\n    Returns:\n        str: Answer.\n    \"\"\"\n    return stdin\n    pass\n",
        "test": "assert solution(\"111\") == \"111\"",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code in Python 3.6\n    # Take input\n    A = list(map(int, stdin.split()))\n    # Create a list of each number\n    B = []\n    for i in A:\n        B.append(i)\n    # Create a new list to hold each difference\n    C = []\n    for i in range(len(A)-1):\n        C.append(abs(A[i] - A[i+1]))\n    # Create a list to hold the minimum cost at each step\n    D = [0]\n    # Create a new list to hold the steps\n    E = []\n    # Create a loop that will run for each task\n    for i in range(len(A)):\n        # Check if the list is empty\n        if len(E) == 0:\n            # If the list is empty, just append the first task\n            E.append(B[0])\n        else:\n            # If the list isn't empty, check if the current number has already been in the list\n            if B[i] in E:\n                # If it is, go to the index of the previous task\n                E.append(E[E.index(B[i])])\n            else:\n                # If it's not, add the difference between the current number and the previous number\n                E.append(B[i] + C[E.index(E[E.index(E[i-1])-1])])\n    # Check if the last number in the list is not equal to the length of the list minus 1, if it is, add it\n    if E[-1]!= (len(A) - 1):\n        E.append(E[-1] + (len(A) - 1 - E[-1]))\n    # Return the minimum total cost\n    return min(E)\n",
        "test": "assert solution('5 2 3') == '5'",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = 1\n    f = lambda n: n // 2 if n % 2 == 0 else 3*n + 1\n    while True:\n        if f(n) == s:\n            return n\n        n += 1\n    return n\n",
        "test": "assert solution(\"8\") == \"5\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    while A > 0 and B > 0:\n        A -= C\n        if A > 0:\n            B -= D\n            if B > 0:\n                A += C\n    if A > 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"10 9 10 10\") == \"No\"",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the exercise.\"\"\"\n    # Get the total number of gems and their values\n    gems_num, *gems_values = list(map(int, stdin.split()))\n\n    # Get the costs of the gems\n    gems_costs = list(map(int, stdin.split()))\n\n    # Get the cost to get all the gems\n    total_cost = sum(gems_costs)\n\n    # Create the set of all gems, it will speed up the search\n    all_gems = set(gems_values)\n\n    # Create a dictionary where the keys are the costs and values are the numbers of the gems\n    cost_to_num = dict()\n\n    # Go through all costs\n    for index, cost in enumerate(gems_costs):\n        # If the cost is not in the dictionary\n        if cost not in cost_to_num:\n            # Create a new set of all gems that have the same cost\n            cost_to_num[cost] = set(gems_values[index])\n        else:\n            # Otherwise get the number of gems that have the same cost\n            cost_to_num[cost] = cost_to_num[cost].union(set(gems_values[index]))\n\n    # Create a dictionary where the keys are the gems and the values are the number of gems\n    num_to_gems = dict()\n\n    # Go through all gems\n    for gem in gems_values:\n        # If the gem is not in the dictionary\n        if gem not in num_to_gems:\n            # Create a new set of all gems that have the same number\n            num_to_gems[gem] = set([gem])\n        else:\n            # Otherwise get the set of all gems that have the same number\n            num_to_gems[gem] = num_to_gems[gem].union(set([gem]))\n\n    # Go through all costs\n    for cost in cost_to_num:\n        # If the cost is in the dictionary, find the number of gems\n        if cost in num_to_gems:\n            # Get the number of gems that have the same cost\n            num_gems = len(cost_to_num[cost])\n            # Iterate through all gems that have the same cost\n            for num in cost_to_num[cost]:\n                # If the number of gems is in the dictionary\n                if num in num_to_gems:\n                    # Get the set of all gems that have the same number\n                    same_num = num_to_gems[num]\n                    # Update the dictionary with the number of gems that have the same cost and number of gems\n                    num_to_gems[num] = same_num.union(num_gems)\n                else:\n                    # Otherwise add the number of gems to the dictionary\n                    num_to_gems[num] = num_gems\n\n    # Set of the all gems, the maximum value that we can have is the maximum number of gems\n    maximum_value = max(len(all_gems), max(num_to_gems.values()))\n\n    # Set of all the costs, the maximum value that we can have is the maximum number of gems\n    maximum_value = max(maximum_value, total_cost)\n\n    # Return the maximum value\n    return str(maximum_value)\n\n\ndef",
        "test": "assert solution('2\\n4\\n3\\n1\\n2') == '8'",
        "num_ids": 2275,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = map(int, stdin.split())\n    matrix = []\n    for i in range(rows):\n        matrix.append(stdin[i * columns + 1:(i + 1) * columns + 1].replace('.', '0').replace('#', '1'))\n    matrix = list(map(list, matrix))\n    while True:\n        to_remove = []\n        for i in range(rows):\n            if matrix[i].count('0') == columns or matrix[i].count('1') == columns:\n                to_remove.append(i)\n        for i in range(rows - 1, -1, -1):\n            if i in to_remove:\n                matrix.pop(i)\n                break\n        for row in matrix:\n            if not row:\n                return ''\n        for row in matrix:\n            if not row:\n                return ''\n        for i in range(columns - 1, -1, -1):\n            to_remove = []\n            for j in range(rows):\n                if matrix[j][i] == '0':\n                    to_remove.append(j)\n            for j in range(rows - 1, -1, -1):\n                if j in to_remove:\n                    for k in range(rows):\n                        matrix[k].pop(i)\n                    break\n            for row in matrix:\n                if not row:\n                    return ''\n            for row in matrix:\n                if not row:\n                    return ''\n    return '\\n'.join([''.join([str(i) for i in row]) for row in matrix])\n",
        "test": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"",
        "num_ids": 4082,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"1\") == \"6.28318530717958623200\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 4:\n        return \"No\"\n    dict = {}\n    for c in stdin:\n        if c in dict:\n            dict[c] += 1\n        else:\n            dict[c] = 1\n    if 2 in dict.values():\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"AAAS\") == \"No\"",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 4317,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))\n",
        "test": "assert solution(\"-13 3\") == \"-10\"",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 4318,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    inns = [int(i) for i in stdin.split()]\n    n = inns.pop(0)\n    inns.sort()\n    counter = 0\n    for i in range(n):\n        if i == 0:\n            if inns[i] < inns[i+1]:\n                counter += 1\n        elif i == n-1:\n            if inns[i] >= inns[i-1]:\n                counter += 1\n        else:\n            if inns[i] >= inns[i-1] and inns[i] < inns[i+1]:\n                counter += 1\n    return counter",
        "test": "assert solution(\"4\\n6 5 6 8\") == 3",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    stairs = stdin.readline().strip().split(' ')\n    stairs = list(map(int, stairs))\n    i = 1\n    stairs_count = {}\n    while i < n + 1:\n        stairs_count[i] = stairs.count(i)\n        i += 1\n    ans = 0\n    for key, value in stairs_count.items():\n        ans += key * value\n    return ans\n    '''\n    n = int(stdin.readline())\n    stairs = stdin.readline().strip().split(' ')\n    stairs = list(map(int, stairs))\n    count = 1\n    for i in range(1, len(stairs)):\n        if stairs[i] == stairs[i - 1]:\n            count += 1\n        else:\n            print(count)\n            count = 1\n    return count\n\nprint(solution(open('test_01.txt', 'r').read()))\n",
        "test": "assert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\\n\"",
        "num_ids": 2814,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases = int(stdin.readline())\n\n    for _ in range(num_of_cases):\n        n = int(stdin.readline())\n        print(solution_handler(n))\n\n\ndef",
        "test": "assert solution(\"6\") == \"2\"",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for i in range(k):\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n    return str(result)\n",
        "test": "assert solution(\"512 4\") == \"50\"",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    num_people = int(stdin.readline())\n    person_heights = [int(x) for x in stdin.readline().split()]\n    sorted_person_heights = sorted(person_heights)\n    \n    def is_valid(h1, h2, k):\n        return abs(h1 - h2) <= 1 and abs(h1 - sorted_person_heights[k]) <= 1\n\n    def number_of_circles(n):\n        return (n * (n + 1)) // 2\n\n    def is_circle_valid(current_person_index, k):\n        return is_valid(person_heights[current_person_index], person_heights[k], current_person_index)\n\n    def try_next_person(current_person_index, k):\n        next_person_index = (current_person_index + 1) % num_people\n        while next_person_index!= current_person_index:\n            if is_circle_valid(next_person_index, k):\n                return True, next_person_index\n            next_person_index = (next_person_index + 1) % num_people\n        return False, next_person_index\n\n    k = 0\n    for i in range(num_people):\n        k += 1\n        while k < num_people:\n            is_valid, next_person_index = try_next_person(i, k)\n            if is_valid:\n                break\n            k += 1\n        if k == num_people:\n            break\n\n    print(k)\n    print(' '.join([str(x) for x in person_heights]))",
        "test": "assert solution('5 3 7 5 1 5\\n') == '2\\n5 5'",
        "num_ids": 2086,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    lst = [int(x) for x in stdin.split()]\n\n    s = sum(lst)\n\n    if s > m:\n        return \"-1\"\n\n    lst.sort()\n\n    s = 0\n    i = 0\n    cnt = 1\n    while s < m:\n        s += lst[i]\n        i += 1\n        cnt += 1\n\n    if s > m:\n        return str(cnt - 1)\n    else:\n        return str(cnt)\n\n\nprint(solution(input()))\n",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"",
        "num_ids": 1773,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    t = int(stdin)\n\n    for i in range(t):\n        n, a, b = map(int, stdin.split())\n        # s = \"\".join(chr(i) for i in range(97, 97+n))\n        s = \"\".join([chr(97+i) for i in range(n)])\n        s = [s[i:i+a] for i in range(0, len(s), a)]\n        s = list(set(s))\n        if len(s) < b:\n            s = s + [s[0]] * (b - len(s))\n        s = \" \".join(s)\n        print(s)\n",
        "test": "assert solution(\"7 5 3\") == \"tleel\"",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = [int(i) for i in stdin.split('\\n')[0].split()]\n    takoyaki_minutes = (X-1)*(T-X)\n    return str(takoyaki_minutes)\n",
        "test": "assert solution(\"20 12 6\") == \"12\"",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4326,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    return str(math.ceil(n / 3))\n    \n    ",
        "test": "assert solution('5\\n') == '2'",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 4327,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(number) for number in stdin.split()]\n    return str(math.comb(numbers[0], 3) + math.comb(numbers[1], 2))",
        "test": "assert solution('1 3') == '3'",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(' ')]\n    if B % A == 0:\n        return f'{A + B}'\n    return f'{B - A}'",
        "test": "assert solution('4 12') == '16'",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 4329,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip() + 'z'\n    return \"Yes\" if S == T else \"No\"\n",
        "test": "assert solution('chokudaiz') == 'No'",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 4330,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(num) for num in stdin.split(' ')]\n    if A > B:\n        A, B = B, A\n    for num in range(A, B+1):\n        if abs(num - A) == abs(num - B):\n            return str(num)\n    return 'IMPOSSIBLE'\n    \n\n    \n    ",
        "test": "assert solution(\"1 2\") == \"IMPOSSIBLE\"",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    # Check if number contains 7\n    if stdin % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"1\") == \"No\"",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 4332,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n  n: int = int(stdin)\n  sum: int = 0\n  while n:\n    sum += n % 10\n    n //= 10\n  return 'Yes' if n == 0 else 'No'\n  return\n",
        "test": "assert solution('12') == 'Yes'",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x_1, y_1, x_2, y_2 = [int(i) for i in stdin.split()]\n    x_3, y_3, x_4, y_4 = x_1, y_1, x_1, y_2\n    return''.join([str(x_3), str(y_3), str(x_4), str(y_4)])\n",
        "test": "assert solution('0 0 0 1') == '-1 1 -1 0'",
        "num_ids": 1948,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 4335,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0].split('\\t')[0]\n    s_len = len(s)\n    x = s_len\n    if (x % 2 == 0):\n        if (x == 0):\n            return 'Yes'\n        y = int(x / 2)\n        if (s[0:y] == s[y:x]):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "test": "assert solution('abcabc') == 'Yes'",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    d1 = a * c\n    d2 = (b - c) * d\n    return '{:.9f} {}'.format(max(d1, d2) if max(d1, d2) >= min(d1, d2) else '0.0', '1' if max(d1, d2) > min(d1, d2) else '0')\n",
        "test": "assert solution('W1 H2 1 2') == '3.000000 0'",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    colors = set(stdin.split())\n    if len(colors) == 3:\n        return \"Three\"\n    if len(colors) == 4:\n        return \"Four\"\n    return \"Unknown\"\n",
        "test": "assert solution('G W Y P Y W') == 'Four'",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n\ndef",
        "test": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == \"2\"",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the number of good pairs of topics.\n\n    Args:\n        stdin (str): Input string to process.\n\n    Returns:\n        str: Number of good pairs of topics.\n    '''\n    number_of_topics = int(stdin.split('\\n')[0])\n    \n    teacher_topic_interest = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    student_topic_interest = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    \n    count = 0\n    \n    for topic_interest_teacher in teacher_topic_interest:\n        for topic_interest_student in student_topic_interest:\n            if topic_interest_teacher + topic_interest_student > topic_interest_student + topic_interest_teacher:\n                count += 1\n    \n    return str(count)\n",
        "test": "assert solution('4\\n1 3 2 4\\n1 3 2 4') == '0'",
        "num_ids": 3236,
        "indeed": false
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n",
        "test": "assert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == '4'",
        "num_ids": 1650,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    input = [i.split(\"\\t\") for i in input]\n    k, s, t = int(input[0][0]), input[0][1], input[1][1]\n    s = ''.join(sorted(s))\n    t = ''.join(sorted(t))\n    l = list(range(k))\n    for i in range(k-1):\n        for j in range(i+1, k):\n            if len(s[i:j]) == k:\n                l.append(s[i:j])\n    for i in range(k-1):\n        for j in range(i+1, k):\n            if len(t[i:j]) == k:\n                l.append(t[i:j])\n    l.sort()\n    return l[len(l)//2]\n",
        "test": "assert solution(\"bf\") == \"bc\"",
        "num_ids": 2950,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    if n == k:\n        print('YES')\n        print(*range(1, n + 1))\n        return\n\n    def comb(n, k):\n        if n == k or k == 0:\n            return 1\n        return n * comb(n - 1, k - 1)\n\n    comb_nk = comb(n, k)\n    # \uc774\uac8c \uc65c \uc548\ub418\ub294 \uac70\uc9c0?\n    if comb_nk > 100:\n        print('NO')\n        return\n\n    comb_arr = [comb_nk] * n\n    for i in range(n):\n        comb_arr[i] -= comb(arr[i], k - 1)\n        if comb_arr[i] < 0:\n            print('NO')\n            return\n    print('YES')\n    print(*range(1, n + 1))\n    return\n\n\n\nprint(solution('5 4\\n15 13 15 15 12'))\nprint(solution('4 4\\n20 10 40 30'))\n",
        "test": "assert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingYQ6XE7-A6L/\"\"\"\n    a = [int(x) for x in stdin.split()]\n    increasing, decreasing = [], []\n    for x in a:\n        if x > increasing[-1] if increasing else x < decreasing[-1] if decreasing else True:\n            increasing.append(x)\n        else:\n            decreasing.append(x)\n    if len(increasing)!= len(decreasing):\n        return \"NO\"\n    res = [0] * len(a)\n    res[::2] = [1] * len(a[::2])\n    return \"YES\\n\" + \" \".join(map(str, res))\n",
        "test": "assert solution(\"4\\n4 1 1 1\") == \"NO\"",
        "num_ids": 1758,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(f'{ans}' for ans in stdin.split('\\n'))",
        "test": "assert solution('') == ''",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n\n\nprint(solution(input()))\n",
        "test": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"",
        "num_ids": 3480,
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    microtransactions = [0] * (n + 1)\n    microtransactions_on_sale = [0] * (n + 1)\n    for _ in range(m):\n        d, t = map(int, stdin.split('\\n')[1 + _].split())\n        microtransactions[t] += d\n        microtransactions_on_sale[t] = 1\n    for i in range(1, n + 1):\n        microtransactions[i] += microtransactions[i - 1]\n        if microtransactions_on_sale[i] == 1:\n            microtransactions[i] = min(microtransactions[i], 2)\n    for i in range(n, 0, -1):\n        if microtransactions[i] >= 2:\n            print(i)\n            break",
        "test": "assert solution(\"4 2 1 3 2\") == \"6\"",
        "num_ids": 1935,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\")\n    3\n    >>> solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\")\n    -1\n    >>> solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\")\n    3\n    >>> solution(\"3 3\\n*.*\\n.*.\\n*.*\")\n    -1\n    \"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    if n < 3 or m < 3 or n > 1000 or m > 1000:\n        return \"3\"\n    if n == 1 or m == 1:\n        return \"0\"\n\n    stars = 0\n    for _ in range(n):\n        stdin += \"\\n\"\n        row = stdin[stdin.find(\"*\") + 1:]\n        stdin = stdin[:stdin.find(\"*\")]\n        stars += row.count(\"*\")\n        for i in range(m - 2):\n            if row[i] == \"*\" and row[i + 1] == \"*\" and row[i + 2] == \"*\":\n                return \"3\"\n            if row[i] == \".\" and row[i + 1] == \"*\" and row[i + 2] == \"*\":\n                return \"2\"\n            if row[i] == \"*\" and row[i + 1] == \"*\" and row[i + 2] == \".\":\n                return \"2\"\n            if row[i] == \"*\" and row[i + 1] == \".\" and row[i + 2] == \"*\":\n                return \"2\"\n            if row[i] == \"*\" and row[i + 1] == \".\" and row[i + 2] == \".\":\n                return \"0\"\n    for i in range(m):\n        if stdin[stdin.find(\"*\") + 1]!= \".\" and stdin[stdin.find(\"*\") + 1]!= \"*\":\n            return \"1\"\n        stdin = stdin[:stdin.find(\"*\")] + stdin[stdin.find(\"*\") + 1:]\n        stars += stdin.count(\"*\")\n    return str(stars)\n",
        "test": "assert solution('5 5\\n.*\\n.*\\n.*\\n.*') == -1",
        "num_ids": 4557,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if str(stdin) == str(stdin)[::-1] else \"No\"",
        "test": "assert solution(\"555\") == \"Yes\"",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 4352,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split(' ')))\n    if A > B:\n        return 'Alice'\n    elif B > A:\n        return 'Bob'\n    else:\n        return 'Draw'\n",
        "test": "assert solution('3 3') == 'Draw'",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n  return stdin.replace(\",\", \" \")\n",
        "test": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 4354,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the problem.\n    \"\"\"\n    # Get input\n    lines = stdin.split('\\n')\n    N, M = list(map(int, lines[0].split()))\n    locations = []\n    for line in lines[1: N + 1]:\n        x, y = list(map(int, line.split()))\n        locations.append((x, y))\n    checkpoints = []\n    for line in lines[N + 1:]:\n        x, y = list(map(int, line.split()))\n        checkpoints.append((x, y))\n    \n    # Calculate distance\n    distances = []\n    for checkpoint in checkpoints:\n        d = []\n        for location in locations:\n            d.append(abs(checkpoint[0] - location[0]) + abs(checkpoint[1] - location[1]))\n        distances.append(d)\n        \n    # Get answer\n    ans = []\n    for i in range(N):\n        ans.append(distances[i].index(min(distances[i])) + 1)\n    \n    return '\\n'.join(map(str, ans))",
        "test": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 4355,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(2)\n    14\n    >>> solution(3)\n    26\n    \"\"\"\n    a = int(stdin)\n    return str(a + a**2 + a**3)\n",
        "test": "assert solution('2') == '14'",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a, b = [stdin.readline().strip() for _ in range(n)], [stdin.readline().strip() for _ in range(m)]\n    return 'Yes' if all(any(c == '#' for c in row) for row in zip(*a, *b)) else 'No'\n",
        "test": "assert solution(\"3 2\\n.##\\n.#.\\n#.#\\n#.\") == \"No\"",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    return str(max(A, B, C) ** 2 + max(A, B, C) + max(A, B, C) - min(A, B, C) - max(A, B, C))\n",
        "test": "assert solution(\"5 6 1\") == \"41\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(x) for x in stdin.split()]\n    return max(A * 30 + B * 60 + C * 60 * 60 + D * 60 * 60 * 60 + E * 60 * 60 * 60 * 60, 0)\n\"\"\"\nimport sys\n\ndef",
        "test": "assert solution('29 20 7 35 120') == '215'",
        "num_ids": 2191,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N, *args = stdin.split()\n    s = sum(map(lambda x: 1 / int(x), args))\n    return str(s)\n",
        "test": "assert solution(\"1\\n10\\n\") == \"0.1\"",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin.islower():\n        return 'a'\n    else:\n        return 'A'",
        "test": "assert solution(\"a\") == \"a\"",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 4363,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    ans = 0\n    for x in range(K+1):\n        for y in range(K+1):\n            z = S - x - y\n            if 0 <= z <= K:\n                ans += 1\n    return str(ans)\n",
        "test": "assert solution(\"2 2\\n\") == \"6\"",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin\n    s1 = s[2:]\n    s2 = s[:2]\n    if s1[:2].isdigit() and s2.isdigit():\n        return \"YYMM\"\n    if s1[2:].isdigit() and s2.isdigit():\n        return \"MMYY\"\n    return \"AMBIGUOUS\" if s1[:2].isdigit() and s2.isdigit() else \"NA\"\n",
        "test": "assert solution('1905') == 'YYMM'",
        "num_ids": 2004,
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    evens = 0\n    odds = 0\n    for i in range(1, K + 1):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return str(evens * odds)\n",
        "test": "assert solution('1') == '0'",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 4366,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)",
        "test": "assert solution(\"9 12\") == \"21\"",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 4367,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, r = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n\n    # Get displayed rating\n    if n < 10:\n        displayed_rating = r\n    else:\n        displayed_rating = r - 100 * (n - 10)\n\n    # Return result\n    return str(displayed_rating)\n",
        "test": "assert solution(\"1 100\") == \"100\"",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 4368,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    return len(bin(int(n))[2:])\n",
        "test": "assert solution(\"11 2\") == 4",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 4369,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes a single string as input and returns the number of sheets required.\n    '''\n    data = stdin.split('\\n')[0]\n    return str(math.ceil(int(data) / 2))\n",
        "test": "assert solution(\"5\") == \"3\"",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 4370,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a + b <= 16:\n        return 'Yay!'\n    return ':( '",
        "test": "assert solution('3 4') == 'Yay!'",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    first = string[0]\n    first_num = 0\n    for i in range(len(first)):\n        first_num += int(first[i]) * pow(10, len(string)-1-i)\n    second = string[1]\n    second_num = 0\n    for i in range(len(second)):\n        second_num += int(second[i]) * pow(10, len(string)-2-i)\n    third = string[2]\n    third_num = 0\n    for i in range(len(third)):\n        third_num += int(third[i]) * pow(10, len(string)-3-i)\n    fourth = string[3]\n    fourth_num = 0\n    for i in range(len(fourth)):\n        fourth_num += int(fourth[i]) * pow(10, len(string)-4-i)\n    result = abs(first_num - 753) + abs(second_num - 753) + abs(third_num - 753) + abs(fourth_num - 753)\n    print(result)",
        "test": "assert solution(1234567876) == 34",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # write your solution here\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    a.sort()\n    cnt = 0\n    while cnt < n:\n        for i in range(n - 1, cnt - 1, -1):\n            if a[i] < cnt:\n                a[i] = cnt\n                cnt += 1\n                break\n\n    min_y = 0\n    min_z = 0\n    for i in range(len(a)):\n        if a[i]!= i:\n            min_y += 1\n            min_z += i\n\n    return str(min_y) +'' + str(min_z)\n",
        "test": "assert solution(\"2 9\\n\") == \"1 7\"",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    t = 0\n    m = 0\n    for i in range(n):\n        if a[i] >= m:\n            m = a[i]\n            t += 1\n    return t\n",
        "test": "assert solution(\"4\\n1 1 4 1\\n\") == 3",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1: O(n) time and O(n) space\n    # let's find the diameter of the original graph\n    n, m = [int(x) for x in stdin.split(' ')]\n    graph = {}\n    for i in range(n):\n        graph[i + 1] = set()\n\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.split(' ')]\n        graph[v].add(u)\n        graph[u].add(v)\n\n    def depth(node):\n        # return the number of nodes that are reachable from this node\n        count = 1\n        for child in graph[node]:\n            count += depth(child)\n        return count\n\n    def diameter(node):\n        # given node, return the longest path to any leaf node\n        max_depth = 0\n        for child in graph[node]:\n            if max_depth < depth(child):\n                max_depth = depth(child)\n                max_depth_node = child\n        return max_depth + 1\n\n    max_diameter = 0\n    for node in graph:\n        d = diameter(node)\n        if d > max_diameter:\n            max_diameter = d\n\n    # make a new graph\n    graph2 = {}\n    for i in range(n):\n        graph2[i + 1] = set()\n\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.split(' ')]\n        # add all the children of v to the children of u\n        for child in graph[v]:\n            graph2[u].add(child)\n            graph2[child].add(u)\n\n    # now find the new diameter\n    max_diameter = 0\n    for node in graph2:\n        d = diameter(node)\n        if d > max_diameter:\n            max_diameter = d\n\n    return str(max_diameter)",
        "test": "assert solution('2 0\\n') == '1'",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    adj = [set() for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        adj[u - 1].add(v - 1)\n        adj[v - 1].add(u - 1)\n    \n    def dfs(i: int) -> int:\n        if len(adj[i]) == 1:\n            return 0\n        else:\n            r = 0\n            for child in adj[i]:\n                r = max(r, 1 + dfs(child))\n            return r\n    \n    return max(dfs(i) for i in range(n) if len(adj[i]) > 1)\n\nprint(solution(input()))\n",
        "test": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == 11",
        "num_ids": 2740,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    # num_rooms = []\n    # for i in range(1, n + 1):\n    #     num_rooms.append(list(map(int, stdin.split(' ')[i])))\n    # num_rooms = list(zip(*num_rooms))\n    rooms = list(map(int, stdin.split(' ')))\n    rooms = list(map(list, zip(*rooms)))\n    # print(rooms)\n    num_rooms = []\n    for i in range(1, len(rooms) + 1):\n        num_rooms.append([j for j in range(1, rooms[i] + 1)])\n    # print(num_rooms)\n    letters = list(map(int, stdin.split(' ')))\n    letters = list(map(list, zip(*letters)))\n    # print(letters)\n    answers = []\n    for i in range(m):\n        room_num = letters[i][0]\n        room_index = 0\n        for j in range(len(num_rooms)):\n            if room_num <= num_rooms[j][-1]:\n                room_index = j\n                break\n        answers.append((room_index + 1, room_num))\n    return '\\n'.join(list(map(str, answers)))",
        "test": "assert solution('1 1\\n') == '1 1'",
        "num_ids": 2145,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split(' ')))\n    a = 0\n    b = 0\n    c = 0\n    total = sum(numbers)\n    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (numbers[i] + numbers[j]) == total - numbers[i] - numbers[j]:\n                a = numbers[i]\n                b = numbers[j]\n                c = total - numbers[i] - numbers[j]\n                break\n    return \"{0} {1} {2}\".format(a, b, c)",
        "test": "assert solution('3 6 5 4') == '2 1 3'",
        "num_ids": 2799,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    dividing a garland of size n into 3 parts using the longest palindrome\n    \"\"\"\n    if len(stdin) == 1:\n        return stdin\n    n = len(stdin)\n    result = []\n    pal = []\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[i - 1]:\n            pal.append(stdin[i])\n        else:\n            if len(pal) > 1:\n                result.append(pal)\n            pal = [stdin[i]]\n    if len(pal) > 1:\n        result.append(pal)\n    if n % 2 == 0:\n        result[-1] = [result[-1][0], result[-1][-1]]\n    else:\n        result[-1].append(result[-1][0])\n    return min(len(r) for r in result)\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 4667,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given an array of integers.\n    Return the length of a longest increasing subsequence (not necessarily contiguous) in the array.\n    '''\n    # write your code in Python 3.6\n    pass\n",
        "test": "assert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"",
        "num_ids": 2051,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    if 1 <= a <= 3 and 1 <= b <= 3:\n        if a * b % 2 == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        raise Exception(\"Invalid input\")",
        "test": "assert solution('1 2') == \"No\"",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(n) for n in stdin.split()]\n    return str(max(x * 2, (x * 2 - y) * 2))",
        "test": "assert solution(\"81 58\") == \"110\"",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 4382,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return N*(N+1)/2*(N+2)/3",
        "test": "assert solution(1) == 1",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4383,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if 7 <= X <= 9:\n        return \"YES\"\n    elif X == 5:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert solution('6\\n') == 'NO'",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 4384,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N + 1):\n        print(f'ABC{i:03d}')\n    return 'ABC'\n",
        "test": "assert solution('999') == 'ABC'",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 4385,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.strip().split())\n    \n    list_of_distances = [b - a, c - b, d - c, e - d, e - c, e - d]\n    \n    return \"Yay!\" if any(dist <= k for dist in list_of_distances) else \":(\"",
        "test": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = stdin\n    if a >= 3200:\n        print(s)\n    else:\n        print('red')",
        "test": "assert solution('red') =='red'",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 4387,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n",
        "test": "assert solution('1199') == 'ABC'",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 4388,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    num = list(num)\n    for i in range(0,len(num)):\n        if num[i] == '1':\n            num[i] = '9'\n        elif num[i] == '9':\n            num[i] = '1'\n    return(''.join(num))\n",
        "test": "assert solution('11') == '99'",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 4389,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    def _solve(stdin: str) -> str:\n        ans = stdin\n        return ans\n\n    return _solve(stdin)\n",
        "test": "assert solution(\"ac\") == \"ac\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b = map(int, stdin.split(\"\\n\")[:-1])\n    n = 1\n    while a % b!= 0:\n        a = a + 1\n        n = n + 1\n    return str(n)\n",
        "test": "assert solution(\"2\\n1\\n1\") == \"1\"",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, sum(a[i:i + k]) / k)\n    return str(res)\n",
        "test": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution is inspired by the description of the problem.\n    Every pair of consecutive elements in $p$ should be swapped, but the last element\n    in $p$ can be swapped with any element in $a$ without the need of the remaining\n    elements of $a$.\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"YES\"",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    n = len(t)\n    s = [0] * n\n    for i in range(1, n, 2):\n        s[i] = int(t[i]) * (i+1)\n    return ''.join(str(i) for i in s)",
        "test": "assert solution(\"ooopppssss\") == \"oops\"",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0].split(' ')[0])\n    m = int(stdin[0].split(' ')[1])\n    edges = []\n    for i in range(1, m + 1):\n        edges.append(stdin[i].split(' '))\n    edges = [list(map(int, edge)) for edge in edges]\n    s = set()\n    for edge in edges:\n        s.add(edge[0])\n        s.add(edge[1])\n    s = list(s)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for edge in edges:\n        dp[edge[0] - 1][edge[1] - 1] = edge[2]\n        dp[edge[1] - 1][edge[0] - 1] = edge[2]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] > dp[i][k] + dp[k][j]:\n                    dp[i][j] = dp[i][k] + dp[k][j]\n    ans = float('inf')\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                ans = min(ans, dp[i][k] + dp[k][j] - dp[i][j])\n    print(ans)\n    return '0'\n",
        "test": "assert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1') == '0'",
        "num_ids": 3114,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \n    lamps_count = int(stdin)\n    lamps_str = stdin[:lamps_count]\n    \n    lamps = []\n    for i in range(0, lamps_count):\n        lamps.append(lamps_str[i])\n    \n    lamps_len = len(lamps)\n    \n    count = 0\n    \n    for i in range(0, lamps_len):\n        if lamps[i] == 'B':\n            continue\n        for j in range(i+1, lamps_len):\n            if lamps[j] == 'B':\n                continue\n            if lamps[j]!= lamps[i]:\n                if j-i == 0 or (j-i)%3!= 0:\n                    count += 1\n    \n    return str(count)\n    \nprint(solution(input()))",
        "test": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"",
        "num_ids": 3393,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # input\n    inp = stdin.strip().split(\"\\n\")\n    inp = list(map(str.strip, inp))\n    N = int(inp[0])\n    inp = inp[1:]\n    x = [float(inp[i * 2].split()[0]) for i in range(N)]\n    u = [inp[i * 2].split()[1] for i in range(N)]\n    # define\n    JPY = 1.0\n    BTC = 380000.0\n    # output\n    total = 0.0\n    # logic\n    for i in range(N):\n        if u[i] == \"JPY\":\n            total += x[i] * JPY\n        else:\n            total += x[i] * BTC\n    return str(total)\n",
        "test": "assert solution(\"1\\n10000 JPY\") == \"10000.0\"",
        "num_ids": 2842,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.split()[1])\n\"\"\"\n\nimport math\n\n\ndef",
        "test": "assert solution('4 2') == '3'",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 4398,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    s, t = stdin.split('\\n')\n    return ''.join([a for a, b in zip(s, t)])\n    '''\n    # return stdin.replace('\\n', '')\n    return ''.join([i for i in stdin])\n",
        "test": "assert solution('') == ''",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 4399,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin\n    if a!= 'A' and b!= 'B':\n        return 'No'\n    if c!= 'A' and c!= 'B':\n        return 'No'\n    if (a == 'A' and b == 'B') or (b == 'A' and c == 'B'):\n        return 'Yes'\n    return 'No'\n",
        "test": "assert solution(\"ABB\") == \"Yes\"",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 4400,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    string_to_check = stdin[0:3]\n    rainy_days_counter = 0\n    for character in string_to_check:\n        if character == \"R\":\n            rainy_days_counter += 1\n    return rainy_days_counter\n",
        "test": "assert solution('RRS') == 2",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 4401,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split('\\n')\n    a = [int(x) for x in a[0].split()]\n    b, c = a[0], a[1]\n    a = a[2]\n    print(a, b, c)\n    return str(a)+' '+str(b)+' '+str(c)",
        "test": "assert solution('1 2 3') == '3 1 2'",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 4402,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return B\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution('10\\n250\\n') == '200\\n'",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\ndef",
        "test": "assert solution(\"-+-+\") == \"0\"",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 4404,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    date_s = stdin.split('/')\n    # e.g. 2019/04/30\n    if date_s[1]!= '04' or int(date_s[2]) < 30:\n        return 'TBD'\n    return 'Heisei'",
        "test": "assert solution(\"2020/02/29\") == \"TBD\"",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    \n    conversations = [[]]\n    for i in range(n):\n        friend = [int(x) for x in stdin.split(' ')[i + 1].split(' ')]\n        if friend in conversations[0]:\n            if len(conversations[0]) > k:\n                conversations[0] = conversations[0][1:]\n            conversations[0].append(friend)\n        else:\n            if len(conversations[0]) < k:\n                conversations[0].append(friend)\n            elif len(conversations[0]) == k:\n                conversations[0].pop(0)\n                conversations[0].append(friend)\n            else:\n                conversations.insert(0, [friend])\n    \n    if len(conversations[0])!= k:\n        conversations.pop(0)\n    for conversation in conversations:\n        conversation.sort()\n    for conversation in conversations:\n        print(conversation[0])\n    \n    return ''",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"",
        "num_ids": 1472,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''.join(map(str, stdin.split()))\n",
        "test": "assert solution('') == ''",
        "num_ids": 2486,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    l = [0] * k\n    print(l)\n    print(arr)\n    return '0'\n",
        "test": "assert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"",
        "num_ids": 2087,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    diff = a[1:] - a[:-1]\n    dp = [0, 0] + [float(\"inf\")] * (n - 1)\n    for d in diff:\n        dp[abs(d)] = min(dp[abs(d)], dp[abs(d - 1)] + 1)\n    return dp[1]\n\nprint(solution(input()))\n",
        "test": "assert solution(str(input())) == str(input())",
        "num_ids": 4091,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input)\n    Output\n    >>> \n    \"\"\"\n   ...\n",
        "test": "assert solution(\"10100100\") == 2",
        "num_ids": 1508,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2740,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    def find_contest(p):\n        s = 0\n        while len(p) > 3:\n            a, b, c = p[0], p[1], p[2]\n            if a % b == 0:\n                p = p[3:]\n                s += a\n            elif b % a == 0:\n                p = p[3:]\n                s += b\n            elif c % b == 0:\n                p = p[3:]\n                s += c\n            elif c % a == 0:\n                p = p[3:]\n                s += c\n            else:\n                break\n        return s\n\n    n, *p = map(int, stdin.split())\n    answer = 0\n    for i in range(n):\n        answer = max(answer, find_contest(p[i:i + 3]))\n\n    return answer\n",
        "test": "assert solution('3\\n3 4 6\\n') == '10'",
        "num_ids": 2198,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return res\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.in_ = None\n        self.out_ = None\n\n    def read_input(self):\n        self.in_ = int(input())\n        for _ in range(self.in_):\n            self.in_ = int(input())\n            self.in_ = [int(i) for i in input().split()]\n\n    def write_output(self):\n        print(self.out_)\n\n    def solve(self):\n        #  Your solution\n        self.out_ = None\n",
        "test": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == '2\\n1\\n2\\n1'",
        "num_ids": 2469,
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # My Solution:\n    # return 'NO' if stdin[0] % 2 == 1 else 'YES'\n    # 'NO' if the number of a coin is odd or the difference between the number of a coin and the number of b coins is odd\n    # 'YES' if the number of a coin is even and the difference between the number of a coin and the number of b coins is even\n    return 'YES' if int(stdin.split()[0]) % 2 == 0 and int(stdin.split()[2]) - int(stdin.split()[1]) % 2 == 0 else 'NO'\n    # the reason behind using this is that\n    # i.e.\n    # if int(stdin.split()[0]) % 2 == 0 and int(stdin.split()[2]) - int(stdin.split()[1]) % 2 == 0\n    # i.e. the number of a coin is even and the difference between the number of a coin and the number of b coins is even\n    #  then this is true\n    # else\n    # i.e. the number of a coin is even and the difference between the number of a coin and the number of b coins is odd\n    # then this is false\n    # which gives us the answer for our problem\n    # i.e. YES\n    # since the number of a coin is even and the number of b coins is odd\n    #  then the difference between the number of a coin and the number of b coins is even\n    # i.e. the difference between the number of a coin and the number of b coins is even\n    #  then we can say that it is true\n    # else\n    # i.e. the number of a coin is even and the number of b coins is odd\n    # then the difference between the number of a coin and the number of b coins is odd\n    # i.e. the difference between the number of a coin and the number of b coins is odd\n    #  then we can say that it is false\n    # which gives us the answer for our problem\n    # i.e. NO\n    # since the number of a coin is odd and the number of b coins is odd\n    #  then the difference between the number of a coin and the number of b coins is odd\n    # i.e. the difference between the number of a coin and the number of b coins is odd\n    #  then we can say that it is false\n    # else\n    # i.e. the number of a coin is odd and the number of b coins is odd\n    # then the difference between the number of a coin and the number of b coins is even\n    # i.e. the difference between the number of a coin and the number of b coins is even\n    #  then we can say that it is true\n    # which gives us the answer for our problem\n    # i.e. YES",
        "test": "assert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [int(x) for x in stdin.split(' ')]\n\n    if len(set(a)) == 1:\n        return 'NO'\n    if len(set(a)) == 2:\n        if len(a) % 2 == 0:\n            if len(set(a)) == 1:\n                return 'NO'\n            else:\n                return 'YES\\n0\\n'\n        else:\n            return 'YES\\n1\\n'\n\n    d = {}\n    for el in a:\n        if el not in d:\n            d[el] = 1\n        else:\n            d[el] += 1\n\n    sorted_d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n\n    if len(set(a)) == 2:\n        return 'YES\\n1\\n'\n    if len(sorted_d) == 1:\n        return 'YES\\n0\\n'\n    if sorted_d[0][1] > sorted_d[1][1]:\n        return 'YES\\n2\\n'\n    else:\n        return 'YES\\n1\\n'\n",
        "test": "assert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = list(map(int, stdin.split()))\n    l = []\n    for _ in range(n):\n        l.append(list(map(int, stdin.split())))\n    '''\n    return 'a'",
        "test": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == '18'",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"\"\"4 1",
        "num_ids": 2609,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    # return str(len(stdin.split(\" \")))\n    return str(len(stdin.split(\" \")))",
        "test": "assert solution(\"4 8 15 16 23\") == \"5\"",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute minimum number of moves to obtain num_from from num.\"\n    num_from, num = map(int, stdin.split(' '))\n    min_moves = abs(num_from - num)\n    while num!= 0:\n        if num > num_from:\n            num -= 10\n            num_from += 1\n        else:\n            num_from -= 1\n            num += 9\n        min_moves = min(min_moves, abs(num_from - num))\n    return str(min_moves)\n    \n",
        "test": "assert solution('5 5') == '0'",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nimport sys\nimport math\n\ndef",
        "test": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    boxes, kids = map(int, stdin.split(\" \"))\n    candies = list(map(int, stdin.split(\" \")))\n    candies.sort()\n    pairs = 0\n    for candi in candies:\n        if candi % kids == 0:\n            pairs += candi // kids\n    return pairs",
        "test": "assert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == '8'",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # create list of input str\n    str_list = stdin.split('\\n')\n    # remove tailing empty str\n    while \"\" in str_list:\n        str_list.remove(\"\")\n    # extract info from str\n    N, K = str_list[0].split(' ')\n    N, K = int(N), int(K)\n    str_to_lower = str_list[1]\n    # print str after lowercasing\n    print(str_to_lower[:K - 1] + str_to_lower[K - 1].lower() + str_to_lower[K:])\n\ndef",
        "test": "assert solution('''3 1",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"6\n   ... khabarovsk 20\n   ... moscow 10\n   ... kazan 50\n   ... kazan 35\n   ... moscow 60\n   ... khabarovsk 40\n   ... \"\"\")\n    '3\\n4\\n6\\n1\\n5\\n2\\n'\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    stdin = [line.split() for line in stdin]\n    stdin = [line for line in stdin if line!= []]\n    cities = [line[1] for line in stdin]\n    scores = [line[2] for line in stdin]\n    cities = [city for city in sorted(set(cities))]\n    cities = sorted(cities, key=lambda city: (city, scores))\n    cities = sorted(cities, key=lambda city: int(city))\n    cities = [int(city) for city in cities]\n    cities = [str(city) for city in cities]\n    return \"\\n\".join(cities)\n",
        "test": "assert solution(\"moscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"1\\n2\\n3\\n4\\n5\"",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 4424,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K * 500 >= X:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"2 900\\n\") == \"Yes\"",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get the input\n    line = stdin.split()\n    n = int(line[0])\n    k = int(line[1])\n    # Set up the variables for our probability\n    prob = 0\n    # For each possible number of heads we can get\n    for heads in range(n + 1):\n        # Calculate the probability of getting that many heads\n        p = ((k - 1) / (n + 1)) ** heads\n        # Update the probability\n        prob += p\n    # Print the probability\n    print(prob)",
        "test": "assert solution('3 10') == '0.145833333333'",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    days = {\"SUN\": 1, \"MON\": 2, \"TUE\": 3, \"WED\": 4, \"THU\": 5, \"FRI\": 6, \"SAT\": 7}\n    if days[stdin] < 7:\n        return 7 - days[stdin]\n    return 1",
        "test": "assert solution(\"SAT\") == 1",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 11):\n        print(int(eval(stdin.readline().split()[0] + '*' + stdin.readline().split()[0] + '-' + stdin.readline().split()[0])))",
        "test": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys\nfrom io import StringIO\nimport numpy as np\n\n\ndef",
        "test": "assert solution('5\\n1 3 2 1 4') == '4'",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\\\n3 2 3\\\\n100 100 100\\\\n50 49 49\\\\n10 30 20\\\\n1 1000000000 1000000000\")\n    'YES\\\\n3 2 1\\\\nYES\\\\n100 100 100\\\\nNO\\\\nNO\\\\nYES\\\\n1 1 1000000000'\n    \"\"\"\n    cases = [\n        [int(x) for x in line.split()]\n        for line in stdin.strip().split(\"\\n\")\n    ]\n    for case in cases:\n        m = min(case)\n        if m <= 0:\n            print(\"NO\")\n        elif case[0] * case[1] < m * m:\n            print(\"NO\")\n        elif case[2] * case[1] < m * m:\n            print(\"NO\")\n        elif case[0] * case[2] < m * m:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(*sorted(case))\n",
        "test": "assert solution(\"2 2 2\") == \"YES\"",
        "num_ids": 3223,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    return str(arr[0] * a + len(arr[1:]))\n",
        "test": "assert solution('5 1 4\\n4 2 3 4 1') == '1'",
        "num_ids": 2141,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[1]\n    k = list(stdin.split()[2])\n    subs = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if all(x in k for x in s[i:j]):\n                subs += 1\n    return subs\n\n\n\"\"\"\n\ndef",
        "test": "assert solution(\"aaaaaaa\") == \"0\"",
        "num_ids": 2159,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    edges = []\n    for _ in range(b):\n        edges.append(tuple(map(int, stdin.split())))\n    graph = defaultdict(list)\n    for i in edges:\n        graph[i[0]].append(i[1])\n        graph[i[1]].append(i[0])\n\n    visited = [False] * a\n    stack = [0]\n    visited[0] = True\n    while stack:\n        cur_node = stack.pop()\n        for neighbor in graph[cur_node]:\n            if not visited[neighbor]:\n                stack.append(neighbor)\n                visited[neighbor] = True\n\n    for i in range(1, a):\n        if not visited[i]:\n            visited[i] = True\n            stack.append(i)\n    return '\\n'.join(map(lambda x: '{} {}'.format(x[0], x[1]), filter(lambda x: x[0]!= x[1], edges)))\n\n\ndef",
        "test": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"",
        "num_ids": 1893,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return '-1'",
        "test": "assert solution(\"499993\") == \"41664916690999888\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # get input from stdin\n    a_list = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    n = len(a_list)\n    dp = [[float('inf')] * n for _ in range(2)]\n\n    dp[0][0] = 0\n    for i in range(n):\n        if (a_list[i] % 2 == 0 and dp[0][i] == float('inf')) or (a_list[i] % 2!= 0 and dp[1][i] == float('inf')):\n            dp[0][i] = i\n            dp[1][i] = i\n        else:\n            dp[0][i] = min(dp[0][i], i)\n            dp[1][i] = min(dp[1][i], i)\n            dp[0][i] = min(dp[0][i], i - a_list[i])\n            dp[1][i] = min(dp[1][i], i + a_list[i])\n\n    result = []\n    for i in range(n):\n        result.append(min(dp[0][i], dp[1][i]))\n\n    return''.join([str(x) for x in result])\n    return ''\n",
        "test": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"",
        "num_ids": 2703,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin.readline())\n    # for _ in range(n):\n    #     print('NO') if (n % 2 == 0 and n % 3 == 0) or n % 4 == 0 or n % 5 == 0 or n % 6 == 0 or n % 7 == 0 or n % 8 == 0 or n % 9 == 0 or n % 10 == 0 else print('YES')\n    #     n = int(stdin.readline())\n    n = int(stdin.readline())\n    # print(n)\n    # if (n % 2 == 0 and n % 3 == 0) or n % 4 == 0 or n % 5 == 0 or n % 6 == 0 or n % 7 == 0 or n % 8 == 0 or n % 9 == 0 or n % 10 == 0:\n    #     print('YES')\n    # else:\n    #     print('NO')\n    # n = int(stdin.readline())\n    if n < 2:\n        print('NO')\n    elif n % 2 == 0 and n % 3 == 0:\n        print('YES')\n        print(2, n // 2, '', n)\n    else:\n        print('NO')\nsolution('')",
        "test": "assert solution(\"64 32 97 2 12345\") == \"YES 2 4 8\"",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    min_ops = 0\n    if n % 2 == 1:\n        min_ops = n\n    else:\n        min_ops = n + 1\n    for i in range(1, n, 2):\n        s = s[:i] + 'a' + s[i + 1:]\n        s = s[:i] + 'b' + s[i + 1:]\n        print(s)\n        min_ops += 1\n    return min_ops\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"ababab\") == 0",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x_list = [int(x) for x in stdin.split()]\n    x_list = sorted(x_list)\n\n    count = 0\n    for i in range(len(x_list) - 1):\n        count += abs(x_list[i] - x_list[i + 1])\n\n    return str(count)",
        "test": "assert solution('1\\n0') == '1'",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get A and B and returns the correct choice\n    >>> solution(\"3\\n1\")\n    '2'\n    >>> solution(\"2\\n2\")\n    '1'\n    >>> solution(\"3\\n1\")\n    '2'\n    >>> solution(\"1\\n3\")\n    '1'\n    \"\"\"\n    a, b = [int(x) for x in stdin.split(\"\\n\")]\n    return str(a + b - 1)\n",
        "test": "assert solution('1\\n2') == '2'",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.read())\n    # 0.8, 1, 1.2\n    # 1, 1, 1\n    # 1, 1.2, 1.2\n    # 1, 1.2, 1\n    # 1, 1, 1.2\n    # 1.2, 1.2, 1\n    # 1.2, 1, 1.2\n    # 1.2, 1, 1\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    # 1.2, 1.2, 1.2\n    ",
        "test": "assert solution(\"3\") == \"1.000000000000\"",
        "num_ids": 2402,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"Hello World\"\n    elif N == 2:\n        A = int(stdin)\n        B = int(stdin)\n        return str(A + B)\n    else:\n        return \"ERROR\"",
        "test": "assert solution(\"1\\n\") == \"Hello World\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 4442,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.strip().split())\n  if a < b:\n    return str(a) * b\n  else:\n    return str(b) * a",
        "test": "assert solution(\"4 4\") == \"4444\"",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 4443,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin == 'z':\n        return 'a'\n    else:\n        return chr(ord(stdin) + 1)",
        "test": "assert solution('a') == 'b'",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 4444,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\" \")\n    return T + S\n",
        "test": "assert solution(\"oder atc\") == \"atcoder\"",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    num_of_elem = int(inp[0])\n    elem = [int(num) for num in inp[1].split(' ')]\n    min_sum = 0\n    \n    for ind in range(len(elem)):\n        if ind == 0:\n            min_sum += elem[ind]\n        else:\n            if elem[ind] % 2 == 0:\n                min_sum += elem[ind]\n            else:\n                min_sum -= elem[ind]\n    \n    return min_sum\n",
        "test": "assert solution('''5",
        "num_ids": 1607,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1900,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    A = list(map(int, stdin.split('\\n')[1].split(' ')))\n    remainders = [0 for _ in range(m)]\n    for i in range(n):\n        remainders[A[i] % m] += 1\n    output = [0 for _ in range(m)]\n    for r in range(m):\n        output[r] = int(n / m * remainders[r])\n    print(sum(output))\n    return''.join(map(str, output))\n",
        "test": "assert solution('4 2\\n0 1 2 3') == '0'",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    def func(money, special_money, m):\n        money.sort(reverse=True)\n        special_money.sort(reverse=True)\n\n        for i in range(m):\n            if money[i] + special_money[i] > 1000:\n                return i\n\n        return m\n\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    k = [int(x) for x in stdin.split('\\n')[1].split()]\n    dm = []\n    for i in range(m):\n        d, m = [int(x) for x in stdin.split('\\n')[i + 2].split()]\n        dm.append((d, m))\n\n    sorted_dm = sorted(dm, key=lambda x: x[0], reverse=True)\n    m = func(k, [x[1] for x in sorted_dm], m)\n\n    print(sorted_dm[m][0])\n\n    return ''\n\n\ndef",
        "test": "assert solution(example1) == 8",
        "num_ids": 2914,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) < 1 or not stdin.isdigit() \\\n        else \"NO\" if len(stdin) > 1 or int(stdin) > 100 or int(stdin) < 1 \\\n        else 'YES' if sum(list(map(int, stdin.split()))) == 4 * int(stdin) else 'NO'",
        "test": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"",
        "num_ids": 3184,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'",
        "num_ids": 1656,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('6\\n1 5 12 13 2 15') == '7 2'",
        "num_ids": 1797,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution('4') == '4'",
        "num_ids": 2121,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input and checks that it's valid, then converts the\n    strings into lists of numbers.\n\n    Args:\n        stdin (str): Input\n\n    Returns:\n        str: the number of days it takes for each kid to get back\n        his book\n    \"\"\"\n    q = int(stdin.readline())\n    n_list = [int(i) for i in stdin.readline().split()]\n    p_list = [int(i) for i in stdin.readline().split()]\n\n    # check for valid input\n    if len(n_list)!= len(p_list):\n        return \"Invalid\"\n    for i in n_list:\n        if i < 1 or i > 200:\n            return \"Invalid\"\n\n    # check for valid permutation\n    if sorted(n_list)!= n_list:\n        return \"Invalid\"\n\n    for i in p_list:\n        if i < 1 or i > len(n_list):\n            return \"Invalid\"\n        if n_list.count(i) > 1:\n            return \"Invalid\"\n\n    # initialize\n    count_list = []\n    for n in n_list:\n        count_list.append(0)\n\n    # go through each query\n    for i in range(q):\n        n_count = 0\n        for j in range(n_list[i]):\n            n_count += count_list[p_list[j] - 1]\n        count_list[i] = n_count + 1\n\n    # output\n    for c in count_list:\n        print(c, end=\" \")\n    return \"\"\n",
        "test": "assert solution('4 5') == '1 2 3 4'",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(1000000)\n    def dfs(money: int, n: int, i: int, a: int, dp: dict) -> int:\n        if (money, i) in dp:\n            return dp[(money, i)]\n        if money < 0:\n            return 10 ** 7\n        if n == i:\n            return 0\n        ans = 10 ** 7\n        ans = min(ans, a[i] + dfs(money - a[i], n, i + 1, a, dp))\n        ans = min(ans, dfs(money, n, i + 1, a, dp))\n        dp[(money, i)] = ans\n        return dp[(money, i)]\n    ans = []\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        dp = {}\n        ans.append(dfs(sum(a), n, 0, a, dp))\n    return '\\n'.join(map(str, ans))\n",
        "test": "assert solution(\"6\\n1 1 1 1 1 1\") == \"1\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution('5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, k = map(int, input[0].split())\n    p = list(map(int, input[1].split()))\n    q = list(map(int, input[2].split()))\n\n    s = list(chr(i) for i in range(97, 97 + k))\n    sorted_p = sorted(s[p[i]-1] for i in range(n))\n    sorted_q = sorted(s[q[i]-1] for i in range(n))\n\n    if sorted_p == sorted_q:\n        return 'YES'\n    return 'NO'\n",
        "test": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"",
        "num_ids": 2031,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return output",
        "test": "assert solution(\"4\\n10 10 10 10\") == \"64\"",
        "num_ids": 2661,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    nums = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i!= j and a[i] <= a[j]:\n                nums[i] += 1\n                break\n    print(nums.count(n))\n",
        "test": "assert solution(\"4 2 5 1 3\") == \"3\"",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n3 3 3 3')\n    1\n    >>> solution('4\\n2 2 2 2')\n    0\n    >>> solution('4\\n3 3 3 3')\n    1\n    >>> solution('10\\n4 4 4 4 4 4 4 4 4')\n    0\n    >>> solution('10\\n5 5 5 5 5 5 5 5 5')\n    0\n    \"\"\"\n    N, *a = map(int, stdin.split())\n    a_count = Counter(a)\n    a_count_copy = a_count.copy()\n    good_seq_elem_count = 0\n    for elem, count in a_count_copy.items():\n        if count == 1:\n            good_seq_elem_count += 1\n            a_count.subtract(elem)\n    return N - good_seq_elem_count\n",
        "test": "assert solution('4\\n3 3 3 3') == 1",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    i = 1\n    while i in (a, b, c, d, e):\n        i += 1\n    return str(i)",
        "test": "assert solution(\"0 2 3 4 5\") == \"1\"",
        "num_ids": 1332,
        "indeed": true
    },
    {
        "number": 4461,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'Yes'\n",
        "test": "assert solution('0') == 'Yes'",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s = stdin[0:1]\n    t = stdin[1:2]\n\n    # build's' and 't'\n    s_dict = {'z': 0, 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25}\n    t_dict = {'z': 0, 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25}\n    s_list = [0] * 26\n    t_list = [0] * 26\n    s_list[s_dict[s[0]]] = 1\n    t_list[t_dict[t[0]]] = 1\n\n    for i in range(1, len(s)):\n        if s_list[s_dict[s[i]]] == 0:\n            s_list[s_dict[s[i]]] = 1\n        else:\n            s_list[s_dict[s[i]]] = 0\n        if t_list[t_dict[t[i]]] == 0:\n            t_list[t_dict[t[i]]] = 1\n        else:\n            t_list[t_dict[t[i]]] = 0\n\n    for i in range(len(s)):\n        if s_list[s_dict[s[i]]]!= t_list[t_dict[t[i]]]:\n            return 'No'\n\n    return 'Yes'\n",
        "test": "assert solution(\"yx\") == \"Yes\"",
        "num_ids": 1484,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if abs(a - b) % c == 0:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"7 5 9\") == \"NO\"",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b = map(int, stdin.split())\n    return (a-1)*(b-1)",
        "test": "assert solution('2 2') == 1",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str(X // (Y + 2 * Z) + 1)\n",
        "test": "assert solution('10 5 1') == '2'",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    red_points = [int(x) for x in stdin.split() if x.isdigit()]\n    blue_points = [int(x) for x in stdin.split() if x.isdigit()]\n\n    red_points.sort()\n    blue_points.sort()\n\n    pairs = 0\n\n    for i, (x, y) in enumerate(zip(red_points, blue_points)):\n        if i == len(red_points) - 1:\n            break\n        pairs += 1 if x < y else 0\n\n    return pairs\n\n\"\"\"\n\ndef",
        "test": "assert solution(\"4\\n0 4\\n1 1\\n2 2\\n3 3\") == \"2\"",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"4 5\\n0 2\\n3 4\\n4 6\\n\") == \"7\"",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    m = []\n    n = stdin.split('\\n')\n    count = 0\n    print(n[0])\n    for i in range(0, int(n[0])):\n        \n        if i % 2 == 0:\n            m.insert(0, int(n[i+1]))\n            count += 1\n        if i % 2!= 0:\n            m.append(int(n[i+1]))\n            count += 1\n    print(m)\n    print(count)\n    return \"\"\n\nsolution(stdin)",
        "test": "assert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"",
        "num_ids": 3075,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    # Your code here\n    \n    n = int(stdin)\n    m = 0\n    \n    while n!=1:\n        if n % 2 == 0:\n            n //= 2\n            m += 1\n        elif n % 3 == 0:\n            n //= 3\n            m += 1\n        elif n % 5 == 0:\n            n //= 5\n            m += 1\n        else:\n            break\n    if n == 1:\n        print(m)\n    else:\n        print(-1)\n    \n    return \"\"\n",
        "test": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    tests = stdin.split(\"\\n\\n\")\n    result = []\n    for test in tests:\n        lines = test.split(\"\\n\")\n        size = int(lines[0])\n        heights = [int(height) for height in lines[1].split(\" \")]\n        width = len(heights)\n\n        heights.sort(reverse=True)\n        while heights and heights[0] > 0:\n            heights[0] -= 1\n            for i in range(1, width):\n                if heights[i] == heights[i-1]:\n                    heights[i] -= 1\n        result.append(\"YES\" if all(x == 0 for x in heights) else \"NO\")\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"5\\n1 1 2 1\\n3\\n1 1 2 1\") == 'NO'",
        "num_ids": 2634,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n    return \"\"\n\n\ndef",
        "test": "assert solution(\"zcabd\", \"dbacz\") == 0",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for\n    https://www.codewars.com/kata/539c735981cb83efa8000083\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, k = map(int, stdin.readline().split())\n        print(a * k - b * (k - 1))\n",
        "test": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \\",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\")\n    '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n    \"\"\"\n    n = int(stdin)\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(get_first_good_number(n, i + 1))\n        else:\n            result.append(get_second_good_number(n, i + 1))\n\n    return \"\\n\".join(map(str, result))\n\n\ndef",
        "test": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"1\\n3\\n9\\n15\\n\"",
        "num_ids": 1851,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here.\n    The function name must be solution.\n    The function must return a string to be printed by the driver script.\n    '''\n    t = int(stdin.readline())\n    return '\\n'.join(f'{max(a, x) * min(b, y)}' for a, b, x, y, n in [map(int, stdin.readline().split()) for _ in range(t)])\n",
        "test": "assert solution(\"12 8 8 7 2\") == \"77\"",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    def odd(num):\n        num = num // 2\n        if num % 2 == 0:\n            num += 1\n        return num\n\n    def even(num):\n        num = num // 2\n        if num % 2 == 1:\n            num += 1\n        return num\n\n    for _ in range(int(stdin.readline())):\n        a, b = map(int, stdin.readline().split())\n        num_add = 0\n        num_sub = 0\n        while a!= b:\n            if a % 2 == 0:\n                a = even(a)\n                num_add += 1\n            else:\n                a = odd(a)\n                num_sub += 1\n\n        print(min(num_add, num_sub))\n",
        "test": "assert solution(test_1) == test_1_result",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)",
        "test": "assert solution(solution('')) == ''",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nk = int(stdin.readline())\n\nseq_l = []\nfor _ in range(k):\n    seq_l.append(int(stdin.readline()))",
        "test": "assert solution(\"\"\"",
        "num_ids": 2173,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "test": "assert solution('3 -1 0 2', 3) == '6'",
        "num_ids": 2350,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution is simple:\n    Find the sum of the array; if the sum is even, then the array can be divided into 3 parts with equal sum.\n    If the sum is odd, then the array can't be divided into 3 parts with equal sum.\n    \"\"\"\n    sum_of_arr = sum(list(map(int, stdin.split())))\n    return True if sum_of_arr % 3 == 0 else False\n\n\n    \"\"\"\n    Another solution is using HashMap:\n    \n    def solution(self, A):\n        s = sum(A)\n        if s % 3!= 0:\n            return False\n        m = collections.defaultdict(int)\n        for i in A:\n            m[i] += 1\n        return m.get(0, 0) == s / 3 or m.get(s / 3, 0) == 1 or m.get(2 * s / 3, 0) == 1\n    \"\"\"",
        "test": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True",
        "num_ids": 3980,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    string_set = []\n    N = int(stdin.split(\"\\n\")[0])\n    for i in range(1, N+1):\n        string_set.append(stdin.split(\":\\n\")[i])\n    count_dict = {}\n    for string in string_set:\n        count = 0\n        for char in string:\n            if char in count_dict:\n                count += count_dict[char]\n            count_dict[char] = count\n    final_list = []\n    max_count = max(count_dict.values())\n    for string in string_set:\n        if count_dict[string] == max_count:\n            final_list.append(string)\n    final_list.sort()\n    return final_list",
        "test": "assert solution(\"5\\nab\\nbc\\ncd\\nab\\nab\\n\") == 'ab\\nab'",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    M = 10 ** 9\n    dp = [[M] * N for _ in range(2)]\n    dp[0][0] = 0\n    for i in range(N):\n        for j in range(2):\n            dp[j][i] = min(dp[1 - j][i - 1] + (A[i] - A[i - 1]) ** 2, dp[j][i - 1])\n\n    return min(dp[0][N - 1], dp[1][N - 1])",
        "test": "assert solution('4 8\\n') == '8'",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    return str(X - A - B)",
        "test": "assert solution(\"1234 150 200\") == \"20\"",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m = map(int, stdin.split(' '))\n    # Formulate the problem and solve it\n    return str(comb(n + m, n) % (10**9 + 7))",
        "test": "assert solution('2 2') == 8",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n",
        "test": "assert solution('N M\\na_1 b_1\\na_2 b_2\\n:') == 'IMPOSSIBLE'",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"atcoder\")\n    'acdr'\n    \"\"\"\n\n    return stdin[::2]\n",
        "test": "assert solution('atcoder') == 'acdr'",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 4487,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.strip().split(\" \")\n\n    def check(a, b):\n        if a[-1] == b[0]:\n            return True\n        return False\n\n    if check(A, B) and check(B, C):\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution('rng gorilla apple') == 'YES'",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 4488,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    return \"EQUAL\"\n",
        "test": "assert solution('36 24') == 'GREATER'",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    N, s_1, s_2, *s_rest = [s for s in stdin.split('\\n') if s]\n    N, s_1, s_2 = int(N), s_1, s_2\n    M, t_1, t_2, *t_rest = [s for s in stdin.split('\\n') if s]\n    M, t_1, t_2 = int(M), t_1, t_2\n\n    s_dict = defaultdict(lambda: 0)\n    for i in range(1, N + 1):\n        s_dict[s_1] += i\n        s_dict[s_2] += i\n    for i in range(1, M + 1):\n        s_dict[t_1] -= i\n        s_dict[t_2] -= i\n\n    ans = N\n    for s, cnt in s_dict.items():\n        if ans <= cnt:\n            break\n        ans = min(ans, cnt)\n\n    return str(ans)\n\n\nimport sys\nfrom collections import defaultdict\n\ndef",
        "test": "assert solution('') == ''",
        "num_ids": 3802,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    elif b == 'T':\n        return 'A'",
        "test": "assert solution('A') == 'T'",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 4491,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the max number of candies you can collect.\"\"\"\n    row = stdin.split('\\n')\n    count = 0\n    for row in stdin.split('\\n'):\n        count += max([int(i) for i in row.split(' ')])\n    return str(count)\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 3542,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of operations required to achieve the objective.\n    \"\"\"\n    # Get input\n    n, *a = list(map(int, stdin.split(' ')))\n\n    # Apply Knapsack Problem\n    weights = list(sorted(a))\n    value = 0\n    for idx, weight in enumerate(weights):\n        if idx == 0:\n            value += weight\n        else:\n            if weight > weights[idx - 1]:\n                value += weight\n            else:\n                value += weights[idx - 1]\n\n    # Return result\n    return str(value)",
        "test": "assert solution(\"5 1\") == \"1\"",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in stdin.split():\n        a.append(int(i))\n    if a[0] + a[3] == a[1] + a[4] == a[2] + a[5]:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution('3 0 1\\n2 1 2\\n1 0 1') == 'No'",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    week = stdin\n    if week == \"ARC\":\n        return \"ABC\"\n    elif week == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"Error\"\n    pass",
        "test": "assert solution('ABC') == 'ARC'",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 4495,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)\n",
        "test": "assert solution(\"4 8 2\") == \"3\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return 'Christmas'\n    elif D == 24:\n        return 'Christmas Eve'\n    elif D == 23:\n        return 'Christmas Eve Eve'\n    elif D == 22:\n        return 'Christmas Eve Eve Eve'\n    else:\n        return ''",
        "test": "assert solution('25') == 'Christmas'",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 4497,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    m = 0\n    for i in range(1, N+1):\n        cnt = 0\n        for j in range(1, N+1):\n            if i % j == 0:\n                cnt += 1\n        if cnt > m:\n            m = cnt\n            n = i\n    return str(n)\n    \n    \"\"\"\n    n = 1\n    m = 0\n    for i in range(1, N+1):\n        cnt = 0\n        for j in range(1, N+1):\n            if i % j == 0:\n                cnt += 1\n        if cnt > m:\n            m = cnt\n            n = i\n    return str(n)\n    \"\"\"",
        "test": "assert solution(\"1\") == '1'",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d or abs(b - c) <= d or abs(a - b) <= d:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution('4 7 9 1') == 'No'",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 4499,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return \"\".join(list(map(lambda s: s[0].upper(), s)))",
        "test": "assert solution('''atcoder beginner contest''') == 'ABC'",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 4500,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a,b,c = [int(x) for x in stdin.split()]\n    return \"Yes\" if a + b >= c else \"No\"\n    \n    # return \"Yes\" if a + b >= c else \"No\"\n",
        "test": "assert solution('1 1 1') == 'Yes'",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 4501,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    seq_list = stdin.strip().split('\\n')\n    seq_list = [seq.strip() for seq in seq_list]\n\n    num_of_seq = int(seq_list[0])\n    seq_list = seq_list[1:]\n    for i in range(num_of_seq):\n        seq_list[i] = list(map(int, seq_list[i].split()))\n\n    # print(seq_list)\n\n    for i in range(num_of_seq):\n        seq_list[i] = [seq[-i-1] for seq in seq_list]\n    \n    # print(seq_list)\n    # exit(0)\n    for seq in seq_list:\n        print(' '.join(list(map(str, seq))))\n\nsolution('''\n4\n1 2 3 4\n\n''')",
        "test": "assert solution('4\\n1 2 3 4') == '4 2 1 3'",
        "num_ids": 1345,
        "indeed": false
    },
    {
        "number": 4503,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    import sys\n\n    # save input to list\n    input_list = list(map(int, stdin.strip().split()))\n\n    # get number of moves and health\n    n, h = input_list[0], input_list[1]\n\n    # get number of moves\n    moves = input_list[2:]\n\n    # initialize list to store the max achievable health\n    max_health = []\n\n    # loop through each move\n    for move in moves:\n        # get health after move\n        health = h - move\n\n        # append the max health to the list\n        max_health.append(health)\n\n    # if the max health is greater than or equal to the remaining health, then return True\n    if max(max_health) >= 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4 3\\n1 2 3 4\\n5 6 7 8\") == \"Yes\"",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    x = stdin\n    count = 0\n    while length > 0:\n        if x[length - 2] == x[length - 1]:\n            count += 1\n            length -= 2\n        else:\n            length -= 1\n    return count\n",
        "test": "assert solution('') == 0",
        "num_ids": 2116,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    return \"Yes\" if a!= b and b!= c and c!= a else \"No\"\n",
        "test": "assert solution(\"aba\") == \"No\"",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5\n   ... 8 7 2 4\n   ... 9 7 2 9 3\n   ... ''')\n    '646'\n    >>> solution('''1\n   ... 1000000\n   ... 1000000\n   ... ''')\n    '757402647'\n    '''\n    :param stdin: str\n    :return: str\n    '''\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    mod = 998244353\n\n    f = [[0] * n for _ in range(n)]\n    for i in range(n):\n        f[i][i] = sum(a[i] * b[i])\n\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            f[i][j] = (f[i + 1][j] + sum(a[i:i + l])) % mod * b[j]\n    return str(f[0][n - 1])\n",
        "test": "assert solution(\"7 4 5 3 4\") == \"74324\"",
        "num_ids": 2340,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n\n-----Notes-----\n\"\"\"\n",
        "test": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "test": "assert solution(\"1 2\\n2 3\\n2 4\\n3 5\\n3 6\") == 1",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    return str(next(x for x in range(n, n * 10) if x % n!= 0))",
        "test": "assert solution(\"2 1\") == \"3\"",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, stdin.split()))\n    # if k == 1:\n    #     return str(n)\n    # elif k == n:\n    #     return '0'\n    k_counter = collections.Counter(messages)\n    result = []\n    for i in range(k):\n        if i == 0:\n            result.append(max(k_counter, key=k_counter.get))\n            k_counter[max(k_counter, key=k_counter.get)] -= 1\n        else:\n            result.append(max(k_counter, key=k_counter.get))\n            k_counter[result[i - 1]] -= 1\n            result[i - 1] = max(k_counter, key=k_counter.get)\n    return''.join(map(str, result))\n\n\ndef",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = stdin.readline().split()\n    n = int(line_1[0])\n    turn_cards = []\n\n    for i in range(n):\n        line_2 = stdin.readline().split()\n        num_cards = int(line_2[0])\n        for j in range(num_cards):\n            line_3 = stdin.readline().split()\n            turn_cards.append(line_3)\n\n    damage = 0\n    double_damage_count = 0\n    for card in turn_cards:\n        cost, damage_added = int(card[0]), int(card[1])\n        if cost == 3:\n            damage += damage_added * 2\n        elif cost == 2:\n            damage += damage_added * 2\n            double_damage_count += 1\n        elif cost == 1:\n            damage += damage_added\n\n    if double_damage_count > 0:\n        damage += damage * (double_damage_count + 1)\n\n    return str(damage)\n",
        "test": "assert solution(",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abacaba\")\n    '3'\n    >>> solution(\"dfcbbcfeeedbaea\")\n    '5'\n    \"\"\"\n    s = stdin.strip()\n    n = len(s)\n    queries = int(stdin.readline().strip())\n    q = []\n    for _ in range(queries):\n        t = stdin.readline().strip().split()\n        if t[0] == \"1\":\n            q.append((n, s.find(t[1]), t[2]))\n        else:\n            l, r = int(t[1]), int(t[2])\n            q.append((r - l + 1, set(s[l:r + 1])))\n    for w in q:\n        if len(w[1]) == 0:\n            print(0)\n        elif len(w[1]) == 1:\n            print(1)\n        else:\n            print(len(w[1]))\n        \n    return \"\"\n",
        "test": "assert solution('dfcbbcfeeedbaea') == '5'",
        "num_ids": 2035,
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\",
        "num_ids": 2187,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, m = map(int, stdin.split())\n    tree = [[] for i in range(n + 1)]\n    for i in range(m):\n        a, b = map(int, stdin.split()[:2])\n        tree[a].append(b)\n\n    ans = [None] * m\n    que = deque([(1, 0)])\n    while que:\n        u, c = que.popleft()\n        for v in tree[u]:\n            que.append((v, c + 1))\n        ans[c] = u\n\n    for i in range(m):\n        print(ans[i] if ans[i] is not None else -1)\n\n    return ''",
        "test": "assert solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'",
        "num_ids": 2357,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"100 101 102 105\") == 'YES'",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    # n, m = map(int, stdin.readline().split())\n    # x = list(map(int, stdin.readline().split()))\n    # x_p = [i - 1 for i in range(n + 1)]\n    # x_p[0], x_p[-1] = x_p[-1], x_p[0]\n    # def f(x_p: list, x: list) -> list:\n    #     x_p_t = x_p.copy()\n    #     x_p_t.insert(0, x_p_t[-1])\n    #     x_p_t.pop(-1)\n    #     res = 0\n    #     for i in range(m - 1):\n    #         res += abs(x_p[x[i]] - x_p[x[i + 1]])\n    #     return res\n    # print(*[f(x_p, x) for _ in range(n)])\n",
        "test": "assert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2574,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 3112,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = [int(c) for c in stdin]\n    res = [0] * n\n    for _ in range(k):\n        i, j = map(lambda x: int(x)-1, input().split())\n        res[i], res[j] = res[j], res[i]\n    return \"\".join(map(str, res))\n",
        "test": "assert solution(\"11101010\") == \"011110\"",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = [tuple(map(int, stdin.split(' '))) for i in range(n)]\n    arr.sort(key=lambda x: x[0])\n    nums = [0] * n\n    r = 0\n    for left, right in arr:\n        if left <= r and r < right:\n            nums[r] += 1\n            if nums[r] == k:\n                r += 1\n        else:\n            nums[r] += 1\n    ans = 0\n    for i in range(n):\n        ans += max(nums[i] - k, 0)\n    return str(ans)",
        "test": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'",
        "num_ids": 3063,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n    a = [[None] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            a[i][j] = x[i] + v[j] if i!= j else 0\n    c = [[None] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                c[i][j] = min(\n                    a[i][k] + a[k][j]\n                    for k in range(n)\n                    if k!= i and k!= j\n                )\n            else:\n                c[i][j] = 0\n    return sum(min(c[i][j] for j in range(n) if j!= i) for i in range(n))\nprint(solution(sys.stdin.read()))\n",
        "test": "assert solution('3\\n1 3 2\\n-100 2 3') == 3",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n ...\n\n  \n\"\"\"\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"YES\"\n",
        "test": "assert solution(\"1\\n2\") == \"YES\"",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    lst: List[int] = list(map(int, stdin.split(' ')))\n    a: int = lst[0]\n    b: int = lst[1]\n    ans: int = 0\n    while b > 0:\n        ans += a & b\n        ans %= M\n        b //= 2\n    return ans\n",
        "test": "assert solution(\"4 5\\n1001\\n10101\") == \"11\"",
        "num_ids": 1607,
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    '''O(n) time | O(n) space - where n is the length of the input array\n    '''\n    n = int(stdin)\n    if n % 2 == 1:\n        return 'NO'\n    a = [0] * n\n    e = 0\n    o = n - 1\n    for i in range(n):\n        if i % 2 == 0:\n            a[e] += 1\n            e += 1\n        else:\n            a[o] += 1\n            o -= 1\n    if sum(a[:n // 2]) == sum(a[n // 2 + 1:]):\n        return''.join(str(i) for i in a)\n    return 'NO'\n",
        "test": "assert solution(\"10\") == \"NO\"",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible size of the subset of the given set of segments such that each pair of segments in this subset either non-intersecting or one of them lies inside the other one.\"\"\"\n    pass\n",
        "test": "assert solution(\"4\\n5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\\n4\\n2\\n7\"",
        "num_ids": 3368,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(n^2)\n    space complexity: O(n)\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    dp = [0 for _ in range(n+1)]\n    for i in range(n):\n        if s[i] == 'U':\n            dp[i+1] = max(dp[i+1], dp[i])\n        elif s[i] == 'D':\n            dp[i+1] = max(dp[i+1], dp[i] + 1)\n        elif s[i] == 'R':\n            dp[i+1] = max(dp[i+1], dp[i] + 1)\n        elif s[i] == 'L':\n            dp[i+1] = max(dp[i+1], dp[i] + 1)\n        else:\n            dp[i+1] = max(dp[i+1], dp[i])\n    i = 0\n    while i < n:\n        if dp[i]!= dp[i+1]:\n            return f\"{i+1} {i+dp[i+1]}\"\n        i += 1\n    return \"-1\"\n",
        "test": "assert solution('L') == 'U'",
        "num_ids": 3549,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"7 1 1 7 1 8 1 9 1\") == \"72\"",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math",
        "test": "assert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\") == \"0\"",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"We use this list to store the maximum child greed factor at each index.\n    We then use a second list to store the minimum cookie size.\n    If the minimum cookie size at a given index is less than the current child greed factor\n    then we change the list to the new maximum child greed factor.\n    We keep iterating until we have no more cookies or no children.\n    \"\"\"\n    c = []\n    m = []\n    for line in stdin.split('\\n'):\n        child_info = line.split()\n        c.append(child_info[0])\n        m.append(int(child_info[1]))\n    max_children = max(m)\n    return max_children * len(c) - sum([x for x in m if x < max_children])\n\n\nprint(solution(\"\"\"1 2\n2 1\n3 1\n4 2\n5 2\n6 1\n7 2\n8 1\n9 1\n10 2\"\"\"))",
        "test": "assert solution('1 1') == 1",
        "num_ids": 2597,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: result\n    \"\"\"\n    n = int(stdin)\n    t = [[1], [1, 1]]\n    if n > 1:\n        for i in range(2, n + 1):\n            line = [1]\n            for j in range(1, i):\n                line.append(t[i - 1][j - 1] + t[i - 1][j])\n            line.append(1)\n            t.append(line)\n    return t[n]\n    \"\"\"\n    n = int(stdin)\n    t = [[1], [1, 1]]\n    for i in range(2, n + 1):\n        line = [1]\n        for j in range(1, i):\n            line.append(t[i - 1][j - 1] + t[i - 1][j])\n        line.append(1)\n        t.append(line)\n    return t[n]\n    \"\"\"\n    return t[n]\n",
        "test": "assert solution(\"3\") == [1,3,3,1]",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # first write a number to the power of -2\n    # then perform and with the number\n    return bin(int(stdin, 2) & -2)\n\n'''\nfrom typing import List\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        result = 0\n        while n:\n            n &= (n - 1)\n            result += 1\n        return result\n    \n\nsolution = Solution()\nprint(solution.hammingWeight(12))\nprint(solution.hammingWeight(9))\nprint(solution.hammingWeight(11))\n",
        "test": "assert solution('10') == 1",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    for i in range(len(numbers)):\n        numbers[i] = int(numbers[i])\n    numbers[-1] += 1\n    string = \"\"\n    for i in range(len(numbers)):\n        string += str(numbers[i]) + \" \"\n    return string[:-1]\n\n\nprint(solution('1 2 3'))\n",
        "test": "assert solution(\"4\") == \"5\"",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a+b, a-b, a*b))\n",
        "test": "assert solution('3 1\\n') == '4'",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom math import sqrt\n\n\ndef",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 4539,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % sum([int(c) for c in str(N)]) == 0:\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(12) == 'Yes'",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 4540,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 2082,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\":\n            return \"vowel\"\n        else:\n            return \"consonant\"\n",
        "test": "assert solution(\"a\") == \"vowel\"",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 4542,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.strip()\n    return sum(1 for i in range(len(stones)-1) if stones[i]!= stones[i+1])\n",
        "test": "assert solution('BBBWW') == 1",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return 'Yes' if int(str(a) + str(b))**0.5 % 1 == 0 else 'No'",
        "test": "assert solution(\"3 29\") == \"No\"",
        "num_ids": 896,
        "indeed": true
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def score(array, X):\n        count = 0\n        for a in array:\n            if a == X:\n                count += 1\n        return count\n    N = int(stdin)\n    array = list(map(int, stdin.split()))\n    array.sort()\n    left = 1\n    right = array[-1]\n    while right - left > 1:\n        mid = (left + right) // 2\n        score_l = score(array, left)\n        score_r = score(array, right)\n        score_m = score(array, mid)\n        if score_m == N:\n            return score_m\n        elif score_m > N:\n            left = mid\n        else:\n            right = mid\n    return score(array, left)",
        "test": "assert solution('''7",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    n = int(n)\n    a = stdin.split('\\n')[1]\n    a = int(a)\n    # b = stdin.split('\\n')[2]\n    # b = int(b)\n    # print(n, a, b)\n    return str(n * n - a)\n",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 4546,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 4 6\")\n    'YES'\n    \"\"\"\n    lines = stdin.split()\n    return 'YES' if eval(lines[0]) + eval(lines[1]) == eval(lines[2]) else 'NO'\n",
        "test": "assert solution('5 2 6') == 'NO'",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 4547,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split(\"\\n\")[0]\n    if N[1] == '9':\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('10') == 'No'",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"",
        "num_ids": 2545,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n  H, W = map(int, stdin.split())\n  s = [list(stdin[(i * W) + 1 : (i + 1) * W]\n           for i in range(H))]\n  for i in range(1, H):\n    for j in range(1, W):\n      if s[i][j] == '#':\n        if s[i - 1][j]!= '#':\n          s[i][j] = '.'\n        if s[i + 1][j]!= '#':\n          s[i][j] = '.'\n        if s[i][j - 1]!= '#':\n          s[i][j] = '.'\n        if s[i][j + 1]!= '#':\n          s[i][j] = '.'\n  return 'Yes' if s[0][0] == '#' else 'No'",
        "test": "assert solution(\"3 3\\n#.\\n###\\n#.\") == \"Yes\"",
        "num_ids": 1822,
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b < c or a + c < b or b + c < a:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert solution(\"1 1 1\") == \"Yes\"",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 4551,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    masses = [int(num) for num in stdin.split(\" \")]\n    if sum(masses[:2]) > sum(masses[2:]):\n        return \"Left\"\n    elif sum(masses[:2]) < sum(masses[2:]):\n        return \"Right\"\n    return \"Balanced\"\n",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids": 1258,
        "indeed": true
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for https://www.codewars.com/kata/59a0c1f56e04f8a5d90000d1\n    \"\"\"\n\n    # code\n    N = int(stdin.split()[0])\n    # if we don't have at least N+1 shops\n    if N < 1 or N > 100:\n        return \"no shop\"\n    open_and_close = []\n    for _ in range(N):\n        # open_and_close.append(stdin.split(\" \"))\n        open_and_close.append(list(map(int, stdin.split())))\n    # list of list with lists of the following format:\n    # [shop_open, shop_close, day_open, day_close]\n    shops = []\n    for _ in range(5):\n        shops.append([0, 0, 0, 0, 0])\n\n    for i in range(N):\n        for j in range(5):\n            for k in range(2):\n                if open_and_close[i][j * 2 + k] == 1:\n                    shops[j][2 * k + 0] = 1\n                    shops[j][2 * k + 1] = 0\n\n    # for each day, we can either open or close the shop\n    for day in range(5):\n        # for each period\n        for period in range(2):\n            # if the shop is closed, we are not interested in it\n            if shops[day][period] == 0:\n                continue\n            for day_next in range(5):\n                # if the next day is the same, we are not interested\n                if day_next == day:\n                    continue\n                for period_next in range(2):\n                    # if the shop is closed on the next day, we are not interested\n                    if shops[day_next][period_next] == 0:\n                        continue\n                    # we are interested if the shop is open on the next day\n                    if shops[day_next][period_next] == 1:\n                        # if the shop is open on the current day\n                        if shops[day][period] == 1:\n                            # if the shop is open on the next day, we are interested\n                            if shops[day_next][period_next] == 1:\n                                # we found the optimal solution\n                                # so we can start looking for the next period\n                                # and increase the number of open periods by one\n                                return \"yes\"\n    return \"no\"\n",
        "test": "assert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"",
        "num_ids": 2002,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) == 3 and stdin[2] == '-' and (0 <= int(stdin[0]) <= 5 and 0 <= int(stdin[1]) <= 9) else 'No'",
        "test": "assert solution(\"3 3\") == \"No\"",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    x,y,w = [int(i) for i in stdin.split()]\n    x1,y1,x2,y2 = x,0,x+w,1\n    \n    return \"1\"",
        "test": "assert solution(\"3 2 6\") == \"1\"",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    A, B, K = map(int, stdin.split())\n    min_ = min(A, B)\n    max_ = max(A, B)\n    min_range = min_ - K\n    max_range = max_ + K\n    min_list = []\n    max_list = []\n    for num in range(min_range, max_range):\n        if num in range(min_, max_):\n            min_list.append(num)\n        else:\n            max_list.append(num)\n    min_list.sort()\n    max_list.sort()\n    min_list.reverse()\n    if len(min_list) < K:\n        min_list += max_list[0:K - len(min_list)]\n    else:\n        max_list = max_list[0:K]\n    return '\\n'.join(str(num) for num in min_list + max_list)\n",
        "test": "assert solution('3 8 2') == '3\\n4\\n7\\n8'",
        "num_ids": 1467,
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"",
        "test": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(num) for num in stdin.split(' ')]\n    if B >= X or X >= A + B:\n        return 'NO'\n    elif X < A:\n        return 'NO'\n    elif X > A:\n        return 'YES'\n    return 'YES'",
        "test": "assert solution('''1 4 2''') == 'NO'",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    X, t = stdin.split()\n    return str(int(X) - int(t))\n",
        "test": "assert solution('1 0') == '1'",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    number_list = stdin.split()\n    number_list = list(map(int, number_list))\n    if number_list[1] >= 10**18:\n        return -1\n    return str(number_list[0]*number_list[1])\n",
        "test": "assert solution('1\\n0') == '0'",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split('\\n')]\n    return 'Yes' if n <= 1000 * a else 'No'\n",
        "test": "assert solution('2018\\n218') == \"Yes\"",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 4561,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(x) for x in stdin.split(' ')]\n    if B < X + 1:\n        return 'delicious'\n    elif B <= X:\n        return'safe'\n    return 'dangerous'",
        "test": "assert solution('4 1 6') == 'dangerous'",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 4562,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    # Variables\n    answer = 1\n    # loop from 1 to input n + 1\n    for num in range(1, input_n + 1):\n        # check if num can be represented as square\n        if num ** 0.5 % 1 == 0:\n            answer = num\n    return answer\n",
        "test": "assert solution(10) == 9",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum possible number of votes that Takahashi and Aoki get.\n\n    >>> solution(str(3))\n    '10'\n    >>> solution(str(2))\n    '10'\n    \"\"\"\n    N = int(stdin)\n    t = [0] * N\n    a = [0] * N\n    for i in range(N):\n        t[i], a[i] = map(int, stdin.split())\n    lcm = 1\n    for i in range(N):\n        lcm = lcm * t[i] // gcd(lcm, t[i]) * a[i] // gcd(lcm, a[i])\n    return str(lcm)\n",
        "test": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"",
        "num_ids": 1610,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    return 'yes' if len(S) == len(set(S)) else 'no'\n",
        "test": "assert solution(\"uncopyrightable\") == \"yes\"",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 4565,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(lambda x: 'E' in x, stdin.split())))\n",
        "test": "assert solution('WEEWW') == '1'",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in input for number of cities and number of roads and creates a list\n    of tuples for each road. Then it will create a dictionary for the cities\n    and their roads. Finally it will iterate through the roads and print\n    the roads connected to the city and return the list of tuples.\n    \"\"\"\n    cities = int(stdin.readline().strip())\n    roads = int(stdin.readline().strip())\n    list_of_tuples = []\n    # Dictionary to hold the cities and their roads\n    city_dict = {}\n    for i in range(roads):\n        city_pair = stdin.readline().strip().split(\" \")\n        city_pair = list(map(int, city_pair))\n        city_dict.setdefault(city_pair[0], [])\n        city_dict.setdefault(city_pair[1], [])\n        list_of_tuples.append(city_pair)\n    for road in list_of_tuples:\n        city_dict[road[0]].append(road[1])\n        city_dict[road[1]].append(road[0])\n    for city in range(1, cities+1):\n        print(len(city_dict[city]))\n",
        "test": "assert solution(\"6 3\\n1 2\\n2 3\\n3 4\\n1 5\\n2 5\") == '4\\n2\\n1\\n3\\n2\\n1'",
        "num_ids": 2545,
        "indeed": false
    },
    {
        "number": 4567,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    score, maxscore = 0, 0\n    for line in stdin.splitlines():\n        score = int(line)\n        if score == maxscore:\n            maxscore = score + 10\n        elif score == 0 or maxscore == 0:\n            maxscore = score\n        else:\n            maxscore = score + 10\n    return str(maxscore)",
        "test": "assert solution('3\\n5\\n10\\n15') == '25'",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    n = len(string)\n    index = n // 2\n    x = string[:index]\n    y = string[index:]\n    return max(x.count('a'), x.count('b'), y.count('a'), y.count('b'))\n",
        "test": "assert solution('aabbca') == 2",
        "num_ids": 2035,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'Sunny':\n        return 'Cloudy'\n    elif stdin == 'Cloudy':\n        return 'Rainy'\n    else:\n        return 'Sunny'\n",
        "test": "assert solution(\"Sunny\") == \"Cloudy\"",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 4570,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    plan, A, B = stdin.split()\n    N = int(plan)\n    A = int(A)\n    B = int(B)\n\n    if A <= B:\n        return str(N * A)\n    else:\n        return str(B * min(N, 12))",
        "test": "assert solution('7 17 120') == '119'",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('1 1\\n') == '3800'",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin[0]\n    for i in range(len(stdin)):\n        result = result if result < stdin[i] else stdin[i]\n    return 'b' if result == 'a' else None\n",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N = int(stdin.readline())\n    data = [int(x) for x in stdin.readline().split(\" \")]\n    data.sort()\n    # print(data)\n    medians = []\n    for i in range(0, N, 2):\n        m = (data[i] + data[i+1]) // 2\n        # print(m)\n        medians.append(m)\n\n    # print(medians)\n    for i in medians:\n        print(i)\n    return \"\"\n",
        "test": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    def find(i):\n        if parents[i] == i:\n            return i\n        else:\n            parents[i] = find(parents[i])\n            return parents[i]\n    n, *a = map(int, stdin.split())\n    parents = list(range(n))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if find(i) == find(j):\n                parents[find(i)] = find(j)\n                break\n    return max(a) * max(a[i] for i in range(n) if find(i) == find(i))",
        "test": "assert solution('1 1\\n1 2\\n2 1') == 2",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split('\\n')[0].split())\n    m = max(a, b, c)\n    a = a // m * x\n    b = b // m * x\n    c = c // m * x\n    return str(a + b + c)\n",
        "test": "assert solution('6 0 1 1') == '1'",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    def convert(x): return int(x)\n    A, B, C = [convert(x) for x in stdin.strip().split(' ')]\n    if C > A and C < B:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution(\"3 1 3\") == 'No'",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write the function here\n    '''\n",
        "test": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"",
        "num_ids": 1472,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"apple\") == \"apple\"",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n, *ratings = list(map(int, stdin.split()))\n    print(' '.join(['1' if rating >= 2400 else '2' if rating >= 2800 else '3' if rating >= 1200 else '4' if rating >= 800 else '5' if rating >= 400 else '6' if rating >= 200 else '7' if rating >= 100 else '8' for rating in ratings]))\n    \n    return''.join(map(str, [1 if rating >= 2400 else 2 if rating >= 2800 else 3 if rating >= 1200 else 4 if rating >= 800 else 5 if rating >= 400 else 6 if rating >= 200 else 7 if rating >= 100 else 8 for rating in ratings]))\n\ndef",
        "test": "assert solution('4 2100 2500 2700 2700') == '2 2'",
        "num_ids": 4228,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n  price = 700\n  for i in range(len(stdin)):\n    if stdin[i] == \"o\":\n      price += 100\n  print(price)\n  return price\n\nsolution('oxo')\n",
        "test": "assert solution(\"oxo\") == 900",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 4582,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n  a, b = stdin.split()\n  return 'H' if a == 'H' and b == 'H' else 'D'",
        "test": "assert solution(\"H H\") == \"H\"",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get a string and return the solution of the problem.\n    :param stdin: string with the 4 digits (ABCD) of the ticket\n    :return: a string with the solution of the problem.\n    \"\"\"\n    ticket = stdin\n    if len(ticket)!= 4:\n        return 'Impossible.'\n    for i in range(len(ticket)):\n        if i == 0:\n            if ticket[i]!= '0':\n                return 'Impossible.'\n        else:\n            if ticket[i] == '0':\n                return 'Impossible.'\n    if int(ticket[0]) + int(ticket[1]) + int(ticket[2]) + int(ticket[3])!= 7:\n        return 'Impossible.'\n    return f\"1-2-2-2={ticket[0]}+{ticket[1]}+{ticket[2]}+{ticket[3]}\"\n",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\"",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    my_dict = {}\n    my_list = stdin.split()\n    my_list = [int(i) for i in my_list]\n    my_list.sort()\n    for i in range(1, len(my_list)):\n        my_dict[my_list[i]] = my_list[i-1]\n    # print(my_dict)\n    for _ in range(int(stdin)):\n        user_id = int(stdin)\n        if user_id!= 1:\n            if user_id in my_dict.keys():\n                print(1)\n            else:\n                print(0)\n        else:\n            print(0)\nsolution(input())\n",
        "test": "assert solution('5 1 1 1') == '0'",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    kangaroo_position = int(stdin)\n    cnt = 0\n    while kangaroo_position!= 0:\n        cnt += 1\n        kangaroo_position -= cnt\n    return str(cnt)",
        "test": "assert solution('6') == '3'",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if '111' in str(n) else 'No'\n",
        "test": "assert solution('1120') == 'No'",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n",
        "test": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == '3'",
        "num_ids": 3065,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(\" \")\n    return '<' if x < y else '>' if x > y else '='",
        "test": "assert solution('A B') == '<'",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(num) for num in stdin.split()]\n    h = list(stdin.split('\\n')[1:h+1])\n    w = list(''.join(stdin.split('\\n')[i][:w] for i in range(h+1)).split(' '))\n    for i in range(h):\n        for j in range(w):\n            if h[i][j] == '.':\n                if h[i][j+1] == '#':\n                    w[j] = str(w[j].replace('#', '2'))\n                if h[i+1][j] == '#':\n                    w[j] = str(w[j].replace('#', '2'))\n                if h[i+1][j+1] == '#':\n                    w[j] = str(w[j].replace('#', '2'))\n                    if h[i][j+1] == '#':\n                        w[j] = str(w[j].replace('#', '2'))\n                    if h[i+1][j] == '#':\n                        w[j] = str(w[j].replace('#', '2'))\n                    if h[i+1][j+1] == '#':\n                        w[j] = str(w[j].replace('#', '2'))\n                if h[i][j+1] == '#':\n                    w[j] = str(w[j].replace('#', '1'))\n                if h[i+1][j] == '#':\n                    w[j] = str(w[j].replace('#', '1'))\n                if h[i+1][j+1] == '#':\n                    w[j] = str(w[j].replace('#', '1'))\n    return '\\n'.join(w)\n    \n\"\"\"\n",
        "test": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"",
        "num_ids": 4116,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # max_time = min(n * min(a), m * min(b))\n    # print(max_time)\n    # min_time = min(n * max(a), m * max(b))\n    # print(min_time)\n    return max(n * max(a), m * max(b)) - k",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"",
        "num_ids": 2286,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, C, X, Y] = map(int, stdin.split())\n    print(A * X + B * Y)",
        "test": "assert solution('1500 2000 1600 3 2') == '7900'",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n*factorial(n-1)\n\n    def num_of_divisors(n):\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    def solution(stdin: str) -> str:\n        n = int(stdin)\n        return num_of_divisors(factorial(n)) % (10**9+7)\n\n    return str(solution(stdin))\n",
        "test": "assert solution(\"3\\n\") == \"4\"",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        return str(1)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(9, 1, -1):\n        for j in range(2, i):\n            if i % j == 0:\n                if i // j in l:\n                    l.remove(i // j)\n                if j in l:\n                    l.remove(j)\n    return str(max(l))\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 4594,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    mochi = [int(x) for x in stdin.split('\\n')]\n    n = mochi[0]\n    d = mochi[1:]\n    max_layers = 0\n\n    for i in range(1, n):\n        if d[i-1] >= d[i]:\n            max_layers += 1\n\n    return str(max_layers)\n",
        "test": "assert solution('4\\n10\\n8\\n8\\n6') == '3'",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:7] + stdin[7:]\n\"\"\"\n\ndef",
        "test": "assert solution('QWERTYASDFZXCV') == '5'",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n\n-----\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"3\\n8 12 40\") == \"2\"",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 4597,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    for i in range(n):\n        m *= (i + 1)\n    return m % (10 ** 9 + 7)",
        "test": "assert solution('3') == 6",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # N = stdin.split(\"\\n\")[0]\n    return str(1+2+3)\n\nprint(solution(\"3\"))",
        "test": "assert solution('3') == '6'",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 4599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    \n    a = b = 0\n    for i in range(n):\n        a += arr[i]\n        b += arr[n - i - 1]\n    return str(abs(a - b))",
        "test": "assert solution(\"3\\n1 1 1\") == \"0\"",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    problems = dict()\n    for _ in range(n):\n        problem, status = stdin.split(' ')\n        problems[problem] = status\n    correct, penalties = 0, 0\n    for _ in range(m):\n        problem, status = stdin.split(' ')\n        if problems[problem] == 'AC':\n            correct += 1\n            penalties += 1\n        elif problems[problem] == 'WA' and status == 'AC':\n            penalties += 1\n        else:\n            correct += 1\n    return str(correct) +'' + str(penalties)\n",
        "test": "assert solution(\"1 1\\n1 AC\") == \"1 0\"",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('1\\n10\\n2\\n') == '4'",
        "num_ids": 2268,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(min(a*b, a*d + c*b))",
        "test": "assert solution(\"1 1 1 1\") == \"1\"",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    total = [0] * n\n    for i in range(n):\n        total[i] = a[i] + total[i - 1]\n    dp = [[] for _ in range(n)]\n    dp[0].append(1)\n    for i in range(n):\n        for j in range(len(dp[i])):\n            cur = dp[i][j]\n            if cur <= n:\n                dp[i + total[cur - 1]].append(cur + 1)\n    return dp[n][0]\n",
        "test": "assert solution(\"5\\n2 4 4 0 2\") == 4",
        "num_ids": 3186,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split(' ')]\n    return str(sum(i for i in range(n+1) if sum(int(i) for i in str(i)) in range(a, b+1)))\n",
        "test": "assert solution(\"20 2 5\") == \"84\"",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 4606,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  return f\"ABC{str(N).zfill(3)}\"\n  # return \"%03d\" % N",
        "test": "assert solution('100') == 'ABC100'",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 4607,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    result = [f'{i}-{j}' for i in range(1, a + 1) for j in range(1, b + 1) if int(i) == int(j)][::-1]\n    return str(len(result))\n",
        "test": "assert solution(\"5 5\") == \"5\"",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return ''\n",
        "test": "assert solution(\"3\\n3\\n1\\n2\\n\") == 2",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 6\n   ... 2\n   ... 6''')\n    1\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    numbers = [int(stdin.splitlines()[1])]\n    for i in range(n - 1):\n        numbers.append(int(stdin.splitlines()[i + 2]))\n    print(numbers.count(0))\n",
        "test": "assert solution(\"3\\n6\\n2\\n6\\n\") == \"1\"",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4610,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return str(1)\n",
        "test": "assert solution(\"3 4\\n1 1 2 2 5\") == \"1\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2\\n3 1 2\\n6 1 1\")\n    'Yes'\n    >>> solution(\"3\\n1 1 1\\n6 1 1\")\n    'No'\n    '''\n    n = int(stdin.split('\\n')[0])\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, stdin.split('\\n')[_].split())))\n    points.sort()\n    for i in range(1, len(points)):\n        if points[i][0] == points[i - 1][0] and points[i][1] == points[i - 1][1]:\n            return 'No'\n    return 'Yes'",
        "test": "assert solution('2\\n3 1 2\\n6 1 1') == 'Yes'",
        "num_ids": 2550,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the average of two numbers\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    a, b = map(int, stdin.split(' '))\n    return str(int(round(a+b/2)))\n",
        "test": "assert solution('1 3') == '2'",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    graph = {}\n    for _ in range(M):\n        u, v = stdin.split()\n        if u in graph:\n            graph[u].append(v)\n        else:\n            graph[u] = [v]\n        if v in graph:\n            graph[v].append(u)\n        else:\n            graph[v] = [u]\n    bridge_edges = 0\n    visited = set()\n    for u, vs in graph.items():\n        if u in visited:\n            continue\n        for v in vs:\n            if v in visited:\n                bridge_edges += 1\n            else:\n                dfs(u, v, visited)\n    return str(bridge_edges)\n        \ndef",
        "test": "assert solution(\"1 2\\n3 4\\n5 6\\n7\") == '4'",
        "num_ids": 3228,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    _, *v = map(int, stdin.split())\n    for i in v:\n        if v.count(i) == 1:\n            return str(i)\n",
        "test": "assert solution('5 7 5') == '7'",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split(' '))\n    beaker_max = 3 * e\n    if c + d <= beaker_max:\n        return str(a + c + d) +'' + str(c)\n    else:\n        water_max = min(100, b - c)\n        sugar_max = (100 - water_max) * e / 100\n        return str(water_max + sugar_max) +'' + str(sugar_max)\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"",
        "num_ids": 1759,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution:\n    \"internationalization\"\n    =>\n    \"i18n\"\n    '''\n   ...\n    return ''\n\n\ndef",
        "test": "assert solution(\"internationalization\") == \"i18n\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    char_matrix: list[list[str]] = []\n    for char_row in stdin.split('\\n'):\n        char_matrix.append(list(char_row))\n    char_matrix.reverse()\n    for i in range(len(char_matrix)):\n        for j in range(len(char_matrix[0])):\n            if char_matrix[i][j]!= char_matrix[0][j]:\n                return 'NO'\n    return 'YES'\n",
        "test": "assert solution(\"pot\\ntop\\n\") == \"YES\"",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = map(int, stdin.split())\n    xs, ys, aas = [], [], []\n    for _ in range(n):\n        x, y, a = map(int, stdin.split())\n        xs.append(x)\n        ys.append(y)\n        aas.append(a)\n\n    area = 0\n    for x, y, a in zip(xs, ys, aas):\n        if a == 1:\n            area += w - x\n        elif a == 2:\n            area += x\n        elif a == 3:\n            area += h - y\n        elif a == 4:\n            area += y\n    return str(area)\n",
        "test": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"",
        "num_ids": 3086,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2621,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.strip().split()]\n\n    for row in range(h):\n        for col in range(w):\n            print(stdin[row][col], end=\"\")\n    print()\n    return \"\"\n",
        "test": "assert solution('''2 2",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the input is a sequence of pairwise distinct integers.\n    Otherwise, return 'NO'.\n    \"\"\"\n    input_str = stdin.splitlines()\n    n = int(input_str[0])\n    seq = [int(x) for x in input_str[1].split()]\n    if len(seq) == n:\n        seq.sort()\n        is_distinct = all(seq[i]!= seq[i - 1] for i in range(1, len(seq)))\n        if is_distinct:\n            return 'YES'\n    return 'NO'\n",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 4623,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(stdin: str):\n        def backtrack(stdin: str, left: int, right: int, s: int) -> int:\n            if right - left + 1 < 2 or s < 0:\n                return 0\n\n            if (left, right, s) in memo:\n                return memo[(left, right, s)]\n\n            memo[(left, right, s)] = max(\n                dfs(stdin, left + 1, right, s - weight[left]) + 1,\n                dfs(stdin, left, right - 1, s - weight[right]) + 1\n            )\n\n            return memo[(left, right, s)]\n\n        n, s = map(int, stdin.split())\n        weight = list(map(int, stdin.split()))\n\n        memo = {}\n        return backtrack(stdin, 0, n - 1, s)\n\n    return '\\n'.join(map(str, map(dfs, stdin.split('\\n')[1:])))\n",
        "test": "assert solution('') == ''",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \"",
        "num_ids": 2890,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    return \"0\"\n",
        "test": "assert solution(\"4 2 3\") == \"0\"",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'YES'\n",
        "test": "assert solution(\"11 14 16 12\") == \"YES\"",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 5 2\\\\n1 2 5\\\\n2 3 7\\\\n2 4 4\\\\n4 5 2\\\\n4 6 8\\\\n1 6\\\\n5 3\")\n    22\n    >>> solution(\"5 5 4\\\\n1 2 5\\\\n2 3 4\\\\n1 4 3\\\\n4 3 7\\\\n3 5 2\\\\n1 5\\\\n1 3\\\\n3 3\\\\n1 5\")\n    13\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    graph = [[INF] * n for _ in range(n)]\n\n    for i in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        graph[u - 1][v - 1] = min(graph[u - 1][v - 1], w)\n\n    dist = [INF] * n\n    dist[0] = 0\n    dist[1] = 0\n\n    for _ in range(n):\n        for u in range(n):\n            for v in range(n):\n                graph[u][v] = min(graph[u][v], dist[u] + dist[v])\n\n    for _ in range(k):\n        u, v = map(int, stdin.readline().split())\n        dist[v - 1] = min(dist[v - 1], dist[u - 1] + graph[u - 1][v - 1])\n\n    return dist[n - 1] if dist[n - 1]!= INF else -1\n",
        "test": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"",
        "num_ids": 5394,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"\"\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        while n >= 1:\n            if 3 ** (n - 1) <= n <= 3 ** n:\n                ans += \"1\\n\"\n                break\n            n -= 1\n        else:\n            ans += \"0\\n\"\n    return ans\n\"\"\"\n\ndef",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"6\"",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"3 3 3\"",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n",
        "test": "assert solution(\"2 6\\n1 5\\n\") == \"8\"",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' or 'YES' or 'RRRRUUU' or 'RUUURRRRUU' or 'RRRRUUU' or...\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)",
        "test": "assert solution('') == ''",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List\n\ntest_cases = int(stdin.readline())\n\nfor test_case in range(test_cases):\n    shelf_size = int(stdin.readline())\n    shelf = list(map(int, stdin.readline().split()))\n    start = shelf.index(1)\n    end = shelf.index(1)\n    for index in range(shelf_size - 2, -1, -1):\n        if shelf[index] == 1:\n            end = index\n    print(end - start)",
        "test": "assert solution('3\\n1 0 0') == '0'",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"7 3\\n4 4\\n6 2\\n\")!= \"abcd\"",
        "num_ids": 1894,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 3139,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(test_case_1) == \"27\"",
        "num_ids": 1706,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the optimal solution to the problem.\"\"\"\n\n    (n, c), *lines = stdin.splitlines()\n    a = list(map(int, lines[0].split()))\n    b = list(map(int, lines[1].split()))\n\n    # Create a list with pairs of the floors and the total times required to\n    # get between them, calculated for the stairs and for the elevator.\n    #\n    # We also keep track of the minimum time required.\n    floors = []\n    for i in range(n - 1):\n        floors.append((i + 1, a[i] + b[i]))\n        floors.append((i, c + a[i] + b[i]))\n    min_time = a[0] + b[0]\n\n    for (i, j), time in floors:\n        if time < min_time:\n            min_time = time\n\n    return \" \".join(map(str, (t - min_time for t in a)))\n",
        "test": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'",
        "num_ids": 2284,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    #\n    # you can use the following \".split()\" function to split a string into a list of tokens\n    # str_example = \"My name is \"George\" Smith\"\n    # print(str_example.split()) --> ['My', 'name', 'is', 'George', 'Smith']\n    #\n    # you can also use the \".join()\" function to join a list of tokens into a string\n    # print(','.join(['My', 'name', 'is', 'George', 'Smith'])) --> My,name,is,George,Smith\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        'Case #{}: {}'.format(\n            i,\n            process_case(i, *stdin.split('\\n')[i].split(' '))\n        ) for i in range(1, int(stdin.split('\\n')[0]))\n    ])\n\n\ndef",
        "test": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == '6\\n1\\n5\\n10'",
        "num_ids": 2222,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds max excluded number by one or more operations\"\"\"\n    stdin = stdin.split('\\n')\n    n, x = int(stdin[0]), int(stdin[1])\n    a = [0]\n    mex = 0\n    q = int(stdin[2])\n    for j in range(q):\n        y = int(stdin[3 + j])\n        a.append(y + x)\n        mex = max(mex, sum(a))\n    return mex",
        "test": "assert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'",
        "num_ids": 1760,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(sorted(stdin.split(\" \"), reverse=True))\n",
        "test": "assert solution('') == ''",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 4644,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'",
        "test": "assert solution('4\\n2 3') == 'NO'",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if len(n) < 2 or len(n) > 1000:\n        return -1\n    for i in range(2, int(len(n))):\n        if abs(int(n[i]) - int(n[i-1])) < 4:\n            if abs(int(n[i]) - int(n[i+1])) < 4:\n                if abs(int(n[i]) - int(n[i+2])) < 4:\n                    if abs(int(n[i]) - int(n[i-2])) < 4:\n                        if abs(int(n[i]) - int(n[i-3])) < 4:\n                            return n\n    return -1\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"4\\n3\\n2\\n4\\n\") == \"2 4 3 1\"",
        "num_ids": 2027,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '0 -1 1 -1'\n    \n",
        "test": "assert solution(\"1 2\\n1 3\\n2 4\") == \"0 -1 1 -1\"",
        "num_ids": 1863,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n",
        "test": "assert solution(\"30\") == \"10\"",
        "num_ids": 2065,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = list(map(int, stdin.readline().split()))\n        s = stdin.readline().rstrip()\n\n\n\n\"\"\"",
        "test": "assert solution(\"RBRGR\") == 0",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n",
        "test": "assert solution(\"7\\n1 1 1 1 1 2 2\") == \"3\"",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"4\\n4\\n1 2 4 3\") == \"1 2 3 4\"",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    q, n = map(int, stdin.split())\n    p = [int(i) for i in stdin.split()]\n    for i in range(q):\n        d, l = map(int, stdin.split())\n        # if l not in p:\n        #     return \"NO\"\n        # elif l == p[l - 1]:\n        #     return \"YES\"\n        # else:\n        #     l_p = p.index(l)\n        #     while l_p < len(p):\n        #         if p[l_p] == p[l_p - 1]:\n        #             l_p += 1\n        #         else:\n        #             break\n        #     if l_p == len(p) or p[l_p]!= p[l_p - 1]:\n        #         return \"NO\"\n        #     else:\n        #         l_p = p.index(l)\n        #         if l_p == 0:\n        #             return \"NO\"\n        #         else:\n        #             p[p.index(l)] = p[l_p - 1]\n        #             p[l_p - 1] = l\n        # return \"YES\"\n        for j in range(d):\n            if p[l - 1] == l:\n                return \"YES\"\n            else:\n                l_p = p.index(l)\n                if l_p == len(p):\n                    return \"NO\"\n                else:\n                    p[l_p], p[l_p - 1] = p[l_p - 1], p[l_p]\n        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n",
        "test": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 5 4\") == \"NO\"",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"5\\n2\\n3\\n5\\n6\\n7\\n2\") == '5'",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\\n\")\n    'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if n % 2 == 0:\n        if k % 2 == 0:\n            if k < n:\n                return 'NO'\n            return 'YES'\n        return 'YES'\n    if k % 2 == 1:\n        if k < n - 1:\n            return 'NO'\n        return 'YES'\n    if k == 1:\n        if n % 2 == 0:\n            return 'NO'\n        return 'YES'\n    return 'NO'\n",
        "test": "assert solution('10 3') == 'YES'",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"5 3 1\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\neccbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 7 18 3 14 1\n   ... ''')\n    YES\n    1 3 5\n    \"\"\"\n    pass\n",
        "test": "assert solution('7 18 3 14 1') == 'YES\\n1 3 5'",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef",
        "test": "assert solution
        "num_ids": 7240,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    def generate(numRows: int) -> list:\n        if numRows == 1:\n            return [[1]]\n        res = [[1]]\n        for i in range(1, numRows):\n            row = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    row.append(1)\n                else:\n                    row.append(res[i - 1][j - 1] + res[i - 1][j])\n            res.append(row)\n        return res\n    return generate(5)\n",
        "test": "assert solution('5') == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \ndef",
        "test": "assert solution(\"2\\njoey@foo.com\\njoey@bar.com\\n\") == \\",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get a list of fibonacci numbers\n    :param stdin: The first input line\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    n = int(stdin)\n    fib_nums = [0, 1]\n    while len(fib_nums) < n:\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n    return [num ** 3 for num in fib_nums]\n",
        "test": "assert solution(\"4\") == [0, 1, 1, 8]",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    import xml.etree.ElementTree as etree\n    doc = etree.parse(stdin)\n    root = doc.getroot()\n    return max(list(map(lambda x: len(x.text.split('\\n')), root.iter())), key=len)\n\nprint(solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n'''))\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 5058,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    if (len(stdin) < 10):\n        return \"NO\"\n    elif (len(stdin) == 10):\n        if (stdin[0] == \"7\" or stdin[0] == \"8\" or stdin[0] == \"9\"):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        stdin = stdin[1:]\n        if (stdin[0] == \"7\" or stdin[0] == \"8\" or stdin[0] == \"9\"):\n            stdin = stdin[1:]\n            if (len(stdin) == 9):\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"",
        "test": "assert solution('7017252641') == \"YES\"",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    m, m_values = (stdin.split())\n    m = int(m)\n    m_values = set(map(int, stdin.split()))\n    n, n_values = (stdin.split())\n    n = int(n)\n    n_values = set(map(int, stdin.split()))\n    answer = m_values.difference(n_values).union(n_values.difference(m_values))\n    answer = list(answer)\n    answer.sort()\n    for i in answer:\n        print(i)",
        "test": "assert solution('4\\n2 3 6 5\\n3\\n2 3 5') == '2\\n5\\n6'",
        "num_ids": 1613,
        "indeed": false
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n=====Test Cases=====\nTest Case 01\n>>> Input\n\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nOutput\n\n78.00\n\nTest Case 02\n>>> Input\n\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nOutput\n\n81.00\n\nTest Case 03\n>>> Input\n\n5\nCLASS      MARKS      NAME       ID\n2          100          Jeff       1\n2          87          Fergus     2\n3          82          Ian        3\n3          62          Carla      4\n2          72          Jason      5\n\nOutput\n\n81.00\n\nTest Case 04\n>>> Input\n\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nOutput\n\n78.00\n\nTest Case 05\n>>> Input\n\n5\nMARKS      CLASS      NAME       ID\n100         2          Calum      1\n87         5          Scott      2\n82         2          Fergus     5\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nOutput\n\n81.00\n\nTest Case 06\n>>> Input\n\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nOutput\n\n81.00\n\n'''\n\nimport collections\n\nNumberOfStudents = int(input())\ncolumnHeaders = input().split()\n\nStudentDict = {}\n\nfor i in range(NumberOfStudents):\n    row = input().split()\n    for j in range(len(columnHeaders)):\n        StudentDict[row[j]] = row[:j] + row[j + 1:]\n\nprint('{:.2f}'.format(sum([int(StudentDict[col][1]) for col in columnHeaders])/len(columnHeaders)))\n",
        "test": "assert solution(\"6\\nMARKS\\nCLASS\\nNAME\\n1\\n2\\n3\\n4\\n5\\n6\") == \"3.00\"",
        "num_ids": 5117,
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 2)!= 0:\n        return \"Weird\"\n    elif n >= 2 and n <= 5:\n        return \"Not Weird\"\n    elif n >= 6 and n <= 20:\n        return \"Weird\"\n    elif n > 20:\n        return \"Not Weird\"\n    else:\n        return \"Weird\"",
        "test": "assert solution('3') == \"Weird\"",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(len, map(attributes, stdin.splitlines(keepends=False)))))",
        "test": "assert solution(\"\"\"",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(float, stdin.strip().split()))\n    B = list(map(float, stdin.strip().split()))\n    C = list(map(float, stdin.strip().split()))\n    D = list(map(float, stdin.strip().split()))\n\n    AB = [B[0] - A[0], B[1] - A[1], B[2] - A[2]]\n    BC = [C[0] - B[0], C[1] - B[1], C[2] - B[2]]\n    CD = [D[0] - C[0], D[1] - C[1], D[2] - C[2]]\n    X = AB[0] * BC[0] + AB[1] * BC[1] + AB[2] * BC[2]\n    Y = BC[0] * CD[0] + BC[1] * CD[1] + BC[2] * CD[2]\n    return str(round(math.degrees(math.acos(X / (math.sqrt(X * X) * math.sqrt(Y * Y))), 2))\n",
        "test": "assert solution('1 1 1 1') == '0.00'",
        "num_ids": 2987,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here:\n    # remove all whitespace\n    stdin = stdin.replace(\" \", \"\")\n    # split string into words\n    stdin = stdin.split()\n    # call function\n    result = score_words(stdin)\n    # format output\n    print(\"{}\".format(result))\n    # Solution ends here\n\ndef",
        "test": "assert solution(\"x y z\") == \"xyz\"",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    r = r'^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'\n    # ^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\n    # r'^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'\n    # r'^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'\n    # ^M{0,3}((CM|CD|D?C{0,3})|(XC|XL|L?X{0,3})|(IX|IV|V?I{0,3}))$\n    # r'^M{0,3}((CM|CD|D?C{0,3})|(XC|XL|L?X{0,3})|(IX|IV|V?I{0,3}))$'\n    if re.match(r, stdin):\n        return 'True'\n    return 'False'\n",
        "test": "assert solution('MCMLXX') == True",
        "num_ids": 1575,
        "indeed": true
    },
    {
        "number": 4671,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('+91 99999 6666 +91 99999 9999 +91 99999 9999')",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution(\"4\\nBart 80\\nLisa 90\\nAdam 80\\nAtli 80\\n\") == \"80.00\"",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    def sort_by_age(item):\n        return item[\"age\"]\n\n    def print_name(item):\n        print(f'{item[\"gender\"].capitalize()} {item[\"first_name\"]} {item[\"last_name\"]}')\n\n    persons = []\n    for _ in range(int(stdin)):\n        person = {\n            \"first_name\": stdin.split()[0],\n            \"last_name\": stdin.split()[1],\n            \"age\": int(stdin.split()[2]),\n            \"gender\": stdin.split()[3],\n        }\n        persons.append(person)\n\n    persons.sort(key=sort_by_age)\n\n    for person in persons:\n        print_name(person)\n",
        "test": "assert solution(\"1\\nGeorge\\n20\\nM\") == \"Mr. George\\n\"",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n\n=====Output Format=====\nPrint the list in lexographic increasing order. Each element should appear on a separate line.\n\n=====Sample Test Case=====\n>>> solution(3,2,1,2)\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\n=====Testing=====\n\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Java cases --\nInput:\nSolution.solution(3,2,1,4)\nOutput:\n    [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3]]\n\nInput:\nSolution.solution(2,2,2,2)\nOutput:\n    [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput:\nSolution.solution(2,2,2,3)\nOutput:\n    [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput:\nSolution.solution(3,3,3,1)\nOutput:\n    [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput:\nSolution.solution(1,1,1,1)\nOutput:\n    [[0, 0, 0]]\n\n'''\n",
        "test": "assert solution(\"1\\n1\\n2\\n3\") == \"0 0 0\\n0 0 1\\n0 1 2\\n0 2 3\\n1 0 0\\n1 0 1\\n1 1 2\\n1 2 3\\n2 0 0\\n2 0 1\\n2 1 2\\n2 2 3\"",
        "num_ids": 3980,
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # \u6839\u64da\u5c0f\u5b78\u7684\u6307\u5c0e\uff0c\u5b9a\u7fa9\u4e86\u89e3\u6c7a\u7684\u516c\u5f0f\u70ba z1 = re1 + im1j, z2 = re2 + im2j\uff0c\u6240\u4ee5\u8981\u5148\u8b80\u53d6\u5230 z1, z2 \u7684 real \u8207 imaginary \u7684\u503c\n    # \u518d\u628a\u5b83\u5011\u76f8\u52a0\u5f8c\u5373\u53ef\n    z1 = stdin[:stdin.index(' ')]\n    z2 = stdin[stdin.index(' ') + 1:]\n    z1_split = z1.split('+')\n    z1_real = int(z1_split[0])\n    z1_imaginary = int(z1_split[1][:z1_split[1].index('i')])\n\n    z2_split = z2.split('+')\n    z2_real = int(z2_split[0])\n    z2_imaginary = int(z2_split[1][:z2_split[1].index('i')])\n\n    z1_re_plus_z2_im = complex(z1_real, z2_imaginary)\n    z1_im_plus_z2_re = complex(z1_imaginary, z2_real)\n\n    z1_add = z1_re_plus_z2_im.real + z1_im_plus_z2_re.imag\n    z1_sub = z1_re_plus_z2_im.real - z1_im_plus_z2_re.imag\n    z1_mul = z1_re_plus_z2_im.real * z1_im_plus_z2_re.imag\n    z1_div = z1_re_plus_z2_im.real / z1_im_plus_z2_re.imag\n    z1_mod = z1_re_plus_z2_im.real % z1_im_plus_z2_re.imag\n\n    z2_re_plus_z1_im = complex(z2_real, z1_imaginary)\n    z2_im_plus_z1_re = complex(z2_imaginary, z1_real)\n\n    z2_add = z2_re_plus_z1_im.real + z2_im_plus_z1_re.imag\n    z2_sub = z2_re_plus_z1_im.real - z2_im_plus_z1_re.imag\n    z2_mul = z2_re_plus_z1_im.real * z2_im_plus_z1_re.imag\n    z2_div = z2_re_plus_z1_im.real / z2_im_plus_z1_re.imag\n    z2_mod = z2_re_plus_z1_im.real % z2_im_plus_z1_re.imag\n\n    print(z1_add, end='\\n')\n    print(z1_sub, end='\\n')\n    print(z1_mul, end='\\n')\n    print(z1_div, end='\\n')\n    print(z1_mod, end='\\n')\n    print(z2_add, end='\\n')\n    print(z2_sub, end='\\n')\n    print(z2_mul, end='\\n')\n    print(z2_div, end='\\n')\n    print(z2_mod)",
        "test": "assert solution(\"1+-1i\") == \"0.00-2.00i\"",
        "num_ids": 6430,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    p = []\n    for i in range(0, len(stdin), 2):\n        p.append(stdin[i])\n    for i in range(1, len(stdin), 2):\n        p.append(stdin[i])\n    return ''.join(p)",
        "test": "assert solution('xyz') == 'xaybzc'",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 4677,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    editor = stdin\n    s = ''\n    for i in editor:\n        if i == '0':\n            s = s + '0'\n        elif i == '1':\n            s = s + '1'\n        elif i == 'B':\n            if s == '':\n                s = s\n            else:\n                s = s[:len(s)-1]\n    print(s)\n    return s",
        "test": "assert solution('01B0') == '00'",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return 'A' if 'aca' in stdin else 'B' if 'accc' in stdin else 'C'",
        "test": "assert solution(\"aca\\naccc\\nca\") == \"A\"",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 4680,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    c = int(stdin.split(' ')[2])\n\n    if (a == 5 and b == 5 and c == 7) or (a == 7 and b == 5 and c == 5) or (a == 5 and b == 7 and c == 5):\n        return 'YES'\n    return 'NO'",
        "test": "assert solution(\"7 7 5\") == \"NO\"",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 4681,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the N-th Lucas number.\n    >>> solution('5\\n')\n    11\n    \"\"\"\n    n = int(stdin)\n    l = [2, 1]\n    if n > 1:\n        l = [2, 1]\n        for i in range(n - 1):\n            l.append(l[-1] + l[-2])\n    return str(l[-1])\n",
        "test": "assert solution('5\\n') == '11'",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the problem\"\"\"\n    a, b, h = int(stdin.readline()), int(stdin.readline()), int(stdin.readline())\n    return str(int((a + b) * h / 2))\n",
        "test": "assert solution(\"3 4 2\") == \"7\"",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 4683,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    a = stdin.split()[1:]\n    A = []\n    for num in a:\n        A.append(int(num))\n    total = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            total += A[i]*A[j]\n    return str(total % (10**9 + 7))\n",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\"",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 4684,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    rgb = stdin.split(\" \")\n    total = (int(rgb[0])*1000) + (int(rgb[1])*100) + (int(rgb[2])*10)\n    if total % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3 4 1\") == \"NO\"",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\"\"\"\n    # Read in the input ints.\n    input_ints = list(map(int, stdin.split()))\n    a, b, c, k = input_ints\n    # Initialize the memoization dictionary.\n    memo = dict()\n    # Find the largest possible sum of the integers written on the blackboard after K operations.\n    def largest_sum(a: int, b: int, c: int, k: int) -> int:\n        # Memoize the result.\n        key = (a, b, c, k)\n        if key in memo:\n            return memo[key]\n        # Base case: k = 0.\n        if k == 0:\n            return a + b + c\n        # Recursive case: k > 0.\n        # Compute the maximum sum.\n        max_sum = max(a + largest_sum(a * 2, b, c, k - 1),\n                      b + largest_sum(a, b * 2, c, k - 1),\n                      c + largest_sum(a, b, c * 2, k - 1))\n        # Memorize the result.\n        memo[key] = max_sum\n        # Return the maximum sum.\n        return max_sum\n    # Return the solution.\n    return str(largest_sum(a, b, c, k))\n",
        "test": "assert solution(\"5 3 11\\n1\") == \"30\"",
        "num_ids": 3113,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(abaccaba)\n    Yes\n\n    >>> solution(abcbacba)\n    No\n    \"\"\"\n    chars_freq = {}\n    for c in stdin:\n        chars_freq[c] = chars_freq.get(c, 0) + 1\n\n    is_beautiful = True\n    for c, freq in chars_freq.items():\n        if freq % 2!= 0:\n            is_beautiful = False\n            break\n\n    return \"Yes\" if is_beautiful else \"No\"\n",
        "test": "assert solution(\"abaccaba\") == \"Yes\"",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 4687,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 4688,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\n\ndef",
        "test": "assert solution(\"2 2\\n\") == 2",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    'Minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.'\n    _, k, n = map(int, stdin.split('\\n')[0].split())\n    houses = list(map(int, stdin.split('\\n')[1].split()))\n    dist = 0\n    for i in range(n - 1):\n        dist += min((houses[i+1] - houses[i] - k) % k, k - (houses[i+1] - houses[i] - k))\n    return str(dist)\n",
        "test": "assert solution('5\\n1\\n2\\n2\\n2\\n') == '6'",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (a * b) > (c * d):\n        return str((a * b))\n    elif (a * b) < (c * d):\n        return str((c * d))\n    else:\n        return str((a * b))\n",
        "test": "assert solution('1 1 1 1') == '1', 'error'",
        "num_ids": 2826,
        "indeed": true
    },
    {
        "number": 4691,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    AC, WA, TLE, RE = 0, 0, 0, 0\n    for line in stdin.splitlines():\n        if line == 'AC':\n            AC += 1\n        elif line == 'WA':\n            WA += 1\n        elif line == 'TLE':\n            TLE += 1\n        elif line == 'RE':\n            RE += 1\n    return f'AC x {AC}\\nWA x {WA}\\nTLE x {TLE}\\nRE x {RE}'\n",
        "test": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'",
        "num_ids": 1676,
        "indeed": true
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    hour = M\n    minute = (60 - M) * 24\n    if M <= 23:\n        hour = M\n        minute = 0\n    else:\n        hour = 23\n        minute = (60 - M) * 24\n    return str(hour) + \" \" + str(minute)\n\n\ndef",
        "test": "assert solution('21') == '27'",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = [int(x) for x in stdin.split(\" \")]\n    return str(a + b) if a + b < 10 else \"error\"\n    \n",
        "test": "assert solution(\"6 3\") == \"9\"",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 4694,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return \"7\"\n",
        "test": "assert solution(\"2 3 7 9\") == \"7\"",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 4695,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(\" \")\n    return \"Yes\" if (int(x) == 1 and int(y) == 3) or (int(x) == 2 and int(y) == 4) or (int(x) == 3 and int(y) == 5) or (int(x) == 4 and int(y) == 6) or (int(x) == 5 and int(y) == 7) or (int(x) == 6 and int(y) == 8) or (int(x) == 7 and int(y) == 9) or (int(x) == 8 and int(y) == 10) or (int(x) == 9 and int(y) == 11) or (int(x) == 10 and int(y) == 12) else \"No\"",
        "test": "assert solution('1 2') == 'No'",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 4696,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    if (a * b) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 4697,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return '2'",
        "test": "assert solution('1 6\\n') == '2'",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    num_of_problems = int(stdin.split()[0])\n    times = [int(x) for x in stdin.split()[1:]]\n    num_of_drinks = int(stdin.split()[-1])\n    sum_times = 0\n    for i in range(num_of_drinks):\n        times_of_drink = [int(x) for x in stdin.split()[i*2+1:i*2+3]]\n        sum_times += sum(times_of_drink)\n    return sum_times\n",
        "test": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    d = [int(i) for i in stdin.split(' ')[1:]]\n    answer = 0\n    for d_i in d:\n        if d_i!= 0 and d_i!= 2:\n            answer += 1\n    return answer\n",
        "test": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(2)\n",
        "test": "assert solution(\":\\n4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == '2'",
        "num_ids": 1966,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(\"\\n\")[0]))",
        "test": "assert solution('4 3\\n') == '10'",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\" if stdin == \"0\" else \"0\"\n",
        "test": "assert solution(0) == '0'",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin:\n        for i in range(len(s) - 1):\n            if s[i] + s[i + 1] == '+':\n                print(eval(s[:i] + s[i] + '+' + s[i + 2:]))\n                return ''\n    return ''",
        "test": "assert solution('1234567') == '1+2+3+4+5+6+7'",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return '1'",
        "test": "assert solution('4\\n1 2 3 4') == '1'",
        "num_ids": 2329,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    square_list = stdin.split(\"\\n\")\n    row_length = len(square_list[0])\n    col_length = len(square_list)\n    # print(row_length, col_length)\n    diagonal_list = [list(range(0, i + 1)) for i in range(row_length)]\n    print(diagonal_list)\n    print(list(range(row_length, -1, -1)))\n    # for i in range(row_length):\n    #     for j in range(col_length):\n    #         if i + j == row_length - 1:\n    #             diagonal_list.append(list(range(i, j, -1)))\n\n    print(diagonal_list)\n\n    return \"\"\n",
        "test": "assert solution(\"obe\") == 'abc'",
        "num_ids": 2902,
        "indeed": false
    },
    {
        "number": 4707,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    s_1 = int(stdin[0])\n    s_2 = int(stdin[1])\n    s_3 = int(stdin[2])\n\n    return sum([s_1, s_2, s_3])",
        "test": "assert solution(\"101\") == 2",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    '''Tak's total accommodation fee.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Solution output.\n    '''\n    n, k, x, y = map(int, stdin.split())\n    return '{} yen'.format(\n        n * k * y\n        + (k * (k - 1) // 2) * x\n    )\n",
        "test": "assert solution(\"5 3 10000 9000\") == \"48000\"",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 4709,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 4710,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    return \"ARC\"\n",
        "test": "assert solution(\"1000\") == \"ABC\"",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return min(a + b, a + c, b + c)",
        "test": "assert solution(\"700 600 780\") == \"1300\"",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'",
        "num_ids": 1521,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum value of the x after the operations.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: maximum value of the x\n    \"\"\"\n    # your solution here\n    return \"\"\n",
        "test": "assert solution('IIIDI') == '3'",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 4714,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    finds number of palindromic integers between a and b\n    '''\n    A, B = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n",
        "test": "assert solution('11009 11332') == 4",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 4715,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return f'{len(set((a, b, c)))}'\n",
        "test": "assert solution('3 1 4') == '3'",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 4716,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    l = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    l = sorted(l, reverse=True)\n    if k > n:\n        return 0\n    else:\n        return sum(l[:k])\n",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == 12",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 4717,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the store closer to the Snuke's home.\n\n    Args:\n        stdin (str): Input string given in the standard input.\n\n    Returns:\n        str: Name of the store closer to Snuke's home.\n    \"\"\"\n\n    # split input\n    input = stdin.split()\n    houses = [int(x) for x in input]\n    houses_dict = {'A': houses[0], 'B': houses[1]}\n\n    # return store closer to Snuke's house\n    return min(houses_dict, key=houses_dict.get)\n",
        "test": "assert solution('5 2 7') == 'B'",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 4718,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split(\"/\")\n    year = \"2018\"\n    return year + \"/\" + month + \"/\" + day",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\"",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    S_1 = stdin[1]\n    S_2 = stdin[2]\n    S_3 = stdin[3]\n    a = [S_1, S_2, S_3]\n    b = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                s = a[i] + a[j] + a[k]\n                b.append(s)\n    \n    print(max(b))\n    \n",
        "test": "assert solution('cbaa') == 'aac'",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    seat = []\n    for _ in range(N):\n        l, r = map(int, stdin.split())\n        seat.append(range(l, r + 1))\n    print(sum(map(len, seat)))\n    return\n",
        "test": "assert solution(str(5)) == \"5\"",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n*m)\n",
        "test": "assert solution('3 4') == '6'",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 4722,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    if A + B == 9:\n        return \"Possible\"\n    return \"Impossible\"",
        "test": "assert solution('4 5') == 'Possible'",
        "num_ids": 2460,
        "indeed": true
    },
    {
        "number": 4723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = 'coder'\n    S = S.replace('?', 'a')\n\n    for i in range(len(T)):\n        S_ = S.replace(T[i], 'a')\n        S_ = S_.replace('a?', 'a')\n\n        if len(S_) == 1:\n            S = S_\n            break\n\n    if S == 'a':\n        return 'UNRESTORABLE'\n    else:\n        return S",
        "test": "assert solution(\"coder\") == \"coder\"",
        "num_ids": 2680,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.splitlines()[0])\n    b = int(stdin.splitlines()[1])\n    return str(round((a+b)/2))",
        "test": "assert solution(input()) == output()",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    # https://www.codewars.com/kata/55b89c9caecb3ea3f40001e1/train/python\n    # assert solution(\"string\") == 4\n    # assert solution(\"letter\") == 2\n    # assert solution(\"aaaaaa\") == 0\n    # assert solution(\"uncopyrightable\") == 13\n    # assert solution(\"ambidextrously\") == 12\n    # assert solution(\"assesses\") == 1\n\n    #print(stdin)\n    my_set = set()\n    stdin = stdin.replace(\" \",\"\")\n    #print(stdin)\n    for i in range(0, len(stdin)-1):\n        for j in range(1, len(stdin)):\n            my_set.add(stdin[i:j])\n    print(my_set)\n    print(len(my_set))\n    print(my_set)\n    #print(stdin)\n\n\n    return 0\n",
        "test": "assert solution(\"a\") == 0",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    if t == 3 and n <= 50:\n        return 'AC'\n    elif t == 5 and n > 50:\n        return 'AC'\n    else:\n        return 'TLE'\n",
        "test": "assert solution(\"100000000 500 3\") == \"TLE\"",
        "num_ids": 1999,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the new board\n    '''\n    board = [stdin[i:i + 4] for i in range(0, len(stdin), 4)]\n    move = stdin[-1]\n    #print(board)\n    #print(move)\n    if move == '0':\n        return''.join(map(str, board))\n    new_board = [[], [], [], []]\n    new_board[move.count('1') - 1].append(move.count('2'))\n    new_board[move.count('1') - 1].append(move.count('4'))\n    new_board[move.count('2') - 1].append(move.count('2'))\n    new_board[move.count('2') - 1].append(move.count('4'))\n    #print(new_board)\n    for i in range(4):\n        for j in range(4):\n            #print(board[i][j], new_board[i][j])\n            board[i][j] = str(int(board[i][j]) * int(new_board[i][j]))\n    #print(board)\n    return''.join(map(str, board))",
        "test": "assert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\"",
        "num_ids": 5737,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    molecules = stdin.split()[:-1]\n    desired_molecule = stdin.split()[-1]\n    num_output_molecules = 0\n\n    for m in molecules:\n        if m[:-1].upper() == desired_molecule.upper():\n            num_output_molecules += 1\n\n    return str(num_output_molecules)\n",
        "test": "assert solution(\"H 2\") == \"0\"",
        "num_ids": 4957,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    It takes O(S*P) time and O(S) space, where S is the length of the second\n    input and P is the length of the first input.\n    '''\n    s, t = stdin.split()\n    for i in range(len(s)):\n        if s.count(s[i])!= t.count(s[i]):\n            return \"FAIL\"\n    return \"PASS\"\n",
        "test": "assert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return \"ok so far\"\n\nprint(solution(\"([] [] ]\"))\nprint(solution(\"(([] [[]] ())\"))\nprint(solution(\"[ { { () () () () } } ] () {}\"))\nprint(solution(\"[ { [[()]] (({})) } ] () {}\"))\n",
        "test": "assert solution(\"13\\n(([] [[]] ())\") == \"ok so far\"",
        "num_ids": 2112,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    def check_valid_game(string_list: List[str], current_string: str, previous_string: str) -> bool:\n        if len(string_list) == 1:\n            return True\n        if string_list[-1][0]!= current_string[-1] or not previous_string:\n            return False\n        if string_list[-2][0]!= previous_string[-1]:\n            return False\n        return True\n\n    def check_valid_game_recursive(string_list: List[str], current_string: str, previous_string: str) -> bool:\n        if len(string_list) == 1:\n            return True\n        if current_string[0]!= string_list[-1][0] or not previous_string:\n            return False\n        if string_list[-2][0]!= previous_string[-1]:\n            return False\n        return check_valid_game_recursive(string_list[:-1], string_list[-1], current_string)\n\n    string_list = [string.strip() for string in stdin.split('\\n') if string.strip()]\n    if check_valid_game_recursive(string_list, string_list[0], string_list[0]):\n        return \"Fair Game\"\n    return \"Player %s lost\" % (string_list[0].count('1') % 2 + 1)\n",
        "test": "assert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"",
        "num_ids": 2179,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1000\\n*\\n100\\n\")\n    '100000'\n    >>> solution(\"10000\\n+\\n10\\n\")\n    '10010'\n    >>> solution(\"10\\n+\\n1000\\n\")\n    '1010'\n    \"\"\"\n    a, op, b = stdin.split(\"\\n\")\n    a, b = int(a), int(b)\n    if op == \"*\":\n        return str(a * b)\n    else:\n        return str(a + b)\n",
        "test": "assert solution(\"1000\\n*\\n100\") == \"100000\"",
        "num_ids": 2409,
        "indeed": true
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # read stdin\n    n: int = int(stdin)\n    \n    # write your code in Python 3.6\n    if n % 2 == 0:\n        print(\"%s in\" % n)\n    else:\n        print(\"%s out\" % (n-1))\n    return \"\"\n\nprint(solution(input()))\n\n\"\"\"",
        "test": "assert solution(\"8 in\") == \"6\"",
        "num_ids": 1920,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    y = stdin.split(' ')[0]\n    p = stdin.split(' ')[1]\n    extended = ''\n    if y[-1] == 'e':\n        extended = y + 'x' + p\n    elif y[-1] in ['a', 'i', 'o', 'u']:\n        extended = y[:-1] + 'ex' + p\n    else:\n        extended = y + p\n    return extended\n",
        "test": "assert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if year % 4!= 0:\n        return 'no'\n    if year % 100 == 0:\n        if year % 400 == 0:\n            return 'yes'\n        else:\n            return 'no'\n    else:\n        return 'yes'",
        "test": "assert solution(\"2019\") == \"no\"",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of ways to deal cards that form a strictly ascending sequence.\n\n    >>> solution(\"4 0 0 0 4 0 0 0 0 4\\n3\")\n    64\n    \"\"\"\n    cards = list(map(int, stdin.split()))\n    n = len(cards)\n    k = int(stdin.split()[n - 1])\n\n    # Count number of ways to deal K cards from cards\n    # that are in ascending order\n    ways = [1] + [0] * sum(cards)\n    for card in cards:\n        for i in range(k - 1, card - 1, -1):\n            ways[i] += ways[i - card]\n    return ways[k - 1]\n",
        "test": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"",
        "num_ids": 5000,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    first_problem, remaining_time, prob_estimates = stdin.split('\\n')\n    first_problem = list(map(int, first_problem.split(' ')))\n    remaining_time = int(remaining_time)\n    prob_estimates = list(map(int, prob_estimates.split(' ')))\n    total_minutes = sum(prob_estimates)\n    prob_estimates.sort()\n    estimated_time = sum(prob_estimates)\n    num_probs_solved = 0\n    penalty_time = 0\n    while remaining_time >= estimated_time:\n        num_probs_solved += 1\n        estimated_time -= prob_estimates[0]\n        penalty_time += prob_estimates[0]\n        if num_probs_solved > first_problem[1]:\n            penalty_time += remaining_time - estimated_time\n            remaining_time = estimated_time\n            break\n        prob_estimates.pop(0)\n        prob_estimates.sort()\n    print(num_probs_solved, penalty_time)\n    return str(num_probs_solved)+' '+str(penalty_time)\n",
        "test": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()",
        "num_ids": 2046,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 1\n    while len(s) % k!= 0:\n        k += 1\n    return k\n",
        "test": "assert solution('aaaaaaaa') == 1",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 3170,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return 1 if int(stdin[:3]) == 555 else 0\n",
        "test": "assert solution(\"5551212\") == 1",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 4741,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('/')[0]) - 32) + '/' + str(int(stdin.split('/')[1]))",
        "test": "assert solution(\"32/1\") == \"0/1\"",
        "num_ids": 1653,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'Nonsense'",
        "test": "assert solution('') == 'Nonsense'",
        "num_ids": 2839,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    ",
        "test": "assert solution(\"Cat-a-pil-lar\") == \"Catacillar\"",
        "num_ids": 4389,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('4\\n') == '16'",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    return str(len(stdin.split()[0].split(\" \")))\n",
        "test": "assert solution('1\\n2') == '1'",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tries to assign passengers to vehicles and check whether the vehicle capacities would be violated if the\n    assignment was correct.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Output.\n    \"\"\"\n\n    def is_possible(solution: list, input: list) -> bool:\n        \"\"\"Checks whether the input would cause any of the vehicles to have incorrect capacities.\n\n        Args:\n            solution (list): Solution to check.\n            input (list): Input to check.\n\n        Returns:\n            bool: True if the solution is valid, False otherwise.\n        \"\"\"\n        assignment = [0] * len(solution)\n        for station in range(len(solution)):\n            assignment[station] = len(input[station])\n            assignment[station] -= solution[station]\n            for passenger in input[station]:\n                assignment[station] += len(passenger)\n            if assignment[station] < 0:\n                return False\n        return True\n\n    def check_solution(solution: list, input: list) -> bool:\n        \"\"\"Checks whether the input would cause any of the vehicles to have incorrect capacities.\n\n        Args:\n            solution (list): Solution to check.\n            input (list): Input to check.\n\n        Returns:\n            bool: True if the solution is valid, False otherwise.\n        \"\"\"\n        assignment = [0] * len(solution)\n        for station in range(len(solution)):\n            assignment[station] = len(input[station])\n            assignment[station] -= solution[station]\n            for passenger in input[station]:\n                assignment[station] += len(passenger)\n            if assignment[station] < 0:\n                return False\n        return True\n\n    def backtrack(solution: list, remaining_input: list, input_index: int, remaining_solution_length: int) -> bool:\n        \"\"\"Backtrack function to find all possible solutions for the given problem.\n\n        Args:\n            solution (list): The current solution.\n            remaining_input (list): The remaining input.\n            input_index (int): The current index of the remaining input.\n            remaining_solution_length (int): The remaining length of the solution.\n\n        Returns:\n            bool: True if the solution is valid, False otherwise.\n        \"\"\"\n        if len(solution) == remaining_solution_length:\n            return check_solution(solution, remaining_input)\n\n        passenger_count = remaining_input[input_index][0]\n        for i in range(passenger_count + 1):\n            solution[remaining_solution_length] = i\n            if backtrack(solution, remaining_input, input_index + 1, remaining_solution_length + 1):\n                return True\n        return False\n\n    capacity, stations = map(int, stdin.readline().split())\n    solution = [0] * stations\n    result = \"possible\"\n    for _ in range(stations):\n        l, r, d = map(int, stdin.readline().split())\n        if l!= 0:\n            result = \"impossible\"\n        for i in range(l):\n            solution[i] = -1\n        for i in range(l, r + 1):\n            solution[i] = d\n    if is_possible(solution, [[0] + list(map(int, stdin.readline().split())) for _ in range(stations)]):\n        print(result)\n    else:\n        print(\"impossible\")\n    return result\n",
        "test": "assert solution(\"1 2\\n0 1 1\\n1 0 1\\n\") == \"impossible\"",
        "num_ids": 2593,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return str(n)\n\n    score = (n * (n + 1)) / 2\n    for i in range(1, k):\n        score += n * (n + 1) / 2\n        n -= 1\n\n    return str(score)\n",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    return str(max(H-N-M, 0)) + \" \" + str(max(M-N-H, 0))\n",
        "test": "assert solution(\"1 1 0\\n\") == \"0 0\"",
        "num_ids": 2595,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... WBBW\n   ... WBWB\n   ... BWWB\n   ... BWBW''')\n    '1'\n    >>> solution('''4\n   ... WBWB\n   ... WBBW\n   ... BWWB\n   ... BWBW''')\n    '1'\n    >>> solution('''4\n   ... WBWW\n   ... WBBW\n   ... BWWB\n   ... BWWB''')\n    '0'\n    >>> solution('''6\n   ... BWWB\n   ... WBWB\n   ... WBBW\n   ... WWBW\n   ... BWBB\n   ... BWWB''')\n    '0'\n    >>> solution('''6\n   ... WBWW\n   ... WBBW\n   ... BBWW\n   ... WWBW\n   ... BWBB\n   ... BWWB''')\n    '1'\n    \"\"\"\n    def is_valid(grid):\n        \"\"\"\n        >>> is_valid('''WBBW\n       ... WBWB\n       ... BWWB\n       ... BWBW''')\n        True\n        >>> is_valid('''WBWB\n       ... WBBW\n       ... BWWB\n       ... BWBW''')\n        True\n        >>> is_valid('''WBBW\n       ... WBWB\n       ... BWWB\n       ... BWBW''')\n        False\n        >>> is_valid('''WBWW\n       ... WBBW\n       ... BWWB\n       ... BWWB''')\n        False\n        >>> is_valid('''WBBW\n       ... WBWB\n       ... BWWB\n       ... BBWW''')\n        False\n        >>> is_valid('''WBBW\n       ... WBWB\n       ... BWWB\n       ... BWBB''')\n        False\n        \"\"\"\n        for row in grid:\n            # check if any row contains more black than white\n            if row.count('B') > row.count('W'):\n                return False\n        for i in range(len(grid)):\n            # check if any column contains more black than white\n            if grid[0][i]!= grid[i][0]:\n                return False\n        return True\n\n    def check_valid(grid, is_valid):\n        \"\"\"\n        >>> grid = [row.strip() for row in '''WBBW\n       ... WBWB\n       ... BWWB\n       ... BWBW'''.strip().split('\\n')]\n        >>> check_valid(grid, is_valid)\n        True\n        >>> grid = [row.strip() for row in '''WBWB\n       ... WBBW\n       ... BWWB\n       ... BWBW'''.strip().split('\\n')]\n        >>> check_valid(grid, is_valid)\n        False\n        \"\"\"\n        for row in range(len(grid)):\n            # check if any row contains more black than white\n            if grid[row].count('B') > grid[row].count('W'):\n                return False\n        for i in range(len(grid)):\n            # check if any column contains more black than white\n            if grid[0][i]!= grid[i][0]:\n                return False\n        return True\n\n    if not is_valid(stdin):\n        return '0'\n    return '1'\n",
        "test": "assert solution('4\\nWBWB\\nBWWB\\nBWBW') == '0'",
        "num_ids": 4428,
        "indeed": false
    },
    {
        "number": 4750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()",
        "num_ids": 2897,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1, 2\") == True",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return [0, 1]\n    nums = [2, 7, 11, 15]\n    target = 9\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i!= j:\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n",
        "test": "assert solution([2, 7, 11, 15]) == [0, 1]",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    diags = []\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            diags.append(Diagonal(i, j))\n    return sum(1 for i in range(0, len(diags), 2) for j in range(i + 1, len(diags), 2) if diags[i].intersects(diags[j]))\n\nclass Diagonal:\n    def __init__(self, i, j):\n        self.i = i\n        self.j = j\n\n    def __str__(self):\n        return f\"({self.i}, {self.j})\"\n\n    def intersects(self, other):\n        return (self.j - other.i) * (self.i - other.j) > 0",
        "test": "assert solution(\"7\") == \"0\"",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of moves required to pair the socks.\"\"\"\n    n, *socks = list(map(int, stdin.split()))\n    socks = sorted(set(socks))\n    if len(socks) == 1:\n        return 'impossible'\n    sock_diff = {a: socks.count(a) for a in socks}\n    # If there are two socks of the same type, they can be paired up.\n    if sock_diff[socks[0]] == 2:\n        return n - 1\n    # We need to move a sock of the same type to the other pile.\n    # We can swap sock 1 with sock 2, sock 2 with sock 3, or sock 3 with sock 4.\n    else:\n        for i in range(len(socks)):\n            if i == 0 and sock_diff[socks[i]] == 2:\n                return n - 2\n            elif i!= 0 and i + 1 == len(socks) and sock_diff[socks[i]] == 2:\n                return n - 1\n            elif i!= len(socks) - 1 and i + 1!= len(socks) and sock_diff[socks[i]] == 2:\n                return n - 2\n    return 'impossible'",
        "test": "assert solution('1\\n3 7') == 'impossible'",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    C, K = stdin.split()\n    C = int(C)\n    K = int(K)\n    C = round(C, -K)\n    return str(C)\n    \n",
        "test": "assert solution('184 1') == '180'",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'",
        "num_ids": 4214,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    \n    # get input\n    villagers_num, n_evenings = [int(x) for x in stdin.split('\\n')[:2]]\n    evenings = stdin.split('\\n')[2:]\n    \n    # create dict to store villagers\n    villagers = {}\n    for i in range(1, villagers_num + 1):\n        villagers[i] = set()\n    \n    # loop through each evening\n    for e in range(n_evenings):\n        # get number of people and songs\n        n_people, n_songs = [int(x) for x in evenings[e].split(' ')[:2]]\n        \n        # loop through each song\n        for _ in range(n_songs):\n            s = evenings[e].split(' ')[2 + _ * 2]\n            # add song to list for each person\n            for i in range(n_people):\n                villagers[int(s)].add(i + 1)\n    \n    # find people who know all songs\n    result = []\n    for k, v in villagers.items():\n        if not v:\n            result.append(k)\n        elif len(v) == villagers_num:\n            result.append(k)\n            \n    # sort result in ascending order\n    result.sort()\n    \n    return '\\n'.join(str(x) for x in result)\n",
        "test": "assert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"",
        "num_ids": 3058,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    eye = list(stdin)\n    eye = [int(i) for i in eye]\n    a = eye[0]\n    b = eye[1]\n    c = eye[2]\n    count = 0\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i == 0 or j == 0 or k == 0:\n                    count += 1\n                elif i + j + k == a:\n                    count += 1\n    return count\n",
        "test": "assert solution('2 2 2') == '8'",
        "num_ids": 2952,
        "indeed": false
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the player's slugging percentage as a real number, accurate to within an absolute or relative error of $10^{-3}$.\n    '''\n    # The player's number of total hits\n    num_hits = int(stdin.split()[0])\n\n    # The player's number of hits\n    hits = [int(hit) for hit in stdin.split()[1].split(' ')]\n\n    # The player's number of walks\n    num_walks = hits.count(-1)\n\n    # The player's number of total at-bats\n    num_at_bats = num_hits - num_walks\n\n    # The player's slugging percentage\n    slg_percentage = sum(hits) / num_at_bats\n\n    # The absolute error (e.g. the absolute difference between the two numbers)\n    absolute_error = 10 ** -3\n\n    # The relative error (e.g. the relative difference between the two numbers)\n    relative_error = abs(slg_percentage -.333) /.333\n\n    # The answer is the slugging percentage rounded to the absolute error\n    return f'{slg_percentage:.3f}' if absolute_error <= relative_error else f'{slg_percentage:.3f}' +'' + 'error'\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 2599,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    primes = set(range(2, n))\n    p = 2\n    while p * p <= n:\n        if p in primes:\n            for i in range(p * p, n + 1, p):\n                primes.discard(i)\n        p += 1\n\n    return sorted(list(primes)[k - 1])[0]\n",
        "test": "assert solution('15 12') == '7'",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    L, H = [int(x) for x in stdin.split()]\n    return sum(1 for i in range(L, H + 1) if len(set(str(i))) == 6 and all(i % int(k) == 0 for k in str(i)))\n",
        "test": "assert solution('198765 198769') == 0",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    return str(1 - pow(1 - 1 / n, n - 1))",
        "test": "assert solution('2\\n') == '0.5'",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    target_score = int(stdin)\n    if target_score == 180:\n        return \"triple 20\\n\" \\\n               \"triple 20\\n\" \\\n               \"triple 20\"\n    elif target_score > 180:\n        return \"impossible\"\n    else:\n        for i in range(1, 20):\n            for j in range(1, 20):\n                for k in range(1, 20):\n                    if i + 2 * j + 3 * k == target_score:\n                        return \"double \" + str(j) + \"\\n\" \\\n                               \"single \" + str(i) + \"\\n\" \\\n                               \"triple \" + str(k)\n    return \"impossible\"\n",
        "test": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'",
        "num_ids": 1893,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum difference between the number of sourness and bitterness.\n    >>> solution(\"3 10\\\\n1 2\\\\n1 3\")\n    '1'\n    \"\"\"\n    sourness = 0\n    bitterness = 0\n    for line in stdin.split('\\n'):\n        if line:\n            sourness += int(line.split()[0])\n            bitterness += int(line.split()[1])\n    return f\"{abs(sourness - bitterness)}\"\n",
        "test": "assert solution('3 10') == '7'",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    def process_line(line: str) -> str:\n        words = line.strip().split(' ')\n        if words[0]!= 'Simon':\n            return ''\n        if'says' in words:\n            words = words[words.index('says') + 1:]\n        return''.join(words)\n\n    def process(stdin: str) -> str:\n        lines = stdin.split('\\n')\n        results = []\n        for line in lines:\n            line = process_line(line)\n            if line:\n                results.append(line)\n        return '\\n'.join(results)\n\n    return process(stdin)\n",
        "test": "assert solution('1\\nSimon says smile.\\n') =='smile.'",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    val = stdin.split(\" \")\n    res = 0\n    for i in range(8):\n        val[i] = int(val[i])\n        if (val[i] >= 3 and val[i] % 3 == 1):\n            res = res + 1\n        if (val[i] >= 7 and val[i] % 7 == 1):\n            res = res + 1\n        if (val[i] >= 11 and val[i] % 11 == 1):\n            res = res + 1\n        if (val[i] >= 13 and val[i] % 13 == 1):\n            res = res + 1\n        if (val[i] >= 17 and val[i] % 17 == 1):\n            res = res + 1\n        if (val[i] >= 19 and val[i] % 19 == 1):\n            res = res + 1\n    return str(res)\n",
        "test": "assert solution('0 0 4 6 10 12 16 18') == '5'",
        "num_ids": 5305,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    S, n, m = stdin.split(\"\\n\")[:-1]\n    n, m = int(n), int(m)\n    dna = [S[i : i + m] for i in range(0, n * m, m)]\n    dna_set = set(dna)\n    # A map that maps a DNA to its number of sequences.\n    seq_count = {dna: dna.count(\"A\") + dna.count(\"T\") + dna.count(\"G\") + dna.count(\"C\") for dna in dna_set}\n    # A map that maps a DNA to its number of nucleotides.\n    nucleotides = {dna: dna.count(\"A\") + dna.count(\"T\") + dna.count(\"G\") + dna.count(\"C\") for dna in dna_set}\n    # A map that maps a DNA to its number of sequences.\n    count = {dna: dna.count(\"A\") + dna.count(\"T\") + dna.count(\"G\") + dna.count(\"C\") for dna in dna_set}\n    # We need to initialize the graph to start with.\n    graph = {}\n    # We need to build the graph.\n    for dna in dna_set:\n        graph[dna] = {}\n        for dna_ in dna_set:\n            graph[dna][dna_] = 0\n    # We need to add edges to the graph.\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Comparing the ith and the jth DNA.\n            for k in range(m):\n                if dna[i][k]!= dna[j][k]:\n                    graph[dna[i]][dna[j]] += 1\n                    graph[dna[j]][dna[i]] += 1\n\n    # We need to find the answer.\n    minimum_unlikeliness = {}\n    # We need to search the tree.\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            # We need to initialize the node.\n            node = str(i) + \"-\" + str(j)\n            minimum_unlikeliness[node] = n * m - nucleotides[dna[i]]\n            for k in range(n):\n                if k == j:\n                    continue\n                # Comparing the ith and the jth DNA.\n                for l in range(m):\n                    if dna[k][l] == \"-\" and dna[i][l]!= dna[j][l]:\n                        # Add 1 to the edge.\n                        minimum_unlikeliness[node] += 1\n                    elif dna[k][l]!= dna[i][l] and dna[k][l]!= dna[j][l]:\n                        # Add 1 to the edge.\n                        minimum_unlikeliness[node] += 1\n            # We need to update the node.\n            if minimum_unlikeliness[node] < minimum_unlikeliness[str(i) + \"-\" + str(j)]:\n                minimum_unlikeliness[node] = minimum_unlikeliness[str(i) + \"-\" + str(j)]\n                node = str(i) + \"-\" + str(j)\n    # We need to find the minimum.\n    minimum_unlikeliness = sorted(minimum_unlikeliness.values())\n    return str(minimum_unlikeliness[0])\n",
        "test": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"",
        "num_ids": 4420,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(0,len(stdin)):\n        for j in range(i+1,len(stdin)+1):\n            if len(set(stdin[i:j]))==1:\n                return stdin[i:j]\n    return -1\n",
        "test": "assert solution(\"a\") == \"a\"",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('20 100\\n')\n    'Dr. Chaz will have 80 pieces of chicken left over!'\n    >>> solution('20 101\\n')\n    'Dr. Chaz needs 1 more piece of chicken!'\n    \"\"\"\n    people, chicken = stdin.split()\n    people, chicken = int(people), int(chicken)\n    if people < chicken:\n        return f'Dr. Chaz needs {chicken - people} more piece of chicken!'\n    return f'Dr. Chaz will have {chicken - people} piece of chicken left over!'\n",
        "test": "assert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    return '-2'\n\nimport sys",
        "test": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'",
        "num_ids": 1611,
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    crossword = [list(stdin[i]) for i in range(R)]\n    words = {}\n\n    def find_word_in_crossword(word):\n        i, j = 0, 0\n        while j < len(word) and i < R:\n            if crossword[i][j] == '#':\n                i += 1\n                j = 0\n            else:\n                j += 1\n        if j == len(word):\n            return word\n        else:\n            return None\n\n    def can_insert(word, i, j):\n        k = 0\n        while k < len(word):\n            if crossword[i][j + k] == '#':\n                return False\n            if crossword[i][j + k]!= '#' and crossword[i][j + k]!= word[k]:\n                return False\n            k += 1\n        return True\n\n    def insert_word(word, i, j):\n        k = 0\n        while k < len(word):\n            crossword[i][j + k] = word[k]\n            k += 1\n\n    def remove_word(word, i, j):\n        k = 0\n        while k < len(word):\n            crossword[i][j + k] = '#'\n            k += 1\n\n    def find_words(word, i, j):\n        if len(word) < 2:\n            return\n        elif can_insert(word, i, j):\n            insert_word(word, i, j)\n            if len(word) == 2:\n                if not word in words:\n                    words[word] = 1\n            else:\n                find_words(word[1:], i, j + 1)\n        if j > 0:\n            if can_insert(word, i, j - 1):\n                remove_word(word, i, j - 1)\n                find_words(word[1:], i, j - 1)\n        if i < R - 1:\n            if can_insert(word, i + 1, j):\n                remove_word(word, i + 1, j)\n                find_words(word[1:], i + 1, j)\n        if i > 0:\n            if can_insert(word, i - 1, j):\n                remove_word(word, i - 1, j)\n                find_words(word[1:], i - 1, j)\n\n    def find_words_with_crossword(word):\n        i, j = 0, 0\n        while j < len(word) and i < R:\n            if crossword[i][j] == '#':\n                i += 1\n                j = 0\n            else:\n                j += 1\n        if j == len(word):\n            return word\n        else:\n            return None\n\n    def find_all_words():\n        for i in range(R):\n            for j in range(C):\n                word = ''\n                if crossword[i][j]!= '#':\n                    k = 0\n                    while k < len(word):\n                        if j + k < C and crossword[i][j + k]!= '#':\n                            word += crossword[i][j + k]\n                        k += 1\n                    if not word in words:\n                        words[word] = 1\n                        find_words(word, i, j)\n\n    find_words('', 0, 0)\n    words_with_crossword = {word: find_words_with_crossword(word) for word in words if len(word) >= 2}\n    words = {word: find_words(word, 0, 0) for word in words if word in words_with_crossword}\n    words = {word: words_with_crossword[word] for word in words if words_with_crossword[word] is not None}\n\n    sorted_words = sorted(words.keys())\n    return sorted_words[0]\n\n\ndef",
        "test": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"",
        "num_ids": 2927,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    def translate_route(route_str: str) -> str:\n        route_characters = []\n        translated_route = []\n        translated_route_str = ''\n        for character in route_str:\n            route_characters.append(character)\n        for character in route_characters:\n            if character == 'N':\n                translated_route.append('0')\n            elif character == 'E':\n                translated_route.append('1')\n            elif character == 'S':\n                translated_route.append('2')\n            elif character == 'W':\n                translated_route.append('3')\n            elif character == 'M':\n                translated_route.append('4')\n        translated_route_str = ''.join(translated_route)\n        return translated_route_str\n    route = stdin\n    translated_route_str = translate_route(route)\n    count = 0\n    while len(translated_route_str) > 1:\n        if len(translated_route_str) <= 10:\n            count += len(translated_route_str)\n            break\n        else:\n            translated_route_str = translate_route(translated_route_str)\n            count += 1\n    return str(count)\n",
        "test": "assert solution(\"NSEW\") == \"4\"",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split(' '))\n    ans = []\n    def calculate(n1, n2, op):\n        if op == '/':\n            if n1 == 0:\n                return False\n            if n2 == 0:\n                return False\n            else:\n                return n1 // n2\n        elif op == '*':\n            return n1 * n2\n        elif op == '+':\n            return n1 + n2\n        elif op == '-':\n            return n1 - n2\n\n    for a1 in range(0, a+1):\n        for b1 in range(0, b+1):\n            for c1 in range(0, c+1):\n                for d1 in range(0, d+1):\n                    for op1 in ['*', '+', '-', '/']:\n                        for op2 in ['*', '+', '-', '/']:\n                            for op3 in ['*', '+', '-', '/']:\n                                for op4 in ['*', '+', '-', '/']:\n                                    if calculate(calculate(a1, b1, op1),\n                                                  calculate(c1, d1, op2), op3) == calculate(a, b, op4):\n                                        ans.append(' '.join([str(a1), op1, str(b1), op2, str(c1), op3, str(d1), op4, str(a), op, str(b), op, str(c), op, str(d)]))\n    ans = [i for i in ans if i]\n    return '\\n'.join(sorted(ans, key=lambda x: (x.count(' '), x))) if ans else 'problems ahead'",
        "test": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'",
        "num_ids": 3085,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    word_a, word_b = stdin.split()\n    len_a, len_b = len(word_a), len(word_b)\n    a_map = set(word_a)\n    b_map = set(word_b)\n    common_letters = list(a_map.intersection(b_map))\n    # common_letters.sort()\n    for c in common_letters:\n        idx_a = word_a.find(c)\n        idx_b = word_b.find(c)\n        if idx_a == 0:\n            return '\\n'.join([word_b[:idx_b] + word_a[idx_a:] + '\\n'] + [word_b[idx_b:] + word_a[idx_a:]])\n    return '\\n'.join(['\\n'.join([word_b[:len_b] + word_a[len_a - idx - 1] + word_b[len_b - idx:]]) for idx in range(len_a)])\n",
        "test": "assert solution(\"BANANA PIDZAMA\") == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'",
        "num_ids": 2274,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(open('input.txt').read()) == open('output.txt').read()",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 4777,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    a, b = 0, 0\n    for i in range(1, k+1):\n        if i % 3 == 0:\n            a += 1\n        else:\n            b += 1\n    return str(a) + \" \" + str(b)\n",
        "test": "assert solution(\"1\") == \"0 1\"",
        "num_ids": 1788,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the party who won the election from the precincts and the wasted votes.\n    \"\"\"\n    # Parse the input.\n    n_districts, n_precincts = tuple(map(int, stdin.splitlines()[:2]))\n    precincts = [\n        tuple(map(int, line.split()))\n        for line in stdin.splitlines()[2:]\n    ]\n\n    # For each district determine the party which won the district and the wasted votes.\n    wasted_votes = []\n    for district in range(1, n_districts + 1):\n        # Determine who won the district, and the number of wasted votes for each party.\n        a_votes, b_votes = 0, 0\n        for precinct in precincts:\n            if precinct[0] == district:\n                if precinct[1] > precinct[2]:\n                    a_votes += precinct[1]\n                else:\n                    b_votes += precinct[2]\n\n        # Determine the party which won the district and the number of wasted votes for each party.\n        if a_votes > b_votes:\n            winning_party = 'A'\n            wasted_votes.append(a_votes - b_votes)\n        else:\n            winning_party = 'B'\n            wasted_votes.append(b_votes - a_votes)\n\n    # Determine the efficiency gap.\n    efficiency_gap = max(wasted_votes) / sum(wasted_votes)\n\n    return winning_party + '\\n' + '\\n'.join(map(str, wasted_votes)) + '\\n' + str(efficiency_gap)\n",
        "test": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"",
        "num_ids": 4534,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximal value of the given expression.\n\n    Args:\n        stdin (str): a single line containing an integer $2\\leq n\\leq 10^6$.\n        Then follow $n$ lines, the $i$th of which contains the integer $1 \\leq a_ i \\leq 100$.\n\n    Returns:\n        str: The maximal value of the given expression.\n    \"\"\"\n    # Get the input.\n    n = int(stdin)\n\n    # Find the solution.\n    solution = 0\n    for i in range(n):\n        solution += i ** 2\n\n    # Return the result.\n    return str(solution)\n",
        "test": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = sorted(stdin.split('\\n')[:N])\n    B = sorted(stdin.split('\\n')[N:])\n    T = int(stdin.split('\\n')[-1])\n    res = []\n    i = j = 0\n    while T > 0:\n        if A[i][-1] == B[j][-1]:\n            res.append(A[i])\n            res.append(B[j])\n            i += 1\n            j += 1\n            T -= 1\n        elif A[i][-1] < B[j][-1]:\n            res.append(A[i])\n            i += 1\n        else:\n            res.append(B[j])\n            j += 1\n    return ''.join(res)\n",
        "test": "assert solution('3 3\\nFFF\\nABC\\nDEF\\n2') == 'FACD'",
        "num_ids": 2034,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate(count: int, time: int, guess: str) -> str:\n        if guess == \"T\" or time > 90:\n            return str(count)\n        elif guess == \"N\":\n            return str(1 + (count - 1) % 8)\n        elif guess == \"P\":\n            return str(1 + (count + 1) % 8)\n\n    line = stdin.splitlines()\n    count = int(line[0])\n    stdin = line[1]\n    stack = []\n    for line in stdin.splitlines():\n        time, guess = line.split()\n        count = evaluate(count, int(time), guess)\n        stack.append(count)\n    return count",
        "test": "assert solution(",
        "num_ids": 3097,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            roads.append((i, j))\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = sorted(set(roads))\n    roadDict = dict()\n    for road in roads:\n        roadDict[road] = set()\n    for road in roads:\n        roadDict[road].add(1)\n    for road in roads:\n        for i in range(1, m+1):\n            if road[0] + 1 <= n and road[1] + 1 <= n:\n                newRoad = (road[0]+1, road[1]+1)\n                if newRoad not in roadDict or i not in roadDict[newRoad]:\n                    roadDict[road].add(i+1)\n            newRoad = (road[0]-1, road[1]+1)\n            if newRoad not in roadDict or i not in roadDict[newRoad]:\n                roadDict[road].add(i+1)\n            newRoad = (road[0]+1, road[1]-1)\n            if newRoad not in roadDict or i not in roadDict[newRoad]:\n                roadDict[road].add(i+1)\n            newRoad = (road[0]-1, road[1]-1)\n            if newRoad not in roadDict or i not in roadDict[newRoad]:\n                roadDict[road].add(i+1)\n    print(max([sum(x) for x in roadDict.values()]))\n    return ''\n",
        "test": "assert solution('3 5') == ''",
        "num_ids": 2043,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \n    width, height = [int(x) for x in stdin.split()]\n    height = [int(x) for x in stdin.split()]\n    \n    ladder = height[0]\n    ladder_cost = 0\n    for i in range(1, len(height)):\n        if ladder < height[i]:\n            ladder = height[i]\n            ladder_cost += ladder - height[i-1]\n        \n    return ladder_cost\n  \n",
        "test": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"",
        "num_ids": 2753,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the maximum number of megabytes Pero has spent in the first N months of using the data plan.\n    \"\"\"\n    x, n = [int(n) for n in stdin.split('\\n')[0].split()]\n    p = [int(n) for n in stdin.split('\\n')[1:] if int(n) <= x]\n    # Calculate the sum of the monthly usage\n    total = sum(p[:n])\n    for i in range(n, len(p)):\n        total += p[i] - p[i-n]\n    return total\n",
        "test": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return 'hiss' if'ss' in stdin else 'no hiss'\n",
        "test": "assert solution('amiss') == 'hiss'",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    keywords = []\n    # Write your code here\n    n = int(input())\n    for _ in range(n):\n        keywords.append(input())\n    keywords = list(set(keywords))\n    \n    similar_keywords = set()\n    for i in range(len(keywords)):\n        for j in range(i+1, len(keywords)):\n            if keywords[i] == keywords[j]:\n                similar_keywords.add(keywords[i])\n    \n    return len(similar_keywords)\n\nprint(solution(input()))\n",
        "test": "assert solution('4\\nc\\nC++\\n\\nc\\n\\n\\n\\n') == '3'",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    cards = sorted(stdin, key=lambda c: (c in 'TCG', ord(c)))\n    result = sum(c ** 2 for c in cards)\n    if len(cards) == 3:\n        result += 7\n    return str(result)\n",
        "test": "assert solution('TCGTTTC') == 21",
        "num_ids": 3050,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    direction = int(stdin.split()[0])\n    destination = int(stdin.split()[1])\n    if direction > destination:\n        return str(360 - (direction - destination))\n    else:\n        return str(destination - direction)\n",
        "test": "assert solution('315\\n45') == '90'",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    K: int = int(stdin.readline().strip())\n    KList: List[int] = list(map(int, stdin.readline().strip().split()))\n    if len(set(KList))!= len(KList):\n        print(1)\n    else:\n        print(K)\n",
        "test": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Count the number of black and white stones\n    \"\"\"\n    stones = stdin\n    white = 0\n    black = 0\n    for i in stones:\n        if i == \"B\":\n            black += 1\n        elif i == \"W\":\n            white += 1\n    if white == 0 or black == 0:\n        return \"0\"\n    if black % 2 == 1 and white % 2 == 1:\n        return \"1\"\n    else:\n        return \"0\"\n",
        "test": "assert solution('WWWWBBW') == '0'",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = list(map(int, stdin.strip().split()))\n    a = (s[0]+s[2]+s[4])*(s[1]+s[3]+s[5])\n    b = (s[0]+s[1]+s[3]+s[4])*(s[2]+s[5])\n    return str(max(a,b))",
        "test": "assert solution('1 2 1 1') == '1.299038105676658'",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('robert') == 'robert'",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 4793,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    v_1, v_2, v_ship = list(map(int, stdin.split()))\n    # if v_1 == v_2 or v_1 == v_ship or v_2 == v_ship:\n    #     return 'Impossible'\n    if v_1 > v_ship or v_2 > v_ship:\n        return 'Impossible'\n    n_1 = v_ship // v_1\n    n_2 = v_ship // v_2\n    n_1_1 = n_1 + (v_ship % v_1 == 0)\n    n_2_1 = n_2 + (v_ship % v_2 == 0)\n    if n_1_1 <= n_2_1:\n        return f'{n_1_1} {n_2_1}'\n    else:\n        return 'Impossible'",
        "test": "assert solution('1000 900 7') == 'Impossible'",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solution for the given input, input is taken from stdin.\"\n    [n, m] = [int(x) for x in stdin.split(' ')]\n    grid = [list(x) for x in stdin.split('\\n')]\n    grid = [list(x[:n]) for x in grid]\n\n    solutions = []\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c]!= 'X':\n                continue\n\n            result = 0\n            # vertical\n            for rr in range(r, n):\n                if grid[rr][c] == 'X':\n                    result += 1\n                    break\n                elif grid[rr][c] == '#':\n                    break\n            # horizontal\n            for cc in range(c, m):\n                if grid[r][cc] == 'X':\n                    result += 1\n                    break\n                elif grid[r][cc] == '#':\n                    break\n            # right diagonal\n            for rr in range(r, n):\n                if grid[rr][cc] == 'X':\n                    result += 1\n                    break\n                elif grid[rr][cc] == '#':\n                    break\n            # left diagonal\n            for rr in range(r, n):\n                if grid[rr][c] == 'X':\n                    result += 1\n                    break\n                elif grid[rr][c] == '#':\n                    break\n            solutions.append(result)\n    return \"\\n\".join([str(x) for x in solutions])\n",
        "test": "assert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'",
        "num_ids": 4204,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = [int(stdin) for i in range(N)]\n    s = 0\n    for i in range(N):\n        s += (P[i] ** (i + 1))\n    return str(s)",
        "test": "assert solution(\"\\n1\") == \"1\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    orange, apple, pineapple = list(map(int, stdin.split()))\n    total = orange // 2\n    left = orange % 2\n    total += apple // 3\n    left += apple % 3\n    total += pineapple // 2\n    left += pineapple % 2\n    return f\"{left / total:.6f} {orange / total:.6f} {apple / total:.6f}\"\n",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = list(stdin)\n    new_list = []\n    for i in range(len(stdin_list)):\n        if stdin_list[i] == \"<\":\n            if len(new_list) == 0:\n                pass\n            else:\n                new_list.pop()\n        else:\n            new_list.append(stdin_list[i])\n    return ''.join(new_list)\n",
        "test": "assert solution(\"foss<<rritun\") == \"forritun\"",
        "num_ids": 2399,
        "indeed": true
    },
    {
        "number": 4798,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.split()\n    stdin = stdin[0]\n    first = True\n    for i in range(len(stdin)):\n        if stdin[i] == '-':\n            first = True\n        else:\n            if first:\n                first = False\n                stdin = stdin[:i] + stdin[i].upper() + stdin[i + 1:]\n    return stdin",
        "test": "assert solution('KMP') == 'KMP'",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    card_types = [\"Province\", \"Duchy\", \"Estate\"]\n    card_values = [6, 3, 1]\n    buying_power = sum(\n        [int(i) * card_values[card_types.index(j)] for i, j in zip(stdin.split(\" \"), card_types)]\n    )\n\n    if buying_power >= 6:\n        return \"Province or Gold\"\n    elif buying_power >= 3:\n        return \"Duchy or Gold\"\n    else:\n        return \"Estate or Gold\"\n",
        "test": "assert solution('2 1 0') == 'Province or Gold'",
        "num_ids": 2183,
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    d, s = [int(n) for n in stdin.split()]\n    k -= 1\n    s -= d\n    n -= k\n    s /= n\n    if s > 100:\n        print(\"impossible\")\n    else:\n        print(\"%.6f\" % s)\n",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\"",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = [int(item) for item in stdin.split('\\n')[0].split(' ')]\n    L = [A[0]]\n    for i in range(1, len(A)):\n        if A[i] > L[-1]:\n            L.append(A[i])\n        else:\n            j = 0\n            while j < len(L) and A[i] > L[j]:\n                j += 1\n            L[j] = A[i]\n    print(len(L))\n    print(' '.join(map(str, L)))\n    return ''\n\n\ndef",
        "test": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 4802,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    h = int(stdin.split(' ')[0])\n    m = int(stdin.split(' ')[1])\n    s = m - 45\n    if s < 0:\n        h -= 1\n        s = 60 + s\n    if h < 0:\n        h = 23\n    return f\"{h} {s}\"\n",
        "test": "assert solution(\"10 10\") == \"9 25\"",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 4803,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0.36788\")\n    '1.414214'\n    >>> solution(\"2.718281\")\n    '1.414213'\n    >>> solution(\"2.718281\")\n    '1.414213'\n    \"\"\"\n    n = float(stdin)\n    return str(1.0 if n == 1 else (1.0 if n < 1 else 1.0 + 1.0 / n))\n",
        "test": "assert solution(\"1.0\") == \"1.0\"",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # result = []\n    # for i in range(1, n + 1):\n    #     for j in range(i, n + 1):\n    #         if i + j == n and i * j == n:\n    #             print(str(i) + ',' + str(j))\n    #             result.append(str(i) + ',' + str(j))\n    # return '\\n'.join(result)\n    result = []\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if i + j == n and i * j == n:\n                if j - i == 2:\n                    print(str(j) + ',' + str(i))\n                    result.append(str(j) + ',' + str(i))\n                elif i - j == 2:\n                    print(str(i) + ',' + str(j))\n                    result.append(str(i) + ',' + str(j))\n    return '\\n'.join(result)\n",
        "test": "assert solution(\"50\") == \"50\"",
        "num_ids": 3734,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin.split())) == len(stdin.split()) else 'no'\n",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 4806,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    mech = stdin\n    move_index = 0\n    while move_index < len(mech):\n        if mech[move_index] == \"R\":\n            mech = mech[:move_index] + \"S\" + mech[move_index + 1:]\n        elif mech[move_index] == \"B\":\n            mech = mech[:move_index] + \"K\" + mech[move_index + 1:]\n        elif mech[move_index] == \"L\":\n            mech = mech[:move_index] + \"H\" + mech[move_index + 1:]\n        else:\n            mech = mech[:move_index] + \"C\" + mech[move_index + 1:]\n        move_index += 1\n\n    return mech\n",
        "test": "assert solution('RRBBBLLR') == 'SSKKKHHS'",
        "num_ids": 4564,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split('\\n')[0].split(' '))\n    print(*[i for i in range(1, n + 1) if (i % x == 0 and i % y == 0) or i % x == 0 or i % y == 0])\n    return ''",
        "test": "assert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 4808,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    hist = list(map(int, stdin.split('\\n')[1].split()))\n    answer = 0\n    for i in range(n - m + 1):\n        if hist[i] > m:\n            answer += 1\n    return f\"It hadn't snowed this early in {answer} years!\" if answer else f\"It hadn't snowed this early in 0 years!\"\n",
        "test": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"",
        "num_ids": 3153,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    p = 1\n    while n >= 2:\n        p += 1\n        if p > n:\n            p = 1\n        n -= 1\n    return str(p)\n",
        "test": "assert solution('10 2') == '2'",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 2599,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    K,N=map(int,stdin.split())\n    if N==1:\n        return \"1 {}\".format(K)\n    elif N==2:\n        return \"2 {}\".format(K)\n    ans=[]\n    while K%2==0:\n        K//=2\n        ans.append(0)\n    ans.append(1)\n    while K>0:\n        if K%4==0:\n            K//=4\n            ans[-1]+=1\n        else:\n            ans[-1]+=1\n            K-=2\n    return \"{} {}\".format(*ans)\n",
        "test": "assert solution(test_input_0) == test_output_0",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 2559,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'WIN' if the game is won, else 'LOSE'\"\"\"\n\n    word = stdin[:stdin.find('\\n')]\n    permutation = stdin[stdin.find('\\n') + 1:]\n\n    return 'WIN' if sorted(word) == sorted(permutation) else 'LOSE'\n",
        "test": "assert solution('BANANA') == 'LOSE'",
        "num_ids": 2269,
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return \"NEITHER\" or \"INCREASING\" or \"DECREASING\"",
        "test": "assert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n') == 'NEITHER'",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    lines = stdin.splitlines()\n    n = int(lines[0].split()[0])\n    p = int(lines[0].split()[1])\n    names = [''] * n\n    scores = [0] * n\n    for i in range(n):\n        names[i] = lines[i+1].split()[0]\n        scores[i] = lines[i+1].split()[1]\n    scores = list(map(int, scores))\n    scores.sort(reverse=True)\n    if max(scores) < p:\n        return 'No winner!'\n    else:\n        winners = []\n        for i in range(n):\n            if scores[i] >= p:\n                winners.append(names[i])\n        return ', '.join(winners) +'wins!'\n    pass\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 2163,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the smallest number larger than `X` in the same digits as `X`.\"\"\"\n    X = stdin\n    if len(X) == 1:\n        return str(int(X) + 1)\n    return '0'\n",
        "test": "assert solution('4') == '5'",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n, m = map(int, line.split())\n    tasks = list(map(int, stdin.readline().split()))\n    line = stdin.readline()\n    intervals = list(map(int, stdin.readline().split()))\n    taskset = set()\n    for i in range(m):\n        for j in range(intervals[i], intervals[i] + intervals[i + 1]):\n            taskset.add(j)\n    print(taskset)\n    maxn = 0\n    for i in range(n):\n        if tasks[i] in taskset:\n            maxn += 1\n    return maxn\n\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"",
        "num_ids": 3844,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    def distict_values(stdin: str) -> int:\n        distict_values = set()\n        for line in stdin.split('\\n'):\n            try:\n                distict_values.add(int(line))\n            except ValueError:\n                continue\n        return len(distict_values)\n\n    return str(distict_values(stdin))\n",
        "test": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'",
        "num_ids": 1656,
        "indeed": false
    },
    {
        "number": 4820,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    N, b = list(map(int, stdin.split(' ')))\n    if N < (b+1):\n        return \"no\"\n    return \"yes\"\n",
        "test": "assert solution(\"4 3\") == \"yes\"",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    suits = [None] * 4\n    for i in range(4):\n        suits[i] = stdin[i::4]\n    suits = [i.split() for i in suits]\n    # print(suits)\n    count = [0] * 4\n    # print(count)\n    for card in suits[0]:\n        if card[0] == 'P':\n            count[0] += 1\n        elif card[0] == 'K':\n            count[1] += 1\n        elif card[0] == 'H':\n            count[2] += 1\n        elif card[0] == 'T':\n            count[3] += 1\n    # print(count)\n    for card in suits[1]:\n        if card[0] == 'P':\n            count[0] += 1\n        elif card[0] == 'K':\n            count[1] += 1\n        elif card[0] == 'H':\n            count[2] += 1\n        elif card[0] == 'T':\n            count[3] += 1\n    # print(count)\n    for card in suits[2]:\n        if card[0] == 'P':\n            count[0] += 1\n        elif card[0] == 'K':\n            count[1] += 1\n        elif card[0] == 'H':\n            count[2] += 1\n        elif card[0] == 'T':\n            count[3] += 1\n    # print(count)\n    for card in suits[3]:\n        if card[0] == 'P':\n            count[0] += 1\n        elif card[0] == 'K':\n            count[1] += 1\n        elif card[0] == 'H':\n            count[2] += 1\n        elif card[0] == 'T':\n            count[3] += 1\n    # print(count)\n    if count == [13, 13, 13, 13]:\n        return \"GRESKA\"\n    return''.join([str(i) for i in count])\n\n\ndef",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\"",
        "num_ids": 2734,
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution for the 'Window' problem.\n    This solution is not optimized for the 'Window' problem.\n\n    Args:\n        stdin (str): input data\n\n    Returns:\n        str: the solution for the 'Window' problem\n    \"\"\"\n    max_kill = 0\n\n    # read the input\n    rows = stdin.splitlines()\n    rows = [r.strip() for r in rows]\n\n    # parse the input\n    r, s, k = map(int, rows[0].split())\n    assert len(rows) == r\n\n    # get the start positions for the rays\n    positions = []\n    for i in range(r):\n        for j in range(s):\n            if rows[i][j] == \"*\":\n                positions.append((i, j))\n    assert len(positions) == k\n\n    # for each starting position, check whether it is inside the window\n    for i in range(len(positions)):\n        pos_i, pos_j = positions[i]\n        ray_dir_x, ray_dir_y = pos_i - pos_j, pos_j - pos_i\n        ray_x, ray_y = ray_dir_x, ray_dir_y\n        ray_len = k - 1\n        while ray_x >= 0 and ray_x < r:\n            while ray_y >= 0 and ray_y < s:\n                if rows[ray_x][ray_y] == \"*\":\n                    max_kill += 1\n                ray_y += ray_dir_y\n                ray_x += ray_dir_x\n            ray_x += ray_dir_x\n            ray_y = ray_dir_y\n\n    # print the solution\n    print(max_kill)\n\n    # return the solution\n    return str(max_kill)\n",
        "test": "assert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'",
        "num_ids": 6282,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    card = stdin.split()\n    card_count = {'A': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, 'T': 0, 'J': 0, 'Q': 0, 'K': 0}\n    for i in range(len(card)):\n        card[i] = card[i][0]\n        card_count[card[i][0]] += 1\n    return max(card_count.values())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution(\"2C 4D 4H 2D 2H\") == 3",
        "num_ids": 3736,
        "indeed": false
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 5\n   ... 2 1 1 1 0 1\n   ... ''')\n    '5'\n    >>> solution('''5 1\n   ... 0 0 0 0\n   ... ''')\n    '7'\n    \"\"\"\n    c, p = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    s = [sum(h[:i]) for i in range(1, c + 1)]\n    return str(p - 1) if p <= 7 - s.count(0) else '0'\n",
        "test": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"",
        "num_ids": 3726,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    table = {\n        'A': '@',\n        'a': '@',\n        'B': '8',\n        'b': '8',\n        'C': '(',\n        'c': '(',\n        'D': '|)',\n        'd': '|)',\n        'E': '3',\n        'e': '3',\n        'F': '#',\n        'f': '#',\n        'G': '6',\n        'g': '6',\n        'H': '[-]',\n        'h': '[-]',\n        'I': '1',\n        'i': '1',\n        'J': '[]\\[]',\n        'j': '[]\\[]',\n        'K': '|<',\n        'k': '|<',\n        'L': '1',\n        'l': '1',\n        'M': '|\\/|',\n       'm': '|\\/|',\n        'N': '[]\\/[]',\n        'n': '[]\\/[]',\n        'O': '0',\n        'o': '0',\n        'P': '|D',\n        'p': '|D',\n        'Q': '()',\n        'q': '()',\n        'R': '|Z',\n        'r': '|Z',\n        'S': '$',\n       's': '$',\n        'T': '\\'][\\'',\n        't': '\\'][\\'',\n        'U': '|_|',\n        'u': '|_|',\n        'V': '\\/',\n        'v': '\\/',\n        'W': '\\/\\/',\n        'w': '\\/\\/',\n        'X': '}{',\n        'x': '}{',\n        'Y': '`/',\n        'y': '`/',\n        'Z': '2',\n        'z': '2',\n    }\n    return ''.join(map(lambda x: table.get(x, x), stdin))\n\nimport unittest\nclass TestMain(unittest.TestCase):\n    def setUp(self):\n        pass\n\n    def test_1(self):\n        self.assertEqual(solution('All your base are belong to us.'), '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+\n                                                                    '|_|$.\\n')",
        "test": "assert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"",
        "num_ids": 6449,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'Alice' if int(stdin) % 2 == 1 else 'Bob'\n",
        "test": "assert solution('1') == 'Alice'",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 4827,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    sentence =''.join(words)\n    words = sentence.split(' ')\n    numbers = []\n    for word in words:\n        if word.isdigit():\n            numbers.append(word)\n    s = ''\n    for i, word in enumerate(words):\n        if i == 0:\n            s = s + word\n        elif word.isdigit():\n            s = s +'' + numbers[i-1]\n        elif word[0] == '$' and word[1].isdigit():\n            s = s +'' + numbers[int(word[1])-1] + word[1]\n        elif word.isdigit() and word[-1] == '$' and word[-2].isdigit():\n            s = s +'' + word + word[-1]\n        elif word[0] == '$' and word[-1] == '$':\n            s = s +'' + word\n        elif word.isdigit():\n            s = s +'' + word\n        else:\n            s = s +'' + word\n    return s\n",
        "test": "assert solution(\"threehundrednineteen\") == \"threehundrednineteen\"",
        "num_ids": 3691,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the smallest number of NOP instructions needed to adapt the\n    program for the new processor.\n    '''\n    memory = stdin.split()\n    ind = 0\n    while ind < len(memory):\n        if ind % 4:\n            memory.insert(ind, 'NOP')\n        ind += 1\n    return str(memory.count('NOP'))\n",
        "test": "assert solution(\"Abcd\") == \"0\"",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    moose = stdin.split(\" \")\n    print(moose)\n    left = int(moose[0])\n    right = int(moose[1])\n    print(left, right)\n    \n    sum_left = 0\n    sum_right = 0\n    for i in range(left):\n        sum_left += i + 1\n        \n    for i in range(right):\n        sum_right += i + 1\n    print(sum_left, sum_right)\n    \n    if sum_left == sum_right:\n        print(\"Even\", sum_left)\n        return \"Even {0}\".format(sum_left)\n    if sum_left > sum_right:\n        print(\"Odd\", sum_left)\n        return \"Odd {0}\".format(sum_left)\n    if sum_left < sum_right:\n        print(\"Odd\", sum_right)\n        return \"Odd {0}\".format(sum_right)\n    return \"Not a moose\"\n    \n",
        "test": "assert solution('3 3') == 'Even 6'",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    letters = stdin.strip()\n    letters = [letter for letter in letters]\n    count = len(letters)\n    padding = int((count - 1) / 2)\n    interleaved = []\n    for i in range(count):\n        interleaved.append('..' * padding + '.#' * (i + 1) + '#' * padding + '.' * (count - (i + 1)))\n    interleaved = ''.join(interleaved)\n    return interleaved\n",
        "test": "assert solution('') == ''",
        "num_ids": 3894,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    print(R)\n    return str(math.pi * R**2)\n",
        "test": "assert solution('21') == '1385.442360'",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = [int(x) for x in stdin.split()]\n    return str(sum(a))\n",
        "test": "assert solution(\"3\\n1 -2 3\") == \"2\"",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    N, *durations = stdin.split()\n    return str(sum(max(0, int(duration) - 1) for duration in durations))\n    \n",
        "test": "assert solution('1 2') == '1'",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\")!= \"NOT POSSIBLE\"",
        "num_ids": 4233,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.read().split('\\n')\n    n, cap = [int(num) for num in data[0].split()]\n    weights = [int(num) for num in data[1].split()]\n\n    # get all possible fruits\n    all_fruits = []\n    for i in range(len(weights)):\n        for j in range(len(weights)):\n            if i!= j:\n                all_fruits.append([i, j])\n\n    # get all the possible combinations\n    possible_combinations = []\n    for i in range(len(all_fruits)):\n        for j in range(i, len(all_fruits)):\n            possible_combinations.append(all_fruits[i] + all_fruits[j])\n\n    # go through each possible combination\n    max_sum = 0\n    for i in possible_combinations:\n        sum = 0\n        for j in i:\n            sum += weights[j]\n            if sum > cap:\n                break\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n",
        "test": "assert solution('''5 5",
        "num_ids": 2401,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15'",
        "num_ids": 2126,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    times = stdin.splitlines()\n\n    current_time = 0\n\n    for time in times:\n        current_time += int(time)\n\n    return'still running' if current_time > 0 else str(current_time)\n",
        "test": "assert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum fraction of helium that can be added to each balloon such that\n    the balloons do not explode\"\"\"\n    return \"impossible\"\n",
        "test": "assert solution(\"4\\n1 1 3 2\") == \"impossible\"",
        "num_ids": 2319,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[0].split()\n    g = [int(n) for n in a]\n    stdin = stdin.split('\\n')[1]\n    e = [int(n) for n in stdin.split()]\n\n    if sum(g) > sum(e):\n        return 'Gunnar'\n    elif sum(g) < sum(e):\n        return 'Emma'\n    else:\n        return 'Tie'\n",
        "test": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'",
        "num_ids": 2214,
        "indeed": true
    },
    {
        "number": 4841,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    mumble = stdin.split('\\n')[1].split(' ')\n    mumble = mumble[1:] if mumble[0] =='mumble' else mumble\n    if len(a) == len(mumble):\n        return'makes sense' if sum(a) == sum(map(int, mumble)) else'something is fishy'\n    return'something is fishy'",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the output in a string using the specified standard input\"\"\"\n    # Extracts the input and validates the length of the input\n    n, *args = [int(arg) for arg in stdin.split(' ')]\n    # Validates the input\n    if not (2 <= n <= 10):\n        raise ValueError(\"Input is outside the permitted range. Must be an int between 2 and 10.\")\n    if not (len(args) == n):\n        raise ValueError(\"Input does not match the number of args.\")\n    for arg in args:\n        if not (-2000000 <= arg <= 2000000):\n            raise ValueError(\"Input is outside the permitted range. Must be an int between -2e6 and 2e6\")\n\n    # Initializes the diffs and seqs\n    diffs = [args[i+1] - args[i] for i in range(len(args) - 1)]\n    seqs = [args[i] for i in range(len(args))]\n    # Initializes the counter for the degree and the actual value of the degree\n    degree = 1\n    value = 0\n    # Initializes the index of the next input to be added\n    next_val = 0\n\n    # Repeats the process until all input values are used\n    while next_val < n:\n        # Initializes the new values as the current values, except that the input to be added is removed\n        new_args = args[:]\n        del new_args[next_val]\n        # Calculates the new differences based on the new values\n        new_diffs = [new_args[i+1] - new_args[i] for i in range(len(new_args) - 1)]\n        # Calculates the difference in the difference between the input to be added and the current list of differences\n        diff_diff = [diffs[i] - new_diffs[i] for i in range(len(diffs))]\n        # Finds the minimum of the absolute value of each difference in the difference difference\n        abs_diff_diff = [abs(dd) for dd in diff_diff]\n        # Calculates the new degree and value based on the minimum difference and the degree\n        min_diff = min(abs_diff_diff)\n        index_min = abs_diff_diff.index(min_diff)\n        new_degree = index_min + 1\n        new_value = args[index_min]\n        # Sets the new degree and value to the current degree and value if they are lower than the current degree and value\n        if new_degree < degree:\n            degree = new_degree\n            value = new_value\n        # Adds the input to be added to the new values\n        new_args.append(value)\n        # Calculates the new difference\n        new_diffs = [new_args[i+1] - new_args[i] for i in range(len(new_args) - 1)]\n        # Calculates the difference between the input to be added and the new list of differences\n        diff_diff = [diffs[i] - new_diffs[i] for i in range(len(diffs))]\n        # Finds the minimum difference\n        min_diff = min(diff_diff)\n        # Sets the new degree and value to the current degree and value if they are lower than the current degree and value\n        if min_diff < 0:\n            degree = new_degree\n            value = new_value\n        # Adds the next value\n        next_val += 1\n    # Returns the degree and value\n    return str(degree) +'' + str(value)\n",
        "test": "assert solution(\"4 9 25 49 81\") == '2 121'",
        "num_ids": 4943,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the \"eight queens\" puzzle.\n\n    Args:\n        stdin (str): Input given to the program.\n\n    Returns:\n        str: Output to be written to stdout.\n    \"\"\"\n    # Attempt to parse the input into a list of integers.\n    try:\n        n = int(stdin)\n        # For each queen we will store her position in the form of a tuple.\n        queens = [\n            (int(queen[0]), int(queen[1])) for queen in stdin.split()\n        ]\n    except:\n        return \"INCORRECT\"\n\n    # If the input is incorrect, then we can simply return \"INCORRECT\"\n    if len(queens)!= n:\n        return \"INCORRECT\"\n\n    # Iterate over the queens and see if they can attack each other.\n    for i in range(n):\n        for j in range(i + 1, n):\n            # If there is an attacking queen, then this is not a valid\n            # solution.\n            if queens[i] == queens[j]:\n                return \"INCORRECT\"\n            if abs(queens[i][0] - queens[j][0]) == abs(\n                queens[i][1] - queens[j][1]\n            ):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n",
        "test": "assert solution('4\\n1 1\\n0 0\\n3 2\\n') == 'INCORRECT'",
        "num_ids": 3089,
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 11'",
        "num_ids": 2453,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    list = stdin.split()\n    d = int(list[0])\n    m = int(list[1])\n    l = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    return l[(d+int(d/4-d/100+d/400+13*m/12))%7]\n",
        "test": "assert solution('12 6') == 'Monday'",
        "num_ids": 3334,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns: The solution for the exercise.\"\"\"\n    # split the input into two parts: L and D\n    L = int(stdin.split('\\n')[0])\n    D = int(stdin.split('\\n')[1])\n    X = int(stdin.split('\\n')[2])\n    # create a list of all numbers from L to D\n    numbers = list(range(L, D + 1))\n    # create a list of numbers with X sum of digits\n    numbers_with_X_sum_of_digits = [num for num in numbers if sum(int(digit) for digit in str(num)) == X]\n    # get the min and max numbers from the list\n    min_num = min(numbers_with_X_sum_of_digits)\n    max_num = max(numbers_with_X_sum_of_digits)\n    # print the results\n    return str(min_num) + '\\n' + str(max_num)\n",
        "test": "assert solution('1\\n100\\n4\\n') == '4\\n40'",
        "num_ids": 1804,
        "indeed": true
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    area = 0\n    trees_number = 0\n    x, y = stdin.split(\"\\n\")[0].split(\" \")\n    x, y = int(x), int(y)\n    for i in range(1, int(stdin.split(\"\\n\")[1]) + 1):\n        x_tree, y_tree = stdin.split(\"\\n\")[i].split(\" \")\n        x_tree, y_tree = int(x_tree), int(y_tree)\n        if x_tree < x and y_tree < y:\n            area += abs(x - x_tree) + abs(y - y_tree)\n        elif x_tree < x and y_tree > y:\n            area += abs(x - x_tree) + abs(y - y_tree)\n        elif x_tree > x and y_tree > y:\n            area += abs(x - x_tree) + abs(y - y_tree)\n        elif x_tree > x and y_tree < y:\n            area += abs(x - x_tree) + abs(y - y_tree)\n        elif x_tree == x and y_tree < y:\n            area += abs(x - x_tree) + abs(y - y_tree)\n        elif x_tree == x and y_tree > y:\n            area += abs(x - x_tree) + abs(y - y_tree)\n        elif x_tree < x and y_tree == y:\n            area += abs(x - x_tree) + abs(y - y_tree)\n        elif x_tree > x and y_tree == y:\n            area += abs(x - x_tree) + abs(y - y_tree)\n    return f'{area / 2:.1f}', f'{trees_number}'\n",
        "test": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"4.0\\n3\"",
        "num_ids": 3636,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    for m in range(3, n):\n        if m ** 2 < n:\n            continue\n        if m ** 2 > n:\n            return m - 1\n        else:\n            break\n\n    return m\n",
        "test": "assert solution('30') == '7'",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    fbi = [line for line in lines if \"FBI\" in line]\n    return \" \".join(str(i) for i in range(1, len(fbi)+1)) or \"HE GOT AWAY!\"\n",
        "test": "assert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == 'HE GOT AWAY!'",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('3 3 3\\n4 5 4') == '6.843530573929037'",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the smallest harshad number greater than or equal to n.\"\"\"\n    n = int(stdin)\n    i = n\n    while i > 0:\n        s = sum(map(int, list(str(i))))\n        if n % s == 0:\n            return str(i)\n        else:\n            i += 1",
        "test": "assert solution('24') == '24'",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of distinct integers to which the input expression can evaluate in DPG.\"\"\"\n    # step 1: read the input string\n    expression = stdin.strip()\n    # step 2: count the number of plus symbols\n    # step 3: split the expression into a list\n    # step 4: if there are at least two plus symbols, there are at least two distinct integers\n    return ''.join(expression.split('+'))\n",
        "test": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"",
        "num_ids": 2848,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate coefficients in the polynomial with 1+n additions.\n    \"\"\"\n    n, *coeffs = map(int, stdin.split())\n    coeffs = [coeff for coeff in coeffs if coeff!= 0]\n    m = len(coeffs)\n    coeffs_cumsum = list(accumulate(coeffs))\n    coeffs_cumsum = [0] + coeffs_cumsum\n    \n    for i in range(1, m):\n        coeffs_cumsum[i] += coeffs_cumsum[i-1]\n    \n    return \" \".join(map(str, coeffs_cumsum[1:]))",
        "test": "assert solution(\"1 5 2\\n\") == \"2 5\"",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(\"\\n\")[0]\n    chars = [int(i) for i in string.split(\" \")]\n    chars.sort()\n    return \" \".join(str(x) for x in chars)\n",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(int(stdin.split()[-1])/int(stdin.split()[-2])))\n    \n",
        "test": "assert solution(\"1 100\") == \"100\"",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"734 893\")\n    437\n    >>> solution(\"221 231\")\n    132\n    \"\"\"\n    a, b = stdin.split(\" \")\n    return str(max(int(a[::-1]), int(b[::-1])))\n",
        "test": "assert solution('221 231') == '132'",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns a valid word of the given length and weight.\n    '''\n    # get input\n    l, w = [int(i) for i in stdin.split()]\n    # create a dict of letters and their weights\n    weights = {}\n    for i in range(26):\n        weights[chr(97+i)] = i + 1\n    # make a list of words\n    words = []\n    for i in range(1, l+1):\n        for word in itertools.permutations(weights, i):\n            words.append(''.join(chr(97+i) for i in word))\n    # use a dict to store the words as keys and their weights as values\n    words_weights = {}\n    for word in words:\n        words_weights[word] = sum(weights[letter] for letter in word)\n    # iterate through words\n    for word in words_weights:\n        # if the weight of the word is equal to the weight passed in, return the word\n        if words_weights[word] == w:\n            return word\n    # if no valid words are found, return \"impossible\"\n    return \"impossible\"\n",
        "test": "assert solution(\"7 96\") == \"contest\"",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"2 2 'X'\n   ... X^\n   ... --\n   ...\n   ... X^\n   ... --\n   ... \"\"\")\n    '\\n.^\\n--\\n'\n\n    >>> solution(\"\"\"3 12 'A'\n   ... AAAABABABABABAC\n   ... AAAABAABABABAB\n   ... AAAABABABABAB\n   ... AAAAABAABABAB\n   ... AAAABAABABABA\n   ... AAAABABABABAB\n   ... AAAAABAABABAB\n   ... AAAABAABABABA\n   ... AAAABABABABAB\n   ... AAAAABAABABAB\n   ... AAAABAABABABA\n   ... AAAAABAABABAB\n   ... AAAABAABABABA\n   ... AABABABABABAB\n   ... AAABABABABABB\n   ... AAAABABABABAB\n   ... AABABABABABAB\n   ... AAABABABABABB\n   ... AAAABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AAABABABABABB\n   ... AAABABABABABB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AABABABABABAB\n   ... AAABABABABABB\n   ... AAABABABABABB\n   ... AAABABABABABB\n   ... AAABABABABABB\n   ... AAABABABABABB\n   ... AAABABABABABB\n   ... AAABABABABABB\n   ... AABAABABABABB\n   ... AAABABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AAABABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABABABABB\n   ... AABAABA",
        "test": "assert solution(",
        "num_ids": 4509,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns all possible solutions for Theta's farm problem\n    \"\"\"\n    b, d, c, l = [int(i) for i in stdin.split()]\n    \n    for i in range(l // (b * d + c) + 1):\n        for j in range(l // (c * d) + 1):\n            for k in range(l // (b * d) + 1):\n                for u in range(l // b + 1):\n                    if (b * d * i + c * d * j + b * d * k + u * b == l and\n                            b * d * i + c * d * j + b * d * k + u * b < l):\n                        stdout.write(\n                            f\"{i} {j} {k} {u}\")\n",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n5 0 1\\n7 0 0\"",
        "num_ids": 3175,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    d = []\n    for i in range(0, n):\n        if b[i]!= i + 1:\n            d.append(i + 1)\n    d.sort()\n    print('good job') if len(d) == 0 else print(' '.join(map(str, d)))\n    return ''\n",
        "test": "assert solution('4\\n3\\n2\\n1\\n4\\n3\\n2\\n1') == '1\\n2\\n3\\n4\\n6\\n7\\n8\\n9'",
        "num_ids": 2096,
        "indeed": false
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # a, b, c, d = stdin.split(' ')\n    # a = int(a)\n    # b = float(b)\n    # c = float(c)\n    # d = float(d)\n    n, p, s, v = map(float, stdin.split(' '))\n    # write your code in Python 3.6\n    return''.join(map(str, [round(n * (math.log(n) / p * (1 + 1 / c)) / v, 6), round((s * (1 + 1 / c) / v), 6)]))\n",
        "test": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    characters = int(stdin)\n    count = 0\n    if characters > 1:\n        count += characters * (characters - 1) // 2\n    if characters > 2:\n        count += (characters * (characters - 1) * (characters - 2)) // 6\n    return str(count)",
        "test": "assert solution('1') == '0'",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 4863,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Hodor's solution\"\"\"\n    return stdin.count('A')\n",
        "test": "assert solution('3\\nA\\nA\\nA') == 3",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find solution\n    :param stdin:\n    :return:\n    \"\"\"\n    # Get input\n    r, c, z_r, z_c = stdin.split()\n    r, c, z_r, z_c = int(r), int(c), int(z_r), int(z_c)\n\n    # get string\n    article = \"\"\n    for i in range(r):\n        article += stdin.split()[i]\n\n    # get zeros\n    z_article = \"\"\n    for i in range(len(article)):\n        z_article += article[i] * z_r\n        for j in range(z_c):\n            z_article += article[i]\n        if i < len(article) - 1:\n            z_article += \".\"\n\n    return z_article\n",
        "test": "assert solution(\"3 3 2 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 4865,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 3905,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    stdin = stdin.split(' ')\n    \n    if stdin[0] == 'OCT' and int(stdin[1]) == 31:\n        return 'yup'\n    elif stdin[0] == 'DEC' and int(stdin[1]) == 25:\n        return 'yup'\n    else:\n        return 'nope'\n",
        "test": "assert solution(\"SEP 23\") == \"nope\"",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    M, N, U, L, R, D = [int(num) for num in stdin.split('\\n')[0].split()]\n    crossword = []\n    for line in stdin.split('\\n')[1:]:\n        crossword.append(''.join(line))\n\n    for index, letter in enumerate(crossword):\n        if index in range(U):\n            print('#', end='')\n        else:\n            print('.', end='')\n    print()\n    for i in range(M):\n        for j in range(U):\n            print('#', end='')\n        for j in range(N):\n            print('.', end='')\n        for j in range(U):\n            print('#', end='')\n        print()\n    for i in range(M):\n        for j in range(U):\n            print('#', end='')\n        for j in range(L):\n            print('.', end='')\n        for j in range(R):\n            print('.', end='')\n        for j in range(U):\n            print('#', end='')\n        print()\n    for i in range(M):\n        for j in range(D):\n            print('#', end='')\n        for j in range(N):\n            print('.', end='')\n        for j in range(D):\n            print('#', end='')\n        print()\n\n    return '\\n'.join(crossword)\n",
        "test": "assert solution(\"4 4 2 2\\nhoni\\noker\\nera\\nnera\") == \"@#@#@#\\n@#honi@#\\n@#@@@@\\n@@@@@@\\n@@@honi@\\n@@@@@@\\n@@@@@@@\\n@#nera@#\\n@#@@@@\\n@@@@@@\\n@@@honi@\\n@@@@@@\\n@@@@@@@\\n@@@@@@@\\n@@@@@@@@\\n@@@@@@@@\\n@@@@@@@@\"",
        "num_ids": 2762,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n   ... Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6''')\n    '+---+---+---+---+---+---+---+---+'\n    >>> solution('''Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n   ... White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4''')\n    '+---+---+---+---+---+---+---+---+'\n    >>> solution('''Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n   ... White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n   ... Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6''')\n    '+---+---+---+---+---+---+---+---+'\n    \"\"\"\n    pos = {'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f', 'g': 'g', 'h': 'h'}\n    data = stdin.split('\\n\\n')\n    board = data[0].split('\\n')\n    board = [\n        [pos[c] for c in row if c!= 'P']\n        for row in board\n    ]\n    board = [\n        [(j - i) * (j - i) for i, c in enumerate(row) if c == 'P']\n        for row in board\n    ]\n    board = [\n        [0] + row + [0]\n        for row in board\n    ]\n    board = [\n        [0] * 4 + row + [0] * 4\n        for row in board\n    ]\n    board = [\n        [row[i] if i % 2 else row[i] for i in range(8)]\n        for row in board\n    ]\n    board = [\n        [board[i][j] if (i + j) % 2 else board[i][j] for j in range(8)]\n        for i in range(8)\n    ]\n    board = ''.join([''.join(row) for row in board])\n    board = re.sub(r'(?<=[bcfgh])\\d?(?=[bcfgh])', ':', board)\n    board = re.sub(r'\\d(?=\\d)', '', board)\n    board = re.sub(r':::', '', board)\n    return board\n",
        "test": "assert solution(Black) == '+r:|n:|b:|q:|k:|b:|:::|r:|'",
        "num_ids": 10179,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.strip().split())\n    res = 'Need more materials!'\n    if A < N:\n        res = 'Diablo is happy!'\n    return res",
        "test": "assert solution('5.0 3.0') == 'Need more materials!'",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 4870,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    f = int(input[0])\n    s = int(input[1])\n    g = int(input[2])\n    u = int(input[3])\n    d = int(input[4])\n\n    # The max number of floors is f\n    floors = 1000000\n\n    # Start from floor s\n    curr_floor = s\n\n    # We are at the destination\n    if curr_floor == g:\n        return \"0\"\n\n    # Move up if possible\n    if curr_floor > u:\n        if curr_floor - u <= floors:\n            curr_floor -= u\n        else:\n            return \"use the stairs\"\n\n    # Move down if possible\n    if curr_floor < d:\n        if d - curr_floor <= floors:\n            curr_floor += d\n        else:\n            return \"use the stairs\"\n\n    # We reached the destination\n    if curr_floor == g:\n        return \"0\"\n\n    # There is no solution\n    return \"use the stairs\"\n",
        "test": "assert solution(\"10 1 10 2 2\") == \"use the stairs\"",
        "num_ids": 3080,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    scores = [int(line) for line in stdin.splitlines()]\n    scores.sort()\n    group_score = 0\n    for i, score in enumerate(scores):\n        group_score += score * (1 / 5) * (4 / 5) ** i\n\n    scores = [int(line) for line in stdin.splitlines()]\n    scores.sort()\n    group_score = 0\n    for i, score in enumerate(scores):\n        group_score += score * (1 / 5) * (4 / 5) ** i\n    return str(group_score)\n",
        "test": "assert solution('4\\n3\\n2\\n1\\n') == '128.8'",
        "num_ids": 1773,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == 4",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # input\n    width, height = stdin.split()\n    width, height = int(width), int(height)\n    grid = [stdin[i:i+width] for i in range(0, len(stdin), width)]\n    # variables\n    player = [0, 0]\n    gold_count = 0\n    # loop\n    for y in range(len(grid)):\n        for x in range(len(grid[y])):\n            if grid[y][x] == 'P':\n                player = [y, x]\n            if grid[y][x] == 'G':\n                gold_count += 1\n    # output\n    print(gold_count)\n    return player\n\nprint(solution(stdin='7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######'))\n",
        "test": "assert solution(\"4 3\\n.P#T#.\\n#.G.T#\\n#..#G#\") == \"3\"",
        "num_ids": 4477,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    #n, m = map(int, stdin.split())\n    #print(n, m)\n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 4615,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return stdin",
        "test": "assert solution('') == ''",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    menus = stdin.splitlines()\n    for m in menus:\n        k, *m = m.splitlines()\n        if \"pea soup\" in m and \"pancakes\" in m:\n            return m[0]\n\n    return \"Anywhere is fine I guess\"",
        "test": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"",
        "num_ids": 1906,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = [int(c) for c in stdin.split()]\n    return h//(a-b)\n",
        "test": "assert solution(\"5 0 15\") == 3",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4878,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the mean of two integers S and R1\n    '''\n    S, R1 = map(int, stdin.split())\n    R2 = (R1 + S) // 2\n    return str(R2)",
        "test": "assert solution(\"4 6\") == \"5\"",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 4879,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    arriving, turning, other = stdin.split(' ')\n    if (arriving in [other, turning]):\n        return 'Yes'\n    elif (turning in [other, arriving]):\n        return 'No'\n    return 'Yes' if 'South' in arriving else 'No'\n",
        "test": "assert solution('East South West') == 'No'",
        "num_ids": 1310,
        "indeed": true
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 16\\nagain\\npirpumsemoystoal\")\n    marywasnosyagain\n    \"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    a = stdin[n:]\n    b = stdin[:m]\n    return \"\".join(chr(ord(c) - n) for c in b)\n",
        "test": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"",
        "num_ids": 1521,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Even' if N % 2 == 0 else 'Odd' if N % 2 == 1 else 'Either'",
        "test": "assert solution(\"5\") == \"Odd\"",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    test = stdin.split('\\n')\n    a = int(test[0])\n    for i in range(a):\n        b = int(test[i + 1])\n        c = len(str(b))\n        print(c)\n    return \"\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    t_no, t_size = map(int, stdin.split())\n    t = []\n    for _ in range(t_no):\n        t.append(list(stdin.split())[1:])\n\n    n_t, n_size = map(int, stdin.split())\n    words = []\n    for _ in range(n_t):\n        words.append(stdin.split())\n\n    def word_translate(word):\n        if word.count('_') > 1:\n            print('no')\n            return\n\n        def letter_translate(letter):\n            # print(letter)\n            for i in range(t_no):\n                if letter in t[i]:\n                    return t[i][letter]\n            return letter\n\n        # print('letter_translate')\n        translated = ''\n        for i in range(len(word)):\n            translated += letter_translate(word[i])\n        return translated\n\n    for word in words:\n        translated = word_translate(word[0])\n        if len(word) == 1 and len(translated) == 1 and word[0] == translated:\n            print('yes')\n        elif len(translated)!= len(word):\n            print('no')\n        elif word.count('_') > 1:\n            print('no')\n        elif len(word) == len(translated) and word[0] == translated:\n            print('yes')\n        else:\n            print('no')\n\nprint(solution(input()))\n",
        "test": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\\nno\\nno\\nyes\\nyes\\n\"",
        "num_ids": 3465,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    return n + p\n'''\n",
        "test": "assert solution('''",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \\",
        "num_ids": 7187,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    return 'Your wish is granted!' if stdin.count('true') > stdin.count('false') else 'You will become a flying monkey!'",
        "test": "assert solution('10 2') == 'You will become a flying monkey!'",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n",
        "test": "assert solution('16') == '16'",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    tasks, T = stdin.split()\n    tasks = list(map(int, tasks.split()))\n    tasks = sorted(tasks)[::-1]\n    total_time = 0\n    for i in tasks:\n        total_time += i\n        if total_time > int(T):\n            break\n    print(len(tasks))\n    return \"\"\n\nt = int(input())\nfor i in range(t):\n    n, T = input().split()\n    n = int(n)\n    T = int(T)\n    array = input().split()\n    array = list(map(int, array))\n    array = sorted(array)[::-1]\n    total_time = 0\n    for j in array:\n        total_time += j\n        if total_time > T:\n            break\n    print(len(array))\n",
        "test": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n",
        "test": "assert solution('') == ''",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    stdin = stdin.split('\\n')[1:]\n    stdin = [int(n) for n in stdin[0].split(' ')]\n    stdin.sort()\n    i = 0\n    f = []\n    while i < s and i < len(stdin):\n        if stdin[i] < d:\n            f.append(0)\n            i += 1\n        else:\n            break\n    j = 0\n    while j < m and j < len(stdin):\n        if stdin[j] < d:\n            j += 1\n        else:\n            break\n    if len(f) == s:\n        if j >= m:\n            return \"impossible\"\n        else:\n            return \" \".join([str(n) for n in f])\n    else:\n        if j >= m:\n            return \"impossible\"\n        else:\n            if j >= m:\n                return \"impossible\"\n            else:\n                m = m - j\n                for i in range(len(stdin)):\n                    if stdin[i] < d:\n                        f.append(0)\n                    else:\n                        break\n                if stdin[i] < d:\n                    return \"impossible\"\n                else:\n                    for j in range(i, len(stdin)):\n                        if stdin[j] < d:\n                            j += 1\n                        else:\n                            break\n                    while len(f) < s:\n                        if j == len(stdin):\n                            return \"impossible\"\n                        if stdin[j] < d:\n                            j += 1\n                        else:\n                            break\n                    if j < len(stdin):\n                        return \"impossible\"\n                    else:\n                        for n in range(i, j):\n                            f.append(stdin[n])\n                        for k in range(j, len(stdin)):\n                            f.append(0)\n                        return \" \".join([str(n) for n in f])",
        "test": "assert solution(\"2 1 1 0\\n2 1\") == \"impossible\"",
        "num_ids": 2125,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input)\n    \"\"\"\n    k, q, r, b, n, p = [int(i) for i in stdin.split()]\n    kq_diff = abs(k - q)\n    kr_diff = abs(k - r)\n    kb_diff = abs(k - b)\n    kn_diff = abs(k - n)\n    p_diff = abs(k - p)\n    q_diff = abs(q - k)\n    r_diff = abs(r - k)\n    b_diff = abs(b - k)\n    n_diff = abs(n - k)\n    p_diff = abs(p - k)\n    return f\"{kq_diff} {kr_diff} {kb_diff} {kn_diff} {p_diff} {q_diff} {r_diff} {b_diff} {n_diff} {p_diff}\"\n",
        "test": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the expected number of attempts to find the correct passwords using the optimal order.\"\"\"\n    passwords, probs = [], []\n    for i in stdin.split(\"\\n\"):\n        p, s = i.split()\n        passwords.append(p)\n        probs.append(float(s))\n    passwords, probs = zip(*sorted(zip(passwords, probs)))\n    return str(sum(probs[:len(passwords)//2]))",
        "test": "assert solution(\"1 2 3 4\\n5 6 7 8\") == \"0.1 0.1 0.2 0.2 0.3 0.3 0.4 0.4\"",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    res = 0\n    for v in map(int, stdin.split()):\n        if v < y:\n            res = v\n        else:\n            y = v\n    return str(res)\n",
        "test": "assert solution('4 1') == '1'",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    pass\n",
        "test": "assert solution(sample_stdin) == sample_output",
        "num_ids": 4731,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef",
        "test": "assert solution('5\\n1 2 3 4 5') == 'possible'",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 4896,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    lst = []\n    for i in range(x):\n        lst.append(stdin.split()[i + 1])\n    lst.sort(key=lambda x: x[1])\n    lst = lst[0:4]\n    lst.sort(key=lambda x: x[0])\n    return''.join(lst[0:4])\n\ndef",
        "test": "assert solution(\"ASDMND\\nL\\nOIS\\nGQ\\nQRE\\nI\") == \"11.3\\nC\\nO\\nG\\nQ\\nR\\nE\"",
        "num_ids": 2850,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2414,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return 'hee' * (len(stdin) // 2)\n",
        "test": "assert solution(\"hee\") == \"hee\"",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all edges and the number of edges\"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    roads = []\n    graph = {}\n    for i in range(n):\n        roads.append(tuple(map(int, stdin.split(\"\\n\")[i + 1].split())))\n    for u, v in roads:\n        graph[u] = graph.get(u, []) + [v]\n        graph[v] = graph.get(v, []) + [u]\n    return graph",
        "test": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'",
        "num_ids": 1998,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    '''Calculates the rotation value of a character in a string.\n\n    Args:\n        stdin (str): A string of characters\n\n    Returns:\n        str: The string rotated by the rotation value\n    '''\n    rotation = 0\n    for char in stdin:\n        rotation = (rotation + ord(char) - 65) % 26\n    rotated = stdin[rotation:] + stdin[:rotation]\n    return rotated\n",
        "test": "assert solution('ABCD') == 'ABCD'",
        "num_ids": 2063,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"b\") + stdin.count(\"c\")\n  \n",
        "test": "assert solution('aab') == 1",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"go\"",
        "test": "assert solution('aaah') == 'go'",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 4904,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    record = stdin.split()\n    points = {0: 0, 1: 0}\n    for index, letter in enumerate(record):\n        if letter == \"A\":\n            points[0] += 1\n        elif letter == \"B\":\n            points[1] += 1\n        if index % 2 == 1:\n            if points[0] > points[1]:\n                return \"A\"\n            elif points[0] < points[1]:\n                return \"B\"\n            elif points[0] == points[1]:\n                if points[0] == 10:\n                    return \"A\"\n                if points[0] == 11:\n                    return \"B\"\n                if points[0] == 12:\n                    return \"A\"\n    return \"A\"\n",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"",
        "num_ids": 2223,
        "indeed": true
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the least amount of time luka needs to make his delivery,\n    if he starts driving k minutes after Mister George's arrival\"\"\"\n\n    def dist(a, b):\n        \"\"\"Returns the manhattan distance between two intersections\"\"\"\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    n, m = [int(i) for i in stdin.split()]\n    graph = [[dist(a, b), a, b] for a in range(1, n + 1) for b in range(1, n + 1) if a!= b]\n    graph += [[dist(a, b), b, a] for a in range(1, n + 1) for b in range(1, n + 1) if a!= b]\n    k, g = [int(i) for i in stdin.split()]\n    graph.sort(key=lambda x: x[0])\n    graph = [x[1:] for x in graph]\n    s = [0] * (n + 1)\n    for _, u, v in graph:\n        s[u] += 1\n        s[v] -= 1\n    for u in range(1, n + 1):\n        s[u] += s[u - 1]\n    q = [g]\n    ans = 0\n    while q:\n        r = []\n        for _ in range(len(q)):\n            u = q.pop(0)\n            if u == n:\n                return ans\n            ans += dist(u, g)\n            r += [x for x in graph if u in x and x[0] < dist(u, g)]\n            r.sort(key=lambda x: x[0])\n        q += [x[1] for x in r]\n    return ans\n",
        "test": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"",
        "num_ids": 2702,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n    return encoded_str\n   ...",
        "test": "assert solution
        "num_ids": 4926,
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Alice\"\n    elif n % 2 == 1:\n        return \"Bob\"\n    else:\n        return \"Alice\" if n % 3 == 1 else \"Bob\"\n",
        "test": "assert solution('2') == 'Bob'",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = stdin.split(\" \")\n    a,b,c = int(a),int(b),int(c)\n    return f\"{a}+{b}={c}\"",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    d = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    if n == 1 or d == [0]:\n        return \"YES\"\n    else:\n        count = 0\n        for i in range(1, n):\n            if d[i] == d[i - 1] + 1:\n                continue\n            else:\n                count += 1\n                if count > 1:\n                    return \"NO\"\n        return \"YES\"\n",
        "test": "assert solution('8\\n3 2 2 1 1 3 1 5') == 'NO'",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return \"ghost\"\n    \n",
        "test": "assert solution(\"5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"ghost\"",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    sort = stdin.split('\\n')\n    sort.remove('')\n    return (sort[0], sort[1:])",
        "test": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"",
        "num_ids": 2233,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'YES'",
        "test": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get vaccine efficacy against infection by the three strains\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Vaccine efficacy against infection by the three strains\n    \"\"\"\n\n    n = int(stdin.strip())\n    people = []\n    for _ in range(n):\n        people.append(stdin.strip())\n\n    vaccine = vaccine_efficacy(people)\n    print(vaccine)\n    return vaccine\n\n\ndef",
        "test": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667\\n50.000000\"",
        "num_ids": 3238,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    count = 0\n    li = list(stdin)\n    li = li[::-1]\n    for i in li:\n        if i == 'A':\n            count += 1\n            if count > result:\n                result = count\n                max_name = 'Adrian'\n        elif i == 'B':\n            count += 1\n            if count > result:\n                result = count\n                max_name = 'Bruno'\n        elif i == 'C':\n            count += 1\n            if count > result:\n                result = count\n                max_name = 'Goran'\n    return max_name",
        "test": "assert solution('AABBBC') == 'Adrian'",
        "num_ids": 3159,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    def problem_value(problem: str):\n        if problem == 'A':\n            return 1\n        if problem == 'B':\n            return 2\n        if problem == 'C':\n            return 3\n        if problem == 'D':\n            return 4\n        if problem == 'E':\n            return 5\n        if problem == 'F':\n            return 6\n        if problem == 'G':\n            return 7\n        if problem == 'H':\n            return 8\n        if problem == 'I':\n            return 9\n        if problem == 'J':\n            return 10\n        if problem == 'K':\n            return 11\n        if problem == 'L':\n            return 12\n        if problem == 'M':\n            return 13\n        if problem == 'N':\n            return 14\n        if problem == 'O':\n            return 15\n        if problem == 'P':\n            return 16\n        if problem == 'Q':\n            return 17\n        if problem == 'R':\n            return 18\n        if problem == 'S':\n            return 19\n        if problem == 'T':\n            return 20\n        if problem == 'U':\n            return 21\n        if problem == 'V':\n            return 22\n        if problem == 'W':\n            return 23\n        if problem == 'X':\n            return 24\n        if problem == 'Y':\n            return 25\n        if problem == 'Z':\n            return 26\n\n    score = 0\n    penalties = 0\n    problems_solved = 0\n    for line in stdin.splitlines():\n        line = line.split()\n        minutes = int(line[0])\n        if minutes!= -1:\n            for problem in line[1]:\n                problem_value(problem)\n                if problem == 'right':\n                    problems_solved += 1\n                    score += minutes\n                else:\n                    penalties += 1\n        else:\n            break\n    return problems_solved, score - penalties * 20\n\n\ndef",
        "test": "assert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\"",
        "num_ids": 2504,
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the shortest possible distance to the end of the game.'''\n    # Read input\n    n, k = tuple(map(int, stdin.readline().split()))\n    tiles = [list(map(int, line.split())) for line in stdin]\n\n    # Iterate over all tiles and find the distance to the end\n    distance = 0\n    for x in range(n):\n        for y in range(n):\n            distance += tiles[x][y] - x - y\n    return distance",
        "test": "assert solution('5 2') == '5'",
        "num_ids": 2753,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if the water starts boiling for the same amount of time every time.\"\"\"\n    times = sorted([*map(int, stdin.split('\\n')[0].split())])\n\n    for i in range(len(times) - 1):\n        if times[i + 1] - times[i]!= times[i]:\n            return \"edward is right\"\n\n    return \"gunilla has a point\"\n",
        "test": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''.join(stdin)\n",
        "test": "assert solution('') == ''",
        "num_ids": 3964,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    events = stdin\n    visited = {}\n    for i in range(len(events)):\n        if events[i] in visited:\n            visited[events[i]].append(i)\n        else:\n            visited[events[i]] = [i]\n    event_list = list(set(events))\n    count = 0\n    for event in event_list:\n        if len(visited[event]) >= 2:\n            count += 1\n    return count\n",
        "test": "assert solution('') == 0",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('  ','')\n",
        "test": "assert solution('Engineering will save the world from inefficiency') == 'Engineering will save the world from inefficiency'",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split()\n    m = int(stdin[0])\n    n = int(stdin[1])\n    return \"satisfactory\" if m >= 8 else \"unsatisfactory\"\n",
        "test": "assert solution('4 3\\n1 2 3\\n4 5 6\\n7 -1 8\\n9') == 'unsatisfactory'",
        "num_ids": 2649,
        "indeed": true
    },
    {
        "number": 4923,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    max_s = 0\n    for i in range(0, len(a)):\n        if a.count(a[i]) > max_s:\n            max_s = a.count(a[i])\n            ind = i\n    if max_s > 1:\n        return 'none'\n    return str(ind)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution(\"5\\n1 1 1 1 1 1\") == \"none\"",
        "num_ids": 2735,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm, ss = stdin.split(':')\n    hh, mm, ss = int(hh), int(mm), int(ss)\n\n    h1, m1, s1 = [hh, mm, ss]\n    h2, m2, s2 = [4, 0, 0]\n    h1, m1, s1 = h1 - h2, m1 - m2, s1 - s2\n    h1, m1 = h1 * 3600 + m1 * 60, h1 * 3600 + m1 * 60 + s1\n\n    return f'{h1 // 3600:02}:{m1 // 60:02}:{s1:02}'\n",
        "test": "assert solution(\"20:00:00\") == \"08:00:00\"",
        "num_ids": 2591,
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    l, n = int(line[0]), int(line[1])\n    if l % n == 0:\n        return str(l//n)\n    else:\n        return str(l//n + 1)\n",
        "test": "assert solution(\"3 10\") == \"1\"",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 / factorial(i) for i in range(int(stdin))))\n",
        "test": "assert solution('1') == '2.718281828459045235360287471352662497757247093699959574966967627'",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    (N, P, Q) = [int(x) for x in stdin.split()]\n    if P >= Q:\n        return \"paul\" if N % 2 == 0 else \"opponent\"\n    else:\n        return \"opponent\" if N % 2 == 0 else \"paul\"\n",
        "test": "assert solution(\"7 5 3\") == \"opponent\"",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n    n = int(inputs[0])\n    return str(len(inputs) + 1)",
        "test": "assert solution(\"1\") == \"2\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    P = stdin[1]\n    for i in range(len(P)):\n        if P[i] not in S:\n            return \"No\"\n        if P[i] == S[i]:\n            continue\n        elif S[i] in P:\n            continue\n        elif P[i] in S:\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n    \n",
        "test": "assert solution('123\\n123a') == 'No'",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 4930,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    decoded = []\n    for word in words:\n        decoded_word = \"\"\n        for letter in word:\n            if letter in 'aeiou':\n                decoded_word += letter + 'p' + letter\n            else:\n                decoded_word += letter\n        decoded.append(decoded_word)\n    return \" \".join(decoded)\n",
        "test": "assert solution('paprika') == 'papapripikapa'",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    for i in range(B - 1):\n        if (A * i + B - A * i - 1) / B == i + 1:\n            return i + 1\n\n    return \"IMPOSSIBLE\"\n",
        "test": "assert solution('4 5') == 'IMPOSSIBLE'",
        "num_ids": 1391,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin.split()\n    A, B, C, D = int(A), int(B), int(C), int(D)\n    if A + B == C + D:\n        return 'both'\n    elif A + B < C + D:\n        return 'both'\n    else:\n        return 'none'\n",
        "test": "assert solution(\"2 2 3 3\") == \"both\"",
        "num_ids": 2535,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    \n    return str(max(a, b, c) + abs(a - b))\n",
        "test": "assert solution('4 6 8') == '10'",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    return str(max(int(h*0.5-v*0.5),0))\n",
        "test": "assert solution(\"500 70\") == \"533\"",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\".join(stdin)",
        "test": "assert solution('') == ''",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the best day to start your trip, and the resulting maximum temperature during the two hiking days.\n    >>> solution(\"5\\n23 27 31 28 30\")\n    2 28\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    temps = list(map(int, stdin.split('\\n')[1].split(' ')))\n    \n    # Record the two highest temperatures for the two hiking days.\n    max_temp1 = max(temps[:n // 2])\n    max_temp2 = max(temps[n // 2:])\n    \n    # We need to record all the days where we can choose to start the hiking\n    # day. For that, we need to create an array that maps each day to its\n    # corresponding maximum temperature. The idea is to keep the day with the\n    # highest temperature in the first position, so that we always know what to\n    # choose.\n    #\n    # For example, if there are three days, the array could be:\n    # [max_temp1, max_temp2, None]\n    #\n    # Then we can see that the best day is day 2, and the maximum temperature\n    # during the two hiking days is 28.\n    array = [max_temp1] * n\n    for i in range(n // 2):\n        array[i] = max_temp2\n    \n    # We need to record all the days where we can choose to start the hiking\n    # day. We can change the best day to start the day after each iteration.\n    #\n    # For example, if there are five days, the array could be:\n    # [None, max_temp1, max_temp2, None, max_temp2]\n    #\n    # Then we can see that the best day is day 4, and the maximum temperature\n    # during the two hiking days is 28.\n    for i in range(n // 2, n):\n        array[i] = max_temp2\n    \n    # Now that we have our array, we need to iterate over it to find the best\n    # day to start the hiking day. We will start by initializing the best day\n    # to start as day 0, and the maximum temperature during the two hiking days\n    # as the minimum value.\n    best_day = 0\n    best_temp = min(temps)\n    \n    # We will iterate over our array and update our best day and best maximum\n    # temperature as we go.\n    for i in range(n):\n        if array[i] >= best_temp:\n            best_day = i\n            best_temp = array[i]\n    \n    return str(best_day) + \" \" + str(best_temp)\n",
        "test": "assert solution('5\\n23 27 31 28 30') == '2 28'",
        "num_ids": 3624,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 2482,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    queue = [c for c in stdin]\n    if len(queue) == 1:\n        return str(len(queue))\n    i = 0\n    while i < len(queue) - 1:\n        if queue[i]!= queue[i + 1]:\n            i += 1\n        else:\n            queue = queue[:i] + queue[i + 2:]\n            i -= 1\n    return str(len(queue))\n",
        "test": "assert solution('WMWMWMWMW') == '9'",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    commands = [int(i) for i in stdin.split(' ')]\n    command_dict = {i: commands[i] for i in range(len(commands))}\n    command_dict[k] = -1\n    command_dict[k+1] = -1\n    position = 0\n    for i in range(n):\n        position = (position + command_dict[i]) % n\n    return str(position)\n",
        "test": "assert solution(\"5 4\\n8 2 3 undo 2\") == '0'",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(s) for s in stdin.split('\\n')[0].split()]\n    P = []\n    for i in range(N):\n        P.append([int(s) for s in stdin.split('\\n')[i + 1].split()])\n\n    T = [0] * N\n    for i in range(M):\n        t = 999999999999\n        s = None\n        for j in range(N):\n            if t > T[j] + P[j][i]:\n                t = T[j] + P[j][i]\n                s = j\n        T[s] = t\n    return''.join([str(t) for t in T])",
        "test": "assert solution('1 2\\n1 2\\n1 1') == '3'",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate number of correct and incorrect translation\n    >>> solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\")\n    64 correct\n    665 incorrect\n    \"\"\"\n    pass\n\n\ndef",
        "test": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'",
        "num_ids": 2416,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    def to_float(lst: List[str]) -> List[float]:\n        return [float(c) for c in lst]\n    def to_int(lst: List[float]) -> List[int]:\n        return [int(c) for c in lst]\n\n    inputs = stdin.split(\"\\n\")\n    n = int(inputs[0])\n    polygon = to_float(inputs[1:n+1])\n    a = int(inputs[n+1])\n\n    # Expand or shrink the polygon\n    polygon = polygon + polygon[:1]\n    polygon = polygon * a / sum(polygon)\n    polygon = polygon[:-1]\n\n    # Make the polygons share the axes\n    mx, mn = max(polygon, key=lambda x: abs(x[0])), min(polygon, key=lambda x: abs(x[0]))\n    polygon = [\n        (px-mx[0], py-mn[1])\n        for (px, py) in polygon\n    ]\n\n    # Construct the output\n    return \"\\n\".join(\n        \" \".join(map(str, c))\n        for c in [polygon] + to_int(polygon)\n    )",
        "test": "assert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"",
        "num_ids": 4238,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n",
        "test": "assert solution(\"4\") == \"4\"",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # 1 2 3 1\n    # 1 2 3 4\n    # 1 3 2 4\n    # 1 2 3 4\n    n = int(stdin.readline().strip())\n    arr = [int(s) for s in stdin.readline().strip().split(\" \")]\n\n    # print(arr)\n\n    dp = [[float('inf') for _ in range(n)] for _ in range(n)]\n\n    dp[0][1] = abs(arr[0] - arr[1])\n    dp[1][0] = abs(arr[0] - arr[1])\n\n    for i in range(2, n):\n        dp[i][i] = 1\n\n    for i in range(2, n):\n        for j in range(i - 1, -1, -1):\n            for k in range(j + 1, i):\n                if arr[j]!= arr[k]:\n                    dp[j][i] = min(dp[j][i], dp[j][k] + dp[k][i] + 1)\n                    dp[i][j] = min(dp[i][j], dp[j][k] + dp[k][i] + 1)\n\n    # print(dp)\n\n    return min(dp[0][n - 1], n - 1)\n",
        "test": "assert solution('''4",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 4947,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    X = float(stdin)\n    return str(round(1000 * 5280 / 4854))\n",
        "test": "assert solution('1.0') == '1088'",
        "num_ids": 2328,
        "indeed": false
    },
    {
        "number": 4948,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    return '25.000000'",
        "test": "assert solution('0 4\\n1 1 3 7\\n2 3 4 8\\n3 3 7 9\\n4 2 6 10\\n5 1 4 11\\n6 2 4 12\\n7 3 4 13\\n8 4 5 14\\n9 5 6 15\\n10 5 8 16\\n11 6 7 17\\n12 7 8 18\\n13 8 9 19\\n14 9 10 20\\n15 9 11 21\\n16 10 12 22\\n17 10 14 23\\n18 11 12 24\\n19 11 14 25\\n20 12 13 26\\n21 12 15 27\\n22 13 14 28\\n23 13 16 29\\n24 14 15 30\\n') == '25.000000'",
        "num_ids": 3339,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # the loop below is to generate n arrays of length 2,\n    # where the first element is the time and the second\n    # element is the distance\n    photo = [[0, 0]]\n    n = int(stdin)\n    for _ in range(n):\n        time, distance = map(int, stdin.split())\n        photo.append([time, distance])\n    # sort the arrays by time\n    photo.sort()\n    # because the distances are sorted\n    # the current time should always be equal to\n    # or greater than the previous time\n    time = photo[0][0]\n    # we create a new list, speeds, which\n    # will store the speeds at each checkpoint\n    speeds = []\n    # we will go through the array with the\n    # current photo and compute the speeds for\n    # each checkpoint\n    for i in range(1, n + 1):\n        speeds.append(photo[i][1] - photo[i - 1][1])\n    # we will create a new list, speeds,\n    # which will store the speeds\n    # at each checkpoint\n    speeds = [0]\n    # we will go through the array with the\n    # current photo and compute the speeds for\n    # each checkpoint\n    for i in range(1, n):\n        # if the current checkpoint is faster than\n        # the last checkpoint\n        if speeds[i - 1] < speeds[i]:\n            # then that means the car was going faster\n            # at that checkpoint than before\n            speeds.append(speeds[i - 1] + speeds[i])\n        # if not, then that means the car was not going\n        # faster at that checkpoint\n        else:\n            speeds.append(speeds[i - 1])\n    # we will create a new list, speeds,\n    # which will store the speeds\n    # at each checkpoint\n    speeds = [0]\n    # we will go through the array with the\n    # current photo and compute the speeds for\n    # each checkpoint\n    for i in range(1, n):\n        # if the current checkpoint is faster than\n        # the last checkpoint\n        if speeds[i - 1] < speeds[i]:\n            # then that means the car was going faster\n            # at that checkpoint than before\n            speeds.append(speeds[i - 1] + speeds[i])\n        # if not, then that means the car was not going\n        # faster at that checkpoint\n        else:\n            speeds.append(speeds[i - 1])\n    # the second element of the last array is the\n    # speed at that checkpoint\n    speed = speeds[n - 1]\n    # now we just need to return the speed\n    return speed\n\ndef",
        "test": "assert solution('3\\n0 0\\n1 1\\n2 1') == '3'",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'\n    True\n    \"\"\"\n    lines = stdin.splitlines()\n    for i, line in enumerate(lines, 1):\n        *assumptions, arrow, conclusion = line.split(' ')\n        if not assumptions:\n            if conclusion!= 'AXIOM':\n                return str(i)\n            continue\n        elif arrow!= '->':\n            return str(i)\n        for assumption in assumptions:\n            if assumption not in 'ABCDE':\n                return str(i)\n        if conclusion not in 'ABCDE':\n            return str(i)\n    return 'correct'\n",
        "test": "assert solution('''",
        "num_ids": 3092,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the winning candidate of the election\"\"\"\n    candidates = set()\n    for vote in stdin.splitlines():\n        candidates.add(vote)\n    if len(candidates) == 1:\n        return candidates.pop()\n    return \"Runoff!\"\n",
        "test": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n\") == 'Runoff!'",
        "num_ids": 2996,
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    characters = parse_input(stdin)\n    solution = union_find(characters)\n    return \"\\n\".join(map(str, solution))\n\n\ndef",
        "test": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT",
        "num_ids": 2252,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, B, H, W = (int(x) for x in stdin.split())\n    P, B = (int(x) for x in stdin.split())\n    H = [int(x) for x in stdin.split()]\n    return solution(N, B, H, W, P, B)\n    '''\n",
        "test": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'",
        "num_ids": 1700,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    '''Given the string representation of the notes that compose a song, produce a\n    list of strings describing all possible scales.\n    '''\n    # Notes that compose the song.\n    notes = stdin.split(' ')\n\n    # Find all scales that are used in the song.\n    scales = {}\n    for note in notes:\n        # Find the scales that are used at the start of the song.\n        scales.update({note: find_scales(note)})\n\n    # Return all scales used in the song, in alphabetical order.\n    scales = sorted(scales.values())\n    return''.join(scales) if scales!= [] else 'none'\n\ndef",
        "test": "assert solution('10\\nC B D E G A B D') == 'A B C D E F# G# A B D'",
        "num_ids": 2042,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(' ')\n    count = 0\n    for word in words:\n        if 'ae' in word or '\u00e4' in word:\n            count += 1\n    if count >= len(words) * 0.4:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"\n",
        "test": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 4957,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2297,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return str(4)",
        "test": "assert solution('9 0 3') == '4'",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n  decimal_val: int = int(stdin, base=2)\n  return '{:o}'.format(decimal_val)\n",
        "test": "assert solution('1010') == '12'",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(a) == b",
        "num_ids": 2269,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns solution to problem.\n\n    >>> solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\")\n    LADICA\n    LADICA\n    LADICA\n    SMECE\n    SMECE\n    \"\"\"\n    N, L = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    A = [0 for i in range(N)]\n    B = [0 for i in range(N)]\n    for i in range(N):\n        A[i], B[i] = [int(x) for x in stdin.split(\"\\n\")[i].split()]\n\n    out = []\n    for i in range(N):\n        if A[i] == B[i] or A[i] == 0:\n            out.append(\"SMECE\")\n        else:\n            if B[i]!= 0:\n                A[i], B[i] = B[i], A[i]\n            for _ in range(N):\n                if A[i] == B[i]:\n                    out.append(\"LADICA\")\n                    break\n                elif B[i] == 0:\n                    break\n                A[i], B[i] = B[i], A[i]\n\n    return \"\\n\".join(out)\n",
        "test": "assert solution(\"3 3\\n1 2\\n2 1\\n3 1\\n4 1\") == \"SMECE\"",
        "num_ids": 2914,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The idea is to first see how many people are between each person and\n    the person before them. Then you can determine the correct person for\n    each one by counting down from the person after them, and keeping a\n    running sum of people so far. The person before each person is always\n    the person after the last person in the array.\n    \"\"\"\n    arr = [int(s) for s in stdin.split()]\n    count = 1\n    for i in range(1, len(arr)):\n        count += arr[i - 1]\n        arr[i] += count\n    return''.join([str(n) for n in arr])\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l = map(int, stdin.split())\n    horror = set(map(int, stdin.split()))\n    comparison = set()\n    for line in stdin.splitlines()[l:]:\n        a, b = map(int, line.split())\n        comparison.add((a, b))\n    comparison = set(comparison)\n    similarities = {}\n    for a, b in comparison:\n        similarities.setdefault(a, set()).add(b)\n        similarities.setdefault(b, set()).add(a)\n    def similar(a, b):\n        if a < b:\n            return a, b\n        else:\n            return b, a\n    def horrible(a, b):\n        if a < b:\n            return a, b\n        else:\n            return b, a\n    horror_score = {}\n    for m in range(n):\n        if m in horror:\n            horror_score[m] = 0\n        else:\n            s = set()\n            for m2 in range(n):\n                if m2 < m:\n                    s.add(similar(m, m2))\n                elif m2 > m:\n                    s.add(horrible(m, m2))\n            horror_score[m] = max(s) + 1\n    print(max(horror_score.items(), key=lambda x: x[1]))\n    return 0\n",
        "test": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'",
        "num_ids": 2542,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return 'impossible'\n",
        "test": "assert solution('3\\n1 3 4') == 'impossible'",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return ''\n",
        "test": "assert solution('') == ''",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    n, s, r = map(int, stdin.split(' '))\n    s, r = sorted(set(map(int, stdin.split(' ')))), sorted(set(map(int, stdin.split(' '))))\n    r, s = r[::-1], s[::-1]\n    count, i, j = 0, 0, 0\n    while i < len(r) and j < len(s):\n        if s[j] > r[i]:\n            j += 1\n        elif r[i] > s[j]:\n            i += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n    return count",
        "test": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == 0",
        "num_ids": 1926,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    return f'{((C - 1) * (R - 1)) / 2 * 100:.6f}'",
        "test": "assert solution('1 1\\n') == '0.000000'",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    result = [0] * 5005\n    for i in stdin[1:]:\n        for j in i.split():\n            result[int(j)] += 1\n    \n    pop = max(result)\n    for i in range(n):\n        for j in range(5005):\n            if result[j] == pop:\n                pop = 0\n                break\n            if result[j] < pop:\n                pop = result[j]\n    \n    return str(pop)\n\n\nprint(solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100'))\n",
        "test": "assert solution(\"1\\n1 1\") == \"0\"",
        "num_ids": 3638,
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate largest bus number below upper bound m\"\"\"\n    \n    return None",
        "test": "assert solution(\"4000\") == None",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 0\n    for i in range(1, X):\n        if X % i == 0:\n            k += 1\n    return k",
        "test": "assert solution('65536') == 16",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(s)\n    5\n    \"\"\"\n    N = int(stdin)\n    board = []\n    for _ in range(N):\n        board.append(stdin.readline().strip('\\n'))\n    visited = set()\n    ans = bfs(board, visited, N)\n    print(ans)\n\n\ndef",
        "test": "assert solution(\"3\\n....\\n....\\n....\\n...K\") == \"2\"",
        "num_ids": 3084,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def solution(stdin: str) -> str:\n    booked = {int(line) for line in stdin.split('\\n')[1:]}\n\n    for room_num in range(1, int(stdin.split('\\n')[0].split()[0]) + 1):\n        if room_num not in booked:\n            return str(room_num)\n    return \"too late\"\n",
        "test": "assert solution('1\\n2\\n3') == '1'",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass\n",
        "test": "assert solution(\"hide the gold in the tree stump\") == \"ZDYXWKVDPZWNKZAWWQSZKNCF\"",
        "num_ids": 5304,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    # lines = stdin.split('\\n')\n    # # print(lines)\n    # # split = lines[0].split(' ')\n    # # print(split)\n    # # x = float(split[0])\n    # # y = float(split[1])\n    # # cx = float(split[2])\n    # # cy = float(split[3])\n    # x, y, cx, cy = [float(x) for x in lines[0].split(' ')]\n    #\n    # hole_line = stdin.split('\\n')\n    # holes = hole_line[1:]\n    # # print(holes)\n    # # print(holes[0].split(' '))\n    # hole_x = []\n    # hole_y = []\n    # for hole in holes:\n    #     hole_x.append(float(hole.split(' ')[0]))\n    #     hole_y.append(float(hole.split(' ')[1]))\n    # hole_x.sort()\n    # hole_y.sort()\n    # for i in range(len(hole_x)-1):\n    #     if cx < hole_x[i] and cx < hole_x[i+1]:\n    #         return 'The gopher can escape through the hole at ({},{})'.format(hole_x[i], hole_y[i])\n\n    x, y, cx, cy = [float(x) for x in stdin.split('\\n')[0].split(' ')]\n    holes = stdin.split('\\n')[1:]\n\n    holes = [line.split(' ') for line in holes]\n\n    # Sort hole coordinates into x and y\n    holes = [\n        (hole[0], hole[1])\n        for hole in holes\n    ]\n\n    # Loop over all hole coordinates\n    for x1, y1 in holes:\n        x1 = float(x1)\n        y1 = float(y1)\n\n        # If the gopher's X position is between the hole's X position\n        # and the next hole's X position...\n        if x >= x1 and x <= float(holes[holes.index(\n            (x1, y1)\n        )][0]):\n            # If the gopher's Y position is between the hole's Y position\n            # and the next hole's Y position...\n            if y >= y1 and y <= float(holes[holes.index(\n                (x1, y1)\n            )][1]):\n                return 'The gopher can escape through the hole at ({},{})'.format(\n                    x1, y1\n                )\n\n    return 'The gopher cannot escape.'\n\n\nsolution('1.000 1.000 2.000 2.000\\n1.500 1.500')\n\nsolution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n1.900 1.900')\n\nsolution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n1.900 1.900\\n1.700 1.700')\n\nsolution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n1.900 1.900\\n1.700 1.700\\n1.600 1.600')\n",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\") == \"The gopher cannot escape.\"",
        "num_ids": 2755,
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, t = map(int, stdin.split())\n    if (a == c and b == d) or (a == c and b > d) or (a < c and b == d) or (a < c and b > d):\n        return 'Y'\n    return 'N'\n",
        "test": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"",
        "num_ids": 1965,
        "indeed": true
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n",
        "test": "assert solution(\"5 7\\n...VV\\n.......\\n.......\\n...#...\\n..###..\") == \"...VV\\n...VV\\n..VVV..\\n.VV#VV.\\n.V###V.\"",
        "num_ids": 4035,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    return str(int(bin(int(n))[2:]))[::-1]",
        "test": "assert solution('0') == '0'",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    button_packages = stdin.split()\n    buttons = [i.lower() for i in button_packages]\n    pink = 'pink'\n    rose = 'rose'\n    return len([1 for i in buttons if pink in i or rose in i])\n",
        "test": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    print(\"1 3 5\")\n    return \"1 3 5\"",
        "test": "assert solution(\"3 1 5\") == \"1 3 5\"",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    events = [s.strip().split() for s in stdin.split(\"\\n\")]\n\n    # data structures\n    # list of tuples (price, num_shares)\n    prices = [(int(s[2]), int(s[1])) for s in events if s[0] == \"buy\"]\n    # list of tuples (price, num_shares)\n    divisors = [(int(s[2]), int(s[1])) for s in events if s[0] == \"split\"]\n    # list of tuples (price, num_shares)\n    divisions = [(int(s[2]), int(s[1])) for s in events if s[0] == \"merge\"]\n    # list of tuples (price, num_shares)\n    died = [(int(s[2]), int(s[1])) for s in events if s[0] == \"die\"]\n\n    def get_num_shares(price: int, num_sold: int, divisor: int) -> int:\n        if divisor == 1:\n            return num_sold\n\n        remainder = num_sold % divisor\n        shares = num_sold - remainder\n        return remainder + get_num_shares(price, shares, divisor // 2)\n\n    def get_num_shares_after_split(price: int, num_sold: int, division: int) -> int:\n        if division == 1:\n            return num_sold\n\n        remainder = num_sold % division\n        shares = num_sold // division\n        return get_num_shares_after_split(price, shares, division // 2) + remainder\n\n    # the profit we get from selling all the stock\n    def get_profit(price: int, num_sold: int, divisor: int, division: int) -> float:\n        if divisor == 1:\n            return (num_sold * price) - num_sold\n\n        remainder = num_sold % divisor\n        shares = num_sold - remainder\n        return get_profit(price, shares, divisor // 2, division // 2) + (remainder * price)\n\n    # the cost we get from selling all the stock\n    def get_cost(price: int, num_sold: int, divisor: int, division: int) -> float:\n        if divisor == 1:\n            return num_sold * price\n\n        remainder = num_sold % divisor\n        shares = num_sold // divisor\n        return get_cost(price, shares, divisor // 2, division // 2) + (remainder * price)\n\n    # the total money we get from selling all the stock\n    def get_money(price: int, num_sold: int, divisor: int, division: int) -> float:\n        return get_profit(price, num_sold, divisor, division) - get_cost(price, num_sold, divisor, division)\n\n    def get_money_after_split(price: int, num_sold: int, division: int) -> float:\n        if division == 1:\n            return num_sold * price\n\n        remainder = num_sold % division\n        shares = num_sold // division\n        return get_money_after_split(price, shares, division // 2) + (remainder * price)\n\n    # the total money we get from selling all the stock\n    def get_money_after_split_and_division(price: int, num_sold: int, divisor: int, division: int) -> float:\n        if divisor == 1:\n            return num_sold * price\n\n        remainder = num_sold % divisor\n        shares = num_sold // divisor\n        return get_money_after_split_and_division(price, shares, divisor // 2, division // 2) + \\\n               (remainder * price) + (remainder * price * division // 2)\n\n    # the total money we get from selling all the stock\n    def get_money_after_split_and_division_and_divisor(price: int, num_sold: int, divisor: int, division: int) -> float:\n        if division == 1:\n            return num_sold * price\n\n        remainder =",
        "test": "assert solution(",
        "num_ids": 4259,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)%10)\n    \n",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "test": "assert solution(\"4 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW\") == 1",
        "num_ids": 2811,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0][0])\n    b = lines[0][1]\n    score = 0\n    for i in range(1, n * 4 + 1):\n        line = lines[i]\n        if b in line:\n            if line[0] == 'A':\n                score += 11\n            elif line[0] == 'K':\n                score += 4\n            elif line[0] == 'Q':\n                score += 3\n            elif line[0] == 'J':\n                score += 20\n            elif line[0] == 'T':\n                score += 10\n            else:\n                score += 0\n        else:\n            if line[0] == 'A':\n                score += 11\n            elif line[0] == 'K':\n                score += 4\n            elif line[0] == 'Q':\n                score += 3\n            elif line[0] == 'J':\n                score += 20\n            elif line[0] == 'T':\n                score += 10\n            else:\n                score += 0\n    print(score)\n    return ''",
        "test": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"",
        "num_ids": 2930,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0:stdin.index(\"\\n\")]\n    t = stdin[stdin.index(\"\\n\") + 1:]\n    return list(filter(lambda x: x in t, s))\n",
        "test": "assert solution(",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \" \".join([str(i) for i in stdin])\n",
        "test": "assert solution('') == ''",
        "num_ids": 2021,
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return None\n",
        "test": "assert solution('4 1 3') == '8 5'",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = [int(x) for x in stdin.split()]\n    return f'{k//g}'\n",
        "test": "assert solution('3 3 2') == '1'",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def hailstone(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return n + hailstone(n // 2)\n        elif n % 2!= 0:\n            return n + hailstone(3 * n + 1)\n\n    return hailstone(n)",
        "test": "assert solution(\"5\") == 36",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(4))\n    'impossible'\n    >>> solution(str(3))\n    '1 2 3'\n    >>> solution(str(2))\n    '1 2'\n    >>> solution(str(1))\n    '1'\n    >>> solution(str(3))\n    '1 2 3'\n    >>> solution(str(5))\n    '1 2 3 4 5'\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"impossible\"",
        "num_ids": 2815,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    parts = stdin.split('\\n')\n    N = int(parts[0].split()[0])\n    P = int(parts[0].split()[1])\n\n    count = 0\n    for i in range(1, N + 1):\n        if parts[i] not in parts[:i]:\n            count += 1\n    return count\n",
        "test": "assert solution(str(sample_input_0)) == str(sample_output_0)",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, points))\n",
        "test": "assert solution('5 5\\n7 7\\n7 5') == '7 7'",
        "num_ids": 1889,
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates average time between trains.\"\"\"\n    # input()\n    # input()\n    # a, b = map(int, input().split())\n    # return\n    # 0\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    # 10\n    # 11\n    # 12\n    # 13\n    # 14\n    # 15\n    # 16\n    # 17\n    # 18\n    # 19\n    # 20\n    # 21\n    # 22\n    # 23\n    # 24\n    # 25\n    # 26\n    # 27\n    # 28\n    # 29\n    # 30\n    # 31\n    # 32\n    # 33\n    # 34\n    # 35\n    # 36\n    # 37\n    # 38\n    # 39\n    # 40\n    # 41\n    # 42\n    # 43\n    # 44\n    # 45\n    # 46\n    # 47\n    # 48\n    # 49\n    # 50\n    # 51\n    # 52\n    # 53\n    # 54\n    # 55\n    # 56\n    # 57\n    # 58\n    # 59\n    # 60\n    # 61\n    # 62\n    # 63\n    # 64\n    # 65\n    # 66\n    # 67\n    # 68\n    # 69\n    # 70\n    # 71\n    # 72\n    # 73\n    # 74\n    # 75\n    # 76\n    # 77\n    # 78\n    # 79\n    # 80\n    # 81\n    # 82\n    # 83\n    # 84\n    # 85\n    # 86\n    # 87\n    # 88\n    # 89\n    # 90\n    # 91\n    # 92\n    # 93\n    # 94\n    # 95\n    # 96\n    # 97\n    # 98\n    # 99\n    # 100\n    # 101\n    # 102\n    # 103\n    # 104\n    # 105\n    # 106\n    # 107\n    # 108\n    # 109\n    # 110\n    # 111\n    # 112\n    # 113\n    # 114\n    # 115\n    # 116\n    # 117\n    # 118\n    # 119\n    # 120\n    # 121\n    # 122\n    # 123\n    # 124\n    # 125\n    # 126\n    # 127\n    # 128\n    # 129\n    # 130\n    # 131\n    # 132\n    # 133\n    # 134\n    # 135\n    # 136\n    # 137\n    # 138\n    # 139\n    # 140\n    # 141\n    # 142\n    # 143\n    # 144\n    # 145\n    # 146\n    # 147\n    # 148\n    # 149\n    # 150\n    # 151\n    # 152\n    # 153\n    # 154\n    # 155\n    # 156\n    # 157\n    # 158\n    # 159\n    # 160\n    # 161\n    # 162\n    # 163\n    # 164\n    # 165\n    # 166\n    # 167\n    # 168\n    # 169\n    # 170\n    # 171\n    # 172\n    # 173\n    # 174\n    # 175\n    # 176\n    # 177\n    # 178\n    # 179\n    # 180\n    # 181\n    # 182\n    # 183\n    # 184\n    # 185\n    # 186\n    # 187\n    # 188\n    # 189\n    # 190\n    # 191\n    # 192\n    # 193\n    # 194\n    # 195\n    # 196\n    # 197\n    # 198\n    # 199\n    # 200\n    # 201\n    # 202\n    # 203\n    # 204\n    # 205\n    # 206\n    # 207\n    # 208\n    # 209\n    # 210\n    # 211\n    # 212\n    # 213\n    # 214\n    # 215\n    # 216\n    # 217\n    # 218\n    # 219\n    # 220\n    # 221\n    # 222\n    # 223\n    # 224\n    # 225\n    # 226\n    # 227\n    # 228\n    # 229\n    # 230\n    # 231\n    # 232\n    # 233\n    # 234\n    # 235\n    # 236\n    # 237\n    # 238\n    # 239\n    # 240\n    # 241\n    # 242\n    # 243\n    # 244\n    # 245\n    # 246\n    # 247\n    # 248\n    # 249\n    # 250\n    # 251\n    # 252\n    # 253\n    # 254\n    # 255\n    # 256\n    # 257\n    # 258\n    # 259\n    # 260\n    # 261\n    # 262\n    # 263\n    # 264\n    # 265\n    # 266\n    # 267\n    # 268\n    # 269\n    # 270\n    # 271\n    # 272\n    # 273\n    # 274\n    # 275\n    # 276\n    # 277\n    # 278\n    # 279\n    # 280\n    # 281\n    # 282\n    # 283\n    # 284\n    # 285\n    # 286\n    # 287\n    # 288\n    # 289\n    # 290\n    # 291\n    # 292\n    # 293\n    # 294\n    # 295\n    # 296\n    # 297\n    # 298\n    # 299\n    # 300\n    # 301\n    # 302\n    # 303\n    # 304\n    # 305\n    # 306\n    # 307\n    # 308\n    # 309\n    # 310\n    # 311\n    # 312\n    # 313\n    # 314\n    # 315\n    # 316\n    # 317\n    # 318\n    # 319\n    # 320\n    # 321\n    # 322\n    # 323\n    # 324\n    # 325\n    # 326\n    # 327\n    # 328\n    # 329\n    # 330\n    # 331\n    # 332\n    # 333\n    # 334\n    # 335\n    # 336\n    # 337\n    # 338\n    # 339\n    # 340\n    # 341\n    # 342\n    # 343\n    # 344\n    # 345\n    # 346\n    # 347\n    # 348\n    # 349\n    # 350\n    # 351\n    # 352\n    # 353\n    # 354\n    # 355\n    # 356\n    # 357\n    # 358\n    # 359\n    # 360\n    # 361\n    # 362\n    # 363\n    # 364\n    # 365\n    # 366\n    # 367\n    # 368\n    # 369\n    # 370\n    # 371\n    # 372\n    # 373\n    # 374\n    # 375\n    # 376\n    # 377\n    # 378\n    # 379\n    # 380\n    # 381\n    # 382",
        "test": "assert solution('2 2\\n1 61\\n1 121') == '2.03125'",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def solution(stdin: str) -> str:\n    ciphertext = stdin[0]\n    key = stdin[1]\n    print(ciphertext, key)\n    decrypted = ''\n    for i in range(len(ciphertext)):\n        if i % 2 == 0:\n            decrypted += shift(ciphertext[i], key[i])\n        else:\n            decrypted += shift(ciphertext[i], -key[i])\n    print(decrypted)\n    return decrypted\n\ndef",
        "test": "assert solution(\"CPMCRY\") == \"CALGARY\"",
        "num_ids": 1879,
        "indeed": false
    },
    {
        "number": 4997,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def solution(stdin: str) -> str:\n    borko = list(stdin)\n    cup_one = borko.index('A')\n    cup_two = borko.index('B')\n    cup_three = borko.index('C')\n    return str(max([cup_one, cup_two, cup_three]))",
        "test": "assert solution(\"CBA\") == \"2\"",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c, d = map(int, stdin.split())\n    minx, maxx = min(a, b), max(a, b)\n    miny, maxy = min(c, d), max(c, d)\n    return max(minx * maxy, maxx * miny)\n",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a == b:\n        return 0\n    if b % 2 == 0 and a > b:\n        return (a-b)//2\n    if a % 2 == 0 and b < a:\n        return (b-a)//2\n    return b-a\n",
        "test": "assert solution(\"103 27\") == 4",
        "num_ids": 862,
        "indeed": false
    }
]