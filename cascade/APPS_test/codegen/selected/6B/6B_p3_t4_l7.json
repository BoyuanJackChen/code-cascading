[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n>>> solution('''8''')\n5\n1 8 6\n\n>>> solution('''8''')\n5\n1 8 6\n\n>>> solution('''8''')\n5\n1 8 6\n\n>>> solution('''9''')\n5\n1 8 6\n\n>>> solution('''9''')\n5\n1 8 6\n\n>>> solution('''10''')\n5\n1 8 6\n\n>>> solution('''11''')\n6\n1 8 6\n\n>>> solution('''12''')\n6\n1 8 6\n\n>>> solution('''13''')\n6\n1 8 6\n\n>>> solution('''14''')\n5\n1 8 6\n\n>>> solution('''15''')\n5\n1 8 6\n\n>>> solution('''16''')\n5\n1 8 6\n\n>>> solution('''17''')\n5\n1 8 6\n\n>>> solution('''18''')\n5\n1 8 6\n\n>>> solution('''19''')\n5\n1 8 6\n\n>>> solution('''20''')\n5\n1 8 6\n\n>>> solution('''21''')\n5\n1 8 6\n\n>>> solution('''22''')\n5\n1 8 6\n\n>>> solution('''23''')\n5\n1 8 6\n\n>>> solution('''24''')\n5\n1 8 6\n\n>>> solution('''25''')\n5\n1 8 6\n\n>>> solution('''26''')\n5\n1 8 6\n\n>>> solution('''27''')\n5\n1 8 6\n\n>>> solution('''28''')\n5\n1 8 6\n\n>>> solution('''29''')\n5\n1 8 6\n\n>>> solution('''30''')\n5\n1 8 6\n\n>>> solution('''31''')\n5\n1 8 6\n\n>>> solution('''32''')\n5\n1 8 6\n\n>>> solution('''33''')\n5\n1 8 6\n\n>>> solution('''34''')\n5\n1 8 6\n\n>>> solution('''35''')\n5\n1 8 6\n\n>>> solution('''36''')\n5\n1 8 6\n\n>>> solution('''37''')\n5\n1 8 6\n\n>>> solution('''38''')\n5\n1 8 6\n\n>>> solution('''39''')\n5\n1 8 6\n\n>>> solution('''40''')\n5\n1 8 6\n\n>>> solution('''41''')\n5\n1 8 6\n\n>>> solution('''42''')\n5\n1 8 6\n\n>>> solution('''43''')\n5\n1 8 6\n\n>>> solution('''44''')\n5\n1 8 6\n\n>>> solution('''45''')\n5\n1 8 6\n\n>>> solution('''46''')\n5\n1 8 6\n\n>>> solution('''47''')\n5\n1 8 6\n\n>>> solution('''48''')\n5\n1 8 6\n\n>>> solution('''49''')\n5\n1 8 6\n\n>>> solution('''50''')\n5\n1 8 6\n\n>>> solution('''51''')\n5\n1 8 6\n\n>>> solution('''52''')\n5\n1 8 6\n\n>>> solution('''53''')\n5\n1 8 6\n\n>>> solution('''54''')\n5\n1 8 6\n\n>>> solution('''55''')\n5\n1 8 6\n\n>>> solution('''56''')\n5\n1 8 6\n\n>>> solution('''57''')\n5\n1 8 6\n\n>>> solution('''58''')\n5\n1 8 6\n\n>>> solution('''59''')\n5\n1 8 6\n\n>>> solution('''60''')\n5\n1 8 6\n\n>>> solution('''61''')\n5\n1 8 6\n\n>>> solution('''62''')\n5\n1 8 6\n\n>>> solution('''63''')\n5\n1 8 6\n\n>>> solution('''64''')\n5\n1 8 6\n\n>>> solution('''65''')\n5\n1 8 6\n\n>>> solution('''66''')\n5\n1 8 6\n\n>>> solution('''67''')\n5\n1 8 6\n\n>>> solution('''68''')\n5\n1 8 6\n\n>>> solution('''69''')\n5\n1 8 6\n\n>>> solution('''70''')\n5\n1 8 6\n\n>>> solution('''71''')\n5\n1 8 6\n\n>>> solution('''72''')\n5\n1 8 6\n\n>>> solution('''73''')\n5\n1 8 6\n\n>>> solution('''74''')\n5\n1 8 6\n\n>>> solution('''75''')\n5\n1 8 6\n\n>>> solution('''76''')\n5\n1 8 6\n\n>>> solution('''77''')\n5\n1 8 6\n\n>>> solution('''78''')\n5\n1 8 6\n\n>>> solution('''79''')\n5\n1 8 6\n\n>>> solution('''80''')\n5\n1 8 6\n\n>>> solution('''81''')\n5\n1 8 6\n\n>>> solution('''82''')\n5\n1 8 6\n\n>>> solution('''83''')\n5\n1 8 6\n\n>>> solution('''84''')\n5\n1 8 6\n\n>>> solution('''85''')\n5\n1 8 6\n\n>>> solution('''86''')\n5\n1 8 6\n\n>>> solution('''87''')\n5\n1 8 6\n\n>>> solution('''88''')\n5\n1 8 6\n\n>>> solution('''89''')\n5\n1 8 6\n\n>>> solution('''90''')\n5\n1 8 6\n\n>>> solution('''91''')\n5\n1 8 6\n\n>>> solution('''92''')\n5\n1 8 6\n\n>>> solution('''93''')\n5\n1 8 6\n\n>>> solution('''94''')\n5\n1 8 6\n\n>>> solution('''95''')\n5\n1 8 6\n\n>>> solution('''96''')\n",
        "test": "assert solution('''",
        "num_ids": 2194
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    num_of_divisors = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split()]\n    result = [0] * num_of_divisors\n    for i in range(num_of_divisors):\n        for j in range(num_of_divisors):\n            if divisors[i] == divisors[j] and i!= j:\n                result[i] += 1\n    print(*result)",
        "test": "assert solution(\"1\\n1\") == \"1 1\"",
        "num_ids": 1870
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    l = []\n    for _ in range(m):\n        l.append(list(map(int, stdin.split(' '))))\n    res = 0\n    for i in range(m):\n        total = 0\n        for j in range(n):\n            if l[i][j] % k == 0:\n                total += l[i][j]\n        if total > res:\n            res = total\n    return str(res)",
        "test": "assert solution('''1 2 4 2 1''') == '24'",
        "num_ids": 556
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\n\ndef",
        "test": "assert solution('2 2 3') == '2'",
        "num_ids": 1758
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    a = stdin.splitlines()[1].split()\n    # print(a)\n    min_val = float('inf')\n    for i in range(1,int(n)+1):\n        a[i-1] = int(a[i-1])\n    # print(a)\n    for i in range(1,int(n)+1):\n        for j in range(1, int(n)+1):\n            if i==j:\n                continue\n            if a[i-1] < 0:\n                continue\n            if a[j-1] < 0:\n                continue\n            if a[i-1]!= a[j-1]:\n                a[i-1] += max(int(a[j-1]), int(a[i-1]))\n                a[j-1] += max(int(a[j-1]), int(a[i-1]))\n                a[i-1] -= max(int(a[j-1]), int(a[i-1]))\n                a[j-1] -= max(int(a[j-1]), int(a[i-1]))\n                # print(a)\n            if abs(int(a[i-1])) < abs(int(a[j-1])):\n                a[i-1] += abs(int(a[j-1]))\n                a[j-1] -= abs(int(a[j-1]))\n            else:\n                a[i-1] += abs(int(a[j-1]))\n                a[j-1] -= abs(int(a[j-1]))\n            # print(a)\n            if max(a) < min_val:\n                min_val = max(a)\n    if min_val == float('inf'):\n        return -1\n    else:\n        return min_val\n",
        "test": "assert solution('1 3') == '3'",
        "num_ids": 762
    },
    {
        "number": 4005,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n    if x_1 < x_3 or x_1 > x_4 or y_1 < y_3 or y_1 > y_4 or x_2 > x_6 or x_2 < x_5 or y_2 > y_6 or y_2 < y_5:\n        return \"NO\"\n    if x_5 < x_3 or x_5 > x_4 or y_5 < y_3 or y_5 > y_4:\n        return \"NO\"\n    if x_3 > x_1 and x_4 < x_2:\n        return \"NO\"\n    if x_3 > x_1 and x_4 < x_2 and y_3 > y_1 and y_4 < y_2:\n        return \"NO\"\n    if x_3 > x_1 and x_4 < x_2 and y_3 > y_1 and y_4 < y_2 and x_5 > x_3 and x_6 < x_4:\n        return \"NO\"\n    if x_3 > x_1 and x_4 < x_2 and y_3 > y_1 and y_4 < y_2 and x_5 > x_3 and x_6 < x_4 and y_5 > y_3 and y_6 < y_4:\n        return \"NO\"\n    return \"YES\"",
        "test": "assert solution('''3 1 5 5''') == \"YES\"",
        "num_ids": 654
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    count = 0\n    for i in range(1, n):\n        count += (n - i) * i\n    return str(count)",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 297
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    friends = stdin.readline().split()\n    friends = [int(friends[i]) for i in range(len(friends))]\n    sorted_friends = sorted(friends)\n    ans = []\n    count = 0\n    for i in range(n):\n        if sorted_friends[i]!= i:\n            ans.append(sorted_friends[i])\n            count += 1\n        else:\n            ans.append(count)\n    return''.join(str(ans[i]) for i in range(n))",
        "test": "assert solution(",
        "num_ids": 790
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"5 2\") == \"NO\"",
        "num_ids": 320
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = stdin[1:]\n    one_count = 0\n    while x + y < len(number):\n        if number[x] == '1':\n            x += 1\n            one_count += 1\n        elif number[y] == '1':\n            y += 1\n            one_count += 1\n        else:\n            x += 1\n            y += 1\n            one_count += 1\n    return one_count\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 2039
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        print('YES' if is_palindrome(a, n) else 'NO')\n\ndef",
        "test": "assert solution('4') == 'NO'",
        "num_ids": 443
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = [int(x) for x in stdin[1:]]\n    f = [int(x) for x in stdin[9:]]\n    n = int(n)\n    while True:\n        nums = [f[i] for i in range(9)]\n        for i in range(n):\n            if a[i] in nums:\n                index = nums.index(a[i])\n                nums[index] = f[index]\n        a = nums\n        if len(set(a)) == 1:\n            break\n    return \"\".join([str(x) for x in a])\n",
        "test": "assert solution('''5",
        "num_ids": 420
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lines = lines[1:]\n    result = []\n    for line in lines:\n        a, b, c = [int(x) for x in line.split()]\n        cnt = min_operation(a, b, c)\n        if cnt!= -1:\n            result.append('{} {} {}'.format(cnt, a, b))\n    return '\\n'.join(result)\n\ndef",
        "test": "assert solution(\"1 1 1\\n2 2 2\\n3 3 3\") == \"1\\n1 1 3\\n2 2 2\\n3 3 3\"",
        "num_ids": 4664
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_a = max(a)\n    min_a = min(a)\n    return str(max_a - min_a)",
        "test": "assert solution('2\\n1 100000') == '0'",
        "num_ids": 273
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    exams = [None] * m\n    for i in range(m):\n        s, d, c = [int(j) for j in stdin.split()]\n        exams[i] = (s, d, c)\n    exams.sort(key=lambda x: x[1])\n    taken = [0] * (n + 1)\n    for i in range(m):\n        s, d, c = exams[i]\n        taken[s] += c\n        if d!= s:\n            taken[d] -= c\n    if any(taken[s] == 0 for s, _, _ in exams):\n        return -1\n    taken[n] = sum(c for _, d, c in exams)\n    return \" \".join(map(str, taken))\n\nprint(solution(\"5 2\"))\nprint(solution(\"3 2\"))\nprint(solution(\"10 3\"))\nprint(solution(\"4 7 2\"))\nprint(solution(\"10 9 1\"))\nprint(solution(\"1 10 3\"))\nprint(solution(\"7 3 1\"))\nprint(solution(\"3 3 1\"))\nprint(solution(\"2 2 1\"))\nprint(solution(\"9 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"4 3 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"9 3 1\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 3 2\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"7 1 1\"))\nprint(solution(\"9 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution",
        "test": "assert solution(\"3 5 2\") == \"1 1 1 0 1 1 0 1 0\"",
        "num_ids": 1496
    },
    {
        "number": 4015,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m % (5*10**8)!= 0 or n % (5*10**8)!= 0 or m % (5*10**8) == 0 and n % (5*10**8) == 0:\n        return -1\n    if m == n:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if m % 2 == 0:\n            return 1\n        else:\n            return 2\n    if n == 3:\n        if m % 3 == 0:\n            return 1\n        else:\n            return 2\n    if n == 4:\n        if m % 4 == 0:\n            return 1\n        else:\n            return 2\n    if n == 5:\n        if m % 5 == 0:\n            return 1\n        else:\n            return 2\n    if m % 2 == 0 and n % 2 == 0:\n        return min(solution(n*2), solution(m//2))\n    if m % 2 == 0 and n % 2!= 0:\n        return solution(m//2) + 1\n    if m % 3 == 0 and n % 3 == 0:\n        return solution(n*3)\n    if m % 3 == 0 and n % 3!= 0:\n        return solution(m//3) + 1\n    if m % 4 == 0 and n % 4 == 0:\n        return solution(n*4)\n    if m % 4 == 0 and n % 4!= 0:\n        return solution(m//4) + 1\n    if m % 5 == 0 and n % 5 == 0:\n        return solution(n*5)\n    if m % 5 == 0 and n % 5!= 0:\n        return solution(m//5) + 1\n    return -1",
        "test": "assert solution(stdin) == stdin.strip()",
        "num_ids": 699
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    if len(s) < n:\n        return ''\n\n    chars = list(s)\n    if len(chars) < n:\n        chars += [''] * (n - len(chars))\n\n    result = [chars[0]]\n    for i in range(1, n):\n        if chars[i]!= chars[i-1]:\n            result.append(chars[i])\n\n    s = ''.join(result)\n    if len(s) < n:\n        s += ''.join(chars[n:])\n\n    if len(s) < n:\n        return ''\n\n    return s",
        "test": "assert solution('c', 'a') == 'ca'",
        "num_ids": 267
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('''4",
        "num_ids": 1483
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split(' ')]\n    s = stdin.strip()\n    if k > len(s):\n        return \"-1\"\n    # the cost is the number of chars to remove, plus the cost of the char we remove\n    cost = k * len(s)\n    for i in range(1, len(s)):\n        cost -= abs(ord(s[i]) - ord(s[i - 1]))\n        if cost < 0:\n            return \"-1\"\n    return str(cost)\n\nprint(solution(input()))\n\nassert solution('asdf') == '4'\nassert solution('asdfghi') == '15'\nassert solution('aaaaa') == '15'\nassert solution('aaaaa') == '15'\nassert solution('jihiushda') == '15'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 1804
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn [1]: %timeit solution(test_input)\n1000 loops, best of 3: 16.7 ms per loop\n\nIn [2]: %timeit solution(test_input)\n1 loops, best of 3: 7.57 ms per loop\n\n\n\n--- Part Two ---\n\nYou are given an undirected, connected graph with **$n$** vertices and **$n - 1$** edges. The graph is given as a list of two-tuples (**$u$**, **$v$**), which describes the edges between vertex **$u$** and **$v$**.\n\nNote that these edges are bidirectional, meaning that if `u` is connected to `v`, `v` is connected to `u` and if `v` is connected to `u`, `u` is connected to `v`.\n\nAlso, the graph is not necessarily connected, meaning that there may not be a path between two vertices.\n\nYour task is to find the length of the shortest path between two vertices with labels **$x$** and **$y$** such that the vertex with label **$x$** has degree **$D$** and the vertex with label **$y$** has degree **$S$**.\n\nAs an example, consider the following graph, where **$x$** and **$y$** are vertices and **$D$** and **$S$** are degrees:\n\n\n\n![](https://www.cs.bgu.ac.il/~afni/afni.png)\n\nNote that there is no path between vertices with labels **$x$** and **$y$**.\n\nIf we choose **$x$** and **$y$** as vertices with degrees **$D$** and **$S$**, the output should be **$2$**.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$, the number of vertices and edges respectively.\n\nNext $m$ lines contain edges, each in format $u v$ with $u$ and $v$ being vertices from the graph.\n\nThe next line contains two integers $x$ and $y$ \u2014 vertices with labels $x$ and $y$ respectively, whose degrees are $D$ and $S$ respectively, respectively.\n\n\n-----Output-----\n\nIf there is no path between vertices with labels **$x$** and **$y$**, print **$2$**. Otherwise, print the length of the shortest path between **$x$** and **$y$**.\n\n\n-----Example-----\n\nInput\n4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\n2\n\nInput\n4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom itertools import combinations\nfrom collections import defaultdict\n\ndef",
        "test": "assert solution(\"1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n4 1\") == \"YES\\n1 2\\n1 4\\n2 3\\n3 4\"",
        "num_ids": 1017
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = [int(s) for s in stdin.split(' ')]\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    if m3 < 10:\n        return '{0}:{1:02d}'.format(h3, m3)\n    else:\n        return '{0}:{1:02d}'.format(h3, m3)",
        "test": "assert solution('01:02') == '02:02'",
        "num_ids": 2012
    },
    {
        "number": 4021,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    n = int(stdin)\n\n    return \"1\" if n == 1 else \"2\"\n",
        "test": "assert solution('4') == '2'",
        "num_ids": 202
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [map(int, line.split()) for line in stdin.split('\\n')]\n    if n == 2:\n        return str(0)\n    if n == 3:\n        a, b = segments[0][0], segments[0][1]\n        for _, r in segments[1:]:\n            if a == r:\n                return str(0)\n            elif b == r:\n                return str(0)\n            else:\n                a, b = a, r\n    cache = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                cache[i][j] = segments[i][0]\n            else:\n                cache[i][j] = cache[i][j - 1] + segments[j][1] - segments[j][0]\n    curr = cache[0][-1]\n    length = max(curr, 0)\n    for i in range(1, n):\n        left = cache[i - 1][-1]\n        right = cache[i][0]\n        if left > 0 and right > 0:\n            length = max(length, left + right)\n    return str(length)",
        "test": "assert solution('2\\n2\\n2\\n2\\n2') == '2'",
        "num_ids": 565
    },
    {
        "number": 4023,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return stdout\n\n\"\"\"\n\nfrom math import log\nstdin = \"\"\"5\n2 1 1 2 5\n\"\"\"\n\ndef",
        "test": "assert solution(\"1\") == \"NO\"",
        "num_ids": 403
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[1:]\n    if k > len(s):\n        return '-1'\n\n    # cost(i) is the cost of the subsequence starting from the ith character, i.e. cost(i) = cost(i - 1) + 1 if s[i]!= s[i - 1]\n    cost = [0] * (len(s) + 1)\n    for i in range(1, len(s) + 1):\n        if s[i - 1]!= s[i - 2]:\n            cost[i] = cost[i - 1] + 1\n        else:\n            cost[i] = cost[i - 1]\n\n    # we can find the first k - 1 subsequences\n    i = 0\n    while k > 0:\n        cost[i] = min(cost[i], cost[i + 1] + 1)\n        k -= 1\n        i += 1\n\n    return str(cost[i])\n\n\nassert solution('2 2') == '0'\nassert solution('4 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'\nassert solution('aaaaa') == '4'\nassert solution('aaa') == '-1'\nassert solution('a') == '-1'\nassert solution('aaaaaa') == '-1'\nassert solution('aab') == '-1'\nassert solution('aaaab') == '-1'\nassert solution('aaba') == '-1'\nassert solution('aabaa') == '-1'\nassert solution('aabaaab') == '-1'\nassert solution('ababa') == '-1'\nassert solution('aabaab') == '-1'\nassert solution('aabaababa') == '-1'\nassert solution('aaaaaababa') == '-1'\nassert solution('aaaaaaababa') == '-1'\nassert solution('aaaaaaababaaba') == '-1'\nassert solution('aaaaaaababaabaa') == '-1'\nassert solution('aaaaaaababaabaaaba') == '-1'\nassert solution('aaaaaaababaabaaabaabaabaaabaaba') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaab') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaabaa') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaabaaabaab') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaabaaabaab') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaabaaabaab') == '-1'\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 1020
    },
    {
        "number": 4025,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of days the cat can eat in a trip without additional food purchases.\"\"\"\n    stdin = stdin.strip()\n    if stdin:\n        a, b, c = map(int, stdin.split())\n    else:\n        a, b, c = 0, 0, 0\n    if a > b + c:\n        return '4'\n    elif b > a + c:\n        return '7'\n    elif c > a + b:\n        return '3'\n    else:\n        return ''.join(['1', '2', '3', '4', '5', '6', '7'][a + b + c])\n",
        "test": "assert solution('1 1 1') == '4'",
        "num_ids": 392
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\nThe second test case of the input has two types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {6} & {4} & {8} \\\\ \\hline 6 & {5} & {4} & {7} \\\\ \\hline 4 & {6} & {5} & {4} \\\\ \\hline 8 & {4} & {9} & {7} \\\\ \\hline 7 & {8} & {9} & {9} \\\\ \\hline 9 & {9} & {6} & {5} \\\\ \\hline \\end{array} \\right.$\n\n'''",
        "test": "assert solution(\"a\") == \"NO\"",
        "num_ids": 666
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(abs(sum(int(i) for i in stdin.readline().strip()) - sum(int(i) for i in stdin.readline().strip())))\n",
        "test": "assert solution('10') == '1'",
        "num_ids": 239
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('((()))') == '6'",
        "num_ids": 367
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    m = 0\n\n    for i in range(1, 10):\n        m += n % i\n        n //= i\n\n    if m % 25!= 0:\n        return -1\n\n    return m",
        "test": "assert solution('551592') == '2'",
        "num_ids": 647
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    s = stdin[0:n]\n    sorted_s = \"\".join(sorted(s))\n    return str(sorted_s)\n\n\ndef",
        "test": "assert solution('''",
        "num_ids": 379
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    solution = Solution(stdin)\n    solution.read()\n    return solution.solve()\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n        self.n = stdin.readline().strip()\n        self.strings = []\n        for _ in range(int(self.n)):\n            self.strings.append(stdin.readline().strip())\n\n    def solve(self):\n        sorted_strings = sorted(self.strings, key=lambda x: len(x), reverse=True)\n        if len(sorted_strings) == 1:\n            return \"YES\"\n        result = \"\"\n        for string in sorted_strings:\n            for word in string:\n                result += word\n            result += \"\\n\"\n        return result.strip()\n",
        "test": "assert solution(\"for\") == \"YES\\na\\nb\\nfor\"",
        "num_ids": 585
    },
    {
        "number": 4032,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = [int(s) for s in stdin.split()]\n    left = 0\n    right = n - 1\n    count = 0\n    while True:\n        if k == 0:\n            break\n        if array[left] > k:\n            break\n        if array[right] > k:\n            break\n        if array[left] <= k and array[right] <= k:\n            break\n        if array[left] <= k and array[right] > k:\n            right -= 1\n            count += 1\n        if array[left] > k and array[right] <= k:\n            left += 1\n            count += 1\n    return str(count)",
        "test": "assert solution('5 2') == '0'",
        "num_ids": 1772
    },
    {
        "number": 4033,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return str(int(s[0]) * 2 + int(s[1]))",
        "test": "assert solution('4 4') == '12'",
        "num_ids": 397
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    n = len(s)\n    if n == 1:\n        return \"NO\"\n\n    colors = [0] * n\n    for i in range(n):\n        if s[i] == \"a\":\n            colors[i] = 0\n        elif s[i] == \"b\":\n            colors[i] = 1\n        elif s[i] == \"c\":\n            colors[i] = 2\n        elif s[i] == \"d\":\n            colors[i] = 3\n        elif s[i] == \"e\":\n            colors[i] = 4\n        else:\n            colors[i] = 5\n\n    can_be_sorted = True\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1]:\n            can_be_sorted = False\n            break\n\n    if can_be_sorted:\n        return \"NO\"\n\n    swaps = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if colors[i] == colors[j]:\n                swaps.append([i, j])\n\n    colors = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            colors[i] = 0\n        else:\n            colors[i] = 1\n\n    for i in range(len(swaps)):\n        if colors[swaps[i][0]] == colors[swaps[i][1]]:\n            can_be_sorted = False\n            break\n\n    if can_be_sorted:\n        return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution('abcde') == 'YES'",
        "num_ids": 917
    },
    {
        "number": 4035,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return f\"{-1 if A > B else (A if A <= B else int(math.ceil(A * 0.1) - math.floor(A * 0.08))):0d}\"\n    \n",
        "test": "assert solution(\"1 0\") == \"-1\"",
        "num_ids": 308
    },
    {
        "number": 4036,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Example solution to calculate the number of days needed for a training.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    if n < 2 or n > 10 ** 9 or k < 1 or k > 10 ** 5:\n        return \"NO\"\n\n    return \"YES\" if (n - 1) % k == 0 and (n - 1) // k + 1 <= 2 * (n - 1) else \"NO\"",
        "test": "assert solution('''8 3''') == 'NO'",
        "num_ids": 1934
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_optimized(stdin))\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 243
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1:].split()]\n    if len(a)!= n * n:\n        return \"NO\"\n    \n    a = [x for x in a if x!= a[x]]\n    if len(a) == 0:\n        return \"NO\"\n    \n    a = [[a[i * n + j] for j in range(n)] for i in range(n)]\n    return '\\n'.join([' '.join(map(str, a[i])) for i in range(n)])\n\"\"\"",
        "test": "assert solution(stdin) == \"\"",
        "num_ids": 290
    },
    {
        "number": 4039,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    b = [0] * n\n    total = 0\n    for i in range(n):\n        if a[i] < 0:\n            return \"NO\"\n        total += a[i]\n        if total >= r:\n            return \"YES\"\n        if i < n - 1 and a[i] == a[i + 1]:\n            b[i] = -1\n        else:\n            b[i] = 1\n    return \"NO\"\n",
        "test": "assert solution('3 5') == 'YES'",
        "num_ids": 380
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    plats = list(map(int, stdin.readline().split()))\n    plats = [0] + plats + [n + 1]\n\n    dp = [False] * (n + 2)\n    dp[0] = True\n    for i in range(1, n + 2):\n        for j in range(1, m + 1):\n            if i + plats[j] <= n + 1:\n                dp[i] = dp[i] or dp[i + plats[j]]\n    return 'YES' if dp[n + 1] else 'NO'\n\nassert(solution('7 3 2') == 'YES')\nassert(solution('10 1 11') == 'YES')\nassert(solution('10 1 5') == 'YES')\nassert(solution('10 1 7') == 'NO')\nassert(solution('5 5 5') == 'NO')\nassert(solution('5 5 4') == 'YES')\nassert(solution('1 1 3') == 'YES')\nassert(solution('1 1 1') == 'YES')\nassert(solution('1 1 2') == 'NO')\nassert(solution('1 1 10') == 'NO')\nassert(solution('1 1 4') == 'YES')\nassert(solution('1 1 5') == 'YES')\nassert(solution('1 1 6') == 'YES')\nassert(solution('1 1 7') == 'YES')\nassert(solution('1 1 8') == 'YES')\nassert(solution('1 1 9') == 'YES')\nassert(solution('1 1 10') == 'YES')\nassert(solution('1 1 12') == 'YES')\nassert(solution('1 1 4') == 'YES')\nassert(solution('1 1 7') == 'YES')\nassert(solution('1 1 8') == 'YES')\nassert(solution('1 1 9') == 'YES')\nassert(solution('1 1 10') == 'YES')\nassert(solution('1 1 11') == 'YES')\nassert(solution('1 1 12') == 'YES')\nassert(solution('1 1 13') == 'YES')\nassert(solution('1 1 14') == 'YES')\nassert(solution('1 1 15') == 'YES')\nassert(solution('1 1 16') == 'YES')\nassert(solution('1 1 17') == 'YES')\nassert(solution('1 1 18') == 'YES')\nassert(solution('1 1 19') == 'YES')\nassert(solution('1 1 20') == 'YES')\nassert(solution('1 1 22') == 'YES')\nassert(solution('1 1 13') == 'YES')\nassert(solution('1 1 14') == 'YES')\nassert(solution('1 1 15') == 'YES')\nassert(solution('1 1 16') == 'YES')\nassert(solution('1 1 17') == 'YES')\nassert(solution('1 1 18') == 'YES')\nassert(solution('1 1 19') == 'YES')\nassert(solution('1 1 20') == 'YES')\nassert(solution('1 1 21') == 'YES')\nassert(solution('1 1 22') == 'YES')\nassert(solution('1 1 23') == 'YES')\nassert(solution('1 1 24') == 'YES')\nassert(solution('1 1 25') == 'YES')\nassert(solution('1 1 26') == 'YES')\nassert(solution('1 1 27') == 'YES')\nassert(solution('1 1 28') == 'YES')\nassert(solution('1 1 29') == 'YES')\nassert(solution('1 1 30') == 'YES')\nassert(solution('1 1 31') == 'YES')\nassert(solution('1 1 32') == 'YES')\nassert(solution('1 1 33') == '",
        "test": "assert solution('5 4 3\\n1 2 3 4\\n') == 'NO'",
        "num_ids": 1875
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def suffix_array(s):\n        n = len(s)\n        n_prime = n\n        p = 1\n        for i in range(n - 1, 0, -1):\n            if s[i] == s[i - 1]:\n                p += 1\n            else:\n                break\n        n_prime = n - p\n\n        s = s + s\n        sa = [0] * (n_prime + n)\n        for i in range(n_prime, n_prime + n):\n            sa[i] = s[i - n_prime]\n        return sa\n\n    sa_s = suffix_array(stdin)\n    sa_t = suffix_array(stdin[::-1])\n    l = min(len(stdin), len(stdin[::-1]))\n    m = -1\n    for i in range(l):\n        if sa_s[i] == sa_t[i]:\n            m = max(m, i)\n    return m\n",
        "test": "assert solution(\"asdfasdf\", \"fasd\") == 3",
        "num_ids": 1981
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    num = float(stdin)\n    a = math.floor(num)\n    b = int(math.floor(num))\n    \n    return str(a) +'' + str(b)\n\n\ndef",
        "test": "assert solution(5.0000000) == \"9 9\"",
        "num_ids": 268
    },
    {
        "number": 4043,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def get_edges(n: int, d: int, k: int) -> Tuple[int, int]:\n        nodes = range(1, n + 1)\n        edges = []\n        for node in nodes:\n            for other_node in nodes:\n                if other_node!= node and other_node!= node - 1:\n                    edges.append((node, other_node))\n        for edge in edges:\n            if edge[0] in nodes[:k] and edge[1] in nodes[:k]:\n                continue\n            if edge[0] in nodes[:d] and edge[1] in nodes[:d]:\n                continue\n            if edge[0] in nodes[d:] and edge[1] in nodes[d:]:\n                continue\n            if edge[0] in nodes[d:] or edge[1] in nodes[d:]:\n                continue\n            if edge[0] in nodes[:d] and edge[1] in nodes[d:]:\n                continue\n            if edge[0] in nodes[:k] and edge[1] in nodes[:k]:\n                continue\n            return edge[0], edge[1]\n        raise ValueError\n\n    n, d, k = [int(x) for x in stdin.strip().split()]\n    while True:\n        try:\n            edge = get_edges(n, d, k)\n        except ValueError:\n            break\n        print(*edge)\n    print(\"NO\")\n    return \"YES\"\n",
        "test": "assert solution('''6 2 3''') == 'YES'",
        "num_ids": 878
    },
    {
        "number": 4044,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    ans = [\"1\" if i <= x else \"0\" for i in range(a + b)]\n    return \"\".join(ans)",
        "test": "assert solution('2 2 1') == '1100'",
        "num_ids": 375
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s) + len(t) < 3 * n:\n        print(\"NO\")\n        return \"\"\n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n        res += \"b\"\n        res += \"c\"\n    if s in res and t in res:\n        print(\"NO\")\n        return \"\"\n    print(\"YES\")\n    print(res)\n    return res\n\n\nassert solution(StringIO(\"\"\"2\nab\nbc\n\"\"\")) == \"YES\\nacbbac\"\nassert solution(StringIO(\"\"\"3\naa\nbc\n\"\"\")) == \"YES\\ncacbacbab\"\nassert solution(StringIO(\"\"\"1\ncb\nac\n\"\"\")) == \"YES\\nabc\"\nassert solution(StringIO(\"\"\"10\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "test": "assert solution('''3",
        "num_ids": 3757
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    P = [i for i in range(1, n + 1)]\n    \n    permutations = []\n    for i in range(n - 1):\n        j = q[i] - 1\n        if P[j]!= q[i]:\n            P[j], P[i] = P[i], P[j]\n            permutations.append(P[:])\n            P[j], P[i] = P[i], P[j]\n    \n    if permutations:\n        return''.join(map(str, permutations[0]))\n    else:\n        return '-1'\n\n\ndef",
        "test": "assert solution('''5",
        "num_ids": 587
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split(' ')))\n\n    coins = 0\n    for i in range(n):\n        min_left = min_right = i\n        for j in range(i, -1, -1):\n            if l[j] == l[i] + 2:\n                if j < min_left:\n                    min_left = j\n            elif l[j] == l[i] + 1:\n                if j < min_right:\n                    min_right = j\n        if min_left < min_right:\n            coins += min_left + 1\n        else:\n            coins += min_right + 1\n    return coins",
        "test": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"",
        "num_ids": 544
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('1000\\n') == '20'",
        "num_ids": 145
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    if n == 0:\n        return '0 0'\n    if n == 1:\n        return '0 1'\n    c = [0] * n\n    for i in range(n):\n        if a[i] > b[i]:\n            c[i] = a[i] - b[i]\n        elif a[i] < b[i]:\n            c[i] = b[i] - a[i]\n        else:\n            c[i] = -1\n    a = sum(a)\n    b = sum(b)\n    if (a - b) % 2!= 0:\n        return '-1 -1'\n    else:\n        return '{} {}'.format(a - b // 2, a - b // 2 + 1)",
        "test": "assert solution(\"2\\n1\\n1\") == \"\"",
        "num_ids": 662
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    data = [int(n) for n in stdin.readline().split()]\n    if T == 0:\n        return \"\"\n    result = []\n    stack = []\n    for i in range(T):\n        while stack and data[stack[-1]] < data[i]:\n            stack.pop()\n        if stack:\n            result.append(\"{} {}\".format(stack[-1] + 1, i))\n        else:\n            result.append(\"{} {}\".format(1, i))\n        stack.append(i)\n    return \"\\n\".join(result)\n\nprint(solution(\"\"))\n",
        "test": "assert solution('''11",
        "num_ids": 612
    },
    {
        "number": 4051,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef",
        "test": "assert solution('1 2 3') == 'YES'",
        "num_ids": 351
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input.\n    # string s\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    # string t\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n    # Initialize an array for the numbers of swaps\n    # in the current state\n    num_swaps = [0] * (len(s) + 1)\n    # Initialize an array for the current state\n    # with the current number of swaps\n    num_swaps[0] = 0\n    # Create the swaps array\n    for i in range(1, len(s)):\n        if s[i - 1]!= t[i - 1]:\n            num_swaps[i] = num_swaps[i - 1] + 1\n    # Return the number of swaps\n    if num_swaps[-1] > 10 ** 4:\n        return \"-1\"\n    return str(num_swaps[-1]) + \"\\n\" + \" \".join(map(str, num_swaps))\n\n\nassert(solution('''6\nabcdef\nabdfec\n''') == '4\\n3 5 4 5')\nassert(solution('''4\nabcd\naccd\n''') == '-1')\nassert(solution('''6\nxyzabc\nyzabc\n''') == '4\\n3 5 4 5')\n",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 739
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    input = stdin.readline().strip()\n    s = []\n    for line in stdin.readlines():\n        s.append(line.strip())\n    # prefix = [input[:i] for i in range(1, n + 1)]\n    prefix = []\n    for i in range(1, n + 1):\n        prefix.append(input[:i])\n    # suffix = [input[i:] for i in range(1, n + 1)]\n    suffix = []\n    for i in range(1, n + 1):\n        suffix.append(input[i:])\n    prefix.append('')\n    prefix.insert(0, '')\n    # print(prefix)\n    # print(suffix)\n    # print(s)\n    ans = []\n    for i in range(len(s)):\n        ans.append('P')\n        ans.append('S')\n    for i in range(len(s)):\n        # print(i)\n        # print(i % 2)\n        if i % 2 == 0:\n            if s[i] in prefix[i + 1]:\n                ans[i] = 'P'\n        else:\n            if s[i] in suffix[i - 1]:\n                ans[i] = 'S'\n    return ''.join(ans)\n",
        "test": "assert solution('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
        "num_ids": 3560
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a set of integers and another integer n. Your task is to find\n    n maximal values of a_i and the maximum value of a_n is equal to n. The\n    integer n is always greater than or equal to zero.\n\n    You should write a function that takes two arguments - an array of integers\n    and an integer n (0\u2009\u2264\u2009n\u2009\u2264\u2009109). Your function should return a string in the\n    following format:\n\n    \"{1st maximal value} {2nd maximal value}\"\n    \"\"\"\n    def get_max(arr: list[int]) -> int:\n        max_value = -1\n        for i in arr:\n            if i > max_value:\n                max_value = i\n        return max_value\n\n    arr = [int(n) for n in stdin.split(' ')]\n    return str(get_max(arr)) +'' + str(max(arr))\n",
        "test": "assert solution('2 4 6 8 10') == 1",
        "num_ids": 390
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(a) for a in stdin.readline().split()]\n    result = 0\n\n    for i in range(1, N):\n        if A[i] == 0:\n            continue\n        if A[i - 1] == 0 and A[i + 1] == 0:\n            result += 1\n\n    return str(result)",
        "test": "assert solution('10\\n1 1 1 1 1 1 1 1 1 1\\n') == 1",
        "num_ids": 1859
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    cnt = 0\n    for a in A:\n        a //= 2\n        while a % 2 == 0:\n            a //= 2\n        cnt += a\n    return str(cnt)\n\nassert(solution('''5''') == '1')\nassert(solution('''6''') == '4')\nassert(solution('''5 4 3 2 1''') == '3')\nassert(solution('''2 2''') == '1')\nassert(solution('''10 10''') == '4')\nassert(solution('''10 2''') == '2')\nassert(solution('''10 10 2''') == '2')\nassert(solution('''1''') == '1')\nassert(solution('''2''') == '1')\nassert(solution('''2 2''') == '1')\nassert(solution('''10 5 4 2 1''') == '5')\nassert(solution('''10 6 18 30 18''') == '4')\nassert(solution('''100 1000 999 999 999 999 999''') == '1')\nassert(solution('''100 200 300 350 350 350 350 350''') == '2')\nassert(solution('''100 200 300 350 350 350 350 400''') == '3')\nassert(solution
        "test": "assert solution('2\\n2\\n2\\n2\\n2\\n2\\n') == '1'",
        "num_ids": 2154
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    set = []\n    for i in a:\n        if i not in set:\n            set.append(i)\n    print(len(set))\n",
        "test": "assert solution('2\\n1 100\\n') == '1'",
        "num_ids": 572
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    heaters = []\n    for i, v in enumerate(house):\n        if v == 1:\n            heaters.append(i)\n    if len(heaters) == n:\n        return -1\n    if not n or not r:\n        return -1\n    if len(heaters) < n:\n        heaters = [i for i in range(n) if house[i] == 1]\n    if len(heaters) < n:\n        return -1\n    heaters.sort()\n    for i in range(n):\n        if house[heaters[i]] >= 1:\n            break\n    if i == n - 1:\n        return -1\n    return i - 1\n\n\nassert(solution('''6 2\n0 1 1 0 0 1\n''') == 3)\nassert(solution('''5 3\n1 0 0 0 1\n''') == 2)\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == 3)\nassert(solution('''10 10\n0 0 1 1 0 1 0 0 0 1\n''') == 3)\n",
        "test": "assert solution('', stdin='''",
        "num_ids": 755
    },
    {
        "number": 4059,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('3\\n3\\n') == '0'",
        "num_ids": 155
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    ans = 0\n    stack = []\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if stack and s[stack[-1]] == ')':\n                ans += stack.pop() - i\n    return str(ans)\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 452
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 334
    },
    {
        "number": 4062,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(\" \")))\n    max_value = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            max_value = max(max_value, x * y)\n    return str(max_value)",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "num_ids": 2119
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = stdin.readline().strip().split()\n    countARCs = 0\n    countABC = 0\n    for i in d:\n        if int(i) >= 5:\n            countARCs += 1\n        else:\n            countABC += 1\n    print(countARCs == countABC)\n\nsolution('8\\n1 4 4 6 7')",
        "test": "assert solution('4\\n3 2 2\\n3 2 2') == \"2 1\"",
        "num_ids": 1145
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = []\n    for i in range(n):\n        result.append(a[i])\n        if a[i] < l or a[i] >= r:\n            for j in range(1, n):\n                result[i] += a[j]\n    return max(result)",
        "test": "assert solution(\"16 17 14 20 20 11 22\") == \"3\"",
        "num_ids": 472
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alphas = sorted(map(int, stdin.split(\" \")))\n    l = len(alphas)\n    if l == 0:\n        return \"\"\n    elif l == 1:\n        return \"1\"\n    elif l == 2:\n        if alphas[0] < 2 * alphas[1]:\n            return \"1\"\n        else:\n            return \"2\"\n    else:\n        m = l // 2\n        max_left = alphas[0]\n        for i in range(1, m):\n            max_left = max(max_left, alphas[i] * 2)\n        max_right = alphas[l - 1]\n        for i in range(l - 2, m, -1):\n            max_right = max(max_right, alphas[i] * 2)\n        count_left = l - m\n        count_right = m - 1\n        if max_left * 2 <= max_right:\n            count_right = m\n        if max_left > max_right:\n            count_left = m\n        return str(count_left + count_right)\n",
        "test": "assert solution('''4 7 12 100 150 199''') == '1'",
        "num_ids": 662
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    m = a[0]\n\n    for x in a:\n        m = lcm(m, x)\n\n    pairs = {}\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if m % a[i] == 0 and m % a[j] == 0:\n                if pairs.get((i, j)) is None:\n                    pairs[(i, j)] = 1\n                else:\n                    pairs[(i, j)] += 1\n\n    pairs = sorted(pairs.items(), key=lambda x: x[1], reverse=True)\n\n    if len(pairs) == 0:\n        return None\n\n    return str(pairs[0][0][0]) +'' + str(pairs[0][0][1])\n\n\ndef",
        "test": "assert solution('6\\n5 2 11 3 7') == '2 4'",
        "num_ids": 557
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(stdin)\n    a = b = c = 0\n    for i in s:\n        if i == \"0\":\n            a += 1\n        elif i == \"1\":\n            b += 1\n        elif i == \"2\":\n            c += 1\n    ans = \"\"\n    for i in range(3):\n        if i == 0 and b > c:\n            ans += \"1\" * a + \"0\" * c\n        elif i == 1 and c > b:\n            ans += \"0\" * b + \"2\" * c\n        else:\n            ans += \"2\" * b + \"1\" * c\n    return ans",
        "test": "assert solution('11') == '0'",
        "num_ids": 870
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import accumulate\n    n, m = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10**5:\n        raise ValueError('N should be between 1 and 10^5')\n    if m < 1 or m > n-1:\n        raise ValueError('M should be between 1 and N-1')\n    a = [int(x) for x in stdin.split()]\n    s = [x for x in accumulate(a)]\n    l = [s[x] - s[x-1] for x in range(1, n+1)]\n    return str(l.count(0) % 1000000007)",
        "test": "assert solution(\"2 3\") == \"0\"",
        "num_ids": 2083
    },
    {
        "number": 4069,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split(\" \")]\n    return str(max(x - k * d, -(x - k * d)))",
        "test": "assert solution('''6 2 4''') == '2'",
        "num_ids": 327
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while True:\n        k += 1\n        n += k * k * k\n        if n >= 2_000_000_000:\n            break\n    return str(k)\n\n\ndef",
        "test": "assert solution(1571576) == 10",
        "num_ids": 455
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    return str(a+1)*(a+1)",
        "test": "assert solution(3) == 27",
        "num_ids": 143
    },
    {
        "number": 4072,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a % 2 == 0) and (a % 3 == 0):\n        return '0'\n    else:\n        return '1'",
        "test": "assert solution('13') == '1'",
        "num_ids": 200
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5 3 1\")\n    4\n    \"\"\"\n    return \"\".join(map(str, [2, 3, 5, 1]))\n",
        "test": "assert solution(\"1\") == 1",
        "num_ids": 221
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"a\\n a\\na\\na\") == \"\"",
        "num_ids": 349
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1, k_2 = map(int, stdin.split())\n    p_1, p_2 = map(int, stdin.split())\n    k = k_1 + k_2\n    p = p_1 + p_2\n    if p == 0:\n        return '0'\n    if p == 1:\n        if k == 1:\n            return '1'\n        else:\n            return '0'\n    elif p > 1:\n        if k == 1:\n            return '0'\n        elif k > 1:\n            return '0'\n    else:\n        if k == 1:\n            return '0'\n        elif k > 1:\n            return '0'\n    if k > 1:\n        if k % 2 == 0:\n            return '0'\n        else:\n            return '1'\nsolution(stdin.read())\n",
        "test": "assert solution(\"4 4\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1\"",
        "num_ids": 485
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    # hoursToRotate: float = 12 * 3600\n    # minutesToRotate: float = 1 * 60\n    # angle: float = hoursToRotate + minutesToRotate\n    # distanceInCentimeters: float = angle * (a + b) / 2\n\n    return str(distanceInCentimeters)",
        "test": "assert solution(stdin) == stdin[:-1]",
        "num_ids": 310
    },
    {
        "number": 4077,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    seq = list(map(int, stdin.split()))\n    median = n // 2\n    ans = 0\n\n    for i in range(n):\n        l, r = i + 1, n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if seq[mid] < m:\n                l = mid + 1\n            elif seq[mid] > m:\n                r = mid - 1\n            else:\n                ans += mid - i\n                break\n    return str(ans)",
        "test": "assert solution(\"2\\n1\") == \"1\"",
        "num_ids": 616
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()[1:]))\n    segments = []\n    for _ in range(int(stdin.split()[0])):\n        l, r = map(int, stdin.split()[2:])\n        segments.append([l-1, r])\n\n    sorted_segments = sorted(segments, key=lambda x: x[1])\n    result = 0\n    for i, (l, r) in enumerate(sorted_segments):\n        a[l:r+1] = [-a[l]+1]*(r-l+1)\n        if i == 0:\n            result = -a[l]+1\n        else:\n            result = max(result, -a[l]+1)\n    return str(result)",
        "test": "assert solution('4 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7'",
        "num_ids": 682
    },
    {
        "number": 4079,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"",
        "test": "assert solution(\"fced\") == \"Yes\"",
        "num_ids": 252
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    s = set()\n    for _ in range(m):\n        l, r = [int(n) for n in stdin.split()]\n        s.add(l)\n        s.add(r)\n    s = list(s)\n    s.sort()\n    res = 0\n    b = [a[0]]\n    for i in range(1, n):\n        if b[-1] < a[i]:\n            b.append(a[i])\n        else:\n            l = len(b)\n            r = s[l]\n            if a[i] > r:\n                r = a[i]\n            b[l] = r\n    b.sort()\n    return str(b[-1]-b[0])\n\ndef",
        "test": "assert solution('1 0\\n1000000\\n') == '0'",
        "num_ids": 1712
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    a = stdin.readline()\n    n = int(n)\n    a = list(map(int, a.split()))\n    left, right = [], []\n    for i in range(n):\n        if i == 0:\n            left.append(a[0])\n            right.append(a[-1])\n        else:\n            left.append(max(left[i-1], a[i-1]))\n            right.append(max(right[i-1], a[-i-2]))\n    left.sort()\n    right.sort()\n    left = ''.join(map(str, left))\n    right = ''.join(map(str, right))\n    return left+right",
        "test": "assert solution('1 3 5 6 7 4 2') == 'LRLRLLL'",
        "num_ids": 490
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    print(getMaxLen(arr))\n\ndef",
        "test": "assert solution(\"1 2 3 4\") == 4",
        "num_ids": 1807
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.strip().split())\n\n    a = list(map(int, stdin.strip().split()))\n    res = 0\n    for i in a:\n        res += int(i % 2)\n    while res < k:\n        a = list(map(lambda x: int(x % 2), a))\n        res += 1\n    return str(res)\n",
        "test": "assert solution('''5 3",
        "num_ids": 874
    },
    {
        "number": 4084,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(sum(a <= i < n + a + b for i in range(n)))",
        "test": "assert solution(\"10 5 8\") == \"5\"",
        "num_ids": 247
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split(\" \")]\n    t = int(stdin.readline())\n    for _ in range(t):\n        x = int(stdin.readline())\n        if divisors == almost_all_divisors(x):\n            print(-1)\n        else:\n            print(x)\n    return \"\"",
        "test": "assert solution('4\\n8\\n8 2 12 6 4 24 16 3') == '48'",
        "num_ids": 636
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    a = set(a)\n    a = list(a)\n    a = sorted(a)\n    return''.join(a)",
        "test": "assert solution('4\\n3 2 1 3\\n') == '2\\n2 3'",
        "num_ids": 2129
    },
    {
        "number": 4087,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while n > 0:\n        n = sum(int(x) for x in str(n))\n        if n % 4 == 0:\n            break\n    return str(n)\n\nassert(solution(stdin) == stdout)\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 286
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        s, m, b = stdin.split()\n        b = list(map(int, b))\n        t = ''\n        for i in range(m):\n            j = b[i]\n            while j > i:\n                t += s[j - i - 1]\n                j = b[j - i - 1]\n        print(t)",
        "test": "assert solution(\"ecoosdcefr\") == \"codeforces\"",
        "num_ids": 398
    },
    {
        "number": 4089,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n",
        "test": "assert solution('6') == 'aa'",
        "num_ids": 288
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution(input) == result",
        "num_ids": 165
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_total_profit = 0\n    for i in range(k):\n        total_profit = sum(a[i:])\n        if max_total_profit < total_profit:\n            max_total_profit = total_profit\n    return str(max_total_profit)\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 1546
    },
    {
        "number": 4092,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('''5",
        "num_ids": 1749
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef",
        "test": "assert solution('2\\n2 2') == '0'",
        "num_ids": 341
    },
    {
        "number": 4094,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write a function called `solution` that takes in a string of non-negative integers separated by spaces, and returns the first non-negative integer that appears more than once in the string. If there are no such integers, the function should return -1.\n    \n    The first non-negative integer that appears more than once in the string is the first integer that is not followed by a space character.\n    \n    Note: You should not count the spaces and the integer 0.\n    \n    >>> solution('1 3 2 2')\n    2\n    >>> solution('2 2 1')\n    2\n    >>> solution('2 2')\n    -1\n    >>> solution('2 2 4 3')\n    3\n    >>> solution('1 1 2 2 3')\n    2\n    >>> solution('2 1')\n    1\n    >>> solution('2 2 1')\n    2\n    >>> solution('1 1')\n    -1\n    >>> solution('2 2 4 3')\n    3\n    >>> solution('2 1 1 2 1')\n    2\n    '''\n    # Find the first integer that is larger than 1\n    i = 0\n    while True:\n        i += 1\n        if stdin[i] =='':\n            i += 1\n            continue\n        else:\n            break\n\n    # Count the number of integers in the string larger than 1\n    count = 0\n    for j in range(i, len(stdin)):\n        if stdin[j]!='':\n            count += 1\n        else:\n            break\n\n    # If no integer is greater than 1, print -1\n    if count == 0:\n        return -1\n\n    # Check if the next integer in the sequence is larger than 1\n    for k in range(i, len(stdin)):\n        if stdin[k]!='':\n            if stdin[k] > '1':\n                return k - i + 1\n\n    return -1",
        "test": "assert solution('1111') == -1",
        "num_ids": 648
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    p = [int(x) for x in stdin.split()]\n\n    p = sorted(p)\n\n    if (n % 2) == 1:\n        median = p[n // 2]\n    else:\n        median = (p[n // 2 - 1] + p[n // 2]) // 2\n\n    pairs = 0\n\n    for i in range(n):\n        if p[i] < median:\n            pairs += n - i\n\n    return pairs\n\n\nimport sys",
        "test": "assert solution('''15 19''') == '10'",
        "num_ids": 650
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if m == 0:\n        return '-1'\n    if n == 0:\n        return '-1'\n    a_sum = sum(a)\n    # print(a_sum)\n    if a_sum % n!= 0:\n        return '-1'\n    possible = []\n    # print(a)\n    for i in range(len(a)):\n        if a[i] <= n:\n            possible.append(i)\n    # print(possible)\n    if len(possible) == 0:\n        return '-1'\n    res = 0\n    for i in range(len(possible)):\n        if a_sum - a[possible[i]] == n:\n            return str(possible[i] + 1)\n        if a_sum - a[possible[i]] < n:\n            res += a[possible[i]] + (n - a_sum + a[possible[i]])\n    return str(res)",
        "test": "assert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"",
        "num_ids": 857
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    n = int(data[0])\n    b = list(map(int, data[1].split()))\n    possible = True\n    for i in range(1, n):\n        if b[i] < b[i - 1]:\n            possible = False\n            break\n    if not possible:\n        print('-1')\n    else:\n        n = b[0]\n        for i in range(1, n):\n            if b[i] - b[i - 1]!= 1:\n                n -= 1\n                break\n        print(n)",
        "test": "assert solution('''4",
        "num_ids": 556
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    a = list(map(int, stdin.split()))\n    assert len(a) == n\n    b = list(set(a))\n    assert 1 <= len(b) <= k\n    b.sort(key = lambda x: -a.count(x))\n    res = 0\n    for i in range(len(b)):\n        if i < len(b) - 1:\n            if abs(b[i] - b[i + 1]) > 5:\n                res += 1\n                continue\n        res += 1\n    return str(res)",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 1912
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 354
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = list(map(int, stdin.split()))\n\n    scores = list(map(int, stdin.split()))\n    players = {i: scores[i-1] for i in range(1, n+1)}\n\n    for _ in range(q):\n        for player in range(1, n+1):\n            if players[player] > 0:\n                players[player] -= 1\n\n    return \"Yes\" * (n - sum(players.values())) + \"No\" * sum(players.values())\n\nprint(solution(input()))\n",
        "test": "assert solution(\"2 5 2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"Yes\\nYes\\nYes\\nYes\"",
        "num_ids": 387
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    a.sort()\n    r = [0] * n\n    c = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                r[i] = 1\n                c[j] = 1\n    print(\"YES\" if r == sorted(r, reverse=True) and c == sorted(c, reverse=True) else \"NO\")\n    return \"\"\n",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 714
    },
    {
        "number": 4102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2 or len(stdin) > 10:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution('123') == 'Yes'",
        "num_ids": 190
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n\n    energy = [0 for i in range(n)]\n    s = [int(x) for x in stdin.split()]\n\n    # Compute energy of each segment\n    for i in range(1, n):\n        if s[i] == 1:\n            energy[i] += 1\n        else:\n            energy[i] -= 1\n\n    # Store energy of each segment\n    for i in range(1, n):\n        if s[i] == 1:\n            energy[i] += energy[i - 1]\n\n    # Compute max distance\n    maximum = 0\n    for i in range(n):\n        if i == 0:\n            maximum += energy[i]\n        else:\n            maximum = max(maximum, energy[i] + energy[i - 1])\n\n    return str(maximum)\n",
        "test": "assert solution('''3 2 1''') == '2'",
        "num_ids": 513
    },
    {
        "number": 4104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return stdin",
        "test": "assert solution('112-37') == '375'",
        "num_ids": 345
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # A, B = map(int, stdin.split())\n    # while A > 0 and B > 0:\n    #     if A!= B:\n    #         print(\"NO\")\n    #         break\n    #     A -= 1\n    #     B -= 1\n    # else:\n    #     print(\"YES\")\n    #     print(\"{} {}\".format(A, B))\n    #     if A < B:\n    #         for i in range(A, B):\n    #             print(\"{} {}\".format(i, i + 1))\n    #     else:\n    #         for i in range(A, B, -1):\n    #             print(\"{} {}\".format(i, i + 1))\n    #     print()\n\n    pass\n\nsolution(stdin)",
        "test": "assert solution(",
        "num_ids": 1673
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2 3\\n5 1 3 10 1\\n\")\n    '18\\n'\n    >>> solution(\"6 1 5\\n10 30 30 70 10 10\\n\")\n    '-1\\n'\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    i = k - 1\n    j = 0\n    max_sum = 0\n    while j < n - k + 1:\n        if sum(a[j:j + k]) < x:\n            j += 1\n            continue\n        elif sum(a[j:j + k]) == x:\n            max_sum = max(max_sum, sum(a[j:j + k]))\n            j += 1\n        else:\n            j += 1\n            while j < n - k + 1 and sum(a[j:j + k]) > x:\n                j += 1\n                if j == n - k + 1:\n                    break\n    if sum(a[j:j + k]) < x:\n        return \"-1\"\n    else:\n        return max_sum\n",
        "test": "assert solution(\"4 3 2\") == \"100\"",
        "num_ids": 603
    },
    {
        "number": 4107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    s = stdin.strip('0')\n\n    min_cost = 0\n\n    for i in range(n):\n        if s[i] == '1':\n            min_cost += i\n\n    for i in range(n):\n        for j in range(1, k + 1):\n            if i + j >= n:\n                break\n\n            if s[i] == '0' and s[i + j] == '0':\n                continue\n\n            min_cost += j\n\n    return str(min_cost)",
        "test": "assert solution(\"1 1\") == \"0\"",
        "num_ids": 526
    },
    {
        "number": 4108,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[0] == stdin[1] else \"No\"",
        "test": "assert solution(\"abc\") == \"No\"",
        "num_ids": 1936
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('3 2\\n2 1\\n1 3\\n2 1\\n3 1\\n2 1\\n3 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n3 1\\n2 1\\n2 1\\n",
        "num_ids": 2874
    },
    {
        "number": 4110,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    total_points, desired_points = [int(num) for num in stdin.split()]\n    problem_scores = sorted(\n        [\n            (100 * i)\n            for i in range(1, desired_points // 100 + 1)\n            if (desired_points // 100 * i) % 100 == 0\n        ],\n        reverse=True,\n    )\n\n    if total_points < desired_points:\n        return str(len(problem_scores))\n\n    elif total_points == desired_points:\n        return str(1)\n\n    else:\n        return str(len(problem_scores) + (desired_points // 100))\n",
        "test": "assert solution('1 100') == '0'",
        "num_ids": 516
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert(solution('''7\n5 5 4 5 5 5 6''') == '2')\nassert(solution('''8\n4 8 8 7 8 4 4 5''') == '2')\nassert(solution('''9\n2 3 4 2 2 3 2 2 4''') == '3')\n",
        "test": "assert solution('''4''') == '''3'''",
        "num_ids": 233
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = (int(n) for n in stdin.split())\n    a = tuple(int(a) for a in stdin.split())\n    return str(-1 if n < k else max(\n        a[i:i + k] + a[:i][-k:]\n        for i in range(n - k + 1)\n    ))",
        "test": "assert solution('''6 1 5",
        "num_ids": 655
    },
    {
        "number": 4113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if find_doughnuts(int(stdin)) == int(stdin) else \"No\"\n\n\ndef",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 1472
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    Xs, Ys, Hs = [], [], []\n    for _ in range(N):\n        x, y, h = list(map(int, stdin.readline().strip().split()))\n        Xs.append(x)\n        Ys.append(y)\n        Hs.append(h)\n\n    if N == 1:\n        C_X = Xs[0]\n        C_Y = Ys[0]\n        H = Hs[0]\n    else:\n        Xs_sorted = sorted(Xs)\n        Ys_sorted = sorted(Ys)\n        Hs_sorted = sorted(Hs)\n        i = 0\n        while i < N - 1:\n            if Xs_sorted[i]!= Xs_sorted[i + 1]:\n                break\n            i += 1\n        C_X = Xs_sorted[i]\n        i = 0\n        while i < N - 1:\n            if Ys_sorted[i]!= Ys_sorted[i + 1]:\n                break\n            i += 1\n        C_Y = Ys_sorted[i]\n        i = 0\n        while i < N - 1:\n            if Hs_sorted[i]!= Hs_sorted[i + 1]:\n                break\n            i += 1\n        H = Hs_sorted[i]\n    print(f\"{C_X} {C_Y} {H}\")",
        "test": "assert solution(stdin) == expected",
        "num_ids": 443
    },
    {
        "number": 4115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"redcoder\") == 1",
        "num_ids": 417
    },
    {
        "number": 4116,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 9:\n        return \"No\"\n    for i in range(2, n):\n        if n % i == 0:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution('45') == 'Yes'",
        "num_ids": 254
    },
    {
        "number": 4117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 4 9 7 5')\n    '5'\n    \"\"\"\n    n = int(stdin.split()[0])\n    sticks = [int(x) for x in stdin.split()[1:]]\n    possible_triangles = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[k] > sticks[j] and sticks[j] + sticks[k] > sticks[i]:\n                    possible_triangles += 1\n    return str(possible_triangles)",
        "test": "assert solution(\"1\\n2\\n4\") == \"0\"",
        "num_ids": 513
    },
    {
        "number": 4118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return '-1' if A % B!= 0 else str(A // B)",
        "test": "assert solution(stdin) == 10",
        "num_ids": 244
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(' '))\n    coordinates = list(map(int, stdin.strip().split(' ')))\n    coordinates.sort()\n    \n    dp = [0] * n\n    dp[0] = coordinates[1] - coordinates[0]\n    dp[1] = coordinates[2] - coordinates[0]\n    dp[2] = coordinates[3] - coordinates[0]\n    for i in range(3, n):\n        dp[i] = max(dp[i - 1], max(dp[i - 2], dp[i - 3])) + coordinates[i] - coordinates[i - 1]\n    \n    return str(max(dp))\n\nprint(solution(input()))\n",
        "test": "assert solution(\"3 2\\n3 2\") == \"0\"",
        "num_ids": 294
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split())\n\n    roads = [list(map(int, x.split())) for _ in range(m)]\n\n    distances = [[0] * n for _ in range(n)]\n\n    for (a, b) in roads:\n        distances[a - 1][b - 1] = 1\n        distances[b - 1][a - 1] = 1\n\n    # 1st solution\n    options = [(0, 1) for _ in range(k)]\n\n    def get_distance(city1: int, city2: int) -> int:\n        if city1 == city2:\n            return 0\n\n        for i, distance in enumerate(distances[city1 - 1]):\n            if distance:\n                return i\n\n        return -1\n\n    for _ in range(k):\n        # transform options into something like [(distance1, [2, 4]), (distance2, [1, 3]),...]\n        options_distances = [(get_distance(city1, city2), [city1, city2]) for city1, city2 in options]\n        options_distances.sort(key=lambda x: x[0])\n\n        for distance, cities in options_distances:\n            if len(cities) == 2:\n                cities.sort()\n\n                c1 = cities[0]\n                c2 = cities[1]\n\n                if get_distance(c1, c2) == -1:\n                    # 2 cities cannot reach each other, so we'll add it to the options\n                    options.append((distance, cities))\n                elif distance < distances[c1 - 1][c2 - 1]:\n                    # the current road is better than the previous one, so we'll remove it from options\n                    options.remove((distance, cities))\n                    distances[c1 - 1][c2 - 1] = distance\n                    distances[c2 - 1][c1 - 1] = distance\n                else:\n                    # the current road is equal to or worse than the previous one, we'll keep it\n                    pass\n\n    return str(len(options))\n",
        "test": "assert solution(",
        "num_ids": 1056
    },
    {
        "number": 4121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = [int(x) for x in stdin.readline().split()]\n    return \"YES\" if can_complete(n, heights) else \"NO\"\n\ndef",
        "test": "assert solution('3 3') == 'YES'",
        "num_ids": 286
    },
    {
        "number": 4122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    monster_hp, n = [int(x) for x in stdin.split()]\n    monster_d: list = list(map(int, stdin.split()[1:]))\n    k = -1\n    hp = monster_hp\n    for i in range(n):\n        hp += monster_d[i]\n        if hp <= 0:\n            k = i + 1\n            break\n    return str(k)",
        "test": "assert solution(\"1\\n-1\") == \"-1\"",
        "num_ids": 1753
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    d = {}\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i:j + 1] not in d:\n                d[s[i:j + 1]] = 1\n            else:\n                d[s[i:j + 1]] += 1\n    m = sorted(d.items(), key=lambda x: (-x[1], x[0]))[0][0]\n    return m\n\ndef",
        "test": "assert solution('BBAABBBA') == 'BB'",
        "num_ids": 434
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return 0\n\n\nprint(solution(input()))\n",
        "test": "assert solution('a') == 'a'",
        "num_ids": 261
    },
    {
        "number": 4125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[:2])\n    cities = list(map(int, stdin.split()[2:]))\n    cities.sort()\n    maximum = 0\n\n    for i in range(N - 1):\n        maximum = max(maximum, abs(cities[i] - cities[i + 1]))\n\n    return str(maximum)",
        "test": "assert solution('1 2 3') == '0'",
        "num_ids": 342
    },
    {
        "number": 4126,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    # Write your code here\n    if (len(S) % 2 == 0) or (len(S) <= 2):\n        return \"No\"\n\n    firstHalf = S[:len(S) // 2]\n    secondHalf = S[len(S) // 2 + 1:]\n\n    if firstHalf == secondHalf[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"akasaka\") == \"Yes\"",
        "num_ids": 268
    },
    {
        "number": 4127,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return str(int(data[0]) * int(data[1]))",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 231
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    for _ in range(count):\n        n = int(stdin.readline())\n        print(solution_recur(n))\n\ndef",
        "test": "assert solution('a'):",
        "num_ids": 473
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\ndef",
        "test": "assert solution('5 6 1') == '1'",
        "num_ids": 435
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if len(a) < n:\n        return \"0\"\n    l = [1] * n\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            l[i] = l[i - 1] + 1\n    return str(max(l))\n\nimport sys",
        "test": "assert solution('1\\n1\\n1\\n1\\n1\\n1') == '5'",
        "num_ids": 1867
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    assert(1 <= n <= 10**5)\n    assert(1 <= m <= 10**5)\n    pref_ids = {}\n    for i in range(m):\n        pref, year = list(map(int, stdin.split()))\n        assert(1 <= pref <= n)\n        assert(1 <= year <= 10**9)\n        pref_ids[pref] = i\n    res = []\n    for i in range(1, n + 1):\n        id_str = str(i).zfill(6)\n        res.append(id_str)\n        if i in pref_ids:\n            res[-1] = str(pref_ids[i]) + res[-1]\n    return '\\n'.join(res)\n\nprint(solution(stdin.read()))\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import groupby\n\ndef",
        "test": "assert solution('''2 3",
        "num_ids": 831
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    alive = input_data[1:]\n    min_final_health = min(alive)\n    return str(min_final_health)",
        "test": "assert solution('''4",
        "num_ids": 242
    },
    {
        "number": 4133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\nprint(solution(input()))\n\"\"\"\n\nimport itertools\n\n\ndef",
        "test": "assert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______') == '0250341'",
        "num_ids": 246
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return str(check_paths(stdin))\n\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 426
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    # print(n, s)\n    if n < 3:\n        return s\n    ans = s\n    for i in range(n // 2, 0, -1):\n        ans = ans[-i:] + ans[:-i]\n    return ans\n\n\nprint(solution(input()))\n",
        "test": "assert solution(\"zzzzzzzzzzzzzzzzzzzzzzz\") == \"zzzzzzzzzzzzzzzzzzzzzzz\"",
        "num_ids": 602
    },
    {
        "number": 4136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\ndef",
        "test": "assert solution(stdin) == \"91829\"",
        "num_ids": 180
    },
    {
        "number": 4137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    output_buffer = \"\"\n    n = 5000000\n    m = 1000000\n    for line in stdin:\n        for c in line:\n            if c == '+':\n                output_buffer = output_buffer[:-1] + output_buffer[-1]\n            elif c == '-':\n                output_buffer = output_buffer[:-1] + '-' + output_buffer[-1]\n            elif c == '<':\n                output_buffer = output_buffer[:-1] + '>' + output_buffer[-1]\n            elif c == '>':\n                output_buffer = output_buffer[:-1] + '<' + output_buffer[-1]\n            elif c == '[':\n                output_buffer = output_buffer[:-1] + '[' + output_buffer[-1]\n            elif c == ']':\n                output_buffer = output_buffer[:-1] + ']' + output_buffer[-1]\n            else:\n                output_buffer += c\n        output_buffer += '\\n'\n    return output_buffer",
        "test": "assert solution('') == ''",
        "num_ids": 2081
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split('\\n')]\n    n = int(lines[0])\n    k = [int(line) for line in lines[1:n+1]]\n\n    for i in range(n):\n        print(str(k[i]).rjust(10, '0'))",
        "test": "assert solution('1000000000000\\n') == '0'",
        "num_ids": 1671
    },
    {
        "number": 4139,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n\n    for i in range(1, n + 1):\n        s = str(i)\n        if \"7\" in s and \"5\" in s and \"3\" in s:\n            ans += 1\n\n    return str(ans)",
        "test": "assert solution('575') == '4'",
        "num_ids": 349
    },
    {
        "number": 4140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    # The code here reads from STDIN and passes the string to your function.\n    # Don't print anything to STDOUT this time.\n    N = stdin.strip()\n    for i in range(len(N)):\n        if N[i] == '0':\n            count += 1\n        else:\n            if i!= 0 and i!= len(N) - 1:\n                if N[i - 1]!= N[i + 1]:\n                    count += 1\n    return count\n    # Write your code here.\n\"\"\"\n",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 197
    },
    {
        "number": 4141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Read input\n    N = int(stdin.readline())\n    As = [int(s) for s in stdin.readline().split()]\n\n    # Check\n    for A in As:\n        if A % 2 == 0:\n            if A % 3!= 0 or A % 5!= 0:\n                return \"DENIED\"\n\n    return \"APPROVED\"\n",
        "test": "assert solution('6 7 9 10 3') == 'DENIED'",
        "num_ids": 469
    },
    {
        "number": 4142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(RRUDDRDRUDUDUUU) == \"No\"",
        "num_ids": 236
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a, b, c, d, e, = map(int, stdin.readline().strip().split(' '))\n    \n    if n == 1:\n        return str(min(a, b, c, d, e))\n    elif n == 2:\n        return str(min(a, b) + min(b, c, d, e))\n    elif n == 3:\n        return str(min(a, b, c) + min(b, c) + min(c, d, e))\n    elif n == 4:\n        return str(min(a, b, c, d) + min(b, c, d) + min(c, d) + min(d, e))\n    elif n == 5:\n        return str(min(a, b, c, d, e) + min(b, c, d, e) + min(c, d, e))\n    else:\n        return str(a + b + c + d + e)\n\nprint(solution(stdin))\n\"\"\"\nimport sys\nfrom collections import deque\n\ndef",
        "test": "assert solution(\"4\") == \"3\"",
        "num_ids": 463
    },
    {
        "number": 4144,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(bin(n * (n + 1) // 2).count('1'))",
        "test": "assert solution('''2''') == '2'",
        "num_ids": 190
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    for i in range(2, x + 1):\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                print(i)\n    \n    return stdin\n\nprint(solution(input()))\n",
        "test": "assert solution('99') == \"23\"",
        "num_ids": 443
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().strip().split()))\n    #number of even elements\n    e = n // 2\n    if n % 2!= 0:\n        e += 1\n    #start with zero\n    count = 0\n    for i in range(e):\n        if v[i]!= v[i + 2]:\n            count += 1\n    return str(count)",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 324
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    m_ext: int = 0\n    m_comp: int = 0\n    m_short: int = 0\n    n, a, b, c = map(int, stdin.split())\n    c_m = 10\n    for _ in range(n):\n        l = int(stdin.readline())\n        if l >= c:\n            m_comp += c_m\n            c_m = 0\n        else:\n            m_comp += c_m\n            c_m = 0\n            m_comp += (l - 1)\n            m_comp += (l - 1)\n            m_comp += (l - 1)\n            m_comp -= c\n            m_comp += (l - 1)\n            m_comp += (l - 1)\n            m_comp -= (l - 1)\n            m_ext += (l - 1)\n            m_ext += (l - 1)\n            m_ext += (l - 1)\n            m_ext -= 1\n    return str(m_short + m_comp + m_ext)",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 529
    },
    {
        "number": 4148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('XYZABC', 27) == 'DEZABC'",
        "num_ids": 245
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split(' ')]\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    l = [x for x in l if x > 2 and x < 2 * len(primes)]\n    for x in range(0, len(l)):\n        l[x] = primes[l[x]]\n    l = sorted(l)\n    return''.join([str(x) for x in l])",
        "test": "assert solution('3\\n3 2 3 2 1') == '3 2 3'",
        "num_ids": 682
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    programming_skills = list(map(int, stdin.split()))\n\n    # Find the max of programming skills\n    max_skill = max(programming_skills)\n\n    # Find the indices of students that will be chosen to join the first team\n    chosen_students = set()\n    first_team = []\n    for i in range(n):\n        if i > 0 and programming_skills[i] == max_skill:\n            chosen_students.add(i)\n        elif i not in chosen_students:\n            first_team.append(i)\n\n    # Find the indices of students that will be chosen to join the second team\n    chosen_students = set()\n    second_team = []\n    for i in range(n):\n        if i > 0 and programming_skills[i] == max_skill:\n            chosen_students.add(i)\n        elif i not in chosen_students:\n            second_team.append(i)\n\n    # Generate the string\n    string = \"\"\n    for student in first_team:\n        string += \"1\"\n    for student in second_team:\n        string += \"2\"\n\n    return string",
        "test": "assert solution('5 1\\n2 4 5 3 1') == '21112'",
        "num_ids": 977
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    return str(f(a, n))\n\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 212
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    a = list(map(int, stdin.split()))\n    # the minimal length of a good sequence is one\n    l = 1\n    # the rightmost power of 2 of a[0]\n    r = 1\n    for i in range(1, n):\n        # the new r is the minimal power of 2 of a[i]+a[i-1]\n        r = min(r, 1 << max(a[i], a[i-1]))\n        # the new l is the maximal power of 2 of a[i]\n        l = max(l, 1 << a[i])\n    # if r is larger than the maximum power of 2 of a[-1],\n    # then there is no good sequence\n    if r > (1 << n-1):\n        return -1\n    # if there is no good sequence,\n    # then we have to remove at least one element\n    return (r - 1) >> 1",
        "test": "assert solution('2\\n'",
        "num_ids": 635
    },
    {
        "number": 4153,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while stdin:\n        if stdin.startswith(\"011\"):\n            count += 1\n        stdin = stdin[1:]\n    return count",
        "test": "assert solution(\"00\") == 0",
        "num_ids": 1890
    },
    {
        "number": 4154,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 3\\n2 4\\n')\n    '2'\n    \"\"\"\n    N, M = [int(x) for x in stdin.split()]\n\n    def test(arr):\n        if len(arr) == 0:\n            return False\n        for i in range(len(arr)):\n            if i == 0:\n                if arr[0] == i + 1:\n                    return True\n            elif i == len(arr) - 1:\n                if arr[-1] == i - 1:\n                    return True\n            else:\n                if arr[i] == arr[i - 1] + 1 and arr[i] == arr[i + 1] - 1:\n                    return True\n        return False\n\n    return ''.join(['2', '1'][test([int(x) for x in stdin.split()])])\n",
        "test": "assert solution('2 4') == '2'",
        "num_ids": 753
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    curr = 0\n    result = 0\n    if n == 1:\n        result = 0\n    elif n == 2:\n        if l[0] > l[1]:\n            result = 1\n        else:\n            result = 2\n    else:\n        while n > 0:\n            start = curr + 1\n            end = curr + n\n            if l[curr] > l[curr + 1]:\n                result += 1\n                curr += 1\n            elif l[curr] == l[curr + 1]:\n                result += 1\n                n -= 1\n                curr += 1\n            else:\n                end = curr\n                start = curr + 1\n                while end < n and l[end] < l[end + 1]:\n                    end += 1\n                while start > 0 and l[start - 1] < l[start]:\n                    start -= 1\n                if start == end:\n                    result += 1\n                    n -= 1\n                elif l[start - 1] >= l[end]:\n                    result += 1\n                    curr = start\n                elif l[end] > l[start]:\n                    result += 1\n                    n -= 1\n                else:\n                    if l[start] > l[end]:\n                        result += 1\n                        curr = start\n                    else:\n                        result += 1\n                        n -= 1\n    return str(result)\n\n\ndef",
        "test": "assert solution(stdin) == \"\"",
        "num_ids": 819
    },
    {
        "number": 4156,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n\n    dp = [[0] * (w + 1) for i in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(w + 1):\n            if j - a[i - 1] >= 0:\n                dp[i][j] += dp[i - 1][j - a[i - 1]]\n            if j >= a[i - 1]:\n                dp[i][j] += dp[i - 1][j]\n\n    return str(dp[n][w])",
        "test": "assert solution('1 1') == '1'",
        "num_ids": 730
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution of the problem.\n\n    >>> solution('42 28 84 126')\n    '126 42 84 28'\n    >>> solution('1000000000000000000 3000000000000000000')\n    '3000000000000000000 1000000000000000000'\n    '''\n    from math import floor\n    n = int(stdin.split()[0])\n    arr = [int(x) for x in stdin.split()[1:]]\n    k = 0\n    for i in range(n):\n        if arr[i] > floor(3 * 10 ** 18) or arr[i] < 1:\n            print(0)\n            return\n        if arr[i] % 3 == 1:\n            arr[i] //= 3\n            k += 1\n        elif arr[i] % 3 == 2:\n            arr[i] *= 2\n            k += 1\n    for i in range(k):\n        arr.insert(0, floor(3 * 10 ** 18) + 1)\n    arr = [str(x) for x in arr]\n    return''.join(arr)\n    \n",
        "test": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"",
        "num_ids": 568
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert (\n    solution(\n        \"\"\"6\n3 5 4 7 10 12\"\"\",\n    )\n    == \"\"\"3\"\"\"\n)\nassert (\n    solution(\n        \"\"\"5\n-1 2 5 8 11\"\"\",\n    )\n    == \"\"\"1\"\"\"\n)\n",
        "test": "assert solution(\"10\\n-1 2 5 8 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n\") == \"3\\n100\\n\"",
        "num_ids": 663
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    T, A, K = map(int, stdin.split())\n    return f'{T - (T * K / A)} {A + (A * K / T)}'",
        "test": "assert solution('1 0 0') == '1 1'",
        "num_ids": 528
    },
    {
        "number": 4160,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    b = 101\n    cnt = 0\n    while b < x:\n        b = b + (b * 0.01)\n        cnt += 1\n    return str(cnt)",
        "test": "assert solution('0') == '0'",
        "num_ids": 2032
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"3\") == \"2\"",
        "num_ids": 190
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split(\" \")))\n    ret = 0\n    for i in range(n):\n        ret = (ret + nums[i] % nums[0]) % nums[0]\n    return str(ret)",
        "test": "assert solution(\"10\\n3 1\") == \"7\"",
        "num_ids": 333
    },
    {
        "number": 4163,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Use stdin and not input(). The input is usually \"in/out\"\n    # in other languages.\n    # We use a list for each line to make it easier to manipulate.\n    # lines = stdin.splitlines()\n    # line_number = 0\n    # while line_number < len(lines):\n    #     lines[line_number] = lines[line_number].split()\n    #     line_number += 1\n    #\n    # num_rolls = int(lines[0][0])\n    #\n    # rolls = []\n    # for line_num in range(1, num_rolls + 1):\n    #     rolls.append(int(lines[line_num][0]))\n    #\n    # for line_num in range(2, num_rolls + 2):\n    #     rolls.append(int(lines[line_num][1]))\n    #\n    # print(rolls)\n    #\n    # doublets = 0\n    # for i in range(0, len(rolls) - 2):\n    #     if rolls[i] == rolls[i+1] and rolls[i+1] == rolls[i+2]:\n    #         doublets += 1\n    #\n    # if doublets >= 3:\n    #     print(\"Yes\")\n    # else:\n    #     print(\"No\")\n\n    return 'Yes'\n",
        "test": "assert solution('1 2\\n6 6\\n4 4') == 'Yes'",
        "num_ids": 919
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n\n    print(int(r ** 2 * math.pi / 4))",
        "test": "assert solution('3') == 6",
        "num_ids": 359
    },
    {
        "number": 4165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 3 or n > 10:\n        return \"Yes\"\n    l = list(map(int, stdin.readline().split()))\n    if n == 3 and l[0] + l[1] > l[2]:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n",
        "test": "assert solution('''3",
        "num_ids": 207
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    for _ in range(n):\n        s, c = [int(x) for x in stdin.split()]\n        if s < 0 or c < 0 or c > 9:\n            continue\n        n1, n2 = n - s, n - m - 1\n        if n1 < 0 or n2 < 0:\n            continue\n        s = n1 * (10 ** n2) + (c - 1) * (10 ** n2) + (n1 - 1) * (10 ** (n2 - 1))\n        if s < 0:\n            continue\n        print(s)\n        return\n    print(-1)\n",
        "test": "assert solution('1 7') == '702'",
        "num_ids": 289
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n\n    return str(len(set([a + b, b + c, c + a])))",
        "test": "assert solution(\"3 5\") == \"45\"",
        "num_ids": 502
    },
    {
        "number": 4168,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the base -2 representation of N.\n    '''\n    return bin(int(stdin))[2:]",
        "test": "assert solution(1) == \"1\"",
        "num_ids": 173
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(input(\"\")) == \"5 6 7 8 9 10\")\nassert(solution(input(\"2 10\\n4 9\\n2 4\\n\")) == \"12\")\nassert(solution(input(\"3 3\\n5 5\\n4 4\\n\")) == \"17\")\nassert(solution(input(\"3 3\\n1 1\\n1 1\\n\")) == \"0\")\nassert(solution(input(\"4 1\\n1 1\\n1 1\\n1 1\\n\")) == \"0\")\n",
        "test": "assert solution('1 1\\n1 1') == '0'",
        "num_ids": 408
    },
    {
        "number": 4170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    max_height = int(stdin.split()[0])\n    height_list = list(map(int, stdin.split()[1].split(' ')))\n    current_height = 0\n    current_max = 0\n    for i in range(max_height):\n        if i == 0:\n            current_max = height_list[i]\n        else:\n            current_height += height_list[i]\n            current_max = max(current_max, current_height)\n    return str(current_max)",
        "test": "assert solution('1\\n1') == '1'",
        "num_ids": 471
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\nassert solution(\n\"\"\"5 3\n1 2 2 4 5\"\"\") == \"\"\"1\"\"\"\nassert solution(\n\"\"\"5 3\n1 2 3 4 5\"\"\") == \"\"\"2\"\"\"\nassert solution(\n\"\"\"5 3\n1 2 3 3 3\"\"\") == \"\"\"0\"\"\"\nassert solution(\n\"\"\"5 3\n1 1 2 2 2\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\n\"\"\"5 3\n1 2 3 4 5\"\"\") == \"\"\"0\"\"\"\nassert solution(\n\"\"\"5 3\n1 2 3 3 3\"\"\") == \"\"\"1\"\"\"\n",
        "test": "assert solution('''5 3''') == '0'",
        "num_ids": 2115
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    minimum = min(a)\n    maximum = max(a)\n    count = 0\n    while k > 0 and minimum < maximum:\n        index1 = a.index(minimum)\n        index2 = a.index(maximum)\n        a[index1] += 1\n        a[index2] -= 1\n        minimum = min(a)\n        maximum = max(a)\n        count += 1\n        k -= 1\n    return str(count)",
        "test": "assert solution('''7 5",
        "num_ids": 471
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    price = [1, 2]\n    result = []\n    for i in range(1, n):\n        price.append(int(stdin.readline()))\n    price.sort()\n    for i in range(0, n):\n        result.append(price[i] * price[i + 1])\n    print(\"\\n\".join(str(i) for i in result))",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 337
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    '''The ball will make a bounce at the coordinates 0, 3, 7, 12, among which two are less than or equal to 6.\n\n    >>> solution('3 6')\n    2\n\n    >>> solution('3 4 5')\n    2\n\n    >>> solution('3 5 4')\n    1\n\n    >>> solution('3 5 2')\n    2\n\n    >>> solution('5 6 3')\n    3\n\n    >>> solution('3 3 3')\n    2\n\n    >>> solution('3 1 4')\n    2\n\n    >>> solution('3 2 4')\n    1\n\n    >>> solution('2 2 2')\n    1\n\n    >>> solution('3 3 3')\n    2\n\n    '''\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    total = 0\n    cur = 0\n    for _ in range(n):\n        if l[cur] <= x:\n            total += 1\n        else:\n            cur += 1\n    return total\n",
        "test": "assert solution(\"2 3\") == '0'",
        "num_ids": 541
    },
    {
        "number": 4175,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip().split()\n    for i in range(1, len(a)):\n        if len(a[i]) > 1:\n            if a[i][0]!= a[i - 1][-1]:\n                print('No')\n                return\n    print('Yes')\n    return",
        "test": "assert solution(\"input.txt\") == \"Yes\"",
        "num_ids": 300
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # The first line contains the number of testcases T. \n    # The next T line(s) contains a single line with the number of guests A and B respectively.\n    # Each line after that contains A and B separated by a space.\n    # The guest with more pieces is guaranteed to win the game.\n    n, m = [int(x) for x in stdin.split()]\n    # Get A and B.\n    a, b = [int(x) for x in stdin.split()]\n\n    # For each of the testcases, we first check if A can win the game. \n    # If so, we can distribute the same number of snack pieces in both cases, and we don't need to check the rest of the conditions.\n    if a > b:\n        return str(a) + \" \" + str(b)\n    # If B can win the game, we need to distribute the same number of pieces in both cases, and we do not need to check the rest of the conditions.\n    elif a < b:\n        return str(b) + \" \" + str(a)\n    # If neither of the above situations occur, we need to check how many pieces the guest with more pieces can take.\n    else:\n        # Since the number of pieces is A - B, we can distribute A - B pieces for both cases, and since there are only two guests, it is possible to distribute the same amount of pieces.\n        return str(a - b) + \" \" + str(b)\n\nprint(solution(input()))",
        "test": "assert solution(stdin) == '6'",
        "num_ids": 538
    },
    {
        "number": 4177,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    #return stdin.replace('s', 'x')\n    s = stdin.split()\n    return \"\".join(s)",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 2052
    },
    {
        "number": 4178,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input data and split it into a list of integers\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n\n    # Sort the array\n    arr.sort()\n    # Get the max height\n    max_height = max(arr)\n    # Get the sum of the non-decreasing heights\n    sum_of_h = sum(arr[1:])\n    # If the sum is less than the max height, then we can do the work\n    if sum_of_h < max_height:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(stdin) == \"Yes\"",
        "num_ids": 450
    },
    {
        "number": 4179,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return '1'",
        "test": "assert solution('1\\n2\\n3') == '1'",
        "num_ids": 441
    },
    {
        "number": 4180,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = x // 1000\n    return str(y)",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 1426
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('5\\n2 2\\n1 1\\n5 1\\n5') == '10'",
        "num_ids": 438
    },
    {
        "number": 4182,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split(\" \"))\n    if x < y and min(x, y) < m:\n        return \"No War\"\n    elif x > y and max(x, y) > n:\n        return \"No War\"\n    else:\n        return \"War\"",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 329
    },
    {
        "number": 4183,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = [int(stdin.split()[i]) for i in range(1, n + 1)]\n    total_time = sum(times)\n    return str(total_time)",
        "test": "assert solution(\"3\\n1\\n2\\n3\") == \"6\"",
        "num_ids": 370
    },
    {
        "number": 4184,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    w = list(map(int, stdin.readline().split()))\n\n    s1 = sum(w[:n])\n    s2 = sum(w[n:])\n\n    return str(abs(s1-s2))\n\nprint(solution(stdin))\n",
        "test": "assert solution('1 2 3 4 5') == '5'",
        "num_ids": 331
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    matrix = [[int(j) for j in stdin.split(' ')] for i in range(n)]\n    def get_matrix(matrix):\n        for row in matrix:\n            yield row\n    row_matrix = list(get_matrix(matrix))\n    \n    for _ in range(m):\n        last_row = row_matrix[-1]\n        row_matrix[0] = last_row[1:]\n        row_matrix[-1] = last_row[:-1]\n    \n    return '\\n'.join(str(sum(row)) for row in row_matrix)\n\"\"\"\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 417
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('4\\n1 100 2 2 2') == '99'",
        "num_ids": 276
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('''0 0 0''') == '0'",
        "num_ids": 355
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef",
        "test": "assert solution('69') == 0",
        "num_ids": 529
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution('''9",
        "num_ids": 322
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr1 = [int(x) for x in stdin.split()]\n    arr2 = [int(x) for x in stdin.split()]\n    tot = 0\n    for x, y in zip(arr1, arr2):\n        tot += x * y\n    print(*[tot % n for _ in range(n)])\n    return ''",
        "test": "assert solution('''",
        "num_ids": 442
    },
    {
        "number": 4191,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    digit = stdin[0]\n    if digit == \"0\":\n        return \"0\"\n    if digit == \"1\":\n        return \"1\"",
        "test": "assert solution(\"0\\n1\\n1\\n0\\n\") == \"0\"",
        "num_ids": 234
    },
    {
        "number": 4192,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    D, T, S = int(line[0]), int(line[1]), int(line[2])\n    return \"Yes\" if D / T / S == float(D / T / S) else \"No\"",
        "test": "assert solution('1000 15 80') == 'Yes'",
        "num_ids": 299
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    expected_numbers = set(numbers)\n    for i in range(N):\n        expected_numbers.add(numbers[i])\n        expected_numbers.add(numbers[i + N])\n        expected_numbers.add(numbers[i + N * 2])\n    if len(expected_numbers) == 9:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(",
        "num_ids": 222
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split(' '))\n    As = map(int, lines[1].split(' '))\n\n    # count number of distinct days\n    max_days = N // 2 + 1\n    for i in range(len(As) - 1):\n        max_days = max(max_days, As[i] // 2 + 1)\n\n    # check if we can do the assignments, using the max days\n    if max_days < max(As):\n        return '-1'\n    else:\n        return str(max_days)",
        "test": "assert solution('42 2\\n1 2\\n2 3\\n') == '-1'",
        "num_ids": 564
    },
    {
        "number": 4195,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the N-th smallest integer that would make Ringo happy.\n    >>> solution(\"1 2\")\n    '5'\n    >>> solution(\"0 1\")\n    '3'\n    >>> solution(\"2 1\")\n    '5'\n    \"\"\"\n    d, n = map(int, stdin.split())\n    return str(int(n / 100) * 100 + (n % 100 - d) * 100)\n",
        "test": "assert solution(\"0 1\") == \"100\"",
        "num_ids": 2028
    },
    {
        "number": 4196,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return str(max_common_divisor(map(int, stdin.splitlines()[1].split())))\n\ndef",
        "test": "assert solution('2 1 1') == '1'",
        "num_ids": 368
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    A = [int(x) for x in stdin[1].split()]\n    A.sort()\n    result = \"\"\n    for i in range(N):\n        result += str(A[i]) + \" \"\n    return result",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 286
    },
    {
        "number": 4198,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    mx = x // a\n    mxb = x // (a + b)\n\n    mx *= a + b\n    mxb *= b\n\n    if mx < mxb:\n        return str(mx)\n    return str(mxb)",
        "test": "assert solution('100 7 100') == '0'",
        "num_ids": 454
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    people = [int(stdin) for _ in range(n)]\n    tallest = max(people)\n\n    return len([1 for person in people if person >= k])\n",
        "test": "assert solution(\"1 1000\\n1 1000\") == \"1\\n\"",
        "num_ids": 363
    },
    {
        "number": 4200,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    items = [int(x) for x in stdin.split(\" \")]\n    votes = sum(items)\n    popular = int(votes / m)\n\n    for item in items:\n        if item < popular:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution('3 1') == 'No'",
        "num_ids": 2136
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(i) for i in stdin.split()]\n    c = [stdin.split() for _ in range(H)]\n    black = [\".#\".index(i) for row in c for i in row if i == \".\"]\n    choices = [black[x:x + W] for x in range(0, len(black), W)]\n    return str(len([x for x in choices if len(set(x)) == K]))\n",
        "test": "assert solution('.#.\\n#.#\\n#.#') == 5",
        "num_ids": 537
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    return str(2019 - (l % 2019))",
        "test": "assert solution('''1000 10''') == '0'",
        "num_ids": 144
    },
    {
        "number": 4203,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    return \"AC\" if S[0] == \"A\" and (\n        S[2] == S[1] and S[1]!= \"C\"\n    ) and all(c.islower() for c in S[3:]) else \"WA\"",
        "test": "assert solution('cbaC') == 'WA'",
        "num_ids": 299
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = '1' * n\n    k = int(stdin)\n    while len(s) <= k:\n        s += s\n    return s[k-1]\n\nprint(solution(input()))\n",
        "test": "assert solution('124444444', 4) == '2'",
        "num_ids": 1951
    },
    {
        "number": 4205,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(x) for x in stdin.strip().split()]\n    if is_sorted(p):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef",
        "test": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\\n\"",
        "num_ids": 456
    },
    {
        "number": 4206,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    digits = len(str(s))\n    if digits < 2:\n        return 0\n    if digits == 2:\n        return 1\n    return 2*(digits-2) + s % 3\n\n\n\n'''",
        "test": "assert solution('201920181') == '4'",
        "num_ids": 378
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    B = [int(x) for x in stdin.readline().strip().split(' ')]\n    C = [0] * N\n    for i in range(N):\n        C[i] = A[i] * B[i]\n    res = 0\n    for i in range(N):\n        if C[i] == 0:\n            res += 1\n    print(res)",
        "test": "assert solution('3\\n1 2 -1\\n-6 -12 6') == '3'",
        "num_ids": 668
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    \n    count = 0\n    max_count = 0\n    boots = set()\n    boots.add('?')\n    for c in l:\n        if c!= '?':\n            boots.add(c)\n    for c in r:\n        if c!= '?':\n            boots.add(c)\n    for b1 in boots:\n        for b2 in boots:\n            if b1!= b2:\n                if b1 in l and b2 in r:\n                    if b1 == '?':\n                        if b2 in l:\n                            count += 1\n                    elif b2 == '?':\n                        if b1 in r:\n                            count += 1\n                    else:\n                        if b1!= b2 and b1 == l[0] and b2 == r[0]:\n                            count += 1\n                elif b1 in l and b2 not in r:\n                    if b1 == '?':\n                        if b2 in l:\n                            count += 1\n                elif b1 not in l and b2 in r:\n                    if b2 == '?':\n                        if b1 in r:\n                            count += 1\n                elif b1!= b2 and b1 in l and b2 in r:\n                    if b1 == l[0] and b2 == r[0]:\n                        count += 1\n                elif b1!= b2 and b1 not in l and b2 not in r:\n                    if b1 in l and b2 in r:\n                        count += 1\n                if count > max_count:\n                    max_count = count\n                    max_boots = set()\n                    max_boots.add(b1)\n                    max_boots.add(b2)\n                elif count == max_count:\n                    max_boots.add(b1)\n                    max_boots.add(b2)\n                count = 0\n    print(max_count)\n    print(*max_boots)",
        "test": "assert solution('abab') == ''",
        "num_ids": 1175
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 1\n    l = []\n    r = []\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            k += 1\n        else:\n            if len(l) == 0:\n                l.append(i)\n                r.append(i)\n            else:\n                l.append(i)\n                r.append(i)\n    if k > 1:\n        print(k)\n        print(*l)\n        print(*r)\n    else:\n        print(0)\n    return \"\"\n",
        "test": "assert solution(\"1 1 1 1\") == \"\"",
        "num_ids": 2547
    },
    {
        "number": 4210,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    nums = map(int, stdin.strip().split(' '))\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] % k == 0:\n                cnt += 1\n    return str(cnt)\n\n\n\nimport sys",
        "test": "assert solution('1 1') == '0'",
        "num_ids": 1300
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    B = list(map(int, stdin.split(\" \")))\n    return str(max(sum(B[i] for i in range(N)) - sum(B[i-1] for i in range(2, N+1)), 0))",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 373
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    ab = [[a[i], b[i]] for i in range(q)]\n    cd = [[c[i], d[i]] for i in range(q)]\n    a_score = [d[i] - c[i] for i in range(q)]\n    b_score = [b[i] - a[i] for i in range(q)]\n    score = 0\n    for i in range(q):\n        if b_score[i] == ab[i][1] - ab[i][0] and a_score[i] == cd[i][1] - cd[i][0]:\n            score += d[i]\n    print(score)",
        "test": "assert solution(\"1 3 4\") == 110",
        "num_ids": 697
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n\n    max_diff = float(\"-inf\")\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(A[i] - A[j]) > max_diff:\n                max_diff = abs(A[i] - A[j])\n\n    return str(max_diff)\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 343
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return ''\n    if N == 1:\n        return '0'\n    x = y = 0\n    for _ in range(N):\n        x, y = [int(i) for i in stdin.split()]\n    return '{:.6f}'.format(((1 + math.sqrt(2)) / N) ** 2)",
        "test": "assert solution(stdin) == str(solution(stdin))",
        "num_ids": 1971
    },
    {
        "number": 4215,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(A - B)\n\nprint(solution(\"2 4\"))\n",
        "test": "assert solution(\"1 1\") == \"0\"",
        "num_ids": 307
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    result = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            if a * b > result:\n                result = a * b\n\n    return str(result)",
        "test": "assert solution(\"10000\") == 3",
        "num_ids": 257
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    assert 1 <= N <= 30\n    assert 1 <= M <= 30\n\n    votes = []\n    for _ in range(N):\n        votes.append(list(map(int, stdin.split(\" \")[1:])))\n    assert len(votes) == N\n\n    likes = []\n    for i in range(N):\n        likes.append([0] * M)\n        for j in range(M):\n            likes[i][j] = sum(votes[i][j:])\n    assert len(likes) == N\n    assert len(likes[0]) == M\n\n    return str(sum(likes[i].count(M) for i in range(N)))\n\n\"\"\"\n",
        "test": "assert solution('5 3\\n2 1 3\\n3 1 2 3\\n2 3 2') == '2'",
        "num_ids": 531
    },
    {
        "number": 4218,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if i % 2 == 1:\n            count += 1\n    return str(count / N)\n",
        "test": "assert solution('4') == '0.5'",
        "num_ids": 242
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split(' ')]\n    b = [int(x) for x in stdin[3].split(' ')]\n\n    # Each person has 1 to n-1 possible witnesses\n    for i in range(len(a)):\n        if a[i] > n or b[i] > n:\n            return \"NO\"\n        a[i] -= 1\n        b[i] -= 1\n    \n    # If all witnesses of one person is not invalid, then it is a possible honest person\n    for i in range(len(a)):\n        if a[i]!= i and b[i]!= i:\n            return \"NO\"\n    return \"YES\"",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 486
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    K = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    if K > len(S):\n        print(S + \"...\")\n    else:\n        print(S[:K])",
        "test": "assert solution('9\\nsunshine\\nsilence\\n\\nnikos\\n\\nniko\\nsol\\nschmidt') == 'niko\\nsilence\\nniko\\nsol\\nschmidt'",
        "num_ids": 355
    },
    {
        "number": 4221,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s.endswith(\"e\"):\n        s += \"s\"\n    elif s.endswith(\"s\"):\n        s += \"es\"\n    return s",
        "test": "assert solution('apple') == 'apples'",
        "num_ids": 257
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(\" \")]\n    d = [int(x) for x in stdin.split(\" \")]\n    A = [stdin.split(\" \") for _ in range(K)]\n    return \"\".join([str(a[0]) + \"\\n\" for a in A]).strip()\n\n\ndef",
        "test": "assert solution('3 4') == '2'",
        "num_ids": 823
    },
    {
        "number": 4223,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 170
    },
    {
        "number": 4224,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n    N = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    res = 0\n    for i in range(N):\n        if a[i] % 2!= 0:\n            a[i] = (a[i] * 3) // 2\n            res += 1\n        else:\n            a[i] = a[i] * 3\n            res += 1\n    return str(res)",
        "test": "assert solution(\"3\\n5 2 4\") == \"3\"",
        "num_ids": 507
    },
    {
        "number": 4225,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = list(map(int, stdin.split()))\n    l = []\n    for i in range(A):\n        l.append(1)\n    for i in range(B):\n        l.append(0)\n    for i in range(C):\n        l.append(-1)\n    l.sort(reverse=True)\n    return sum(l[:K])",
        "test": "assert solution('2 1 1 3') == 2",
        "num_ids": 296
    },
    {
        "number": 4226,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    return \"Yes\" if a[0]*4 == a[1]*2 else \"No\"",
        "test": "assert solution(\"3 3\") == \"No\"",
        "num_ids": 477
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split(\" \")))\n    graph = {i:[] for i in range(1,n+1)}\n    for _ in range(m):\n        a, b = map(int, stdin.strip().split(\" \"))\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    visited = [False]*n\n    def dfs(node, visited, graph, path):\n        visited[node-1] = True\n        for i in graph[node]:\n            if not visited[i-1]:\n                path.append(i)\n                dfs(i, visited, graph, path)\n                path.pop()\n    \n    path1 = []\n    path2 = []\n    dfs(1, visited, graph, path1)\n    dfs(1, visited, graph, path2)\n    return str(len(set(path1)&set(path2)))\n    \n\nprint(solution(input()))\n",
        "test": "assert solution(",
        "num_ids": 2059
    },
    {
        "number": 4228,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, L = [int(x) for x in stdin.split()]\n    apples = [int(x) for x in stdin.split()]\n    # TODO: determine smallest absolute difference\n    return str(min(apples))",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 542
    },
    {
        "number": 4229,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += 'FizzBuzz'\n        elif i % 3 == 0:\n            total += 'Fizz'\n        elif i % 5 == 0:\n            total += 'Buzz'\n        else:\n            total += i\n    return str(total)",
        "test": "assert solution(\"1\\n\") == \"1\"",
        "num_ids": 2094
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def get_nearest_int(x: int) -> int:\n        min_int = None\n        min_diff = None\n        for p in primes:\n            if p == x:\n                continue\n            diff = abs(x - p)\n            if min_diff is None or diff < min_diff:\n                min_diff = diff\n                min_int = p\n        return min_int\n\n    primes = list(map(int, stdin.split()))\n    x = int(stdin)\n    print(get_nearest_int(x))",
        "test": "assert solution('4 7\\n10 4 2 6 7\\n11 11') == '10'",
        "num_ids": 574
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    # A = [[0] * m for _ in range(n)]\n    #\n    # for row in range(n):\n    #     for col in range(m):\n    #         if row % 2 == 0:\n    #             A[row][col] = 1\n    #         else:\n    #             A[row][col] = 0\n    #\n    # return '\\n'.join([''.join([str(x) for x in row]) for row in A])\n    return '\\n'.join([''.join([str(x) for x in row]) for row in map(lambda x: [0] * x + [1] + [0] * (m - x - 1), [n // 2] * 2)])\n\nprint(solution(input()))\n",
        "test": "assert solution('1 1') == '0'",
        "num_ids": 412
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_strings = stdin.split(' ')\n    n = int(num_strings[0])\n    k = int(num_strings[1])\n    \n    numbers = num_strings[2].split(' ')\n    \n    for i in range(n):\n        numbers[i] = int(numbers[i])\n    \n    numbers.sort()\n    \n    for i in range(10 ** 9):\n        if numbers.count(i) >= k:\n            return str(i)\n    \n    return str(-1)",
        "test": "assert solution('7 3\\n3 7 5 1 10 3 20') == '-1'",
        "num_ids": 404
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [[x for x in stdin.strip()] for _ in range(n)]\n    tot = n*m\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if i == 0 or grid[i-1][j] == '*' or j == 0 or grid[i][j-1] == '*':\n                    print(-1)\n                    return\n    print(tot)\n    for i in range(n):\n        for j in range(m):\n            s = 0\n            if i > 0 and grid[i-1][j] == '*':\n                s += 1\n            if j > 0 and grid[i][j-1] == '*':\n                s += 1\n            if i < n-1 and grid[i+1][j] == '*':\n                s += 1\n            if j < m-1 and grid[i][j+1] == '*':\n                s += 1\n            print(s, end=' ')\n        print()\n    return\n",
        "test": "assert solution('''3 3",
        "num_ids": 2443
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys",
        "test": "assert solution('abacd') == 'abac'",
        "num_ids": 287
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [map(int, line.split()) for line in stdin.splitlines()]\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    # print(graph)\n    dfs(0, graph, [0] * n)\n    # print(todo)\n    return \"NO\" if todo else \"YES\"\ndef",
        "test": "assert solution(\"2\") == \"NO\"",
        "num_ids": 330
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    lines = [list(map(int, x.split())) for x in stdin.splitlines()[1:n]]\n    points = set(x for x in range(1, m+1))\n\n    for l, r in lines:\n        for i in range(l, r):\n            points.discard(i)\n    \n    print(len(points))\n    print(' '.join(map(str, list(points))))\n\n\n\ndef",
        "test": "assert solution(input(\"2 2\")) == input(\"\")",
        "num_ids": 763
    },
    {
        "number": 4237,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split(' ')]\n    ans = 0\n    for i in range(A, B + 1):\n        if i % C!= 0 and i % D!= 0:\n            ans += 1\n    return str(ans)",
        "test": "assert solution(\"4 9 2 3\") == \"2\"",
        "num_ids": 234
    },
    {
        "number": 4238,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum = 0\n    while(N):\n        sum += N % 10\n        N = N // 10\n\n    if (sum % 9 == 0):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('123456789') == 'Yes'",
        "num_ids": 291
    },
    {
        "number": 4239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    M = 0\n    i = 1\n    while N > 1:\n        i += 1\n        if N % i == 0:\n            M += i\n        i += 1\n        if N % i == 0:\n            M += i\n    return str(M)",
        "test": "assert solution('''2",
        "num_ids": 371
    },
    {
        "number": 4240,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return 'No'\n    if s == t:\n        return 'Yes'\n    # s becomes t after at most n operations\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if s == t:\n            return 'Yes'\n    return 'No'\n",
        "test": "assert solution('hello world') == 'Yes'",
        "num_ids": 286
    },
    {
        "number": 4241,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n",
        "test": "assert solution('aabcbc') == '2'",
        "num_ids": 211
    },
    {
        "number": 4242,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, K] = [int(x) for x in stdin.split()]\n    ans = 0\n    i = 1\n    while i <= A:\n        if A % i == 0 and B % i == 0:\n            ans = i\n            i += 1\n        else:\n            i += 1\n    return str(ans)",
        "test": "assert solution('1 1 1') == '1'",
        "num_ids": 372
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(stdin * 500 + 500 * (stdin - 1) // 2)\n\nprint(solution(input()))\n",
        "test": "assert solution('15') == '36000'",
        "num_ids": 252
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(stdin) == expected_output",
        "num_ids": 320
    },
    {
        "number": 4245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.strip().split(' ')\n    return str(int(A) * int(B))",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 237
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"",
        "test": "assert solution(\"CSS\", \"CSR\") == \"2\"",
        "num_ids": 201
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    permutation = stdin.readline().strip().split()\n    permutation = [int(x) for x in permutation]\n    if len(permutation)!= n:\n        raise ValueError('Number of elements in permutation ({}) is not equal to the number of elements in the input ({})'.format(len(permutation), n))\n    # Set up an array to store the number of elements that satisfy the condition\n    numberOfElements = 0\n    for i in range(n):\n        # p_i is the second smallest number among p_1, p_2, p_3\n        if i > 0:\n            if permutation[i] < permutation[i - 1]:\n                numberOfElements += 1\n        # p_i is the second smallest number among p_2, p_3, p_4\n        if i > 1:\n            if permutation[i] < permutation[i - 2]:\n                numberOfElements += 1\n        # p_i is the second smallest number among p_3, p_4, p_5\n        if i > 2:\n            if permutation[i] < permutation[i - 3]:\n                numberOfElements += 1\n    return str(numberOfElements)",
        "test": "assert solution(\"2 3 1 5 4\") == \"2\"",
        "num_ids": 1225
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution 1.\n    Example:\n\n    Input:\n    5\n    2.26 1.44\n    2.28 0.64\n    2.30 -0.30\n    1.58 0.66\n    3.24 0.66\n    Output:\n    5.410\n    \"\"\"\n    n = int(stdin)\n    data = [tuple(map(float, line.split())) for line in stdin.strip().split(\"\\n\")]\n    xs, ys = zip(*data)\n    xs, ys = list(xs), list(ys)\n    xs.sort()\n    ys.sort()\n    res = 0\n    for i in range(n):\n        if i < n - 1:\n            res += (xs[i + 1] - xs[i]) * (ys[i] + ys[i + 1]) / 2.0\n        if i > 0:\n            res -= (xs[i] + xs[i - 1]) * (ys[i - 1] + ys[i]) / 2.0\n    return f\"{res:.2f}\"\n\n\ndef",
        "test": "assert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n') == '6.040\\n'",
        "num_ids": 1097
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(n, m, caffeine):\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        dp = [sys.maxsize] * (n + 1)\n        dp[0] = 0\n        dp[1] = 0\n        for cup in caffeine:\n            for i in range(n - cup + 1):\n                dp[i + cup] = min(dp[i + cup], dp[i] + (n - i - cup + 1))\n        return dp[-1]\n    n, m = map(int, stdin.split())\n    caffeine = list(map(int, stdin.split()))\n    return str(dfs(n, m, caffeine))\n\n\nprint(solution(stdin))\n\n\"\"\"\n\n\ndef",
        "test": "assert solution('5 26\\n5 5 5 5 5\\n5 5 5 5 5') == '-1'",
        "num_ids": 709
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('''10 4",
        "num_ids": 528
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nfrom collections import deque\n\nn, m = [int(x) for x in stdin.split()]\na = [[int(x) for x in stdin.split()] for _ in range(n)]\n\nk = 0\nfor i in range(n):\n    s = deque([a[i][0]])\n    for j in range(1, m):\n        s.appendleft(a[i][j])\n        while s[0] - s[-1] > k:\n            k += 1\n            if k == 3:\n                k = 0\n                break\n            s.pop()\n    if k == 0:\n        break\n    for j in range(1, m):\n        s.append(a[i][j])\n        while s[0] - s[-1] > k:\n            k += 1\n            if k == 3:\n                k = 0\n                break\n            s.popleft()\n        if k == 0:\n            break\n    if k == 0:\n        break\n\nprint(k)\n",
        "test": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '0'",
        "num_ids": 686
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\n\"\"\"\n",
        "test": "assert solution('xxxxxiiixxxiiixx') == 19",
        "num_ids": 262
    },
    {
        "number": 4253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    r = stdin.strip()\n    if r.isdigit():\n        r = int(r)\n        if 1 <= r <= 100:\n            area = 3 * (r ** 2)\n            print(area)\n        else:\n            print(\"Invalid Input\")\n    else:\n        print(\"Invalid Input\")",
        "test": "assert solution('7') == '147'",
        "num_ids": 315
    },
    {
        "number": 4254,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    values = [int(x) for x in stdin.split()]\n    return 'unsafe' if values[1] >= values[0] else'safe'",
        "test": "assert solution('4 0') =='safe'",
        "num_ids": 199
    },
    {
        "number": 4255,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split()]\n    return str(int(inputs[0] * inputs[1] / 2))\n",
        "test": "assert solution(\"3 4 5\") == \"6\"",
        "num_ids": 305
    },
    {
        "number": 4256,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split(' ')]\n    return str(sum([(A * i) // B for i in range(C + 1)]))",
        "test": "assert solution('2 11 10') == '5'",
        "num_ids": 298
    },
    {
        "number": 4257,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split()]\n    return str(A * B)",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 186
    },
    {
        "number": 4258,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Read A B T\n    A, B, T = [int(x) for x in stdin.split()]\n    \n    # Two biscuits have to be produced exactly one second after activation\n    biscuits = 0\n    \n    # Iterate over the activation time in 1 second increments\n    for seconds in range(1, T + 1):\n        # Calculate the biscuit produced for the current activation time\n        biscuits += B if seconds % A == 0 else 0\n    \n    # Return the number of biscuits produced\n    return str(biscuits)",
        "test": "assert solution(\"10 10 10\") == \"10\"",
        "num_ids": 541
    },
    {
        "number": 4259,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split()]\n    if a % k == 0 and b <= (a+b) % k:\n        return 'OK'\n    return 'NG'",
        "test": "assert solution(\"7\\n500 200\\n\") == \"NG\"",
        "num_ids": 313
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = tuple(map(int, stdin.strip().split()))\n    return str(round(float(num2) / num1, 3))",
        "test": "assert solution('2 2') == '0.3333...'",
        "num_ids": 253
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return '\\n'.join(map(str, [transfer_bottle(int(x)) for x in stdin.split(' ')]))\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 342
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    p = [int(i) for i in stdin.split(\" \")]\n    q = [int(i) for i in stdin.split(\" \")]\n    print(abs(p.index(min(p)) - p.index(min(q))))",
        "test": "assert solution('3 1 1') == '0'",
        "num_ids": 549
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(input()))\n",
        "test": "assert solution('ATCODER') == 'ATC'",
        "num_ids": 135
    },
    {
        "number": 4264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(int(math.ceil(math.log10(n)) + 1))\n\nprint(solution(input()))",
        "test": "assert solution('16') == 0",
        "num_ids": 247
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    d = defaultdict(int)\n    for i in range(min(len(s), len(t))):\n        if s[i]!= t[i]:\n            d[s[i]] += 1\n    return d\n\nassert solution(stdin) == {'h': 2, 't': 2}\n\"\"\"\n",
        "test": "assert solution(\"cupofhottea\") == 4",
        "num_ids": 285
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 249
    },
    {
        "number": 4267,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return \"Yes\" if x >= 30 else \"No\"\n",
        "test": "assert solution('-25') == 'No'",
        "num_ids": 184
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "test": "assert solution('''2 3",
        "num_ids": 453
    },
    {
        "number": 4269,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get current security code and compare it to the hard-to-enter security code.\n    >>> solution(\"3776\")\n    'Good'\n    \"\"\"\n    hard_to_enter = int(stdin)\n    current_code = int(stdin[:4])\n    if current_code < hard_to_enter:\n        return \"Good\"\n    if current_code > hard_to_enter:\n        return \"Bad\"\n    else:\n        return \"Good\"",
        "test": "assert solution('1') == 'Good'",
        "num_ids": 335
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    values = [float(x) for x in stdin.split()]\n    pot = []\n    for i in range(N):\n        pot.append([values[i], i])\n\n    while N > 1:\n        pot = sorted(pot, key=lambda x: x[0])\n        v1, i1 = pot.pop()\n        v2, i2 = pot.pop()\n        pot.append([(v1 + v2) / 2, i1])\n        N -= 1\n\n    return str(pot[0][0])\n\nprint(solution(input()))\n",
        "test": "assert solution('10 9 8 7 6 5 4 3 2 1') == '2.5'",
        "num_ids": 684
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = [int(x) for x in stdin[1].split()]\n    B = [int(x) for x in stdin[2].split()]\n    C = [int(x) for x in stdin[3].split()]\n    sum = 0\n    for i in range(N):\n        sum += A[i] + B[i]\n    sum += C[-1]\n    return str(sum)\n\nprint(solution(input()))",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 540
    },
    {
        "number": 4272,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass",
        "test": "assert solution('') == None",
        "num_ids": 504
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return str(1)\n    s = stdin[1:]\n    d = {}\n    for i in range(0, n):\n        if s[i][0] not in d:\n            d[s[i][0]] = 1\n        else:\n            d[s[i][0]] += 1\n    if len(d) > 1:\n        return str(0)\n    return str(pow(d[s[0][0]], 3))\n\nprint(solution(input()))\n\"\"\"\n",
        "test": "assert solution('MASHIKE\\nHABORO\\nRUMOI\\nOBIRA\\nHOROKANAI') == '2'",
        "num_ids": 600
    },
    {
        "number": 4274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here\n    pass",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 114
    },
    {
        "number": 4275,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    if len(string)!= 6 or not string.isalpha():\n        return 'No'\n    if string[2] == string[3] and string[4] == string[5]:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution(\"sippuu\") == \"Yes\"",
        "num_ids": 310
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(x) for x in stdin.split(' ')]\n    costs = [int(x) for x in stdin.split(' ')]\n    c_0 = costs[0]\n    time_t_0 = costs[1]\n    c_i, time_t_i = 0, 0\n    if time_t_0 <= T:\n        c_0, time_t_0 = cost[1], time[1]\n    else:\n        c_0, time_t_0 = cost[0], time[0]\n    return min(c_i, time_t_i)",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 614
    },
    {
        "number": 4277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(n * min(a, b) + (n - 1) * min(a, b) // 2)",
        "test": "assert solution('1 5 4') == '4'",
        "num_ids": 256
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"blue\\nblue\\nblue\\nblue\\nblue\") == \"6\"",
        "num_ids": 513
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('5') == '5'",
        "num_ids": 108
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    assert 1 <= k <= n - 1\n    roads = [tuple(int(i) for i in line.split()) for line in stdin.split('\\n')[1:-1]]\n    n_good_cities = 0\n    for i, road in enumerate(roads):\n        good_cities = n_good_cities\n        for city in road:\n            if good_cities >= k:\n                break\n            if good_cities == 0:\n                break\n            if good_cities <= k - 1:\n                good_cities += 1\n        else:\n            n_good_cities = n_good_cities + 1 if good_cities < k else 0\n\n    return f'{n_good_cities}\\n' + '\\n'.join(str(i) for i in range(1, n_good_cities+1))",
        "test": "assert solution(\"5 5\") == \"5\"",
        "num_ids": 1245
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(c) for c in stdin.readline().strip().split(' ')]\n    print(str(max(len(set(filter(lambda h: h <= n, range(n + 1)))) - 1, len(set(filter(lambda h: h < n, x))))),\n          str(max(len(set(filter(lambda h: h >= 0, x))) - 1, len(set(filter(lambda h: h > n, x))))))",
        "test": "assert solution('''9''') == '''3 8",
        "num_ids": 415
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    '''https://www.codewars.com/kata/5b11b9e8e1b5d97c42000052'''\n    if stdin == '':\n        return 'Empty'\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1 2'\n    elif n == 3:\n        return '2 1'\n    ans = [0] * n\n    ans[0] = 1\n    ans[1] = 2\n    for i in range(2, n):\n        ans[i] = (ans[i - 1] + 1) % n\n    return''.join(str(ans[i]) for i in range(n))",
        "test": "assert solution(\"3\\n2 3\\n1 2\\n1 3\\n2 3\") == \"2 3 1\"",
        "num_ids": 794
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i] -= 5\n            a[j] -= 5\n            ans = max(ans, min(a[i], a[j]))\n    return str(ans)",
        "test": "assert solution('10\\n1 1 1 1 1 1 1 1 1 1 1') == '1'",
        "num_ids": 539
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        k, n, a, b = map(int, stdin.readline().split())\n        print(-1 if (a <= k) else n - k)\n    return \"\"\n\n\n\nprint(solution(stdin.readlines()))",
        "test": "assert solution('6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'",
        "num_ids": 567
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('''",
        "num_ids": 522
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        x, y, w = [int(x) for x in stdin.split()]\n        edges.append((x, y, w))\n    return str(get_min_cost(n, a, edges))\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 562
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('10 1 1') == '-1'",
        "num_ids": 804
    },
    {
        "number": 4288,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    return \"Yes\" if (A == B == C) or (A!= B!= C) else \"No\"",
        "test": "assert solution('5 7 5') == 'Yes'",
        "num_ids": 339
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = [int(x) for x in stdin.readline().strip().split()]\n    a = int(stdin.readline().strip())\n    h.sort()\n    h.reverse()\n    i = 0\n    while a:\n        h0 = h[0]\n        m = a - h0 * 0.006\n        i += 1\n        if m < 0:\n            m += h0\n        else:\n            a -= h0\n            h = h[1:]\n        if len(h) == 0:\n            break\n    return str(i)\n",
        "test": "assert solution('''2",
        "num_ids": 489
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.strip().split())\n    return str(solution2(m, n))\n\ndef",
        "test": "assert solution('4 4') == '0'",
        "num_ids": 251
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the substring that repeats the most in the given string.\n    Args:\n        stdin: The input string.\n\n    Returns:\n        The substring that repeats the most in the given string.\n    '''\n    n, q = [int(x) for x in stdin.split(' ')]\n    s = stdin[n + 1:]\n    result = []\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.split(' ')]\n        result.append(count_repeats(s, l, r))\n\n    return '\\n'.join(str(x) for x in result)\n\ndef",
        "test": "assert solution('ACGT') == 0",
        "num_ids": 1955
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 707
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    PQR = stdin.split()\n    p = int(PQR[0])\n    q = int(PQR[1])\n    r = int(PQR[2])\n    print(min(p+q, p+r, q+r, q+p, q+p))\n",
        "test": "assert solution(\"1 1 1\") == \"0\"",
        "num_ids": 1935
    },
    {
        "number": 4294,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, A = stdin.split(' ')\n    return str(0 if int(X) < int(A) else 10)",
        "test": "assert solution('3 5') == '0'",
        "num_ids": 240
    },
    {
        "number": 4295,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    _, K = map(int, stdin.strip().split(\" \"))\n    return str(abs(K - K % 10))",
        "test": "assert solution('1 4') == '0'",
        "num_ids": 501
    },
    {
        "number": 4296,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return \"win\" if A_1+A_2+A_3 is greater than or equal to 22, or \"bust\" if it is not.\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n    return \"win\" if (a + b + c) >= 22 else \"bust\"",
        "test": "assert solution('2 6 2') == 'bust'",
        "num_ids": 356
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line)\n    answer = 0\n    while answer % n!= 0:\n        answer += 1\n\n    return str(answer)\n",
        "test": "assert solution('6') == '2'",
        "num_ids": 275
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    return str(int(ceil(n / d)))\n\nassert(solution('6 2') == '2')\nassert(solution('8 4') == '2')\nassert(solution('1 4') == '1')\nassert(solution('2 3') == '2')\nassert(solution('4 2') == '4')\nassert(solution('9 4') == '3')\nassert(solution('5 1') == '2')\nassert(solution('4 4') == '1')\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\"\ndef",
        "test": "assert solution('20 4') == '18'",
        "num_ids": 455
    },
    {
        "number": 4299,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    result = ''\n    if num > 9:\n        result = 'bon'\n    elif num >= 6:\n        result = 'pon'\n    elif num == 5:\n        result = 'hon'\n    else:\n        result = 'hon'\n    return result",
        "test": "assert solution('20') == \"bon\"",
        "num_ids": 282
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    health_points = int(stdin.readline())\n    dishes = [int(dish) for dish in stdin.readline().split()]\n    return str(solution_helper(health_points, dishes))\n\ndef",
        "test": "assert solution('1\\n1 1 1') == '0'",
        "num_ids": 453
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    if N < 2 or N > 200000: raise ValueError\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    if len(A)!= N: raise ValueError\n    if len(set(A))!= N: raise ValueError\n    if len(A) < 2: raise ValueError\n    max_non_i = -1\n    for i in range(N):\n        if A[i] < 1 or A[i] > 200000: raise ValueError\n        if i > 0:\n            max_non_i = max(max_non_i, max(A[:i] + A[i+1:]))\n    return str(max_non_i)\n\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 365
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"Coins: \" + str(2 * (A + B) - 2 * min(A, B))",
        "test": "assert solution('30 40') == '45'",
        "num_ids": 359
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    mx = arr[0]\n    lst = []\n    for i in range(1, n):\n        if mx == arr[i]:\n            lst.append(i)\n    print(lst[k-1] * 2)",
        "test": "assert solution('1 2') == '10'",
        "num_ids": 247
    },
    {
        "number": 4304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(v) for v in stdin.split(' ')]\n    return '{:d}'.format(min(a, b) - 1)",
        "test": "assert solution('1 5') == '0'",
        "num_ids": 249
    },
    {
        "number": 4305,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    health, attack = map(int, stdin.split())\n    attacks = 0\n    while health > 0:\n        health -= attack\n        attacks += 1\n    return str(attacks)",
        "test": "assert solution('10 4') == '3'",
        "num_ids": 274
    },
    {
        "number": 4306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    return str(max(0, (B - A) - (D - C)))",
        "test": "assert solution(\"0 50 0 50\") == \"50\"",
        "num_ids": 316
    },
    {
        "number": 4307,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i * i > n:\n            break\n        if i % 2 == 1 and (i * i) <= n:\n            count += 1\n    return str(count)",
        "test": "assert solution('1') == '1'",
        "num_ids": 276
    },
    {
        "number": 4308,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    return str(abs(N - 2 * K))",
        "test": "assert solution('''7 3''') == '1'",
        "num_ids": 374
    },
    {
        "number": 4309,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # Return the first ABC where all the digits are the same.\n    abc = str(N)\n    return abc\n\nassert solution(111) == '111'\nassert solution(100) == '100'\nassert solution(999) == '999'\nassert solution(1000) == '1000'\nassert solution(101) == '101'\nassert solution(111) == '111'\nassert solution(1) == '1'\nassert solution(12) == '12'\nassert solution(7) == '7'\nassert solution(0) == '0'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(101) == '101'\nassert solution(10) == '10'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(100) == '100'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution(97) == '97'\nassert solution(99) == '99'\nassert solution(10) == '10'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(1) == '1'\nassert solution(123) == '123'\nassert solution(11) == '11'\nassert solution(0) == '0'\nassert solution(98) == '98'\nassert solution(98) == '98'\nassert solution(9) == '9'\nassert solution",
        "test": "assert solution('111') == '111'",
        "num_ids": 2102
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    costs = [int(cost) for cost in stdin.split()]\n    A = costs[:3]\n    B = [abs(x - y) for x, y in zip(A, costs[3:])]\n    print(sum(A) + sum(B))",
        "test": "assert solution('1 2 3') == '4'",
        "num_ids": 283
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    print(solution)\n",
        "test": "assert solution('1') == '1'",
        "num_ids": 204
    },
    {
        "number": 4312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(n) for n in stdin.split()]\n    if A > 0 and B > 0 and C > 0 and D > 0:\n        while A > 0 and B > 0 and C > 0 and D > 0:\n            if A > 0 and B > 0:\n                if A > D:\n                    A = A - D\n                    B -= D\n                else:\n                    D = D - A\n                    B -= A\n            elif A > 0 and C > 0:\n                if A > C:\n                    A = A - C\n                    C = 0\n                else:\n                    C = C - A\n                    A = 0\n            elif B > 0 and D > 0:\n                if B > D:\n                    B = B - D\n                    D = 0\n                else:\n                    D = D - B\n                    B = 0\n            else:\n                break\n        if A + B <= 0:\n            return \"Yes\"\n        return \"No\"\n    return \"\"\n\ndef",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 341
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    gems = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n    return max_gem_cost(gems, costs)\n\ndef",
        "test": "assert solution('1\\n1\\n1\\n1') == '0'",
        "num_ids": 288
    },
    {
        "number": 4314,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums = [\n        list(filter(lambda x: x!= '', map(lambda x: x.strip(), row.split(','))))\n        for row in stdin.strip().split('\\n')\n    ]\n\n    return ''.join(\n        ''.join(num for num in row if num == '#') for row in nums\n    )\n\nprint(solution(''))\n",
        "test": "assert solution('1 1\\n#') == '#'",
        "num_ids": 193
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    from math import pi\n\n    r = int(stdin.readline().strip())\n    return '{0:.2f}'.format(2 * pi * r)\n\nassert(solution('''1''') == '6.28')\nassert(solution('''2''') == '12.57')\nassert(solution('''100''') == '523.69')\n\ndef",
        "test": "assert solution('10') == ''",
        "num_ids": 413
    },
    {
        "number": 4316,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    char_set = set()\n    for char in stdin:\n        if char in char_set:\n            char_set.remove(char)\n        else:\n            char_set.add(char)\n\n    return \"Yes\" if len(char_set) == 2 else \"No\"",
        "test": "assert solution(\"ASSA\" * 2) == \"No\"",
        "num_ids": 361
    },
    {
        "number": 4317,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n\n    return str(max([a + b, a - b, a * b]))",
        "test": "assert solution('-13 3') == '-10'",
        "num_ids": 209
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, _ = [int(x) for x in stdin.split()]\n    M = [int(x) for x in stdin.split()]\n    return solution(N, M)\n\nprint(solution(input()))\n",
        "test": "assert solution('1 1 1 1 1') == '0'",
        "num_ids": 488
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = stdin.readline().strip().split()\n    steps = [int(e) for e in stdin.readline().strip().split()]\n    count = 0\n    result = []\n    for i in range(1, n + 1):\n        if i in arr:\n            count += steps[arr.index(i)]\n            result.append(count)\n    return \"\\n\".join(str(e) for e in result)\n\nassert(solution('''7\n1 2 3 1 2 3 4\n''') == '2\\n3 4\\n')\nassert(solution('''4\n1 1 1 1\n''') == '4\\n1 1 1 1\\n')\nassert(solution('''5\n1 2 1 2 1\n''') == '1\\n5\\n1 1 1 1\\n')",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 580
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        k = 1\n        while True:\n            if n - (2**(k-1)*k) == 0:\n                break\n            else:\n                k += 1\n        print(k)\n",
        "test": "assert solution(\"3\") == \"1\"",
        "num_ids": 416
    },
    {
        "number": 4321,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    \n    res = n\n    \n    for i in range(k):\n        res = str(res)[:-1]\n    \n    return res\n\nprint(solution(\"512 4\"))\n\nprint(solution(\"1000000000 9\"))\n\nprint(solution(\"12545521 56\"))\n\nprint(solution(\"21000000009 9\"))\n\nprint(solution(\"3100000000000000000000000 9\"))\n",
        "test": "assert solution(\"1000000000 9\") == \"1\"",
        "num_ids": 352
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n    print(n)\n    print(arr)\n    answer = []\n    for i in range(n):\n        height = arr[i]\n        for j in range(n):\n            if j == i:\n                continue\n            if abs(arr[i] - arr[j]) <= 1:\n                height = arr[i] if arr[i] > arr[j] else arr[j]\n                break\n        answer.append(height)\n    return \" \".join(map(str, answer))",
        "test": "assert solution('11\\n6 4 5 3 2 3 1 7 7') == '3\\n2 2 2'",
        "num_ids": 881
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return '0'\n    if n == 0:\n        return '-1'\n    if m == 0:\n        return '-1'\n    s = [0]\n    for _ in range(n):\n        s.append(int(stdin.readline()))\n    s.sort()\n    r = []\n    for _ in range(m):\n        r.append(int(stdin.readline()))\n    r.sort()\n    for i in range(1, m + 1):\n        if i <= sum(s[1:]):\n            break\n        if i == r[-1]:\n            print('-1')\n            return\n    for i in range(1, n + 1):\n        if i <= sum(s[1:]) and i <= r[-1]:\n            break\n        if i == s[i]:\n            continue\n        if i - s[i] > s[i - 1]:\n            print('-1')\n            return\n    print(i)\nsolution(stdin)\n\n\"\"\"\n",
        "test": "assert solution('1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1",
        "num_ids": 1762
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    test_cases = [stdin.readline().strip() for _ in range(t)]\n\n    for case in test_cases:\n        n, a, b = map(int, case.split())\n        if n % a!= 0:\n            print(\"\")\n            continue\n        res = \"\"\n        for i in range(n // a):\n            res += \"\".join(sorted(stdin.readline().strip()))\n        print(res)",
        "test": "assert solution(stdin) == expected",
        "num_ids": 338
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    length, width, capacity = [int(x) for x in stdin.split()]\n    takoyaki = lambda x: int(ceil(width / x))\n    return str(int((capacity - length) * width / takoyaki(capacity)))",
        "test": "assert solution(\"3 2 1\") == 1",
        "num_ids": 301
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return\n",
        "test": "assert solution('-1') == '0'",
        "num_ids": 123
    },
    {
        "number": 4327,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    return str(int(m/3) + int(m/3/2))",
        "test": "assert solution('0 0') == '0'",
        "num_ids": 263
    },
    {
        "number": 4328,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a + b)",
        "test": "assert solution('3 3') == '6'",
        "num_ids": 188
    },
    {
        "number": 4329,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(stdin) == \"Yes\"",
        "num_ids": 210
    },
    {
        "number": 4330,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(value) for value in stdin.split()]\n    if A == B:\n        return 'IMPOSSIBLE'\n\n    k = A - (B - A)\n    return str(k) if abs(A - k) == abs(B - k) else 'IMPOSSIBLE'",
        "test": "assert solution('1 2') == 'IMPOSSIBLE'",
        "num_ids": 347
    },
    {
        "number": 4331,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('123')\n    'Yes'\n    >>> solution('124')\n    'No'\n    >>> solution('126')\n    'Yes'\n    >>> solution('127')\n    'No'\n    >>> solution('1218')\n    'Yes'\n    >>> solution('999')\n    'No'\n    '''\n    n = int(stdin)\n    if n % 10 == 7:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(117) == 'Yes'",
        "num_ids": 307
    },
    {
        "number": 4332,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % sum(int(i) for i in stdin) == 0 else \"No\"",
        "test": "assert solution('12') == 'Yes'",
        "num_ids": 1340
    },
    {
        "number": 4333,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return '{} {} {} {}'.format(\n        x1 + (x2 - x1) // 2,\n        y1 + (y2 - y1) // 2,\n        x2 + (x1 - x2) // 2,\n        y2 + (y1 - y2) // 2\n    )",
        "test": "assert solution(\"0 0 0 0\") == \"0 0 0 0\"",
        "num_ids": 2022
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    A, B = [int(x) for x in stdin.split()]\n    return str(A * B - B) + \" \" + str(A * B)\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 171
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('cccc') == 'No'",
        "num_ids": 259
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    width, height, x, y = [int(x) for x in stdin.split()]\n    if width < x or height < y:\n        return 0\n    if x == 0 and y == 0:\n        return 1\n    return '{:.9f}'.format(max(width*height - width*(y-1) - height*(x-1), 0))\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution('7 4 3 1') == '11.000000 1'",
        "num_ids": 762
    },
    {
        "number": 4337,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin.split()))[-3]\n\n\ndef",
        "test": "assert solution('Three') == 'Three'",
        "num_ids": 369
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n",
        "test": "assert solution('5 5 6\\n1 2 6 10 3') == 2",
        "num_ids": 354
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    return str(solution2(n, a, b))\n\ndef",
        "test": "assert solution('''5",
        "num_ids": 450
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[(i + 1) % n]\n        for j in range(1, n):\n            b[i] = b[i] ^ a[(i + j) % n]\n    return''.join([str(x) for x in b])\n\nprint(solution(input()))\n",
        "test": "assert solution(input) == expected",
        "num_ids": 1370
    },
    {
        "number": 4341,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, m = int(input[0].split(' ')[0]), int(input[0].split(' ')[1])\n    graph = [[] for i in range(n)]\n    visited = [False for i in range(n)]\n    for i in range(1, m + 1):\n        s = input[i].split(' ')\n        graph[int(s[0]) - 1].append(int(s[1]) - 1)\n        graph[int(s[1]) - 1].append(int(s[0]) - 1)\n    visited[0] = True\n    result = 0\n    for i in range(n):\n        if visited[i]:\n            continue\n        stack = [i]\n        visited[i] = True\n        while len(stack):\n            a = stack.pop(0)\n            for j in graph[a]:\n                if not visited[j]:\n                    visited[j] = True\n                    stack.append(j)\n        result += 1\n    return str(result)",
        "test": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n5 4') == '2'",
        "num_ids": 1326
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    '''Find all nice edges in a tree'''\n    n = int(stdin.readline())\n    colors = [int(i) for i in stdin.readline().split()]\n    edges = [set() for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = [int(i) - 1 for i in stdin.readline().split()]\n        edges[a].add(b)\n        edges[b].add(a)\n\n    def dfs(v, color):\n        for u in edges[v]:\n            if colors[u] == color:\n                continue\n            colors[u] = 2 - color\n            dfs(u, 2 - color)\n\n    red, blue = 0, 0\n    for i in range(n):\n        if colors[i] == 0:\n            dfs(i, 0)\n        elif colors[i] == 1:\n            red += 1\n        else:\n            blue += 1\n    return f'{red} {blue}'\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 691
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    pass",
        "test": "assert solution('''5",
        "num_ids": 557
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n\n'''\nSuppose we have two different students, they both like the same number of tennis balls, but one of them has a very low ranking and another one has a very high ranking.\n\nIf a team is formed with these two students, what will their ratings be? The numbers must be distinct.\n\nFor example, if both students have the same number of balls:\n\nBob has 5 balls, Alice has 10 balls, the team will be formed with Bob and Alice.\n\nBob has a low ranking: 1, Alice has a high ranking: 9. Bob and Alice have different rankings so they will not form a team.\n\nIf the team has three students, there will be one pair of students whose rankings are the same:\n\nBob has 5 balls, Alice has 10 balls, James has 5 balls, the team will be formed with Bob and Alice.\n\nBob has a low ranking: 1, Alice has a high ranking: 9. Bob and Alice have the same rankings so they will not form a team.\n\nIf the team has four students, there will be two pairs of students whose rankings are the same:\n\nBob has 5 balls, Alice has 10 balls, James has 5 balls, Jennifer has 10 balls, the team will be formed with Bob, Alice, James and Jennifer.\n\nBob has a low ranking: 1, Alice has a high ranking: 9. Bob and Alice have the same rankings so they will not form a team.\n\nIf the team has five students, there will be three pairs of students whose rankings are the same:\n\nBob has 5 balls, Alice has 10 balls, James has 5 balls, Jennifer has 10 balls, James has 5 balls, the team will be formed with Bob, Alice, James and Jennifer.\n\nBob has a low ranking: 1, Alice has a high ranking: 9. Bob and Alice have the same rankings so they will not form a team.\n\nIf the team has six students, there will be two pairs of students whose rankings are the same:\n\nBob has 5 balls, Alice has 10 balls, James has 5 balls, Jennifer has 10 balls, James has 5 balls, Jennifer has 10 balls, the team will be formed with Bob, Alice, James and Jennifer.\n\nBob has a low ranking: 1, Alice has a high ranking: 9. Bob and Alice have the same rankings so they will not form a team.\n\nIf the team has seven students, there will be one pair of students whose rankings are the same:\n\nBob has 5 balls, Alice has 10 balls, James has 5 balls, Jennifer has 10 balls, James has 5 balls, Jennifer has 10 balls, James has 5 balls, the team will be formed with Bob, Alice, James and Jennifer.\n\nBob has a low ranking: 1, Alice has a high ranking: 9. Bob and Alice have the same rankings so they will not form a team.\n\nIf the team has eight students, there will be no pair of students whose rankings are the same:\n\nBob has 5 balls, Alice has 10 balls, James has 5 balls, Jennifer has 10 balls, James has 5 balls, Jennifer has 10 balls, James has 5 balls, the team will be formed with Bob, Alice, James and Jennifer.\n\nBob has a low ranking: 1, Alice has a high ranking: 9. Bob and Alice have the same rankings so they will not form a team.\n\n'''\n\ndef",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 906
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    if n < 2:\n        return \"NO\"\n\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if n == 2:\n        if a[0] > a[1]:\n            return \"YES\"\n\n        if a[0] < a[1]:\n            return \"NO\"\n\n        if a[0] == a[1]:\n            return \"YES\"\n\n    res = [0 for _ in range(n)]\n\n    for i in range(n):\n        if a[i] < a[i-1]:\n            if a[i-1] > a[i-2] and i > 1:\n                res[i] = 1\n            else:\n                res[i] = 0\n        else:\n            res[i] = 0\n\n    return \"YES\" + \"\".join(map(str, res))\n\n\ndef",
        "test": "assert solution('''5",
        "num_ids": 872
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = [0] * n\n    for _ in range(n):\n        l, v, l, r = map(int, stdin.split())\n        l_ = l // v\n        r_ = r // v\n        for i in range(l_, r_ + 1):\n            if i % v == 0:\n                res[i - l] += 1\n    return '\\n'.join(map(str, res))",
        "test": "assert solution('''4",
        "num_ids": 428
    },
    {
        "number": 4347,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '1'\n    if n == 1:\n        return '0'\n    dp = [0 for _ in range(n)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        dp[i] = dp[i-1] + dp[i-2]\n    return str(dp[n-1] * dp[n-2])",
        "test": "assert solution('''2''') == '1'",
        "num_ids": 1904
    },
    {
        "number": 4348,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given a string $s$ consisting of $n$ lowercase Latin letters. Polycarp wants to remove exactly $k$ characters ($k \\le n$) from the string $s$. Polycarp uses the following algorithm $k$ times:\n\n    if there is at least one letter 'a', remove the leftmost occurrence and stop the algorithm, otherwise go to next item;  if there is at least one letter 'b', remove the leftmost occurrence and stop the algorithm, otherwise go to next item; ...  remove the leftmost occurrence of the letter 'z' and stop the algorithm. \n\n    This algorithm removes a single letter from the string. Polycarp performs this algorithm exactly $k$ times, thus removing exactly $k$ characters.\n    \n    Help Polycarp find the resulting string.\n    \n    >>> solution('')\n    'Please give me a non-empty string.'\n    \n    >>> solution('ab')\n    'a'\n    \n    >>> solution('abab')\n    'ab'\n    \n    >>> solution('cccaabababaccbc')\n    'cccbbabaccbc'\n    \n    >>> solution('cccaabababaccbc')\n    'cccbbabaccbc'\n    \n    >>> solution('cccaabababaccbc')\n    'cccbbabaccbc'\n    \n    \"\"\"\n    return \"\"\n",
        "test": "assert solution('') == ''",
        "num_ids": 2295
    },
    {
        "number": 4349,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    k = [int(x) for x in stdin.strip().split(' ')]\n    k = sorted(k)\n    ans = 0\n    # print(k)\n    c = [0 for i in range(n)]\n    for i in range(m):\n        d, t = [int(x) for x in stdin.strip().split(' ')]\n        if d == 1:\n            if c[t] < k[t]:\n                ans += (k[t] - c[t]) * 2\n                c[t] += (k[t] - c[t])\n            else:\n                ans += k[t] * 2\n                c[t] += k[t]\n    return str(ans)",
        "test": "assert solution('3 3') == '0'",
        "num_ids": 1032
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n * m > 1000 or n * m < 3:\n        return '-1'\n\n    grid = [stdin[i:i+m] for i in range(0, len(stdin), m)]\n    stars = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars += 1\n                if i > 0 and grid[i-1][j] == '*':\n                    stars += 1\n                if i < n - 1 and grid[i+1][j] == '*':\n                    stars += 1\n                if j > 0 and grid[i][j-1] == '*':\n                    stars += 1\n                if j < m - 1 and grid[i][j+1] == '*':\n                    stars += 1\n\n    return str(stars)\n\nprint(solution(input()))\n",
        "test": "assert solution(open('test_04.txt').read()) == '4'",
        "num_ids": 420
    },
    {
        "number": 4351,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == n // 10:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1\") == \"No\"",
        "num_ids": 223
    },
    {
        "number": 4352,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return 'Alice' if a > b else 'Bob'",
        "test": "assert solution('8 6') == 'Alice'",
        "num_ids": 304
    },
    {
        "number": 4353,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    assert len(stdin) == 19, 'input must have 19 characters'\n\n    s = stdin.split(',')\n    s[0] = s[0].replace(',','')\n    s[2] = s[2].replace(',','')\n    s[6] = s[6].replace(',','')\n\n    print(' '.join(s))\n",
        "test": "assert solution(\"a,b,c,d,e,f,g,h,i,j,k\") == \"a b c d e f g h i j k\"",
        "num_ids": 2103
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input to the problem is given as:\n    N M\n    a_1 b_1\n    :  \n    a_N b_N\n    c_1 d_1\n    :  \n    c_M d_M\n\n    The output should be given as:\n    N\n    i\n    The i-th line should contain the index of the checkpoint for the i-th student to go.\n    \"\"\"\n    m, n = map(int, stdin.split(' '))\n    a, b, c, d = [], [], [], []\n    for _ in range(m):\n        a.append(int(stdin.readline()))\n        b.append(int(stdin.readline()))\n    for _ in range(n):\n        c.append(int(stdin.readline()))\n        d.append(int(stdin.readline()))\n    \n    output = ''\n    for i in range(m):\n        dist = abs(a[i] - c[0]) + abs(b[i] - d[0])\n        for j in range(1, n):\n            dist_ = abs(a[i] - c[j]) + abs(b[i] - d[j])\n            if dist_ < dist:\n                dist = dist_\n        output += str(dist) +''\n    return output\n\ndef",
        "test": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1\\n'",
        "num_ids": 609
    },
    {
        "number": 4355,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)",
        "test": "assert solution('5') == 23",
        "num_ids": 146
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('''3 2",
        "num_ids": 475
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    panels = stdin.split(\" \")\n    return str(int(panels[0]) + int(panels[1]) - int(panels[2]))",
        "test": "assert solution(\"1 2 6\") == \"17\"",
        "num_ids": 275
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    items = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    return str(sum(x / 2 for x in items) + items[-1])",
        "test": "assert solution('4\\n4980\\n7980\\n6980') == '15950'",
        "num_ids": 405
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    orders = stdin.strip().split(\" \")\n    delivered_at = [int(orders[0])]\n    for order in orders[1:]:\n        if order == \"ABC Don\":\n            delivered_at.append(delivered_at[-1] + 29)\n        elif order == \"ARC Curry\":\n            delivered_at.append(delivered_at[-1] + 50)\n        elif order == \"AGC Pasta\":\n            delivered_at.append(delivered_at[-1] + 57)\n        elif order == \"APC Ramen\":\n            delivered_at.append(delivered_at[-1] + 180)\n        elif order == \"ATC Hanbagu\":\n            delivered_at.append(delivered_at[-1] + 215)\n        else:\n            delivered_at.append(delivered_at[-1] + 215)\n    return str(min(delivered_at))",
        "test": "assert solution('''29",
        "num_ids": 948
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = [int(i) for i in stdin.readline().split()]\n    result = sum(1 / i for i in sequence)\n    return str(result)",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 2018
    },
    {
        "number": 4361,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)",
        "test": "assert solution('1 5') == '0'",
        "num_ids": 341
    },
    {
        "number": 4362,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    if alpha.isupper():\n        return 'A'\n    elif alpha.islower():\n        return 'a'\n    else:\n        return alpha",
        "test": "assert solution('A') == 'A'",
        "num_ids": 199
    },
    {
        "number": 4363,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    if A == 0:\n        return '0'\n    N = A // 2\n    return str(combinations_count(N, 3))\n\ndef",
        "test": "assert solution('1 1') == '0'",
        "num_ids": 246
    },
    {
        "number": 4364,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin)!= 4:\n        return 'NA'\n    try:\n        year = int(stdin[:2])\n        month = int(stdin[2:])\n    except:\n        return 'NA'\n    if 1 <= month <= 12:\n        return 'YYMM'\n    elif 1 <= year <= 99:\n        return 'MMYY'\n    else:\n        return 'AMBIGUOUS'",
        "test": "assert solution(\"201207\") == \"NA\"",
        "num_ids": 327
    },
    {
        "number": 4365,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return str(result)",
        "test": "assert solution('1') == \"0\"",
        "num_ids": 301
    },
    {
        "number": 4366,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "assert solution('9 12') == '21'",
        "num_ids": 211
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    inner, display = map(int, stdin.split())\n    if display >= 10:\n        return str(inner)\n    return str(inner - (10 - display) * (10 - inner))\n\nassert solution('2 2919') == '3719'\nassert solution('1 0') == '0'\nassert solution('1 20') == '19'\nassert solution('2 0') == '0'\nassert solution('10 25') == '25'\nassert solution('50 0') == '0'\n",
        "test": "assert solution(\"3 1\") == \"3\"",
        "num_ids": 325
    },
    {
        "number": 4368,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    return str(len(bin(n)[2:]))",
        "test": "assert solution('11 2') == '4'",
        "num_ids": 2068
    },
    {
        "number": 4369,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('''4''') == 2",
        "num_ids": 186
    },
    {
        "number": 4370,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(s) for s in stdin.split()]\n    if A+B > 16:\n        return \" :( \"\n    return \"Yay!\"",
        "test": "assert solution('1 1') == 'Yay!'",
        "num_ids": 227
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Split string into array of digits\n    numbers = stdin.strip().split(\"\")\n\n    # Check if the length of the array is 4-9\n    if len(numbers) < 4 or len(numbers) > 9:\n        raise ValueError(\"Invalid Input\")\n\n    # Initialize result\n    result = \"\"\n\n    # Get the difference between 753 and the array of digits\n    for i in range(len(numbers)):\n        # Get the string of the digits to be split\n        numbers_to_split = numbers[i]\n\n        # Check if the string is valid\n        if not numbers_to_split.isdigit():\n            raise ValueError(\"Invalid Input\")\n\n        # Calculate the result\n        result += str((int(numbers_to_split) - 753) * 10 ** (len(numbers) - i - 1))\n\n    # Return the result\n    return result\n\n\ndef",
        "test": "assert solution(1234567) == 25",
        "num_ids": 466
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]].append(i)\n        else:\n            d[a[i]] = [i]\n    d = sorted(d.items(), key=lambda x: x[1])\n    s = d[0][1]\n    x = s[0]\n    y = s[1]\n    d = {}\n    for i in range(n):\n        if i in s:\n            continue\n        else:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n    d = sorted(d.items(), key=lambda x: x[1])\n    return str(y) +'' + str(sum(d[0][1]))\n\n\nimport sys",
        "test": "assert solution('6\\n13 52 0 13 26 52\\n') == '12 13\\n'",
        "num_ids": 2187
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    max_days = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] >= a[i - 1] and a[i] - a[i - 1] > 1:\n            max_days += a[i - 1]\n        else:\n            max_days += a[i]\n\n    return str(max_days)",
        "test": "assert solution('2 1 1') == '1'",
        "num_ids": 408
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.strip().split(\" \")]\n    n, m = inputs[0], inputs[1]\n\n    edges = {}\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.strip().split(\" \")]\n        edges[(v, u)] = True\n\n    max_diameter = n\n    for i in range(n):\n        if i not in edges:\n            max_diameter = max(max_diameter, i)\n\n    return str(max_diameter)\n",
        "test": "assert solution('''4 2",
        "num_ids": 562
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = defaultdict(set)\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].add(v)\n        graph[v].add(u)\n    weights = list(map(int, stdin.split()))\n\n    distances = [0] * (n + 1)\n    for i in range(1, n + 1):\n        distances[i] = weights[i - 1]\n        for j in graph[i]:\n            distances[j] = max(distances[j], distances[i] + weights[i - 1])\n    return max(distances)",
        "test": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114",
        "num_ids": 2852
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_dormitory(n, rooms, letter):\n        def find_room(n, rooms, room, letter):\n            if room == n:\n                return room, letter\n            for i in range(rooms):\n                if i < n:\n                    for j in range(rooms):\n                        if i < j:\n                            if rooms[j] == room:\n                                if rooms[j] < n:\n                                    return rooms[j], rooms[j + 1]\n                                elif rooms[j] > n:\n                                    return rooms[j - 1], rooms[j]\n                                elif rooms[j] == n:\n                                    if rooms[j - 1] == 0:\n                                        return rooms[j - 1], rooms[j]\n                                    elif rooms[j - 1] == rooms[j] - 1:\n                                        return rooms[j - 1], rooms[j]\n                                    else:\n                                        return rooms[j - 2], rooms[j - 1]\n                else:\n                    return rooms[i], rooms[i - 1]\n        if letter == n:\n            return letter\n        rooms.sort()\n        for i in range(n, -1, -1):\n            if letter > i:\n                continue\n            for j in range(rooms[i - 1], rooms[i] + 1):\n                k = find_room(n, rooms, j, letter)\n                if k[0] == j:\n                    letter = k[1]\n                    return letter\n        return letter\n\n\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        print(find_dormitory(n, rooms, a) + 1, find_dormitory(n, rooms, b) + 1)\n    return \"\"\n\n\nimport sys",
        "test": "assert solution('4 3\\n1 2 1 2\\n1 2 1 2 2\\n1 3 1 3 3\\n') == '1 1\\n1 2\\n2 1\\n3 1\\n3 2\\n3 3'",
        "num_ids": 2102
    },
    {
        "number": 4377,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.split()\n    return''.join(map(str, [\n        *sorted(\n            [\n                a + b\n                for a, b in zip(\n                    *sorted(\n                        [int(x) for x in _[0:4]]\n                    )\n                )\n            ],\n            reverse=True\n        )\n    ][:3]))",
        "test": "assert solution('') == ''",
        "num_ids": 539
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    colors = set(s)\n    if len(colors)!= 3:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return len(s) - max(s.find(x) for x in set(s))\n    for i in range(1, n):\n        for j in range(i, n):\n            if s[i - 1]!= s[j]:\n                break\n        else:\n            return j - i\n    return -1\nprint(solution(input()))\n",
        "test": "assert solution(",
        "num_ids": 2160
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 100000:\n        return \"\"\n    a = [int(stdin) for stdin in stdin.split(\" \")]\n    ans = 0\n    for i in range(1, n + 1):\n        s = 0\n        for j in range(n):\n            if a[j] > a[j + 1]:\n                s += 1\n        if s >= ans:\n            ans = s\n            result = [a[j] for j in range(n) if a[j] > a[j + 1]]\n    return str(ans) + \" \" + \" \".join(str(item) for item in result)\n",
        "test": "assert solution(\"\"\"6",
        "num_ids": 632
    },
    {
        "number": 4380,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    return \"Yes\" if (a * b) % 2 == 1 else \"No\"",
        "test": "assert solution('3 1') == 'Yes'",
        "num_ids": 257
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x*y/2)",
        "test": "assert solution(input()) == input()",
        "num_ids": 319
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"2\") == \"8\"",
        "num_ids": 122
    },
    {
        "number": 4383,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    result = \"NO\"\n\n    X = int(stdin)\n\n    if X % 3 == 0 and X % 5 == 0:\n        result = \"YES\"\n\n    return result",
        "test": "assert solution('6') == 'NO'",
        "num_ids": 2036
    },
    {
        "number": 4384,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 251
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(stdin.split()[i]) for i in range(6)]\n    if a + b >= c + d and a + c >= b + d and a + d >= b + c and a + e >= c + d and a + e >= d + e:\n        return \"Yay!\"\n    return \":(\\n\" + stdin\n\n\nassert(solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\\n\")\nassert(solution(\"2\\n4\\n8\\n9\\n15\") == \"Yay!\\n\")\nassert(solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\\n\")\nassert(solution(\"1\\n2\\n4\\n8\\n9\\n17\") == \":(\\n\")\nassert(solution(\"1\\n2\\n4\\n8\\n9\\n22\") == \"Yay!\\n\")\nassert(solution(\"1\\n2\\n4\\n8\\n9\\n38\") == \":(\\n\")\nassert(solution(\"1\\n2\\n4\\n8\\n9\\n72\") == \":(\\n\")\n",
        "test": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'",
        "num_ids": 748
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    input_a = stdin.readline()\n    input_s = stdin.readline()\n\n    if a < 3200:\n        print(s)\n    else:\n        print(\"red\")",
        "test": "assert solution(\"3200\",\"pink\") == \"pink\"",
        "num_ids": 225
    },
    {
        "number": 4387,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return 'ABC'\n    elif R < 2800:\n        return 'ARC'\n    else:\n        return 'AGC'",
        "test": "assert solution('1199') == 'ABC'",
        "num_ids": 191
    },
    {
        "number": 4388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    output = 0\n    for i in range(3):\n        output += (n % 10) * (9 - i)\n        n //= 10\n    return str(output)\n\nprint(solution(input()))\n",
        "test": "assert solution('999') == '999'",
        "num_ids": 2032
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution(open(\"test_input4.txt\").read()) == \"zzzzzzzzzz\"",
        "num_ids": 285
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nimport sys\n\nnum_cases = int(sys.stdin.readline().strip())\n\nfor _ in range(num_cases):\n    a, b = map(int, sys.stdin.readline().strip().split())\n    print(abs(a % b))",
        "test": "assert solution('4\\n') == '3'",
        "num_ids": 376
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass",
        "test": "assert solution(stdin) == \"2.666666666666667\"",
        "num_ids": 268
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    ps = set(map(int, stdin.split(\" \")))\n    return \"YES\" if are_non_increasing(a, ps) else \"NO\"\n\n\ndef",
        "test": "assert solution('ab' * 10) == 'YES'",
        "num_ids": 461
    },
    {
        "number": 4393,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(s for s in stdin if s!= 'o')",
        "test": "assert solution('z') == 'z'",
        "num_ids": 106
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split(' ')))\n    edges = [list(map(int, stdin.strip().split(' '))) for _ in range(m)]\n    edges.sort(key=lambda x: x[2])\n\n    @lru_cache(None)\n    def get_cost(u, v, _):\n        return get_cost(v, u, get_cost(u, v, _) + 1) + edges[u][2]\n\n    visited = set()\n    minimum_cost = sum(get_cost(x, y, 0) for x, y, _ in edges)\n    for u, v, w in edges:\n        if u not in visited and v not in visited:\n            visited.update({u, v})\n            minimum_cost = min(minimum_cost, get_cost(u, v, 0) + w)\n\n    return str(minimum_cost)\n\n\ndef",
        "test": "assert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '1'",
        "num_ids": 1969
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = 0\n    unique_colors = []\n    for i in s:\n        if i not in unique_colors:\n            unique_colors.append(i)\n    unique_colors.sort()\n    for i in unique_colors:\n        count += s.count(i)\n    if count % 3 == 0:\n        return count\n    return -1\n\nassert solution(input) == input\nassert solution(input) == \"GB\"",
        "test": "assert solution('RGBGRBB'.join(input() for _ in range(int(input())))) == 'RGBRGBR'",
        "num_ids": 710
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('1\\n10000 JPY\\n0.100000001 BTC') == '0.1'",
        "num_ids": 508
    },
    {
        "number": 4397,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, i = [int(x) for x in stdin.strip().split(\" \")]\n\n    return str(N - i)",
        "test": "assert solution(\"10 1\") == \"9\"",
        "num_ids": 139
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    size = stdin.strip()\n    size = int(size)\n    s, t = stdin.split(\"\\n\")\n    s = s.strip()\n    t = t.strip()\n    s = s[::-1]\n    t = t[::-1]\n    res = []\n    for i in range(size):\n        res.append(s[i])\n        res.append(t[i])\n    return \"\".join(res)",
        "test": "assert solution(stdin) == stdin.replace(' ', '')",
        "num_ids": 392
    },
    {
        "number": 4399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if a == b[::-1]:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('BBB') == 'No'",
        "num_ids": 197
    },
    {
        "number": 4400,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin.count(\"R\"), stdin.count(\"S\"))",
        "test": "assert solution('RRS') == 2",
        "num_ids": 298
    },
    {
        "number": 4401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin.split(\" \")))\n    num_list.sort()\n    return \" \".join(map(str, num_list))",
        "test": "assert solution(\"1 1 1\") == \"1 1 1\"",
        "num_ids": 301
    },
    {
        "number": 4402,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yen\"\n\nassert(solution('30 100') == \"100\")\n",
        "test": "assert solution('30 100') == '100'",
        "num_ids": 297
    },
    {
        "number": 4403,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    takahashi = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            takahashi += 1\n        elif symbol == \"-\":\n            takahashi -= 1\n    return str(takahashi)",
        "test": "assert solution('+-++') == '2'",
        "num_ids": 216
    },
    {
        "number": 4404,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('/')\n    if int(data[0]) > 19:\n        return 'Heisei'\n    return 'TBD'",
        "test": "assert solution('2019/04/30') == 'Heisei'",
        "num_ids": 448
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    topic_list = [int(x) for x in stdin.readline().split(' ')]\n    return str(n * 2)\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 309
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split()]\n    conversations = [int(x) for x in stdin.split()]\n    on_screen = []\n    for i in range(len(conversations)):\n        if conversations[i] in on_screen:\n            pass\n        else:\n            on_screen.append(conversations[i])\n            if len(on_screen) > k:\n                on_screen.pop(0)\n    return''.join(map(str, on_screen))\n\nassert(solution('7 2') == '2 1')\nassert(solution('10 4') == '3 2 1')\nassert(solution('2 3 3 1 1 2 1 2 3 3') == '1 3 2')\nassert(solution('100000 1000000 1000000000 100000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000",
        "test": "assert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'",
        "num_ids": 1655
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    queries = [int(x) for x in stdin.split()]\n    r = []\n    for b in queries:\n        l = 0\n        for ai, bi in zip(a, range(n, 0, -1)):\n            if ai <= bi:\n                l += bi - ai\n                a[bi - 1] -= bi - ai\n                a[bi - 2] -= bi - ai\n        r.append(l)\n    print('\\n'.join(map(str, r)))",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 521
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    favorites = list(map(int, stdin.split()))\n    cards_left = k * n\n    favorites_left = 0\n    for card, favorite in zip(cards, favorites):\n        if card == favorite:\n            favorites_left += 1\n            cards_left -= 1\n    return str(max(0, favorites_left))",
        "test": "assert solution('4 3\\n9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n1 2 3\\n') == '21'",
        "num_ids": 2868
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    k = 0\n\n    while k < n:\n        if a[0] == a[-1]:\n            k += 1\n            a[0] = 0\n            a[-1] = 0\n\n        i = 0\n        j = 1\n\n        while j < n:\n            if abs(a[i] - a[j]) == 1:\n                a[i] += abs(a[i] - a[j])\n                a[j] = 0\n                k += 1\n            elif abs(a[i] - a[j]) == 1:\n                a[j] += abs(a[i] - a[j])\n                a[i] = 0\n                k += 1\n            else:\n                j += 1\n\n        i = 0\n        j = 1\n\n        while j < n:\n            if abs(a[i] - a[j]) == 1:\n                a[i] -= abs(a[i] - a[j])\n                a[j] = 0\n                k += 1\n            elif abs(a[i] - a[j]) == 1:\n                a[j] -= abs(a[i] - a[j])\n                a[i] = 0\n                k += 1\n            else:\n                j += 1\n\n        a = sorted(a)\n\n    return str(k)\n\n\ndef",
        "test": "assert solution('''3",
        "num_ids": 2143
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(num) for num in stdin.split()]\n    s = stdin.replace('1', '0').replace('0', '1')\n    return str(len(s) - s.count('1'))\n    \n    \n    \n    \n",
        "test": "assert solution('111010') == '1'",
        "num_ids": 307
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    segments = [map(int, stdin.readline().strip().split()) for _ in range(n)]\n    \n    bad_points = [False] * n\n    for l, r in segments:\n        for i in range(l, r+1):\n            bad_points[i] = True\n            \n    # For each point, count the number of segments that cover it\n    point_segments = [0] * n\n    for i in range(n):\n        for l, r in segments:\n            if i < l:\n                point_segments[i] += r - l + 1\n            if i > r:\n                point_segments[i] += l - i + 1\n    \n    # Filter bad points (segments are above k)\n    bad_points = [True] * n\n    for i in range(n):\n        if point_segments[i] > k:\n            bad_points[i] = False\n            \n    # Partition points into groups of segments\n    groups = []\n    for i in range(n):\n        if bad_points[i]:\n            groups.append([i])\n        else:\n            groups[-1].append(i)\n    \n    # For each group, remove the smallest segment and update bad_points\n    ans = 0\n    for group in groups:\n        group_len = len(group)\n        group_segments = [0] * n\n        for i in group:\n            for l, r in segments:\n                if i < l:\n                    group_segments[i] += r - l + 1\n                if i > r:\n                    group_segments[i] += l - i + 1\n        \n        # Remove the smallest segment\n        bad_points[group[group_segments.index(min(group_segments))]] = False\n        ans += min(group_segments)\n    \n    return str(ans)\n\nassert(solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '3')\nassert(solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '3')\nassert(solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '4')\n",
        "test": "assert solution('''",
        "num_ids": 2470
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 62
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    teams = 0\n    for _ in range(q):\n        r = int(stdin.readline())\n        if r - 1 == (a[r - 1] + 1) % r:\n            teams += 1\n    return str(teams)",
        "test": "assert solution('4\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\\n') == '2'",
        "num_ids": 412
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n_cases = int(stdin.readline().strip())\n    for case_no in range(n_cases):\n        a, b, n, s = map(int, stdin.readline().strip().split(' '))\n        result = 'YES' if min(a, b, n, s) * min(a, b, n, s) == s else 'NO'\n        print(result)\n    return None",
        "test": "assert solution('''\\",
        "num_ids": 2072
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.read()\n    n = int(data)\n    a = [int(i) for i in data.split()]\n\n    if a[0] == 0:\n        print(\"YES\")\n        print(0)\n        print(0)\n        return\n\n    increasing = [False] * n\n    decreasing = [False] * n\n\n    for i in range(0, n):\n        if a[i] < a[i - 1] and increasing[i - 1] == False:\n            increasing[i] = True\n        elif a[i] > a[i - 1] and decreasing[i - 1] == False:\n            decreasing[i] = True\n\n    increasing_count = 0\n    decreasing_count = 0\n\n    for i in range(0, n):\n        if increasing[i] == True:\n            increasing_count += 1\n        if decreasing[i] == True:\n            decreasing_count += 1\n\n    if increasing_count!= 0 and decreasing_count!= 0:\n        print(\"YES\")\n\n        print(increasing_count)\n        print(decreasing_count)\n\n        print(\",\".join(str(i) for i in a))\n    else:\n        print(\"NO\")\n    return\n",
        "test": "assert solution('''5",
        "num_ids": 987
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, k, a, b):\n        if n < k:\n            return -1\n        if a + b < k:\n            return -1\n\n        arr = [0] * n\n        for i in range(n):\n            t, a, b = map(int, stdin.readline().split())\n            arr[i] = [t, a, b]\n\n        arr.sort(key=lambda x: x[1], reverse=True)\n        arr.sort(key=lambda x: x[2], reverse=True)\n        arr.sort(key=lambda x: x[0] + x[1], reverse=True)\n\n        time = 0\n        for i in range(n):\n            if arr[i][1] + arr[i][2] > k:\n                continue\n            time += arr[i][0]\n            k -= arr[i][1]\n            if k < 0:\n                time += k * arr[i][2]\n                break\n\n        return time\n\n    n, k = map(int, stdin.readline().split())\n    print(solve(n, k, 0, 0))\n\n\ndef",
        "test": "assert solution('''5 2",
        "num_ids": 1015
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input() -> Tuple[int, List[int]]:\n        \"\"\"Parses input\"\"\"\n        n, k = [int(x) for x in stdin.split()]\n        return n, [int(x) for x in stdin.split()[1:]]\n\n    def to_binary(number: int) -> str:\n        \"\"\"Converts number to binary\"\"\"\n        return f'{number:b}'\n\n    def to_decimal(binary_number: str) -> int:\n        \"\"\"Converts binary to decimal\"\"\"\n        return int(binary_number, 2)\n\n    def find_equal_price(old_prices: List[int], new_prices: List[int]) -> int:\n        \"\"\"Finds equal prices\"\"\"\n        diff = [abs(x - y) for x, y in zip(old_prices, new_prices)]\n        return max(diff)\n\n    def find_max_possible_price(n: int, k: int, old_prices: List[int], new_prices: List[int]) -> int:\n        \"\"\"Finds max possible price\"\"\"\n        all_possible_prices = [x for x in range(1, 10**9 + 1)]\n        max_price = 0\n        for old_price, new_price in zip(old_prices, new_prices):\n            valid_prices = [x for x in all_possible_prices if abs(old_price - x) <= k]\n            if not valid_prices:\n                return -1\n            max_price = max(max_price, new_price, new_price - old_price)\n            if max_price < new_price - old_price:\n                return max_price\n        return max_price\n\n    n, k = parse_input()\n    old_prices = parse_input()[1]\n    new_prices = [0 for _ in range(n)]\n    for i in range(n):\n        new_prices[i] = find_max_possible_price(n, k, old_prices, new_prices)\n\n    return '\\n'.join([str(x) for x in new_prices])\n",
        "test": "assert solution(stdin) == '7'",
        "num_ids": 3234
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "test": "assert solution('''4 8 4 8 15 16 8 16 23 15 16 4 42 23 42''') == '3'",
        "num_ids": 429
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        a, b = [int(x) for x in stdin.readline().split(' ')]\n        print(solution_naive(a, b))\n\ndef",
        "test": "assert solution('12345\\n1234') == '3'",
        "num_ids": 242
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 428
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    d = [int(x) for x in stdin.split()]\n\n    candies = sorted(d, reverse=True)\n    # print(candies)\n\n    result = 0\n    for i in range(n):\n        left = i\n        right = i + 1\n        while right < n and candies[left] == candies[right]:\n            right += 1\n        if right - left == k:\n            result += 1\n            left += 1\n            right -= 1\n    return result\n\n\ndef",
        "test": "assert solution(input_data) == input_data[29]",
        "num_ids": 403
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = stdin.strip().split(' ')\n    return stdin.strip().lower().replace(stdin[int(k) - 1], stdin[int(k) - 1].lower())",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 236
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cities = [stdin.readline().strip() for _ in range(n)]\n    scores = [int(stdin.readline().strip()) for _ in range(n)]\n    l = [i for i in range(n)]\n    l.sort(key=lambda x: cities[x], reverse=True)\n    l.sort(key=lambda x: scores[x], reverse=True)\n    return '\\n'.join(map(str, l))\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"khabarovsk 10\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "num_ids": 2071
    },
    {
        "number": 4424,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 1''')\n    'Yes'\n    >>> solution('''2 500''')\n    'No'\n    >>> solution('''2 10''')\n    'No'\n    >>> solution('''5 7''')\n    'No'\n    \"\"\"\n    x, k = [int(i) for i in stdin.split()]\n    if k >= 500 and k <= x:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution('2 901') == 'No'",
        "num_ids": 323
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    return str(1 - (1/2**(k-1)))\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == '0.145833333333'",
        "num_ids": 1793
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin[0]\n    if day == 'SUN' or day =='sun':\n        return 0\n    elif day == 'MON':\n        return 31\n    elif day == 'TUE':\n        return 59\n    elif day == 'WED':\n        return 90\n    elif day == 'THU':\n        return 120\n    elif day == 'FRI':\n        return 151\n    elif day == 'SAT':\n        return 181",
        "test": "assert solution('TUE') == '30'",
        "num_ids": 255
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_x(stdin))\n\ndef",
        "test": "assert solution('5 1 2') == '0 0 0 0 0 0 0 0 0 0 0'",
        "num_ids": 412
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = [int(x) for x in stdin.readline().strip().split(' ')]\n    s = sum(d)\n    # print(n)\n    # print(d)\n    if s % 3!= 0:\n        return '0'\n    else:\n        n_part = s // 3\n        if n % 3!= 0:\n            n_part += 1\n        n_part_first = n_part // 3\n        n_part_second = n_part % 3\n        if n_part_first == 0:\n            n_part_first = n_part_second\n        else:\n            if n_part_second == 0:\n                n_part_second = n_part - n_part_first\n            else:\n                n_part_second = n_part - n_part_first - n_part_second\n        d_first = []\n        d_second = []\n        d_third = []\n        c = 0\n        for i in range(0, n_part_first):\n            d_first.append(d[c])\n            c += 1\n        for i in range(c, c + n_part_second):\n            d_second.append(d[c])\n            c += 1\n        for i in range(c, c + n_part_third):\n            d_third.append(d[c])\n            c += 1\n        # print(d_first)\n        # print(d_second)\n        # print(d_third)\n        if len(d_first) == 1:\n            d_first = d_first * n_part_first\n        if len(d_second) == 1:\n            d_second = d_second * n_part_second\n        if len(d_third) == 1:\n            d_third = d_third * n_part_third\n        # print(d_first)\n        # print(d_second)\n        # print(d_third)\n        r = d_first + d_second + d_third\n        # print(r)\n        return str(max(r))",
        "test": "assert solution('''5",
        "num_ids": 869
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, z = [int(x) for x in stdin.readline().strip().split()]\n        a, b, c = (x, y, z)\n        if (max(a, b, c) < x):\n            print(\"YES\")\n            print(x, y, z)\n            continue\n        if (max(a, c, b) < y):\n            print(\"YES\")\n            print(x, y, z)\n            continue\n        if (max(b, c, a) < z):\n            print(\"YES\")\n            print(x, y, z)\n            continue\n        print(\"NO\")\n    return \"\"",
        "test": "assert solution(stdin) == ''",
        "num_ids": 2263
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.splitlines()[1].split())))\n\n\ndef",
        "test": "assert solution('''1 2 3 1 1''') == '5'",
        "num_ids": 1902
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin[stdin.find('\\n') + 1:].strip()\n    c = set(stdin[stdin.find('\\n') + 1:].strip().split(' '))\n    return str(sum(len(s[i: j]) - 1 for i in range(len(s)) for j in range(i + 1, min(i + len(s) // k + 2, len(s) + 1))))",
        "test": "assert solution('''7 2",
        "num_ids": 524
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        current = 0\n        max_sum = 0\n        for i in range(n):\n            current = max(current, 0)\n            max_sum = max(max_sum, current)\n            if a[i] > 0:\n                current += a[i]\n            else:\n                current = 0\n        print(max_sum)",
        "test": "assert solution('4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'",
        "num_ids": 1168
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom sys import stdin\n\ndef",
        "test": "assert solution(",
        "num_ids": 701
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for i in range(0, n):\n        a.append([])\n        for j in range(0, n):\n            a[i].append(0)\n    return 0",
        "test": "assert solution('''1",
        "num_ids": 326
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    res = []\n    for i in range(1, n):\n        res.append(0)\n\n        j = i\n        while j - a[j] >= 1 and j - a[j] <= n - j:\n            if j - a[j] % 2 == 1:\n                res[i] += 1\n            j -= a[j]\n\n        j = i\n        while j + a[j] <= n - j:\n            if j + a[j] % 2 == 0:\n                res[i] += 1\n            j += a[j]\n\n    return''.join(map(str, res))",
        "test": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"",
        "num_ids": 603
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(a: int, b: int, c: int) -> bool:\n        return a * b * c == n\n\n    def find_divisors(n: int) -> List[int]:\n        divisors = set()\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return list(divisors)\n\n    for _ in range(int(stdin)):\n        n = int(stdin)\n        divisors = find_divisors(n)\n        divisors.sort()\n        if divisors[0] * divisors[1] * divisors[-1]!= n:\n            print('NO')\n            continue\n        for i in range(2, len(divisors)):\n            if is_divisible(divisors[0], divisors[i], divisors[-1]):\n                print(divisors[0], divisors[i], divisors[-1])\n                break\n        else:\n            print('YES')\n            continue\n        break",
        "test": "assert solution(\"123\") == \"NO\"",
        "num_ids": 690
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    for i in range(1, n):\n        if (i % 2 == 1):\n            if (s[i] == 'a'):\n                s = s[:i] + 'b' + s[i + 1:]\n            else:\n                s = s[:i] + 'a' + s[i + 1:]\n    return s",
        "test": "assert solution('ba') == '1'",
        "num_ids": 1690
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = [0] * n\n    for i in range(n):\n        m[i] = tuple(map(int, stdin.split()))\n    keys = {m[i] for i in range(n)}\n    for i in range(1, n):\n        keys.remove(m[i])\n    keys = list(keys)\n    keys = sorted(keys, key = lambda x: x[1])\n    def get_key_distance(key):\n        return abs(key[0] - 0) + abs(key[1] - 0)\n    return min(get_key_distance(key) for key in keys)\n\nprint(solution(stdin))\n",
        "test": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'",
        "num_ids": 376
    },
    {
        "number": 4439,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    if A == B:\n        return A\n    elif A == '1':\n        return B\n    else:\n        return A",
        "test": "assert solution(\"3\\n3\") == \"3\"",
        "num_ids": 228
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    volume = int(stdin)\n    return \"0.96\"\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == stdin[:7]",
        "num_ids": 170
    },
    {
        "number": 4441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    if N == '1':\n        return 'Hello World'\n    A = int(stdin.readline().strip())\n    B = int(stdin.readline().strip())\n    return str(A+B)",
        "test": "assert solution('''2",
        "num_ids": 283
    },
    {
        "number": 4442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(\" \")]\n    return str(min(int(str(a) * b), int(str(b) * a)))",
        "test": "assert solution(\"3 3\") == \"333\"",
        "num_ids": 234
    },
    {
        "number": 4443,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'a':\n        return 'b'\n    elif c == 'b':\n        return 'c'\n    elif c == 'c':\n        return 'd'\n    elif c == 'd':\n        return 'e'\n    elif c == 'e':\n        return 'f'\n    elif c == 'f':\n        return 'g'\n    elif c == 'g':\n        return 'h'\n    elif c == 'h':\n        return 'i'\n    elif c == 'i':\n        return 'j'\n    elif c == 'j':\n        return 'k'\n    elif c == 'k':\n        return 'l'\n    elif c == 'l':\n        return'm'\n    elif c =='m':\n        return 'n'\n    elif c == 'n':\n        return 'o'\n    elif c == 'o':\n        return 'p'\n    elif c == 'p':\n        return 'q'\n    elif c == 'q':\n        return 'r'\n    elif c == 'r':\n        return's'\n    elif c =='s':\n        return 't'\n    elif c == 't':\n        return 'u'\n    elif c == 'u':\n        return 'v'\n    elif c == 'v':\n        return 'w'\n    elif c == 'w':\n        return 'x'\n    elif c == 'x':\n        return 'y'\n    elif c == 'y':\n        return 'z'\n    elif c == 'z':\n        return 'a'\n    else:\n        return \"\"\n",
        "test": "assert solution('a') == 'b'",
        "num_ids": 550
    },
    {
        "number": 4444,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S\n",
        "test": "assert solution('oder atc') == 'atcoder'",
        "num_ids": 175
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin)\n    list_of_elements = stdin.split(' ')\n    array = []\n    for item in list_of_elements:\n        array.append(int(item))\n    sum_of_elements = 0\n\n    for number in range(0, number_of_elements):\n        if array[number] % 2!= 0:\n            array[number] = -(array[number])\n\n    for number in range(0, number_of_elements):\n        if array[number] % 2 == 0:\n            array[number] = -(array[number])\n\n    for number in range(0, number_of_elements):\n        if array[number] > 0:\n            sum_of_elements += array[number]\n    print(sum_of_elements)\n",
        "test": "assert solution('1000000 1000000') == '1000000'",
        "num_ids": 583
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = [int(x) for x in stdin.split()]\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 0\n    for i in range(n):\n        for j in range(a, 0, -1):\n            if i + j <= n:\n                dp[i + j] = max(dp[i + j], dp[i] + max(0, h[i] - j))\n    return str(dp[n])",
        "test": "assert solution(",
        "num_ids": 543
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = [int(x) for x in stdin.split()]\n    (a, b) = ([int(x) for x in stdin.split()] for _ in range(n))\n    res = 0\n    for i in range(m):\n        div = m // i\n        for j in range(n):\n            if (j + 1) % div == 0:\n                res += (j + 1) // m\n    return res\n\n\nprint(solution(input()))\n",
        "test": "assert solution('''4 2''') == '''0",
        "num_ids": 527
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    k = [int(x) for x in stdin.split()]\n    k = k[:n]\n\n    prices = [int(x) for x in stdin.split()]\n    prices = prices[:n]\n\n    special = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n\n    max_price = 0\n\n    for day in range(1, max(prices) + 1):\n\n        if day < 2:\n            continue\n\n        max_price = max(max_price, day)\n\n        for i in range(n):\n            max_price = max(max_price, max(day - prices[i], 0))\n\n    return str(max_price)\n",
        "test": "assert solution(",
        "num_ids": 365
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1\n   ... 1 1 10 10\n   ... 2\n   ... 10 5 2 10 1 1 2 5\n   ... 2\n   ... 10 5 1 10 5 1 1 1\n   ... 2\n   ... 1 1 1 1 1 1 1 1\n   ... 1\n   ... 10000 10000 10000 10000\n   ... ''')\n    'YES'\n    \"\"\"\n    queries = [int(x) for x in stdin.split('\\n')[:2]]\n    n = int(stdin.split('\\n')[2])\n    sticks = [int(x) for x in stdin.split('\\n')[3:]]\n    return 'YES' if solution2(queries, sticks, n) else 'NO'\n\n\ndef",
        "test": "assert solution('''5",
        "num_ids": 614
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m, k = [int(i) for i in lines[0].split()]\n    # d = [[float('inf')] * n for _ in range(n)]\n    d = [[float('inf') for _ in range(n)] for _ in range(n)]\n    for _ in range(m):\n        x, y, w = [int(i) for i in lines[_].split()]\n        d[x - 1][y - 1] = min(d[x - 1][y - 1], w)\n        d[y - 1][x - 1] = min(d[y - 1][x - 1], w)\n    sorted_d = sorted(d, key=lambda x: x[0])\n    # return str(sorted_d[k - 1][k - 1])\n    k -= 1\n    n = len(sorted_d)\n    pairs = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if sorted_d[i][0] + sorted_d[j][0] < sorted_d[k][0]:\n                pairs[j] += 1\n    return str(pairs[k])\n\n\ndef",
        "test": "assert solution(\"5 7 4\") == \"4\"",
        "num_ids": 982
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    skills = list(map(int, stdin.readline().split()))\n    skills.sort()\n    min_diversity = 0\n    count = 0\n    for i in range(n):\n        if i == 0:\n            min_diversity += skills[i]\n        elif i == 1:\n            min_diversity += skills[i] - skills[i - 1]\n        else:\n            min_diversity += skills[i] - skills[i - 1] - skills[i - 2]\n            if i > 2:\n                count += 1\n    return str(min_diversity) + \" \" + str(count)\n\n\nassert(solution('''5''') == '3 1')\nassert(solution('''6''') == '7 2')\nassert(solution('''10''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150''') == '7486 3')\nassert(solution('''12 13 15''') == '7486 2')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71 72 74 76 78 80''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71 72 74 76 78 80 81 83 85''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71 72 74 76 78 80 81 83 85 84 86''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71 72 74 76 78 80 81 83 85 84 86 87 89 91''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71 72 74 76 78 80 81 83 85 84 86 87 89 91 90 93''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71 72 74 76 78 80 81 83 85 84 86 87 89 91 90 93 94''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71 72 74 76 78 80 81 83 85 84 86 87 89 91 90 93 94 95''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 1580 8150 12 13 15 17 19 20 22 24 26 28 30 32 33 34 36 38 40 41 43 45 47 49 50 54 56 58 59 61 63 64 65 67 69 71 72 74 76 78 80 81 83 85 84 86 87 89 91 90 93 94 95 96''') == '7486 3')\nassert(solution('''1 2 5 129 185 581 1041 1909 15",
        "test": "assert solution('10') == '7486 3'",
        "num_ids": 1583
    },
    {
        "number": 4452,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('''1''') == ''",
        "num_ids": 314
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return \"\"\n    p = list(map(int, stdin.readline().split()))\n    k = int(stdin.readline())\n    if k == 0:\n        return \"\"\n    a = stdin.readline().split()\n    if k!= len(a):\n        return \"\"\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        p_c = 0\n        p_i = p[i]\n        for j in range(i):\n            if p_i == p[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                p_c += 1\n        if p_c == 0:\n            return \"\"\n    return \" \".join(str(x) for x in dp)",
        "test": "assert solution(\"4\\n4\\n4\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\") == \"1 1 1 1 1\"",
        "num_ids": 3272
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    _ = int(stdin.readline().strip())\n    queries = [int(x) for x in stdin.readline().strip().split()]\n\n    def answer(arr: List[int], queries: List[int]) -> List[int]:\n        for q in queries:\n            tot = 0\n            tot = sum(arr[:q])\n            min_price = tot\n            if q == 1:\n                continue\n            for i in range(0, q - 1):\n                tot += arr[i + 1]\n                min_price = min(min_price, tot)\n            print(min_price)\n\n    answer(arr, queries)",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 800
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('4 2\\n1 2\\n4 3\\n') == '0 0 1 2\\n'",
        "num_ids": 492
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    s = []\n    for i in range(1, n + 1):\n        s.append(chr(i + ord('a')))\n\n    s.sort()\n\n    p.sort()\n    q.sort()\n\n    if s!= p and s!= q:\n        return \"NO\"\n\n    if k < n - 1:\n        return \"NO\"\n\n    return \"YES\" + ''.join(s)\n",
        "test": "assert solution(stdin) == \"YES\", \"should be YES\"",
        "num_ids": 1956
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cans = [int(stdin.readline().strip()) for _ in range(n)]\n    shots = 0\n    cans = sorted(cans, reverse=True)\n    for can in cans:\n        shots += can\n    return str(shots) + '\\n' +''.join(map(str, cans))\n\nassert(solution('''3\n20 10 20\n''') == '43')\nassert(solution('''4\n10 10 10 10\n''') == '64')\nassert(solution('''6\n5 4 5 4 4 5\n''') == '69')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''4\n1 4\n''') == '2 1')\nassert(solution('''4\n5 4 5 4 4 5\n''') == '39')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''3\n1 4\n''') == '1 3 2')\nassert(solution('''4\n2 4 4 4 4\n''') == '6 1 3 5 2 4')\nassert(solution('''2\n2 1\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''3\n1 4\n''') == '2 1')\nassert(solution('''3\n1 4\n''') == '2 1')\nassert(solution('''4\n5 5 5 5 5 5\n''') == '35')\nassert(solution('''6\n5 4 5 4 4 5\n''') == '79')\nassert(solution('''4\n10 10 10 10\n''') == '64')\nassert(solution('''4\n2 2 2 2 2\n''') == '6 1 3 5 2 4')\nassert(solution('''4\n2 2 2 2 2\n''') == '6 1 3 5 2 4')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')\nassert(solution('''2\n1 4\n''') == '3')",
        "test": "assert solution('2\\n1 4') == '3'",
        "num_ids": 1572
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(pos: int, curr: int, path: str) -> None:\n        nonlocal res\n        if pos == n:\n            if path:\n                res += 1\n            return\n        for i in range(curr, n):\n            if i not in path and is_valid(i, path):\n                path.append(i)\n                dfs(pos + 1, i, path)\n                path.pop()\n\n    def is_valid(i: int, path: str) -> bool:\n        for j in path:\n            if i > j:\n                return False\n        return True\n\n    n = int(stdin.readline())\n    res = 0\n    path = []\n    dfs(0, -1, path)\n    return str(res)\n",
        "test": "assert solution('''4",
        "num_ids": 571
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('4\\n4 4 4 4 4 4 4') == '2'",
        "num_ids": 370
    },
    {
        "number": 4460,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[stdin.find(\"0\")]",
        "test": "assert solution('''5 4 3 2 1''') == '1'",
        "num_ids": 1993
    },
    {
        "number": 4461,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return str(0) if h == w else str(h * (w - 1) + w)",
        "test": "assert solution('1 1') == '0'",
        "num_ids": 287
    },
    {
        "number": 4462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = list(map(int, stdin[1].split()))\n    # Iterate through all pairs\n    for i in range(1, len(a)):\n        if not is_multiple_of_4(a[i - 1], a[i]):\n            return \"No\"\n\n    return \"Yes\"\n\ndef",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 334
    },
    {
        "number": 4463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('axxym') == 'Yes'",
        "num_ids": 276
    },
    {
        "number": 4464,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    while True:\n        # TODO:\n        try:\n            d = sum(map(int, stdin.split()))\n            if (d - c) % b == 0:\n                return \"YES\"\n        except EOFError:\n            break\n        # END\n        print(\"NO\")\n    # END\n",
        "test": "assert solution('1 1 1') == 'YES'",
        "num_ids": 411
    },
    {
        "number": 4465,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b - 1)\n",
        "test": "assert solution('1 2') == '1'",
        "num_ids": 252
    },
    {
        "number": 4466,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n\n    # Find max possible width\n    n = x + y + 2 * z\n    if n % 3 == 0:\n        return str(int(n / 3))\n    else:\n        return str(int(n / 3) + 1)\n",
        "test": "assert solution('1 2 1') == '2'",
        "num_ids": 220
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return",
        "test": "assert solution(\"2 4\\n1 3\\n0 2\\n5 3\\n4 2\\n3 1\") == \"1\"",
        "num_ids": 844
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t, n = map(int, stdin.split())\n    time = [int(x) for x in stdin.split()]\n    print(solve(time, n))\n\ndef",
        "test": "assert solution('''1 2",
        "num_ids": 230
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.readline().split()]\n        l -= 1\n        r -= 1\n        if l > 0:\n            print(1)\n        else:\n            print(2)\n",
        "test": "assert solution('''\\",
        "num_ids": 439
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    q = int(stdin)\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        elif n % 3 == 0:\n            n /= 3\n        elif n % 5 == 0:\n            n /= 5\n        else:\n            return str(-1)\n        count += 1\n    return str(count)\n\n\nimport sys",
        "test": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\",
        "num_ids": 1832
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        lst = [int(stdin) for _ in range(n)]\n        s = 0\n        for i in range(n):\n            if lst[i] > 0:\n                s += lst[i]\n        if s > 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")",
        "test": "assert solution('''4",
        "num_ids": 362
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin[1:n+1]\n    b = stdin[n+2:]\n    s = ''.join(sorted(a)) + ''.join(sorted(b))\n    t = s[::-1]\n    d = {}\n    for i, c in enumerate(s):\n        if c not in d:\n            d[c] = i\n    p = 1\n    for i in range(1, len(s)):\n        if d[t[i]] > d[t[i-1]]:\n            p += 1\n    return p",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 301
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = [int(i) for i in stdin.readline().strip().split()]\n    for _ in range(n):\n        a, b, k = [int(i) for i in stdin.readline().strip().split()]\n        n = k / 2\n        d = n * (n + 1)\n        print(n - a + b - d)\n\nprint(solution(stdin))\n",
        "test": "assert solution('1000000000\\n1\\n1\\n1') == '1000000001'",
        "num_ids": 3209
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = n\n    m = 0\n    while m!= n:\n        s += 3 ** m\n        if s > n:\n            m += 1\n            s -= 3 ** m\n        else:\n            m += 1\n    return str(m)\n",
        "test": "assert solution('''8",
        "num_ids": 389
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        a, b, x, y, n = map(int, stdin.split())\n        if a > x or b > y:\n            print(0)\n            break\n        elif x > y:\n            if a < x:\n                a = x\n            b = b - a\n            a = x\n            n = n - 1\n            if n == 0:\n                print(a * b)\n        elif a == x:\n            b = b - 1\n            n = n - 1\n            if n == 0:\n                print(a * b)\n        elif b == y:\n            a = a - 1\n            n = n - 1\n            if n == 0:\n                print(a * b)\n        else:\n            if a < b:\n                a = b\n                b = a\n            a = a - b\n            b = b - b\n            n = n - 2\n            if n == 0:\n                print(a * b)\n        \n",
        "test": "assert solution(\"12343 43 4543 39 123212\") == \"177177\"",
        "num_ids": 1967
    },
    {
        "number": 4476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split(\" \"))\n    return str(a-b)",
        "test": "assert solution(\"1 1\") == \"0\"",
        "num_ids": 1809
    },
    {
        "number": 4477,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 321
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 2 or k > 100000:\n        return \"NO\"\n    \n    for _ in range(k):\n        n, *seq = [int(x) for x in stdin.split()]\n        if n > 10**6:\n            return \"NO\"\n        if sum(seq) > 10**6:\n            return \"NO\"\n    \n    ans = \"NO\"\n    for _ in range(k):\n        n1, *seq1 = [int(x) for x in stdin.split()]\n        n2, *seq2 = [int(x) for x in stdin.split()]\n        \n        if (sum(seq1) - seq1[n1-1]) == (sum(seq2) - seq2[n2-1]):\n            ans = \"YES\"\n            break\n    return ans\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 1831
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    K, *A = map(int, stdin.split())\n    A = [i * -1 for i in A]\n\n    def _dfs(i, curr):\n        if i == K:\n            return curr\n\n        if A[i] < 0:\n            return max(curr, A[i] + _dfs(i + 1, curr))\n\n        return max(curr, _dfs(i + 1, curr))\n\n    return str(_dfs(0, 0))\n",
        "test": "assert solution([2,-3,-1,5,-4], 2) == 13",
        "num_ids": 978
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef",
        "test": "assert solution(",
        "num_ids": 458
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = [stdin.readline() for _ in range(n)]\n    votes.sort(key=len)\n    print(votes)\n    return \"\"",
        "test": "assert solution('2\\nBart\\nVet\\nBeat\\nVet\\nBeat\\nVet') == \"Beat\"",
        "num_ids": 588
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    N = int(line.split()[0])\n    a = map(int, stdin.readline().strip().split())\n    res = 0\n    for i in range(1, N):\n        for j in range(i + 1, N):\n            res += (a[i] - a[j]) ** 2\n    return str(res)",
        "test": "assert solution('1 2') == '0'",
        "num_ids": 497
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.split(' ')]\n    cake = A\n    donuts = B\n    while cake + donuts < X:\n        donuts += 1\n    return X - (A + donuts)",
        "test": "assert solution(\"1234\\n150\\n100\\n\") == \"84\"",
        "num_ids": 298
    },
    {
        "number": 4484,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split(' ')\n    n, m = int(n), int(m)\n    if n == 1 or m == 1:\n        return '1'\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # print(i, j)\n            if i!= j:\n                count += 1\n    return str(count)",
        "test": "assert solution('''1 1''') == '1'",
        "num_ids": 444
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin:\n        N, M = stdin.split(' ')\n        N = int(N)\n        M = int(M)\n        assert N > 0 and M > 0\n        assert 0 < N < 200000 and 0 < M < 200000\n\n        edges = [[] for _ in range(N)]\n        for _ in range(M):\n            a, b = map(int, stdin.split(' '))\n            assert 1 <= a <= N and 1 <= b <= N\n            edges[a-1].append(b-1)\n            edges[b-1].append(a-1)\n\n        def _dfs(curr: int, visited: Set[int], next: List[int]):\n            visited.add(curr)\n            for nxt in next:\n                if nxt not in visited:\n                    _dfs(nxt, visited, edges[nxt])\n\n        for i in range(N):\n            if i in visited:\n                continue\n            next = edges[i]\n            _dfs(i, visited, next)\n        return 'POSSIBLE' if len(visited) == N else 'IMPOSSIBLE'\n    return ''\n\nassert solution('3 2') == 'POSSIBLE'\nassert solution('1 2') == 'POSSIBLE'\nassert solution('1 2\\n1 3') == 'POSSIBLE'\nassert solution('2 1\\n1 3') == 'POSSIBLE'\nassert solution('2 1\\n3 2') == 'POSSIBLE'\nassert solution('1 1\\n1 2') == 'POSSIBLE'\nassert solution('2 3\\n1 2\\n3 2') == 'POSSIBLE'\nassert solution('1 1\\n3 2\\n3 2') == 'POSSIBLE'\nassert solution('1 1\\n1 3\\n3 2') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 2\\n1 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2') == 'POSSIBLE'\nassert solution('2 3\\n1 2\\n3 2') == 'POSSIBLE'\nassert solution('1 1\\n3 2\\n3 2') == 'POSSIBLE'\nassert solution('1 1\\n1 3\\n3 2') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n1 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n1 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n1 2\\n",
        "test": "assert solution(stdin) == \"POSSIBLE\"",
        "num_ids": 1974
    },
    {
        "number": 4486,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for i in range(len(stdin)):\n        if i % 2 == 1:\n            result += stdin[i]\n    return result",
        "test": "assert solution('') == ''",
        "num_ids": 214
    },
    {
        "number": 4487,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A: str = stdin.split()[0]\n    B: str = stdin.split()[1]\n    C: str = stdin.split()[2]\n    if A[len(A) - 1] == B[0] and B[len(B) - 1] == C[0]:\n        return 'YES'\n    return 'NO'",
        "test": "assert solution(\"rng ogorilla apple\") == \"NO\"",
        "num_ids": 360
    },
    {
        "number": 4488,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('36\\n24')\n    'GREATER'\n    >>> solution('5\\n5')\n    'EQUAL'\n    \"\"\"\n    a, b = (int(x) for x in stdin.split())\n    return 'GREATER' if a > b else 'LESS' if a < b else 'EQUAL'\n",
        "test": "assert solution('2 2') == 'EQUAL'",
        "num_ids": 313
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = list(stdin[1:n+1])\n    t = list(stdin[n+1:])\n    counter = 0\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                counter += 1\n                t[j] = 0\n                break\n    return str(counter)\n\nprint(solution(stdin))\n",
        "test": "assert solution('apple\\norange\\napple\\n1\\ngrape\\n') == '2'",
        "num_ids": 797
    },
    {
        "number": 4490,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    b is A, C, G or T\n    T is T\n    \"\"\"\n    b = stdin.strip()\n    if b == \"A\":\n        return \"T\"\n    elif b == \"C\":\n        return \"G\"\n    elif b == \"G\":\n        return \"C\"\n    elif b == \"T\":\n        return \"A\"\n    else:\n        assert False\n",
        "test": "assert solution('A') == 'T'",
        "num_ids": 259
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    rows = [list(map(int, row.split(' '))) for row in rows]\n    # print(rows)\n    return find_candies(rows)\n\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 1980
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    candies, num_ops = list(map(int, stdin.strip().split(\" \")))\n    candy_grid = [list(map(int, stdin.strip().split(\" \"))) for _ in range(candies)]\n    possible = True\n    while possible:\n        candy_grid = step(candy_grid)\n        if candy_grid[-1][0] == 0:\n            possible = False\n    return str(num_ops)\n\ndef",
        "test": "assert solution(",
        "num_ids": 472
    },
    {
        "number": 4493,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    c1, c2, c3 = [int(x) for x in stdin.split()]\n    print(\"Yes\" if c1 + c2 + c3 == 6 else \"No\")",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 451
    },
    {
        "number": 4494,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    contest_type = stdin.strip()\n    if contest_type == \"ABC\":\n        return \"ARC\"\n    return \"ABC\"",
        "test": "assert solution('ABC') == 'ARC'",
        "num_ids": 112
    },
    {
        "number": 4495,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.strip().split(' ')))\n    return str(input_list[0] // input_list[2])",
        "test": "assert solution('1 100 100') == '0'",
        "num_ids": 369
    },
    {
        "number": 4496,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    D: int = int(stdin)\n\n    if D == 25:\n        print('Christmas')\n    elif D == 24:\n        print('Christmas Eve')\n    elif D == 23:\n        print('Christmas Eve Eve')\n    else:\n        print('Christmas Eve Eve Eve')",
        "test": "assert solution(\"22\") == \"Christmas Eve Eve Eve\"",
        "num_ids": 359
    },
    {
        "number": 4497,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 1\n    for i in range(1, N):\n        if i % 2 == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution('1') == '1'",
        "num_ids": 219
    },
    {
        "number": 4498,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a < d or b < d or c < d:\n        return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"4 7 9 3\") == \"Yes\"",
        "num_ids": 339
    },
    {
        "number": 4499,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    return \"\".join(word[0].upper() for word in words)",
        "test": "assert solution('atcoder beginner contest') == 'ABC'",
        "num_ids": 212
    },
    {
        "number": 4500,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int, stdin.split())\n    if (a + b >= c and (a + b) % 2 == 0):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('50 100 120') == 'Yes'",
        "num_ids": 270
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    S = [int(stdin) for stdin in stdin.split()]\n\n    r = 0\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            if (S[i] + S[j]) % A == 0:\n                r += 1\n\n    return r",
        "test": "assert solution(\"7 9 8 9\") == \"5\"",
        "num_ids": 344
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_reverse(s: str, i: int, j: int) -> bool:\n        while i < j:\n            if s[i]!= s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split(\" \")]\n    arr.reverse()\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_reverse(arr, i, j):\n                arr[i], arr[j] = arr[j], arr[i]\n    return \" \".join(map(str, arr))\n\nassert(solution(\">1 2 3 4\\n\") == \"4 2 1 3\")\nassert(solution(\">2 1 2 3\\n\") == \"1 3 2\")\nassert(solution(\">3 1 2\\n\") == \"1 2\")\nassert(solution(\">3 1 2 3 4\\n\") == \"4 3 2 1\")\nassert(solution(\">4 1 2 3 4\\n\") == \"1 3 2 4\")\nassert(solution(\">5 1 2 3 4 5\\n\") == \"1 2 3 4 5\")\nassert(solution(\">5 1 2 3 4 5 6\\n\") == \"1 2 3 4 5 6\")\nassert(solution(\">5 1 2 3 4 5 6 7\\n\") == \"1 2 3 4 5 6 7\")\nassert(solution(\">5 1 2 3 4 5 6 7 8\\n\") == \"1 2 3 4 5 6 7 8\")\nassert(solution(\">5 1 2 3 4 5 6 7 8 9\\n\") == \"1 2 3 4 5 6 7 8 9\")\nassert(solution(\">10 1 2 3 4 5 6 7 8 9 10 11 12\\n\") == \"1 2 3 4 5 6 7 8 9 10 11 12\")\n",
        "test": "assert solution('1 2 3 4 5 6 7 8 9 10') == '9 8 7 6 5 4 3 2 1'",
        "num_ids": 784
    },
    {
        "number": 4503,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    health, moves = [int(x) for x in stdin.split()]\n    moves = [int(x) for x in stdin.split()]\n    moveset = {}\n    for i in range(0, len(moves)):\n        if moves[i] not in moveset:\n            moveset[moves[i]] = i\n    for i in range(0, health):\n        if i not in moveset:\n            moveset[i] = i\n    win = False\n    for i in moveset.values():\n        if i <= health:\n            win = True\n            break\n    if win:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 3\") == \"Yes\"",
        "num_ids": 501
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) == 1:\n        return 1\n    if len(S) == 2:\n        if S[0] == S[1]:\n            return 2\n        else:\n            return 1\n    # odd length string\n    even_length = 1\n    odd_length = 1\n    for i in range(len(S)-1):\n        if S[i] == S[i+1]:\n            even_length += 2\n        else:\n            odd_length = max(odd_length, even_length)\n            even_length = 1\n    return max(odd_length, even_length)\n",
        "test": "assert solution(\"ababababababababab\") == \"6\"",
        "num_ids": 410
    },
    {
        "number": 4505,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return 'Yes' if 'abc' in s else 'No'",
        "test": "assert solution(\"abc\") == \"Yes\"",
        "num_ids": 297
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    l = len(a)\n    r = len(b)\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(l):\n        res += a[i] * b[i]\n    return str(res % 1000000007)\n",
        "test": "assert solution('''5",
        "num_ids": 360
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n    c = [[0] * 2000 for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        x, y = [int(x) for x in stdin.strip().split(' ')]\n        c[i][x - 1] = min(c[i - 1][x - 1], y)\n    a.sort()\n    res = 0\n    for i in range(k):\n        res += a[i] * min(c[m][i], c[m][i + 1])\n    return str(res)\n\nassert solution('7 4 5') == '7'\nassert solution('9 4 8') == '17'\nassert solution('5 1 4') == '17'\nassert solution('9 7') == '17'\nassert solution('5 3') == '17'\nassert solution('5 7') == '17'\nassert solution('5 6') == '17'\nassert solution('5 9') == '17'\nassert solution('5 2') == '17'\nassert solution('5 4') == '17'\nassert solution('5 6') == '17'\nassert solution('5 8') == '17'\nassert solution('5 9') == '17'\nassert solution('5 1') == '17'\nassert solution('5 4') == '17'\nassert solution('5 6') == '17'\nassert solution('5 1') == '17'\nassert solution('5 7') == '17'\nassert solution('5 2') == '17'\nassert solution('5 6') == '17'\nassert solution('5 1') == '17'\nassert solution('5 2') == '17'\nassert solution('5 3') == '17'\nassert solution('5 7') == '17'\nassert solution('5 4') == '17'\nassert solution('5 2') == '17'\nassert solution('5 7') == '17'\nassert solution('5 6') == '17'\nassert solution('5 9') == '17'\nassert solution('5 9') == '17'\nassert solution('5 3') == '17'\nassert solution('5 7') == '17'\nassert solution('5 1') == '17'\nassert solution('5 3') == '17'\nassert solution('5 2') == '17'\nassert solution('5 9') == '17'\nassert solution('5 2') == '17'\nassert solution('5 4') == '17'\nassert solution('5 9') == '17'\nassert solution('5 1') == '17'\nassert solution('5 7') == '17'\nassert solution('5 7') == '17'\nassert solution('5 3') == '17'\nassert solution('5 7') == '17'\nassert solution('5 3') == '17'\nassert solution('5 7') == '17'\nassert solution('5 1') == '17'\nassert solution('5 2') == '17'\nassert solution('5 1') == '17'\nassert solution('5 6') == '17'\nassert solution('5 2') == '17'\nassert solution('5 7') == '17'\nassert solution('5 2') == '17'\nassert solution('5 7') == '17'\nassert solution('5 3') == '17'\nassert solution('5 7') == '17'\nassert solution('5 3') == '17'\nassert solution('5 7') == '17'\nassert solution('5 1') == '17'\nassert solution('5 2') == '17'\nassert solution('5 6') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 4') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 2') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 9') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 7') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 6') == '17'\nassert solution('5 1') == '17'\nassert solution('5 2') == '17'\nassert solution('5 1') == '17'\nassert solution('5 2') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 4') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1') == '17'\nassert solution('5 1')",
        "test": "assert solution('9 7') == '17'",
        "num_ids": 1663
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    g = nx.Graph()\n    g.add_nodes_from(range(1, n + 1))\n\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        g.add_edge(u, v)\n\n    return str(nx.minimum_spanning_tree(g).number_of_edges())\n\n\n\ndef",
        "test": "assert solution('7\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\\n4 5') == '0'",
        "num_ids": 687
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = range(1, n)\n    for i in range(1, k):\n        if i % n == 0:\n            a.append(i)\n    return '\\n'.join(map(str, a))",
        "test": "assert solution('''3 7",
        "num_ids": 374
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # REPLACE THE RETURN STATEMENT ABOVE WITH YOUR CODE\n    \n    n, k = [int(x) for x in stdin.split()]\n    nums = [int(x) for x in stdin.split()]\n    \n    ids = {}\n    \n    for i in range(len(nums)):\n        if nums[i] not in ids:\n            ids[nums[i]] = [i+1]\n        else:\n            ids[nums[i]].append(i+1)\n            \n    m = min(len(ids), k)\n    \n    return m\n\nprint(solution(input()))",
        "test": "assert solution('3 1') == '1'",
        "num_ids": 1575
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def game(cards):\n        return sum(cards)\n\n    m = 0\n    for _ in range(n):\n        cnt, damage = [int(x) for x in stdin.readline().strip().split()]\n        if cnt >= 3:\n            cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n            m = max(m, game(cards) * 2)\n\n    return str(m)\n\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt, damage = [int(x) for x in input().strip().split()]\n    if cnt >= 3:\n        cards = [int(stdin.readline().strip()) for _ in range(cnt)]\n        m = max(m, damage * 2)\n\nprint(m)\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncards = [int(x) for x in input().strip().split()]\n\nm = 0\nfor _ in range(n):\n    cnt",
        "test": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100') == '263'",
        "num_ids": 3159
    },
    {
        "number": 4512,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('') is None",
        "num_ids": 304
    },
    {
        "number": 4513,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 161
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    data = list(map(int, stdin.split()))\n    for _ in range(q):\n        u, k = map(int, stdin.split())\n        pass\n\nprint(solution(stdin))\n",
        "test": "assert solution('''9 6",
        "num_ids": 383
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()[:-1]\n    t = int(stdin.readline()[:-1])\n    for _ in range(t):\n        a, b, c, n = [int(x) for x in stdin.readline()[:-1].split()]\n        if n % a == 0 and n % b == 0 and n % c == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"",
        "test": "assert solution('4\\n1\\n1\\n1\\n1') == 'YES'",
        "num_ids": 697
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    p = [int(x) for x in stdin.strip().split()]\n    return''.join([str(f(p, i)) for i in range(1, n)])\n    \n\ndef",
        "test": "assert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n2 1 3 2 2 2 2 2') == '9 8 12 6 8'",
        "num_ids": 1190
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    edges = [list(map(int, stdin.split(' '))) for _ in range(n-1)]\n    queries = [list(map(int, stdin.split(' '))) for _ in range(m)]\n\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def get_distance(u, v):\n        def bfs(u, v):\n            visited = set()\n            queue = [u]\n            distance = 0\n            while queue:\n                n = queue.pop(0)\n                if n == v:\n                    return distance\n                visited.add(n)\n                for node in graph[n]:\n                    if node not in visited:\n                        queue.append(node)\n            return -1\n\n        def bfs_path(u, v):\n            visited = set()\n            queue = [(u, 0)]\n            while queue:\n                node, distance = queue.pop(0)\n                if node == v:\n                    return distance\n                visited.add(node)\n                for node in graph[node]:\n                    if node not in visited:\n                        queue.append((node, distance + 1))\n            return -1\n\n        visited = set()\n        queue = [u]\n        distance = 0\n        while queue:\n            n = queue.pop(0)\n            if n == v:\n                return distance\n            visited.add(n)\n            for node in graph[n]:\n                if node not in visited:\n                    queue.append(node)\n        return -1\n\n    def dist_to_u(u, v):\n        return get_distance(u, v) == 1 or get_distance(v, u) == 1\n\n    answers = []\n    for i, query in enumerate(queries):\n        distances = [get_distance(u, v) for u, v in zip(query[:-1], query[1:])]\n        if all(distances) and all(dist_to_u(u, v) for u, v in zip(query[:-1], query[1:])):\n            answers.append('YES')\n        else:\n            answers.append('NO')\n\n    return '\\n'.join(answers)\n",
        "test": "assert solution('''10 6",
        "num_ids": 1618
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1 1 1\") == \"NO\"",
        "num_ids": 511
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string of length n = k and performs the fewest number of k operations to obtain lexicographically smallest string.\n    '''\n    pass",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 1666
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def inversion_count(A):\n        n = len(A)\n        # sort the array\n        A.sort()\n        # maintain a count of inversions\n        inv_count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if A[j] < A[i]:\n                    inv_count += 1\n        return inv_count\n    \n    segments = []\n    for line in stdin.splitlines():\n        l, r = [int(n) for n in line.split()]\n        segments.append((l, r))\n    k = int(stdin.readline())\n    n = len(segments)\n    print(inversion_count(segments))\n    ans = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][1] >= segments[j][0]:\n                ans[j] += 1\n    print(' '.join(str(n - a) for a in ans))\n\nsolution(input())\n",
        "test": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"",
        "num_ids": 759
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = [int(x) for x in stdin.readline().strip().split(' ')]\n    speeds = [int(x) for x in stdin.readline().strip().split(' ')]\n    pos = 0\n    min_dist = 1e9\n    while pos < n:\n        point = points[pos]\n        speed = speeds[pos]\n        if point + speed < min_dist:\n            min_dist = point + speed\n        pos += 1\n    return str(min_dist)\n\nassert(solution('''3''') == '3')\nassert(solution('''5''') == '19')\nassert(solution('''2''') == '0')\nassert(solution('''2 1''') == '0')\nassert(solution('''2 2''') == '0')\nassert(solution('''2 1 4 3 5''') == '19')\nassert(solution('''2 2 2 3 4''') == '19')\nassert(solution('''2\n1 2\n-3 0''') == '0')\nassert(solution('''2\n2 1\n2 2\n2 3''') == '0')\n'''\nassert(solution('''8''') == '20')\nassert(solution('''2 1''') == '0')\nassert(solution('''8 7''') == '17')\nassert(solution('''8 8''') == '16')\nassert(solution('''8 9''') == '14')\nassert(solution('''8 10''') == '12')\nassert(solution('''8 11''') == '10')\nassert(solution('''8 12''') == '8')\nassert(solution('''8 13''') == '6')\nassert(solution('''8 14''') == '4')\nassert(solution('''8 15''') == '2')\nassert(solution('''8 16''') == '0')\nassert(solution('''8 17''') == '-2')\nassert(solution('''8 18''') == '-4')\nassert(solution('''8 19''') == '-6')\nassert(solution('''8 20''') == '-8')\nassert(solution('''8 21''') == '-10')\nassert(solution('''8 22''') == '-12')\nassert(solution('''8 23''') == '-14')\nassert(solution('''8 24''') == '-16')\nassert(solution('''8 25''') == '-18')\nassert(solution('''8 26''') == '-20')\nassert(solution('''8 27''') == '-22')\nassert(solution('''8 28''') == '-24')\nassert(solution('''8 29''') == '-26')\nassert(solution('''8 30''') == '-28')\nassert(solution('''8 31''') == '-30')\nassert(solution('''8 32''') == '-32')\nassert(solution('''8 33''') == '-34')\nassert(solution('''8 34''') == '-36')\nassert(solution('''8 35''') == '-38')\nassert(solution('''8 36''') == '-40')\nassert(solution('''8 37''') == '-42')\nassert(solution('''8 38''') == '-44')\nassert(solution('''8 39''') == '-46')\nassert(solution('''8 40''') == '-48')\nassert(solution('''8 41''') == '-50')\nassert(solution('''8 42''') == '-52')\nassert(solution('''8 43''') == '-54')\nassert(solution('''8 44''') == '-56')\nassert(solution('''8 45''') == '-58')\nassert(solution('''8 46''') == '-60')\nassert(solution('''8 47''') == '-62')\nassert(solution('''8 48''') == '-64')\nassert(solution('''8 49''') == '-66')\nassert(solution('''8 50''') == '-68')\nassert(solution('''8 51''') == '-70')\nassert(solution('''8 52''') == '-72')\nassert(solution('''8 53''') == '-74')\nassert(solution('''8 54''') == '-76')\nassert(solution('''8 55''') == '-78')\nassert(solution('''8 56''') == '-80')\nassert(solution('''8 57''') == '-82')\nassert(solution('''8 58''') == '-84')\nassert(solution('''8 59''') == '-86')\nassert(solution('''8 60''') == '-88')\nassert(solution('''8 61''') == '-90')\nassert(solution('''8 62''') == '-92')\nassert(solution('''8 63''') == '-94')\nassert(solution('''8 64''') == '-96')\nassert(solution('''8 65''') == '-98')\nassert(solution('''8 66''') == '-100')\nassert(solution('''8 67''') == '-102')\nassert(solution('''8 68''') == '-104')\nassert(solution('''8 69''') == '-106')\nassert(solution('''8 70''') == '-108')\nassert(solution('''8 71''') == '-110')\nassert(solution('''8 72''') == '-112')\nassert(solution('''8 73''') == '-114')\nassert(solution('''8 74''') == '-116')\nassert(solution('''8 75''') == '-118')\nassert(solution('''8 76''') == '-120')\nassert(solution('''8",
        "test": "assert solution('1\\n100 -1 2 3 4 5 6 7 8 9 10\\n1 2 -1 -2 3 -4 5 -6 7 -8 9 -10') == '18'",
        "num_ids": 1867
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nConstraints:\n1\u2264n\u22642\u00b710\u2075\n1\u2264m\u22642\u00b710\u2075\n1\u2264u_i,v_i\u2264n\u226410\u2075\n1\u2264w_i\u226410\u2075\n1\u2264q_i\u22642\u00b710\u2075\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nedges = [map(int, stdin.readline().split()) for _ in range(n-1)]\nqueries = [int(stdin.readline()) for _ in range(m)]\n\ncounters = [[0 for _ in range(n)] for _ in range(n)]\n\nfor u, v, w in edges:\n    counters[u-1][v-1] = w\n    counters[v-1][u-1] = w\n\nfor q in queries:\n    for i in range(n):\n        for j in range(n):\n            if counters[i][j] <= q:\n                counters[i][j] = -1\n\nfor i in range(n):\n    for j in range(n):\n        if counters[i][j] == -1:\n            counters[i][j] = counters[j][i]\n\nfor i in range(n):\n    counters[i][i] = -1\n\nfor i in range(n):\n    for j in range(n):\n        if counters[i][j]!= -1:\n            print(counters[i][j], end=\" \")\n    print()\n",
        "test": "assert solution(open(\"test_4.txt\").read()) == \"1 0 1\"",
        "num_ids": 715
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def check(a: list) -> bool:\n        m = 1\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if abs(a[i] - a[j]) <= m:\n                    m = abs(a[i] - a[j])\n                    n = min(a[i], a[j])\n        return m == 1\n    n = int(stdin.readline())\n    while n:\n        n -= 1\n        numbers = list(map(int, stdin.readline().split()))\n        if check(numbers):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return\n\nprint(solution(stdin))",
        "test": "assert solution(stdin) == ''",
        "num_ids": 1901
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(",
        "num_ids": 312
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        a = [0] * (n // 2)\n        s = 0\n        for i in range(len(a)):\n            a[i] = 2 * i + 1\n            s += a[i]\n        a += a[::-1]\n        a.sort()\n        if s == (n * (n + 1) // 2):\n            print('YES')\n            print(*a)\n        else:\n            print('NO')\nsolution(stdin)\n",
        "test": "assert solution('\\n\\n\\n') == ''",
        "num_ids": 430
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(open(\"2.in\", \"r\").read()))\nprint(solution(open(\"1.in\", \"r\").read()))\n",
        "test": "assert solution(\"3\\n1 2 3\\n3\") == \"3\"",
        "num_ids": 862
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        nums = list(map(lambda x: tuple(map(int, x.split())), stdin.readline().strip().split()))\n        nums.sort(key = lambda x: x[0])\n        nums.sort(key = lambda x: x[1])\n        print(nums)\n        count = 0\n        ans = 0\n        for i in range(1, n):\n            if nums[i][0] <= nums[i-1][1]:\n                ans = max(ans, count)\n                count += 1\n        print(ans)",
        "test": "assert solution('''4",
        "num_ids": 560
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    for _ in range(test_cases):\n        h, m = list(map(int, stdin.split()))\n        new_h = (h + 1) % 24\n        new_m = (m + 60) % 60\n        if new_h == 0:\n            new_m = 0\n        print(new_m)",
        "test": "assert solution('\\n'.join([",
        "num_ids": 369
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for line in stdin:\n        line = line.strip()\n        if line == \"\":\n            continue\n        n = int(line)\n        s = stdin.readline().strip()\n        l = 0\n        r = 0\n        d = 0\n        for i in range(n):\n            if s[i] == \"U\":\n                d += 1\n                l += 1\n                r += 1\n            elif s[i] == \"D\":\n                d -= 1\n                l += 1\n                r += 1\n            elif s[i] == \"R\":\n                d -= 1\n                l += 1\n                r += 1\n            elif s[i] == \"L\":\n                d += 1\n                l += 1\n                r += 1\n        if l == r:\n            res.append(\"{} {}\".format(l, r))\n        else:\n            res.append(\"-1\")\n    return \"\\n\".join(res)",
        "test": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()",
        "num_ids": 1649
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nfrom collections import Counter\n\ndef",
        "test": "assert solution(stdin) == expected_stdout",
        "num_ids": 158
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    result = 0\n\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if a[j] > a[i]:\n                result += a[j] - a[i]\n\n    return str(result)\n",
        "test": "assert solution('4\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\\n5 9\\n5 10\\n5 11\\n5 12\\n5 13\\n5 14\\n5 15\\n5 16\\n5 17\\n5 18\\n5 19\\n5 20\\n5 21\\n5 22\\n5 23\\n5 24\\n5 25\\n5 26\\n5 27\\n5 28\\n5 29\\n5 30\\n5 31\\n5 32\\n5 33\\n5 34\\n5 35\\n5 36\\n5 37\\n5 38\\n5 39\\n5 40\\n5 41\\n5 42\\n5 43\\n5 44\\n5 45\\n5 46\\n5 47\\n5 48\\n5 49\\n5 50\\n5 51\\n5 52\\n5 53\\n5 54\\n5 55\\n5 56\\n5 57\\n5 58\\n5 59\\n5 60\\n5 61\\n5 62\\n5 63\\n5 64\\n5 65\\n5 66\\n5 67\\n5 68\\n5 69\\n5 70\\n5 71\\n5 72\\n5 73\\n5 74\\n5 75\\n5 76\\n5 77\\n5 78\\n5 79\\n5 80\\n5 81\\n5 82\\n5 83\\n5 84\\n5 85\\n5 86\\n5 87\\n5 88\\n5 89\\n5 90\\n5 91\\n5 92\\n5 93\\n5 94\\n5 95\\n5 96\\n5 97\\n5 98\\n5 99\\n5 100\\n5 101\\n5 102\\n5 103\\n5 104\\n5 105\\n5 106\\n5 107\\n5 108\\n5 109\\n5 110\\n5 111\\n5 112\\n5 113\\n5 114\\n5 115\\n5 116\\n5 117\\n5 118\\n5 119\\n5 120\\n5 121\\n5 122\\n5 123\\n5 124\\n5 125\\n5 126\\n5 127\\n5 128\\n5 129\\n5 130\\n5 131\\n5 132\\n5 133\\n5 134\\n5 135\\n5 136\\n5 137\\n5 138\\n5 139\\n5 140\\n5 141\\n5 142\\n5 143\\n5 144\\n5 145\\n5 146\\n5 147\\n5 148\\n5 149\\n5 150\\n5 151\\n5 152\\n5 153\\n5 154\\n5 155\\n5 156\\n5 157\\n5 158\\n5 159\\n5 160\\n5 161\\n5 162\\n5 163\\n5 164\\n5 165\\n5 166\\n5 167\\n5 168\\n5 169\\n5 170\\n5 171\\n5 172\\n5 173\\n5 174\\n5 175\\n5 176\\n5 177\\n5 178\\n5 179\\n5 180\\n5 181\\n5 182\\n5 183\\n5 184\\n5 185\\n5 186\\n5 187\\n5 188\\n5 189\\n5 190\\n5 191\\n5 192\\n5 193\\n5 194\\n5 195\\n5 196\\n5 197\\n5 198\\n5 199\\n5 200\\n5 201\\n5 202\\n5 203\\n5 204\\n5 205\\n5 206\\n5 207\\n5 208\\n5 209\\n5 210\\n5 211\\n5 212\\n5 213\\n5 214\\n5 215\\n5 216\\n5 217\\n5 218\\n5 219\\n5 220\\n5 221\\n5 222\\n5 223\\n5 224\\n5 225\\n5 226\\n5 227\\n5 228\\n5 229\\n5 230\\n5 231\\n5 232\\n5 233\\n5 234\\n5 235\\n5 236\\n5 237\\n5 238\\n5 239\\n5 240\\n5 241\\n5 242\\n5 243\\n5 244\\n5 245\\n5 246\\n5 247\\n5 248\\n5 249\\n5 250\\n5 251\\n5 252\\n5 253\\n5 254\\n5 255\\n5 256\\n5 257\\n5 258\\n5 259\\n5 260\\n5 261\\n5 262\\n5 263\\n5 264\\n5 265\\n5 266\\n5 267\\n5 268\\n5 269\\n5 270\\n5 271\\n5 272\\n5 273\\n5 274\\n5 275\\n5 276\\n5 277\\n5 278\\n5 279\\n5 280\\n5 281\\n5 282\\n5 283\\n5 284\\n5 285\\n5 286\\n5 287\\n5 288\\n5 289\\n5 290\\n5 291\\n5 292\\n5 293\\n5 294\\n5 295\\n5 296\\n5 297\\n5 298\\n5 299\\n5 300\\n5 301\\n5 302\\n5 303\\n5 304\\n5 305\\n5 306\\n5 307\\n5 308\\n5 309\\n5 310\\n5 311\\n5 312\\n5 313\\n5 314\\n5 315\\n5 316\\n5 317\\n5 318\\n5 319\\n5 320\\n5 321\\n5 322\\n5 323\\n5 324\\n5 325\\n5 326\\n5 327\\n5 328\\n5 329\\n5 330\\n5 331\\n5 332\\n5 333\\n5 334\\n5 335\\n5 336\\n5 337\\n5 338\\n5 339\\n5 340\\n5 341\\n5 342\\n5 343\\n5 344\\n5 345\\n5 346\\n5 347\\n5 348\\n5 349\\n5 350\\n5 351\\n5 352\\n5 353\\n5 354\\n5 355\\n5 356\\n5 357\\",
        "num_ids": 1989
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(len(a)):\n        while a[i] % k!= 0:\n            res += 1\n            a[i] += 1\n    return str(res)",
        "test": "assert solution('''5",
        "num_ids": 599
    },
    {
        "number": 4533,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    g = [int(i) for i in stdin.split(' ')]\n    c = [int(i) for i in stdin.split(' ')]\n    g.sort()\n    c.sort()\n    res = 0\n    for i in range(n):\n        if c[i] >= g[i]:\n            res += 1\n            c[i] = 0\n    return str(res)",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 796
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... ''')\n    '[1,3,3,1]'\n    \"\"\"\n    n = int(stdin.strip())\n    res = [1]\n    for _ in range(n):\n        res.append(1)\n        for i in range(1, len(res)):\n            res[i] = res[i-1] + res[i]\n    return str(res)\n",
        "test": "assert solution(6) == [1, 6, 15, 20, 15, 6, 1]",
        "num_ids": 438
    },
    {
        "number": 4535,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n'''\n",
        "test": "assert solution(0b11111111111111111111111111101) == 31",
        "num_ids": 402
    },
    {
        "number": 4536,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join(map(str, list(reversed(stdin.split()))))) + 1)\n",
        "test": "assert solution(\"1\") == \"2\"",
        "num_ids": 2437
    },
    {
        "number": 4537,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the largest value among 3 integers\n\n    Args:\n        stdin: 3 integers in the format A B\n\n    Returns:\n        Prints the largest value\n    \"\"\"\n    a, b = [int(x) for x in stdin.split()]\n    return str(max(a+b, a-b, a*b))",
        "test": "assert solution('3 1') == \"4\"",
        "num_ids": 288
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    line: List[str] = stdin.split('\\n')\n    n: int = int(line[0])\n    d: int = int(line[1])\n    p: List[int] = [int(x) for x in line[2:]]\n    count: int = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(p[i]-p[j]) <= d:\n                count += 1\n    return str(count)\n\nprint(solution(stdin.read()))\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution(\"3 4\") == \"2\"",
        "num_ids": 338
    },
    {
        "number": 4539,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % sum(int(d) for d in str(N)) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return 'No'",
        "test": "assert solution(\"123\") == \"No\"",
        "num_ids": 272
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(1, n):\n        if a[i] == -1:\n            continue\n        cost = abs(a[i] - a[0])\n        a[i] = abs(a[i] - a[0])\n        for j in range(1, i):\n            a[j] += cost\n        a[0] = 0\n    return''.join(map(str, a))",
        "test": "assert solution('3\\n3\\n-1\\n') == '12'",
        "num_ids": 435
    },
    {
        "number": 4541,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin.strip()\n    if letter in \"aeiou\":\n        return \"vowel\"\n    else:\n        return \"consonant\"",
        "test": "assert solution('a') == 'vowel'",
        "num_ids": 292
    },
    {
        "number": 4542,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution
        "num_ids": 1711
    },
    {
        "number": 4543,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a,b = [int(s) for s in stdin.split()]\n    n = a*a + b*b\n    return 'Yes' if n == int(n) else 'No'",
        "test": "assert solution('1 21') == 'Yes'",
        "num_ids": 257
    },
    {
        "number": 4544,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    N = int(s[0])\n    a = list(map(int, s[1:]))\n    \n    best = 0\n    for i in range(N):\n        if a[i] < i+1:\n            if best < (N-i) - (a[i] - (i+1)):\n                best = (N-i) - (a[i] - (i+1))\n    \n    return str(best)",
        "test": "assert solution(\"4 1 4 1 5 9 2\") == \"4\"",
        "num_ids": 434
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    return",
        "test": "assert solution('''3",
        "num_ids": 441
    },
    {
        "number": 4546,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"2 4 6\") == \"YES\"",
        "num_ids": 214
    },
    {
        "number": 4547,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print('Yes' if n % 10 == 9 else 'No')",
        "test": "assert solution(10) == \"Yes\"",
        "num_ids": 173
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, x = [int(x) for x in stdin.split()]\n\n    A = [int(x) for x in stdin.split()]\n\n    cost = A[x]\n    for i in range(m):\n        if i == x:\n            continue\n\n        cost += 1\n\n        if A[i] == 0:\n            cost += 1\n        elif A[i] == n - 1:\n            cost += 1\n\n    return str(cost)",
        "test": "assert solution(\"1 2 2\") == \"2\"",
        "num_ids": 615
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n\n    matrix = [[0 if x == '#' else 1 for x in stdin.split()[i]] for i in range(H)]\n\n    ans = \"\"\n\n    # check for lines\n    for i in range(H):\n        if sum(matrix[i]) == 0:\n            ans += \"Yes\\n\"\n            continue\n\n        # check for columns\n        col_sum = sum(matrix[j][i] for j in range(W))\n        if col_sum == 0:\n            ans += \"Yes\\n\"\n            continue\n\n        # check for diagonals\n        diag_sum = sum(matrix[i][i] for i in range(W))\n        if diag_sum == 0:\n            ans += \"Yes\\n\"\n            continue\n\n        diag_sum = sum(matrix[i][W-i-1] for i in range(W))\n        if diag_sum == 0:\n            ans += \"Yes\\n\"\n            continue\n\n    # check for columns\n    for j in range(W):\n        col_sum = sum(matrix[i][j] for i in range(H))\n        if col_sum == 0:\n            ans += \"Yes\\n\"\n            continue\n\n        # check for diagonals\n        diag_sum = sum(matrix[i][j] for i in range(H))\n        if diag_sum == 0:\n            ans += \"Yes\\n\"\n            continue\n\n        diag_sum = sum(matrix[i][H-i-1] for i in range(H))\n        if diag_sum == 0:\n            ans += \"Yes\\n\"\n            continue\n\n    print(ans)\n\nsolution(input())\n",
        "test": "assert solution(SAMPLE_INPUT) == EXPECTED_OUTPUT",
        "num_ids": 747
    },
    {
        "number": 4550,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a + b + c) % 3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 30 40\") == \"No\"",
        "num_ids": 330
    },
    {
        "number": 4551,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    print(\"Left\" if data[0] > data[1] else \"Right\" if data[0] < data[1] else \"Balanced\")\n    return \"Left\" if data[0] > data[1] else \"Right\" if data[0] < data[1] else \"Balanced\"\n\ndef",
        "test": "assert solution(stdin) == 'Left'",
        "num_ids": 204
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    shops = [int(x) for x in stdin.readline().split()]\n    profits = [int(x) for x in stdin.readline().split()]\n\n    # preprocess\n    for i in range(N):\n        if shops[i] == 1:\n            shops[i] = 0\n        else:\n            shops[i] = 1\n        profits[i] = profits[i] * shops[i]\n\n    # TODO:\n    # - use dynamic programming\n    # - return the maximum profit\n    return \"\"",
        "test": "assert solution('1\\n1 1 0 1 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n-2 -3 4 -2 -1 -1 0 -1') == '8'",
        "num_ids": 1048
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    s = stdin.split()[1]\n    if len(s)!= a + b + 1:\n        print(\"No\")\n    else:\n        print(\"Yes\")",
        "test": "assert solution('AA') == 'No'",
        "num_ids": 278
    },
    {
        "number": 4554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdin\n    input = stdin.readlines()\n    W, a, b = map(int, input[0].split())\n    print(abs((a + a + W) - (b + b + W)))\n\nsolution(stdin)\n\"\"\"\n",
        "test": "assert solution('3 6 6') == '1'",
        "num_ids": 246
    },
    {
        "number": 4555,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    return \"\\n\".join(str(x) for x in range(A, B + 1) if x % 2 == 0 or x in range(B - K + 1, B + 1))\n",
        "test": "assert solution('4 5 2') == '4\\n5'",
        "num_ids": 493
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s[0].upper() + s[1:].lower()\n",
        "test": "assert solution(stdin) == 'ABC'",
        "num_ids": 154
    },
    {
        "number": 4557,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a, b, x = [int(x) for x in stdin.split()]\n    if a + b < x:\n        return 'NO'\n    return 'YES'",
        "test": "assert solution('3 5 4\\n') == 'YES'",
        "num_ids": 242
    },
    {
        "number": 4558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    X, T = stdin.split()\n    X, T = int(X), int(T)\n    print(X * (1 / (1 / 1)) ** T)\n    \nsolution(input())\n",
        "test": "assert solution(stdin) == stdin.split()[1]",
        "num_ids": 200
    },
    {
        "number": 4559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('5\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == '-1'",
        "num_ids": 511
    },
    {
        "number": 4560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split(\" \")\n    N = int(line[0])\n    A = int(line[1])\n    # There are not more than N coins, and A is 0 or 1.\n    if N > 10000:\n        return \"No\"\n\n    if A == 1:\n        if N == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    if A == 0:\n        return \"Yes\"\n\n    if N % A!= 0:\n        return \"No\"\n\n    # Get the number of coins which can be used to pay N with A-yen coins.\n    coins = N // A\n\n    # Get the number of 1-yen coins.\n    ones = A\n\n    # Get the number of 500-yen coins.\n    tens = 0\n    for i in range(1, coins + 1):\n        if i * A < coins * A:\n            tens = i\n\n    # Print the answer.\n    if tens == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")",
        "test": "assert solution('''10",
        "num_ids": 497
    },
    {
        "number": 4561,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(x) for x in stdin.split()]\n    return \"safe\" if A <= X + 1 <= A + B else \"dangerous\"\n",
        "test": "assert solution('2 2 2') =='safe'",
        "num_ids": 275
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n <= 9:\n        return \"0\" * (n - 1) + \"1\"\n    result = \"\"\n    while n > 9:\n        result = str(n - 1) + result\n        n = (n - 1) // 2\n    result = str(n) + result\n    return result",
        "test": "assert solution(\"10000\") == \"9999\"",
        "num_ids": 287
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    T = []\n    A = []\n    for i in range(N):\n        T_i, A_i = [int(x) for x in stdin.readline().strip().split()]\n        T.append(T_i)\n        A.append(A_i)\n\n    T.sort()\n    A.sort()\n\n    S = [0] * (max(T) + 1)\n\n    for i in range(N):\n        S[T[i]] += A[i]\n    return '%d' % S[max(T)]",
        "test": "assert solution('1\\n2\\n2\\n') == '3'",
        "num_ids": 481
    },
    {
        "number": 4564,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == 26 else 'no'",
        "test": "assert solution('cannot') == \"no\"",
        "num_ids": 200
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...",
        "test": "assert solution(\"WWWEEWW\") == \"1\"",
        "num_ids": 425
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n,m = [int(x) for x in stdin.strip().split(' ')]\n    paths = [[] for x in range(n)]\n    for x in range(m):\n        a,b = [int(x) for x in stdin.strip().split(' ')]\n        paths[a-1].append(b-1)\n        paths[b-1].append(a-1)\n    count = [0 for x in range(n)]\n    for x in range(n):\n        queue = collections.deque()\n        queue.append(x)\n        while len(queue) > 0:\n            node = queue.popleft()\n            count[node] += 1\n            for y in paths[node]:\n                queue.append(y)\n    return''.join(str(x) for x in count)\n\nprint(solution(stdin.read()))\n",
        "test": "assert solution('5 3\\n1 4\\n2 3\\n3 4\\n4 5\\n') == '2\\n2\\n2\\n1'",
        "num_ids": 880
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    N = int(N)\n    s = [int(x) for x in stdin.strip().split()]\n    ans = 0\n    for i in range(N):\n        if (s[i] + i) % 10 == 0:\n            ans = s[i] + i\n        else:\n            ans = s[i] + i\n            break\n    return str(ans)",
        "test": "assert solution(\"3\\n2\\n1\\n\") == \"0\"",
        "num_ids": 439
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('abcda') == 2",
        "num_ids": 352
    },
    {
        "number": 4569,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return \"Cloudy\"",
        "test": "assert solution('Sunny') == 'Cloudy'",
        "num_ids": 151
    },
    {
        "number": 4570,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.strip().split())\n    return str(min(a * n, b))\n",
        "test": "assert solution(\"7 17 120\") == \"119\"",
        "num_ids": 264
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    N, M = [int(x) for x in stdin]\n\n    time = 1900\n    remainder = 0\n    for _ in range(M):\n        time = (time + remainder) // 2\n        remainder = (time + remainder) % 2\n\n    return str(time)",
        "test": "assert solution('4 2') == '18800'",
        "num_ids": 709
    },
    {
        "number": 4572,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in s:\n            return c\n    return None",
        "test": "assert solution('atcoderregularcontest') == 'b'",
        "num_ids": 273
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.rstrip().split('\\n')[0]\n    X = stdin.rstrip().split('\\n')[1].split(' ')\n\n    X_even = X[:len(X) // 2]\n    X_odd = X[len(X) // 2:]\n    print(*[max(n, min(X_even)) for n in X_odd], sep='\\n')",
        "test": "assert solution(\"2\\n4 4 4 3\") == \"4\\n3\\n3\\n4\"",
        "num_ids": 583
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the maximum possible area of the rectangle.\n    If no rectangle can be formed, it returns 0.\n    \"\"\"\n    N = int(stdin)\n    sticks = [int(x) for x in stdin.strip().split()]\n    sticks.sort()\n    if N < 4 or sticks[-1] == 0:\n        return 0\n    left = [0] * N\n    for i in range(N):\n        left[i] = sticks[i] * (N - i)\n    return max(left)",
        "test": "assert solution('3\\n1 2 2 3') == \"0\\n\"",
        "num_ids": 619
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.strip().split('\\n')\n    pass\n",
        "test": "assert solution(",
        "num_ids": 214
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n\n    total = 0\n    for i in range(A, B + 1):\n        if A == i:\n            total += (B - i) // C\n        elif A == i + C:\n            total += (B - i) // C\n        else:\n            total += (B - i) // C + (A - i) // C\n\n    return total",
        "test": "assert solution('4\\n4\\n4\\n300\\n') == '1'",
        "num_ids": 2255
    },
    {
        "number": 4577,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if c > a and c < b:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 3 2\") == \"Yes\"",
        "num_ids": 290
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n",
        "test": "assert solution('''3 1000",
        "num_ids": 240
    },
    {
        "number": 4579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    count = stdin.count(\"apple\")\n    return str(count)",
        "test": "assert solution('apple\\norange\\napple\\n') == '2'",
        "num_ids": 1983
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # calculate minimum number\n    minimum = 0\n    for i in range(N):\n        if a[i] < 400:\n            minimum += 1\n    minimum *= 8\n    \n    # calculate maximum number\n    maximum = 0\n    for i in range(N):\n        if a[i] >= 400:\n            maximum += 1\n    maximum *= 8\n    \n    return f\"{minimum}\\n{maximum}\"\n\ndef",
        "test": "assert solution('2100 2500 2700 2700') == '2 2'",
        "num_ids": 900
    },
    {
        "number": 4581,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == \"o\":\n        price = 700\n    elif s[0] == \"x\":\n        price = 0\n    else:\n        price = 700\n    if s[1] == \"o\":\n        price += 100\n    if s[2] == \"o\":\n        price += 2 * 100\n    return str(price)",
        "test": "assert solution('oxo') == '900'",
        "num_ids": 334
    },
    {
        "number": 4582,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return 'H' if a == b else 'D'",
        "test": "assert solution('H H') == 'H'",
        "num_ids": 237
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = tuple(stdin.replace(' ', ''))\n    if a == d:\n        return '{}={}'.format(a, d)\n    if a > d:\n        return '{}-{}+{}'.format(a - d, d, a)\n    return '{}+{}-{}'.format(a, d, a - b)",
        "test": "assert solution('1245') == '1+2+4+5=10'",
        "num_ids": 353
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(\" \")]\n    count = [0] * (n + 1)\n    for i in range(1, n):\n        count[a[i]] = count[a[i] - 1] + 1\n    print('\\n'.join(str(x) for x in count[1:]))",
        "test": "assert solution('1\\n1\\n2\\n2\\n') == '2\\n2\\n0\\n0'",
        "num_ids": 638
    },
    {
        "number": 4585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    return solution(x-2) + 2\n\nprint(solution(1))\nprint(solution(2))\nprint(solution(3))\nprint(solution(4))\nprint(solution(5))\nprint(solution(6))\nprint(solution(7))\nprint(solution(8))\nprint(solution(9))\nprint(solution(10))\nprint(solution(11))\nprint(solution(12))\nprint(solution(13))\nprint(solution(14))\nprint(solution(15))\nprint(solution(16))\nprint(solution(17))\nprint(solution(18))\nprint(solution(19))\nprint(solution(20))\nprint(solution(21))\nprint(solution(22))\nprint(solution(23))\nprint(solution(24))\nprint(solution(25))\nprint(solution(26))\nprint(solution(27))\nprint(solution(28))\nprint(solution(29))\nprint(solution(30))\nprint(solution(31))\nprint(solution(32))\nprint(solution(33))\nprint(solution(34))\nprint(solution(35))\nprint(solution(36))\nprint(solution(37))\nprint(solution(38))\nprint(solution(39))\nprint(solution(40))\nprint(solution(41))\nprint(solution(42))\nprint(solution(43))\nprint(solution(44))\nprint(solution(45))\nprint(solution(46))\nprint(solution(47))\nprint(solution(48))\nprint(solution(49))\nprint(solution(50))\nprint(solution(51))\nprint(solution(52))\nprint(solution(53))\nprint(solution(54))\nprint(solution(55))\nprint(solution(56))\nprint(solution(57))\nprint(solution(58))\nprint(solution(59))\nprint(solution(60))\nprint(solution(61))\nprint(solution(62))\nprint(solution(63))\nprint(solution(64))\nprint(solution(65))\nprint(solution(66))\nprint(solution(67))\nprint(solution(68))\nprint(solution(69))\nprint(solution(70))\nprint(solution(71))\nprint(solution(72))\nprint(solution(73))\nprint(solution(74))\nprint(solution(75))\nprint(solution(76))\nprint(solution(77))\nprint(solution(78))\nprint(solution(79))\nprint(solution(80))\nprint(solution(81))\nprint(solution(82))\nprint(solution(83))\nprint(solution(84))\nprint(solution(85))\nprint(solution(86))\nprint(solution(87))\nprint(solution(88))\nprint(solution(89))\nprint(solution(90))\nprint(solution(91))\nprint(solution(92))\nprint(solution(93))\nprint(solution(94))\nprint(solution(95))\nprint(solution(96))\nprint(solution(97))\nprint(solution(98))\nprint(solution(99))\nprint(solution(100))\nprint(solution(101))\nprint(solution(102))\nprint(solution(103))\nprint(solution(104))\nprint(solution(105))\nprint(solution(106))\nprint(solution(107))\nprint(solution(108))\nprint(solution(109))\nprint(solution(110))\nprint(solution(111))\nprint(solution(112))\nprint(solution(113))\nprint(solution(114))\nprint(solution(115))\nprint(solution(116))\nprint(solution(117))\nprint(solution(118))\nprint(solution(119))\nprint(solution(120))\nprint(solution(121))\nprint(solution(122))\nprint(solution(123))\nprint(solution(124))\nprint(solution(125))\nprint(solution(126))\nprint(solution(127))\nprint(solution(128))\nprint(solution(129))\nprint(solution(130))\nprint(solution(131))\nprint(solution(132))\nprint(solution(133))\nprint(solution(134))\nprint(solution(135))\nprint(solution(136))\nprint(solution(137))\nprint(solution(138))\nprint(solution(139))\nprint(solution(140))\nprint(solution(141))\nprint(solution(142))\nprint(solution(143))\nprint(solution(144))\nprint(solution(145))\nprint(solution(146))\nprint(solution(147))\nprint(solution(148))\nprint(solution(149))\nprint(solution(150))\nprint(solution(151))\nprint(solution(152))\nprint(solution(153))\nprint(solution(154))\nprint(solution(155))\nprint(solution(156))\nprint(solution(157))\nprint(solution(158))\nprint(solution(159))\nprint(solution(160))\nprint(solution(161))\nprint(solution(162))\nprint(solution(163))\nprint(solution(164))\nprint(solution(165))\nprint(solution(166))\nprint(solution(167))\nprint(solution(168))\nprint(solution(169))\nprint(solution(170))\nprint(solution(171))\nprint(solution(172))\nprint(solution(173))\nprint(solution(174))\nprint(solution(175))\nprint(solution(176))\nprint(solution(177))\nprint(solution(178))\nprint(solution(179))\nprint(solution(180))\nprint(solution(181))\nprint(solution(182))\nprint(solution(183))\nprint(solution(184))\nprint(solution(185))\nprint(solution(186))\nprint(solution(187))\nprint(solution(188))\nprint(solution(189))\nprint(solution(190))\nprint(solution(191))\nprint(solution(192))\nprint(solution(193))\nprint(solution(194))\nprint(solution(195))\nprint(solution(196))\nprint(solution(197))\nprint(solution(198))\nprint(solution(199))\nprint(solution(200))\nprint(solution(201))\nprint(solution(202))\nprint(solution(203))\nprint(solution(204))\nprint(solution(205))\nprint(solution(206))\nprint(solution(207))\nprint(solution(208))\nprint(solution(209))\nprint(solution(210))\nprint(solution(211))\nprint(solution(212))\nprint(solution(213))\nprint(solution(214))\nprint(solution(215))\nprint(solution(216))\nprint(solution(217))\nprint(solution(218))\nprint(solution",
        "test": "assert solution(\"10\") == \"4\"",
        "num_ids": 1952
    },
    {
        "number": 4586,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return \"Yes\" if any(len(set(n[i:i+3])) > 1 for i in range(3, len(n))) else \"No\"",
        "test": "assert solution(\"0101\") == \"No\"",
        "num_ids": 207
    },
    {
        "number": 4587,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    stdin = stdin[1:]\n    A = list(map(int, stdin[0].split()))\n    B = list(map(int, stdin[1].split()))\n    C = list(map(int, stdin[2].split()))\n    alarms = [A, B, C]\n    alarms.sort()\n    alarms_set = set()\n    for i in range(N):\n        alarms_set.add(tuple(alarms[i]))\n    return str(len(alarms_set))",
        "test": "assert solution('1\\n3\\n1 1 1\\n2 1 1') == '1'",
        "num_ids": 457
    },
    {
        "number": 4588,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    x = int(s[0], 16)\n    y = int(s[1], 16)\n    return '<' if x < y else '>' if x > y else '= '",
        "test": "assert solution(\"A B\") == \"<\"",
        "num_ids": 334
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    grid = [stdin[i:i+W] for i in range(0, len(stdin), W)]\n    res = []\n    for h in range(H):\n        res.append('')\n        for w in range(W):\n            res[-1] += str(bombCount(grid, h, w))\n    return '\\n'.join(res)\n\n\ndef",
        "test": "assert solution(\"3 5\") == \"1121\"",
        "num_ids": 303
    },
    {
        "number": 4590,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4 240\n60 90 120\n80 150 80 150''')\n    '3'\n    \"\"\"\n    n, m, k = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    i = 0\n    m = max(a[0] + b[0], a[0] + b[-1], a[-1] + b[0], a[-1] + b[-1])\n    while i < len(a) and i < len(b) and m >= k:\n        m = max(a[0] + b[i], a[0] + b[i - 1], a[i] + b[0], a[i] + b[i - 1])\n        i += 1\n    return str(i)",
        "test": "assert solution(\"60 90 120\") == \"3\"",
        "num_ids": 545
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return min(data)",
        "test": "assert solution(",
        "num_ids": 276
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(input()) == str(answer())",
        "num_ids": 211
    },
    {
        "number": 4593,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()) ** max([1, 2, 3, 4, 5, 6]))",
        "test": "assert solution('1') == '1'",
        "num_ids": 1999
    },
    {
        "number": 4594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('''4",
        "num_ids": 400
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(stdin) == \"ASDFZ\"",
        "num_ids": 177
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    operations = 0\n    for a in A:\n        if a % 2 == 1:\n            operations += 1\n    return str(operations)",
        "test": "assert solution('5') == 4",
        "num_ids": 391
    },
    {
        "number": 4597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    power = 1\n    for i in range(1, n+1):\n        power = (power * i) % (10**9 + 7)\n    return str(power)",
        "test": "assert solution('3') == '6'",
        "num_ids": 427
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    # n = 3\n    return str(int(n) + (int(n) - 1) * int(n) / 2)",
        "test": "assert solution(4) == 5",
        "num_ids": 201
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    card_cnt = stdin.strip().split('\\n')[0]\n    card_cnt = int(card_cnt)\n    if card_cnt < 1 or card_cnt > 100:\n        return 'error'\n    card_values = stdin.strip().split('\\n')[1]\n    card_values = [int(c) for c in card_values]\n    \n    total = 0\n    for c in card_values:\n        total += c\n    \n    optimal = (total // 2) - min(card_values)\n    \n    return str(optimal)",
        "test": "assert solution('''4",
        "num_ids": 410
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n__author__ = 'le'\n\nimport sys\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 357
    },
    {
        "number": 4601,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    num_monsters, num_attacks = list(map(int, stdin.split()))\n    num_healths = list(map(int, stdin.split()))\n    min_attacks = None\n    for i in range(num_monsters):\n        if num_healths[i] <= num_attacks:\n            min_attacks = i\n            break\n    if min_attacks is None:\n        return str(num_attacks)\n    elif min_attacks == 0:\n        return str(num_attacks)\n    else:\n        return str(num_attacks - min_attacks)",
        "test": "assert solution('2 2') == '2'",
        "num_ids": 581
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Remove newline\n    stdin = stdin.strip()\n    n = int(stdin[0])\n    k = int(stdin[1])\n\n    # Make a list of tuples\n    l = []\n    for i in range(2, n + 2):\n        l.append((i, stdin[i]))\n\n    # Sort the list by y\n    l.sort(key=lambda x: x[1])\n\n    # Use a sliding window to find the min distance\n    a = 0\n    b = k\n    min_distance = k\n    for i in range(n - 1):\n        if l[i][1] > l[a][1]:\n            b = i\n            a += 1\n            min_distance = min(min_distance, i - a + 1)\n        else:\n            b = i\n            min_distance = min(min_distance, b - a + 1)\n\n    return str(min_distance)",
        "test": "assert solution(\"1\\n1\\n1\\n1\") == \"0\\n0\"",
        "num_ids": 1845
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    C = int(stdin.readline())\n    D = int(stdin.readline())\n    # A + B + C + D = 1200\n    # A <= (C + D) / 2\n    # A >= (C + D) / 2\n    # A - C = D\n    # A = D - C\n    # A = D - C\n    return str((D - C) * min(A, B))\n",
        "test": "assert solution(",
        "num_ids": 505
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    if n == 0:\n        return \"0\"\n    res = 0\n    previous = a[0]\n    current = a[0]\n    for i in range(1, n):\n        if a[i] < current:\n            res += (current - previous) * ((current - 1) / 2)\n            current = previous\n        elif a[i] > current:\n            previous = current\n            current = a[i]\n    res += (current - previous) * ((current - 1) / 2)\n    return str(res % (10 ** 9 + 7))",
        "test": "assert solution('7 3 2 8 4 5 6 1') == '0'",
        "num_ids": 660
    },
    {
        "number": 4605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = 0\n    for i in range(1, n + 1):\n        s += i if len(str(i)) < max(a, b) else 0\n    return str(s)",
        "test": "assert solution('10000000000000000000 1000000000000000000000000') == '0'",
        "num_ids": 257
    },
    {
        "number": 4606,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 'ABC'\n    elif n == 1:\n        return 'ABC1'\n    elif n == 2:\n        return 'ABC2'\n    elif n == 3:\n        return 'ABC3'\n    else:\n        return 'ABC{}'.format(n)",
        "test": "assert solution(\"100\") == \"ABC100\"",
        "num_ids": 331
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    cnt = 0\n    for year in range(2018, a - b, -1):\n        for month in range(1, 13):\n            for day in range(1, 32):\n                if year == 2018 and month == 5 and day == 5:\n                    cnt += 1\n                elif year == 2018 and month == 5 and day == 1:\n                    cnt += 1\n                elif year == 2018 and month == 1 and day == 1:\n                    cnt += 1\n                elif year % 4 == 0 and month == 1 and day == 1:\n                    cnt += 1\n                elif day == b:\n                    cnt += 1\n    return cnt",
        "test": "assert solution('10 29') == '10'",
        "num_ids": 1504
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n\n    idx = a.index(2)\n\n    if idx == 0:\n        return '-1'\n\n    elif idx == len(a) - 1:\n        return '1'\n\n    else:\n        return str(a.index(1, idx + 1) - a.index(2, idx))\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 732
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([x for x in stdin.split('\\n')[1:] if int(x) in stdin.split('\\n')[0]]))",
        "test": "assert solution('''",
        "num_ids": 1916
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A = sorted(A)\n\n    c = 0\n    for i in range(N):\n        if A[i] > K:\n            c += A[i] - K\n            A[i] = K\n\n    return str(c)",
        "test": "assert solution('1 2 2 3') == '1'",
        "num_ids": 568
    },
    {
        "number": 4611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 1891
    },
    {
        "number": 4612,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(int(a + b) // 2)\n",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 182
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    num_edges, num_vertices = [int(s) for s in stdin.split()]\n    edges = [tuple(int(s) for s in stdin.split()) for _ in range(num_edges)]\n    edges_with_bridges = set()\n    for a, b in edges:\n        if a == b:\n            edges_with_bridges.add(a)\n        elif a < b:\n            edges_with_bridges.add((a, b))\n        else:\n            edges_with_bridges.add((b, a))\n    return len(edges_with_bridges)",
        "test": "assert solution('8 10\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n6 8\\n7 8\\n8 9') == '4'",
        "num_ids": 843
    },
    {
        "number": 4614,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split(\" \")))\n    d = {A: 0, B: 0, C: 0}\n    d[A] = 1\n    d[B] = 1\n    d[C] = 1\n    if A == B == C:\n        return str(A)\n    elif A == B and A!= C:\n        return str(C)\n    elif A == C and A!= B:\n        return str(B)\n    elif B == C and B!= A:\n        return str(A)\n    elif A!= B!= C:\n        return str(A)\n",
        "test": "assert solution(\"2 3 3\") == \"2\"",
        "num_ids": 300
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef",
        "test": "assert solution('1 2 10 10 10 100') == '0 0'",
        "num_ids": 235
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('baz') == 'az'",
        "num_ids": 178
    },
    {
        "number": 4617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.strip().splitlines()\n    rows = [[grid[0][x * 3: x * 3 + 3] for x in range(3)],\n            [grid[1][x * 3: x * 3 + 3] for x in range(3)],\n            [grid[2][x * 3: x * 3 + 3] for x in range(3)]]\n    if rows == [['pot', 'top', 'pot'],\n                ['top', 'top', 'top'],\n                ['pot', 'top', 'pot']]:\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution(\"C11C13C13\") == \"NO\"",
        "num_ids": 644
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('abc', 4) == 'b'",
        "num_ids": 380
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    area = 0\n    for i in range(n):\n        if a[i] == 1:\n            area += (min(x, a[i + 1]) - max(x, a[i + 1])) * (min(y, a[i + 2]) - max(y, a[i + 2]))\n        elif a[i] == 2:\n            area += (max(x, a[i + 1]) - min(x, a[i + 1])) * (min(y, a[i + 2]) - max(y, a[i + 2]))\n        elif a[i] == 3:\n            area += (min(x, a[i + 1]) - max(x, a[i + 1])) * (max(y, a[i + 2]) - min(y, a[i + 2]))\n        elif a[i] == 4:\n            area += (max(x, a[i + 1]) - min(x, a[i + 1])) * (max(y, a[i + 2]) - min(y, a[i + 2]))\n    return str(area)\n",
        "test": "assert solution('3 3 2\\n0 0 1\\n0 1 2\\n1 2 3') == '9'",
        "num_ids": 1125
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split(' ')))\n    return '\\n'.join(str(x) for x in get_earliest_reach_time(n, c))\n\ndef",
        "test": "assert solution(\"2\\n1 11 1\") == \"10\\n11\"",
        "num_ids": 571
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.split()]\n    grid = [[x for x in stdin.strip()] for _ in range(h)]\n    return \"\\n\".join(\"\".join(x) for x in grid)",
        "test": "assert solution(\".*.\") == \".*.*\"",
        "num_ids": 277
    },
    {
        "number": 4622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('''4",
        "num_ids": 275
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pairs = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\n    # Sort by weight first\n    pairs.sort(key=lambda p: p[1])\n    # Then sort by index\n    pairs.sort(key=lambda p: p[0])\n    # Now pairs is a list of tuples (weight, index)\n    # For each participant, calculate the total weight of his/her pair\n    total_weights = [p[1] + p[0] for p in pairs]\n\n    # Track the number of teams that we can create\n    # We'll track the number of teams with total_weight = s for all s < sum(w)\n    # We'll also record the number of teams that we can create with s = sum(w)\n    # If there are more than one team with s = sum(w) then that team will be the best solution\n    num_teams_with_s = [1] * (sum(total_weights) + 1)\n    num_teams_with_s[0] = 0\n    for i in range(1, sum(total_weights) + 1):\n        for j in range(i, sum(total_weights) + 1):\n            num_teams_with_s[j] = max(num_teams_with_s[j], num_teams_with_s[i - 1] + num_teams_with_s[j - i])\n\n    best_s = None\n    best_num_teams = None\n    for i in range(len(total_weights) - 1, -1, -1):\n        if total_weights[i] > sum(total_weights) / 2:\n            break\n        s = sum(total_weights[i:])\n        num_teams = num_teams_with_s[s]\n        if num_teams > best_num_teams:\n            best_s = s\n            best_num_teams = num_teams\n\n    return str(best_num_teams)\n\nassert(solution(\"\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"2\") == \"2\")\nassert(solution(\"3\") == \"1\")\nassert(solution(\"3 2\") == \"1\")\nassert(solution(\"1 3\") == \"2\")\nassert(solution(\"1 2 3\") == \"3\")\nassert(solution(\"1 2 3 4 5\") == \"1\")\nassert(solution(\"1 2 3 4 5 6 7 8\") == \"1\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10\") == \"2\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"3\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"4\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"5\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\") == \"9\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"25\")\n\nprint(solution(input()))\n",
        "test": "assert solution('4\\n1') == '4'",
        "num_ids": 1270
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('3\\n1 5\\n22 5\\n987 13\\n') == '77'",
        "num_ids": 261
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "test": "assert solution('''",
        "num_ids": 743
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.readline().strip())):\n        x, y, z = map(int, stdin.readline().strip().split())\n        print(min(abs(x - y), abs(x - z), abs(y - z)))\n    return \"\"\n",
        "test": "assert solution('5 5 5') == '0'",
        "num_ids": 473
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('2\\n1') == 'NO'",
        "num_ids": 209
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def are_connected(x: int, y: int) -> bool:\n        return adj[x] & (adj[y] | (adj[x] - 1) << (x * 31)) == (adj[y] | (adj[x] - 1) << (y * 31))\n\n    n, m, k = [int(x) for x in stdin.split()]\n\n    adj = [0] * (n + 1)\n    for _ in range(m):\n        x, y, w = [int(x) for x in stdin.split()]\n        adj[x] |= (1 << (y * 31))\n        adj[y] |= (1 << (x * 31))\n        adj[y] -= adj[x]\n\n    costs = [int(x) for x in stdin.split()]\n    costs.sort(reverse=True)\n\n    routes = [[] for _ in range(k)]\n    for i in range(k):\n        a, b = [int(x) for x in stdin.split()]\n        routes[i].append(a)\n        routes[i].append(b)\n\n    # print(routes)\n\n    for route in routes:\n        if route[0] == route[1]:\n            continue\n\n        for i in range(len(routes)):\n            if route[i] == route[0]:\n                if i > 0:\n                    costs[0] += costs[i]\n                    routes[i] = []\n                    costs.pop(i)\n                    routes.pop(i)\n                    break\n            elif route[i] == route[1]:\n                if i > 0:\n                    routes[i] = []\n                    costs[i] = 0\n                    costs.pop(i)\n                    routes.pop(i)\n                    break\n            else:\n                continue\n\n    # print(costs)\n    # print(routes)\n\n    total_cost = 0\n    for i in range(n):\n        if are_connected(routes[0][0], i + 1):\n            total_cost += costs[0]\n            routes[0].append(i + 1)\n            costs.pop(0)\n            routes.pop(0)\n        elif are_connected(routes[0][1], i + 1):\n            total_cost += costs[0]\n            routes[0].append(i + 1)\n            costs.pop(0)\n            routes.pop(0)\n\n    # print(costs)\n    # print(routes)\n\n    for i in range(1, len(costs)):\n        total_cost += costs[i]\n\n    return str(total_cost)",
        "test": "assert solution('''5 5 4''') == '13'",
        "num_ids": 1177
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_power_of_3(num: int) -> int:\n        if num == 0:\n            return 0\n        while num % 3 == 0:\n            num //= 3\n        return num\n    def is_power_of_3(num: int) -> bool:\n        return get_power_of_3(num) == num\n\n    qs = int(stdin.readline().strip())\n    for _ in range(qs):\n        n = int(stdin.readline().strip())\n        if not is_power_of_3(n):\n            print(n)\n        else:\n            for i in range(n + 1, 10**4 + 1):\n                if not is_power_of_3(i):\n                    print(i)\n                    break\nsolution('')\n",
        "test": "assert solution(",
        "num_ids": 582
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = [int(stdin.readline()) for _ in range(n)]\n    p = [int(stdin.readline()) for _ in range(n)]\n    m = int(stdin.readline())\n    result = []\n    for _ in range(m):\n        k_new = int(stdin.readline())\n        result.append(sum(p[i] == k_new for i in range(n)))\n    return \"\\n\".join(str(i) for i in result)",
        "test": "assert solution('''",
        "num_ids": 957
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n\n    trees = set(int(x) for x in stdin.split())\n    humans = set(int(x) for x in stdin.split())\n\n    dists = [None] * (len(humans) + 1)\n    for tree in trees:\n        dists[0] = min(dists[0], abs(tree - h) if dists[0] is not None else abs(tree - h))\n\n    dists = [0] + dists\n    dists = [0] + dists\n\n    for tree in trees:\n        for human in humans:\n            dists[human] = min(dists[human], abs(tree - human))\n\n    return str(sum(dists[h] for h in humans))\n\nassert(solution('''2 6\n1 5\n''')) == '8'\nassert(solution('''3 5\n0 3 1\n''')) == '7'",
        "test": "assert solution('3 5\\n0 3 1\\n') == '7'",
        "num_ids": 1745
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    if N == 1: return stdin.readline().strip()\n    for _ in range(N):\n        num = int(stdin.readline().strip())\n        if num == 1: continue\n        package_list = []\n        for _ in range(num):\n            x, y = [int(x) for x in stdin.readline().strip().split(' ')]\n            package_list.append((x, y))\n        packages = sorted(package_list, key=lambda x: (x[1], x[0]))\n        package_set = set()\n        for i, p in enumerate(packages):\n            if p in package_set:\n                return 'NO'\n            package_set.add(p)\n            if i == 0:\n                continue\n            if packages[i-1][1] <= p[1] and packages[i-1][0] < p[0]:\n                return 'NO'\n        else:\n            return 'YES'\n",
        "test": "assert solution(input) == output",
        "num_ids": 627
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes integer (1 to 2*10^4) and integer (1 to 162) as input, calculates the minimum number of moves needed to make the sum of digits of the integer less than or equal to the integer and outputs the answer to stdout.\n    \"\"\"\n    return str(min_n_moves(int(stdin.readline().strip()), int(stdin.readline().strip())))\n\n\ndef",
        "test": "assert solution('''217871987498122 10''') == '899999999999999999'",
        "num_ids": 218
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def f(a: list) -> int:\n        \"\"\" Find the number of moves needed to reach the first 1 \"\"\"\n        n = len(a)\n        i = 0\n        while i < n and a[i] == 0:\n            i += 1\n        if i == n:\n            return 0\n        return 1 + f(a[i:])\n\n    for line in stdin:\n        if line == '':\n            break\n        n = int(line)\n        a = list(map(int, stdin.readline().split()))\n        print(f(a))\nsolution(sys.stdin)",
        "test": "assert solution('10\\n3\\n1 0 0 0 0 1 0 0 0 0 0 1') == '3\\n0\\n2\\n3\\n1\\n'",
        "num_ids": 519
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.strip().split()]\n    print(solution_recursion(n, k))\n\ndef",
        "test": "assert solution(input_data) == output_data",
        "num_ids": 216
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # b = list(map(int, stdin.readline().strip().split()))\n        # find the \"right\" or the \"left\" side of the middle candies\n        # print(a)\n        c = sum(a)\n        r = c\n        l = c\n        c -= a[0]\n        c -= a[-1]\n        a.pop(0)\n        a.pop(-1)\n        for i in range(1, len(a)):\n            if a[i - 1] < a[i]:\n                r -= a[i - 1]\n            else:\n                l -= a[i - 1]\n        print(max(r, l))\n        print(min(r, l))\n        print()",
        "test": "assert solution(\"11\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\") == \"\"\"6 21 22",
        "num_ids": 2025
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases: int = int(stdin.readline().strip())\n    for t in range(num_test_cases):\n        n: int = int(stdin.readline().strip())\n        a: list[int] = [int(x) for x in stdin.readline().strip().split(\" \")]\n        b: list[int] = [int(x) for x in stdin.readline().strip().split(\" \")]\n        k: int = int(stdin.readline().strip())\n        max_sum: int = 0\n        for i in range(len(a)):\n            for j in range(i, len(a)):\n                if i!= j:\n                    a_prev: int = a[i]\n                    a[i] = a[j]\n                    a[j] = a_prev\n                    max_sum = max(max_sum, sum(a) + sum(b))\n                    a[j] = a[i]\n                    a[i] = a_prev\n        print(max_sum)\n",
        "test": "assert solution(\"\"\"5",
        "num_ids": 791
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, c = [int(x) for x in stdin.split()]\n    stairs = [int(x) for x in stdin.split()]\n    elevator = [int(x) for x in stdin.split()]\n",
        "test": "assert solution('6 9 3 10 9 1 10 1 5') == '0 2 4 7 8 11 13 14 16 17'",
        "num_ids": 747
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    while t > 0:\n        n, k = list(map(int, stdin.readline().split()))\n        s = stdin.readline()\n        l = list(s)\n        l.sort()\n        l.reverse()\n        s = \"\".join(l)\n        print(s[k-1])\n        t -= 1\n    return \"\"",
        "test": "assert solution('''5 1",
        "num_ids": 597
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result: int = 0\n\n    n, k = map(int, stdin.split())\n    x: List[int] = list(map(int, stdin.split()))\n    y: List[int] = list(map(int, stdin.split()))\n\n    platforms: List[int] = []\n\n    for i in range(n):\n        platforms.append(len(platforms))\n        platforms.append(-1)\n\n    for i in range(n):\n        if y[i] > platforms[i]:\n            platforms[i] = y[i]\n\n    for i in range(n):\n        if x[i] > platforms[i]:\n            platforms[i] = x[i]\n\n    for i in range(n):\n        platforms[i] = -1\n\n    while n > 0:\n        min_platforms: List[int] = [platforms[0]] * n\n        for i in range(1, n):\n            min_platforms[i] = min(min_platforms[i - 1], platforms[i])\n\n        # We need to save at least $k - 1$ points.\n        if min_platforms[n - 1] > k - 1:\n            result += 1\n            break\n\n        if n > 1:\n            platforms[n - 1] = min_platforms[n - 2]\n\n        platforms[n - 2] = min_platforms[n - 1]\n\n        for i in range(n - 2, -1, -1):\n            platforms[i] = min(platforms[i + 1], platforms[i])\n\n        platforms[0] = -1\n        platforms[n - 1] = -1\n        n -= 1\n\n    return str(result)\n\nprint(solution(input()))\n",
        "test": "assert solution('5\\n5\\n1') == '5'",
        "num_ids": 706
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    # you can't have MEX greater than the length of the array\n    MEX = [x]\n    for _ in range(n):\n        x += 1\n        MEX.append(x)\n    for _ in range(n):\n        x -= 1\n        MEX.append(x)\n    return '\\n'.join(map(str, MEX))\n\n\nassert solution(stdin) == stdout\n",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 1425
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50') == '3 15 2 4 19 22 25 16 7'",
        "num_ids": 619
    },
    {
        "number": 4643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('3 3 1 2 4 1 2 3') == '1 2 3 4'",
        "num_ids": 220
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        N = int(stdin.readline().strip())\n        A = [int(x) for x in stdin.readline().strip().split()]\n        ans = False\n        for i in range(N):\n            for j in range(i + 1, N):\n                if (A[i] + A[j]) % 2!= 0:\n                    ans = True\n                    break\n            if ans:\n                break\n        if ans:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
        "test": "assert solution('''2",
        "num_ids": 492
    },
    {
        "number": 4645,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 158
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split('\\n')\n    for c in cases:\n        n = int(c.split()[0])\n        a = [int(i) for i in c.split()[1:]]\n        good = True\n        for i in range(1, n):\n            if i % 2!= a[i] % 2:\n                good = False\n                break\n        if good:\n            print(-1)\n        else:\n            print(n - 1)\n",
        "test": "assert solution('''4",
        "num_ids": 503
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = [int(x) for x in stdin.readline().strip().split()]\n    edges = []\n    for i in range(n-1):\n        edges.append([int(x) for x in stdin.readline().strip().split()])\n    edges.sort()\n    tree = Graph(n)\n    for i in range(n-1):\n        u, v = edges[i]\n        tree.addEdge(u-1, v-1, c[u-1])\n        tree.addEdge(v-1, u-1, c[v-1])\n    count = 0\n    for i in range(n):\n        if tree.getColor(i) == 1:\n            count += 1\n    return count\n",
        "test": "assert solution('2\\n0 0\\n1 1\\n') == '-1 1 -1\\n'",
        "num_ids": 910
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        m = 0\n        while n!= 1:\n            if n % 6 == 0:\n                n = n // 6\n                m += 1\n            elif n % 6!= 0:\n                n = n // 6 + n % 6\n                m += 1\n        print(m)\n    return \"\"",
        "test": "assert solution('''7",
        "num_ids": 231
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    m = int(len(s) / k)\n    for i in range(m):\n        s = s[:k-1] + 'R' + s[k-1:]\n    return s",
        "test": "assert solution(stdin) == stdin[:3]",
        "num_ids": 302
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        print(get_maximum_divisible_elements(n, a))\n    return \"\"\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 472
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        n = int(stdin)\n        a = stdin.split(' ')\n        a = [int(x) for x in a]\n        print(' '.join(str(x) for x in a))\n        minimum = a[:]\n        for _ in range(n-1):\n            for i in range(1, n):\n                if a[i] < a[i-1]:\n                    a[i], a[i-1] = a[i-1], a[i]\n                    minimum = a[:]\n        print(' '.join(str(x) for x in minimum))\n    return ''\n\nprint(solution(input()))\n",
        "test": "assert solution('3\\n5\\n4') == '1\\n4\\n3'",
        "num_ids": 348
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('1\\n2') == 'NO'",
        "num_ids": 1570
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for _ in range(n):\n        a,b = list(map(int, stdin.split()))\n        if a + 1 <= b:\n            res = max(res, b - a)\n    return str(res)",
        "test": "assert solution('1\\n1') == '1'",
        "num_ids": 1614
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n,k = stdin.split()\n    n,k = int(n),int(k)\n    ans = [i for i in range(1,n+1) if i % 2 == (n % 2)]\n    return 'YES' if len(ans) >= k else 'NO'\n\nfor t in range(int(input())):\n    print(solution(input()))\n",
        "test": "assert solution('1\\n1') == 'YES'",
        "num_ids": 764
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    results = []\n    for _ in range(n):\n        a, b, c = [int(x) for x in stdin.split(' ')]\n        if b > c:\n            results.append(b)\n        elif b < c:\n            results.append(c)\n        else:\n            results.append(c + 1)\n    print(results)\nsolution(input())\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 1704
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(\" \")]\n    beads = [c for c in stdin]\n    best = 0\n    for k in range(2, k+1):\n        for i in range(k, len(beads)+1, k):\n            if not is_beautiful(k, i, beads):\n                break\n            best = max(best, i)\n    return best\n\ndef",
        "test": "assert solution('''6 3",
        "num_ids": 231
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    queries = [stdin.readline().strip().split(' ') for _ in range(q)]\n    n, k = int(queries[0][0]), int(queries[0][1])\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    if sum(a) % 2!= 0 or k > len(a):\n        print(\"NO\")\n        return \"\"\n    a.sort(reverse=True)\n    if sum(a) % 2!= 1:\n        print(\"NO\")\n        return \"\"\n    if k == 1:\n        print(\"YES\")\n        return \"1 {}\".format(a[0])\n    r = [0] * k\n    for i in range(k - 1):\n        r[i + 1] = r[i] + a[i] + 1\n    r[k - 1] = n\n    for i in range(1, k):\n        if r[i] - r[i - 1] > 1:\n            print(\"NO\")\n            return \"\"\n    r = [str(x) for x in r]\n    print(\"YES\")\n    return \" \".join(r)\n",
        "test": "assert solution(stdin) == stdin.split('\\n')[0]",
        "num_ids": 693
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin.replace('0','2')\n    binary = binary.replace('1','0')\n    binary = binary.replace('2','1')\n    return binary\n\nprint(solution(stdin))",
        "test": "assert solution(0b100000000000000000000000000000000) == 0",
        "num_ids": 458
    },
    {
        "number": 4659,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return\n",
        "test": "assert solution('') is None",
        "num_ids": 754
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('a@a-a.com') == ['a@a-a.com']",
        "num_ids": 184
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return list(map(lambda x: x ** 3, [0] + list(map(lambda x: fib(x), range(1, n)))))\n\n\ndef",
        "test": "assert solution(5) == [0, 1, 1, 8, 27]",
        "num_ids": 169
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('''<feed xml:lang='en'>",
        "num_ids": 1220
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('0987654321') == 'YES'",
        "num_ids": 469
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    set_M = set(map(int, stdin.split(' ')))\n    N = int(stdin)\n    set_N = set(map(int, stdin.split(' ')))\n    return '\\n'.join(sorted(list(set_M ^ set_N)))",
        "test": "assert solution(\"\"\"",
        "num_ids": 330
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    arr = stdin.readline().split(' ')\n    student_dict = {}\n    for student in stdin:\n        student_dict[student] = 0\n\n    for i in range(0, len(arr)):\n        student_dict[arr[i]] = stdin.readline().split(' ')[i]\n\n    #print(student_dict)\n\n    student_list = student_dict.values()\n    sum_of_marks = sum([int(val) for val in student_list])\n    return str(sum_of_marks/N)\n\nsolution(input())\n\n'''\n",
        "test": "assert solution(\"STDIN\") == \"0.43\"",
        "num_ids": 559
    },
    {
        "number": 4666,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"Weird\"\n    elif n % 2 == 0 and 2 <= n <= 5:\n        return \"Not Weird\"\n    elif n % 2 == 0 and 6 <= n <= 20:\n        return \"Weird\"\n    elif n % 2 == 0 and n > 20:\n        return \"Not Weird\"\n",
        "test": "assert solution(100) == \"Not Weird\"",
        "num_ids": 436
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of lines in the XML document\n    n = int(stdin.readline().strip())\n\n    # Create an accumulator to store the score\n    score = 0\n\n    # Loop through the XML document\n    for _ in range(n):\n        # Read the line of input\n        line = stdin.readline().strip()\n        score += len(line)\n\n    # Return the accumulator\n    return score",
        "test": "assert solution('<feed xml:lang=\"en\">\\n<title>HackerRank</title>\\n<subtitle lang=\"en\">Programming challenges</subtitle>\\n<link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>\\n<updated>2013-12-25T12:00:00</updated>\\n<entry>\\n<author>\\n<name>Harsh</name>\\n</author>\\n<title>\\n<name>New Blog</name>\\n</title>\\n<content type=\"text/xml\">\\n<p>This is a new blog post</p>\\n</content>\\n<link rel=\"self\" type=\"alternate\" href=\"http://hackerrank.com/xml-feed\"/>\\n</entry>\\n</feed>') == '6'",
        "num_ids": 1052
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\"\"\"\nHint: In the math class you can get the cross product of vectors using the following:\n\n    from math import cross\n    cross(u, v) = u1 * v1 + u2 * v2 + u3 * v3 for vectors u, v\n    cross(u, v) = u1 * v2 - u2 * v1\n    cross(u, v) = u3 * v1 + u2 * v2 - u1 * v3\n\"\"\"\nimport math\n\ndef",
        "test": "assert solution((\"1.0 1.0 1.0\",)) == \"(0.0, 0.0)\"",
        "num_ids": 616
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n",
        "test": "assert solution('sky') == 1",
        "num_ids": 235
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return True if pattern.match(stdin) else False",
        "test": "assert solution(\"MMXIX\") == False",
        "num_ids": 174
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\"\"\"\n===============================\n    Solution:\n===============================\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution('+91 034 303 4456\\n099 303 4456\\n+91 903 4456\\n+91 303 4456\\n+903 4456\\n+91 303 4456\\n') == '+903 4456\\n+91 303 4456\\n+903 4456\\n+91 034 303 4456\\n+91 903 4456\\n'",
        "num_ids": 239
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    query_name = stdin.split('\\n')[-1]\n    marks = stdin.split('\\n')[1:-1]\n    marks_values = []\n    for mark in marks:\n        marks_values.append(float(mark.split(' ')[-1]))\n    average = sum(marks_values) / len(marks_values)\n    print(round(average, 2))",
        "test": "assert solution(\"1 1\") == \"\"",
        "num_ids": 370
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef",
        "test": "assert solution(stdin) == expected",
        "num_ids": 348
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"2 4 1 3\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\"",
        "num_ids": 977
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('1 2') == '1+0.00i', 'error in solution'",
        "num_ids": 475
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    characters = stdin.split(\"\\n\")\n    return \"\"\n\nprint(solution(input()))\n",
        "test": "assert solution('welcome to the programming competitions') == 'ywwelcometotiopromcetiosgwapqhb'",
        "num_ids": 372
    },
    {
        "number": 4677,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n",
        "test": "assert solution('') == ''",
        "num_ids": 140
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    tallest = a[-1]\n    for i in reversed(range(n - 1)):\n        tallest -= a[i]\n        if tallest > 0:\n            continue\n        else:\n            return i + 1\n    return 0",
        "test": "assert solution(\"2\\n4 1\") == \"2\\n\"",
        "num_ids": 514
    },
    {
        "number": 4679,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"ccba\") == \"A\"",
        "num_ids": 296
    },
    {
        "number": 4680,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    if (a + b + c) % 3!= 0:\n        return 'NO'\n    a, b, c = sorted([a, b, c])\n    if a > 1 and a % 2 == 1:\n        return 'NO'\n    if b > 1 and b % 2 == 1:\n        return 'NO'\n    if c > 1 and c % 2 == 1:\n        return 'NO'\n    return 'YES'",
        "test": "assert solution('5 5 7') == 'NO'",
        "num_ids": 329
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = [2, 1]\n    for i in range(N-2):\n        l.append(l[i]+l[i+1])\n    return str(l[N-1])",
        "test": "assert solution('26') == 1645",
        "num_ids": 355
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = list(map(int, stdin.split()))\n    return str(int(((a+b)*h)/2))\n\nprint(solution(stdin))\n",
        "test": "assert solution('3\\n4\\n2\\n') == '7'",
        "num_ids": 316
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().strip().split(\" \")]\n    res = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            res += (a[i] * a[j])\n    return str(res % (10**9 + 7))",
        "test": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '42'",
        "num_ids": 2424
    },
    {
        "number": 4684,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(\"4 3 4\") == \"NO\"",
        "num_ids": 301
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    # Split each input into A, B and C.\n    A, B, C = [int(x) for x in stdin.split()]\n    # Get the K\n    K = int(stdin.readline())\n    # For each K, check the max possible sum of the integers written on the board.\n    # E869120 writes 1 to the blackboard, and he can perform the operation once.\n    # Thus, the max possible sum of integers written on the board is 1.\n    print(max(1, A * K))\n    # E869120 writes 2 to the blackboard, and he can perform the operation once.\n    # Thus, the max possible sum of integers written on the board is 2.\n    print(max(2, A * K + B * (K - 1)))\n    # E869120 writes 3 to the blackboard, and he can perform the operation once.\n    # Thus, the max possible sum of integers written on the board is 3.\n    print(max(3, A * K + B * (K - 1) + C))\n    # E869120 writes 5 to the blackboard, and he can perform the operation once.\n    # Thus, the max possible sum of integers written on the board is 5.\n    print(max(5, A * K + B * (K - 1) + C))\n    # E869120 writes 11 to the blackboard, and he can perform the operation once.\n    # Thus, the max possible sum of integers written on the board is 22.\n    print(max(22, A * K + B * (K - 1) + C))\n    # E869120 writes 12 to the blackboard, and he can perform the operation once.\n    # Thus, the max possible sum of integers written on the board is 33.\n    print(max(33, A * K + B * (K - 1) + C))",
        "test": "assert solution('''5 2 8",
        "num_ids": 713
    },
    {
        "number": 4686,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    letter_dict = {}\n    for i in range(26):\n        letter_dict[chr(i+97)] = 0\n    input_string = stdin.strip()\n\n    for letter in input_string:\n        letter_dict[letter] += 1\n\n    for letter in letter_dict:\n        if letter_dict[letter] % 2!= 0:\n            return 'No'\n\n    return 'Yes'",
        "test": "assert solution('abaccaba') == 'Yes'",
        "num_ids": 799
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # 1 \u2264 N \u2264 10^5\n    # 1 \u2264 a_i, b_i \u2264 10^5\n    # 1 \u2264 K \u2264 b_1 + b_2 +... + b_N\n    # All input values are integers.\n    pass",
        "test": "assert solution(\"2\\n1\\n1\\n1\") == \"1\"",
        "num_ids": 385
    },
    {
        "number": 4688,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split(\" \")\n\n    N = int(inputs[0])\n    K = int(inputs[1])\n\n    dp = [0] * (K + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, N + 1):\n        for j in range(K, -1, -1):\n            dp[j] += dp[j - 1]\n\n    return str(dp[K])",
        "test": "assert solution('1 2') == '0'",
        "num_ids": 393
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    K, N = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    return str(min(K - (A[0] + A[N - 1]), K - (A[N - 1] + A[0])))\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\nTESTING\n\ndef",
        "test": "assert solution('''10 1",
        "num_ids": 2072
    },
    {
        "number": 4690,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Computes the area of a rectangle with the given lengths and return the area\n    if the first rectangle is larger than the second, otherwise the area of the\n    second rectangle.\n    \"\"\"\n    A, B, C, D = map(int, stdin.split())\n    area_1 = A * B\n    area_2 = C * D\n    if area_1 > area_2:\n        return f'{area_1}'\n    else:\n        return f'{area_2}'",
        "test": "assert solution(\"3 5 2 7\") == \"15\"",
        "num_ids": 356
    },
    {
        "number": 4691,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    C = [0] * 4\n    for _ in range(N):\n        S = stdin.readline().strip()\n        if S == 'AC':\n            C[0] += 1\n        elif S == 'WA':\n            C[1] += 1\n        elif S == 'TLE':\n            C[2] += 1\n        else:\n            C[3] += 1\n    print('AC x', C[0])\n    print('WA x', C[1])\n    print('TLE x', C[2])\n    print('RE x', C[3])\n'''\ndef",
        "test": "assert solution(",
        "num_ids": 391
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    time = int(stdin)\n    days = ['saturday','sunday','monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    days_str = ['Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri']\n    new_time = time\n    if time > 23:\n        new_time -= 24\n    new_time = new_time // 3\n    if new_time > 0:\n        day = days_str[(days.index(days[new_time - 1]) + 1) % 7]\n        return '{} {}'.format(new_time, day)\n    return '{} {}'.format(new_time, days_str[new_time])\n\nimport sys\n",
        "test": "assert solution(3) == 4",
        "num_ids": 307
    },
    {
        "number": 4693,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(' ')\n    if int(data[0]) + int(data[1]) >= 10:\n        return 'error'\n    return str(int(data[0]) + int(data[1]))",
        "test": "assert solution('1 2\\n') == '3'",
        "num_ids": 282
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('1 10') == '10'",
        "num_ids": 137
    },
    {
        "number": 4695,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n\n    if a % 3 == b % 3:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution('1 12') == 'No'",
        "num_ids": 199
    },
    {
        "number": 4696,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(item) for item in stdin.split()]\n    if a % 2 == 0 and b % 2 == 0:\n        print('Even')\n    elif a % 2!= 0 and b % 2!= 0:\n        print('Odd')\n    else:\n        print('Odd')",
        "test": "assert solution('1 2') == \"Even\"",
        "num_ids": 332
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    n = int(a[0])\n    m = int(a[1])\n    if n > 10 ** 12:\n        print(0)\n    else:\n        s = 0\n        for i in range(n):\n            for j in range(n):\n                s += 1\n        print(s)",
        "test": "assert solution(",
        "num_ids": 305
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = [int(x) for x in stdin.readline().split(\" \")]\n\n    m = int(stdin.readline().strip())\n    p = [int(x) for x in stdin.readline().split(\" \")]\n\n    # dp[i][j] is the minimum time required to solve problems 1 through i,\n    # with the first j drinks taken\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    # dp[i][j] is the minimum time required to solve problems 1 through i,\n    # with the first j drinks taken\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            time = t[i] + p[j]\n            if j + 1 <= m:\n                dp[i][j + 1] = max(dp[i + 1][j + 1], dp[i][j] + time)\n            if i + 1 <= n:\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + time)\n\n    # Get the min time to solve the last problems\n    res = sum(t) + sum(p)\n    for i in range(n, -1, -1):\n        res = max(res, dp[i][m])\n    return str(res)",
        "test": "assert solution(",
        "num_ids": 575
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n\n    dislikes = set()\n    for _ in range(k):\n        dislikes.add(int(stdin.split()[-1]))\n\n    result = 10 ** n\n    for i in range(1, 10 ** n):\n        current_result = i\n        for j in dislikes:\n            current_result = current_result / 10\n\n        if current_result == i:\n            result = i\n            break\n\n    return str(result)\n",
        "test": "assert solution(stdin) == '2000'",
        "num_ids": 471
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = [int(x) for x in lines[0].split()]\n    elevations = [int(x) for x in lines[1].split()]\n    roads = [tuple(int(x) for x in line.split()) for line in lines[2:]]\n    good = 0\n    for i in range(N):\n        good += all(elevation > max(elevations[road[0]], elevations[road[1]]) for road in roads)\n    return str(good)",
        "test": "assert solution('1 2 3 4\\n1 3\\n2 3\\n2 4\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n3 4\\n3 2\\n3 2\\n1 3\\n2 3\\n",
        "num_ids": 2075
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    return str(n * k)\n\nassert solution(\"5\") == \"50\"\nassert solution(\"4\") == \"100\"\nassert solution(\"10\") == \"1000\"\nassert solution(\"100\") == \"10000\"\nassert solution(\"10000\") == \"1000000\"\nassert solution(\"3\") == \"9\"\nassert solution(\"7\") == \"49\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"100\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"10000\") == \"10000\"\nassert solution(\"123456789\") == \"123456789\"\nassert solution(\"9\") == \"1\"\nassert solution(\"49\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"100\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"10000\") == \"10000\"\nassert solution(\"123456789\") == \"123456789\"\nassert solution(\"1234\") == \"1234\"\n\"\"\"\n",
        "test": "assert solution(stdin) == stdin[0] + str(int(stdin[1]) * 2) + stdin[2] + str(int(stdin[3]) + 1)",
        "num_ids": 445
    },
    {
        "number": 4702,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x == 0:\n        print(0)\n    else:\n        print(1)\n",
        "test": "assert solution(-1) == 0",
        "num_ids": 191
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    S = stdin.strip()\n    for i in range(1, len(S)):\n        if S[i]!= '+':\n            continue\n        for j in range(i+1, len(S)):\n            if S[j]!= '+':\n                continue\n            if j+1 == len(S) or S[j+1]!= '+':\n                formula = eval(S[i:j+1])\n                result += formula\n    return str(result)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"5969\") == \"17\"",
        "num_ids": 236
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"2\\n1 2\") == '1'",
        "num_ids": 1932
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    N = int(N)\n\n    x = 16000\n    y = 200\n    x_prev = x\n    y_prev = y\n\n    for _ in range(N):\n        m = int(stdin[1])\n        x_prev = x\n        y_prev = y\n\n        x = x_prev - m*800\n        y = y_prev + m*800\n\n    return str(x-y)\n",
        "test": "assert solution(",
        "num_ids": 316
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    r = [stdin.split(\"\\n\")[0]]\n    r.extend([x.split(\"\\n\") for x in stdin.split(\"\\n\")[1:]])\n    for x in r:\n        for y in x:\n            if y:\n                y = y[0]\n                if y.isalpha():\n                    print(y, end=\"\")",
        "test": "assert solution(stdin) == \"abc\"",
        "num_ids": 230
    },
    {
        "number": 4707,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"1\")\n",
        "test": "assert solution(\"101\") == 2",
        "num_ids": 197
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    k = int(input_data[1])\n    x = int(input_data[2])\n    y = int(input_data[3])\n    \n    if (x > y):\n        x, y = y, x\n    \n    y_each = y - x\n    \n    return str(n*y_each + k*(k+1)*x)",
        "test": "assert solution('''5",
        "num_ids": 235
    },
    {
        "number": 4709,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(' ')\n    a, op, b = int(inp[0]), inp[1], int(inp[2])\n    if op == '+':\n        return str(a+b)\n    elif op == '-':\n        return str(a-b)",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 274
    },
    {
        "number": 4710,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n\n    if x < 1200:\n        return 'ABC'\n    return 'ARC'",
        "test": "assert solution('1000') == 'ABC'",
        "num_ids": 196
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return '{}'.format(min(a + b, a + c, b + c) - min(a, b, c))",
        "test": "assert solution('700 780 780') == '1380'",
        "num_ids": 329
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    matrix = stdin.strip().splitlines()\n    result = []\n    for row in range(rows):\n        result.append('')\n        for col in range(cols):\n            result[row] += matrix[row][col]\n    return '\\n'.join('#' * rows for _ in range(cols)) + '\\n' + '\\n'.join(result)",
        "test": "assert solution(\"2 3\\na\\nab\\na\") == \"#####\\naac\\nabababab\"",
        "num_ids": 490
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.rstrip()\n    count = int(line)\n    line = stdin.rstrip()\n    value = 0\n    for char in line:\n        if char == 'I':\n            value += 1\n        if char == 'D':\n            value -= 1\n\n    print(value)\n    return line\n",
        "test": "assert solution('IIDID') == '2'",
        "num_ids": 258
    },
    {
        "number": 4714,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(sum(1 for x in range(A, B+1) if x % 10 == x // 10))\n    return ''",
        "test": "assert solution(11009, 11332) == \"4\"",
        "num_ids": 185
    },
    {
        "number": 4715,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(i) for i in stdin.split()]\n    a, b, c = data\n    count = 0\n    for i in range(1, c + 1):\n        if i!= a and i!= b and i!= c:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"2 2 1\") == \"0\"",
        "num_ids": 381
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    sticks = [int(x) for x in stdin.split()]\n\n    sticks.sort()\n    length = sum(sticks[:K])\n\n    return str(length)\n",
        "test": "assert solution('1 2 3 4 5') == 12",
        "num_ids": 288
    },
    {
        "number": 4717,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\" \")\n    x = int(line[0])\n    a = int(line[1])\n    b = int(line[2])\n    if x < a and x < b:\n        return \"A\"\n    elif a < x and a < b:\n        return \"B\"\n    elif b < x and b < a:\n        return \"B\"\n    elif a == x or b == x:\n        return \"A\"\n    elif abs(a-x) > abs(b-x):\n        return \"B\"\n    else:\n        return \"A\"",
        "test": "assert solution(2, 1, 2) == \"A\"",
        "num_ids": 357
    },
    {
        "number": 4718,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    print(s[:4] + \"2018\" + s[4:])",
        "test": "assert solution('31/12/2015') == '31/12/2017'",
        "num_ids": 278
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    strings = lines[1:]\n\n    def make_s(i):\n        return strings[i][:n]\n\n    def can_make_s(i, j):\n        return all(make_s(i) == make_s(j) for j in range(n))\n\n    def find_longest_possible(s):\n        s = list(s)\n        for i in range(1, n):\n            s = s[1:] + s[:1]\n            if can_make_s(0, i):\n                return s\n\n    s = find_longest_possible(strings[0])\n    for i in range(n):\n        s = min(s, find_longest_possible(strings[i]))\n\n    return s",
        "test": "assert solution('''3",
        "num_ids": 452
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Simply calculate the number of people sitting at the theater.\n    \"\"\"\n    seats = list(map(int, stdin.split()))\n    n = seats[0]\n    l = seats[1]\n    r = seats[2]\n\n    return str(100000 - l - r + 1)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"2\\n24 30\") == \"7\"",
        "num_ids": 519
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    return str(n * m)",
        "test": "assert solution(stdin) == expected",
        "num_ids": 2027
    },
    {
        "number": 4722,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    if A < 3:\n        return \"Possible\"\n    elif B < 3:\n        return \"Possible\"\n    else:\n        return \"Impossible\"",
        "test": "assert solution('1 1') == 'Possible'",
        "num_ids": 251
    },
    {
        "number": 4723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 298
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return 0",
        "test": "assert solution('R\\n40\\nG\\n') == 2031",
        "num_ids": 457
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your friend is creating a new string. He has accidentally broken a letter and replaced it with a letter from a dictionary he has collected.\n    He also happens to have a special eraser which will change one letter into a lowercase letter.\n    You have to write a function that returns the minimum number of letters that must be deleted from the string in order to make it become a string with a simplicity at most $2$.\n    Note: If there are no letters in the string return -1.\n    The input will only consist of lowercase letters 'a'-'z' and will always be in one line.\n    \"\"\"\n    return stdin.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\").replace(\"y\", \"\")\n",
        "test": "assert solution(stdin) == ''",
        "num_ids": 380
    },
    {
        "number": 4726,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = [int(x) for x in stdin.split()]\n    if t > 4:\n        return 'AC'\n    if m < 50 and n < 10001:\n        return 'AC'\n    return 'TLE'",
        "test": "assert solution('100000000 10000 5') == 'AC'",
        "num_ids": 352
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    grid = [[0 for _ in range(4)] for _ in range(4)]\n    line = stdin.splitlines()\n    j = 0\n    for i in range(16):\n        grid[i][j] = int(line[i])\n        j += 1\n    for i in range(16, 20):\n        grid[i][j] = int(line[i])\n        j += 1\n    for i in range(20, 24):\n        grid[i][j] = int(line[i])\n        j += 1\n    move = int(line[24])\n    print(str(grid))\n    return \"\"\n",
        "test": "assert solution('''2 0 0 2",
        "num_ids": 1853
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    MOLS: list[str] = stdin.strip().split('\\n')\n    assert len(MOLS) == 2\n\n    mol = MOLS[0]\n    k = int(MOLS[1])\n    assert 1 <= k <= 10 ** 3\n    assert len(mol) <= 2500\n\n    mol_dict = {}\n\n    for i in range(len(mol)):\n        if mol[i] not in mol_dict:\n            mol_dict[mol[i]] = 1\n        else:\n            mol_dict[mol[i]] += 1\n\n    max_k = 0\n\n    for mol_type in mol_dict:\n        if mol_dict[mol_type] > max_k:\n            max_k = mol_dict[mol_type]\n\n    def generate_new_mol(old_mol: str, mol_dict: dict, k: int) -> str:\n        if k == 0:\n            return ''\n\n        if len(old_mol) == 0:\n            return ''\n\n        if old_mol[0] not in mol_dict:\n            return ''\n\n        for i in range(mol_dict[old_mol[0]]):\n            new_mol = generate_new_mol(old_mol[1:], mol_dict, k - 1)\n            if new_mol!= '':\n                return old_mol[0] + new_mol\n\n        return ''\n\n    def get_max_output(mol: str, k: int) -> int:\n        if k == 0:\n            return 0\n\n        if len(mol) == 0:\n            return 0\n\n        if mol[0] not in mol_dict:\n            return 0\n\n        output_num = get_max_output(mol[1:], k)\n        output_num += mol_dict[mol[0]]\n\n        return output_num\n\n    output = get_max_output(mol, k)\n    return str(output)",
        "test": "assert solution('CH3OH') == 'CH4'",
        "num_ids": 2437
    },
    {
        "number": 4729,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    passwd = stdin.split()[0]\n    msg = stdin.split()[1]\n    return 'PASS' if isValid(passwd, msg) else 'FAIL'\n\ndef",
        "test": "assert solution('SECRET SOMECHORESARETOUGH') == 'PASS'",
        "num_ids": 270
    },
    {
        "number": 4730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for i, c in enumerate(stdin):\n        if c == '[':\n            stack.append(c)\n        elif c == '{':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack[-1]!= '(':\n                return'syntax error'\n            else:\n                stack.pop()\n        elif c == '}':\n            if not stack or stack[-1]!= '{':\n                return'syntax error'\n            else:\n                stack.pop()\n        elif c == ']':\n            if not stack or stack[-1]!= '[':\n                return'syntax error'\n            else:\n                stack.pop()\n    return 'ok so far'\n\nprint(solution(input()))\n",
        "test": "assert solution('()[]{}') == '] 0'",
        "num_ids": 509
    },
    {
        "number": 4731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(N)]\n    output = \"Fair Game\"\n    for i in range(N):\n        if not output:\n            break\n        player1 = words[i]\n        for j in range(i + 1, N):\n            player2 = words[j]\n            if player1[-1]!= player2[0]:\n                continue\n            new_word = player2[1:]\n            new_word_index = words.index(new_word)\n            if new_word_index == j:\n                output = \"Player 1 lost\"\n                break\n            output = \"Player 2 lost\"\n            break\n    print(output)\n    return output\n",
        "test": "assert solution('''5",
        "num_ids": 385
    },
    {
        "number": 4732,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, operator, b = stdin.split('\\n')[:3]\n    if operator == '+':\n        return str(int(a) + int(b))\n    if operator == '*':\n        return str(int(a) * int(b))\n    return \"\"",
        "test": "assert solution('1000\\n*\\n100\\n') == '100000'",
        "num_ids": 354
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'out' * ((n // 2) - 1) + 'in' * (n // 2)\n    else:\n        return 'in' * (n - 1) + 'out'",
        "test": "assert solution(\"52 out\") == \"8\"",
        "num_ids": 300
    },
    {
        "number": 4734,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    y, p = stdin.split()\n    if y.endswith('e'):\n        return y + 'x' + p\n    elif y.endswith('a') or y.endswith('i') or y.endswith('o') or y.endswith('u'):\n        return y[:-1] + 'ex' + p\n    elif y.endswith('x'):\n        return y + p\n    else:\n        return y + 'ex' + p\n    return stdin",
        "test": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"",
        "num_ids": 460
    },
    {
        "number": 4735,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    \n    return 'yes'",
        "test": "assert solution('2018') == 'yes'",
        "num_ids": 162
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_help(stdin.strip()))\n\ndef",
        "test": "assert solution('''4 0 0 0 4 0 0 0 0 4''') == '64'",
        "num_ids": 306
    },
    {
        "number": 4737,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    estimations = [int(x) for x in stdin.split()]\n    estimations.sort(reverse=True)\n    # print(n, p, estimations)\n    if n > 6 or n == 1:\n        return '0 0'\n    if estimations[0] < 300:\n        return '0 0'\n    res = 0\n    for i in range(n):\n        res += estimations[i]\n        if res > 300:\n            return f'{i+1} {res-300}'\n    return f'{i+2} {res-300}'",
        "test": "assert solution('1 2') == '0 0'",
        "num_ids": 924
    },
    {
        "number": 4738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    F(k) =  Number of substrings of length k\n    F(k) =  number of substrings of length k - 1\n    '''\n    s = stdin\n    # F(k) =  Number of substrings of length k\n    # F(k) =  number of substrings of length k - 1\n    for k in range(2, len(s) + 1):\n        if len(s) % k == 0 and s[0:k] == s[k-1::-1]:\n            return k",
        "test": "assert solution('a') == 1",
        "num_ids": 377
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n\nimport sys\n\ninput = sys.stdin.read()\n\nprint(solution(input))\n\ndef",
        "test": "assert solution(",
        "num_ids": 106
    },
    {
        "number": 4740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The telephone company that uses the directory information operator has a list of available number to use for directory information. The operators have told you that they want to use three sets of numbers:\n - set 1: $123\n - set 2: $456\n - set 3: $789\n\nUsing the phone numbers available, is it possible to route to the directory information operator?\n\n\nIt is, if you provide all three sets.\n\n\n------Python 3------\nStandard libraries:\n\nimport sys\nimport math\n\ndef",
        "test": "assert solution('5055555') == stdin",
        "num_ids": 1978
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Convert a string of format $a/b$ to a string of format $a/b$, where $a$ and $b$ are integers such that $0 \\leq a, b \\leq 1000000$ and $b \\neq 0$.\n    '''\n    pass",
        "test": "assert solution(\"-0/1\") == \"-0/1\"",
        "num_ids": 527
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N == 0:\n        return \"Nonsense\"\n    notes = stdin.readline().strip()\n    original = [x for x in notes.split(' ')]\n    inverted = original[::-1]\n    n = 0\n    d = 0\n    # transposition\n    for i, v in enumerate(notes):\n        if v == 'A':\n            if i!= 0:\n                if notes[i-1]!= 'F' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'C' and notes[i+1]!= 'G':\n                    n += 1\n        elif v == 'B':\n            if i!= 0:\n                if notes[i-1]!= 'E' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'A' and notes[i+1]!= 'G':\n                    n += 1\n        elif v == 'C':\n            if i!= 0:\n                if notes[i-1]!= 'F' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'B' and notes[i+1]!= 'G':\n                    n += 1\n        elif v == 'D':\n            if i!= 0:\n                if notes[i-1]!= 'F' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'A' and notes[i+1]!= 'G':\n                    n += 1\n        elif v == 'E':\n            if i!= 0:\n                if notes[i-1]!= 'F' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'B' and notes[i+1]!= 'G':\n                    n += 1\n        elif v == 'F':\n            if i!= 0:\n                if notes[i-1]!= 'E' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'A' and notes[i+1]!= 'G':\n                    n += 1\n        elif v == 'G':\n            if i!= 0:\n                if notes[i-1]!= 'F' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'B' and notes[i+1]!= 'A':\n                    n += 1\n        elif v == 'H':\n            if i!= 0:\n                if notes[i-1]!= 'G' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'A' and notes[i+1]!= 'B':\n                    n += 1\n        elif v == 'I':\n            if i!= 0:\n                if notes[i-1]!= 'G' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'E' and notes[i+1]!= 'A':\n                    n += 1\n        elif v == 'J':\n            if i!= 0:\n                if notes[i-1]!= 'G' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'B' and notes[i+1]!= 'H':\n                    n += 1\n        elif v == 'K':\n            if i!= 0:\n                if notes[i-1]!= 'G' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'A' and notes[i+1]!= 'H':\n                    n += 1\n        elif v == 'L':\n            if i!= 0:\n                if notes[i-1]!= 'G' and notes[i-1]!= 'D':\n                    n += 1\n            if i!= len(notes) - 1:\n                if notes[i+1]!= 'B' and notes[i+1]!= 'I':\n                    n += 1\n    if n == 0:\n        return \"Nonsense\"\n    elif n == 1:\n        return \"Retrograde\"\n    elif n == 2:\n        return \"Transposition\"\n    elif n == 3:\n        return \"Inversion\"\n    else:\n        return \"Nonsense\"\n\nprint(solution(open(\"dodecaphony.in\")))\nprint(solution(open(\"dodecaphony2.in\")))\nprint(solution(open(\"dodecaphony3.in\")))\nprint(solution(open(\"dodecaphony4.in\")))\nprint(solution(open(\"dodecaphony5.in\")))\n",
        "test": "assert solution(input(\"\")) == \"\"",
        "num_ids": 1710
    },
    {
        "number": 4743,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    translation = stdin.replace('-', '')\n    translation = translation.translate(str.maketrans(\n        {'a': 'ba', 'o': 'oh', 'u': 'uh', 'h': 'goh', 'i': 'gi', 'c': 'ch', 'd': 'dach', 'g': 'gach', 'p': 'pach', 'l': 'lap',\n         't': 'tach', 'k': 'kach', 'n': 'nach','s':'sach','m':'mach', 'r': 'rach', 'w': 'wach', 'f': 'fach', 'v': 'vach',\n         'y': 'yach', 'x': 'xach'})\n    )\n    return translation",
        "test": "assert solution('') == ''",
        "num_ids": 634
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin.readline().strip())\n    # Write your code here\n    ans = -1\n    for i in range(V, 0, -1):\n        if i * i <= V:\n            ans = i * i\n            break\n    return str(ans)\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\nfor _ in range(T):\n    print(solution(sys.stdin))\n",
        "test": "assert solution('10000000') == '600', 'Failed 1'",
        "num_ids": 283
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    costs = [int(x) for x in stdin.split()]\n    min_costs = sorted(costs)\n    max_costs = sorted(costs, reverse=True)\n    indices = [min_costs.index(x) for x in costs]\n    num_min = len(min_costs)\n    num_max = len(max_costs)\n    for i in range(num_min, n):\n        if i % 2 == 0 and i < num_max:\n            if max_costs[i] - min_costs[i] <= x:\n                max_costs[i] = max_costs[i] - min_costs[i]\n                indices[i] = i\n    return str(max(indices))\n\n\ndef",
        "test": "assert solution('1 2 3 4 5') == '3'",
        "num_ids": 520
    },
    {
        "number": 4746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"impossible\"",
        "test": "assert solution('1 2\\n1 0 0\\n0 1 0') == 'impossible'",
        "num_ids": 786
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.strip().split(' ')))\n    return str(solve(*input_list))\n\ndef",
        "test": "assert solution('99 99\\n') == '4.895'",
        "num_ids": 295
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given the number of bricks in the left pyramid, find the number of bricks in the right pyramid.\n    '''\n    n, m, h = [int(x) for x in stdin.split(' ')]\n    if n > m:\n        n, m = m, n\n    a = n - m\n    return str(a) +'' + str(m + (a * h))\n\nassert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\nassert solution('2 1 0') == '0 0'\nassert solution('2 2 0') == '0 0'\nassert solution('0 0 0') == '0 0'\nassert solution('1 2 1') == '2 1'\nassert solution('2 2 2') == '3 1'\nassert solution('0 3 1') == '1 4'\nassert solution('0 3 2') == '1 4'\nassert solution('0 3 3') == '1 4'\nassert solution('1 3 0') == '0 0'\nassert solution('2 3 0') == '0 0'\nassert solution('2 3 1') == '2 2'\nassert solution('2 3 2') == '4 1'\nassert solution('2 3 3') == '6 1'\nassert solution('0 0 0') == '0 0'\nassert solution('1 0 0') == '0 0'\nassert solution('1 1 1') == '3 0'\nassert solution('1 2 1') == '1 3'\nassert solution('1 3 1') == '1 4'\nassert solution('1 4 1') == '1 4'\nassert solution('1 5 1') == '2 1'\nassert solution('1 6 1') == '2 1'\nassert solution('1 7 1') == '2 1'\nassert solution('1 8 1') == '2 1'\nassert solution('1 9 1') == '2 1'\nassert solution('1 10 1') == '2 1'\nassert solution('2 1 1') == '2 2'\nassert solution('2 2 1') == '2 3'\nassert solution('2 3 1') == '2 4'\nassert solution('2 4 1') == '2 4'\nassert solution('2 5 1') == '2 4'\nassert solution('2 6 1') == '2 4'\nassert solution('2 7 1') == '2 4'\nassert solution('2 8 1') == '2 4'\nassert solution('2 9 1') == '2 4'\nassert solution('2 10 1') == '2 4'\nassert solution('3 1 1') == '3 0'\nassert solution('3 2 1') == '3 1'\nassert solution('3 3 1') == '3 1'\nassert solution('3 4 1') == '3 2'\nassert solution('3 5 1') == '3 2'\nassert solution('3 6 1') == '3 2'\nassert solution('3 7 1') == '3 2'\nassert solution('3 8 1') == '3 2'\nassert solution('3 9 1') == '3 2'\nassert solution('3 10 1') == '3 2'\nassert solution('4 1 1') == '4 0'\nassert solution('4 2 1') == '4 1'\nassert solution('4 3 1') == '4 1'\nassert solution('4 4 1') == '4 2'\nassert solution('4 5 1') == '4 2'\nassert solution('4 6 1') == '4 2'\nassert solution('4 7 1') == '4 2'\nassert solution('4 8 1') == '4 2'\nassert solution('4 9 1') == '4 2'\nassert solution('4 10 1') == '4 2'\nassert solution('5 1 1') == '5 0'\nassert solution('5 2 1') == '5 1'\nassert solution('5 3 1') == '5 1'\nassert solution('5 4 1') == '5 2'\nassert solution('5 5 1') == '5 2'\nassert solution('5 6 1') == '5 2'\nassert solution('5 7 1') == '5 2'\nassert solution('5 8 1') == '5 2'\nassert solution('5 9 1') == '5 2'\nassert solution('5 10 1') == '5 2'\nassert solution('6 1 1') == '6 0'\nassert solution('6 2 1') == '6 1'\nassert solution('6 3 1') == '6 1'\nassert solution('6 4 1') == '6 2'\nassert solution('6 5 1') == '6 2'\nassert solution('6 6 1') == '6 2'\nassert solution('6 7 1') == '6 2'\nassert solution('6 8 1') == '6 2'\nassert solution('6 9 1') == '6 2'\nassert solution('6 10 1') == '6 2'\nassert solution('7 1 1') == '7 0'\nassert solution('7 2 1') == '7 1'\nassert solution('7 3 1') == '7 1'\nassert solution('7 4 1') == '7 2'\nassert solution('7 5 1') == '7 2'\nassert solution('7 6 1') == '7 2'\nassert solution('7 7 1') == '7 2'\nassert solution('7 8 1') == '7 2'\nassert solution('7 9 1') == '7 2'\nassert solution('7 10 1') == '7 2'\nassert solution('8 1 1') == '8 0'\nassert solution('8 2 1') == '8 1'\nassert solution('8 3 1') == '8 1'\nassert solution('8 4 1') == '8 2'\nassert solution('8 5 1') == '8 2'\nassert solution('8 6 1') == '8 2'\nassert solution('8 7 1') == '8 2'\nassert solution('8 8 1') == '8 2'\nassert solution('8 9 1') == '8 2'\nassert solution('8 10 1') == '8 2'\nassert solution('9 1 1') == '9 0'\nassert solution('9 2 1') == '9 1'\nassert solution('9 3 1') == '9 1'\nassert solution('9 4 1') == '9 2'\nassert solution('9 5 1') == '9 2'\nassert solution('9 6 1') == '9 2'\nassert solution('9 7 1') == '9 2'\nassert solution('9 8 1') == '9 2'\nassert solution('9 9 1') == '9 2'\nassert solution('9 10 1') == '9 2'\nassert solution('10 1 1') == '10 0'\nassert solution('10 2 1') == '10 1'\nassert solution('10 3 1') == '10 1'\nassert solution('10 4 1') == '10 2'\nassert solution('10 5 1') == '10 2'\nassert solution('10 6 1') == '10 2'\nassert solution('10 7",
        "test": "assert solution('3 0 0') == '1 6'",
        "num_ids": 1960
    },
    {
        "number": 4749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    assert 2 <= n <= 24\n    bw = []\n    for _ in range(n):\n        bw.append(list(stdin.rstrip()))\n    row = col = 0\n    bw_black = bw_white = col_black = col_white = 0\n    while row < n:\n        while col < n:\n            if bw[row][col] == 'B':\n                bw_black += 1\n                col_black = 0\n            else:\n                bw_white += 1\n                col_white = 0\n            if bw_black >= 3 or bw_white >= 3:\n                break\n            col += 1\n        if bw_black >= 3 or bw_white >= 3:\n            break\n        row += 1\n        col = 0\n    while col < n:\n        if bw[row][col] == 'B':\n            bw_black += 1\n            col_black += 1\n        else:\n            bw_white += 1\n            col_white += 1\n        if bw_black >= 3 or bw_white >= 3:\n            break\n        col += 1\n    while row < n:\n        if bw[row][col] == 'B':\n            bw_black += 1\n            row_black = 0\n        else:\n            bw_white += 1\n            row_white = 0\n        if bw_black >= 3 or bw_white >= 3:\n            break\n        row += 1\n    while col < n:\n        if bw[row][col] == 'B':\n            bw_black += 1\n            col_black += 1\n        else:\n            bw_white += 1\n            col_white += 1\n        if bw_black >= 3 or bw_white >= 3:\n            break\n        col += 1\n    if (bw_black + bw_white) >= n * n - 1:\n        return '1'\n    return '0'",
        "test": "assert solution('BWWB') == '1'",
        "num_ids": 771
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    num_queries = int(stdin.readline().strip())\n    for _ in range(num_queries):\n        l1, r1, l2, r2 = [int(x) for x in stdin.readline().strip().split()]\n        if l1 <= r2 and l2 <= r1:\n            print(l1, l2)\n        else:\n            print(l2, l1)\n    return \"\"",
        "test": "assert solution('''1 2 1 2",
        "num_ids": 2062
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef",
        "test": "assert solution('[1, 2, 3]') == False",
        "num_ids": 446
    },
    {
        "number": 4752,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(item) for item in stdin.strip().split(\" \")]\n    target = 9\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return str(i) + \" \" + str(j)\n            elif nums[i] + nums[j] > target:\n                break\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(\n            \"0 1\", solution(\"2 1 3\")\n        )\n",
        "test": "assert solution(\"2 7 11 15\") == \"0 1\"",
        "num_ids": 454
    },
    {
        "number": 4753,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 3:\n        return '0'\n    elif n == 4:\n        return '1'\n    else:\n        return '2'",
        "test": "assert solution('4') == '1'",
        "num_ids": 267
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n < 1 or n > 10**5:\n        raise ValueError('invalid input')\n    socks = list(map(int, stdin.readline().strip().split(' ')))\n    if len(socks)!= 2*n:\n        raise ValueError('invalid input')\n\n    socks.sort()\n    m = 0\n    for i in range(1, len(socks)):\n        if socks[i]!= socks[i-1]:\n            m += 1\n\n    if m < 2*n - 2*(n-1):\n        return 'impossible'\n    return str(m)\n\nprint(solution(''))\nprint(solution('1'))\nprint(solution('1 2 2 1'))\nprint(solution('1 1 1 1 1 1 1 1 1'))\nprint(solution
        "test": "assert solution('''3 7''') == 'impossible'",
        "num_ids": 1829
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    candy, count = int(stdin.split()[0]), int(stdin.split()[1])\n    bills = [10**i for i in range(0,count)]\n    for bill in bills:\n        if bill < candy:\n            bills.remove(bill)\n    return str(candy - min(bills))\n\nprint(solution(input()))\n",
        "test": "assert solution('999 9') == '1000'",
        "num_ids": 472
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Implement solution here\n    N = int(stdin.readline().strip())\n    homes = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        homes.append((x,y))\n    homes.sort(key = lambda x: x[0])\n    homes.sort(key = lambda x: x[1])\n    #previous x position\n    xs = [homes[0][0]]\n    y = homes[0][1]\n    a = 0\n    for x, y in homes:\n        if y!= y:\n            a += 1\n            xs.append(x)\n    xs.sort()\n    if y == 0:\n        print(a)\n    else:\n        for i in range(len(xs) - 1):\n            if (xs[i + 1] - xs[i]) * (xs[i + 1] - xs[i]) > a:\n                a = (xs[i + 1] - xs[i]) * (xs[i + 1] - xs[i])\n        print(a)\n    return \"\"\n\nimport sys",
        "test": "assert solution('1 1\\n1 1\\n1 1\\n') == 0.000000",
        "num_ids": 695
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_villagers = int(stdin.readline())\n    num_consecutive_evenings = int(stdin.readline())\n    consecutive_evening_songs = []\n    for i in range(num_consecutive_evenings):\n        consecutive_evening_songs.append(list(map(int, stdin.readline().split())))\n    villagers_knowing_all_songs = []\n    for i in range(num_villagers):\n        consecutive_evening_songs_of_one_night = []\n        for j in range(num_consecutive_evenings):\n            if i in consecutive_evening_songs[j]:\n                consecutive_evening_songs_of_one_night += consecutive_evening_songs[j]\n        if len(consecutive_evening_songs_of_one_night) == num_villagers:\n            villagers_knowing_all_songs.append(i)\n    return '\\n'.join(map(str, sorted(villagers_knowing_all_songs)))",
        "test": "assert solution(stdin) == expected",
        "num_ids": 1205
    },
    {
        "number": 4758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, T, M = map(int, stdin.split(' '))\n    eye_permutations = list(permutations(range(1, N + 1)))\n    nose_permutations = list(permutations(range(1, T + 1)))\n    mouth_permutations = list(permutations(range(1, M + 1)))\n    all_permutations = eye_permutations + nose_permutations + mouth_permutations\n    unique_permutations = set(all_permutations)\n    return str(len(unique_permutations))",
        "test": "assert solution('2 2 2') == '8'",
        "num_ids": 332
    },
    {
        "number": 4759,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"1.6666666666666667\"\n",
        "test": "assert solution(\"3\") == \"1.6666666666666667\"",
        "num_ids": 1963
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    count = 1\n    for p in range(2, N):\n        if p * p <= N:\n            count += 1\n            if count == K:\n                return p\n",
        "test": "assert solution('15 12') == '7'",
        "num_ids": 694
    },
    {
        "number": 4761,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    l, h = map(int, stdin.split())\n    c = str(int(str(int(str(l)[:2])[::-1]) + str(int(str(l)[2:4])[::-1]) + str(int(str(l)[4:6])[::-1]) + str(int(str(l)[6:]))))\n    if len(c) == 6 and int(c) <= h and int(c[::-1]) > l:\n        return str(1)\n    else:\n        return str(0)\n\nassert(solution('123864 123865') == '1')\nassert(solution('198765 198769') == '0')\nprint(solution(input()))\n",
        "test": "assert solution('198765 198769') == '0'",
        "num_ids": 423
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 225
    },
    {
        "number": 4763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    results = []\n\n    for i in range(1, 21):\n        if i < 3:\n            results.append(\"single \" + str(i))\n        elif i < 6:\n            results.append(\"double \" + str(i - 2))\n        else:\n            results.append(\"triple \" + str(i - 4))\n\n    for result in results:\n        if n - result.count(\" \") == 0:\n            return result\n    return \"impossible\"",
        "test": "assert solution('''200''') == 'impossible'",
        "num_ids": 433
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = [int(x) for x in stdin.split()]\n    return str(max(n * n - h * v, n * v - h * n, h * v - n * n, h * n - v * n) * 4)\n\n\nassert(solution('10 4 7') == '168')\nassert(solution('5 2 2') == '36')\n",
        "test": "assert solution(\"5 4 4\\n\") == \"64\"",
        "num_ids": 363
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ingredients = [map(int, line.strip().split(\" \")) for line in stdin.readlines()]\n    ingredients.sort(key=lambda i: i[1] + i[0])\n    for i in range(n):\n        ingredients[i][1] += ingredients[i-1][0]\n        ingredients[i][0] += ingredients[i-1][1]\n    print min([x[0] - x[1] for x in ingredients])",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 301
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        instruction = stdin.readline().strip()\n        if instruction.startswith(\"Simon says\"):\n            command = instruction.split(\" \", 2)[2]\n            if command.endswith(\".\"):\n                print(command[:-1])\n            else:\n                print(command)",
        "test": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \" raise your right hand.\\n raise your left hand.\"",
        "num_ids": 558
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef",
        "test": "assert solution('1 2 4 6 10 12 16 18') == '0'",
        "num_ids": 3336
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A-G\n    T-C\n    C-T\n    G-A\n    G-C\n    T-G\n    A-G\n    A-T\n    C-G\n    C-A\n    T-C\n    G-C\n    G-T\n    C-G\n    C-A\n    T-G\n    A-T\n    G-T\n    A-G\n    C-A\n    G-T\n    C-G\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    dna = []\n    for _ in range(n):\n        dna.append(stdin.strip())\n\n    d = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(k + 1):\n            if j == 0:\n                d[i + 1][j] = d[i][j] + dna[i].count('A')\n            elif j == k:\n                d[i + 1][j] = d[i][j] + dna[i].count('G')\n            else:\n                d[i + 1][j] = min(d[i][j - 1] + dna[i].count('A'), d[i][j] + dna[i].count('C'))\n                d[i + 1][j] = min(d[i + 1][j], d[i][j] + dna[i].count('G'))\n\n    u, v = n - 1, k - 1\n    edges = []\n    while u > 0 and v > 0:\n        if d[u][v - 1] == d[u - 1][v]:\n            u -= 1\n            v -= 1\n        elif d[u][v - 1] == d[u][v]:\n            v -= 1\n        else:\n            u -= 1\n            v -= 1\n            edges.append((u, v))\n    tree = []\n    for u, v in edges:\n        tree.append(u)\n        tree.append(v)\n    tree = sorted(tree)\n    return''.join(str(x) for x in tree)\n",
        "test": "assert solution(stdin) == stdin[9]",
        "num_ids": 742
    },
    {
        "number": 4769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('bbb') == 'a'",
        "num_ids": 221
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert(solution(stdin) == expected)\n",
        "test": "assert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'",
        "num_ids": 253
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin.readline().strip())\n    boxes = []\n    for line in stdin:\n        l, w, h = map(int, line.strip().split())\n        box_vol = l * w * h\n        boxes.append((l, w, h, box_vol))\n    boxes.sort(key = lambda b: b[3])\n    boxes.reverse()\n    for i in range(len(boxes)):\n        if boxes[i][3] <= V:\n            V -= boxes[i][3]\n        else:\n            return str(i)\n    return \"-1\"\n\nprint(solution(open(\"input.txt\", \"r\").readlines()))\n",
        "test": "assert solution('1 10\\n1 1 2\\n2 2 2\\n3 2 1\\n') == '0'",
        "num_ids": 623
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z\n    # R is rows\n    # C is columns\n    R, C = [int(n) for n in stdin.split()]\n    grid = [[''] * C for _ in range(R)]\n    # Set all squares to '0'\n    # Because of the loop\n    for r in range(R):\n        for c in range(C):\n            grid[r][c] = '0'\n    # Here we build the grid\n    for r in range(R):\n        grid[r] = list(stdin[r * C:(r + 1) * C])\n        for c in range(C):\n            if grid[r][c] == '#':\n                grid[r][c] = '0'\n    # Now we set all the coordinates to their appropriate value\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == '0':\n                grid[r][c] = '1'\n            else:\n                grid[r][c] = '0'\n    # We try to find a word\n    # We set the rows to the start and end to -1 to avoid an infinite loop\n    # We change the letter to 0 in the column\n    # The rows increase until we find a row that matches, in which case we return the word\n    for r in range(1, R - 1):\n        for c in range(C):\n            if grid[r][c] == '0':\n                grid[r][c] = '1'\n                if r == R - 1:\n                    return ''.join(l for l in grid[r])\n                else:\n                    grid[r][c] = '0'\n    return None",
        "test": "assert solution('''4 4",
        "num_ids": 702
    },
    {
        "number": 4773,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    chars = list(stdin)\n    macros = {'N':'N', 'E':'E', 'S':'S', 'W':'W'}\n    i = 0\n    while i < len(chars):\n        if chars[i] in macros:\n            chars[i] = macros[chars[i]]\n        elif chars[i] == 'M':\n            chars[i:i+2] = 'N'\n            i += 1\n        i += 1\n    return ''.join(chars)",
        "test": "assert solution('NS') == 'NS'",
        "num_ids": 408
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef",
        "test": "assert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'",
        "num_ids": 498
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n",
        "test": "assert solution('MAMA TATA') == '4'",
        "num_ids": 450
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin)\n    return str(days_for_events(stdin))\n\n\ndef",
        "test": "assert solution('''",
        "num_ids": 325
    },
    {
        "number": 4777,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count_a = 0\n    count_b = 0\n    \n    while K > 0:\n        if K % 2 == 0:\n            count_a += 1\n        else:\n            count_b += 1\n        K //= 2\n    return str(count_a) + \" \" + str(count_b)",
        "test": "assert solution('1') == '0 1'",
        "num_ids": 260
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    V, D = tuple(map(int, stdin.readline().split()))\n\n    def district_result(d: int, a: int, b: int) -> str:\n        if a > b:\n            return \"A\"\n        return \"B\"\n\n    # Wasted votes for party A\n    def wasted_votes_for_party_A(d: int, a: int, b: int) -> int:\n        return abs(a - b - d)\n\n    def wasted_votes_for_party_B(d: int, a: int, b: int) -> int:\n        return abs(b - a - d)\n\n    # Sum of votes for party A\n    def sum_votes_for_party_A(d: int, a: int, b: int) -> int:\n        return a + b\n\n    # Sum of votes for party B\n    def sum_votes_for_party_B(d: int, a: int, b: int) -> int:\n        return b + a\n\n    def get_district_result(d: int, votes_a: int, votes_b: int) -> str:\n        if votes_a > votes_b:\n            return district_result(d, votes_a, votes_b)\n        return district_result(d, votes_b, votes_a)\n\n    districts: List[List[int]] = []\n    party_votes_A: List[int] = []\n    party_votes_B: List[int] = []\n\n    for _ in range(V):\n        district_votes_a, district_votes_b, votes_a, votes_b = tuple(map(int, stdin.readline().split()))\n        districts.append([district_votes_a, district_votes_b])\n        party_votes_A.append(votes_a)\n        party_votes_B.append(votes_b)\n\n    # Sort district votes by total votes\n    for i in range(V):\n        districts[i].sort(reverse=True)\n        districts[i].reverse()\n\n    # 1: A won, 0: B won, -1: tied\n    def get_wasted_votes_for_party(party_id: int, party_votes: List[int]) -> int:\n        index = 0\n        for i in range(len(party_votes) - 1):\n            if party_votes[i] < party_votes[i + 1]:\n                return wasted_votes_for_party_A(districts[i][0], party_votes[i], party_votes[i + 1])\n            index += 1\n        return wasted_votes_for_party_B(districts[index][0], party_votes[index], party_votes[0])\n\n    wasted_votes_A = 0\n    wasted_votes_B = 0\n    for i in range(V):\n        wasted_votes_A += get_wasted_votes_for_party(i, party_votes_A[i:])\n        wasted_votes_B += get_wasted_votes_for_party(i, party_votes_B[i:])\n\n    result = get_district_result(districts[0][0], party_votes_A[0], party_votes_B[0])\n    result_string = result + \" \"\n    result_string += str(wasted_votes_A) + \" \"\n    result_string += str(wasted_votes_B)\n    print(result_string)\n",
        "test": "assert solution('10 5') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\nA 0 99'",
        "num_ids": 2052
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n < 1 or n > 10**6:\n        return \"not enough values\"\n    l = [int(x) for x in stdin.readline().split(\" \")]\n    if len(l)!= n:\n        return \"not enough values\"\n    if n == 1:\n        return str(l[0]**2)\n    if n == 2:\n        return str(l[0]**2 + l[1]**2)\n    if n == 3:\n        return str(l[0]**2 + l[1]**2 + l[2]**2)\n    return str(l[0]**2 + max([x**2 for x in l[1:]]))\n\nprint(solution(\"\"))\nprint(solution(\"1\\n\"))\nprint(solution(\"1 2 3\\n\"))\nprint(solution(\"1 2 3 4\\n\"))\nprint(solution(\"5\\n1 2 3 4 5\"))\nprint(solution(\"3\\n1 2 3\\n4 5 6\"))\nprint(solution(\"10\\n1 1 2 3 4 5 6 7 8 9 10\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"))\nprint(solution(\"1000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97",
        "test": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'",
        "num_ids": 2120
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n\n__author__ = '__L1n__w@tch'\n\nimport sys\n\nstdin = sys.stdin.readlines()\nstdin = [line.strip() for line in stdin]\n\nn1, n2 = [int(x) for x in stdin[0].split()]\n\nants = stdin[1].split()\n\nt = int(stdin[-1])\n\nlast = sorted(ants)\n\nfor _ in range(t):\n    temp = last[:]\n    for i, x in enumerate(last):\n        if i + 1 < len(last):\n            if x.lower()!= last[i+1].lower() and last[i+1].lower() == x.lower():\n                temp[i+1], temp[i] = temp[i], temp[i+1]\n                last = temp\n\nprint(\"\".join(last))\n",
        "test": "assert solution('2 2\\nAB\\nBA') == 'AB'",
        "num_ids": 941
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    players = set()\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players.add(stdin.readline().rstrip())\n    players = sorted(players)\n    for p in range(len(players)):\n        print(p)\n    return \"\"\n\nimport sys",
        "test": "assert solution('''1",
        "num_ids": 368
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\")\n    '6'\n    >>> solution(\"3 4\")\n    '5'\n    >>> solution(\"4 5\")\n    '14'\n    >>> solution(\"7 8\")\n    '38'\n    >>> solution(\"6 9\")\n    '39'\n    >>> solution(\"6 10\")\n    '40'\n    >>> solution(\"6 11\")\n    '41'\n    >>> solution(\"6 12\")\n    '42'\n    >>> solution(\"6 13\")\n    '43'\n    >>> solution(\"6 14\")\n    '44'\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n\n    edges = list(map(int, stdin.split()))\n    edges = sorted(edges)\n\n    def is_connected(edges: list[int], start: int, visited: set) -> bool:\n        visited.add(start)\n        if edges[start] == 0:\n            return False\n\n        for i in range(n):\n            if edges[i] - edges[start] > 0 and i not in visited:\n                if is_connected(edges, i, visited):\n                    return True\n        return False\n\n    def dfs(edges: list[int], start: int, visited: set, cache: list) -> int:\n        if edges[start] == 0:\n            return 0\n\n        if start in visited:\n            return 0\n\n        visited.add(start)\n        if edges[start] in cache:\n            return cache[edges[start]]\n\n        cache[edges[start]] = float(\"inf\")\n\n        for i in range(n):\n            if edges[i] - edges[start] > 0 and i not in visited:\n                cache[edges[start]] = min(cache[edges[start]], dfs(edges, i, visited, cache) + 1)\n\n        return cache[edges[start]]\n\n    visited = set()\n    cache = {}\n    cost = 0\n    for i in range(n - 1):\n        cost = max(cost, dfs(edges, i, visited, cache))\n        if i in visited:\n            visited.remove(i)\n    print(cost)\n",
        "test": "assert solution('6 8') == '22'",
        "num_ids": 944
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_ladder_height(start_point: tuple[int, int], target_point: tuple[int, int], steps: int) -> int:\n        \"\"\"\n        Returns the height of the ladder, given the start_point, target_point and steps\n        >>> get_ladder_height((0, 0), (0, 1), 1)\n        1\n        >>> get_ladder_height((0, 0), (0, 1), 2)\n        0\n        \"\"\"\n        row, col = start_point\n        target_row, target_col = target_point\n\n        if row == target_row and col == target_col:\n            return steps\n\n        if col == target_col:\n            return abs(target_row - row)\n\n        if row == target_row:\n            return abs(target_col - col)\n\n        if abs(target_col - col) < abs(target_row - row):\n            return abs(target_row - row)\n\n        return abs(target_col - col)\n\n    def get_ladder_length(\n        start_point: tuple[int, int], target_point: tuple[int, int], steps: int\n    ) -> int:\n        \"\"\"\n        Returns the length of the ladder, given the start_point, target_point and steps\n        >>> get_ladder_length((0, 0), (0, 1), 1)\n        1\n        >>> get_ladder_length((0, 0), (0, 1), 2)\n        0\n        \"\"\"\n        row, col = start_point\n        target_row, target_col = target_point\n\n        if row == target_row and col == target_col:\n            return steps\n\n        if col == target_col:\n            return steps + abs(target_row - row)\n\n        if row == target_row:\n            return steps + abs(target_col - col)\n\n        if abs(target_col - col) < abs(target_row - row):\n            return steps + abs(target_row - row)\n\n        return steps + abs(target_col - col)\n\n    rows, cols = [int(x) for x in stdin.split()]\n\n    if rows <= 0 or cols <= 0:\n        return 0\n\n    # max_ladder_lengths is the longest ladder we can get for a starting point\n    max_ladder_lengths = [\n        [-1] * cols for _ in range(rows)\n    ]  # -1 means no ladder yet\n\n    for i in range(rows):\n        for j in range(cols):\n            # target_point is the goal point\n            target_point = (i, j)\n\n            # ladder_height is the height of the ladder we can reach from the current starting point\n            ladder_height = get_ladder_height(start_point=(i, j), target_point=target_point, steps=0)\n\n            if ladder_height > 0:\n                # ladder_length is the length of the ladder we can reach from the current starting point\n                ladder_length = get_ladder_length(\n                    start_point=(i, j), target_point=target_point, steps=0\n                )\n\n                if ladder_length == -1 or ladder_length > max_ladder_lengths[i][j]:\n                    max_ladder_lengths[i][j] = ladder_length\n\n    return max_ladder_lengths[-1][-1]\n",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 1273
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    months = [0]\n    for _ in range(n):\n        months.append(int(stdin.readline().strip()))\n    i = 0\n    c = x\n    while len(months) > i + 1:\n        if months[i] <= c:\n            c -= months[i]\n            i += 1\n        else:\n            months[i + 1] += c\n            break\n    return str(months[-1])",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 555
    },
    {
        "number": 4785,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return 'hiss' if'ss' in stdin[::2] else 'no hiss'\n\nprint(solution('octopuses'))",
        "test": "assert solution('wristwatch') == 'no hiss'",
        "num_ids": 2055
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = []\n    for i in range(n):\n        words.append(stdin)\n    return str(n-len(words))",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 217
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution())\n",
        "test": "assert solution('CCC') == 9",
        "num_ids": 209
    },
    {
        "number": 4788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n_1 = int(stdin.readline().strip())\n    n_2 = int(stdin.readline().strip())\n    return str(min(abs(n_1 - n_2), 360 - abs(n_1 - n_2)))",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 239
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a pretty hard problem. I had to find a really good solution. I decided to solve it by using a simple while loop instead of a for loop.\n    While it took me a bit to find a good solution, I realized that you can solve it pretty easily with a simple if/else statement.\n\n    :param stdin:\n    :return:\n    \"\"\"\n    N = int(stdin.readline().strip())\n    desk_numbers = [int(x) for x in stdin.readline().strip().split()]\n    desk_numbers_dict = {}\n    for desk_number in desk_numbers:\n        if desk_number not in desk_numbers_dict:\n            desk_numbers_dict[desk_number] = 1\n        else:\n            desk_numbers_dict[desk_number] += 1\n    desk_numbers_keys = list(desk_numbers_dict.keys())\n    desk_numbers_keys.sort()\n    passes = 0\n    current_desk = desk_numbers_keys[0]\n    while True:\n        if current_desk in desk_numbers_dict:\n            passes += desk_numbers_dict[current_desk]\n            if passes == N:\n                break\n        current_desk -= 1\n    return str(passes)\n\ndef",
        "test": "assert solution('''5",
        "num_ids": 579
    },
    {
        "number": 4790,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass",
        "test": "assert solution
        "num_ids": 5246
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(int, stdin.strip().split())\n    return '%.12f' % (s1 * s2 * s3 * s4 / 2)\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == '1.299038105676658'",
        "num_ids": 470
    },
    {
        "number": 4792,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip()\n    # Compute the characters' frequency\n    characters = {}\n    for char in name:\n        if char in characters:\n            characters[char] += 1\n        else:\n            characters[char] = 1\n    # Find the most frequent character\n    most_frequent_char = None\n    most_frequent_count = 0\n    for char, count in characters.items():\n        if count > most_frequent_count:\n            most_frequent_count = count\n            most_frequent_char = char\n    # Replace characters in the name by a single most frequent character\n    result = ''\n    for i in range(len(name)):\n        if name[i] == most_frequent_char:\n            result += most_frequent_char\n        else:\n            result += name[i]\n    return result\n",
        "test": "assert solution('robert') == 'robert'",
        "num_ids": 506
    },
    {
        "number": 4793,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 9 3')\n    '108 4'\n    >>> solution('2 9 7')\n    'Impossible'\n    \"\"\"\n    m = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    k = int(stdin.split()[2])\n\n    if k <= n or k <= m:\n        return 'Impossible'\n    elif m == 0:\n        return '0'\n    else:\n        return str(min(m // (k - 1), n // (k - 1))) +'' + str(min(m // k, n // k))",
        "test": "assert solution('1000 900 7') == 'Impossible'",
        "num_ids": 579
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 245
    },
    {
        "number": 4795,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(str(int(x[0] + x[1])) for x in stdin.split())",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 392
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(i) for i in stdin.split(\" \"))\n    j, k, l = (int(i) for i in stdin.split(\" \"))\n    return \" \".join(str(round(a / (j * l) - (k * l / j) * a, 4)) for a in range(a, c, k))\n",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"",
        "num_ids": 1013
    },
    {
        "number": 4797,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    l = len(s)\n    if l == 0:\n        return ''\n    left = []\n    right = []\n    for i in range(0, l):\n        if s[i] == '<':\n            if len(left)!= 0:\n                right.append(left.pop())\n        elif s[i] == '>':\n            if len(right)!= 0:\n                left.append(right.pop())\n        elif s[i] == '<':\n            left.append(s[i])\n        elif s[i] == '>':\n            right.append(s[i])\n        else:\n            left.append(s[i])\n    return ''.join(left + right[::-1])",
        "test": "assert solution('<ab>c<') == 'abc'",
        "num_ids": 425
    },
    {
        "number": 4798,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0]",
        "test": "assert solution(\"KMP\") == \"KMP\"",
        "num_ids": 442
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(' ')\n    cards = {'G': 6, 'S': 3, 'C': 0}\n    ret = 'Province'\n    if sum(map(lambda x: x if x <= 5 else 0, s)) >= 6:\n        ret = 'Estate'\n    elif sum(map(lambda x: x if x <= 5 else 0, s)) >= 3:\n        ret = 'Duchy'\n    elif sum(map(lambda x: x if x <= 5 else 0, s)) >= 1:\n        ret = 'Copper'\n    return ret +'or'+ max(cards, key=lambda x: cards[x])",
        "test": "assert solution(\"3 1 0\") == \"Province or Gold\"",
        "num_ids": 387
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = map(int, stdin[0].split())\n    d, s = map(int, stdin[1].split())\n    s = (k - (n - k)) / k\n\n    if d >= s:\n        return 'impossible'\n    else:\n        return (d + s) / 2\n\nn, k = map(int, input().split())\nprint(solution(input()))\n",
        "test": "assert solution('2 2\\n0 0\\n0 0\\n') == 'impossible'",
        "num_ids": 590
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    i = A.index(min(A))\n    g = A[i]\n    l = 1\n    while i > 0:\n        while i > 0 and A[i] > g:\n            i -= 1\n        if i > 0:\n            g = A[i]\n            l += 1\n    return str(l) + '\\n' +''.join(str(A[i]) for i in range(l))",
        "test": "assert solution(\"7\\n7\\n5 4 3 2 1\\n4 3 2 1\\n3 1 2 4 5\\n3 1 2 4 5\") == \"5\\n3 1 2 4 5\"",
        "num_ids": 2132
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    h, m = int(stdin[0]), int(stdin[1])\n    if h == 0:\n        h = 24\n    return str(h - 1) +'' + str(m - 45)\n    \n",
        "test": "assert solution(",
        "num_ids": 256
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    N = float(N)\n    if N == 0.36788:\n        a = 1/N\n    else:\n        a = N**(1/N)\n    return str(a)\n\nassert(solution('''2.000000''') == '1.414214')\nassert(solution('''1.000000''') == '1.000000')\nassert(solution('''0.36788''') == '1.414214')\n'''",
        "test": "assert solution('1.000000') == 1.000000",
        "num_ids": 332
    },
    {
        "number": 4804,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('''0''') == ''",
        "num_ids": 3017
    },
    {
        "number": 4805,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for word in stdin:\n        if stdin.count(word) > 1:\n            return 'no'\n    return 'yes'",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 238
    },
    {
        "number": 4806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    moves = stdin.split('R')\n    return ''.join(sorted(moves[0]))",
        "test": "assert solution('RRBBBLLR') == 'SSKKKHHS'",
        "num_ids": 325
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = [int(x) for x in stdin.split()]\n    for i in range(1, n + 1):\n        if i % x == 0 and i % y == 0:\n            print('FizzBuzz')\n        elif i % x == 0:\n            print('Fizz')\n        elif i % y == 0:\n            print('Buzz')\n        else:\n            print(i)\n    return \"\"\n",
        "test": "assert solution(\"1 2 3\") == \"1\\nFizz\\n3\\nFizz\\n5\\nFizzBuzz\\n7\"",
        "num_ids": 520
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, d_m = [int(x) for x in stdin.split()]\n    data = [int(x) for x in stdin.split()]\n    d = {data[i]: i for i in range(n)}\n    s = []\n    for i in range(1, n):\n        s.append(d[data[i - 1]] - d[data[i]])\n    s = [0] + s + [d_m - d[data[-1]]]\n    s = sorted(s)\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] - s[i - 1] > 1:\n            ans = i\n            break\n    return 'It hadn\\'t snowed this early in {} years!'.format(ans) if ans else 'It had never snowed this early!'\n\n\ndef",
        "test": "assert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"",
        "num_ids": 913
    },
    {
        "number": 4809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    return \"p\" if s % n == 0 else str(s % n)\n\nassert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\nprint(\"Passed\")\n",
        "test": "assert solution('''9 8''') == '2'",
        "num_ids": 356
    },
    {
        "number": 4810,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    ''\n    >>> solution('bok')\n    'bok'\n    >>> solution('koaski')\n    'kakosi'\n    \"\"\"\n    message = stdin.strip()\n    rows = len(message) // 4\n    cols = 4\n    if len(message) % 4:\n        cols += 1\n    rows_and_cols = rows * cols\n    matrix = []\n    for i in range(rows):\n        row = [None] * cols\n        matrix.append(row)\n    col = 0\n    row = 0\n    for i, char in enumerate(message):\n        matrix[row][col] = char\n        col += 1\n        if col == cols:\n            row += 1\n            col = 0\n    matrix = ''.join([''.join(row) for row in matrix])\n    return matrix",
        "test": "assert solution('gkov') == 'gkov'",
        "num_ids": 319
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 1\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n            s += 1\n    return \"{} {}\".format(s, int(s * 2))",
        "test": "assert solution(\"3\") == \"8 2\"",
        "num_ids": 340
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('''eett''') == 'NO'",
        "num_ids": 590
    },
    {
        "number": 4813,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return\n\ndef",
        "test": "assert solution('BANANA') == 'LOSE'",
        "num_ids": 220
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n <= 1 or n > 20:\n        return \"NEITHER\"\n    names = []\n    for _ in range(n):\n        names.append(stdin.readline().strip())\n    if sorted(names) == names:\n        return \"INCREASING\"\n    if sorted(names, reverse=True) == names:\n        return \"DECREASING\"\n    return \"NEITHER\"\n\n\nprint(solution(StringIO('5')))\nprint(solution(StringIO('11')))\nprint(solution(StringIO('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n')))\n",
        "test": "assert solution('6\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n') == 'INCREASING'",
        "num_ids": 666
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution(",
        "num_ids": 1808
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(\" \")]\n    return str(abs(y2 - y1) - abs(x2 - x1))",
        "test": "assert solution('-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 -34 -35 -36 -37 -38 -39 -40 -41 -42 -43 -44 -45 -46 -47 -48 -49 -50 -51 -52 -53 -54 -55 -56 -57 -58 -59 -60 -61 -62 -63 -64 -65 -66 -67 -68 -69 -70 -71 -72 -73 -74 -75 -76 -77 -78 -79 -80 -81 -82 -83 -84 -85 -86 -87 -88 -89 -90 -91 -92 -93 -94 -95 -96 -97 -98 -99 -100 -101 -102 -103 -104 -105 -106 -107 -108 -109 -110 -111 -112 -113 -114 -115 -116 -117 -118 -119 -120 -121 -122 -123 -124 -125 -126 -127 -128 -129 -130 -131 -132 -133 -134 -135 -136 -137 -138 -139 -140 -141 -142 -143 -144 -145 -146 -147 -148 -149 -150 -151 -152 -153 -154 -155 -156 -157 -158 -159 -160 -161 -162 -163 -164 -165 -166 -167 -168 -169 -170 -171 -172 -173 -174 -175 -176 -177 -178 -179 -180 -181 -182 -183 -184 -185 -186 -187 -188 -189 -190 -191 -192 -193 -194 -195 -196 -197 -198 -199 -200 -201 -202 -203 -204 -205 -206 -207 -208 -209 -210 -211 -212 -213 -214 -215 -216 -217 -218 -219 -220 -221 -222 -223 -224 -225 -226 -227 -228 -229 -230 -231 -232 -233 -234 -235 -236 -237 -238 -239 -240 -241 -242 -243 -244 -245 -246 -247 -248 -249 -250 -251 -252 -253 -254 -255 -256 -257 -258 -259 -260 -261 -262 -263 -264 -265 -266 -267 -268 -269 -270 -271 -272 -273 -274 -275 -276 -277 -278 -279 -280 -281 -282 -283 -284 -285 -286 -287 -288 -289 -290 -291 -292 -293 -294 -295 -296 -297 -298 -299 -300 -301 -302 -303 -304 -305 -306 -307 -308 -309 -310 -311 -312 -313 -314 -315 -316 -317 -318 -319 -320 -321 -322 -323 -324 -325 -326 -327 -328 -329 -330 -331 -332 -333 -334 -335 -336 -337 -338 -339 -340 -341 -342 -343 -344 -345 -346 -347 -348 -349 -350 -351 -352 -353 -354 -355 -356 -357 -358 -359 -360 -361 -362 -363 -364 -365 -366 -367 -368 -369 -370 -371 -372 -373 -374 -375 -376 -377 -378 -379 -380 -381 -382 -383 -384 -385 -386 -387 -388 -389 -390 -391 -392 -393 -394 -395 -396 -397 -398 -399 -400 -401 -402 -403 -404 -405 -406 -407 -408 -409 -410 -411 -412 -413 -414 -415 -416 -417 -418 -419 -420 -421 -422 -423 -424 -425 -426 -427 -428 -429 -430 -431 -432 -433 -434 -435 -436 -437 -438 -439 -440 -441 -442 -443 -444 -445 -446 -447 -448 -449 -450 -451 -452 -453 -454 -455 -456 -457 -458 -459 -460 -461 -462 -463 -464 -465 -466 -467 -468 -469 -470 -471 -472 -473 -474 -475 -476 -477 -478 -479 -480 -481 -482 -483 -484 -485 -486 -487 -488 -489 -490 -491 -492 -493 -494 -495 -496 -497 -498 -499 -500 -501 -502 -503 -504 -505 -506 -507 -508 -509 -510 -511 -512 -513 -514 -515 -516 -517 -518 -519 -520 -521 -522 -523 -524 -525 -526 -527 -528 -529 -530 -531 -532 -533 -534 -535 -536 -537 -538 -539 -540 -541 -542 -543 -544 -545 -546 -547 -548 -549 -550 -551 -552 -553 -554 -555 -556 -557 -558 -559 -560 -561 -562 -563 -564 -565 -566 -567 -568 -569 -570 -571 -572 -573 -574 -575 -576 -577 -578 -579 -580 -581 -582 -583 -584 -585 -586 -587 -588 -589 -590 -591 -592 -593 -594 -595 -596 -597 -598 -599 -600 -601 -602 -603 -604 -605 -606 -607 -608 -609 -610 -611 -612 -613 -614 -615 -616 -617 -618 -619 -620 -621 -622 -623 -624 -625 -626 -627 -628 -629 -630 -631 -632 -633 -634 -635 -636 -637 -638 -639 -640 -641 -642 -643 -644 -645 -646 -647 -648 -649 -650 -651 -652 -653 -654 -655 -656 -657 -658 -659 -660 -661 -662 -663 -664 -665 -666 -667 -668 -669 -670 -671 -672 -673 -674 -675 -676 -677 -678 -679 -680 -681 -682 -683 -684 -685 -686 -687 -688 -689 -690 -691 -692 -693 -694 -695 -696 -697 -698 -699 -700 -701 -702 -703 -704 -705 -706 -707 -708 -709 -710 -711 -712 -713 -714 -715 -716 -717 -718 -719 -720 -721 -722 -723 -724 -725 -726 -727 -728 -729 -730 -731 -732 -733 -734 -735 -736 -737 -738 -739 -740 -741 -742 -743 -744 -745 -746 -747 -748 -749 -750 -751 -752 -753 -754 -755 -756 -757 -758 -759 -760 -761 -762 -763 -764 -765 -766 -767 -768 -769 -770 -771 -772 -773 -774 -775 -776 -777 -778 -779 -780 -781 -782 -783 -784 -785 -786 -787 -788 -789 -790",
        "num_ids": 3516
    },
    {
        "number": 4817,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    print(int(x+1))",
        "test": "assert solution(1) == 966",
        "num_ids": 223
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    tasks = [int(x) for x in lines[1].split()]\n    quiet_intervals = [int(x) for x in lines[2].split()]\n    return str(get_max_tasks(n, m, tasks, quiet_intervals))\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 593
    },
    {
        "number": 4819,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(len({a % 42 for a in map(int, stdin.split())}))\n\nassert(solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\")\nassert(solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\")\nassert(solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"10\")\n\"\"\"\n",
        "test": "assert solution('''1",
        "num_ids": 373
    },
    {
        "number": 4820,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You have a collection of $N$ random bit strings, each of which is $1000$ bits long. You know that no two of them are identical, and no two of them are more than $b$ bits long. You know that it is possible to compress them into files of size at most $b$ bits long.\n\n    Your friend tells you that every file in your precious collection of random bit strings after compression would be at most $b$ bits long! Naturally, you find this a bit hard to believe, so you want to determine whether it is even theoretically possible for this to be true.\n\n    Your collection of random bit strings consists of $N$ files, no two of which are identical, and each of them is exactly $1000$ bits long.\n\n    Inp: 13 3\n    Out: yes\n    '''\n    n, b = map(int, stdin.split())\n    n2 = 1\n    for i in range(1, n + 1):\n        n2 *= i\n    return 'yes' if n2 <= (1 << b) else 'no'\n\n\nprint(solution('13 3'))\nprint(solution('1 0'))\n",
        "test": "assert solution(\"1 0\") == \"yes\"",
        "num_ids": 549
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    deck = stdin.strip()\n    P = deck.count('P')\n    K = deck.count('K')\n    H = deck.count('H')\n    T = deck.count('T')\n    return f'{P} {K} {H} {T}'\n\nassert(solution('P01K02H03H04')) == '12 12 11 13'\nassert(solution('H02H10P11H02')) == 'GRESKA'\n",
        "test": "assert solution
        "num_ids": 2404
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n",
        "test": "assert solution
        "num_ids": 1468
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    ranks = \"23456789TJQKA\"\n    suits = \"CDHS\"\n    card_strings = stdin.split()\n    cards = [r + s for r in ranks for s in suits]\n    card_values = {c: i for i, c in enumerate(cards, start=2)}\n    ranks_values = {r: i for i, r in enumerate(ranks, start=2)}\n    strength = 0\n    for card in card_strings:\n        first_rank = card_values[card[0]]\n        second_rank = card_values[card[1]]\n        if first_rank > second_rank:\n            strength += second_rank\n        elif second_rank > first_rank:\n            strength += first_rank\n    return strength",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 2267
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('2 2') == '0'",
        "num_ids": 357
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert (solution('''All your base are belong to us.\nSample Input 2:\nWhat's the Frequency, Kenneth?\nSample Output 2:\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?''') == '''\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?'''\n'''\ndef",
        "test": "assert solution('All your base are belong to us.\\n') == \\",
        "num_ids": 484
    },
    {
        "number": 4826,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number == 0:\n        return \"Bob\"\n    else:\n        return \"Alice\"\nprint(solution(\"2\"))\n",
        "test": "assert solution(\"1\") == \"Alice\"",
        "num_ids": 383
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    num = 0\n    for word in words:\n        num += len(word)\n    print(num)\n    return \"\"",
        "test": "assert solution('''5",
        "num_ids": 419
    },
    {
        "number": 4828,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef",
        "test": "assert solution('ababab') == 2",
        "num_ids": 80
    },
    {
        "number": 4829,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    tines_left, tines_right = list(map(int, stdin.split()))\n    if tines_left == tines_right:\n        return 'Even %d' % tines_left\n    if tines_left > tines_right:\n        return 'Odd %d' % tines_right\n    return 'Not a moose'",
        "test": "assert solution('1 2') == 'Not a moose'",
        "num_ids": 1849
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    assert 1 <= n <= 1000\n    s = stdin.readline().strip()\n    assert 1 <= len(s) <= 1000\n    assert all(c.lower() in 'abcdefghijklmnopqrstuvwxyz' for c in s)\n    assert all(s.count(c) <= 1 for c in s)\n    \n    nums = []\n    for i in range(len(s)):\n        nums.append(ord(s[i]) - ord('a') + 1)\n    nums.sort()\n    \n    result = 0\n    last = 0\n    for i in range(len(nums)):\n        if nums[i] == last:\n            result += 1\n            last = nums[i]\n        elif i == len(nums) - 1:\n            result += 1\n    return str(result)\n\nprint(solution(open('data.txt')))\n",
        "test": "assert solution(",
        "num_ids": 1923
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin[0]\n    return \"\".join(wendy_frames(letter))\n\ndef",
        "test": "assert solution('ABCD') == '..#...#...#.*..\\n#.A.#.#.#.*.*.\\n#.D.#.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...#.*..'",
        "num_ids": 357
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    return '{0:.6f}'.format((3.141592653589793 - r ** 2) * 2)\n\nprint(solution(stdin))\n",
        "test": "assert solution('1\\n1') == '3.141593'",
        "num_ids": 1916
    },
    {
        "number": 4833,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = [int(x) for x in stdin.readline().split()]\n    s = sum(k)\n    return str(s)\n\nassert(solution('3\\n1 -2 3\\n') == '2')\nassert(solution('5\\n129 44 394 253 147\\n') == '0')",
        "test": "assert solution('-2 -3 -4 -5') == '-15'",
        "num_ids": 317
    },
    {
        "number": 4834,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 336
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    t, n, m = [int(x) for x in stdin.split(\" \")]\n    print(f\"t={t}, n={n}, m={m}\")\n    data = [list(line) for line in stdin.strip().splitlines()]\n    print(f\"data={data}\")\n    total_safes = 0\n    for i in range(n):\n        for j in range(m):\n            print(f\"{i} {j}\")\n            if data[i][j] == \"1\":\n                total_safes += 1\n    print(f\"total_safes={total_safes}\")\n    if total_safes == 0:\n        return \"NOT POSSIBLE\"\n    print(f\"total_safes={total_safes}\")\n    return total_safes\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 2093
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function returns the max amount of fruits that can be eaten\n    by Mislav\n    \"\"\"\n    # Write your code here\n    n, c = map(int, stdin.readline().split())\n    fruits = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        j = i\n        w = fruits[i]\n        while j < n and w + fruits[j] <= c:\n            w += fruits[j]\n            j += 1\n        res = max(res, j - i)\n    return str(res)\n",
        "test": "assert solution(\"10\\n22 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 1 15 1 16 1 17 1 18 1 19 1 20 1 21 1 22\") == \"5\"",
        "num_ids": 671
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    R = stdin[0]\n    L = stdin[1]\n    N = stdin[2]\n    L = stdin[3: 3 + int(N)]\n    R = stdin[3 + int(N):]\n    if len(L)!= len(R):\n        return '0'\n    else:\n        best = [0] * (len(L) + 1)\n        for i in range(1, len(L) + 1):\n            best[i] = best[i - 1] + 1\n            if L[i - 1] == R[i - 1]:\n                best[i] = best[i]\n            else:\n                if L[i - 1] == 'P' and R[i - 1] == 'S':\n                    best[i] = best[i] + 1\n        return str(max(best))\n\n\nprint(solution(input()))\n",
        "test": "assert solution('''5",
        "num_ids": 884
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    data = [int(stdin.readline().strip()) for _ in range(N)]\n\n    count = 0\n    total = 0\n\n    for i in range(N):\n        if data[i] > 1:\n            count += 1\n        elif data[i] == 1:\n            if count == 0:\n                total += 1\n            else:\n                total += (count * (count + 1)) // 2\n            count = 0\n\n    return str(total)\n\nprint(solution(stdin))\n",
        "test": "assert solution('''2",
        "num_ids": 334
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.split()\n    n = int(_[0])\n    c = [int(_) for _ in stdin.split()[1:]]\n    \n    if n <= 1:\n        return \"impossible\"\n    \n    if n == 2:\n        return \"0.5\"\n    \n    # All balloons are in the same capacity\n    s = c[0]\n    \n    if s == 1:\n        return \"0\"\n    \n    # All balloons have the same capacity\n    if len(c) == 1:\n        return \"1\"\n    \n    if n == 2:\n        return \"0.5\"\n    \n    if len(c) == 2:\n        return \"0\"\n    \n    # Each canister is in fact a balloon of capacity s - 1, the largest possible capacity\n    return \"0.5\"\n\nimport unittest\n\nclass TestConvert(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''2\n2 2'''), \"0.5\")\n        self.assertEqual(solution('''5\n2 2 2 2 2'''), \"impossible\")",
        "test": "assert solution(\"2 2\") == \"impossible\"",
        "num_ids": 2086
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 4 1 4\n1 6 1 6''')\n    'Emma'\n    >>> solution('''1 8 1 8\n1 10 2 5''')\n    'Tie'\n    \"\"\"\n    # Read the input\n    g1, g2 = map(int, stdin.splitlines()[0].split())\n    e1, e2 = map(int, stdin.splitlines()[1].split())\n\n    # Calculate the probability\n    p1 = 1 / (g1 + g2 + 2)\n    p2 = 1 / (e1 + e2 + 2)\n\n    if p1 > p2:\n        return 'Emma'\n    elif p1 < p2:\n        return 'Tie'\n    else:\n        return 'Tie'\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 585
    },
    {
        "number": 4841,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = [list(stdin.readline().strip()) for _ in range(n)]\n    for i, word in enumerate(words):\n        if word[0].isnumeric():\n            words[i] = int(word)\n        else:\n            words[i] ='mumble'\n    if all(word!='mumble' for word in words):\n        return'makes sense'\n    else:\n        return'something is fishy'",
        "test": "assert solution('mumble 5') =='something is fishy'",
        "num_ids": 513
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # The idea is to use the difference sequence algorithm to solve the problem.\n    # For a given polynomial, we iterate through the sequence of differences and pick out the minima.\n    # This will lead to a sequence of minima at regular spacing.\n    # For each of the minima we compute the polynomial with the minima as its polynomial coefficients.\n    # And then check to see if the computed polynomial has a different degree than the original polynomial.\n    # If it has a degree different from the original, we have found the minima and the minima degree.\n    n, *data = [int(x) for x in stdin.split()]\n    if n == 0:\n        return '0 0'\n    n += 1\n    x, *poly = [int(x) for x in data]\n    d = len(poly)\n    diffs = [0] * (n - 1)\n    for i in range(n - 1):\n        diffs[i] = poly[i] - poly[i + 1]\n    minima = min((x, y) for x, y in enumerate(diffs) if x!= 0)\n    minima_degree = len(poly) - minima[1]\n    if minima_degree!= d:\n        return '{} {}'.format(minima_degree, minima[0])\n    return '{} {}'.format(d, poly[n - 1])\n\n\"\"\"",
        "test": "assert solution('-20 4 -14 -9 -25 -48 -5 -9 -4 -1 -2 -5 -8 -7 -10 -20 -2 -14 -18 -16 -11 -13 -12 -14 -16 -18 -17 -15 -7 -8 -10 -9 -15 -11 -13 -12 -18 -1 -18 -20 -3 -18 -18 -4 -1 -3 -3 -1 -4 -8 -6 -10 -14 -8 -12 -12 -10 -8 -9 -12 -9 -10 -6 -14 -5 -14 -5 -13 -12 -9 -7 -10 -9 -11 -15 -14 -15 -11 -12 -14 -18 -14 -10 -14 -13 -7 -14 -9 -14 -10 -14 -7 -1 -2 -8 -14 -7 -12 -1 -12 -10 -11 -13 -10 -11 -15 -16 -11 -14 -12 -18 -14 -15 -13 -14 -7 -14 -10 -1 -13 -7 -3 -1 -3 -1 -4 -1 -5 -1 -4 -1 -3 -8 -3 -2 -4 -5 -1 -6 -1 -7 -8 -5 -8 -3 -7 -9 -8 -6 -7 -5 -8 -3 -10 -8 -9 -9 -3 -10 -6 -5 -3 -1 -8 -4 -1 -8 -10 -3 -9 -8 -7 -9 -2 -1 -2 -4 -3 -2 -8 -5 -7 -6 -11 -9 -10 -6 -13 -7 -9 -14 -9 -10 -5 -3 -1 -7 -6 -6 -7 -9 -10 -14 -10 -13 -9 -6 -2 -5 -11 -11 -15 -13 -15 -11 -6 -15 -12 -15 -5 -7 -15 -10 -11 -11 -10 -14 -10 -10 -14 -9 -11 -7 -10 -11 -5 -7 -4 -8 -4 -10 -3 -9 -9 -9 -5 -2 -9 -8 -3 -8 -2 -5 -6 -5 -3 -1 -8 -7 -10 -8 -6 -14 -10 -5 -14 -7 -8 -3 -12 -6 -10 -7 -12 -9 -13 -13 -6 -18 -14 -7 -18 -5 -12 -15 -8 -9 -11 -7 -14 -8 -13 -13 -11 -9 -9 -10 -9 -12 -15 -18 -15 -13 -9 -12 -7 -14 -10 -7 -10 -11 -1 -10 -8 -15 -11 -15 -7 -11 -15 -13 -9 -8 -7 -11 -15 -18 -15 -10 -12 -10 -14 -9 -11 -6 -8 -11 -11 -15 -18 -15 -13 -9 -9 -10 -8 -11 -15 -18 -15 -10 -9 -13 -9 -10 -15 -9 -15 -10 -10 -12 -13 -15 -18 -15 -13 -9 -12 -10 -10 -14 -10 -15 -14 -15 -11 -12 -15 -10 -9 -10 -14 -10 -10 -9 -8 -12 -18 -15 -15 -13 -11 -10 -15 -12 -15 -8 -13 -11 -8 -10 -15 -12 -11 -12 -15 -14 -14 -10 -8 -12 -7 -11 -12 -10 -15 -10 -12 -8 -12 -11 -11 -15 -14 -14 -11 -7 -8 -10 -15 -10 -10 -13 -10 -10 -10 -10 -10 -15 -14 -14 -10 -8 -10 -6 -15 -7 -15 -13 -11 -13 -13 -9 -8 -10 -15 -14 -14 -11 -9 -9 -11 -9 -15 -12 -10 -11 -9 -14 -12 -8 -12 -9 -14 -9 -10 -11 -9 -10 -7 -12 -18 -15 -15 -13 -11 -12 -10 -15 -15 -10 -10 -11 -15 -15 -15 -12 -9 -12 -10 -15 -11 -8 -15 -11 -14 -10 -12 -11 -15 -12 -11 -13 -10 -11 -10 -11 -10 -10 -15 -14 -14 -10 -8 -10 -15 -11 -11 -15 -14 -9 -10 -14 -10 -9 -12 -10 -9 -13 -10 -15 -8 -15 -15 -10 -11 -10 -11 -10 -9 -15 -15 -14 -8 -8 -15 -8 -13 -13 -13 -9 -11 -11 -14 -10 -14 -10 -9 -8 -12 -8 -12 -9 -15 -8 -11 -10 -9 -15 -11 -15 -10 -10 -15 -10 -10 -14 -10 -11 -14 -10 -9 -9 -10 -8 -15 -15 -15 -13 -9 -10 -14 -10 -9 -10 -13 -10 -10 -10 -9 -11 -14 -11 -10 -15 -10 -11 -10 -10 -14 -14 -15 -10 -8 -14 -13 -10 -10 -15 -15 -11 -9 -15 -15 -12 -8 -13 -12 -10 -9 -10 -13 -10 -12 -12 -10 -15 -15 -10 -12 -11 -10 -9 -10 -15 -10 -14 -10 -13 -10 -15 -9 -11 -11 -",
        "num_ids": 2151
    },
    {
        "number": 4843,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1\\n') == 'INCORRECT'",
        "num_ids": 471
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [map(int, stdin.readline().strip().split()) for _ in range(n)]\n    m = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = a[i][j] & a[j][i]\n    res = []\n    for i in range(n):\n        for j in range(n):\n            res.append(m[i][j])\n    return''.join(map(str, res))\n\nprint(solution(None))\nassert (solution(None) == '1 1 1 1 1 1')\n",
        "test": "assert solution('10\\n0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 1 0 1 0 0 0 0 0 1 0 1 1 0 1 1 0 0 1 1 1 1\\n1 1 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 0 1 1 1 1\\n1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids": 2050
    },
    {
        "number": 4845,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    '''Determine the day of the week on a given date in 2009\n    https://www.codewars.com/kata/determine-the-day-of-the-week-on-a-given-date-in-2009\n\n    The input consists of two integers $D$ (day) and $M$ (month) separated by a space. The numbers will be a valid date in $2009$.\n\n    The output should be one of the words \u201cMonday\u201d, \u201cTuesday\u201d, \u201cWednesday\u201d, \u201cThursday\u201d, \u201cFriday\u201d, \u201cSaturday\u201d or \u201cSunday\u201d.\n    '''\n\n    from datetime import date, datetime\n    d, m = map(int, stdin.split())\n\n    d = date(2009, m, d)\n    return '%s' % d.strftime('%A')\n",
        "test": "assert solution(\"1 1\") == \"Thursday\"",
        "num_ids": 564
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.hackerrank.com/challenges/minimum-time-to-bob-out/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup\n    \"\"\"\n    return",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 375
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine the area and number of trees belonging to Ante\n\n    Args:\n        stdin (str): input in stdin\n\n    Returns:\n        str: output in stdout\n    \"\"\"\n    pass\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 702
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(reduce(lambda x, y: int(x) if (x**2)%(int(y)**2) else int(y), stdin))\n    \n\nimport sys\n\nprint(solution(sys.stdin.readline().strip()))\n",
        "test": "assert solution(\"30\") == \"7\"",
        "num_ids": 262
    },
    {
        "number": 4849,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return \"HE GOT AWAY!\"\n-----BRIEF COMPREHENSION-----\n\ndef",
        "test": "assert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!\\n'",
        "num_ids": 444
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    l = []\n    for i in range(N):\n        A, B, C = map(int, stdin.readline().split())\n        l.append((C*C-A*A-B*B)/2)\n    return str(max(l))\n\nassert(solution(open(\"test_case1.txt\"))) == \"6.843530573929037\"\nassert(solution(open(\"test_case2.txt\"))) == \"7.110158785425288\"\n",
        "test": "assert solution(stdin) == \"\"\"[Hint: Not possible]\"\"\"",
        "num_ids": 513
    },
    {
        "number": 4851,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while not n % 3:\n        n = n // 3\n    while not n % 2:\n        n = n // 2\n    return str(n)",
        "test": "assert solution('77') == '77'",
        "num_ids": 221
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(c) for c in stdin.strip().split('+') if c.isdigit()]\n    result = digits[0]\n\n    for i in range(1, len(digits)):\n        if digits[i - 1]!= digits[i]:\n            result += digits[i]\n\n    return str(result)",
        "test": "assert solution('1+2+3+4+5+6+7+8+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+9+",
        "num_ids": 1873
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    coefficients = stdin.readline().strip().split()\n    a = [int(a) for a in coefficients]\n    return''.join([str(a[i]) for i in range(n + 1)])\n\nprint(solution(stdin))\n\"\"\"\n\n\ndef",
        "test": "assert solution('0 0 0 0 0') == '0'",
        "num_ids": 412
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline().rstrip()\n    N, C = list(map(int, stdin.readline().rstrip().split()))\n    message = list(map(int, stdin.readline().rstrip().split()))\n    sorted_message = sorted(message)\n    return \" \".join(map(str, sorted_message))",
        "test": "assert solution('9 4\\n1 3 4 5 1 2 2 1 3 1') == '1 1 1 4 4 4 2 2 2'",
        "num_ids": 404
    },
    {
        "number": 4855,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, i = [int(s) for s in stdin.strip().split(' ')]\n    return str(i // a)\n\nprint(solution(input()))",
        "test": "assert solution('''1 100",
        "num_ids": 170
    },
    {
        "number": 4856,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    if a > b:\n        return str(b)\n    else:\n        return str(a)",
        "test": "assert solution(",
        "num_ids": 2026
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    letter_weights: Dict[str, int] = {\n        'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10,\n        'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19,\n        't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26,'': 27,\n    }\n\n    def get_weight(word: str) -> int:\n        return sum([letter_weights[char] for char in word])\n\n    stdin = stdin.split()\n    l = int(stdin[0])\n    w = int(stdin[1])\n    min_word_length = get_weight(stdin[0])\n    if l <= 0 or l > 40 or w <= 0 or w > 1000:\n        return \"impossible\"\n    result = \"\"\n    for i in range(1, l + 1):\n        if get_weight(stdin[0][:i]) == w:\n            result = stdin[0][:i]\n            break\n    return result",
        "test": "assert solution(\"7 96\") == \"contest\"",
        "num_ids": 511
    },
    {
        "number": 4858,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 1295
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Split input\n    stdin = stdin.split()\n    # Check for invalid input\n    if len(stdin)!= 4 or not all(\n        stdin[i] in string.digits for i in range(len(stdin))\n    ):\n        return \"impossible\"\n    # Process input\n    b, d, c, l = stdin\n    b, d, c, l = int(b), int(d), int(c), int(l)\n    # Return output\n    return \"\\n\".join(\n        \" \".join(map(str, [b, d, c]))\n        for b in range(0, b + 1)\n        for d in range(0, d + 1)\n        for c in range(0, c + 1)\n        if b * d * c <= l\n    )\n",
        "test": "assert solution('1 2 2 2') == 'impossible'",
        "num_ids": 764
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(s) for s in stdin.split(\"\\n\")]\n\n    for i in range(1, n + 1):\n        if i not in numbers:\n            print(i)\n    return \"Good job\"\n\n\ndef",
        "test": "assert solution('4\\n1\\n2\\n3\\n5\\n7\\n9') == '1\\n3\\n5\\n7\\n9'",
        "num_ids": 341
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n    t = n * (math.log(n) + math.log(1 + 1 / math.sqrt(2))) / (p * math.pow(10, 9))\n    t = math.ceil(t)\n    c = t / v\n    return f\"{t:.6f} {c:.6f}\"",
        "test": "assert solution('10 8.9 10000000 272.1') == '228888.84922039 22.8241267142415'",
        "num_ids": 478
    },
    {
        "number": 4862,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)",
        "test": "assert solution(\"\") == \"0\"",
        "num_ids": 1992
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    correct = n * ['']\n    correct[0] = 'A' * n\n    correct[1] = 'A' * n\n    correct[2] = 'A' * n\n    correct[3] = 'A' * n\n    for i in range(4, n + 1):\n        correct[i] = 'B' * i\n    return str(sum(correct.count(i) for i in ['A', 'B']))",
        "test": "assert stdin == '4\\nA\\nA\\nA\\nA\\n'",
        "num_ids": 265
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert(solution('') == '')\nassert(solution('2 3 1 2') == '..xx..')\nassert(solution('3 3 1 2') == '..xx..')\nassert(solution('3 3 1 2 3') == '..xx..')\nassert(solution('3 3 1 2 3 3') == '..xx..')\nassert(solution('3 3 1 2 3 3 3') == '..xx..')\nassert(solution('3 3 1 2 3 3 3 3') == '..xx..')\nassert(solution('3 3 1 2 3 3 3 3 3 3') == '..xx..')\nassert(solution('3 3 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3",
        "test": "assert solution(\"3 3 1 2\") == \"\"\".xx..",
        "num_ids": 2150
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        F, D, H, M = stdin.split()\n        if F == 'F':\n            H, M = add_minutes(H, M, D)\n            H = H % 24\n        else:\n            H, M = sub_minutes(H, M, D)\n        print(f'{H} {M}')\n\ndef",
        "test": "assert solution('B 60 23 32') == '13 22'",
        "num_ids": 1973
    },
    {
        "number": 4866,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split()\n    if date[0] == \"OCT\" and int(date[1]) == 31:\n        return \"yup\"\n    if date[0] == \"DEC\" and int(date[1]) == 25:\n        return \"yup\"\n    return \"nope\"",
        "test": "assert solution(\"OCT 31\") == \"yup\"",
        "num_ids": 258
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(\n    \"\"\"\\\n4 4\n2 2 2 2\nhoni\noker\nnera\nirak\n\n2 2 2 2\n.#.#.#.#\n.#.#.#.#\n.honi#.\n.#oker.#\n.nera#.\n.#irak.#\n.\n.\n.\n\"\"\")\n",
        "test": "assert solution(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n",
        "num_ids": 3708
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the output from \u201cHelp Me With The Game\u201d, find the corresponding input.\n    \"\"\"\n    white_turn = True\n    white_move_history = []\n    black_move_history = []\n    white_move_history.append(stdin)\n    for i in stdin:\n        if i.startswith(\".r\"):\n            white_move_history.append(i)\n            white_turn = False\n        elif i.startswith(\".b\"):\n            black_move_history.append(i)\n            white_turn = True\n    if white_turn:\n        return \"\\n\".join(white_move_history)\n    else:\n        return \"\\n\".join(black_move_history)",
        "test": "assert solution('Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+'",
        "num_ids": 3396
    },
    {
        "number": 4869,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, N = [int(x) for x in stdin.split()]\n    if A >= 0 and A <= 1000 and N >= 0 and N <= 1000:\n        if A ** 2 >= N:\n            return \"Diablo is happy!\"\n        else:\n            return \"Need more materials!\"\n    else:\n        return \"Enter the valid input!\"\n\nprint(solution(\"1.000000 4.000000\"))\nprint(solution(\"2.000000 6.000000\"))\nprint(solution(\"1.000000 1000.000000\"))\nprint(solution(\"0.000000 100.000000\"))\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == 'Need more materials!'",
        "num_ids": 378
    },
    {
        "number": 4870,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = list(map(int, stdin.split()))\n    # Write your code here\n    return \"use the stairs\"",
        "test": "assert solution('20 1 1002 1 1') == 'use the stairs'",
        "num_ids": 458
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n = int(stdin.readline())\n    scores = [int(stdin.readline()) for _ in range(n)]\n    scores.sort()\n    avg_group_score = sum(scores[i] * ((4.0 / 5.0) ** i) for i in range(n)) / 5.0\n    print(avg_group_score)\n    return ''\n\nsolution('sample.txt')\n'''\n",
        "test": "assert solution('''3",
        "num_ids": 467
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(stdin) == 4",
        "num_ids": 1521
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "test": "assert solution(\"10 10\\nT#GTG#\\n..TGG#\\n..#GTG#\\n#GTG.G#\\n#G..GTG#\\n#TG.GTG#\\n#TG..GTG#\\n#######\\n\") == \"3\"",
        "num_ids": 749
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    grid = [list(stdin.split()) for i in range(m)]\n    visited = [[False for j in range(n)] for i in range(m)]\n    row = [0] * n\n    col = [0] * m\n    result = 0\n    for i in range(m):\n        for j in range(n):\n            if visited[i][j]:\n                continue\n            result += 1\n            q = deque([(i, j)])\n            while len(q) > 0:\n                r, c = q.popleft()\n                visited[r][c] = True\n                if r < m - 1:\n                    if grid[r][c] == grid[r + 1][c]:\n                        row[c] += 1\n                        q.append((r + 1, c))\n                if c < n - 1:\n                    if grid[r][c] == grid[r][c + 1]:\n                        col[r] += 1\n                        q.append((r, c + 1))\n    return str(result)",
        "test": "assert solution('________$______$___$______$$______$___$______') == '$____$$____$____$____$____$____$____$____$____'",
        "num_ids": 417
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(input()))\n",
        "test": "assert solution('''",
        "num_ids": 319
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split(\"\\n\")]\n    restaurants = []\n    for line in lines:\n        restaurants.append(Restaurant(int(line.split(\" \")[0]), line.split(\" \")[1:]))\n    for restaurant in restaurants:\n        for item in restaurant.items:\n            if item[1] == \"pea soup\" and item[0] == \"pancakes\":\n                print(restaurant.name)\n                return\n    print(\"Anywhere is fine I guess\")\n\nsolution(stdin)\n",
        "test": "assert stdin == '2\\n2\\nq\\np\\toots\\nsa\\vlad\\ntoes\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\n8\\nlush\\nlover\\nq\\np\\toots\\nsalad\\",
        "num_ids": 1875
    },
    {
        "number": 4877,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = [int(x) for x in stdin.split()]\n    return str(int((h - b) / a))",
        "test": "assert solution('''5 0 15''') == '3'",
        "num_ids": 1957
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    r1, s = [int(x) for x in stdin.split(\" \")]\n    r2 = (r1 + s) / 2\n    return str(r2)",
        "test": "assert solution(",
        "num_ids": 191
    },
    {
        "number": 4879,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a: str = stdin.split()[0]\n    b: str = stdin.split()[1]\n    c: str = stdin.split()[2]\n    if a == b == c:\n        return \"Yes\"\n    elif a == b and a!= c:\n        return \"Yes\"\n    elif a == c and a!= b:\n        return \"Yes\"\n    elif b == c and b!= a:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"South South East\") == \"Yes\"",
        "num_ids": 408
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    key = stdin[m + 1:]\n    return stdin[:m]\n\n\nassert solution(\"5 16\\ngave\\nagain\") == \"marywasnosyagain\"\nassert solution(\"10 10\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"4 26\\ngave\\nagain\") == \"marywasnosyagain\"\nassert solution(\"6 10\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"6 11\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"6 28\\ngave\\nagain\") == \"marywasnosyagain\"\nassert solution(\"5 26\\ngave\\nagain\") == \"marywasnosyagain\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\npqrst\\nsxyu\\nvwxz\") == \"pqrstuvwxyz\"\nassert solution(\"5 26\\ngave\\naab\\ncdef\\nghij\\nklmno\\np",
        "test": "assert solution('abcd') == 'bacd'",
        "num_ids": 2162
    },
    {
        "number": 4881,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(solution(\"1\"))\n",
        "test": "assert solution(4) == \"Even\"",
        "num_ids": 229
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    magnitude = 0\n    for i in range(int(stdin.readline().strip())):\n        magnitude = max(magnitude, len(str(int(stdin.readline().strip()))))\n    return str(magnitude)",
        "test": "assert solution('\\n'.join([",
        "num_ids": 2006
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return...",
        "test": "assert solution(",
        "num_ids": 359
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    p = int(stdin[1])\n    ans = 0\n    for x in range(n):\n        stdin[x] = stdin[x].strip()\n        stdin[x] = stdin[x].split(' ')\n        if stdin[x][0] == 'carrots?':\n            ans += int(stdin[x][1])\n    return str(ans)\n\nprint(solution(\"2 1\")) # \"1\"\nprint(solution(\"3 1\")) # \"3\"\nprint(solution(\"1 1\")) # \"1\"\nprint(solution(\"2 3\")) # \"2\"\nprint(solution(\"1 2\")) # \"1\"\nprint(solution(\"3 3\")) # \"0\"\nprint(solution(\"4 2\")) # \"0\"\nprint(solution(\"3 5\")) # \"1\"\nprint(solution(\"10 1\")) # \"2\"\nprint(solution(\"1 3\")) # \"0\"\nprint(solution(\"10 10\")) # \"0\"\nprint(solution(\"10 11\")) # \"0\"\nprint(solution(\"10 12\")) # \"0\"\nprint(solution(\"10 13\")) # \"0\"\nprint(solution(\"10 14\")) # \"0\"\nprint(solution(\"10 15\")) # \"0\"\nprint(solution(\"10 16\")) # \"0\"\nprint(solution(\"10 17\")) # \"0\"\nprint(solution(\"10 18\")) # \"0\"\nprint(solution(\"10 19\")) # \"0\"\nprint(solution(\"10 20\")) # \"0\"\nprint(solution(\"10 21\")) # \"0\"\nprint(solution(\"10 22\")) # \"0\"\nprint(solution(\"10 23\")) # \"0\"\nprint(solution(\"10 24\")) # \"0\"\nprint(solution(\"10 25\")) # \"0\"\nprint(solution(\"10 26\")) # \"0\"\nprint(solution(\"10 27\")) # \"0\"\nprint(solution(\"10 28\")) # \"0\"\nprint(solution(\"10 29\")) # \"0\"\nprint(solution(\"10 30\")) # \"0\"\nprint(solution(\"10 31\")) # \"0\"\nprint(solution(\"10 32\")) # \"0\"\nprint(solution(\"10 33\")) # \"0\"\nprint(solution(\"10 34\")) # \"0\"\nprint(solution(\"10 35\")) # \"0\"\nprint(solution(\"10 36\")) # \"0\"\nprint(solution(\"10 37\")) # \"0\"\nprint(solution(\"10 38\")) # \"0\"\nprint(solution(\"10 39\")) # \"0\"\nprint(solution(\"10 40\")) # \"0\"\nprint(solution(\"10 41\")) # \"0\"\nprint(solution(\"10 42\")) # \"0\"\nprint(solution(\"10 43\")) # \"0\"\nprint(solution(\"10 44\")) # \"0\"\nprint(solution(\"10 45\")) # \"0\"\nprint(solution(\"10 46\")) # \"0\"\nprint(solution(\"10 47\")) # \"0\"\nprint(solution(\"10 48\")) # \"0\"\nprint(solution(\"10 49\")) # \"0\"\nprint(solution(\"10 50\")) # \"0\"\nprint(solution(\"10 51\")) # \"0\"\nprint(solution(\"10 52\")) # \"0\"\nprint(solution(\"10 53\")) # \"0\"\nprint(solution(\"10 54\")) # \"0\"\nprint(solution(\"10 55\")) # \"0\"\nprint(solution(\"10 56\")) # \"0\"\nprint(solution(\"10 57\")) # \"0\"\nprint(solution(\"10 58\")) # \"0\"\nprint(solution(\"10 59\")) # \"0\"\nprint(solution(\"10 60\")) # \"0\"\nprint(solution(\"10 61\")) # \"0\"\nprint(solution(\"10 62\")) # \"0\"\nprint(solution(\"10 63\")) # \"0\"\nprint(solution(\"10 64\")) # \"0\"\nprint(solution(\"10 65\")) # \"0\"\nprint(solution(\"10 66\")) # \"0\"\nprint(solution(\"10 67\")) # \"0\"\nprint(solution(\"10 68\")) # \"0\"\nprint(solution(\"10 69\")) # \"0\"\nprint(solution(\"10 70\")) # \"0\"\nprint(solution(\"10 71\")) # \"0\"\nprint(solution(\"10 72\")) # \"0\"\nprint(solution(\"10 73\")) # \"0\"\nprint(solution(\"10 74\")) # \"0\"\nprint(solution(\"10 75\")) # \"0\"\nprint(solution(\"10 76\")) # \"0\"\nprint(solution(\"10 77\")) # \"0\"\nprint(solution(\"10 78\")) # \"0\"\nprint(solution(\"10 79\")) # \"0\"\nprint(solution(\"10 80\")) # \"0\"\nprint(solution(\"10 81\")) # \"0\"\nprint(solution(\"10 82\")) # \"0\"\nprint(solution(\"10 83\")) # \"0\"\nprint(solution(\"10 84\")) # \"0\"\nprint(solution(\"10 85\")) # \"0\"\nprint(solution(\"10 86\")) # \"0\"\nprint(solution(\"10 87\")) # \"0\"\nprint(solution(\"10 88\")) # \"0\"\nprint(solution(\"10 89\")) # \"0\"\nprint(solution(\"10 90\")) # \"0\"\nprint(solution(\"10 91\")) # \"0\"\nprint(solution(\"10 92\")) # \"0\"\nprint(solution(\"10 93\")) # \"0\"\nprint(solution(\"10 94\")) # \"0\"\nprint(solution(\"10 95\")) # \"0\"\nprint(solution(\"10 96\")) # \"0\"\nprint(solution(\"10 97\")) # \"0\"\nprint(solution(\"10 98\")) # \"0\"\nprint(solution(\"10 99\")) # \"0\"\nprint(solution(\"10 100\")) # \"0\"\nprint(solution(\"10 101\")) # \"0\"\nprint(solution(\"10 102\")) # \"0\"\nprint(solution(\"10 103\")) # \"0\"\nprint(solution(\"10 104\")) # \"0\"\nprint(solution(\"10 105\")) # \"0\"\nprint(solution(\"10 106\")) # \"0\"\nprint(solution(\"10 107\")) # \"0\"\nprint(solution(\"10 108\")) # \"0\"\nprint(solution(\"10 109\")) # \"0\"\nprint(solution(\"10 110\")) # \"0\"\nprint(solution(\"10 111\")) # \"0\"\nprint(solution(\"10 112\")) # \"0\"\nprint(solution(\"10 113\")) # \"0\"\nprint(solution(\"10 114\")) # \"0\"\nprint(solution(\"10 115\")) # \"0\"\nprint(solution(\"10 116\")) # \"0\"\nprint(solution(\"10 117\")) # \"0\"\nprint(solution(\"10 118\")) # \"0\"\nprint(solution(\"10 119\")) # \"0\"\nprint(solution(\"10 120\")) # \"0\"\nprint(solution(\"10 121\")) # \"0\"\nprint(solution(\"10 122\")) # \"0\"\nprint(solution(\"10 123\")) # \"",
        "test": "assert solution('1 2 4 3') == '6'",
        "num_ids": 3650
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    white_count = 0\n    black_count = 0\n    row = 0\n    col = 0\n    for row, line in enumerate(stdin.splitlines()):\n        for col, cell in enumerate(line):\n            if cell == '+':\n                if white_count == 0:\n                    white_count += 1\n                    continue\n                elif black_count == 0:\n                    black_count += 1\n                    continue\n                else:\n                    print('White:', end='')\n                    print(','.join(pos_to_print(white_count, row + 1, col + 1)))\n                    white_count = 0\n                    print('Black:', end='')\n                    print(','.join(pos_to_print(black_count, row + 1, col + 1)))\n                    black_count = 0\n                    continue\n            elif cell == '-':\n                if white_count == 0:\n                    white_count += 1\n                    continue\n                elif black_count == 0:\n                    black_count += 1\n                    continue\n                else:\n                    print('White:', end='')\n                    print(','.join(pos_to_print(white_count, row + 1, col + 1)))\n                    white_count = 0\n                    print('Black:', end='')\n                    print(','.join(pos_to_print(black_count, row + 1, col + 1)))\n                    black_count = 0\n                    continue\n            elif cell == '|':\n                if white_count == 0:\n                    white_count += 1\n                    continue\n                elif black_count == 0:\n                    black_count += 1\n                    continue\n                else:\n                    print('White:', end='')\n                    print(','.join(pos_to_print(white_count, row + 1, col + 1)))\n                    white_count = 0\n                    print('Black:', end='')\n                    print(','.join(pos_to_print(black_count, row + 1, col + 1)))\n                    black_count = 0\n                    continue\n            elif cell == '.':\n                if white_count == 0:\n                    white_count += 1\n                    continue\n                elif black_count == 0:\n                    black_count += 1\n                    continue\n                else:\n                    print('White:', end='')\n                    print(','.join(pos_to_print(white_count, row + 1, col + 1)))\n                    white_count = 0\n                    print('Black:', end='')\n                    print(','.join(pos_to_print(black_count, row + 1, col + 1)))\n                    black_count = 0\n                    continue\n            elif cell == ':':\n                if white_count == 0:\n                    white_count += 1\n                    continue\n                elif black_count == 0:\n                    black_count += 1\n                    continue\n                else:\n                    print('White:', end='')\n                    print(','.join(pos_to_print(white_count, row + 1, col + 1)))\n                    white_count = 0\n                    print('Black:', end='')\n                    print(','.join(pos_to_print(black_count, row + 1, col + 1)))\n                    black_count = 0\n                    continue\n            elif cell == '\\n':\n                if white_count == 0:\n                    white_count += 1\n                    continue\n                elif black_count == 0:\n                    black_count += 1\n                    continue\n                else:\n                    print('White:', end='')\n                    print(','.join(pos_to_print(white_count, row + 1, col + 1)))\n                    white_count = 0\n                    print('Black:', end='')\n                    print(','.join(pos_to_print(black_count, row + 1, col + 1)))\n                    black_count = 0\n                    continue\n            elif cell == '|':\n                if white_count == 0:\n                    white_count += 1\n                    continue\n                elif black_count == 0:\n                    black_count += 1\n                    ",
        "test": "assert solution(\"\"\"",
        "num_ids": 1924
    },
    {
        "number": 4886,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(\" \")]\n    if (n + 1) % 2 == 0 or n == 0:\n        return \"Your wish is granted!\"\n\n    if (n % 2) == 0:\n        return \"Your wish is granted!\"\n    else:\n        return \"You will become a flying monkey!\"\n",
        "test": "assert solution(\"2 8\") == \"Your wish is granted!\"",
        "num_ids": 392
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    m = float(n)\n    print(int(m))\n    return ''",
        "test": "assert solution('''10000000000''') == 10000000000",
        "num_ids": 1973
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solution)",
        "test": "assert solution('1 50 50 50 100') == '0'",
        "num_ids": 365
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    x = 0\n    for _ in range(N):\n        x += int(stdin.readline())\n    return str(x + 40)\n\nprint(solution(None))\n",
        "test": "assert solution('1\\n1\\n1\\n1\\n1') == '5'",
        "num_ids": 1987
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m, s, d = [int(stdin[0].split(\" \")[0]), int(stdin[0].split(\" \")[1]), int(stdin[0].split(\" \")[2]), int(stdin[0].split(\" \")[3])]\n    sodas = [int(stdin[1].split(\" \")[0])]\n    sodas += [int(stdin[1].split(\" \")[i]) for i in range(2, s+2)]\n    capacity = [int(stdin[i+1]) for i in range(s)]\n    if n < 0 or m < 0 or s < 0 or d < 0:\n        return \"impossible\"\n    if n + m + s + d < 5:\n        return \"impossible\"\n    if n < m or n < s or n < d:\n        return \"impossible\"\n    if m > s:\n        return \"impossible\"\n    if n > m:\n        return \"impossible\"\n    if m < s:\n        if n < s:\n            return \"impossible\"\n        if n > s:\n            for i in range(0, m):\n                if capacity[i] < d:\n                    return \"impossible\"\n            return \"impossible\"\n    if n < s:\n        if n > d:\n            return \"impossible\"\n        if s > d:\n            for i in range(0, n):\n                if capacity[i] < d:\n                    return \"impossible\"\n            return \"impossible\"\n    if n == s:\n        if n > d:\n            return \"impossible\"\n        if n < d:\n            for i in range(0, m):\n                if capacity[i] < d:\n                    return \"impossible\"\n            return \"impossible\"\n    if n == s and m == d:\n        return \"impossible\"\n    else:\n        combos = []\n        permutations = []\n        for i in range(0, s+1):\n            combos += [[]]\n        for i in range(0, s+1):\n            if i > 0:\n                for j in range(0, i):\n                    combos[i] = combos[i] + [j]\n        for i in range(0, s+1):\n            if i > 0:\n                permutations += list(permutationsys(combos[i], s, m))\n        return permutations[random.randint(0, len(permutations)-1)]\n\ndef",
        "test": "assert solution('5 3 3 4\\n0 1 4\\n') == '2 3 0\\n'",
        "num_ids": 2342
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"",
        "test": "assert solution(\"2 2 2 2 4\") == \"-1 -1 -1 0 1\"",
        "num_ids": 205
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    passwords = [stdin[i:i + 3].split() for i in range(0, len(stdin), 3)]\n    return str(round(sum(float(x[1]) for x in passwords) / len(passwords), 4))",
        "test": "assert solution('''2",
        "num_ids": 559
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.strip().split(\" \"))\n    d = list(map(int, stdin.strip().split(\" \")))\n    d.sort()\n\n    m = d[p]\n    for i in range(1, n):\n        if d[i] - d[i - 1] > m:\n            m = d[i] - d[i - 1]\n    return str(m)\n\nimport sys\nfrom io import StringIO\n\ntest_input = \"\"\"3 1\n1 2 4\n\"\"\"",
        "test": "assert solution(stdin) == None",
        "num_ids": 2049
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution goes here\"\"\"\n    n = int(stdin)\n    notes = [stdin[i].split() for i in range(n)]\n    durations = [int(notes[i][1]) for i in range(n)]\n    pitches = [notes[i][0].upper() for i in range(n)]\n\n    for i in range(n):\n        # if the duration is not provided, pad with spaces\n        if durations[i] == 0:\n            durations[i] = 1\n        if i == 0:\n            # Create the first column\n            columns = []\n            for j in range(5):\n                # Pad the column with spaces\n                columns.append(\" \" * durations[i])\n            columns.append(\"* \" * durations[i])\n        else:\n            # Pad the columns between the notes\n            if durations[i] == durations[i - 1]:\n                columns = []\n                for j in range(5):\n                    # Pad the column with spaces\n                    columns.append(\" \" * durations[i])\n                columns.append(\"* \" * durations[i])\n            else:\n                columns = []\n                for j in range(5):\n                    if j < 4:\n                        columns.append(pitches[i - 1] + \" \" + columns[j])\n                    else:\n                        columns.append(pitches[i - 1] + columns[j])\n                columns.append(\"* \" * durations[i])\n\n        # Pad the last column with spaces\n        columns.append(\" \" * (5 - durations[i]))\n        \n        # Create the final staff line\n        staff_line = \"\"\n        for j in range(5):\n            staff_line += columns[j]\n        \n        # Add the staff line to the output\n        print(staff_line)\n    \n",
        "test": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == \"\"\"",
        "num_ids": 754
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sticks = [int(x) for x in stdin.readline().split()]\n    if len(sticks) > 3:\n        return \"impossible\"\n    elif len(sticks) == 3:\n        sticks.sort()\n        return \"possible\"\n    else:\n        sticks.sort(reverse=True)\n        i = 0\n        while i < len(sticks):\n            j = i + 1\n            k = i + 2\n            while j < len(sticks) and k < len(sticks):\n                if sticks[i]**2 == sticks[j]**2 + sticks[k]**2:\n                    sticks.remove(sticks[k])\n                    sticks.remove(sticks[j])\n                    sticks.remove(sticks[i])\n                    sticks.append(sticks[i] + sticks[j])\n                    sticks.append(sticks[i] + sticks[k])\n                    sticks.append(sticks[j] + sticks[k])\n                    sticks.sort()\n                    return \"possible\"\n                j += 1\n                k += 1\n            i += 1\n        return \"impossible\"",
        "test": "assert solution(\"1 1 1 1 1\") == \"possible\"",
        "num_ids": 654
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    widths = [int(x) for x in stdin.readline().split()]\n    towers = [[]]\n    curr_width = 0\n    for i in range(n):\n        new_width = widths[i]\n        if new_width > curr_width:\n            curr_width = new_width\n            towers.append([])\n        curr_width -= 1\n        towers[-1].append(i + 1)\n    towers = towers[:-1]\n    return str(len(towers))\n\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\n\n\"\"\"\n\"\"\"\ndef",
        "test": "assert solution(\"1\\n\") == \"\"",
        "num_ids": 496
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.readlines()\n    runner_data = [x.rstrip('\\n').split() for x in data]\n    runner_data = [[x[0], float(x[1]), float(x[2]), float(x[3])] for x in runner_data]\n    runner_data = sorted(runner_data, key=lambda x: x[1])\n    #print(runner_data)\n    team_data = {'1': [], '2': [], '3': [], '4': []}\n    team_data['1'].append(runner_data[0])\n    team_data['2'].append(runner_data[1])\n    team_data['3'].append(runner_data[2])\n    team_data['4'].append(runner_data[3])\n    for leg_number in range(2, 5):\n        for runner_number in range(0, 4):\n            runner = runner_data[runner_number]\n            runner_time = runner[1]\n            runner_acceleration = runner[2]\n            runner_distance = runner[3]\n            for runner_number2 in range(runner_number + 1, len(runner_data)):\n                runner2 = runner_data[runner_number2]\n                if runner[0]!= runner2[0]:\n                    runner_time += runner2[1]\n                    runner_acceleration += runner2[2]\n                    runner_distance += runner2[3]\n                    team_data[str(leg_number)].append(runner2)\n                    runner_data[runner_number2][1] = runner_time\n                    runner_data[runner_number2][2] = runner_acceleration\n                    runner_data[runner_number2][3] = runner_distance\n                    break\n    team_data = sorted(team_data.items(), key=lambda x: x[1])\n    team_data = [x[1] for x in team_data]\n    for team in team_data:\n        for runner in team:\n            print(runner[0])\nsolution(open('/home/tim/Documents/techstry/DataScience/Project Euler/euler52_data.txt'))\n",
        "test": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '5\\n3\\n2\\n1'",
        "num_ids": 932
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"\"\"3",
        "num_ids": 423
    },
    {
        "number": 4899,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[0]*2 + stdin[1:])\n    return stdin[0]*2 + stdin[1:]",
        "test": "assert solution('hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohelloheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyhey",
        "num_ids": 3696
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        return stdin.readline().strip()\n    roads = [map(int, line.strip().split()) for line in stdin]\n    rows, cols = n, n\n    matrix = [[[0 for _ in range(cols)] for _ in range(rows)] for _ in range(rows)]\n    for road in roads:\n        matrix[road[0] - 1][road[1] - 1] = matrix[road[1] - 1][road[0] - 1] = road[2]\n    distances = [[float('inf') for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 0:\n                distances[i][j] = float('inf')\n            else:\n                distances[i][j] = matrix[i][j]\n    for k in range(rows):\n        for i in range(rows):\n            for j in range(cols):\n                if i!= j and distances[i][j] > distances[i][k] + distances[k][j]:\n                    distances[i][j] = distances[i][k] + distances[k][j]\n    for i in range(rows):\n        for j in range(rows):\n            if i!= j:\n                print(f'{i + 1} {j + 1}')\n    return ''",
        "test": "assert solution('test_4') == '1 2\\n1 3\\n1 4\\n'",
        "num_ids": 1063
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(decrypt(stdin))\n\ndef",
        "test": "assert solution('ABCDABC') == 'ABCD'",
        "num_ids": 209
    },
    {
        "number": 4902,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    input_str_len = len(input_str)\n    if input_str_len < 1 or input_str_len > 1000:\n        raise ValueError(f\"Input should contain between 1 and 1000 characters, got {input_str_len}\")\n    input_str_list = list(input_str)\n    input_str_len = len(input_str)\n    if input_str_len < 2:\n        return 0\n    min_count = 0\n    for start_index in range(input_str_len-2):\n        if input_str_list[start_index]!= input_str_list[start_index+1]:\n            continue\n        end_index = start_index+2\n        is_per = True\n        while end_index < input_str_len:\n            if input_str_list[start_index]!= input_str_list[end_index-1]:\n                is_per = False\n                break\n            end_index += 1\n        if is_per:\n            min_count = min(min_count, end_index-start_index-1)\n    return min_count",
        "test": "assert solution('abc') == 0",
        "num_ids": 418
    },
    {
        "number": 4903,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    aaah = stdin.splitlines()[0]\n    aah = stdin.splitlines()[1]\n\n    aanh = 'aah'\n    aaph = 'aah'\n    aahh = 'aah'\n    aahph = 'aah'\n\n    aanph = 'aah'\n    aanphh = 'aah'\n    aanphhh = 'aah'\n    aanphhhhh = 'aah'\n\n    aanphhhhe = 'aah'\n    aanphhhhehh = 'aah'\n    aanphhhhehhhh = 'aah'\n\n    aanphhhheee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah'\n    aanphhhheeee = 'aah",
        "test": "assert solution(\"aaahhh\") == \"go\"",
        "num_ids": 3502
    },
    {
        "number": 4904,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom collections import Counter\n\ndef",
        "test": "assert solution(\"B2A2B2A1A2A2A2\") == \"A\"",
        "num_ids": 525
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    intersections, streets, luka_start, streets_m, luke_intersections = parse_input(stdin)\n    print(solution_p(intersections, streets, luka_start, streets_m, luke_intersections))\n\ndef",
        "test": "assert solution('''6 5",
        "num_ids": 705
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == \"E\":\n        return encode(s[2:])\n    elif s[0] == \"D\":\n        return decode(s[2:])\n    else:\n        return \"\"\ndef",
        "test": "assert solution('D E') == 'E'",
        "num_ids": 551
    },
    {
        "number": 4907,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    return Alice if n % 2 == 0 else Bob",
        "test": "assert solution(\"5\") == \"Bob\"",
        "num_ids": 1810
    },
    {
        "number": 4908,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split(\" \")))\n    return str(l[0]+l[1]-l[2])+\"=\"+str(l[0]+l[2]-l[1])+\"+\"+str(l[1]+l[2]-l[0])\n\nassert(solution(stdin) == \"4+8-5=13\")\n\nassert(solution(stdin) == \"4+8-5=13\")\n\"\"\"\n",
        "test": "assert solution('4 2 4') == '4-2=2'",
        "num_ids": 2319
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef",
        "test": "assert solution('1 1 1 1 1 1 1') == 'NO'",
        "num_ids": 554
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    categories = stdin.split(\"\\n\")\n    categories = [category.split(\" \") for category in categories]\n    categories = [set(category) for category in categories]\n    categories = set.intersection(*categories)\n    return min(categories, key=lambda category: (len(category), category))\n\n\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == \"witch\"",
        "num_ids": 1845
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def SortBy(sort_type: str, to_sort: list) -> list:\n        def Sort(attri: str, to_sort: list) -> list:\n            attri_list = []\n            for item in to_sort:\n                attri_list.append(item[attri])\n            sorted_list = sorted(attri_list)\n            for i, item in enumerate(to_sort):\n                to_sort[i] = item[:attri] + sorted_list[i] + item[attri + 1:]\n            return to_sort\n        to_sort = to_sort[:]\n        if sort_type == \"Artist\":\n            to_sort = Sort(0, to_sort)\n        elif sort_type == \"Album\":\n            to_sort = Sort(1, to_sort)\n        elif sort_type == \"Song_Title\":\n            to_sort = Sort(2, to_sort)\n        elif sort_type == \"Length_seconds\":\n            to_sort = Sort(3, to_sort)\n        return to_sort\n    attri_list = stdin.split()\n    attri_list = list(map(str, attri_list))\n    num_of_sorts = int(stdin.split()[0])\n    to_sort = stdin.split()\n    to_sort = list(map(str, to_sort))\n    if num_of_sorts == 0:\n        return''.join(attri_list)\n    for i in range(num_of_sorts):\n        sort_type = stdin.split()[i + 1]\n        to_sort = SortBy(sort_type, to_sort)\n    return''.join(to_sort)",
        "test": "assert solution('Artist Album Song_Title Length_seconds'",
        "num_ids": 823
    },
    {
        "number": 4912,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.strip().split(\" \"))\n    bricks = list(map(int, stdin.strip().split(\" \")))\n    res = \"\"\n    count = 0\n    while count < h:\n        for brick in bricks:\n            if brick > count:\n                count += brick\n                break\n        if count == h:\n            res = \"YES\"\n        else:\n            res = \"NO\"\n    return res",
        "test": "assert solution(\"2 10 7\") == \"YES\"",
        "num_ids": 1837
    },
    {
        "number": 4913,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"\") is None",
        "num_ids": 1168
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor t in range(1, T + 1):\n    N = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n\n    s = ''.join(sorted(s))\n\n    print(f'Case #{t}: {s}')\n\ndef",
        "test": "assert solution('3') == '3'",
        "num_ids": 230
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('3 A right\\n10 A right\\n30 A wrong\\n50 A wrong\\n100 A right\\n250 A wrong\\n300 A right\\n250 C wrong\\n300 D wrong\\n-2') == '0 0'",
        "num_ids": 592
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    matrix = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    i, j = matrix[0].index(1), matrix[n - 1].index(k)\n    i2, j2 = 0, 0\n\n    def manhattan(i: int, j: int) -> int:\n        return abs(i - i2) + abs(j - j2)\n\n    def path(i: int, j: int) -> int:\n        if i == 0 and j == 0:\n            return 0\n        i2, j2 = i - 1, j - 1\n        if matrix[i][j] <= matrix[i2][j2]:\n            return path(i - 1, j) + 1\n        else:\n            return path(i2, j - 1) + 1\n\n    return str(manhattan(i, j)) if path(i, j) > 1 else '-1'",
        "test": "assert solution(\"3 10\\n1 2 3\\n4 5 6\\n7 8 9\\n2 2 4\\n5 6 7\\n8 9 1\\n3 3 3\\n1 1 1\") == \"1\"",
        "num_ids": 2634
    },
    {
        "number": 4917,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"gunilla has a point\"\n    d = {}\n    for _ in range(n):\n        start, end = map(int, stdin.split())\n        if start in d:\n            d[start].append(end)\n        else:\n            d[start] = [end]\n    for k in d:\n        if len(d[k]) == 1:\n            continue\n        for i in range(len(d[k]) - 1):\n            if d[k][i + 1] - d[k][i]!= 1:\n                return \"gunilla has a point\"\n    return \"edward is right\"\n\n\ndef",
        "test": "assert solution('''",
        "num_ids": 2092
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    guests = {\n        guest: Guest(\n            guest=guest,\n            name=name,\n            size=1,\n            chat=Chat(\n                chat=chat,\n                name=name,\n                date=date,\n                type=type,\n            )\n        ) for guest, name, chat, date, type in [line.split() for line in stdin.strip().split('\\n')]\n    }\n\n    for guest, chat in sorted(guests.items(), key=lambda x: x[0]):\n        chat.add_guest(guest)\n    for guest, chat in sorted(guests.items(), key=lambda x: x[0]):\n        chat.chat_chat()\n\n    for guest, chat in sorted(guests.items(), key=lambda x: x[0]):\n        guests[guest].chat.chat_chat()\n\n    return '\\n'.join(str(guests[guest].chat.chat_chat()) for guest in sorted(guests.keys()))\n\nprint(solution(stdin))\n'''\n\n\ndef",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 691
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    res = []\n    trips = []\n    for _ in range(n):\n        country, year = stdin.split()\n        trips.append(list(country, int(year)))\n\n    for _ in range(q):\n        country, k = stdin.split()\n        res.append(trips[int(country) - 1][1])\n\n    return '\\n'.join(res)",
        "test": "assert solution('''4",
        "num_ids": 409
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    print(__import__('mylib').solution(stdin))\n\ndef",
        "test": "assert solution('eeebebbcee') == '4'",
        "num_ids": 221
    },
    {
        "number": 4921,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 1881
    },
    {
        "number": 4922,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split()]\n    vars = {i: [False] * n for i in range(1, k + 1)}\n    for _ in range(n):\n        l = [int(i) for i in stdin.readline().strip().split()]\n        if len(l) > 3:\n            return 'unsatisfactory'\n        for i, v in enumerate(l):\n            vars[i + 1][v - 1] = not vars[i + 1][v - 1]\n    return'satisfactory'",
        "test": "assert solution('1 2 3\\n-1 -2 3\\n-1 -2 -3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') =='satisfactory'",
        "num_ids": 603
    },
    {
        "number": 4923,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *rolls = list(map(int, stdin.split()))\n    if rolls[0] == rolls[1] == rolls[2]:\n        return \"none\"\n\n    unique_rolls = set(rolls)\n    max_rolls = rolls[rolls.index(max(unique_rolls))]\n    return rolls.index(max_rolls)",
        "test": "assert solution(\"8\\n4 4 4 4 4 4 4 4\") == \"none\"",
        "num_ids": 2046
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split(' ')[0]\n    time = datetime.strptime(time, '%H:%M:%S')\n    time_to_explode = stdin.split(' ')[1]\n    time_to_explode = datetime.strptime(time_to_explode, '%H:%M:%S')\n    if time_to_explode > time:\n        return time_to_explode.strftime('%H:%M:%S')\n    elif time_to_explode < time:\n        time_to_explode = datetime(time_to_explode.year, time_to_explode.month, time_to_explode.day, time_to_explode.hour + 24, time_to_explode.minute, time_to_explode.second)\n        if time_to_explode > time:\n            return time_to_explode.strftime('%H:%M:%S')\n",
        "test": "assert solution('01:00:00') == '01:00:00'",
        "num_ids": 711
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    rolls = int(stdin[0]), int(stdin[1])\n\n    if rolls[1] == rolls[0]:\n        return rolls[0]\n\n    layers = int(log(rolls[0], rolls[1]))\n\n    k = 1\n    while True:\n        cur_roll = [rolls[0] - pow(k, rolls[1]), rolls[1]]\n        if cur_roll[1] > cur_roll[0]:\n            return k\n        k += 1\n",
        "test": "assert solution(stdin) == 4",
        "num_ids": 2114
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    e = 0\n    for i in range(n):\n        a = a + 1 / math.factorial(i)\n        if i == 0:\n            e = a\n        else:\n            e = e + a\n    return str(e)\n\nprint(solution(stdin.read()))\n\n-----Alternate Solutions-----\n",
        "test": "assert solution('''3''') == '2.6666666666666665'",
        "num_ids": 349
    },
    {
        "number": 4927,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(\"5 3 7\") == \"paul\")\nassert(solution(\"6 6 2\") == \"paul\")\nassert(solution(\"1 1 1\") == \"opponent\")\nassert(solution(\"1 2 2\") == \"opponent\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"paul\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"1 1 1\") == \"paul\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"3 3 3\") == \"opponent\")\nassert(solution(\"3 3 4\") == \"opponent\")\nassert(solution(\"",
        "test": "assert solution(\"5 5 5\\n5 4 4\\n5 3 3\\n5 3 3\") == \"paul\"",
        "num_ids": 2170
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return \"\"\n\nassert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\\n2\") == \"\"\nassert solution(\"1\\n2\\n1\") == \"\"\nassert solution(\"1\\n1\\n1\") == \"\"\nassert solution(\"1\\n1\\n1\\n1\") == \"\"\nassert solution(\"1\\n1\\n1\\n2\") == \"\"\nassert solution(\"1\\n1\\n2\\n1\") == \"\"\nassert solution(\"1\\n1\\n2\\n1\\n1\") == \"\"\nassert solution(\"2\\n1\\n1\\n1\") == \"\"\nassert solution(\"2\\n1\\n1\\n2\") == \"\"\nassert solution(\"2\\n2\\n1\\n1\") == \"\"\nassert solution(\"3\\n2\\n1\\n1\") == \"\"\nassert solution(\"3\\n2\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\") == \"\"\nassert solution(\"6\\n2\\n1\\n1\\n2\\n1\\n1\") == \"\"\nassert solution(\"6\\n2\\n1\\n1\\n2\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"\"\nassert solution(\"5\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1",
        "test": "assert solution('''4''') == '5'",
        "num_ids": 3719
    },
    {
        "number": 4929,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.rstrip()\n    P = stdin.rstrip()\n    if P == S:\n        print(\"Yes\")\n    elif len(P) == len(S):\n        if P.lower() == S.lower():\n            print(\"Yes\")\n        elif P == S.swapcase():\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n    return \"\"\n",
        "test": "assert solution('''123''') == ''",
        "num_ids": 404
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'",
        "num_ids": 1882
    },
    {
        "number": 4931,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"IMPOSSIBLE\"",
        "test": "assert solution(\"32 2\") == \"IMPOSSIBLE\"",
        "num_ids": 416
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(x) for x in stdin.split())\n    p, m, g = (int(x) for x in stdin.split())\n    w = p * d + m * c + g * b\n    r = [((p + g + (a - 1) % 2) * d + (m + g + (b - 1) % 2) * c, ((p + g + (a - 1) % 2) * d + (m + g + (b - 1) % 2) * c, ((p + g + (a - 1) % 2) * d + (m + g + (b - 1) % 2) * c)]\n    r += [((p + g + (a + 1) % 2) * d + (m + g + (b - 1) % 2) * c, ((p + g + (a + 1) % 2) * d + (m + g + (b - 1) % 2) * c, ((p + g + (a + 1) % 2) * d + (m + g + (b - 1) % 2) * c)]\n    r += [((p + g + (a - 1) % 2) * d + (m + g + (b + 1) % 2) * c, ((p + g + (a - 1) % 2) * d + (m + g + (b + 1) % 2) * c, ((p + g + (a - 1) % 2) * d + (m + g + (b + 1) % 2) * c)]\n    r += [((p + g + (a + 1) % 2) * d + (m + g + (b + 1) % 2) * c, ((p + g + (a + 1) % 2) * d + (m + g + (b + 1) % 2) * c, ((p + g + (a + 1) % 2) * d + (m + g + (b + 1) % 2) * c)]\n    return 'both' if w in r else 'none' if w not in r else 'one'\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2 2 3 3\n1 3 4\n\"\"\"\n        output = \"\"\"both\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"2 2 4 3\n1 3 4\n\"\"\"\n        output = \"\"\"one\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2 2 4 4\n1 3 4\n\"\"\"\n        output = \"\"\"none\"\"\"\n        self.assertIO(input, output)\n",
        "test": "assert solution(stdin) == stdin.split()[0]",
        "num_ids": 3376
    },
    {
        "number": 4933,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(\" \")\n    a, b, c = [int(num) for num in nums]\n    d = b - a\n    e = c - b\n    f = d + e\n    return str(f)",
        "test": "assert solution(\"1 2 3\") == \"2\"",
        "num_ids": 236
    },
    {
        "number": 4934,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    h, v = [int(x) for x in stdin.split()]\n    return str(h*v)",
        "test": "assert solution('1 1') == '1'",
        "num_ids": 154
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    g = float(stdin.split(' ')[1])\n    n = int(stdin.split(' ')[0])\n\n    distances = []\n    angles = []\n    for _ in range(n):\n        d, a = map(int, stdin.split(' ')[2:])\n        distances.append(d)\n        angles.append(a)\n\n    # print(distances)\n    # print(angles)\n\n    sum = 0\n    for i in range(n):\n        sum += (g * distances[i] * cos(radians(angles[i]))) ** 2\n    return round(sqrt(sum), 6)\n\nprint(solution(input()))\n\"\"\"\n\nimport sys\n\ng = float(sys.argv[1])\nn = int(sys.argv[0])\n\npoints = []\n\nfor line in sys.stdin.readlines():\n    d, a = map(float, line.split(' '))\n    points.append((d, a))\n\nspeed = []\n\nfor i in range(n):\n    prev = points[i - 1]\n    curr = points[i]\n    delta = curr[0] - prev[0]\n    angle = prev[1] - curr[1]\n\n    if angle < 0:\n        angle += 360\n\n    speed.append(delta / angle)",
        "test": "assert solution('''2 3",
        "num_ids": 746
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    temp = []\n    for i in range(n):\n        temp.append([t[i], i])\n    temp.sort(key = lambda x:x[0])\n    d, t = temp[0][1], temp[1][0]\n    print(\"%s %s\" % (d, t))\n",
        "test": "assert solution('4\\n21 22 22 22') == '0 22'",
        "num_ids": 472
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\")\n    3\n    \"\"\"\n    n, s = map(int, stdin.split())\n    ships = [int(l) for l in stdin.split()]\n    # split the array into two arrays\n    s_ones, s_zeros = [], []\n    for num in ships:\n        if num == 1:\n            s_ones.append(num)\n        else:\n            s_zeros.append(num)\n    # we can now sort each of the arrays\n    s_zeros.sort()\n    s_ones.sort()\n    # now we can find the count of wins\n    s_ones_count, s_zeros_count = 0, 0\n    for i in range(len(s_ones)):\n        s_ones_count += s_ones[i] * i\n    for i in range(len(s_zeros)):\n        s_zeros_count += s_zeros[i] * (n - i)\n    # we want to win when we get to the same number of ships\n    return s_ones_count if s_ones_count == s_zeros_count else s_zeros_count\n",
        "test": "assert solution(stdin) == 2",
        "num_ids": 458
    },
    {
        "number": 4938,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.strip()\n    if len(stdin) < 100:\n        return '0'\n    elif len(stdin) == 100:\n        return '1'\n    stdin = stdin[:100]\n    X = int(stdin[0])\n    W = 0\n    M = 0\n    for char in stdin[1:]:\n        if char == 'W':\n            W += 1\n        elif char == 'M':\n            M += 1\n    D = abs(W - M)\n    if D > X:\n        return '0'\n    else:\n        return str(D)",
        "test": "assert solution('MWWMWMMMMMMMMMM') == '0'",
        "num_ids": 436
    },
    {
        "number": 4939,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    throw_commands = list(map(int, stdin.split()))\n    child_numbers = [0] * n\n    egg_position = 0\n    for command in throw_commands:\n        if command > 0:\n            for _ in range(command):\n                egg_position = (egg_position + 1) % n\n        else:\n            for _ in range(-command):\n                egg_position = (egg_position - 1 + n) % n\n        child_numbers[egg_position] += 1\n\n    return str(child_numbers.index(max(child_numbers)))",
        "test": "assert solution('1 5') == '0'",
        "num_ids": 569
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution(solution.read_input('''2 3",
        "num_ids": 501
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    m = int(stdin.readline().strip())\n    d = [set() for _ in range(n + 1)]\n    for _ in range(m):\n        d[int(stdin.readline().strip())].add(stdin.readline().strip())\n\n    result = []\n    for _ in range(n):\n        k = int(stdin.readline().strip())\n        i = stdin.readline().strip()\n        if i in d[k]:\n            result.append('correct')\n        else:\n            result.append('incorrect')\n\n    if len(result) == 1:\n        return result[0] + '\\n' + 'correct'\n    else:\n        return str(len(result)) + '\\n' + 'correct' + '\\n' + 'incorrect'\n\nimport sys\nfrom datetime import datetime\n",
        "test": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'",
        "num_ids": 1164
    },
    {
        "number": 4942,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 3 4 3''')\n    '7'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    days = [int(i) for i in stdin.readline().strip().split()]\n    # Find the earliest day when the party can be organized\n    min_days = 1\n    for i in range(1, n):\n        if days[i] > days[i-1]:\n            min_days = i + 1\n    return str(min_days)\n",
        "test": "assert solution('1\\n2') == '2'",
        "num_ids": 374
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n_author_ = 'jake'\n_project_ = 'leetcode'\nclass TestSolution(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.soln = solution\n\n    def test_solution(self):\n        pass\n",
        "test": "assert solution('2\\n1 1\\n0 0\\n0\\n2\\n1 1\\n0 2\\n4') == '0.0 0.0\\n1.0 1.0\\n0.0 2.0\\n4.0'",
        "num_ids": 2321
    },
    {
        "number": 4944,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    else:\n        return \"1\"",
        "test": "assert solution('1') == '1'",
        "num_ids": 198
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split(\" \"))\n    m, s = (int(i) for i in stdin.split(\" \"))\n    return str(a * m + b * s)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"1 4\") == \"38\"",
        "num_ids": 357
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_guests = int(lines[0])\n    guest_languages = list(map(int, lines[1].split()))\n    language_count = Counter(guest_languages)\n    guest_languages = set(guest_languages)\n    max_lang_count = max(language_count.values())\n    lang_count = {l: max_lang_count - c for l, c in language_count.items()}\n    lang_order = [l for l in guest_languages if l in lang_count.keys()]\n    lang_order.sort(key=lambda l: lang_count[l])\n    lang_order = ''.join(lang_order)\n    return lang_order\n\nsolution('')",
        "test": "assert solution('1 2 2 1') == 1",
        "num_ids": 606
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    assert isinstance(stdin, str)\n    assert len(stdin) <= 3\n    assert stdin.count('.') <= 1\n    \n    miles = float(stdin)\n    \n    rpd = 4854\n    \n    if miles < 1:\n        return '0'\n    elif miles < 2:\n        return '1'\n    elif miles < 5:\n        return '2'\n    elif miles < 10:\n        return '5'\n    elif miles < 50:\n        return '10'\n    elif miles < 100:\n        return '50'\n    elif miles < 500:\n        return '100'\n    elif miles < 1000:\n        return '500'\n    else:\n        return '1000'\n\ndef",
        "test": "assert solution('1.0') == '1088'",
        "num_ids": 475
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(n) for n in stdin.split(\" \")]\n    for _ in range(n):\n        r, x, y, z = [int(n) for n in stdin.split(\" \")]\n        if abs(z) < n / 2:\n            print(abs((r * r) - (x * x) - (y * y)))\n        else:\n            print(0)\n",
        "test": "assert solution('''0 4",
        "num_ids": 3268
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    w, h = map(int, stdin.readline().strip().split())\n    box = []\n    for i in range(h):\n        box.append(list(map(int, stdin.readline().strip().split())))\n    matches = []\n    for i in range(h):\n        for j in range(w):\n            if box[i][j] >= j:\n                matches.append((j, i))\n    for match in matches:\n        if match[0] + match[1] <= w:\n            print(\"DA\")\n        else:\n            print(\"NE\")\nsolution(open(0))\n",
        "test": "assert solution('''5 3 4",
        "num_ids": 544
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(n):\n        t, d = map(int, stdin.split())\n        if i == 0:\n            result = d / (t - 0)\n        else:\n            result = max(result, d / (t - prev_t))\n        prev_t = t\n    return str(int(result))",
        "test": "assert solution(",
        "num_ids": 254
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    if len(lines) == 0:\n        return \"correct\"\n    n = int(lines[0])\n    proof = [x.split(\" -> \") for x in lines[1:n + 1]]\n    for i in range(n):\n        proof[i][0] = proof[i][0].split(\" \")\n        proof[i][1] = proof[i][1].upper()\n    for line in proof:\n        if not valid_line(line):\n            return str(i + 1)\n\n    return \"correct\"\n\nassert(solution(\"ALICE -> BOB\") == \"correct\")\nassert(solution(\"ALICE -> BOB\\nALICE BOB -> CARL\") == \"correct\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\") == \"1\")\nassert(solution(\"ALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\") == \"1\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"ALICE -> BOB\\nBOB -> CARL\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE -> BOB\\nALICE BOB -> CARL\\nBOB -> CARL\\nALICE BOB -> CARL\") == \"2\")\nassert(solution(\"AL",
        "test": "assert solution('Bob -> Carl') == '2'",
        "num_ids": 1947
    },
    {
        "number": 4952,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    candidates = {}\n    for line in stdin.splitlines():\n        if line == \"***\":\n            break\n        candidates[line] = candidates.get(line, 0) + 1\n\n    if not candidates:\n        return \"Runoff!\"\n    else:\n        return max(candidates, key=candidates.get)",
        "test": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"",
        "num_ids": 1951
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dic = {}\n    for i in range(n):\n        l = stdin.split()\n        if l[0] not in dic:\n            dic[l[0]] = set([l[1]])\n        else:\n            dic[l[0]].add(l[1])\n        for j in range(2,len(l)):\n            if l[1] not in dic[l[0]]:\n                dic[l[0]].add(l[1])\n    tot = 0\n    count = 0\n    for i in dic:\n        if len(dic[i]) == n - 1:\n            tot += 1\n            count += 1\n    if tot == 0:\n        return -1\n    else:\n        return count\n\nassert(solution('') == -1)\nassert(solution('1') == -1)\nassert(solution('7') == 2)\nassert(solution('7 5') == 3)\nassert(solution('7 3') == 3)\nassert(solution('7 3 2') == -1)\nassert(solution('7 3 2 4') == -1)\nassert(solution('1 1 1') == -1)\nassert(solution('7 7 7 7') == -1)\nassert(solution('3 2 2 2') == 2)\nassert(solution('2 2 2 2') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7') == -1)\nassert(solution('7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7",
        "test": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT",
        "num_ids": 1556
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, B, H, W = [int(x) for x in stdin.strip().split()]\n    costs = [int(x) for x in stdin.strip().split()]\n    costs.sort()\n    for i in range(H):\n        beds = [int(x) for x in stdin.strip().split()]\n        cost = 0\n        for j in range(W):\n            cost += (sum(beds[j:])) * costs[j]\n            if cost > B:\n                break\n        if cost < B:\n            return cost\n    return'stay home'",
        "test": "assert solution('1 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'",
        "num_ids": 2339
    },
    {
        "number": 4955,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 228
    },
    {
        "number": 4956,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    return 'dae ae ju traeligt va'\n\nassert(solution('') == '')\nassert(solution('dae ae ju traeligt va') == 'dae ae ju traeligt va')\nassert(solution('dae ae ja traeligt va') == 'haer talar vi rikssvenska')\nassert(solution('dae \u00e4r ju traeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('dae \u00e4r ju treeligt v\u00e4ga') == 'dae ae ju traeligt va')\nassert(solution('dae \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('dae \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('dae \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('dae \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('dae \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('dae \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar vi rikssvenska')\nassert(solution('d\u00e4r \u00e4r ju treeligt v\u00e4ga') == 'haer talar",
        "test": "assert solution('d\u00e4g \u00e4r korkat \u00f6stg\u00f6t') == 'haer talar vi rikssvenska'",
        "num_ids": 2121
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 4\\n.#..\\n..#..\")\n    'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n    \"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    grid = [list(stdin.strip()) for _ in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == \".\":\n                continue\n            if x == 0 or grid[x - 1][y] == \".\":\n                grid[x][y] = \"E\"\n                grid[x][y + 1] = \"E\"\n            elif grid[x][y] == \"E\":\n                grid[x][y + 1] = \"E\"\n            if y == 0 or grid[x][y - 1] == \".\":\n                grid[x][y] = \"E\"\n                grid[x + 1][y] = \"E\"\n            elif grid[x][y] == \"E\":\n                grid[x + 1][y] = \"E\"\n    return \"\\n\".join(\"\".join(row) for row in grid)\n",
        "test": "assert solution(\"2\\n...##\\n.#..#\\n..#.##\\n.#.###\\n#.#.#.#\\n#...#.#\\n..#...#\\n#..#.##\\n#.#.#..#\\n.#..##..\\n#..#...#\\n#.#...#.\"",
        "num_ids": 521
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    array = list(map(int, stdin.split(\" \")))\n    height = array[6]\n    second_height = array[7]\n    array.sort()\n    result = \" \".join(map(str, array[0:6]))\n    result += \" \" + str(height) + \" \" + str(second_height)\n    return result\n\nassert(solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\")\nassert(solution(\"3 5 8 2 9 4 7\") == \"2 8 4 7 3 5\")\nassert(solution(\"2 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"2 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"2 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\nassert(solution(\"4 3 3 4 4 3 4\") == \"2 3 4 4 3 3\")\n",
        "test": "assert solution('2 2 1 1 1 1') == '2 1 1 1 1 1 1'",
        "num_ids": 1747
    },
    {
        "number": 4959,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    e = int(stdin[0])\n    f = int(stdin[1])\n    c = int(stdin[2])\n    return str(e + f + min(e, f + c))\n\nimport sys\n",
        "test": "assert solution('5 0 10') == '10'",
        "num_ids": 286
    },
    {
        "number": 4960,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin.strip()\n    result = \"\"\n    for i in range(0, len(binary), 3):\n        result += str(int(binary[i:i+3], 2))\n    return result",
        "test": "assert solution(\"100\") == '4'",
        "num_ids": 208
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''4 3\n...o\n...o\n..o\n...o''') == '2')\nassert(solution('''6 6\n....o\n....o\n....o\n....o\n....o\n....o''') == '1')\nassert(solution('''1 1\no..\n''') == '0')\nassert(solution('''5 5\n.....\n.....\n.....\n.....\n.....''') == '5')\nassert(solution('''5 3\no..\n....\no..\n....\no..''') == '2')\nassert(solution('''5 3\n....\n....\n....\n....\n....''') == '0')\nassert(solution('''3 3\noo.\n..o\no..\n''') == '0')\nassert(solution('''2 3\noo.\n..o\n''') == '0')\nassert(solution('''5 4\n....\n....\n....\n....\n....''') == '1')\nassert(solution('''6 6\n.....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\n.....\n.....\n.....\n.....\n.....\n.....''') == '2')\nassert(solution('''6 6\n.....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\n.....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '2')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '1')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '1')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '1')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '1')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '1')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '1')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '1')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....\n.....''') == '0')\nassert(solution('''6 6\no....\n.....\n.....\n.....\n.....",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 1761
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    N, L = [int(x) for x in line.split()]\n\n    a, b = [], []\n    for _ in range(N):\n        line = stdin.readline()\n        a.append(int(line))\n\n    for _ in range(L):\n        line = stdin.readline()\n        b.append(int(line))\n\n    items = sorted([(a[i], b[i]) for i in range(N)])\n\n    result = []\n    for i in range(N):\n        for j in range(N):\n            if items[i][1] == items[j][0]:\n                result.append(\"LADICA\")\n                break\n            if items[i][0] == items[j][1]:\n                result.append(\"SMECE\")\n                break\n        else:\n            result.append(\"SMECE\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 694
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return \"\"\n    s = stdin.readline().strip().split(\" \")\n    if len(s)!= n - 1:\n        return \"\"\n    jim = [int(s[0])]\n    for i in range(1, len(s)):\n        jim.append(int(s[i]) + jim[-1])\n    jim.sort()\n    print(*jim)\n",
        "test": "assert solution(\"3\\n0\\n1\\n2\") == \"1 2 3\"",
        "num_ids": 404
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_input():\n        return [\n            [int(x) for x in line.split()]\n            for line in stdin.strip().split('\\n')\n        ]\n\n    def get_hash_table():\n        return [set(x) for x in stdin.strip().split('\\n')]\n\n    def get_similar_ids(movie_id: int):\n        similar_ids = set()\n        for i in range(len(hash_table)):\n            if movie_id in hash_table[i]:\n                similar_ids = similar_ids.union(hash_table[i])\n        return similar_ids\n\n    def get_hi(movie_id: int, similar_ids: set):\n        hi = 0\n        worst_similar_movie = None\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie not in similar_ids:\n                if worst_similar_movie < similar_movie:\n                    hi = Q + 1\n                else:\n                    hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_n(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_3(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_2(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_4(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_5(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_6(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_7(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_8(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_9(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n            elif worst_similar_movie < similar_movie:\n                hi = worst_similar_movie\n        if worst_similar_movie is None:\n            hi = 0\n        return hi\n\n    def get_hi_10(movie_id: int, similar_ids: set):\n        worst_similar_movie = None\n        hi = 0\n        for similar_movie in similar_ids:\n            if worst_similar_movie is None:\n                worst_similar_movie = similar_movie\n                hi = Q + 1\n",
        "test": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT",
        "num_ids": 1588
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    newT = sorted(t)\n    return \" \".join(map(str, newT))\nprint(solution(stdin.read()))",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 3336
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n\nassert str(solution('''2 20 15\n3 10\n''')) == str(18.400)\n\nassert str(solution('''4 8 4\n1 2 2\n''')) == str(3.916)\n\nassert str(solution('''4 8 4\n1 2 1\n''')) == str(3.700)\n\nassert str(solution('''4 8 4\n1 2 1\n''')) == str(2.900)\n'''\n",
        "test": "assert solution('''2 10 10",
        "num_ids": 435
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return str(answer)",
        "test": "assert solution('''S....",
        "num_ids": 138
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    _, N, S, R = [int(x) for x in stdin.split(\" \")]\n\n    if S > N or R > N:\n        raise ValueError\n\n    def is_legal(teams: list[int]) -> bool:\n        return len(set(teams)) == N and len(set(teams[:R]).intersection(set(teams[R:]))) == 0\n\n    return str(sum(not is_legal(list(range(1, N + 1))) for _ in range(1, S + 1)))\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 2031
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split(\" \")]\n    if R % 2 == 0 and C < R:\n        r = R // 2\n    elif R % 2!= 0 and C < R - 1:\n        r = R // 2\n    else:\n        r = R // 2 + 1\n    return f\"{(C / r):.6f}\"",
        "test": "assert solution('1 100') == '0.0000000'",
        "num_ids": 241
    },
    {
        "number": 4970,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Insert your code here\n    return str()",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 243
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bus_num = 0\n    while bus_num ** 3 < n:\n        bus_num += 1\n    if bus_num ** 3 == n:\n        return str(bus_num)\n    bus_num -= 1\n    while bus_num ** 3 < n:\n        bus_num += 1\n    return str(bus_num) if bus_num ** 3 == n else None\n\nassert solution(\"1730\") == \"1729\"\nassert solution(\"20200\") == \"1729\"\nassert solution(\"200\") == \"None\"\nassert solution(\"17\") == \"None\"\nassert solution(\"16\") == \"None\"\nassert solution(\"5\") == \"None\"\nassert solution(\"0\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-5\") == \"None\"\nassert solution(\"-",
        "test": "assert solution('1001') == '123'",
        "num_ids": 3510
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    assert(x > 0)\n    assert(x < 10**9)\n    n = x\n    p = []\n    while n > 1:\n        n //= 2\n        p.append(n)\n    p.reverse()\n    return ''.join(str(n) for n in p)\nprint(solution(stdin))\n",
        "test": "assert solution(",
        "num_ids": 575
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n    if grid[0][0] == 'K':\n        return '-1'\n    from collections import deque\n    queue = deque()\n    queue.append((0, 0))\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    visited[0][0] = True\n    while queue:\n        r, c = queue.popleft()\n        neighbors = [\n            (r + 2, c + 1),\n            (r + 2, c - 1),\n            (r - 2, c + 1),\n            (r - 2, c - 1),\n            (r + 1, c + 2),\n            (r + 1, c - 2),\n            (r - 1, c + 2),\n            (r - 1, c - 2),\n        ]\n        for nr, nc in neighbors:\n            if nr >= 0 and nr <= n - 1 and nc >= 0 and nc <= n - 1:\n                if grid[nr][nc] == 'K' and visited[nr][nc] is False:\n                    return str(abs(nr - r) + abs(nc - c))\n                if grid[nr][nc] == '.' and visited[nr][nc] is False:\n                    visited[nr][nc] = True\n                    queue.append((nr, nc))\n    return '-1'",
        "test": "assert solution(\"4\\n....\\n....\\n.K\\n.....K\\n......K\") == \"-2\"",
        "num_ids": 1736
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, n = [int(x) for x in stdin.split(\" \")]\n    already_booked = [int(x) for x in stdin.split(\" \")[1:]]\n    # Already booked\n    free_rooms = list(range(1, r + 1))\n    for room in already_booked:\n        free_rooms.remove(room)\n    if len(free_rooms) > 0:\n        return str(free_rooms[0])\n    else:\n        return \"too late\"",
        "test": "assert solution(\"2 5\\n3\\n2\\n3\\n5\\n1\") == \"23\"",
        "num_ids": 3793
    },
    {
        "number": 4975,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "test": "assert solution('') == ''",
        "num_ids": 391
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    return \"The gopher can escape through the hole at ({0},{1}).\\n\".format(int(stdin.split()[0]), int(stdin.split()[1]))\n\nassert solution('1.000 1.000 2.000 2.000') == 'The gopher can escape through the hole at (1,1).\\n'\nassert solution('1.500 1.500') == 'The gopher cannot escape.\\n'\n",
        "test": "assert solution('1.000 1.000 2.000 2.000\\n1.000 1.000\\n1.500 1.500') == 'The gopher cannot escape.'",
        "num_ids": 899
    },
    {
        "number": 4977,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    starting_coordinate = tuple(int(x) for x in stdin[0].split(\" \"))\n    destination_coordinate = tuple(int(x) for x in stdin[1].split(\" \"))\n    starting_charge = int(stdin[2])\n    return \"Y\" if can_move(starting_coordinate, destination_coordinate, starting_charge) else \"N\"\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == stdout",
        "num_ids": 738
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "test": "assert solution('''5 7",
        "num_ids": 355
    },
    {
        "number": 4979,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin.strip()\n    return int(binary[::-1], 2)\n\nassert(solution('13') == 11)\nassert(solution('21') == 12)\n\n-----\n\n##Test block\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution('11'), 2)\n        self.assertEqual(solution('21'), 3)",
        "test": "assert solution(input()) == '11'",
        "num_ids": 283
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nlines = [s.strip().split() for s in sys.stdin.readlines()]\n\ncount = Counter()\nfor name in lines[1:]:\n    color = name[-1]\n    name = name[:-1]\n    count[color] += 1\n\nfor color, count in count.items():\n    if count == 1:\n        print(count, \"button\")\n        break\nelse:\n    print(\"I must watch Star Wars with my daughter\")\n",
        "test": "assert solution(",
        "num_ids": 342
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    return''.join((str(a), str(b), str(c)))",
        "test": "assert solution('1 5 3') == '1 3 5'",
        "num_ids": 502
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    events = [line.strip().split(' ') for line in stdin.split('\\n') if line.strip()!= '']\n    stack = []\n    money = 0\n    for i in range(len(events)):\n        event = events[i]\n        if event[0] == 'buy':\n            money += int(event[1]) * float(event[2])\n        elif event[0] =='sell':\n            money -= int(event[1]) * float(event[2])\n        elif event[0] == 'die':\n            money += int(event[1]) * 1.3\n        elif event[0] =='split':\n            money += int(event[1]) * 2\n        elif event[0] =='merge':\n            money += int(event[1]) * 3\n    return str(money)",
        "test": "assert solution('''buy 1 15",
        "num_ids": 624
    },
    {
        "number": 4983,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    product = 1\n    for num in str(x):\n        product *= int(num)\n    return str(product)[-1]",
        "test": "assert solution(28) == '4'",
        "num_ids": 255
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function",
        "test": "assert solution(",
        "num_ids": 463
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 S\n   ... TH\n   ... 9C\n   ... KS\n   ... QS\n   ... JS\n   ... TD\n   ... AD\n   ... JH''')\n    '60'\n    \"\"\"\n    n = int(stdin.split()[0])\n    b = stdin.split()[1]\n    result = 0\n    for _ in range(n):\n        line = stdin.splitlines()[-1]\n        num, suit = line.split()\n        if suit == b:\n            result += int(num)\n    return str(result)",
        "test": "assert solution('2C') == '0'",
        "num_ids": 315
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution('') == \"\")\nassert(solution('this') == 't')\nassert(solution('this is very annoying') == 'd'\n     's'\n      'e'\n      'i'\n      'a'\n      'n'\n      'g'\n      'a'\n      't'\n      'h'\n     ''\n      'n'\n      'i'\n      'a'\n      'n'\n      'g'\n      'a'\n      'n'\n      'a'\n      'n')\nassert(solution('this is very annoying') == 'd'\n     's'\n      'e'\n      'i'\n      'a'\n      'n'\n      'g'\n      'a'\n      't'\n      'h'\n     ''\n      'n'\n      'i'\n      'a'\n      'n'\n      'g'\n      'a'\n      'n'\n      'a'\n      'n')\n\n\"\"\"\n\ndef",
        "test": "assert solution('''testt",
        "num_ids": 457
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.read().strip()\n\nprint(solution('''5 3 0\n0 0 1 1 2\n'''))\n",
        "test": "assert solution(\"1 1 0\") == \"3\"",
        "num_ids": 172
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    ns = [int(stdin.readline().strip()) for _ in range(t)]\n    return '\\n'.join(str(n) for n in [factorial_helper(n) for n in ns])\n\ndef",
        "test": "assert solution(stdin) == '6'",
        "num_ids": 234
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    values = stdin.split()[1:]\n    values = [int(v) for v in values]\n\n    alice = 0\n    bob = 0\n\n    alice_has = True\n    bob_has = False\n\n    while len(values) > 0:\n        if alice_has:\n            alice += values.pop()\n            alice_has = False\n            bob_has = True\n        else:\n            bob += values.pop()\n            alice_has = True\n            bob_has = False\n\n    return \" \".join([str(alice), str(bob)])\n\nprint(solution(stdin))\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(stdin), \"5 8\")",
        "test": "assert solution(\"2\\n1 1\\n\") == \"1 2\"",
        "num_ids": 2121
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \nassert solution(\n'''\n5 2 1\n'''\n) == '2'\n\nassert solution(\n'''\n5 2 4\n'''\n) == '1'\n\nassert solution(\n'''\n10 2 3\n'''\n) == '4'\n\nassert solution(\n'''\n100 2 1\n'''\n) == '8'\n\nassert solution(\n'''\n50 1 1\n'''\n) == '9'\n\nassert solution(\n'''\n10 0 1\n'''\n) == '0'\n\nassert solution(\n'''\n1 0 1\n'''\n) == '0'\n\nassert solution(\n'''\n10 10 10\n'''\n) == '20'\n\nassert solution(\n'''\n100 3 3\n'''\n) == '2'\n\nassert solution(\n'''\n1 2 1\n'''\n) == '3'\n\nassert solution(\n'''\n10 0 10\n'''\n) == '0'\n\nassert solution(\n'''\n1 0 1\n'''\n) == '2'\n\nassert solution(\n'''\n4 0 1\n'''\n) == '3'\n",
        "test": "assert solution('''15 2 3''') == '1'",
        "num_ids": 561
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n\nassert str(solution('''5''')) == \"36\"\nassert str(solution('''7''')) == \"288\"\nassert str(solution('''10''')) == \"26\"\nassert str(solution('''14''')) == \"112\"\nassert str(solution('''27''')) == \"726\"\nassert str(solution('''50''')) == \"3048\"\nassert str(solution('''512''')) == \"243164096\"\nassert str(solution('''1312''')) == \"114910059043075\"\nassert str(solution('''65535''')) == \"6579750575699949\"\n\"\"\"\n",
        "test": "assert solution(7) == 288",
        "num_ids": 478
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin == \"\":\n        return \"\"\n    stdin = stdin.split(\"\\n\")\n\n    def split_by_size(input: list) -> list:\n        \"\"\"\n        >>> split_by_size([1, 2, 3, 4, 5, 6, 7])\n        [[1, 2, 3], [4, 5, 6], [7]]\n        \"\"\"\n        output = []\n        current = []\n        for item in input:\n            current.append(item)\n            if len(current) >= 3:\n                output.append(current)\n                current = []\n        if len(current) > 0:\n            output.append(current)\n        return output\n\n    # Split the input into a list of lists, each list has a student in it\n    n = int(stdin[0])\n    rooms = stdin[1].split(\" \")\n    rooms = list(map(int, rooms))\n    # rooms = [int(x) for x in rooms]\n    rooms = split_by_size(rooms)\n\n    # Assign each student a room\n    counts = []\n    for room in rooms:\n        for student in room:\n            if student not in counts:\n                counts.append(student)\n    for i in range(0, len(counts)):\n        counts[i] = 0\n    for room in rooms:\n        for student in room:\n            counts[student] += 1\n\n    # Find a safe order by going through each room\n    output = []\n    for i in range(0, len(counts)):\n        if counts[i] == 1:\n            output.append(i)\n\n    # If we cannot assign students to a room, it is impossible\n    if len(output) == 0:\n        return \"impossible\"\n    return \" \".join(map(str, output))\n",
        "test": "assert solution(stdin) == stdin",
        "num_ids": 925
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n\n    p = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n\n    boat_parts = lines[1:]\n    boat_parts_lst = []\n    for boat_part in boat_parts:\n        boat_parts_lst.append(boat_part.strip())\n\n    if len(boat_parts_lst)!= p:\n        return \"Error: invalid boat part count\"\n\n    parts_by_day = []\n    for i in range(n):\n        parts_by_day.append([])\n\n    for boat_part in boat_parts_lst:\n        parts_by_day[i].append(boat_part)\n\n    for day in range(n):\n        parts_by_day[day].reverse()\n\n    parts_by_day = list(reversed(parts_by_day))\n    parts_by_day_str = []\n    for boat_part_list in parts_by_day:\n        parts_by_day_str.append(\", \".join(boat_part_list))\n\n    return \", \".join(parts_by_day_str)",
        "test": "assert solution('''3 5",
        "num_ids": 724
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = stdin.split()\n    x2, y2 = stdin.split()\n    x3, y3 = stdin.split()\n    x4, y4 = stdin.split()\n    return x4, y4\n\nassert solution(\n    \"5 5\\n5 7\\n7 5\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7\\n5 7",
        "test": "assert solution(stdin) == expected_output",
        "num_ids": 2306
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert (round(solution('''1\n1 61\n'''), 7) == 1.016666667)\nassert (round(solution('''2\n1 60\n2 60\n'''), 7) == 1.0066666666)\nassert (round(solution('''3\n1 60\n2 60\n3 60\n'''), 7) == 1.0)\nassert (round(solution('''4\n1 60\n2 60\n3 60\n4 60\n'''), 7) == 1.0)\nassert (round(solution('''5\n1 60\n2 60\n3 60\n4 60\n5 60\n'''), 7) == 1.0)\nassert (round(solution('''6\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n'''), 7) == 1.0)\nassert (round(solution('''7\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n'''), 7) == 1.0)\nassert (round(solution('''8\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n'''), 7) == 1.0)\nassert (round(solution('''9\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n'''), 7) == 1.0)\nassert (round(solution('''10\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n'''), 7) == 1.0)\nassert (round(solution('''11\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n'''), 7) == 1.0)\nassert (round(solution('''12\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n'''), 7) == 1.0)\nassert (round(solution('''13\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n'''), 7) == 1.0)\nassert (round(solution('''14\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n'''), 7) == 1.0)\nassert (round(solution('''15\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n'''), 7) == 1.0)\nassert (round(solution('''16\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n'''), 7) == 1.0)\nassert (round(solution('''17\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n'''), 7) == 1.0)\nassert (round(solution('''18\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n'''), 7) == 1.0)\nassert (round(solution('''19\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n19 60\n'''), 7) == 1.0)\nassert (round(solution('''20\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n19 60\n20 60\n'''), 7) == 1.0)\nassert (round(solution('''21\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n19 60\n20 60\n21 60\n'''), 7) == 1.0)\nassert (round(solution('''22\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n19 60\n20 60\n21 60\n22 60\n'''), 7) == 1.0)\nassert (round(solution('''23\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n19 60\n20 60\n21 60\n22 60\n23 60\n'''), 7) == 1.0)\nassert (round(solution('''24\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n19 60\n20 60\n21 60\n22 60\n23 60\n24 60\n'''), 7) == 1.0)\nassert (round(solution('''25\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n19 60\n20 60\n21 60\n22 60\n23 60\n24 60\n25 60\n'''), 7) == 1.0)\nassert (round(solution('''26\n1 60\n2 60\n3 60\n4 60\n5 60\n6 60\n7 60\n8 60\n9 60\n10 60\n11 60\n12 60\n13 60\n14 60\n15 60\n16 60\n17 60\n18 60\n19 60\n",
        "test": "assert solution(\"1\\n1 61\\n1 61\\n1 61\") == \"measurement error\"",
        "num_ids": 4842
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an encrypted message and the key, can you write a program to decrypt it?\n    Don't forget that everything is using $0$-based indexing.\n    '''\n    input_line: List[str] = stdin.splitlines()\n    encrypted_message: str = input_line[0]\n    key: str = input_line[1]\n\n    # We're going to need a way to keep track of which character we're processing\n    current_char: str = encrypted_message[0]\n\n    # Let's initialize our variables\n    current_index: int = 0\n    decrypted_message: str = ''\n\n    # We're going to need a way to keep track of which character we're processing\n    current_char: str = encrypted_message[0]\n\n    # For each char in the message, we shift it by the key,\n    # and add the encrypted char to the decrypted message\n    while current_index < len(encrypted_message):\n\n        # First, we get the current char\n        current_char: str = encrypted_message[current_index]\n\n        # Second, we shift it by the key, and if it's out of bounds\n        # we wrap around to the beginning of the alphabet\n        new_index: int = (current_index + int(key[current_index % len(key)])) % 26\n\n        # Third, we add the encrypted char to the decrypted message\n        decrypted_message += chr(ord('A') + new_index)\n\n        # Fourth, we move on to the next character\n        current_index += 1\n\n    # We're done, so we return our decrypted message\n    return decrypted_message\n\ndef",
        "test": "assert solution('''CPMCRYY",
        "num_ids": 808
    },
    {
        "number": 4997,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    cup = 0\n    for i in range(n):\n        if stdin[i] == 'A':\n            cup = (cup + 1) % 3\n        elif stdin[i] == 'B':\n            cup = (cup + 2) % 3\n        else:\n            cup = (cup + 3) % 3\n    return str(cup)\n\nprint(solution(input()))\n",
        "test": "assert solution('ABC') == '2'",
        "num_ids": 457
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.strip().split()\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    third_smallest = numbers[2]\n    fourth_smallest = numbers[3]\n\n    maximum = smallest * third_smallest * fourth_smallest\n\n    return str(maximum)\n\n\ndef",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 303
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution('103 27') == '4' # multiple tests can be run to test for correctness.",
        "num_ids": 208
    }
]