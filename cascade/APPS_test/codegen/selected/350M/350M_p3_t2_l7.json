[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the question of finding the distinct simple path between two vertices in an undirected tree\n    \"\"\"\n    n = int(stdin)\n    G = [[] for _ in range(n)]\n    for i in range(n-1):\n        a, b, c = map(int, input().split())\n        G[a-1].append((b-1, c))\n        G[b-1].append((a-1, c))\n    paths = []\n    for i in range(n):\n        paths.append(len(G[i]))\n    paths.sort()\n    a = []\n    for i in range(n-1):\n        a.append(paths[i+1] - paths[i])\n    paths = a\n    res = -1\n    for i in range(n):\n        if paths[i] > res:\n            res = paths[i]\n    print(res)\n    return str(res)\n\nSolution Method",
        "test": "assert solution(stdin) == '5'",
        "num_ids": 1129
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    # sum of every pair\n    s = a + b + c + d + e\n    # count of every pair\n    n = s // 10\n    # k of every pair, i.e. all pairs in a(k) + b(k) + c(k) + d(k) + e(k)\n    k = 2 ** n\n    # if there are n pairs then total number of pairs can be reduced to 2^n\n    if s % k!= 0:\n        return \"\"\n    # for each pair, find its sum of elements\n    for _ in range(n):\n        tmp = a + b + c + d + e\n        # if sum of every pair equals the number of pairs then merge the numbers\n        if tmp % k == 0:\n            s = s // 10 + tmp // k * k\n            # if there are n pairs then total number of pairs can be reduced to 2^n\n            if s % k!= 0:\n                return \"\"\n    return str(s)\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"20 8\"",
        "num_ids": 553
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sum = 0\n    for i in range(n):\n        sum += int(stdin[i])\n    max_sum = sum\n    for i in range(n - 1, -1, -1):\n        sum = sum - int(stdin[i])\n        if sum >= k:\n            sum = sum % k\n            max_sum = max(sum, max_sum)\n        else:\n            return str(max_sum)\n    return str(max_sum)\n\nprint(solution(\"2 4 3 5 2\"))",
        "test": "assert solution('5 5 4') == '24'",
        "num_ids": 443
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution(stdin, int(stdin)))\n",
        "test": "assert solution(inp) == 'L'",
        "num_ids": 374
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    min_num = a[0] + a[1]\n\n    # if the array is empty\n    if not a:\n        return -1\n\n    # if the array is not empty\n    if min_num < 0:\n        return -1\n\n    # if the first value is equal to second value,\n    # return the minimum non-negative value\n    if a[0] == a[1]:\n        return min_num\n\n    # if the first value is not equal to the second value,\n    # perform addition of the first value and the second value\n    else:\n        min_num = a[0] + a[1]\n        for i in range(2, len(a)):\n            min_num = min(min_num, a[i] + a[i - 1])\n\n    return min_num",
        "test": "assert solution(4, 3, 2, 7, 7, 7) == 4, \"Expected 4, got {}\".format(4)",
        "num_ids": 825
    },
    {
        "number": 4005,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 > x2 or y1 > y2:\n        return 'NO'\n    if x1 == x2:\n        if y1 <= y2:\n            return 'YES'\n    if y1 == y2:\n        if x1 <= x2:\n            return 'YES'\n    if x1 < x2 and y1 < y2:\n        return 'YES'\n    return 'NO'\n",
        "test": "assert solution(\"2 2 4 4\") == \"YES\"",
        "num_ids": 1176
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    num = []\n    result = []\n    for i in range(10**9):\n        num.append(i)\n    for i in range(1, 10**9 + 1):\n        if num[i] in num:\n            result.append(num.count(num[i]))\n            num.remove(num[i])\n    print(len(result))\n    for i in range(len(result)):\n        answer += result[i]\n    print(answer)\n    return str(answer)\n\nSolution)\n\n\ndef",
        "test": "assert solution(10) == 19",
        "num_ids": 406
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    else:\n        f = [list(map(int, input().split())) for _ in range(n)]\n        f = [list(filter(lambda x: x!= 0, x)) for x in f]\n        return str(min(f) + max(f) - 2)",
        "test": "assert solution('3 2 0 0 1') == '3 4 2 1'",
        "num_ids": 536
    },
    {
        "number": 4008,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split(' ')))\n    n = len(a)\n    k = len(set(a))\n    for i in range(1,n):\n        a[i] = k\n    for i in range(n-1):\n        a[i+1] = max(a[i],a[i+1])\n    for i in range(n-1):\n        a[i+1] = min(a[i+1],a[i])\n    for i in range(n-2,-1,-1):\n        if a[i] == a[i+1]:\n            a[i] = 0\n    for i in range(n-1):\n        a[i] = max(a[i],a[i+1])\n    for i in range(n-2,-1,-1):\n        if a[i] == a[i+1]:\n            a[i] = 0\n    return \"NO\" if sum(a) == 0 else \"YES\"",
        "test": "assert solution(\"1 2 2 3\"), \"NO\"",
        "num_ids": 450
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n,x,y = map(int,stdin.split())\n    print(n,x,y)\n    def f(x,y):\n        remainder = y % 10\n        if remainder:\n            return f(x,y*10)+f(x*10,remainder+y)\n        else:\n            return f(x,y)\n    return str(f(x,y))",
        "test": "assert solution(stdin) == 1",
        "num_ids": 465
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if all(i < len(str) for i in range(1, len(stdin) // 3 + 1)) else \"NO\"\n\ndef",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 230
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    n = list(map(int, stdin.strip().split()))\n    for i in range(n[0]):\n        for j in range(n[1]):\n            print(a,n[i],n[j])\n            a = a*j + n[j]\n    return str(a)",
        "test": "assert solution(stdin) == '99999'",
        "num_ids": 618
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    res = 1\n    while True:\n        if a > b and a % c == 0 and b % c == 0:\n            break\n        else:\n            res += 1\n    return str(res)\n\n\"\"\"\n\ndef",
        "test": "assert solution(input()) == \"1 1 3\"",
        "num_ids": 757
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    if len(a) < 2:\n        return \"0\"\n    a.pop()\n    if len(a) == 0:\n        return \"0\"\n    a.pop()\n    if len(a) == 0:\n        return \"0\"\n    a.pop()\n    a = a[::-1]\n    for i in range(n-2):\n        a.pop()\n    a = a[::-1]\n    for i in range(n-1):\n        a.pop()\n    a = a[::-1]\n    return str(min(a))\n\n\"\"\"\n\ndef",
        "test": "assert solution(\"2 3 5\") == \"0\"",
        "num_ids": 597
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    global n, m\n    for _ in range(int(stdin)):\n        n, m = map(int, stdin.split())\n        if m == 0:\n            return \"0\"\n        elif n == 0:\n            return \"0\"\n        \n        n = n - 1\n        m = m - 1\n        if n > 0:\n            if m > 0:\n                if n + 1 <= m:\n                    n += 1\n                    m -= 1\n                else:\n                    m -= 1\n                    n -= 1\n            else:\n                if n > m:\n                    n -= 1\n                    m += 1\n                else:\n                    m += 1\n        \n        if m == 0:\n            return \"0\"\n        elif n == 0:\n            return \"0\"\n        \n    return \"1\"\n\n\"\"\"\n\nclass Solution:\n    def prepareForExam(self, n, m, s, d):\n        if m == 0:\n            return n + d\n        elif n == 0:\n            return (s + m) * d\n        elif n + 1 <= m:\n            return n + 1\n        else:\n            return (s + m) * d + 1\n    \n    def schedule(self, n, m, s, d):\n        count = 0\n        for i in range(n):\n            count += 1\n            if s + i < d:\n                count += 1\n            elif s + i == d:\n                count += 1\n            else:\n                count += self.prepareForExam(n, m, s, i)\n        \n        if count == m:\n            return \"1\"\n        else:\n            return \"0\"\n",
        "test": "assert solution(stdin) == 1",
        "num_ids": 1007
    },
    {
        "number": 4015,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(stdin) == -1,'solution(stdin)'",
        "num_ids": 177
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = input()\n    l = [i for i in range(len(t)+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            l[i] = min(l[i], l[i-j] + 1)\n    if l[n] < k:\n        print(t)\n    else:\n        print(t[l[n]-k:l[n]+1])\n    return\n\n-----See Also-----\nhttps://www.geeksforgeeks.org/substrings-of-string-t/\nhttps://stackoverflow.com/questions/1152234/minimum-substring-of-a-string-of-a-given-length\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"ababababa\"",
        "num_ids": 716
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n        a = int(stdin.strip())\n        ans = 0\n        for i in range(a):\n            n = int(stdin.strip())\n            if n!= 0:\n                ans += n\n            else:\n                n = 0\n        return str(ans)\n\n---Solution-----\n",
        "test": "assert solution(5) == '0'",
        "num_ids": 841
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin)\n    t = set(s)\n    S = {}\n    for i in range(n):\n        S[s[i]] = set(s[i + 1:])\n        t = t.intersection(S[s[i]])\n        S[s[i]] = S[s[i]].union(t)\n    return str(len(S[s[0]]))\n\n\"\"\"\n\ndef",
        "test": "assert solution('asd') == '1', \"dasdf\"",
        "num_ids": 344
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    edges = []\n    n = int(stdin)\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split(' '))\n        edges.append((u, v))\n        edges.append((v, u))\n    edges.sort(key=lambda x: x[0])\n    degree = [1 for _ in range(n)]\n    for edge in edges:\n        degree[edge[0]] += 1\n        degree[edge[1]] += 1\n    print('YES' if degree[1] == degree[2] or degree[1] == degree[3] else 'NO')\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n0 <= n, m <= 10^5\n0 <= v, u < n\n0 <= u, v <= n\n-inf <= D <= n\n1 <= edge.length <= 10^4\nedge[0]!= edge[1]\nedge[0] < edge[1]\n\n'''\n\n\ndef",
        "test": "assert solution(\"1 3 3\") == \"YES\"",
        "num_ids": 565
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1, h_2, m_2 = map(int, stdin.split())\n    h_3 = h_1\n    m_3 = m_1\n    if m_2 > 59:\n        m_2 = m_2 - 60\n        h_3 = h_3 + 1\n    if m_2 >= 60:\n        h_3 = h_3 + 1\n        m_3 = m_3 + 60\n    if m_2 < 0:\n        m_2 = m_2 + 60\n        h_3 = h_3 + 1\n    if m_2 <= 0:\n        h_3 = h_3 + 1\n    if h_3 >= 23:\n        h_3 = h_3 - 12\n        m_3 = m_3 + 60\n    if h_3 < 0:\n        h_3 = h_3 + 12\n        m_3 = m_3 - 60\n    return str(h_3) + \":\" + str(m_3)\n",
        "test": "assert solution(stdin) == \"11:11\"",
        "num_ids": 765
    },
    {
        "number": 4021,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N)\n    \n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        N = N - 1\n        return solution(N) + solution(N - 1)\n    \n",
        "test": "assert solution(2) == 1",
        "num_ids": 565
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    l = sorted(set(map(lambda x: int(x) - 1, a)))\n    r = sorted(set(map(lambda x: int(x) + 1, a)))\n    return ''.join(map(str, l)) + ',' + ''.join(map(str, r))\n\n\n\ndef",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 862
    },
    {
        "number": 4023,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stairs = [int(x) for x in stdin.strip().split()]\n\n    wall = [[0 for x in range(n+1)] for x in range(n+1)]\n\n    for i in range(1, n+1):\n        wall[i][0] = stairs[i-1]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            wall[i][j] = wall[i-1][j] + wall[i-1][j-1] + wall[i-1][j+1]\n\n    if wall[n][n] == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 766
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1:\n        return -1\n    if n == 1:\n        return 10\n    if k == 1:\n        return 0\n    num = [int(i) for i in stdin.split()]\n    res = 10\n    cur = set()\n    for i in range(n):\n        cur.update([i, str(num[i])])\n    cur = sorted(cur)\n    if len(cur) < k:\n        return -1\n    for i in range(n):\n        if cur[i] in cur[i + 1:]:\n            res = min(res, cur[i] + 1)\n    return res\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n'''\nimport heapq\n\nclass Solution:\n    def mincostToSet(self, s: str) -> int:\n        stk = []\n        for c in s:\n            if c not in 'abcdefghijklmnopqrstuvwxyz':\n                return -1\n            if len(stk) == 0 or stk[-1][0] < c:\n                stk.append((c, len(stk) + 1))\n            else:\n                stk[-1] = (c, stk[-1][1] + 1)\n        if stk[-1][1] == len(stk):\n            return stk[-1][0]\n        heapq.heapify(stk)\n        return -1\n",
        "test": "assert solution(\"asdfasdfgfghhjhgqrst\") == \"asdf\"",
        "num_ids": 2041
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    \n    if a > b:\n        if a > b:\n            if a > c:\n                return str(a - b - c)\n            else:\n                return str(b - c)\n        else:\n            return str(a - c)\n    else:\n        if a > b:\n            if a > c:\n                return str(a - c)\n            else:\n                return str(b - c)\n        else:\n            return str(a - c)\n\nprint(solution(\"2 1 1\"))\nprint(solution(\"3 2 2\"))\nprint(solution(\"1 100 1\"))\nprint(solution(\"30 20 10\"))\nprint(solution(\"31 23 23\"))\nprint(solution(\"31 23 23\"))\nprint(solution(\"31 23 23\"))\n",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 772
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0]*n for _ in range(n)]\n    b = [[0]*m for _ in range(m)]\n    for i in range(n):\n        for j in range(n):\n            if i < n//2:\n                a[i][j] = int(stdin[i*2+1])\n                a[n-i-1][j] = int(stdin[i*2])\n            else:\n                a[i][j] = int(stdin[i*2])\n                a[n-i-1][j] = int(stdin[i*2+1])\n            b[j][i] = int(stdin[i*2+2])\n    \n    for j in range(m):\n        for i in range(n):\n            if i < n//2:\n                b[i][j] = int(stdin[i*2+2])\n                b[n-i-1][j] = int(stdin[i*2+1])\n            else:\n                b[i][j] = int(stdin[i*2])\n                b[n-i-1][j] = int(stdin[i*2+1])\n    \n    def get_tiles(a, b):\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if a[i][j] == b[i][j]:\n                    count += 1\n        return count\n    \n    def get_comb(a, b):\n        return list(set(a)&set(b))\n    \n    def get_matrix(a, b, c):\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if a[i][j] == b[i][j] or b[i][j] == c:\n                    count += 1\n        return count\n\n    def get_count(a, b):\n        return a[0][0] + a[1][1] + a[2][2] + b[0][0] + b[1][1] + b[2][2]\n    \n    def get_min(a, b):\n        return a[0][0] + a[1][1] + a[2][2] + b[0][0] + b[1][1] + b[2][2]\n    \n    def get_max(a, b):\n        return a[0][0] + a[1][1] + a[2][2] + b[0][0] + b[1][1] + b[2][2]\n\n    def get_sum(a, b):\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                count += a[i][j] * b[i][j]\n        return count\n    \n    def get_max(a, b):\n        return max(get_matrix(a, b, 0), get_matrix(a, b, 1))\n    \n    def get_min(a, b):\n        return min(get_matrix(a, b, 0), get_matrix(a, b, 1))\n    \n    def get_sum(a, b):\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                count += a[i][j] * b[i][j]\n        return count\n\n    def get_max_sum(a, b):\n        return get_min(a, b) + get_max(a, b)\n\n    def get_count_sum(a, b):\n        return get_sum(a, b) + get_count(a, b)\n\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result += a[i][j] * b[i][j]\n    \n    return str(result)\n\n\n    \n",
        "test": "assert solution(\"1\") == \"NO\"",
        "num_ids": 1713
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    \n    # Convert the list to a dictionary and use python's sets\n    A = set(map(int, input().split()))\n    B = set(map(int, input().split()))\n\n    # Convert the A and B sets into a set\n    # This allows you to do a linear union operation\n    # with two sets\n    S = A | B\n\n    # Calculate the absolute value of the difference\n    # between the elements of the A and B sets\n    # and store the result in the variable $|sum(A) - sum(B)|$\n    # If there is no intersection between A and B\n    # it returns 0\n    res = 0\n    for elem in S:\n        res = max(abs(elem - sum(A)), abs(elem - sum(B)))\n    \n    # If there is a intersection\n    # it returns the absolute value of $|sum(A) - sum(B)|$\n    # otherwise return 0\n    return str(res)\n",
        "test": "assert solution(6) == 1",
        "num_ids": 366
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = list(s)\n    result = 0\n    \n    for i in range(n):\n        start = s[i]\n        end = s[i+1]\n        \n        if start == '(' or end == ')':\n            result += 1\n        \n        if start == '(' and end == ')':\n            for j in range(i+1, n):\n                if s[j] == '(':\n                    start = s[j]\n                    end = s[j+1]\n                    break\n                elif s[j] == ')':\n                    end = s[j]\n                    break\n            \n            result += len(s[i:]) - 1 - start\n        \n    return str(result)",
        "test": "assert solution
        "num_ids": 2080
    },
    {
        "number": 4029,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    for i in range(1, n + 1):\n        swap = n - i\n        if n % 25 == swap % 25:\n            n = n - swap\n    return n\n",
        "test": "assert solution(\"1035135\") == -1",
        "num_ids": 568
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    c = []\n    for i in range(n):\n        c.append(s[i])\n    c.sort()\n    c = ''.join(c)\n    return str(len(c))\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 366
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = []\n    for i in range(n):\n        ans.append(stdin[i:i+m])\n    return '\\n'.join(ans)\n\n\n\n-----Note-----\n\nYou have to use recursion for it.\n\n-----Time Complexity-----\n\nFor each $n$ line of strings, there are $m$ substrings.\n\nThe time complexity is $O(m^2)$, where $m$ is the number of words in the strings.\n\nThe space complexity is $O(n)$, which is a constant mentioned in the article.\n\"\"\"\n\ndef",
        "test": "assert solution(3) == \"NO\"",
        "num_ids": 543
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    left, right = 0, n\n    \n    while left + 1 < right:\n        mid = left + (right - left) // 2\n        \n        if mid == n:\n            return mid\n        \n        if abs(mid - k) <= mid:\n            left = mid\n        else:\n            right = mid\n    \n    return right\n\ndef",
        "test": "assert solution(",
        "num_ids": 461
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    res = get_minimal_perimeter(n, a, b)\n    return str(res)\n\ndef",
        "test": "assert solution(",
        "num_ids": 260
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    a = list(s)\n    for i in range(1, n):\n        if s[i] == 'a':\n            s[i] = 'a'\n            a[i] = 'a'\n        elif s[i] == 'b':\n            s[i] = 'b'\n            a[i] = 'b'\n        elif s[i] == 'c':\n            s[i] = 'c'\n            a[i] = 'c'\n        elif s[i] == 'd':\n            s[i] = 'd'\n            a[i] = 'd'\n        else:\n            s[i] = 'c'\n            a[i] = 'c'\n    answer = \"\".join(a)\n    return answer",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 2227
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A/B) if A <= B else str(-1)\n",
        "test": "assert solution(\"1 2\") == 12, \"Example #2: Wrong answer\"",
        "num_ids": 281
    },
    {
        "number": 4036,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = \"\"\n    for i in range(n):\n        a[i] -= 1\n        for j in range(i+1, n):\n            a[j] += 1\n        for k in range(i+1, n):\n            a[k] -= 1\n        if sum(a) < k:\n            answer += \"NO\"\n        elif sum(a) < 2*n:\n            answer += \"YES\"\n        else:\n            answer += \"YES\"\n    return answer\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 479
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_length = a[0] + a[1]\n    for i in range(n):\n        a[i] = a[i]/a[0]\n        for j in range(1, len(a)):\n            a[i] = a[i] + a[j]*a[j]\n        a[i] = math.floor(a[i])\n        a[i] = a[i]/a[0]\n        if a[i] > r:\n            a[i] = r\n        if a[i] < -r:\n            a[i] = -r\n        if a[i] >= max_length:\n            max_length = a[i]\n    print(max_length)\n    \n",
        "test": "assert solution(\"8 -1\") == \"3\"",
        "num_ids": 911
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, ans = [int(x) for x in stdin.split()]\n    \n    answer = []\n    \n    def solve(n):\n        nonlocal answer\n        if len(answer) >= n:\n            return answer\n        \n        for _ in range(1, n+1):\n            for i in range(1, n+1):\n                for j in range(1, n+1):\n                    x = str(i) + str(j)\n                    y = str(i) + str(j) + str(i)\n                    \n                    if x!= y:\n                        a = str(i) + str(j) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(j) + str(j) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(j) + str(j) + str(j)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(j) + str(j) + str(j)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i)",
        "test": "assert solution('10') == 'NO'",
        "num_ids": 1676
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, r = map(int, stdin.split())\n    \n    # Code here\n    i = n - 1\n    while i >= 0:\n        if r < 0:\n            break\n        elif r >= 0:\n            r -= stdin[i]\n            r = max(r, 0)\n        i -= 1\n    \n    if r > 0:\n        return 'NO'\n    else:\n        return 'YES'",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 431
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.strip().split(' ')[0])\n    C = [int(s) for s in stdin.split(' ') if s.strip()!= '']\n    \n    solution = ''\n    \n    def jump(i, d):\n        nonlocal solution\n        if i >= N:\n            if not solution:\n                return\n            if len(solution) < i + 2:\n                solution += '0'\n            if d == 0:\n                solution += '0'\n            else:\n                solution += '0'\n            solution += '1'\n        else:\n            jump(i + 1, d)\n            jump(i + 2, d)\n            solution += '0'\n            jump(i + 1, d)\n            solution += '0'\n            jump(i + 2, d)\n            solution += '0'\n    jump(0, 0)\n    return solution",
        "test": "assert solution(\"1 2 3 4 5\") == \"NO\"",
        "num_ids": 1019
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_a_subsequence(sub_str: str, s_str: str):\n        l = 0\n        r = len(sub_str) - 1\n        while l < r:\n            if s_str[l]!= sub_str[r]:\n                return False\n            l += 1\n            r -= 1\n        return True\n    \n    def remove_substring_from_string(sub_str: str, s_str: str):\n        l = 0\n        r = len(sub_str) - 1\n        while l < r:\n            if s_str[l]!= sub_str[r]:\n                s_str = s_str[:l] + s_str[l + 1:]\n                l += 1\n                r -= 1\n            else:\n                l += 1\n                r -= 1\n        return s_str\n    \n    def is_subsequence(sub_str: str, s_str: str):\n        s_str = remove_substring_from_string(sub_str, s_str)\n        if s_str == '':\n            return True\n        if is_a_subsequence(sub_str, s_str):\n            return True\n        return False\n    \n    def get_max_substring_length(s_str: str):\n        s_str = remove_substring_from_string(s_str, s_str)\n        return get_max_substring_length_recursive(s_str, 0, 0, 0, 0)\n    \n    max_length = 0\n    for l in range(len(stdin)):\n        for r in range(len(stdin), l, -1):\n            if is_subsequence(stdin[l:r], stdin):\n                max_length = max(max_length, r - l)\n    return max_length\n\ndef",
        "test": "assert solution('abab') == 2",
        "num_ids": 687
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        for j in range(i, int(stdin) + 1):\n            print(j, i)\n",
        "test": "assert solution(str) == \"3 2\"",
        "num_ids": 705
    },
    {
        "number": 4043,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n,d,k=map(int,stdin.split())\n    tree=[]\n    for i in range(n):\n        tree.append(list(map(int,stdin.split())))\n    tree=tree[:-1]\n    print(tree)\n    tree_dfs(tree,d,k)\n    return 'YES' if len(tree)==1 else 'NO'\n\n\n\ndef",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 696
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, x = map(int, stdin.split())\n    a -= 1\n    b -= 1\n    if a >= n or b >= n:\n        return \"\"\n    return ''.join('1' if a == 0 else '0' for _ in range(x + 1))",
        "test": "assert solution(2,2,3,1,3,3,3) == '100110'",
        "num_ids": 446
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Time\n    n = int(stdin.strip())\n    # Space\n    s = list(stdin.strip())\n\n    # Count substrings\n    substrings = {}\n    for i in range(n):\n        substring = s[i]\n        if substring in substrings:\n            substrings[substring] += 1\n        else:\n            substrings[substring] = 1\n\n    # Print result\n    res = \"\"\n    for substring, count in substrings.items():\n        if count == 1:\n            res += substring\n\n    return res\n",
        "test": "assert solution(input(\"ab\")) == \"YES\"",
        "num_ids": 368
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    q.sort()\n    if n == 0:\n        return \"-1\"\n    if n == 1:\n        return str(p[0])\n    \n    for i in range(n-1):\n        for j in range(n-i-1):\n            if q[j] == p[i+1]-p[i]:\n                q[j], q[j+1] = q[j+1], q[j]\n    for i in range(n-1):\n        if q[i] == p[n-i-1]:\n            q[i] = -1\n    return \"\".join(map(str, q))\n",
        "test": "assert solution(\"3\") == \"1 1 2\"",
        "num_ids": 802
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    x = int(s[1])\n    coins = []\n    for _ in range(n):\n        coins.append(int(input()))\n    print(len(coins))\n    \n    def move_chip(coordinate, steps):\n        if coins[coordinate] == 0:\n            return 0\n        if steps < 2:\n            return 0\n        \n        if coins[coordinate] < 0 or coins[coordinate] > coins[coordinate-1]:\n            return 0\n        \n        if coins[coordinate] == 2:\n            return steps - 1\n        \n        return move_chip(coordinate - 2, steps - 1) + move_chip(coordinate - 1, steps)\n    \n    print(move_chip(x, 0))\n    \n    return \"INFINITY\"\n-----Constraints-----\n1 <= n <= 10^4\n1 <= x <= 10^9\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\nExample 1:\n\nInput\n5\n1 2 3 4\n\nOutput\n2\n\nExplanation\n\nStart by placing the first chip in the 1st position, and from there move the 3rd chip by 2. The solution is 2, which is the number of coins required to move one chip to the same coordinate.\n\nNow, move the first chip to the right, and move the third chip by 1. The solution is 3, which is the number of coins required to move one chip to the same coordinate.\n\nNow, move the third chip to the right, and move the second chip by 1. The solution is 4, which is the number of coins required to move one chip to the same coordinate.\n\nSo the final answer is 2.\n\nExample 2:\n\nInput\n5\n1 2 3 4 5\n\nOutput\n2\n\nExplanation\n\nStart by placing the first chip in the 1st position, and from there move the 5th chip by 3. The solution is 2, which is the number of coins required to move one chip to the same coordinate.\n\nNow, move the first chip to the right, and move the 5th chip by 2. The solution is 2, which is the number of coins required to move one chip to the same coordinate.\n\nNow, move the 5th chip to the right, and move the 4th chip by 1. The solution is 4, which is the number of coins required to move one chip to the same coordinate.\n\nSo the final answer is 2.\n\nConstraints:\n\n0 <= n <= 10^4\n-10^9 <= x <= 10^9\n\"\"\"\n\nclass Solution:\n    def solveNQueens(self, n: int) -> int:\n        \n        def rec(row, col, xs):\n            if len(xs) == n:\n                return True\n            \n            if row == n:\n                return False\n            \n            for i in range(n):\n                if i in xs:\n                    continue\n                \n                if i + col < n and rec(row + 1, col + 1, xs + [i + col]):\n                    continue\n                \n                if i - col >= 0 and rec(row + 1, col - 1, xs + [i - col]):\n                    continue\n            \n            return True\n        \n        return rec(0, 0, [])",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 1006
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n < 0:\n        return \"no\"\n    if n > 10**18:\n        return \"no\"\n    result = 0\n    for i in range(1,n+1):\n        if i == n:\n            result += 1\n        else:\n            result += solution(str(i))\n    return str(result)",
        "test": "assert solution(10) == 5",
        "num_ids": 335
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_1 = int(stdin[0])\n    a_2 = int(stdin[1])\n    a_3 = int(stdin[2])\n    b_1 = int(stdin[3])\n    b_2 = int(stdin[4])\n    b_3 = int(stdin[5])\n    min_a = a_1 + a_2 + a_3\n    min_b = b_1 + b_2 + b_3\n    max_a = a_1 + a_2 + a_3\n    max_b = b_1 + b_2 + b_3\n    return str(min(min_a, min_b, max_a, max_b))\n'''",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 534
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    blocks = set(range(a + 1))\n    for _ in range(b):\n        l, r = map(int, stdin.split())\n        blocks = blocks - set(range(l, r + 1))\n    print(len(blocks))\n    return''.join(map(str, sorted(blocks)))\n",
        "test": "assert solution(\"2 2 2\") == \"4\"",
        "num_ids": 343
    },
    {
        "number": 4051,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    height_array = [int(i) for i in stdin.split()]\n    if len(height_array) == 1:\n        return \"NO\"\n    stack = []\n    for i in height_array[1:]:\n        while stack and i < stack[-1]:\n            stack.pop()\n        stack.append(i)\n    if len(stack) == 1:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 478
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    if n == 0 or k > 10**4:\n        return \"-1\"\n    \n    l = list(stdin)\n    l = [str(i) for i in l]\n    l = [i for i in l if i.isalpha()]\n    l = [int(i) for i in l]\n    i = 0\n    j = 0\n    while True:\n        while i < n and j < n:\n            if l[i] == l[j]:\n                l[i], l[j] = l[j], l[i]\n            i += 1\n            j += 1\n        if j >= n:\n            break\n    for i in range(n - 1):\n        l.insert(i, l.pop(n - 1))\n    l = ''.join(l)\n    j = 0\n    answer = -1\n    while True:\n        if l.count('a') == l.count('z'):\n            if answer == -1:\n                answer = k\n            j += 1\n            k -= 1\n            while l.count('a') == l.count('z'):\n                l = l.replace('a', 'z', 1)\n        elif l.count('a') > l.count('z'):\n            answer = k\n            k -= 1\n        elif l.count('z') > l.count('a'):\n            answer = k\n            k -= 1\n        if k < 0:\n            break\n        l = l.replace('z', 'a', 1)\n        l = l.replace('a', 'z', 1)\n    return str(answer)",
        "test": "assert solution(\"abcd\") == \"3 6 4 4 4\"",
        "num_ids": 933
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [stdin[i:i+n] for i in range(0, n, 2)]\n    # print(s)\n    return \"\".join(s[i] for i in range(len(s) - 1))\n\nprint(solution(\"ba\"))",
        "test": "assert solution(1) == \"S\", \"1-2\"",
        "num_ids": 426
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a_list = stdin.split()\n    a = list(map(int, a_list))\n    print(a[0])\nsolution(input())\n",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 164
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    k, a, n = map(int, stdin.split())\n    b = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if b[j]==0:\n                b[i]=1\n    c=0\n    for i in range(k-1):\n        if b[i]==1 and b[i+1]==1:\n            c+=1\n    for i in range(n-k):\n        if b[i]==1:\n            c+=1\n    return str(c)\n\n-----Advanced-----\n\nTime complexity: O(n)\n\nSpace Complexity: O(n)\n",
        "test": "assert solution(\"2 1 1 1 1 0 0 0 0\") == \"1\"",
        "num_ids": 638
    },
    {
        "number": 4056,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    x = set(a)\n    result = 0\n    for i in x:\n        result += a.count(i)\n    return str(result)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 330
    },
    {
        "number": 4057,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\" \")[0])\n    a = [int(stdin.strip().split(\" \")[i]) for i in range(1, n + 1)]\n    a.sort()\n    a = list(set(a))\n    a.sort()\n    return \" \".join([str(i) for i in a])\n    \n",
        "test": "assert solution(\"1 2 4 3 3 2\") == \"2\"",
        "num_ids": 421
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    heaters = list(map(int, stdin.split()))\n    heaters_sorted = sorted(heaters)\n    c_n = 0\n    c_r = 0\n    for i in range(n):\n        if c_n == r:\n            c_n = 0\n            c_r += 1\n        elif c_r == r:\n            c_n += 1\n            c_r = 0\n        else:\n            c_n += 1\n            c_r += 1\n    if c_n == n:\n        print(-1)\n        return\n    print(c_n)\n    if c_r == r:\n        print(c_r)\n        return\n    if c_r < r:\n        c_n, c_r = c_r, c_n\n        c_n -= 1\n    if c_n < n:\n        c_n, c_r = c_r, c_n\n        c_n += 1\n    print(c_n)\n    print(c_r)\n    return\n\n\nsolution(\"4 3\")\n",
        "test": "assert solution('10 3') == 2",
        "num_ids": 1912
    },
    {
        "number": 4059,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = []\n    for line in stdin:\n        a.append(list(map(int, line.split(\" \"))))\n    \n    t = len(a)\n    if t == 1:\n        return str(1)\n    \n    def solve(a):\n        if len(a)!= t:\n            return 0\n        \n        for i in range(t):\n            for j in range(i+1, t):\n                if a[i] + a[j] == t:\n                    return 1\n        \n        return 0\n        \n    for i in range(t):\n        if solve(a[i]):\n            return str(1)\n    \n    return str(0)\n\n\"\"\"\n",
        "test": "assert solution('2'), 3",
        "num_ids": 357
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    for i in range(1, n):\n        if s[i - 1] == '(':\n            if s[i - 2] == '(':\n                s[i - 1] = ')('\n                s[i] = '('\n            elif s[i - 2] == ')':\n                s[i - 1] = ')'\n                s[i] = ')'\n        else:\n            if s[i - 1] == '(':\n                s[i - 1] = '('\n                s[i] = ')'\n    return ''.join(s)\n    \n----------------------------------------------------------------------------------\n\nInput\n6\n(((())\n\nOutput\n3\n\nInput\n6\n)()()\n\nOutput\n0\n\nInput\n8\n)))(((((\n\nOutput\n0\ndef",
        "test": "assert solution(6) == 6",
        "num_ids": 1069
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.split(' '))\n    t = s.pop(0)\n    k = 0\n    c = 1\n    for i in range(len(s)):\n        if k == len(s):\n            break\n        elif s[k]!= t[i]:\n            c = 1\n            k = i\n        else:\n            c += 1\n    if c == 0:\n        return '0'\n    return str(c)\n\nsolution(\"baaabccbabcb\")\n",
        "test": "assert solution(\"ccca\") == \"2\"",
        "num_ids": 1888
    },
    {
        "number": 4062,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_even(n):\n        return n % 2 == 0\n    def is_odd(n):\n        return not is_even(n)\n\n    a, b, c, d = map(int, stdin.split())\n    answer = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if is_odd(x * y):\n                answer = max(x, y)\n    print(answer)\n",
        "test": "assert solution(\"2 2 1 1\") == 2",
        "num_ids": 973
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, d = map(int, stdin.split())\n    if N % 2!= 0:\n        return \"0\"\n    dp = [[[0, 0]]]\n    for i in range(1, N):\n        for j in range(len(dp)):\n            dp.append(dp[j].copy())\n            dp[j][0][0] += dp[i][0][0]\n            dp[i][0][0] += dp[j][0][0]\n            dp[i][0][1] += dp[j][0][1]\n            dp[j][0][1] += dp[i][0][1]\n    return str(dp[N][0][1] // dp[N][0][0])\n\n\"\"\"\n",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 295
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a_i = max(l, r)\n    a_j = max(h, l-a_i+1)\n    a_k = max(h+a_i-l, 0)\n    a_m = max(a_i+a_j-h, 0)\n    if a_k > a_m:\n        return str(a_k)\n    return str(a_m)\n\"\"\"",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 447
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n,*A = map(int,stdin.split())\n    if len(A)!= n:\n        return str(len(A))\n    for i in range(n):\n        s,p = A[i],A[i+1]\n        if s not in A or s == p:\n            break\n    return str(len(A))\n\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n",
        "test": "assert solution(stdin) == 4",
        "num_ids": 1704
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a_n = n * [a]\n    for i in range(n):\n        if i % 2 == 0:\n            a_n[i] = max(a_n[i], a_n[i + 1])\n        else:\n            a_n[i] = min(a_n[i], a_n[i - 1])\n    lcm = a_n[0]\n    for i in range(1, n):\n        lcm = (lcm * a_n[i]) // (a_n[i - 1] * a_n[i])\n    print(lcm)\n",
        "test": "assert solution(input()) == 5 and solution(input()) == 5",
        "num_ids": 671
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    # print(n, s)\n    print(s[::-1])\n    if n % 3 == 0:\n        return s[::-1]\n    else:\n        return ''.join([s[i] if i % 3 == 0 else s[i] for i in range(n)])\n",
        "test": "assert solution == '021', \"should be equal to 201\"",
        "num_ids": 301
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n\n-----Initialization-----\n\nInput:\n2\n1 1\n\nOutput:\n3\n\nExplanation\n\nStep 1:\n   a_1 = 1\n   a_2 = 1\n   a_3 = 1\n   a_4 = 2\n   a_5 = 4\n   a_6 = 6\n   a_7 = 7\n   a_8 = 8\n   a_9 = 9\n   a_10 = 10\n   a_11 = 11\n   a_12 = 12\n\nStep 2:\n   a_1 = 1\n   a_2 = 1\n   a_3 = 1\n   a_4 = 1\n   a_5 = 2\n   a_6 = 3\n   a_7 = 4\n   a_8 = 5\n   a_9 = 6\n   a_10 = 7\n   a_11 = 8\n   a_12 = 9\n   a_13 = 10\n   a_14 = 11\n   a_15 = 12\n\nStep 3:\n   a_1 = 1\n   a_2 = 2\n   a_3 = 2\n   a_4 = 3\n   a_5 = 4\n   a_6 = 5\n   a_7 = 6\n   a_8 = 7\n   a_9 = 8\n   a_10 = 9\n   a_11 = 10\n   a_12 = 11\n   a_13 = 12\n   a_14 = 13\n   a_15 = 14\n   a_16 = 15\n   a_17 = 16\n   a_18 = 17\n   a_19 = 18\n   a_20 = 19\n   a_21 = 20\n   a_22 = 21\n   a_23 = 22\n   a_24 = 23\n   a_25 = 24\n   a_26 = 25\n   a_27 = 26\n   a_28 = 27\n   a_29 = 28\n   a_30 = 29\n   a_31 = 30\n   a_32 = 31\n   a_33 = 32\n   a_34 = 33\n   a_35 = 34\n   a_36 = 35\n   a_37 = 36\n   a_38 = 37\n   a_39 = 38\n   a_40 = 39\n   a_41 = 40\n   a_42 = 41\n   a_43 = 42\n   a_44 = 43\n   a_45 = 44\n   a_46 = 45\n   a_47 = 46\n   a_48 = 47\n   a_49 = 48\n   a_50 = 49\n   a_51 = 50\n   a_52 = 51\n   a_53 = 52\n   a_54 = 53\n   a_55 = 54\n   a_56 = 55\n   a_57 = 56\n   a_58 = 57\n   a_59 = 58\n   a_60 = 59\n   a_61 = 60\n   a_62 = 61\n   a_63 = 62\n   a_64 = 63\n   a_65 = 64\n   a_66 = 65\n   a_67 = 66\n   a_68 = 67\n   a_69 = 68\n   a_70 = 69\n   a_71 = 70\n   a_72 = 71\n   a_73 = 72\n   a_74 = 73\n   a_75 = 74\n   a_76 = 75\n   a_77 = 76\n   a_78 = 77\n   a_79 = 78\n   a_80 = 79\n   a_81 = 80\n   a_82 = 81\n   a_83 = 82\n   a_84 = 83\n   a_85 = 84\n   a_86 = 85\n   a_87 = 86\n   a_88 = 87\n   a_89 = 88\n   a_90 = 89\n   a_91 = 90\n   a_92 = 91\n   a_93 = 92\n   a_94 = 93\n   a_95 = 94\n   a_96 = 95\n   a_97 = 96\n   a_98 = 97\n   a_99 = 98\n   a_100 = 99\n   a_101 = 100\n   a_102 = 101\n   a_103 = 102\n   a_104 = 103\n   a_105 = 104\n   a_106 = 105\n   a_107 = 106\n   a_108 = 107\n   a_109 = 108\n   a_110 = 109\n   a_111 = 110\n   a_112 = 111\n   a_113 = 112\n   a_114 = 113\n   a_115 = 114\n   a_116 = 115\n   a_117 = 116\n   a_118 = 117\n   a_119 = 118\n   a_120 = 119\n   a_121 = 120\n   a_122 = 121\n   a_123 = 122\n   a_124 = 123\n   a_125 = 124\n   a_126 = 125\n   a_127 = 126\n   a_128 = 127\n   a_129 = 128\n   a_130 = 129\n   a_131 = 130\n   a_132 = 131\n   a_133 = 132\n   a_134 = 133\n   a_135 = 134\n   a_136 = 135\n   a_137 = 136\n   a_138 = 137\n   a_139 = 138\n   a_140 = 139\n   a_141 = 140\n   a_142 = 141\n   a_143 = 142\n   a_144 = 143\n   a_145 = 144\n   a_146 = 145\n   a_147 = 146\n   a_148 = 147\n   a_149 = 148\n   a_150 = 149\n   a_151 = 150\n   a_152 = 151\n   a_153 = 152\n   a_154 = 153\n   a_155 = 154\n   a_156 = 155\n   a_157 = 156\n   a_158 = 157\n   a_159 = 158\n   a_160 = 159\n   a_161 = 160\n   a_162 = 161\n   a_163 = 162\n   a_164 = 163\n   a_165 = 164\n   a_166 = 165\n   a_167 = 166\n   a_168 = 167\n   a_169 = 168\n   a_170 = 169\n   a_171 = 170\n   a_172 = 171\n   a_173 = 172\n   a_174 = 173\n   a_175 = 174\n   a_176 = 175\n   a_177 = 176\n   a_178 = 177\n   a_179 = 178\n   a_180 = 179\n   a_181 = 180\n   a_182 = 181\n   a_183 = 182\n   a_184 = 183\n   a_185 = 184\n   a_186 = 185\n   a_187 = 186\n   a_188 = 187\n   a_189 = 188\n   a_190 = 189\n   a_191 = 190\n   a_192 = 191\n   a_193 = 192\n   a_194 = 193\n   a_195 = 194\n   a_196 = 195\n   a_197 = 196\n   a_198 = 197\n   a_199 = 198\n   a_200 = 199\n   a_201 = 200\n   a_202 = 201\n   a_203 = 202\n   a_204 = 203\n   a_205 = 204\n   a_206 = 205\n   ",
        "test": "assert solution(input) == '4'",
        "num_ids": 3515
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n'''\nimport math\ndef",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 230
    },
    {
        "number": 4070,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 2 == 0:\n        return '2'\n    else:\n        return '0'\n",
        "test": "assert solution(a) == \"0\"",
        "num_ids": 238
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    p = 0\n    #print(stdin)\n    a = stdin\n    b = []\n    for i in a:\n        if i.isdigit():\n            b.append(i)\n    print(b)\n    #print(len(b))\n    c = 0\n    for i in range(len(b)):\n        c += int(b[i])\n    print(c)\n    print(c % 1000000)\n    return c % 1000000",
        "test": "assert solution(\"6\") == \"26\"",
        "num_ids": 329
    },
    {
        "number": 4072,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    str_set = set()\n    for i in range(1, 10):\n        str_set.add(str(i))\n    answer = 0\n    for i in range(2, 99):\n        if str(i) not in str_set:\n            answer = 1\n            break\n    return answer\n",
        "test": "assert solution(13) == 1",
        "num_ids": 315
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # ===Modify here===\n    return str(int(stdin.split()[0])+int(stdin.split()[1]))\n\n-----Initialization-----\nn = int(input())\na = list(map(int, input().split()))",
        "test": "assert solution(\"2 1 5 3\") == \"7\"",
        "num_ids": 406
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip().split()[0])\n    y = int(stdin.strip().split()[1])\n    k = int(stdin.strip().split()[2])\n    n = x*y*k\n    return str(n//(x*y*k))\n\nn = int(stdin.strip().split()[0])\nk = int(stdin.strip().split()[1])\n\ndef",
        "test": "assert solution(input()) == '2'",
        "num_ids": 307
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k, p = map(int, stdin.split())\n    # Initialize \"on\" and \"off\" state to 0 and 1 respectively.\n    s_on = [0, 1]\n    s_off = [1, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i = [0, 0]\n    s_off_i = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_i = [0, 0]\n    s_off_i_i = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_j = [0, 0]\n    s_off_i_j = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_k = [0, 0]\n    s_off_i_k = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_l = [0, 0]\n    s_off_i_l = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_m = [0, 0]\n    s_off_i_m = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_n = [0, 0]\n    s_off_i_n = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_o = [0, 0]\n    s_off_i_o = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_p = [0, 0]\n    s_off_i_p = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_q = [0, 0]\n    s_off_i_q = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_r = [0, 0]\n    s_off_i_r = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_s = [0, 0]\n    s_off_i_s = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_t = [0, 0]\n    s_off_i_t = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_u = [0, 0]\n    s_off_i_u = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_v = [0, 0]\n    s_off_i_v = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_w = [0, 0]\n    s_off_i_w = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_x = [0, 0]\n    s_off_i_x = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_y = [0, 0]\n    s_off_i_y = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_z = [0, 0]\n    s_off_i_z = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_x2 = [0, 0]\n    s_off_i_x2 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_y2 = [0, 0]\n    s_off_i_y2 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_z2 = [0, 0]\n    s_off_i_z2 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_x3 = [0, 0]\n    s_off_i_x3 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_y3 = [0, 0]\n    s_off_i_y3 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_z3 = [0, 0]\n    s_off_i_z3 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_x4 = [0, 0]\n    s_off_i_x4 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_y4 = [0, 0]\n    s_off_i_y4 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on",
        "test": "assert solution(inp) == 1",
        "num_ids": 2563
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    x, y = divmod(A + B, 60)\n    x, y = (H + M) - x - y, x - A - B\n    return str(abs(x) * 60 + abs(y))\n\ndef",
        "test": "assert solution(input) == '5.5000000000000000'",
        "num_ids": 259
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  a = [int(stdin.strip()) for _ in range(n)]\n  a.sort()\n  m = a[(n-1)//2]\n  return str(m * (m+1) // 2)\n\ndef",
        "test": "assert solution(\"15 2\") == \"6\"",
        "num_ids": 592
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    a=[list(map(int,stdin.split()))for i in range(n)]\n    a=[list(map(int,a[i][:m]))for i in range(n)]\n    b=[]\n    b.append(a[0][0]+a[1][0])\n    b.append(a[0][1]+a[1][1])\n    b.append(a[0][2]+a[1][2])\n    b.append(a[0][3]+a[1][3])\n    b.append(a[0][4]+a[1][4])\n    for i in range(1,n-1):\n        a[i][0]=min(a[i][0]+b[i-1],a[i][0]+b[i+1])\n        a[i][1]=min(a[i][1]+b[i-1],a[i][1]+b[i+1])\n        a[i][2]=min(a[i][2]+b[i-1],a[i][2]+b[i+1])\n        a[i][3]=min(a[i][3]+b[i-1],a[i][3]+b[i+1])\n        a[i][4]=min(a[i][4]+b[i-1],a[i][4]+b[i+1])\n        b.append(min(a[i][0]+b[i-1],a[i][0]+b[i+1]))\n        b.append(min(a[i][1]+b[i-1],a[i][1]+b[i+1]))\n        b.append(min(a[i][2]+b[i-1],a[i][2]+b[i+1]))\n        b.append(min(a[i][3]+b[i-1],a[i][3]+b[i+1]))\n        b.append(min(a[i][4]+b[i-1],a[i][4]+b[i+1]))\n    b.append(a[n-1][4])\n    b.sort()\n    return str(b[-1])",
        "test": "assert solution(stdin) == '7'",
        "num_ids": 2183
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def solution_helper(input):\n        if len(input) <= 0:\n            return \"\"\n        if len(input) % 2 == 0:\n            return solution_helper(input[0:len(input)//2]) + solution_helper(input[len(input)//2:])\n        else:\n            return solution_helper(input[0:len(input)//2]) + solution_helper(input[len(input)//2 + 1:])\n        \n    return solution_helper(stdin.strip())\n",
        "test": "assert solution(2) == 'No', \"Fail\"",
        "num_ids": 639
    },
    {
        "number": 4080,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.split(' ')[0])):\n        n, m = map(int, stdin.split(' '))\n        a = list(map(int, stdin.split(' ')))\n        l = sorted(a[:n])\n        r = sorted(a[n:], reverse=True)\n        print(l)\n        print(r)\n        j = 1\n        for j in range(m):\n            if j == 0:\n                if a[r[0] - 1] > a[r[1] - 1]:\n                    print(a[r[0] - 1] - a[r[1]])\n                    return str(a[r[0] - 1] - a[r[1]])\n                else:\n                    print(a[r[1] - 1] - a[r[0]])\n                    return str(a[r[1] - 1] - a[r[0]])\n            elif j == m - 1:\n                if a[l[0] - 1] > a[l[1] - 1]:\n                    print(a[l[0] - 1] - a[l[1]])\n                    return str(a[l[0] - 1] - a[l[1]])\n                else:\n                    print(a[l[1] - 1] - a[l[0]])\n                    return str(a[l[1] - 1] - a[l[0]])\n            else:\n                if a[l[j] - 1] > a[l[j + 1] - 1]:\n                    print(a[l[j] - 1] - a[l[j + 1] - 1])\n                    return str(a[l[j] - 1] - a[l[j + 1] - 1])\n                else:\n                    print(a[l[j] - 1] - a[l[j + 1]])\n                    return str(a[l[j] - 1] - a[l[j + 1]])\n    return str(0)\n",
        "test": "assert solution('1 0') == '0'",
        "num_ids": 1962
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    longest_seq = [0]*(n+1)\n    longest_seq[0] = 1\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if a[i] < a[j]:\n                longest_seq[i] = max(longest_seq[i], longest_seq[j] + 1)\n    print(longest_seq[-1])\n    return \"\".join(map(str, longest_seq))",
        "test": "assert solution(stdin) == '4'",
        "num_ids": 702
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(map(int, list(map(int, stdin.split()))))))",
        "test": "assert solution(stdin) == \"4\"",
        "num_ids": 412
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n\n    answer = 0\n    for i in range(n):\n        answer += (a[i] // (2 ** (i + 1))) * (2 ** i)\n\n    return str(answer)\n",
        "test": "assert solution(0, [1, 2, 3, 4, 5]) == 1",
        "num_ids": 380
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N,A,B,r = map(int,input().split())\n    balls = [int(x) for x in input().split()]\n    \n    answer = 0\n    \n    for b in balls:\n        if b-1<0:\n            b=r\n        answer += int(b-1)\n    \n    print(answer)\n    return \"Yes\"\n    \n\"\"\"\nN = int(input())\na, b, r = map(int,input().split())\nballs = list(map(int,input().split()))\nprint(solution(N,a,b,r,balls))\n\n\"\"\"",
        "test": "assert solution(\"20 8\") == \"4\"",
        "num_ids": 2474
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    answer = list()\n    for _ in range(int(stdin)):\n        t = int(stdin.split(' ')[1])\n        lst = stdin.split(' ')[2:-1]\n        \n        res = 0\n        for i in range(0, t):\n            if i == 0:\n                res = int(lst[i])\n            elif i == t - 1:\n                res = res * int(lst[i])\n            else:\n                res = res * int(lst[i]) + int(lst[i + 1])\n        answer.append(res)\n    answer = min(answer)\n    return str(answer)\n",
        "test": "assert solution(stdin) == 48",
        "num_ids": 1186
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        if a[i] == a[-1-i]:\n            del a[-1-i]\n    print(' '.join(map(str, a)))\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a[i] <= 10^3\na[i]!= a[j] for each j!= i if a[j]!= a[i]\na[j]!= a[i] if j!= i for each j!= i if a[j] == a[i]\n\nTime Limit: 1 sec\nMemory Limit: 1 MB\n\n\ndef",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 441
    },
    {
        "number": 4087,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    print(min(numbers))\n    \n    return str(min(numbers))",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 245
    },
    {
        "number": 4088,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution('a') == 'a'",
        "num_ids": 694
    },
    {
        "number": 4089,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for i in range(N+1, N*(N-1)//2 + 1):\n        result = \"\"\n        digits = list(str(i))\n        for j in range(len(digits)-1, -1, -1):\n            result += digits[j]\n            if result[-1]!= \"0\":\n                break\n        else:\n            return result[:-1]\n    return result\n\n-----Sample Output-----\nb\n\ndef",
        "test": "assert solution(input) == \"b\"",
        "num_ids": 435
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    w = stdin.strip().split(' ')\n    a = [0 for _ in range(n)]\n    for i in range(n):\n        w[i] = w[i].replace(' ', '')\n        for j in range(i + 1, n):\n            if w[i] == w[j]:\n                a[i] += 1\n                a[j] += 1\n    for i in range(n):\n        if a[i] < 2:\n            a[i] = 0\n    for i in range(n):\n        if a[i] < 2:\n            a[i] = 0\n    print(len(set(a)))\n\nsolution(stdin)\n",
        "test": "assert solution(",
        "num_ids": 1727
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(stdin.strip()) for _ in range(n)]\n    max_profit = 0\n    for i in range(1, n):\n        for j in range(k):\n            if i < j:\n                break\n            if a[i] - a[j] > max_profit:\n                max_profit = a[i] - a[j]\n    return str(max_profit)\n",
        "test": "assert solution(stdin) == \"2000\"",
        "num_ids": 381
    },
    {
        "number": 4092,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[1])\n    a_1 = int(stdin.strip().split()[2])\n    a_2 = int(stdin.strip().split()[3])\n    a_3 = int(stdin.strip().split()[4])\n    a_n = int(stdin.strip().split()[5])\n    if a_1 + a_2 + a_3 + a_n == 0:\n        return str(0)\n    if a_1 + a_2 + a_3 + a_n < 0:\n        return \"0\"\n    a_3 -= 1\n    a_1 -= 1\n    a_2 -= 1\n    a_1 %= n\n    a_2 %= n\n    a_3 %= n\n    a_n %= n\n    a = a_1 + a_2 + a_3 + a_n\n    a %= n\n    if a_1 == a_2 == a_3 == a_n:\n        return str(0)\n    else:\n        return str(min(a, n - a + 1))\n",
        "test": "assert solution('1 -5 -1 2') == '1'",
        "num_ids": 525
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = list(map(int, stdin.split()))\n    a = [int(i) for i in range(n)]\n    a.sort()\n    answer = max(a) - min(a)\n    \n    print(answer)\n\n\nsolution(\n    \"5 2 4 10 10000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000",
        "test": "assert solution(\"5 100\") == \"14\"",
        "num_ids": 1734
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    str_lst = stdin.split()\n    k = int(str_lst[0])\n    nums = list(map(int, str_lst[1].split(',')))\n    # str_lst[1] is the remaining string\n    # from the third to end of the list\n    # [[7,77,777], [7,77,777]]\n    #\n    # So you have to use numbers as a key,\n    # since numbers are not unique,\n    # we need to check each number and\n    # if it's greater than 0 then it is multiples of k.\n    result = []\n    for n in nums:\n        result.append(n % k)\n    # print(result)\n    # return \",\".join(map(str, result))\n    return \",\".join(map(str, result[::-1]))\n\n\ndef",
        "test": "assert solution(string) == \"4\"",
        "num_ids": 397
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = []\n    for _ in range(n):\n        p.append(list(map(int, stdin.strip().split())))\n    p.sort()\n    result = 0\n    for index, x in enumerate(p):\n        result += x[index]\n        result -= x[index - 1] + x[index + 1]\n    return str(result // 2)\n\n\n\nInput\n5 4\n2 4 5 3 1\n\nOutput\n4\n\nInput\n15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\n\nOutput\n48\n",
        "test": "assert solution(\"5 5\") == \"1 5\"",
        "num_ids": 446
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(m):\n        a.append(int(stdin.split()[i]))\n    for i in range(m, n):\n        a.append(a[i] * (i - m))\n    a.sort()\n    \n    days = 0\n    c = 0\n    for i in range(m):\n        days += a[i]\n        c += a[i]\n        \n    if c > days:\n        return -1\n    elif c == days:\n        return days\n    else:\n        return c\n\n\n-----Brute force method-----\n\nTime O(N^2)\nSpace O(N)\n\"\"\"\ndef",
        "test": "assert solution(stdin) == -1, \"The implementation is wrong\"",
        "num_ids": 1114
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = -1\n    b = list(map(int, input().split()))\n    print(Polycarp(b, n))\n    return answer\n\ndef",
        "test": "assert solution(stdin) == '-1'",
        "num_ids": 578
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    def check(list):\n        for i in range(len(list)-1):\n            for j in range(i+1, len(list)):\n                if abs(list[i] - list[j]) == 1:\n                    return False\n        return True\n    \n    \n    if check([*map(int, input().split())]):\n        print(k)\n    else:\n        print(-1)\n    \n    \n\n-----Be Careful-----\n\nIn the last round, the team between 2 students have been decided. Therefore, the teams are not balanced. Thus, you should not pick the team with the maximum number of students that has a grade higher than $20, and have the same number of teachers. In this case, we should ignore the team with the maximum number of students that has a grade higher than $20.\n\nHowever, in the last round, the team between 1 student has been decided. Therefore, the team is balanced.\n\nIn the last round, the teams are not balanced. Thus, you should not pick the team with the maximum number of students that has a grade higher than $20, and have the same number of teachers. In this case, we should ignore the team with the maximum number of students that has a grade higher than $20.\n\n\"\"\"\n",
        "test": "assert solution(stdin) == '4'",
        "num_ids": 1150
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    score = [int(x) for x in stdin.split()]\n    min_score = [0, 0]\n    for i in range(1, len(score)):\n        min_score[0] += min(score[i - 1], score[i])\n        min_score[1] += score[i]\n    answer = []\n    for i in range(len(min_score)):\n        answer.append(min_score[i] // 5)\n    answer = sorted(answer)\n    answer = answer[0]\n    if answer == 0:\n        return -1\n    else:\n        return answer\n",
        "test": "assert solution([\"5 5\", \"1 1\", \"1 1\", \"1 1\"]) == \"7\"",
        "num_ids": 2083
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # 1:\n    N, K, Q = map(int, stdin.split())\n    answer = \"Yes\"\n    if N == K == Q == 1:\n        answer = \"No\"\n    return answer\n",
        "test": "assert solution(\"3 4 2\") == \"No\"",
        "num_ids": 509
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    #print(n,m)\n    a = [list(map(int, input().split())) for _ in range(n)]\n    sorted_a = []\n    #print(a)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                sorted_a.append([i,j])\n            else:\n                sorted_a.append([i,j])\n    #print(sorted_a)\n    for i in sorted_a:\n        a[i[0]][i[1]] = 1\n        a[i[1]][i[0]] = 1\n    #print(a)\n    r = []\n    for i in range(len(a)):\n        if i%2 == 0:\n            r.append(int(\"0\"+str(a[i][len(a[i])-1])))\n        else:\n            r.append(int(\"1\"+str(a[i][len(a[i])-1])))\n    #print(r)\n    c = []\n    for i in range(len(a)):\n        if i%2 == 0:\n            c.append(int(\"0\"+str(a[i][len(a[i])-1])))\n        else:\n            c.append(int(\"1\"+str(a[i][len(a[i])-1])))\n    #print(c)\n    #print(r+c)\n    print(\"YES\" if r+c in r else \"NO\")",
        "test": "assert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n0 1 1\\n\") == \"NO\\n0\\n\"",
        "num_ids": 3428
    },
    {
        "number": 4102,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'Yes'\n    return answer\n",
        "test": "assert solution(\"a\") == \"Yes\", \"Empty string\"",
        "num_ids": 303
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, b, a = map(int, stdin.split())\n    return str(max(sum(map(lambda x: int(x == '1') * (int(x == '1') * x + (int(x == '0') * x) + 1), range(1, N + 1)))) * b) + \"-\" + str(max(sum(map(lambda x: int(x == '1') * (int(x == '0') * x + (int(x == '1') * x) + 1), range(1, N + 1)))) * a)\n\ndef",
        "test": "assert solution(stdin) == 12",
        "num_ids": 1195
    },
    {
        "number": 4104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(\" \")[0])\n    b = int(stdin.split(\" \")[1])\n    c = int(stdin.split(\" \")[2])\n    d = int(stdin.split(\" \")[3])\n    e = int(stdin.split(\" \")[4])\n    f = int(stdin.split(\" \")[5])\n    g = int(stdin.split(\" \")[6])\n    h = int(stdin.split(\" \")[7])\n    print(str(a+b+c+d+e+f+g+h))\n    return str(a+b+c+d+e+f+g+h)",
        "test": "assert solution(stdin) == \"16777215\"",
        "num_ids": 442
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = n - 1\n    g = k\n    for i in range(m + 1):\n        for j in range(m - i):\n            g_i = g % 2\n            b_i = stdin[i]\n            g_j = g // 2\n            b_j = stdin[j]\n            g_k = g // 3\n            if (b_i, g_i)!= (b_j, g_j) or (b_i, g_j)!= (b_j, g_k):\n                return \"NO\"\n            b_i = b_i % 2\n            b_j = b_j % 2\n            g_i = g_i % 2\n            g_j = g_j % 2\n            g_k = g_k % 2\n            if b_i!= b_j or b_i!= g_i or b_j!= g_j or b_i!= g_k:\n                return \"NO\"\n            g = g // 3\n    return \"YES\"",
        "test": "assert solution(\"2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2",
        "num_ids": 1584
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = map(int, stdin.split())\n    lst = []\n    for i in range(k):\n        if a[i] == 1:\n            lst.append(i)\n        if len(lst) == n:\n            return max(lst)\n        if len(lst) >= n:\n            break\n    if len(lst) >= n:\n        return max(lst)\n    \n    ",
        "test": "assert solution(sys.stdin.readline()) == -1",
        "num_ids": 621
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    if k < n:\n        return \"1\"\n    elif n == 1:\n        return \"0\"\n    else:\n        s = str(n) + \"0\"\n        ans = n\n        for i in range(2, int(k ** 0.5) + 2):\n            ans += s[-i]\n            s = s[:-i] + str(i)\n        return ans\n",
        "test": "assert solution(",
        "num_ids": 1667
    },
    {
        "number": 4108,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = b = c = d = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"a\":\n            a += 1\n        if stdin[i] == \"e\":\n            b += 1\n        if stdin[i] == \"i\":\n            c += 1\n        if stdin[i] == \"o\":\n            d += 1\n        if stdin[i] == \"l\":\n            c += 1\n    if a == b and b == c and c == d:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"aaz\") == \"No\"",
        "num_ids": 606
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    j, n, M = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    \n    def H(n):\n        return n // books[0]\n    \n    def P(n):\n        return n // books[1]\n    \n    def D(n):\n        return n // books[2]\n    \n    def A(j, M):\n        return M // j\n    \n    answer = -1\n    for i in range(j, n+1):\n        answer = max(answer, min(H(i), P(i), D(i), A(i, M)))\n        \n    return str(answer)",
        "test": "assert solution('1 2') == '6'",
        "num_ids": 2216
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    P, Q = map(int, stdin.split())\n    if P < Q:\n        Q = P\n    else:\n        Q = Q\n    if P < Q:\n        Q = P\n    else:\n        Q = Q\n    for p in range(P, Q+1):\n        s = 0\n        for c in range(1, p+1):\n            s += 100 * c * (p - c)\n        if s >= Q:\n            s -= Q\n        else:\n            s += Q\n        print(s)\n    return \"\"\n\nT = int(input())\nfor i in range(T):\n    stdin = input()\n    print(solution(stdin))\n\n'''\nSample Input\n\n2 700\n3 500\n5 800\n\nSample Output\n\n3\n'''",
        "test": "assert solution(\"3 500\") == \"5\"",
        "num_ids": 629
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = [int(x) for x in stdin.split()]\n    candies = [int(x) for x in stdin.split() if x.isdigit()]\n    a = a * b\n    if n % 2:\n        b -= 1\n    if c % 2:\n        c -= 1\n    if n % 2 and a >= 0 and b >= 0 and c >= 0:\n        a, c = c, a\n    elif c % 2:\n        a, c = c, a\n    elif n % 2 and a >= 0:\n        a = a\n        b = b\n    elif n % 2 and a >= 0 and b >= 0:\n        a = a\n        c = c\n    c = min(a, c)\n    a = max(b, a)\n    a = max(c, a)\n    a = max(a, c)\n    for i in range(a, a + c):\n        if i not in candies:\n            return str(i)\n    return str(a + c)\n    \n\n\"\"\"",
        "test": "assert solution(input) == \"3\"",
        "num_ids": 1106
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    while n >= 1 and k >= 1 and x > 0:\n        print(sum(map(lambda x: x >= k, map(lambda x: (x >= k, x >= 0), range(n, n+k, k))))[0])\n        if sum(map(lambda x: x >= k, map(lambda x: (x >= k, x >= 0), range(n, n+k, k))))[0] == n:\n            return -1\n        k -= 1\n        n -= 1\n        x -= 1\n    print(-1)\n    return -1\n",
        "test": "assert solution == -1",
        "num_ids": 668
    },
    {
        "number": 4113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = int(stdin.split()[1])\n    if n == 0:\n        return \"No\"\n    if n < d:\n        return \"No\"\n    else:\n        n -= d\n        return \"Yes\"\n\ndef",
        "test": "assert solution('a') == 'No'",
        "num_ids": 519
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    x_1, y_1, h_1 = values\n    x_2, y_2, h_2 = values\n    x_3, y_3, h_3 = values\n    x_N, y_N = values\n    \n    def check(point):\n        return abs(x_1 - point[0]) + abs(y_1 - point[1]) < 10**9\n    \n    def check_n(coordinates):\n        for i in range(len(coordinates) - 1):\n            if not check(coordinates[i]):\n                return False\n        return True\n    \n    def check_h(coordinates):\n        for i in range(len(coordinates) - 1):\n            if not check_n(coordinates[i]):\n                return False\n        return True\n    \n    for i in range(N):\n        if not check_n(x_1, y_1, h_1) and not check_n(x_2, y_2, h_2):\n            x_1, y_1, h_1 = x_2, y_2, h_2\n            x_2, y_2, h_2 = x_3, y_3, h_3\n        if not check_n(x_1, y_1, h_1):\n            x_1, y_1, h_1 = x_3, y_3, h_3\n            x_3, y_3, h_3 = x_N, y_N, h_N\n        if not check_n(x_2, y_2, h_2):\n            x_2, y_2, h_2 = x_N, y_N, h_N\n            x_N, y_N, h_N = x_1, y_1, h_1\n        \n    print(str(x_1) + \" \" + str(y_1))\n    print(str(x_2) + \" \" + str(y_2))\n    print(str(x_3) + \" \" + str(y_3))\n    print(str(x_N) + \" \" + str(y_N))\n    \n    return \"1 2 6\"\n\"\"\"\nfrom collections import deque\n\nclass Solver:\n    def __init__(self):\n        self.vertices = []\n        self.edges = []\n        self.parents = []\n        self.start = []\n        self.end = []\n        self.visited = []\n        self.weights = {}\n        self.MST = []\n        self.data = {}\n\n    def add(self, a, b, c, d):\n        self.vertices.append(a)\n        self.vertices.append(b)\n        self.vertices.append(c)\n        self.vertices.append(d)\n        self.edges.append((a, b, c, d))\n        self.edges.append((a, b, d, c))\n        self.parents.append(a)\n        self.parents.append(b)\n        self.parents.append(d)\n        self.weights[(a, b, c, d)] = 1\n\n    def add_start(self, a):\n        self.start.append(a)\n        self.weights[(a,)] = 1\n\n    def add_end(self, a):\n        self.end.append(a)\n        self.weights[(a,)] = 1\n\n    def add_path(self, a, b, c, d):\n        self.parents.append(a)\n        self.parents.append(b)\n        self.parents.append(c)\n        self.parents.append(d)\n        self.weights[(a, b, c, d)] = 1\n\n    def remove_path(self, a, b, c, d):\n        self.parents.remove(a)\n        self.parents.remove(b)\n        self.parents.remove(c)\n        self.parents.remove(d)\n        self.weights[(a, b, c, d)] = 0\n\n    def add_weight(self, a, b, c, d):\n        self.weights[(a, b, c, d)] = 1 / 2\n        self.weights[(a, b, d, c)] = 1 / 2\n\n    def add_path_weight(self, a, b, c, d):\n        self.weights[(a, b, c, d)] = 1 / 2\n        self.weights[(a, b, d, c)] = 1 / 2\n\n    def add_start_weight(self, a):\n        self.weights[(a,)] = 1\n\n    def add_end_weight(self, a):\n        self.weights[(a,)] = 1\n\n    def print(self):\n        for i in range(len(self.vertices)):\n            print(str(self.vertices[i]))\n            for j in range(len(self.edges[i])):\n                print(self.edges[i][j], end=\" \")\n            print()\n        print(\"\")\n\n    def print_path(self):\n        for i in range(len(self.vertices)):\n            print(str(self.vertices[i]))\n            for j in range(len(self.parents[i])):\n                print(self.parents[i][j], end=\" \")\n            print()\n        print(\"\")\n\n    def get_mst(self):\n        if len(self.MST) == 0:\n            for i in range(len(self.vertices)):\n                for j in range(len(self.parents[i])):\n                    if self.weights[self.vertices[i], self.parents[i][j]] == 1:\n                        print(str(self.vertices[i]), end=\" \")\n                        print(str(self.parents[i][j]), end=\" \")\n                        print(\" \")\n                        self.MST.append(self.vertices[i])\n                        self.MST.append(self.parents[i][j])\n                        self.MST.append(self.vertices[self.parents[i][j]])\n                        self.MST.append(self.weights[self.vertices[i], self.parents[i][j]])\n                        self.weights[self.vertices[i], self.parents[i][j]] = 1\n                        self.weights[self.vertices[self.parents[i][j]], self.",
        "test": "assert solution(\"5\"), \"5\"",
        "num_ids": 3440
    },
    {
        "number": 4115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    if len(string) < 2:\n        return len(string)\n    dp = [1 for _ in range(len(string))]\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            dp[i] = dp[i-1] + 1\n    answer = dp[-1]\n    return answer\n\"\"\"\ndef",
        "test": "assert solution(\"yooo\") == 1",
        "num_ids": 822
    },
    {
        "number": 4116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    def getMultiplicationTable(n: int) -> int:\n        table = [0 for _ in range(10)]\n        for i in range(1, 10):\n            for j in range(10):\n                if i == j:\n                    table[i] = n\n                elif n == 0:\n                    table[j] = i\n                else:\n                    table[i] = table[j]*n\n                    n = n - (table[i] % 100)\n                    if n < 0:\n                        return -1\n        return table[10]\n    '''\n    import math\n    table = [0 for _ in range(10)]\n    n = int(stdin)\n    n = n*math.factorial(n)\n    for i in range(1, 10):\n        table[i] = n % 10\n        n = n//10\n\n    if n == 0:\n        return 'Yes'\n    else:\n        return 'No'\n    return\n",
        "test": "assert solution(10) == \"Yes\"",
        "num_ids": 351
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    L_nums = list(map(int, stdin.strip().split()))\n    L_max = max(L_nums)\n    L_min = min(L_nums)\n    L_max_floor = int(L_max // 3)\n    L_min_floor = int(L_min // 3)\n    res = 1\n    for i in range(L_min_floor, L_max_floor):\n        for j in range(i+1, L_max_floor):\n            k = L_max_floor - i\n            L_k = L_max_floor - j\n            if all([L_k == k or L_k == (i+j) or L_k == (i+j)]) and L_nums[i] + L_nums[j] > L_k:\n                res += 1\n    return str(res)\n",
        "test": "assert solution(input) == \"5\"",
        "num_ids": 920
    },
    {
        "number": 4118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        print(-1)\n    else:\n        print(A * B)\n\n-----Example 1-----\nInput:\nA 5\nB 2\n\nOutput:\n10\n\nExample 2:\nInput:\nA 4\nB 2\n\nOutput:\n0\n\nExample 3:\nInput:\nA 2\nB 1\n\nOutput:\n-1\n\ntips:\nhttps://leetcode.com/problems/multiply-strings/discuss/177085/Python-Java-Simple-Solution-with-Discuss\n\n\"\"\"\nclass Solution:\n    def multiply(self, A: int, B: int) -> int:\n        ans = A * B\n        while A <= B:\n            if A % 2 == 1:\n                ans = ans * A\n            A = A // 2\n        return ans\n",
        "test": "assert solution(\"1 9\") == \"-1\"",
        "num_ids": 326
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    \n    for _ in range(M):\n        x, y = map(int, input().split())\n        X[x-1] = y\n    \n    visited = [0] * N\n    \n    def dfs(x, y, moves):\n        visited[x-1][y-1] = 1\n        if x == M - 1 and y == N - 1:\n            return moves\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            if 0 <= x + dx < N and 0 <= y + dy < M and visited[x + dx][y + dy] == 0:\n                if (dx, dy) == (0, 0):\n                    continue\n                else:\n                    visited[x + dx][y + dy] = 1\n                    moves += dfs(x + dx, y + dy, moves + 1)\n        return moves\n    \n    return str(dfs(X[0], X[1], 0))\n",
        "test": "assert solution(",
        "num_ids": 851
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n > k:\n        return str(k)\n    solution(stdin)\n",
        "test": "assert solution(\"4 6 3\") == \"1110\"",
        "num_ids": 697
    },
    {
        "number": 4121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"NO\"\n    else:\n        l = []\n        for i in range(n):\n            l.append(int(stdin[i]))\n        l.append(1)\n        if l[0] < l[1]:\n            return \"NO\"\n        if l[0] == l[1]:\n            if l[2] == l[3]:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if l[3] == l[2]:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n'''\n\n\ndef",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 432
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    d.sort()\n    answer = 0\n    for i in range(n):\n        answer += d[i] * (10 ** (i + 1))\n    if h <= answer:\n        answer = -1\n    return answer",
        "test": "assert solution(\"1000 6\") == \"9\"",
        "num_ids": 1815
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    start = 0\n    end = n\n    seen = set()\n    while start < end:\n        if s[start:end] not in seen:\n            seen.add(s[start:end])\n            start += 1\n            end += 1\n        else:\n            start += 1\n    return \"\".join(seen)\n\nprint(solution(\"ABACABA\"))\nprint(solution(\"ZZZZAA\"))\n",
        "test": "assert solution([\"AABA\"]) == \"AA\"",
        "num_ids": 461
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\" \")\n    s = s.replace(\" \", \"\")\n    t = t.replace(\" \", \"\")\n    if len(s) > len(t):\n        return len(s) - len(t)\n    if len(s) < len(t):\n        return len(t) - len(s)\n    if s == t:\n        return len(s) - len(t)\n    if s!= t:\n        return len(s) - len(t)\n    return 0\n\n### Test\n",
        "test": "assert solution(test) == \"2\"",
        "num_ids": 605
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, x = list(map(int, stdin.split()))\n    g, d = 0, 0\n\n    # D = 2\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    # 10\n\n    for i in range(N):\n        g, d = move(g, d, x, i, N)\n        # print(g, d)\n\n    return str(d)\n\ndef",
        "test": "assert solution(string) == \"1\"",
        "num_ids": 519
    },
    {
        "number": 4126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S = str(stdin)\n    for i in range(2, len(S)//2):\n        if S[:i] == S[i::i]:\n            return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"akasaka\") == \"No\"",
        "num_ids": 242
    },
    {
        "number": 4127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split(\" \"))\n    if n % p!= 0 or n % q!= 0:\n        return \"Error\"\n    else:\n        answer = n // p * q\n        return str(answer)",
        "test": "assert solution(\"198 -1.10\") == \"217\"",
        "num_ids": 246
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b = [int(i) for i in input().split()]\n    a, b = a * 10, b * 10\n    if n == a + b:\n        return str(0)\n    elif n <= a + b:\n        if n == a + b:\n            return str(1)\n        elif n == a:\n            return str(2)\n        elif n == b:\n            return str(3)\n        else:\n            return str(4)\n    else:\n        return str(5)\n\nprint(solution(\"6\"))",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 1985
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,m,s = map(int,stdin.split())\n    \n    def helper(n,m,s,k):\n        if n<0 or m<0: return\n        if n==s: return\n        if m==s: return\n        \n        if n==s: return \n        \n        if k==n+1: return \n        \n        if k==s: return \n        \n        if k>n: return\n        \n        helper(n-1,m,s,k+1)\n        helper(n-1,m,s,k)\n        \n    return str(helper(n,m,s,k=0))",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 491
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    s = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]!=a[j][i]:\n                s += a[i][j]\n    return str(s)\n",
        "test": "assert solution('5') == '1'",
        "num_ids": 344
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    P1, P2, P3 = [int(i) for i in stdin.split()]\n    Y_1, Y_2, Y_3 = [int(i) for i in stdin.split()]\n    return sorted([P1, P2, P3, Y_1, Y_2, Y_3])\n",
        "test": "assert solution('2 3') == '2'",
        "num_ids": 880
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A = list(map(int, A.split()))\n    A.sort()\n    answer = 0\n    for i in range(N):\n        if i == 0 or i == N-1:\n            answer += A[i]\n        else:\n            answer += A[i] - A[i-1]\n    return str(answer)\n\nn, a = map(int, input().split())\nprint(solution(input()))",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 1017
    },
    {
        "number": 4133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split('\\n')[0]\n    jows = stdin.split('\\n')[1]\n    \n    mylist = []\n    for i in jows:\n        for j in i:\n            if j not in mylist:\n                mylist.append(j)\n    mylist = sorted(mylist)\n    return ''.join(mylist)",
        "test": "assert solution(input()) == 'false'",
        "num_ids": 748
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    lst = []\n    for i in range(n):\n        for j in range(m):\n            lst.append((i + 1, j + 1))\n    # print(lst)\n\n    cnt = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, 10 ** 18):\n                # print(i, j, k)\n                if (i, j) in lst and (i, j)!= (i + 1, j):\n                    # print(i, j)\n                    lst.remove((i, j))\n                    lst.remove((i + 1, j))\n                    lst.remove((i + 1, j + 1))\n                    lst.remove((i, j + 1))\n                    lst.remove((i + 1, j + 1))\n                    lst.remove((i + 1, j))\n                    lst.remove((i, j + 1))\n                    cnt += 1\n                    # print(i, j, k, lst)\n    print(cnt)\n\n    return str(cnt)\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 760
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    s[n-1] = s[n-1].lower()\n    d = int(s[n-1])\n    for i in range(2, n):\n        if s[i] == 'o':\n            s[i] = s[i-2]\n    if s[-1] == 'z':\n        s.pop()\n    s.pop()\n    if d == 1:\n        return ''.join(s)\n    if d == 2:\n        return ''.join([s[i] for i in range(1, n) if not s[i].isalpha()])\n\ndef",
        "test": "assert solution(stdin) == \"secrofedoc\"",
        "num_ids": 527
    },
    {
        "number": 4136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    answer = 0\n    for i in range(a, b+1):\n        answer += i\n    return str(answer)\n",
        "test": "assert solution(",
        "num_ids": 240
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    res = 0\n    for char in stdin:\n        if char.isdigit():\n            n = int(char)\n        else:\n            res += n\n            n = 0\n    return str(res)\n\ndef",
        "test": "assert solution(stdin) == \"+++++++>+>+[<->-]<+++++++++++\"",
        "num_ids": 3487
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    q, k = map(int, stdin.split())\n    \n    answer = 0\n    for i in range(q):\n        print(k, end=' ')\n        print(answer)\n        answer = k\n        k = k * 10 + int(stdin.split()[0])\n    print(k)\n    return str(answer)\n\"\"\"\n\ndef",
        "test": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"306\",\"307\",\"308\",\"309\",\"310\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"320\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"330\",\"331\",\"332\",\"333\",\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"350\",\"351\",\"352\",\"353\",\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"360\",\"361\",\"362\",\"363\",\"364\",\"365\",\"366\",\"367\",\"368\",\"369\",\"370\",\"371\",\"372\",\"373\",\"374\",\"375\",\"376\",\"377\",\"378\",\"379\",\"380\",\"381\",\"382\",\"383\",\"384\",\"385\",\"386\",\"387\",\"388\",\"389\",\"390\",\"391\",\"392\",\"393\",\"394\",\"395\",\"396\",\"397\",\"398\",\"399\",\"400\",\"401\",\"402\",\"403\",\"404\",\"405\",\"406\",\"407\",\"408\",\"409\",\"410\",\"411\",\"412\",\"413\",\"414\",\"415\",\"416\",\"417\",\"418\",\"419\",\"420\",\"421\",\"422\",\"423\",\"424\",\"425\",\"426\",\"427\",\"428\",\"429\",\"430\",\"431\",\"432\",\"433\",\"434\",\"435\",\"436\",\"437\",\"438\",\"439\",\"440\",\"441\",\"442\",\"443\",\"444\",\"445\",\"446\",\"447\",\"448\",\"449\",\"450\",\"451\",\"452\",\"453\",\"454\",\"455\",\"456\",\"457\",\"458\",\"459\",\"460\",\"461\",\"462\",\"463\",\"464\",\"465\",\"466\",\"467\",\"468\",\"469\",\"470\",\"471\",\"472\",\"473\",\"474\",\"475\",\"476\",\"477\",\"478\",\"479\",\"480\",\"481\",\"482\",\"483\",\"484\",\"485\",\"486\",\"487\",\"488\",\"489\",\"490\",\"491\",\"492\",\"493\",\"494\",\"495\",\"496\",\"497\",\"498\",\"499\",\"500\",\"501\",\"502\",\"503\",\"504\",\"505\",\"506\",\"507\",\"508\",\"509\",\"510\",\"511\",\"512\",\"513\",\"514\",\"515\",\"516\",\"517\",\"518\",\"519\",\"520\",\"521\",\"522\",\"523\",\"524\",\"525\",\"526\",\"527\",\"528\",\"529\",\"530\",\"531\",\"532\",\"533\",\"534\",\"535\",\"536\",\"537\",\"538\",\"539\",\"540\",\"541\",\"542\",\"543\",\"544\",\"545\",\"546\",\"547\",\"548\",\"549\",\"550\",\"551\",\"552\",\"553\",\"554\",\"555\",\"556\",\"557\",\"558\",\"559\",\"560\",\"561\",\"562\",\"563\",\"564\",\"565\",\"566\",\"567\",\"568\",\"569\",\"570\",\"571\",\"572\",\"573\",\"574\",\"575\",\"576\",\"577\",\"578\",\"579\",\"580\",\"581\",\"582\",\"583\",\"584\",\"585\",\"586\",\"587\",\"588\",\"589\",\"590\",\"591\",\"592\",\"593\",\"594\",\"595\",\"596\",\"597\",\"598\",\"599\",\"600\",\"601\",\"602\",\"603\",\"604\",\"605\",\"606\",\"607\",\"608\",\"609\",\"610\",\"611\",\"612\",\"613\",\"614\",\"615\",\"616\",\"617\",\"618\",\"619\",\"620\",\"621\",\"622\",\"623\",\"624\",\"625\",\"626\",\"627\",\"628\",\"629\",\"630\",\"631\",\"632\",\"633\",\"634\",\"635\",\"636\",\"637\",\"638\",\"639\",\"640\",\"641\",\"642\",\"643\",\"644\",\"645\",\"646\",\"647\",\"648\",\"649\",\"650\",\"651\",\"652\",\"653\",\"654\",\"655\",\"656\",\"657\",\"658\",\"659\",\"660\",\"661\",\"662\",\"663\",\"664\",\"665\",\"666\",\"667\",\"668\",\"669\",\"670\",\"671\",\"672\",\"673\",\"674\",\"675\",\"676\",\"677\",\"678\",\"679\",\"680\",\"681\",\"682\",\"683\",\"684\",\"685\",\"686\",\"687\",\"688\",\"689\",\"690\",\"691\",\"692\",\"693\",\"694\",\"695\",\"696\",\"697\",\"698\",\"699\",\"700\",\"701\",\"702\",\"703\",\"704\",\"705\",\"706\",\"707\",\"708\",\"709\",\"710\",\"711\",\"712\",\"713\",\"714\",\"715\",\"716\",\"717\",\"718\",\"7",
        "num_ids": 1750
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # \ubc30\uc5f4\uc758 \uac1c\uc218\ub97c \uc801\uc73c\ub85c \uc138\uc5b4\uc8fc\uace0\n    # \ubc30\uc5f4\uc5d0\ub294 7\uac1c\uc758 \ud654\ud3d0\ub97c \ucc28\ub840\ub85c \uc624\ub984\ucc28\uc21c \uc815\ub82c\n    arr = [0, 1, 2, 3, 4, 5, 6, 7]\n    # \uc804\uccb4 \ud654\ud3d0 \uac1c\uc218\n    n = int(stdin.split(' ')[-1])\n    # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\n    s = 0\n    # \ud654\ud3d0 \uac1c\uc218\uc758 \ud569\n    sum = 0\n    # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\n    even = 0\n    # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\n    odd = 0\n\n    # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\n    # \ub9e8 \uc55e\uc5d0 0\uc740 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc5d0 \ub530\ub77c \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc744 \uac00\uc9c0\ub294 \uacbd\uc6b0\n    for i in range(n):\n        # \ud654\ud3d0 \uac1c\uc218\uac00 0\uc774\uba74 \ub9e8 \uc55e\uc5d0 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc5d0 \ub530\ub77c \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc744 \uac00\uc9c0\ub294 \uacbd\uc6b0\n        if arr[i] == 0:\n            # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\ub97c \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\ub97c \uc138\uc728 \uc904\uc774\uae30\n            # \uac01 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc744 \uc120\ud0dd \ud6c4 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \ud569\uc0b0\n            sum += sum(arr[:i] + arr[i + 1:])\n            # \ub9e8 \uc55e\uc5d0 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc758 \uacbd\uc6b0\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            sum += len(arr[:i] + arr[i + 1:])\n            # \ubc30\uc5f4\uc758 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\n            # \uac01 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc744 \uc120\ud0dd \ud6c4 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum // 2\n            # \ud654\ud3d0\uc758 \uac1c\uc218\ub97c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\n            s += sum % 2\n            # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc758 \ud569\ubcf4\ub2e4 \ud654\ud3d0\uc758 \uac1c\uc218\ub97c \ub9ce\uc774 \uc120\ud0dd\ud560 \uc218 \uc788\uae30\ub54c\ubb38\uc5d0 \uac01 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\ub294 \uadf8 \uc774\uc804\uc5d0 \ub098\uba38\uc9c0 \uac1c\uc218\uac00 \uc9d1\uc911\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uc120\ud0dd\n            s += sum // 3\n            # \ubc30\uc5f4\uc758 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum % 3\n            # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc758 \uc9d1\uc911\ud558\ub294 \uac1c\uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += (sum // 4)\n            # \uae30\uc900\uc73c\ub85c \uc120\ud0dd\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum % 4\n        else:\n            # \uac00\uc9c0\ub294 \ud654\ud3d0\uc744 \uc120\ud0dd \ud6c4 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            # \uac01 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\ub97c \ud569\uc0b0\n            # \ubc30\uc5f4\uc758 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum // arr[i]\n            # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc758 \ud569\uc744 \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum % arr[i]\n            # \ubc30\uc5f4\uc758 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += (sum // arr[i])\n            # \uae30\uc900\uc73c\ub85c \uc120\ud0dd\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += (sum % arr[i])\n            # \uae30\uc900\uc73c\ub85c \uc120\ud0dd\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += (sum // (arr[i",
        "test": "assert solution(['1', '1', '1', '1']) == '1'",
        "num_ids": 2085
    },
    {
        "number": 4140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(1, 10**5):\n        if stdin[i] == '0':\n            continue\n        elif stdin[i] == '1':\n            ans += 1\n        else:\n            continue\n    return str(ans)\n'''\n\ndef",
        "test": "assert solution(",
        "num_ids": 2136
    },
    {
        "number": 4141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, A = map(int, stdin.split())\n\n    if A % 2 == 0:\n        for _ in range(N):\n            if A % 10 == 0:\n                A += 1\n            else:\n                A -= 1\n        \n        if A % 10 == 0:\n            return \"DENIED\"\n        else:\n            return \"APPROVED\"\n    else:\n        for _ in range(N):\n            if A % 10 == 0:\n                A += 1\n            else:\n                A -= 1\n        \n        if A % 10 == 0:\n            return \"APPROVED\"\n        else:\n            return \"DENIED\"\n\n-----Bonus-----\nOutput can be defined as follows:\n- The condition in the statement can be rephrased as \"If x is an even number written on the document, x is divisible by 3 or 5\".\nThen the number is an even number.\n- If the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, output DENIED.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n\"\"\"\n\ndef",
        "test": "assert solution(",
        "num_ids": 1032
    },
    {
        "number": 4142,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_steps(lst):\n        if lst[0] == 'R':\n            return [0,1,2,3,4]\n        elif lst[0] == 'L':\n            return [0,3,2,1,4]\n        elif lst[0] == 'U':\n            return [1,2,3,0,4]\n        elif lst[0] == 'D':\n            return [2,3,0,1,4]\n        else:\n            return []\n    \n    def get_step_idx(steps, i):\n        if i >= len(steps):\n            return -1\n        else:\n            return steps[i]\n        \n    for line in stdin:\n        if line == 'RUDRU':\n            return 'Yes'\n        else:\n            steps = get_steps(line)\n            i = get_step_idx(steps, get_step_idx(steps, 0))\n            if i!= -1:\n                return 'No'\n    return 'No'\n",
        "test": "assert solution(\"RUDLUDR\") == \"No\"",
        "num_ids": 968
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(n):\n        global result\n        if n == 6:\n            for i in range(0,len(result)):\n                print(result[i],end=\" \")\n            print()\n            result.clear()\n            return\n\n        for i in range(0,len(people)):\n            if i == 0:\n                continue\n            if people[i] < n:\n                continue\n            else:\n                dfs(n+people[i]-1)\n        result.append(n)\n    \n    N,A,B,C,D,E = map(int,stdin.split())\n    people = list(range(0,N))\n    dfs(A)\n    dfs(B)\n    dfs(C)\n    dfs(D)\n    dfs(E)\n    min_time = min(result)\n    print(min_time)\n    return min_time",
        "test": "assert solution(input()) == 7",
        "num_ids": 518
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequence = {0,9}\n    while N:\n        res = 0\n        N -= 1\n        if not N:\n            return str(res % 10 + 7)\n        while N:\n            res += N // 10\n            N //= 10\n    return str(res % 10 + 7)\n\n\"\"\"\ndef",
        "test": "assert solution('3') == '6'",
        "num_ids": 612
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def isPrime(x):\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    def solve(x):\n        a = x\n        while a <= 10**6:\n            b = a + 1\n            while b <= 10**6:\n                c = b + 1\n                while c <= 10**6:\n                    d = c + 1\n                    while d <= 10**6:\n                        e = d + 1\n                        while e <= 10**6:\n                            f = e + 1\n                            while f <= 10**6:\n                                g = f + 1\n                                while g <= 10**6:\n                                    h = g + 1\n                                    while h <= 10**6:\n                                        i = h + 1\n                                        while i <= 10**6:\n                                            j = i + 1\n                                            while j <= 10**6:\n                                                k = j + 1\n                                                while k <= 10**6:\n                                                    l = k + 1\n                                                    while l <= 10**6:\n                                                        m = l + 1\n                                                        while m <= 10**6:\n                                                            n = m + 1\n                                                            while n <= 10**6:\n                                                                o = n + 1\n                                                                while o <= 10**6:\n                                                                    p = o + 1\n                                                                    while p <= 10**6:\n                                                                        q = p + 1\n                                                                        while q <= 10**6:\n                                                                            r = q + 1\n                                                                            while r <= 10**6:\n                                                                                s = r + 1\n                                                                                while s <= 10**6:\n                                                                                    t = s + 1\n                                                                                    while t <= 10**6:\n                                                                                        u = t + 1\n                                                                                        while u <= 10**6:\n                                                                                           v = u + 1\n                                                                                           while v <= 10**6:\n                                                                                               w = v + 1\n                                                                                               while w <= 10**6:\n                                                                                                   x = w + 1\n                                                                                                   while x <= 10**6:\n                                                                                                       if isPrime(x):\n                                                                                                                                                                                                                                                                                                                                                                                                                                           *= x\n                                                                                                   return x\n                                                                                                   break\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                    ",
        "test": "assert solution(",
        "num_ids": 1452
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    v = [int(x) for x in stdin.split()]\n    print(min(v))",
        "test": "assert solution(",
        "num_ids": 357
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1, l_2, l_N = map(int, stdin.split())\n    l_1 = l_1 + l_1 + l_1\n    l_2 = l_2 + l_2 + l_2\n    l_N = l_N + l_N\n    \n    res = min(l_1, l_2, l_N)\n    \n    if A < B < C:\n        res += A + B + C - 2 * A * B\n    else:\n        res += max(A, B, C - A) * min(A, B, C - A)\n    \n    return str(res)\n\ndef",
        "test": "assert solution(\"98\") == \"23\"",
        "num_ids": 1828
    },
    {
        "number": 4148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    upper = []\n    for char in stdin:\n        if char.isupper():\n            upper.append(char)\n        else:\n            if len(answer) == 0:\n                answer.append(upper)\n            answer[-1].append(char)\n            upper.clear()\n    answer.append(upper)\n    return ''.join(answer[1])\n'''\n\nclass Solution:\n    def shiftingLetters(self, s: str, shift: int) -> str:\n        lowercase_lower = list(s)\n        result = ''\n        for index, letter in enumerate(lowercase_lower):\n            lowercase_lower[index] = str(letter + shift)\n        for letter in lowercase_lower:\n            result += letter\n        return result\n",
        "test": "assert solution(\"ABCXYZ\") == \"CDXAZB\"",
        "num_ids": 403
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    while b:\n        b.sort()\n        for i in b:\n            a.append(i)\n    a = sorted(a, reverse=True)\n    return''.join(map(str, a))\n",
        "test": "assert solution(stdin) == '6'",
        "num_ids": 484
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_i = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    answer = ''\n    for i in range(n):\n        # print(f\"\\t{i+1} {stdin[i]}\")\n        # print(a_i[i])\n        # print(k[i])\n        answer += str(a_i[i]%k[i])\n        answer += str(a_i[i]//k[i])\n        # print(f\"\\t{answer}\")\n        answer += str(a_i[i]//k[i])\n        answer += str(a_i[i]%k[i])\n    return answer\n",
        "test": "assert solution(stdin) == \"21112\"",
        "num_ids": 540
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    a = [0] * n\n    \n    for i in range(1, n + 1):\n        a[i - 1] = i\n        \n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n    \n    return str(sum(a))\n",
        "test": "assert solution(inp) == \"2\"",
        "num_ids": 362
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_list = list(map(int, stdin.split()))\n    answer = []\n    if n == 0:\n        return 0\n    for i in range(n):\n        a_list.remove(a_list[i])\n        if len(a_list) == 1:\n            answer.append(1)\n        else:\n            if a_list[i] == 1:\n                answer.append(2)\n            else:\n                answer.append(a_list[i] * a_list[i+1])\n    return min(answer)\n    \n\n\"\"\"\ndef",
        "test": "assert solution(5, [1, 2, 3, 4, 5]) == 1",
        "num_ids": 452
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    S = stdin.split()\n    ans = 0\n    for i in range(N):\n        for j in range(i, N, 2):\n            if S[i] == 0 and S[j] == 1:\n                S[i], S[j] = S[j], S[i]\n                ans += 1\n    return str(ans)\n\nTime Complexity: O(N)\nSpace Complexity: O(N)",
        "test": "assert solution(input) == \"4\"",
        "num_ids": 421
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    card = sorted([int(i) for i in stdin.split()])\n    # print(card)\n    def check(id_list):\n        if len(id_list) % 2 == 1:\n            return False\n        tmp_list = sorted([(i, card[i+1]) for i in range(len(id_list)-1)], key=lambda x:x[1])\n        # print(tmp_list)\n        tmp_list = sorted([tmp_list[-1][0], tmp_list[-2][0], tmp_list[-1][1]], key=lambda x: x[1])\n        if tmp_list[0] == tmp_list[1]:\n            return True\n        else:\n            return False\n    # print(check(card))\n    # print(check(card[::2]))\n    # print(check(card[1::2]))\n    def solve(id_list):\n        if len(id_list) % 2 == 1:\n            return id_list[-1]\n        tmp_list = sorted([(i, card[i+1]) for i in range(len(id_list)-1)], key=lambda x:x[1])\n        tmp_list = sorted([tmp_list[-1][0], tmp_list[-2][0], tmp_list[-1][1]], key=lambda x: x[1])\n        if tmp_list[0] == tmp_list[1]:\n            return id_list[-1]\n        else:\n            return id_list[id_list[::2].index(tmp_list[1])]\n    answer = 0\n    for i in range(len(card)):\n        if check(card[i*2:i*2+2]):\n            answer += 1\n    return answer",
        "test": "assert solution(stdin) == str(2)",
        "num_ids": 2255
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    h = int(stdin.split()[1])\n    for _ in range(n):\n        h += int(stdin.split()[2])\n    return str(h)\n",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 441
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if a[0] == 0:\n        return 0\n\n    def is_valid(n, w):\n        return (n - 1) % w == 0 and (n + 1) % w == 0\n\n    ans = 0\n    if is_valid(n, w):\n        return ans\n    else:\n        for i in range(n):\n            ans += is_valid(n - 1, w)\n            ans += is_valid(n + 1, w)\n        return ans\n\n\n\nTests\n-----\n\n>>> solution(\"4 10\")\n4\n>>> solution(\"1 1\")\n0\n>>> solution(\"2 4\")\n0\n>>> solution(\"2 2\")\n0\n>>> solution(\"3 4\")\n0\n>>> solution(\"1 1\")\n1\n>>> solution(\"2 1\")\n1\n>>> solution(\"1 1\")\n1\n>>> solution(\"2 1\")\n2\n>>> solution(\"1 1\")\n2\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 2183
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return \n\"\"\"",
        "test": "assert solution(input()) == \"3000000000000000000 1000000000000000000\"",
        "num_ids": 408
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return str(a*b)\n    else:\n        return '\\n'.join(map(str, range(n-1, n+2)))\n\n\nInput\n4\n-1 1 -2 0 3 5\nOutput\n1\n3\nInput\n1\n-1 1 -2 0 3\nOutput\n1\n3\n'''\n\nn = int(input())\nx = [int(input()) for _ in range(n)]\nm = int(input())\n\npossible = []\nfor i in range(n):\n    for j in range(i+1, n):\n        possible.append((x[i], x[j]))\n\nprint(len(possible))",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 443
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    k = 0\n    for i in range(int(stdin.split()[0])):\n        a, b = map(int, stdin.split())\n        k += a\n    print(k)\n    return str(k)\n\nprint(solution(input()))\n",
        "test": "assert solution(",
        "num_ids": 2196
    },
    {
        "number": 4160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    b = list(map(int, stdin.strip().split()))\n    def calc_balance(a, b):\n        return a * b\n    def calc_balance_recur(a, b, n, d, q, y):\n        if n == d:\n            if calc_balance_recur(d, b, 0, d, q, y) >= q:\n                print(q)\n            return\n        if q < 0:\n            return\n        if q >= calc_balance_recur(d, b, n, d - q, q, y):\n            print(y)\n            return\n        q -= calc_balance_recur(d, b, n + 1, d, q, y + b[n] / b[d])\n        if n < d:\n            calc_balance_recur(d, b, n + 1, d, q, y + b[n] / b[d])\n    calc_balance_recur(0, b, N, 0, 0, 0)\n",
        "test": "assert solution(input()) == \"3\"",
        "num_ids": 373
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    n = len(str(K))\n    c = K\n    arr = [0 for i in range(K)]\n    for i in range(K):\n        arr[i] = i\n    arr.sort()\n    x = arr[K-1] + arr[K-2] + arr[K-3]\n    \n    for i in range(K):\n        arr[i] -= 1\n        arr[K-i-1] += 1\n        arr[K-i-2] -= 1\n        arr[K-i-3] += 1\n        \n        \n    answer = x % 10\n    print(answer)\n    return str(answer)\n\n=======\ndef",
        "test": "assert solution(input) == '9'",
        "num_ids": 675
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return str(n)\n    X = n % 10**9 + (n // 10)\n    if X >= 9:\n        X = str(X)\n        for i in range(1, 9):\n            X += \"x\"\n        return X\n    else:\n        return \"x\" + solution(X)\n",
        "test": "assert solution(stdin) == 10, \"expected 10 but got {}\".format(solution(stdin))",
        "num_ids": 1949
    },
    {
        "number": 4163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, D_1, D_2, D_3 = map(int, stdin.split())\n    s_3 = []\n    for i in range(N-3):\n        s_3.append(D_1 + D_2)\n        s_3.append(D_1 - D_2)\n        s_3.append(D_2 - D_1)\n    s_3.sort()\n    for i in s_3:\n        if i == s_3[0]:\n            break\n    for i in range(0, 3):\n        if s_3[i+3] == s_3[i]:\n            break\n    if i == 0 or i == 1 or i == 3:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(input()) == 'No'",
        "num_ids": 714
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        r = int(stdin.split()[1])\n        if 1 < r < 100:\n            print(r)\n\ndef",
        "test": "assert solution(5) == 1",
        "num_ids": 195
    },
    {
        "number": 4165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def dfs(index, res):\n        if index >= n:\n            return res\n\n        if index + 1 >= n:\n            return res\n\n        a, b = dfs(index + 1, res + str(index + 1))\n        c, d = dfs(index + 2, res + str(index + 2))\n        e, f = dfs(index + 3, res + str(index + 3))\n\n        return a + '(' + b + ')' + c + '-' + d + '-' + e + '(' + f + ')', res + '\\n'\n\n    return dfs(0, '')\n\n\n\n-----Sample Output-----\nYes\nNo\n\nSince 3 < 5 = 1 + 5 + 3 = 7, it follows from the theorem that such a polygon can be drawn on a plane.\n\"\"\"\n\nfrom sys import stdin\n\n\ndef",
        "test": "assert solution(stdin) == \"Yes\"",
        "num_ids": 386
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    c = [i for i in range(1, N + 1)]\n    s = [i for i in range(1, N + 1)]\n    for i in range(M):\n        a, b = list(map(int, stdin.split()))\n        if b not in c:\n            return \"-\"\n        else:\n            s.remove(b)\n    answer = []\n    for i in s:\n        for j in c:\n            if i == j:\n                answer.append(j)\n                break\n    return \"\".join(answer)\n",
        "test": "assert solution(input) == \"702\"",
        "num_ids": 2129
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    num = n*k\n    ans = 0\n    for i in range(2,num+1):\n        if i % k == 0:\n            if i % (k*k) == 0:\n                ans += 1\n    return str(ans)\n\nprint(solution(\"1 1 1\"))",
        "test": "assert solution(2, 2) == '2'",
        "num_ids": 353
    },
    {
        "number": 4168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"\"\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"0\"\n    prefix = \"\"\n    for i in range(2, n + 1, 2):\n        prefix += str(i) + \" \"\n    prefix = prefix.rstrip(\" \")\n    prefix = prefix.lstrip(\" \")\n    s = \"\"\n    s += prefix\n    for i in range(1, n, 2):\n        s += str(i) + \" \"\n    s = s.lstrip(\" \")\n    s = s.rstrip(\" \")\n    return s",
        "test": "assert solution(input()) == '1011'",
        "num_ids": 313
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    \n    i = 0\n    for i in range(N):\n        A.insert(i, max(A[i], B[i]))\n        i += 1\n        B.pop(i-1)\n        A.pop()\n    \n    print(min(A))\n    return \"\"\n\n-----Sample Input-----\n2 4\n2\n2 4\n\n-----Sample Output-----\n2\n\nWith 2 yen, we can buy one drink at the first store and four drinks at the second store, for the total of four drinks. However, we cannot buy 3 drinks with 11 yen or less.\ndef",
        "test": "assert solution(",
        "num_ids": 452
    },
    {
        "number": 4170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 1\n    if N % 2 == 1:\n        return solution(N // 2) + solution(N // 2 - 1)\n    else:\n        return solution(N // 2 + 1)\n\n---------------Sample Output-------------------------------\nOutput:\n2\nBy landing on the third square from the left, you can move to the right twice.\n",
        "test": "assert solution(",
        "num_ids": 2047
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    if a[-1]!= k:\n        a.append(k)\n    print(len(set(a)))\n    return str(len(set(a)))\n\nprint(solution(stdin))\n",
        "test": "assert solution(inp) == 0",
        "num_ids": 273
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, k):\n        a = sorted(a)\n        if a[k] < 0:\n            a[k] = 0\n        elif a[k] >= 0:\n            a[k] = -1\n        else:\n            return ''\n        if a[0] == k:\n            return '0'\n        elif a[-1] == k:\n            return '0'\n        return str(solve(a[1:-1], k - a[k])) + solve(a[:-1], k)\n\n    return solve(list(map(int, stdin.strip().split())), int(stdin.strip().split()[-1]))\n\n-----Notes-----\nThe stdin and stdout arrays are for debugging purposes.\nstdin.close() is for using raw_input() to get the input from stdin.\nstdout.close() is for using raw_input() to get the output from stdout.\nYou may not copy the code of your solution into any other file.\nIt is meant that you will not need to do anything clever on your own.\n",
        "test": "assert solution([\"1 2 2 4 2 3\",\"3 3 3 2 1 1 1 3\",\"1 2 2 4 2 3\",\"3 3 3 2 1 1 1 3\",\"1 2 2 4 2 3\",\"3 3 3 2 1 1 1 3\"]) == \"3\"",
        "num_ids": 2155
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(min(int(stdin[i]) * a for i, a in enumerate(list(map(int, input().split())))), min(int(stdin[i]) * b for i, b in enumerate(list(map(int, input().split()))))))",
        "test": "assert solution([\"4\", \"10\", \"1\", \"3\", \"7\", \"3\", \"2\", \"1\", \"1000\", \"1\", \"000000000000\", \"42\", \"88\"]) == \"1000\"",
        "num_ids": 460
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    L_1, L_2, L_3, L_4, L_5 = map(int, stdin.split())\n    X = int(input())\n    count = 0\n    while X!= 0:\n        if X < L_1:\n            X += L_2\n        elif X < L_2:\n            X -= L_2\n            count += 2\n        elif X < L_3:\n            X += L_3\n        elif X < L_4:\n            X -= L_3\n            count += 2\n        elif X < L_5:\n            X += L_5\n        else:\n            break\n    print(count)\n\nSample Output\n3\nOutput for the sample input:\n2\nOutput for the sample input:\n2\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\n",
        "test": "assert solution('0 4 5 0 3 2 1 3 4 0') == 4",
        "num_ids": 480
    },
    {
        "number": 4175,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, W_i = map(int, stdin.split())\n    words = stdin.split()\n    \n    last_word = words[-1]\n    last_word = last_word.lower()\n    \n    if last_word!= last_word[::-1]:\n        return 'No'\n    \n    if len(words) < 10:\n        return 'Yes'\n    \n    result = []\n    \n    for i in range(10):\n        result.append(0)\n    \n    for i in range(1, len(words)):\n        result[i] = result[i-1]\n        for j in range(len(words[i])):\n            result[i] = min(result[i], 1 + words[i-1].count(words[i][j]))\n    \n    return 'Yes' if result[len(words)-1] == result[len(words)-2] else 'No'",
        "test": "assert solution([\"hi\",\"hello\",\"helo\",\"hehe\",\"hello\"]) == \"Yes\"",
        "num_ids": 639
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        print(a)\n        return\n    if a % 2 == 0:\n        print(2 * a)\n        return\n    if b % 2 == 0:\n        print(3 * b)\n        return\n    if a % 3 == 0:\n        print(4 * a)\n        return\n    if b % 3 == 0:\n        print(5 * b)\n        return\n    if a % 3!= 0:\n        print(a % 3)\n        return\n    if b % 3!= 0:\n        print(b % 3)\n        return\n\n\n'''\n\ndef",
        "test": "assert solution(6, 3) == 6",
        "num_ids": 2114
    },
    {
        "number": 4177,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for c in stdin:\n        if c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789':\n            result = result + c\n    return result\n\n'''\n\ndef",
        "test": "assert solution(\"stick\") == \"sss\"",
        "num_ids": 225
    },
    {
        "number": 4178,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  if N % 2 == 0:\n    print(\"Yes\")\n    return\n  \n  height = 1\n  for i in range(N):\n    height *= (i + 1)\n  if height % 2 == 0:\n    print(\"Yes\")\n    return\n  else:\n    print(\"No\")\n    return\n\nprint(solution(str(input())))\n\n###############\ndef",
        "test": "assert solution(input()) == \"No\"",
        "num_ids": 2109
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = [map(int, stdin.split()) for _ in range(N)]\n    B_i = list(map(int, stdin.split()))\n    A_i = [list(map(int, a)) for a in A]\n    B_M = [map(int, b) for b in B_i]\n    C_M = [list(map(int, c)) for c in C]\n    B = [a+b for a, b in zip(B_i, B_M)]\n    result = 0\n    for i in range(N):\n        for j in range(N-M+1):\n            result += A_i[i][j]*B_i[j][i]\n    return str(result)\n\"\"\"",
        "test": "assert solution(\"3 2 1\") == \"1\"",
        "num_ids": 638
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1000:\n        return '0'\n    N = n // 1000\n    k = n % 1000\n    return str(int(k) - N)",
        "test": "assert solution(stdin) == 100",
        "num_ids": 175
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N,A,B = map(int,stdin.split())\n    n = 1\n    while n<=N:\n        n+=1\n        A = A*2\n        B = B*2\n        if A<=B:\n            A=A-B\n            B=B-A\n        else:\n            A=A-B\n            B=B-A\n    print(A+B)\n    return str(A+B)",
        "test": "assert solution(input) == \"9\"",
        "num_ids": 2184
    },
    {
        "number": 4182,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return 'No War' if len(str(int(stdin.split(' ')[0]) - int(stdin.split(' ')[1]))) == 0 else 'War'\n",
        "test": "assert solution(\"8 15 13\") == \"War\"",
        "num_ids": 976
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2, T_N, T_result = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l = sorted(l)\n    r = l[::-1]\n    if T_1 > T_N:\n        for i in l:\n            r.append(i)\n        T_result = T_result + r[-1]\n    elif T_2 > T_N:\n        for i in r:\n            T_result = T_result + i\n    else:\n        T_result = T_result + l[-1]\n    return str(T_result)\n",
        "test": "assert solution('3 5') == '6'",
        "num_ids": 743
    },
    {
        "number": 4184,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    W_1, W_2, W_3 = map(int, stdin.strip().split())\n    \n    S_1, S_2 = 0, 0\n    \n    for i in range(N):\n        S_1 += W_1 * i\n        S_2 += W_2 * i\n    \n    if N % 2 == 0:\n        S_1, S_2 = S_2, S_1\n    \n    return str(abs(S_1 - S_2))",
        "test": "assert solution(\"1 2 3\") == \"0\"",
        "num_ids": 670
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m + sum(map(int, list(str(n * m) +''))))\n\nprint(solution(input()))\n\ndef",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 541
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    n = n % 2\n    result = 0\n    if n == 0:\n        result = a[0]\n    elif n == 1:\n        result += a[1]\n    else:\n        result += a[2]\n    return str(result)\n\n-----Result-----\n\nOutput\n5\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= a[i] <= 100\n1 <= n <= 2 * 10^5\n\n1 <= stdin.length <= 10^6\n1 <= a[i] <= 10^6\n\nC++ solution template\n\nusing only ints for n and a.\n\ntemplate<int n>\nint solution(int n)\n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    int a[n];\n    return solution(n - 1) + solution(n - 2);\n}\n\n-----Brute Force-----\n\ntemplate<int n>\nint solution(int n)\n{\n    int a[n];\n    int min;\n    int ans;\n    a[n] = min;\n    for (int i = 1; i < n; i++)\n        a[i] = min;\n    for (int i = 1; i < n; i++)\n        if (a[i] >= a[i - 1])\n            min = a[i];\n    if (min > ans)\n        ans = min;\n    return ans;\n}\n",
        "test": "assert solution(stdin) == \"5\"",
        "num_ids": 1044
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    days = [0, 0, 0]\n    for i in range(1, n+1):\n        days[0], days[1] = 0, 1\n        for j in range(2, n+1):\n            days[j] = min(days[j-1], days[j-2] + 1)\n    return str(days[n])\n",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 710
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        stdin[i] = int(stdin[i])\n        if stdin[i] == 0:\n            del stdin[i]\n            stdin.append(0)\n    return str(max(stdin))\n\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\nhttps://practice.geeksforgeeks.org/problems/full-of-squares-smallest-number-of-lines/1/?track=LeetCode\n\n\nclass Solution:\n    def fullOfSquares(self, n: int) -> int:\n        \n        sol = 0\n        square = 2\n        \n        while square <= n:\n            sol += square * square\n            square *= 2\n        \n        return sol",
        "test": "assert solution(7) == '1'",
        "num_ids": 1795
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    # [ ] Shortcuts for the type of cheese\n    # [ ] Shortcuts for the type of cheese\n    # [ ] Shortcuts for the type of cheese\n    # [ ] Shortcuts for the type of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 2218
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n,*a,b = map(int,stdin.split())\n    a.sort()\n    b.sort()\n    for i in range(len(a)-1,-1,-1):\n        if a[i]+b[i]<n:\n            a[i]=n-b[i]-a[i]\n            b[i]=0\n    return ''.join(str(i) for i in a)\n\ndef",
        "test": "assert solution(",
        "num_ids": 467
    },
    {
        "number": 4191,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    b = []\n    for i in range(len(a)):\n        b.append(1 if a[i] == 1 else 0)\n    return str(b).strip()\n\n\n-----Input-----\n\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Output-----\n\nOutput a single digit, 0 or 1.\n\n\n-----Example-----\nInput\n0\n1\n1\n0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n5\n2\n1 1 1 1\n\nOutput\n1\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 1 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 1 0 1\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n2\n1 1 1 1\n\nOutput\n1\n\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n2\n1 1 1 1\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n2\n1 1 1 1\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 2348
    },
    {
        "number": 4192,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    return 'Yes' if T >= S else 'No'\n",
        "test": "assert solution(\"2 2 10\") == \"No\"",
        "num_ids": 318
    },
    {
        "number": 4193,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    n = len(a[0])\n    c = [[0] * n for _ in range(m)]\n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == a[i][j] == a[i][j] == a[i][j]:\n                c[i][j] = 1\n                ans += 1\n    for i in range(m):\n        for j in range(n):\n            if c[i][j] == 1:\n                for k in range(n):\n                    if k!= j:\n                        if c[i][k] == 1:\n                            if c[i + 1][k] == 1:\n                                if c[i + 2][k] == 1:\n                                    c[i][j] = 1\n                                    c[i + 1][j] = 1\n                                    c[i + 2][k] = 1\n                                    ans += 1\n                                    break\n    if ans == 0:\n        return \"No\"\n    return \"Yes\"\n\"\"\"\n\n\nclass Solution:\n    def bingo(self, nums: List[int]) -> bool:\n        num_dict = {}\n        for num in nums:\n            num_dict[num] = num_dict.get(num, 0) + 1\n\n        def check_bingo(num_dict, start_row, start_col):\n            if num_dict[start_row][start_col] == 3:\n                return False\n            for i in range(start_row, start_row + 3):\n                for j in range(start_col, start_col + 3):\n                    if num_dict[i][j] == 3:\n                        return False\n            return True\n\n        n = len(nums)\n        res = 0\n        for i in range(n):\n            for j in range(n):\n                if check_bingo(num_dict, i, j):\n                    res += 1\n        return res == n\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 913
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    s = [0 for _ in range(N+1)]\n    s[0] = 1\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if j == A[i-1]:\n                s[i] += s[i-1]\n            else:\n                s[i] = 0\n                break\n    if s[-1] == 0:\n        return -1\n    return max(s)",
        "test": "assert solution(stdin) == 30",
        "num_ids": 349
    },
    {
        "number": 4195,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return next(int(i) for i in range(0, 100) if len(str(i * 100)) == len(str(int(stdin) // 100)))\n",
        "test": "assert solution(\"100 100\") == \"100\"",
        "num_ids": 1878
    },
    {
        "number": 4196,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % A[j] == 0:\n                break\n        else:\n            return str(A[i])\n    return str(A[i])\n\nExplanation\n\nInput: A = [7,6,8]\nOutput: 7\nInput: A = [7,6,8,9,10]\nOutput: 2\nInput: A = [7,8,9,10]\nOutput: 9\nInput: A = [7,8,9,3,2,4,5]\nOutput: 3\nInput: A = [3,5,6]\nOutput: 2\nInput: A = [1,2,3]\nOutput: 1\nInput: A = [10]\nOutput: 0\nExplanation:\nThere are no two numbers that can be written as the greatest common divisor of A[0] and A[1].\nInput: A = [7,8,9,10]\nOutput: 0\nInput: A = [7,8,9,3,2,4,5,8]\nOutput: 7\nInput: A = [7,8,9,3,2,4,5,10]\nOutput: 3\nInput: A = [10]\nOutput: 0\nInput: A = [7,8,3,2,4,5]\nOutput: 3\nInput: A = [7,8,3,4,5]\nOutput: 2\nInput: A = [7,8,3,4,5,6]\nOutput: 1\nInput: A = [7,8,3,4,5,7]\nOutput: 1\nInput: A = [7,8,3,4,5,8]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8]\nOutput: 6\nInput: A = [1,2,3,4,5,8]\nOutput: 3\nInput: A = [1,2,3,4,5,8,9,10]\nOutput: 8\nInput: A = [1,2,3,4,5,8,9,10,11]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10]\nOutput: 5\nInput: A = [1,2,3,4,5,6,7,8,9,10,11]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12]\nOutput: 7\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nOutput: 4\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\nOutput: 3\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\nOutput: 4\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\nOutput: 3\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]\nOutput: 3\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
        "test": "assert solution([\"6\",\"2\",\"3\"]) == \"3\"",
        "num_ids": 2414
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Hint\n    # 1) Use the dictionary to add the student number at each time as key and their corresponding value as a tuple value.\n    # 2) Use the list to sort the student numbers.\n    # 3) As a result, the function should return the result.\n    n = int(stdin.split()[0])\n    A = [int(x) for x in stdin.split()[1:n+1]]\n    A.sort()\n    \n    # Hint\n    # 1) Use the dictionary to add the student number at each time as key and their corresponding value as a tuple value.\n    # 2) Use the list to sort the student numbers.\n    # 3) As a result, the function should return the result.\n    return''.join(str(x) for x in A)\n\n\"\"\"\nA = [1, 2, 3]\nB = [1, 2, 3]\nC = [1, 2, 3]\n\ndef",
        "test": "assert solution(\")\") == \"3 1 1\"",
        "num_ids": 604
    },
    {
        "number": 4198,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = 10 ** n\n    b = 10 ** k\n    for i in range(10, 10**9 + 1):\n        if i % b!= 0:\n            a *= i // b\n            print(a)\n        else:\n            print(int(a))\n            return str(a)\n",
        "test": "assert solution(input) == \"9\"",
        "num_ids": 265
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, n, h = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        h_i = int(input())\n        lst.append(h_i)\n    \n    for i in range(k-1):\n        for j in range(n-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    print(len(lst))\n    return str(len(lst))\n\"\"\"\n\ndef",
        "test": "assert solution(input()) == '2'",
        "num_ids": 698
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = map(int, stdin.split())\n    \n    # Sieve of Eratosthenes\n    sieve = [True for _ in range(N + 1)]\n    sieve[0] = sieve[1] = False\n    for i in range(2, N + 1):\n        if sieve[i]:\n            sieve[i * i::i] = [False, False] + [True] * (i * i - 2)\n\n    # Number of possible popular items\n    total_votes = (M + 1) // 4\n\n    # Initialize and count number of votes\n    popular_votes = [0 for _ in range(total_votes)]\n    for i in A:\n        popular_votes[i] += 1\n\n    # Count number of popular items\n    popular_items = [0 for _ in range(total_votes)]\n    for i in range(total_votes):\n        if popular_votes[i] == M:\n            popular_items[i] = 1\n        else:\n            popular_items[i] = 0\n\n    # Sort popular items in decreasing order\n    popular_items.sort(reverse=True)\n\n    # No popular items can be selected\n    # if M == 1:\n    #     print('Yes')\n    # else:\n    #     print('No')\n\n    # Count number of popular items\n    return 'Yes' if popular_items[0] == M else 'No'\n\nprint(solution('4 1')) # 'Yes'\n",
        "test": "assert solution(input()) == 'No'",
        "num_ids": 2433
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    solution = 0\n    col, row, ans = 0, 0, 0\n    for line in stdin:\n        if line == '#':\n            row += 1\n        elif line == '.':\n            col += 1\n        else:\n            ans = max(row, col, ans)\n            solution += 1\n    return str(solution)",
        "test": "assert solution(input()) == 10",
        "num_ids": 550
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin.split()))\n    num_list.sort()\n    num_list.append(num_list[-1] + 2*num_list[-2] + num_list[-3]//3)\n    result = []\n    for i in range(len(num_list) - 2):\n        if num_list[i] == num_list[i + 1] or num_list[i + 1] == num_list[i + 2]:\n            continue\n        result.append(num_list[i] * (num_list[i + 1] * num_list[i + 2]))\n    return str(max(result))\n\"\"\"\ndef",
        "test": "assert solution(\"2020 2040\") == \"2\"",
        "num_ids": 331
    },
    {
        "number": 4203,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = a.upper()\n    b = b.upper()\n    if a == 'A' and b == 'C':\n        return 'WA'\n    elif a == 'A' and b == 'C':\n        return 'WA'\n    elif b == 'A' and a!= 'C':\n        return 'WA'\n    elif a == b:\n        return 'AC'\n    else:\n        return 'WA'\n",
        "test": "assert solution(\"AtCoder\") == \"AC\"",
        "num_ids": 2384
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  \n  string = stdin.split('\\n')\n  # print(string)\n  \n  # find start of string by 0 + K, then find end of string by (K + 1) -1\n  \n  start = 0\n  end = 0\n  for i in range(len(string)):\n    if i == 0:\n      start = len(string[i])\n      end = len(string[i]) + K\n    else:\n      if string[i][start] == '0':\n        start -= 1\n      end = len(string[i])\n      # print(string[i])\n      # print(string[i][start])\n      # print(start)\n      # print(end)\n      \n      if string[i][end] == '9':\n        start += 1\n        end -= 1\n        \n      # print(start)\n      # print(end)\n      # print(string[i][start:end])\n      \n      if string[i][end] == '2':\n        end += 1\n        \n        \n  # print(string[i][start:end])\n  return string[i][start:end]",
        "test": "assert solution(22) == '2'",
        "num_ids": 455
    },
    {
        "number": 4205,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return 'YES' if p[0]*p[-1] > p[0]*p[1] and p[-1]*p[-2] > p[-1]*p[-3] and p[1]*p[-2] > p[1]*p[-3] else 'NO'",
        "test": "assert solution(\"5 2 3 4 1\") == \"YES\"",
        "num_ids": 2360
    },
    {
        "number": 4206,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    # a = s-1\n    # b = s-s\n    #\n    # while a>=0:\n    #     if a%3==0:\n    #         a -=1\n    #     else:\n    #         return \"No\"\n    #\n    # while b>=0:\n    #     if b%3==0:\n    #         b -=1\n    #     else:\n    #         return \"No\"\n    #\n    # while a>=0 and b>=0:\n    #     if a%3==0 or b%3==0:\n    #         return \"No\"\n    #\n    #     a -=1\n    #     b -=1\n    # return \"Yes\"\n    \n    # see the solution in pygadgets/tests.py\n    count = 0\n    a = s-1\n    b = s-s\n    \n    while a>=0:\n        if a%3==0:\n            count += 1\n        a -=1\n    \n    while b>=0:\n        if b%3==0:\n            count += 1\n        b -=1\n    \n    return str(count)\n\ndef",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 637
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    d = int(stdin.split()[1])\n    c.sort()\n    if d < 0:\n        d = -d\n        c.append(d)\n    c.sort()\n    a = c[0]\n    b = c[-1]\n    ans = 0\n    i = 0\n    while i < n:\n        if a <= a <= b or a <= b <= b:\n            i += 1\n            ans += 1\n            a += 1\n        elif a > b:\n            break\n        elif a < b:\n            a += d\n        else:\n            b += d\n    print(ans)\n    \n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 459
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, l, r = map(int, stdin.split())\n    left = [l]\n    right = [r]\n    res = []\n    while left or right:\n        r = r % N\n        if r == 0:\n            return res\n        if r > N:\n            break\n        if right:\n            l = left[-1]\n            right = right[:-1]\n            left.append(l)\n        else:\n            l = left[-1]\n            right = right[:-1]\n            left.append(l)\n        res.append(l)\n    return''.join(res)\n\ndef",
        "test": "assert solution(stdin) == 10",
        "num_ids": 617
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip().decode())\n    a = list(map(int, stdin.rstrip().decode().split()))\n    l = 1\n    r = max(a)\n    ans = []\n    while l < r:\n        if a[l] + a[r] == l + r:\n            ans.append(l + r)\n            l += 1\n            r -= 1\n        elif a[l] + a[r] > l + r:\n            r -= 1\n        else:\n            l += 1\n    return str(len(ans)) + \" \" + str(ans)\n",
        "test": "assert solution(input()) == '4'",
        "num_ids": 399
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    k = 2\n    pairs = 0\n    for i in range(n - 2):\n        if a[i] % k == 0:\n            k += a[i + 1] - a[i]\n        else:\n            pairs += 1\n    if k % 2!= 0:\n        return str(pairs)\n    else:\n        return str(pairs - 1)\n",
        "test": "assert solution(stdin) == '7'",
        "num_ids": 589
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  \n  n, a, b, = map(int, stdin.split())\n  a, b = map(int, a.split())\n  n -= 1\n  sum_a = a + b\n  sum_a = sum_a % 10**9 + sum_a\n  max_a = a % 10**9 + a\n  max_b = b % 10**9 + b\n  answer = 0\n  for i in range(n):\n    answer = max(answer, sum_a - max_a * i)\n    answer = max(answer, sum_b - max_b * i)\n    sum_a = max_a % 10**9 + max_a\n    sum_b = max_b % 10**9 + max_b\n  return str(answer)\n\ndef",
        "test": "assert solution(",
        "num_ids": 430
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, Q_ = map(int, stdin.split())\n    a_Q_ = list(map(int, stdin.split()))\n    a_Q_.sort()\n    d_i, c_i = 0, 0\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    for a_i in range(N):\n        for b_i in range(a_i):\n            for c_i in range(b_i + 1, N):\n                for d_i in range(c_i + 1, N):\n                    c_i, d_i = map(int, stdin.split())\n                    A[a_i][b_i] -= c_i\n                    A[a_i][b_i] -= d_i\n                    A[c_i][d_i] -= c_i\n                    A[c_i][d_i] -= d_i\n                    if A[b_i][d_i] < 0:\n                        A[b_i][d_i] = 0\n                    A[c_i][d_i] += A[b_i][d_i]\n                    d_i += A[c_i][d_i] + A[b_i][d_i]\n                    A[b_i][c_i] -= A[a_i][b_i]\n                    A[b_i][c_i] -= A[a_i][b_i]\n                    A[c_i][d_i] += A[a_i][b_i]\n                    d_i += A[a_i][b_i] + A[c_i][d_i]\n                    c_i += A[c_i][d_i]\n    A[0][N - 1] = M - sum(a_Q_)\n    for a_i in range(N):\n        A[a_i][0] -= c_i\n        A[a_i][0] -= d_i\n        for b_i in range(a_i + 1, N):\n            A[b_i][0] -= c_i\n            A[b_i][0] -= d_i\n            A[b_i][N - 1] += c_i\n        for b_i in range(N - 1, a_i, -1):\n            A[b_i][N - 1] -= A[b_i][N - 1]\n        A[a_i][N - 1] -= d_i\n        A[a_i][N - 1] -= c_i\n        A[a_i][0] += A[a_i][N - 1]\n        A[a_i][0] += A[a_i][N - 1]\n    for a_i in range(N):\n        A[a_i][0] += sum(a_Q_)\n        for b_i in range(1, N):\n            A[a_i][b_i] += A[a_i][b_i - 1]\n            A[a_i][b_i] += A[a_i][b_i - 1]\n            A[a_i][b_i] -= A[a_i][b_i - 1]\n            A[a_i][b_i] -= A[a_i][b_i - 1]\n        A[a_i][0] += A[a_i][1]\n        for b_i in range(N - 2, -1, -1):\n            A[a_i][b_i] += A[a_i][b_i + 1]\n            A[a_i][b_i] += A[a_i][b_i + 1]\n            A[a_i][b_i] -= A[a_i][b_i + 1]\n            A[a_i][b_i] -= A[a_i][b_i + 1]\n        for c_i in range(a_i + 1, N):\n            A[c_i][0] += A[c_i - 1][N - 1]\n            A[c_i][0] += A[c_i - 1][N - 2]\n            A[c_i][0] -= A[c_i - 1][N - 1]\n            A[c_i][0] -= A[c_i - 1][N - 2]\n        for c_i in range(N - 2, -1, -1):\n            A[a_i][c_i] += A[a_i + 1][c_i]\n            A[a_i][c_i] += A[a_i + 1][c_i + 1]\n            A[a_i][c_i] -= A[a_i + 1][c_i]\n            A[a_i][c_i] -= A[a_i + 1][c_i + 1]\n    for b_i in range(N - 1, 0, -1):\n        for c_i in range(b_i + 1, N):\n            A[b_i][c_i] += A[b_i][c_i - 1]\n            A[b_i][c_i] += A[b_i][c_i - 1]\n            A[b_i][c_i] -= A[b_i][c_i - 1]\n            A[b_i][c_i] -= A[b_i][c_i - 1]\n        for c_i in range(b_i - 1, -1, -1):\n            A[a_i][b_i] += A[a_i][c_i]\n            A[a_i][b_i] += A[a_i][c_i + 1]\n            A[a_i][b_i] -= A[a_i][c_i]\n            A[a_i][b_i] -= A[a_i][c_i + 1]\n        for c_i in range(N - 1, a_i, -1):\n            A[a_i][b_i] += A[a_i][c_i]\n            A[a_i][b_i] += A[a_i][c_i + 1]\n            A[a_i][b_i] -= A[a_i][c_i]\n            A[a_i][b_i] -= A[a_i][c_i + 1]\n        for c_i in range(N - 2, -1, -1):\n            A[a_i][b_i] += A[a_i + 1][c_i]\n            A[a_",
        "test": "assert solution('{1, 3, 4}') == '110'",
        "num_ids": 1956
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 0\n    for i in range(a, b + 1):\n        ans = max(ans, abs(i - a))\n    return str(ans)",
        "test": "assert solution(int(input())) == 7",
        "num_ids": 356
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x_1 = int(stdin.split()[1])\n    x_N = int(stdin.split()[2])\n    \n    def calculate_length(x: int, y: int) -> int:\n        return math.sqrt(abs(x - y))\n    \n    paths = []\n    for i in range(N):\n        x, y = x_1, x_N\n        while True:\n            if x == x_N:\n                break\n            if calculate_length(x, y) < calculate_length(x, y + 1):\n                break\n            x += 1\n        paths.append((x_1, y))\n        x_1 += 1\n    \n    paths.append((x_1, x_N))\n    \n    lengths = []\n    for path in paths:\n        lengths.append(calculate_length(path[0], path[1]))\n    \n    return sum(lengths) / len(lengths)",
        "test": "assert solution([\"0\", \"1\", \"0\", \"1\"]) == 3.153969",
        "num_ids": 1926
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    w = [int(i) for i in stdin.split()]\n    A = w[0]\n    B = w[1]\n    if len(w) < 3:\n        return ''\n    if A >= B:\n        return str(A) + '.' + str(B)\n    else:\n        return str(B) + '.' + str(A)\n\n\n-----Sample Output-----\n2.75\n\n\"\"\"\ndef",
        "test": "assert solution(\"./../input.txt\") == \"5\"",
        "num_ids": 254
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def solution_1(n: int) -> str:\n        \"\"\"\n        A solution to F(A,B) = A \\times B.\n        \"\"\"\n        if n == 0:\n            return '0'\n        elif n == 1:\n            return str(n)\n        else:\n            return str(n) + '*' + str(n)\n\n    def solution_2(n: int) -> str:\n        \"\"\"\n        B solution:\n        a = A / B\n        c = A % B\n        a = a % 10\n        c = c % 10\n        a = a / 10\n        c = c / 10\n        \"\"\"\n        a = str(n)\n        b = '0'\n        c = '0'\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        else:\n            return a + '*' + b\n\n    A, B = map(int, stdin.split())\n    return solution_1(A) + solution_2(B)\n\nprint(solution(\"10000000\"))\n",
        "test": "assert solution(\"2A\") == \"1\"",
        "num_ids": 625
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = set(map(int, stdin.split()))\n    A.remove(K)\n    ans = 0\n    for i in range(N):\n        ans += A.pop() * (len(A) - 1)\n    return str(ans)\n\"\"\"\n\nimport heapq\n\ndef",
        "test": "assert solution([\"3 4\", \"2 1 3\", \"2 3 2\", \"2 1 2 3\", \"2 3 2\"]) == \"1\"",
        "num_ids": 661
    },
    {
        "number": 4218,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = n\n    y = 0\n    z = 0\n    for i in range(1, n):\n        if (x > n) or (y < x):\n            break\n        if (y >= n) or (z < y):\n            z = z + 1\n        if y >= n:\n            y = y - (n % y)\n            z = z + 1\n        if z >= n:\n            z = z - (n % z)\n        if y > x:\n            y = y - (n % y)\n        if z > x:\n            z = z - (n % z)\n        if y > z:\n            y = y - (n % y)\n        if z > y:\n            z = z - (n % z)\n        if y > x and z > y:\n            y = y - (n % y)\n            z = z - (n % z)\n    return str(z/4)",
        "test": "assert solution(input()) == '0.5'",
        "num_ids": 412
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, A, x, y = map(int, stdin.split())\n    A_total = 0\n    A_total += N - (A_total)\n    for i in range(N - 1):\n        A_total += (1 - A) * (x[i] - x[i + 1]) * (y[i + 1] - y[i])\n    if A_total == 0:\n        return str(N)\n    if A_total % 2 == 1:\n        return str(N - (A_total // 2))\n    return str((A_total // 2) + 1)",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 420
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    for k in stdin:\n        if k == \"n\":\n            answer += stdin[:7]\n            stdin = stdin[7:]\n        else:\n            answer += k\n    return answer\n\ndef",
        "test": "assert solution(\"nikoandsolstice\") == \"nikoand...\"",
        "num_ids": 272
    },
    {
        "number": 4221,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()\n    if len(S) == 1:\n        return S[0]\n    for i in range(1,len(S)):\n        if S[i][-1]!= \"e\":\n            return S[i]+\"es\"\n        S[i] = S[i][:-1]\n    return \"es\"\n\n--------------------------------------------------------------------------------------------------------------------------------------------",
        "test": "assert solution(input()) == \"apples\"",
        "num_ids": 388
    },
    {
        "number": 4222,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1, A_1 = map(int, stdin.split())\n    d_2, A_2 = map(int, stdin.split())\n    d_3, A_3 = map(int, stdin.split())\n    d_1 -= 1\n    d_2 -= 1\n    d_3 -= 1\n    if d_1 + d_2 + d_3 < N and A_1 + A_2 + A_3 == K:\n        return str(1)\n    return str(0)",
        "test": "assert solution(\"2 3\") == \"0\"",
        "num_ids": 684
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N,S = map(int,stdin.split())\n    return '\\n'.join(map(str,(S[:N//2]+S[N//2:])[::-1]))\n\n\"\"\"\nclass Solution:\n    def nCr(self, n, r):\n        f = factorial\n        return f(n) // f(n-r) // f(r) // f(r+1)\n    def solution(self, N, S):\n        def cycle_length(a):\n            count = 0\n            for i in range(N):\n                count += sum(1 for j in range(len(a)) if a[i] == a[j])\n            return count\n        return self.nCr(N,cycle_length(S))\n\nn = 10\nS = \"aabbbaaca\"\nsolution(n,S)\n",
        "test": "assert solution(input) == \"5\"",
        "num_ids": 1004
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_list = [int(i) for i in stdin.split()]\n    \n    if a_list[0] >= 3:\n        return str(a_list[0])\n    \n    if a_list[0] >= 5:\n        return str(a_list[0]) +'' + solution(str(N - a_list[0]) +'' + str(a_list[1]))\n    \n    if a_list[0] >= 2:\n        return str(a_list[0]) +'' + solution(str(N - a_list[0]) +'' + str(a_list[1])) +'' + solution(str(N - a_list[0]) +'' + str(a_list[2]))\n    \n    if a_list[0] >= 1:\n        return solution(str(N - a_list[0])) +'' + solution(str(N - a_list[1])) +'' + solution(str(N - a_list[2]))\n\nTime complexity: O(N)\nSpace complexity: O(1)",
        "test": "assert solution(\"5\") == \"4\"",
        "num_ids": 531
    },
    {
        "number": 4225,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = [int(s) for s in stdin.split(\" \")]\n    return str(max(A, B, C) + max(K - (A + B + C), -1))",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 232
    },
    {
        "number": 4226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    x, y = map(int, stdin.split())\n    cranes = x // 3\n    turtles = y // 2\n    if (cranes + turtles) % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "test": "assert solution(input()) == \"Yes\"",
        "num_ids": 449
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import deque\nimport sys\n\n\nclass Graph:\n    def __init__(self, n: int, m: int):\n        self.V = range(n+1)\n        self.graph = {}\n        for i in range(1, n+1):\n            self.graph[i] = []\n        for _ in range(m):\n            a, b = map(int, input().split())\n            self.graph[a].append(b)\n            self.graph[b].append(a)\n\n    def DFS(self, v: int, parent: int, visited: list):\n        visited.append(v)\n        print(v, end=\" \")\n        for i in self.graph[v]:\n            if i not in visited:\n                self.DFS(i, v, visited)\n\n    def BFS(self, v: int, parent: int, visited: list):\n        queue = deque([v])\n        visited.append(v)\n        while queue:\n            v = queue.popleft()\n            print(v, end=\" \")\n            for i in self.graph[v]:\n                if i not in visited:\n                    queue.append(i)\n                    visited.append(i)\n\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        visited = []\n        for i in range(1, n+1):\n            self.DFS(i, 0, visited)\n        print(len(visited)-1)\n        for i in range(1, n+1):\n            self.BFS(i, 0, visited)\n        return str(len(visited)-1)\n\n\ndef",
        "test": "assert solution(input) == 5, 'Error'",
        "num_ids": 758
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, l, h = map(int, stdin.split())\n    print(n)\n    print(l)\n    print(h)\n    answer = ''\n    if h < l:\n        print(-1)\n    else:\n        answer = str(n-l)\n        answer = answer.split('+')\n        answer.pop()\n        answer = ''.join(answer)\n    return answer",
        "test": "assert solution(5,3) == 6",
        "num_ids": 389
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n    \n    for i in range(1,N+1):\n        if i%3==0:\n            answer+=i\n        if i%5==0:\n            answer+=i\n            \n    return str(answer)\n\nN = int(input())\nprint(solution(N))",
        "test": "assert solution(",
        "num_ids": 382
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    ls = input().split()\n    xs = [int(i) for i in input().split()]\n    ps = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            ps.append((xs[i], xs[j]))\n    ps.sort()\n    for p in ps:\n        if p[0] == xs[p[1]]:\n            return str(p[0])",
        "test": "assert solution(inp) == \"8\"",
        "num_ids": 276
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h = n\n    w = m\n    answer = 1\n    for i in range(h):\n        for j in range(w):\n            if i == 0 or j == 0 or i == h-1 or j == w-1:\n                answer += 1\n    return str(answer)\n\ndef",
        "test": "assert solution(input) == '1'",
        "num_ids": 384
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        a, b = map(int, stdin.strip().split())\n        a = int(a)\n        if a > b:\n            return \"-1\"\n    return str(a)\n\n\nInput\n7 4\n3 7 5 1 10 3 20\n\nOutput\n6\n\n'''\n\n\ndef",
        "test": "assert solution(input()",
        "num_ids": 620
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    x_star = [x] * n\n    y_star = [y] * m\n    s_star = [n*m] * n\n    x_star[0] = 1\n    y_star[0] = 1\n    s_star[0] = n*m\n    for i in range(1, n):\n        x_star[i] = x_star[i-1] + x_star[i-1]*(x_star[i-1] > 0)\n        y_star[i] = y_star[i-1] + y_star[i-1]*(y_star[i-1] > 0)\n        s_star[i] = s_star[i-1] + (n*m)**2\n        if x_star[i] > 0:\n            x_star[i] -= 1\n        if y_star[i] > 0:\n            y_star[i] -= 1\n    x_star[n-1] = 1\n    y_star[m-1] = 1\n    s_star[m-1] = n*m\n    for i in range(n-2, -1, -1):\n        x_star[i] = x_star[i+1] + x_star[i+1]*(x_star[i+1] > 0)\n        y_star[i] = y_star[i+1] + y_star[i+1]*(y_star[i+1] > 0)\n        s_star[i] = s_star[i+1] + (n*m)**2\n        if x_star[i] > 0:\n            x_star[i] -= 1\n        if y_star[i] > 0:\n            y_star[i] -= 1\n    s_star[0] = n*m\n    return str(s_star[-1])\n",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 806
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    strings = list(map(str, stdin.strip().split()))\n    i = 0\n    i = min(n-i, len(strings))\n    while(i):\n        s = strings[i]\n        print(s)\n        del strings[i]\n        i -= 1\n    for j in range(i):\n        s = strings[j]\n        if s == \"\":\n            continue\n        print(s)\n        print(len(s)-len(s.strip().replace(\" \", \"\")))\n        print(min(len(s)-len(s.strip().replace(\" \", \"\")), n-len(s.strip().replace(\" \", \"\"))))\n        i += 1\n    return str(i)\n\n-----Run-----\n\nimport sys\ndef",
        "test": "assert solution(6) == \"aab\"",
        "num_ids": 409
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    graph = [[] for i in range(n)]\n    for i in range(n):\n        u, v = map(int, stdin[i + 2].split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    for i in range(m):\n        u, v = map(int, stdin[i + 2].split())\n        if u!= v:\n            graph[u - 1][v - 1] = 0\n    result = []\n    for v in range(n):\n        for u in range(n):\n            if graph[u][v] == 1:\n                if v > u:\n                    result.append(\"1\")\n                else:\n                    result.append(\"0\")\n    return \"\".join(result)\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 602
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l, r = map(int, stdin.split())\n    if n < m:\n        return \"0\"\n    if n >= m:\n        return \"0\"\n    segments = []\n    for i in range(n):\n        segments.append((l + (i + 1) * (r - l), r + (i + 1) * (r - l)))\n    ans = \"\"\n    for i in range(n):\n        if segments[i][0] <= segments[i][1]:\n            segments[i][1] += 1\n        else:\n            segments[i][0] += 1\n        if segments[i][1] >= m:\n            break\n        if segments[i][1] < m:\n            ans += str(i + 1) + \" \"\n        else:\n            ans += str(i + 1) + \" \"\n            ans += str(segments[i][0] - segments[i][1]) + \" \"\n    return ans\n-----Constraints-----\n1 <= n <= 100\n1 <= m <= 100\n1 <= l <= m\n1 <= r <= n\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\nclass Solution:\n    def intervalIntersection(self, first: List[List[int]], second: List[List[int]]) -> List[List[int]]:\n        def getIntersection(first_index, second_index):\n            if first_index >= second_index or first_index >= first_index + 2:\n                return None\n            return [min(first[first_index][0], second[second_index][0]), max(first[first_index][1], second[second_index][1])]\n        \n        l_first, r_first = getIntersection(0, 0)\n        l_second, r_second = getIntersection(0, 1)\n        l_intersect, r_intersect = 0, 0\n        \n        for i in range(1, n):\n            if l_first >= segments[i - 1][0] and r_first <= segments[i - 1][1]:\n                l_intersect = min(l_intersect, segments[i - 1][0])\n            if l_second >= segments[i - 1][0] and r_second <= segments[i - 1][1]:\n                r_intersect = max(r_intersect, segments[i - 1][1])\n            if l_intersect <= l_first <= r_intersect:\n                return [l_first, r_first]\n            if l_intersect <= l_second <= r_intersect:\n                return [l_second, r_second]\n            l_first, r_first = getIntersection(l_first, r_first)\n            l_second, r_second = getIntersection(l_second, r_second)\n        return None\n\n\n        return None\n",
        "test": "assert solution(\"1 7\") == \"0\"",
        "num_ids": 1251
    },
    {
        "number": 4237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    A = A + B\n    B = B * (C // D)\n    print(int(B // A))\n",
        "test": "assert solution(input) == \"5 and 7\"",
        "num_ids": 2150
    },
    {
        "number": 4238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    for i in stdin:\n        a = a + int(i)\n        b += a\n    if b == a:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('1232') == 'No','solution()'",
        "num_ids": 388
    },
    {
        "number": 4239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if N < 0:\n        return \"0\"\n    elif N == 0:\n        return \"1\"\n    else:\n        return f\"{int((N/7)**0.5)}/{int((N/36)**0.5)}/{int((N/81)**0.5)}/{int((N/729)**0.5)}\"\n\"\"\"\ndef",
        "test": "assert solution(input) == 6",
        "num_ids": 442
    },
    {
        "number": 4240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def rotate_string(string: str, index: int) -> str:\n        return string[index:] + string[:index]\n    def rotate(string: str, rotation: int) -> str:\n        if rotation % 2 == 0:\n            return string[rotation:] + string[:rotation]\n        else:\n            return string[rotation:] + string[:rotation]\n    def rotations(string: str, count: int) -> str:\n        return string[count:] + string[:count]\n    string = stdin.strip()\n    print(rotate_string(string, 0))\n    print(rotate_string(string, len(string) - 1))\n    print(rotate(string, 1))\n    print(rotate(string, len(string) - 1))\n    print(rotations(string, 2))\n    print(rotations(string, 2))\n    print(rotations(string, len(string) - 2))\n    print(rotations(string, len(string) - 1))\n    print(rotations(string, 0))\n    return 'Yes' if len(string) == len(rotate(string, 2)) else 'No'\n\nprint(solution('kyoto'))\nprint(solution('tokyo'))\nprint(solution('sample test'))\n",
        "test": "assert solution(input()) == \"Yes\"",
        "num_ids": 1174
    },
    {
        "number": 4241,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    str = input()\n    str = str.lower()\n    print(len(str))\n    return str[::-1]\n\nn = int(stdin.strip())\n",
        "test": "assert solution(\"cabacc\"), \"string not accepted\"",
        "num_ids": 655
    },
    {
        "number": 4242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  n, k = list(map(int, stdin.split()))\n  for _ in range(k):\n    A, B = list(map(int, stdin.split()))\n    if A % B == 0:\n      return str(B)\n  \n'''\n",
        "test": "assert solution(",
        "num_ids": 353
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    coins = [int(c) for c in stdin.split()[1]]\n    happiness = 0\n    for coin in coins:\n        happiness += coin * X\n    if happiness > 50:\n        happiness = 50\n    elif happiness > 5:\n        happiness = 5\n    elif happiness > 10:\n        happiness = 10\n    elif happiness > 5:\n        happiness = 5\n    elif happiness > 1:\n        happiness = 1\n    return str(happiness)\n\n\"\"\"\n\nimport math\n\ndef",
        "test": "assert solution(stdin) == '2020'",
        "num_ids": 1860
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X_1, X_2, *_ = map(int, stdin.split())\n    _, total = divmod(X_1*X_2, N)\n    return str(total)\n\n\"\"\"\nclass Solution:\n    def minStamina(self, N: int, X: int, P: int) -> str:\n        return str(X*X - N*N - P*P)\n",
        "test": "assert solution(inp) == 5",
        "num_ids": 339
    },
    {
        "number": 4245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    s1 = int(stdin.split(' ')[0])\n    s2 = int(stdin.split(' ')[1])\n    \n    result = 0\n    \n    while s1 > 0 or s2 > 0:\n        s1 = s1 // 2\n        s2 = s2 // 2\n        \n        if s2 >= s1:\n            s1, s2 = s2, s1\n            \n            result += 1\n    \n    return str(result)\n\"\"\"\n\ndef",
        "test": "assert solution(\"0 0 0 0 0\") == \"2\"",
        "num_ids": 257
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s, t, p = [l.split() for l in stdin.split('\\n')]\n    st = len(s) - 1\n    tt = len(t) - 1\n    l = len(p)\n    if st < tt:\n        return 'ERROR'\n    if st > tt:\n        return 'ERROR'\n    for i in range(l):\n        if s[i] == 'C':\n            if i!= st and s[st - i]!= 'R':\n                return 'ERROR'\n        elif s[i] == 'R':\n            if i!= st and s[st - i]!= 'C':\n                return 'ERROR'\n    for i in range(l):\n        if p[i] == 'C':\n            if i!= tt and p[tt - i]!= 'R':\n                return 'ERROR'\n        elif p[i] == 'R':\n            if i!= tt and p[tt - i]!= 'C':\n                return 'ERROR'\n    return 'Correct'\n-----Sample Output-----\nSample Input:\nC\\nR\\nR\\nR\\n\nSample Output:\n1\n\n Explanation:\nGiven the string S = 'CRCB', the string is actually rainy. In this case, it is correct.\n\n-----Constraints-----\n - S and T are strings of length 3 each.\n - S and T consist of S, C, and R.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n\n-----Output-----\nPrint the number of days for which the forecast was correct.\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == 2",
        "num_ids": 673
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    permutation = [int(x) for x in stdin.split()]\n    answer = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if permutation[i] > permutation[j] and permutation[i] > permutation[k]:\n                    answer.append(permutation[i] + permutation[j] + permutation[k])\n    return str(len(set(answer)))\n\n-----Sample Output-----\n5\n1 3 5 4 2\n\"\"\"\n",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 462
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(float(stdin.split(' ')[0]) - float(stdin.split(' ')[1])))[-2:]\n",
        "test": "assert solution(stdin) == \"5.620\"",
        "num_ids": 690
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    #print(a)\n    #print(max(a[0]))\n    #print(max(a[1]))\n    #print(max(a[2]))\n    #print(max(a[3]))\n    #print(max(a[4]))\n    #print(max(a[5]))\n    #print(max(a[6]))\n    #print(max(a[7]))\n    #print(max(a[8]))\n    #print(max(a[9]))\n    #print(max(a[10]))\n    #print(max(a[11]))\n    #print(max(a[12]))\n    #print(max(a[13]))\n    #print(max(a[14]))\n    #print(max(a[15]))\n    #print(max(a[16]))\n    #print(max(a[17]))\n    #print(max(a[18]))\n    #print(max(a[19]))\n    #print(max(a[20]))\n    #print(max(a[21]))\n    #print(max(a[22]))\n    #print(max(a[23]))\n    #print(max(a[24]))\n    #print(max(a[25]))\n    #print(max(a[26]))\n    #print(max(a[27]))\n    #print(max(a[28]))\n    #print(max(a[29]))\n    #print(max(a[30]))\n    #print(max(a[31]))\n    #print(max(a[32]))\n    #print(max(a[33]))\n    #print(max(a[34]))\n    #print(max(a[35]))\n    #print(max(a[36]))\n    #print(max(a[37]))\n    #print(max(a[38]))\n    #print(max(a[39]))\n    #print(max(a[40]))\n    #print(max(a[41]))\n    #print(max(a[42]))\n    #print(max(a[43]))\n    #print(max(a[44]))\n    #print(max(a[45]))\n    #print(max(a[46]))\n    #print(max(a[47]))\n    #print(max(a[48]))\n    #print(max(a[49]))\n    #print(max(a[50]))\n    #print(max(a[51]))\n    #print(max(a[52]))\n    #print(max(a[53]))\n    #print(max(a[54]))\n    #print(max(a[55]))\n    #print(max(a[56]))\n    #print(max(a[57]))\n    #print(max(a[58]))\n    #print(max(a[59]))\n    #print(max(a[60]))\n    #print(max(a[61]))\n    #print(max(a[62]))\n    #print(max(a[63]))\n    #print(max(a[64]))\n    #print(max(a[65]))\n    #print(max(a[66]))\n    #print(max(a[67]))\n    #print(max(a[68]))\n    #print(max(a[69]))\n    #print(max(a[70]))\n    #print(max(a[71]))\n    #print(max(a[72]))\n    #print(max(a[73]))\n    #print(max(a[74]))\n    #print(max(a[75]))\n    #print(max(a[76]))\n    #print(max(a[77]))\n    #print(max(a[78]))\n    #print(max(a[79]))\n    #print(max(a[80]))\n    ",
        "test": "assert solution(stdin) == -1, \"Test failed\"",
        "num_ids": 1462
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "test": "assert solution(stdin) == \"1 1 1 1\"",
        "num_ids": 406
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin[-1])\n    k = int(stdin[0])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin[i].split())))\n    for i in range(m):\n        for j in range(i+1, m):\n            if a[i][j] < a[j][i]:\n                k -= 1\n                if k == 0:\n                    return \"0\"\n    return str(k)\n\ndef",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 339
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    def replace(stdin, old, new):\n        l = len(old)\n        for i in range(l):\n            if old[i] == 'x':\n                stdin = stdin.replace(old[:i]+new+old[i+1:], new+old[i])\n        return stdin\n    \n    def count(stdin, start, end):\n        l = len(stdin)\n        count = 0\n        for i in range(start, end):\n            if stdin[i] in \"xX\":\n                count += 1\n        return count\n    \n    def judge(stdin):\n        result = 0\n        n = len(stdin)\n        for i in range(n):\n            for j in range(n-i-1):\n                if stdin[j] == 'x' or stdin[j] == 'X':\n                    if count(stdin, j, j+1) == 3:\n                        result = max(result, count(stdin, j, j+1)-2)\n        return result\n    \n    def solution(stdin):\n        return replace(stdin, \"x\", \"\")\n    \n    return solution(stdin)",
        "test": "assert solution(\"hxlx\") == 0, 'Read: \"hxlx\" does not contain \"x\" as a substring'",
        "num_ids": 570
    },
    {
        "number": 4253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    print(4 * int(math.sqrt(3) * 3 ** 2))\n    return 'impossible'\n",
        "test": "assert solution(3, 4) == 4",
        "num_ids": 193
    },
    {
        "number": 4254,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, S, W = map(int, stdin.split())\n    \n    if N == S + W:\n        return'safe'\n    \n    elif N < S + W:\n        return 'unsafe'\n    \n    else:\n        return 'unsafe'\n\nprint(solution(input()))\n",
        "test": "assert solution(input) == \"unsafe\"",
        "num_ids": 332
    },
    {
        "number": 4255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    tri = [[0 for i in range(n+2)] for j in range(n+2)]\n    for i in range(n):\n        A,B,C = map(int,input().strip().split())\n        tri[i+2][n+2-i-1] = abs(A-B)+abs(B-C)\n    for i in range(n):\n        A,B,C = map(int,input().strip().split())\n        print(tri[i+1][i+1]-tri[i+2][i+2]+tri[i+1][n+2-i-1]-tri[i+2][n+2-i-1])\n\n--------------------------------------------------------------------\nIn this code, we use [i,j] coordinates to solve the problem of,\nBecause of the 4 coordinates, it is impossible to\nGet the area of the triangle ABC.\n\ndef",
        "test": "assert solution(",
        "num_ids": 808
    },
    {
        "number": 4256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    A, B, C, D = sorted([A, B, C, D], reverse=True)\n    ans = 0\n    while True:\n        if A > 0:\n            A -= 1\n            ans += 1\n        if B > 0:\n            B -= 1\n            ans += 1\n        if C > 0:\n            C -= 1\n            ans += 1\n        if D > 0:\n            D -= 1\n            ans += 1\n        if A < 0 and B < 0 and C < 0 and D < 0:\n            break\n    return str(ans)\n\nprint(solution(\"2 11 4\"))",
        "test": "assert solution(input) == \"4\"",
        "num_ids": 509
    },
    {
        "number": 4257,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.strip())):\n        a, b = map(int, stdin.split())\n        print(a*b)\n\ndef",
        "test": "assert solution(stdin) == 10",
        "num_ids": 270
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split(' ')[0])\n    B = int(stdin.split(' ')[1])\n    T = int(stdin.split(' ')[2])\n    return f\"{T + 0.5 * A} {A} {T} {B} {B} {T}\"",
        "test": "assert solution(inp) == '15'",
        "num_ids": 191
    },
    {
        "number": 4259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    A,B,K = list(map(int,stdin.split()))\n    # A,B,K = 500,600,7\n\n    if K == 1:\n        print('OK')\n    elif (A%K) + (B%K) == (A*B):\n        print('OK')\n    else:\n        print('NG')",
        "test": "assert solution(\"4 7\") == \"NG\"",
        "num_ids": 243
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    from collections import Counter\n    from operator import itemgetter\n    \n    lst = stdin.split('\\n')\n    \n    def solve(i):\n        x, y = [int(i) for i in lst[i].split()]\n        t = len(lst[i].split())\n        return Counter(map(int, lst[i].split())).most_common()[0][1]\n    \n    def solve2(i):\n        x, y = [int(i) for i in lst[i].split()]\n        t = len(lst[i].split())\n        return solve(i) * t - solve(i) * x\n    \n    def solve3(i):\n        x, y = [int(i) for i in lst[i].split()]\n        t = len(lst[i].split())\n        return solve(i) * t - solve2(i) * x\n    \n    def solve4(i):\n        x, y = [int(i) for i in lst[i].split()]\n        t = len(lst[i].split())\n        return solve(i) * t - solve3(i) * x\n    \n    lst.sort(key=itemgetter(0))\n    \n    # print(lst)\n    \n    return str(int(lst[-1][0])) + '\\n' + str(int(lst[-1][0]) * solve(3))\n\n---------------Running Time Problem-----------------\n",
        "test": "assert solution(stdin) == 2",
        "num_ids": 658
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    A = A//100\n    B = B//1000\n    C = C//100\n    A = A*1000\n    B = B*100\n    C = C*100\n    if B >= A and B >= C:\n        answer = B - A\n    elif A >= B and A >= C:\n        answer = A - B\n    else:\n        answer = C - A\n    return str(answer)\n\n\"\"\"\n\nclass Solution:\n    def solve(self, A, B, C):\n        A=A//100\n        B=B//1000\n        C=C//100\n        A=A*1000\n        B=B*100\n        C=C*100\n        if B >= A and B >= C:\n            answer = B - A\n        elif A >= B and A >= C:\n            answer = A - B\n        else:\n            answer = C - A\n        return str(answer)",
        "test": "assert solution(5,4) == 2",
        "num_ids": 665
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(",
        "num_ids": 384
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    string = []\n    for line in stdin:\n        string.append(line.strip())\n    return max(len(i) for i in string)",
        "test": "assert solution(stdin) == 3",
        "num_ids": 660
    },
    {
        "number": 4264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n = int(input())\n        a = []\n        for j in range(10):\n            if j % 2 == 1:\n                a.append(str(n))\n                n = n - 1\n            else:\n                n = n // 10\n        print(' '.join(a))\n",
        "test": "assert solution(inp) == '9'",
        "num_ids": 299
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    T = \"c\"\n    H = \"h\"\n    E = \"e\"\n    a = \"\"\n    for i in s:\n        if i == T:\n            T = \"f\"\n        elif i == H:\n            H = \"t\"\n        elif i == E:\n            E = \"a\"\n        else:\n            a += i\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] == T and s[i + 1] == T:\n            cnt += 1\n    for i in range(0, len(s), 2):\n        if s[i] == H and s[i + 1] == H:\n            cnt += 1\n    for i in range(0, len(s), 2):\n        if s[i] == E and s[i + 1] == E:\n            cnt += 1\n    if cnt == 0:\n        print(0)\n    else:\n        print(cnt)\nsolution(input())\n",
        "test": "assert solution(\"omg\") == \"3\"",
        "num_ids": 727
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    for k, x in enumerate(list(map(int, stdin.split()))):\n        if x == 0:\n            print(k + 1, end=\" \")\n        elif x == 1:\n            print(k + 1, end=\" \")\n            print(100000 - k)\n        elif x == 2:\n            print(100000 - k, end=\" \")\n            print(10000 - k)\n        else:\n            print(10000 - k, end=\" \")\n            print(k + 1)\n    return \"\"\n\n-----Explanation-----\nThe rules are described as follow:\n\nK=1\n\nX=7\n\n1. There is only one stone.\n2. The number at the coordinate X is painted black.\n3. The stones at coordinate 5, 6, and 7 have been painted black.\n4. The stones at coordinate 6, 7 and 8 have been painted black.\n5. The stone at coordinate 7 is painted black.\n6. The stone at coordinate 8 is painted black.\n7. The three stones at coordinates 5, 6, and 7 have been painted black.\n8. The three stones at coordinates 6, 7 and 8 have been painted black.\n\nThe rules are all considered after the first k consecutive stones are painted black.\n\nTo get all these cases, we need at least k consecutive stones painted black.\n\nFor example, given K=3 and X=7, we need all three cases.\n\n----Time Complexity----\nWe need O(K) time for each k values.\nWe need O(K) space for k values.\n\n----Space Complexity----\nWe need O(K) space for each k values.\nWe need O(K) space for k values.\n\n-----Submissions-----\nYour submission should have O(K) time and O(K) space.\n\n-----Contributors-----\nReferral code to Codewars contest page: https://codewars.com/kata/56b0b834f9b79b7b2000002a\n\"\"\"\n\ndef",
        "test": "assert solution(",
        "num_ids": 1173
    },
    {
        "number": 4267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    (x, y, z) = map(int, stdin.split())\n    answer = ''\n    \n    if x > y:\n        answer = 'No'\n        \n    elif y > z:\n        answer = 'No'\n        \n    else:\n        answer = 'Yes'\n        \n    return answer\n\nprint(solution(\"25\"))\n",
        "test": "assert solution(5) == \"No\"",
        "num_ids": 245
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = [int(x) for x in stdin.split()]\n    X.sort()\n    count = 0\n    for i in range(0, len(X)-1):\n        for j in range(i+1, len(X)):\n            a = abs(X[i] - X[j])\n            if a!= D:\n                count += 1\n    return str(count)\n\"\"\"\n\nimport collections\nfrom math import sqrt\n\nclass Solution:\n    def countPairs(self, arr: List[int]) -> int:\n        \n        class Node:\n            def __init__(self, value):\n                self.value = value\n                self.next = None\n                \n        class LinkedList:\n            def __init__(self):\n                self.head = None\n                \n            def insertAtHead(self, value):\n                if not self.head:\n                    self.head = Node(value)\n                else:\n                    self.head.next = Node(value)\n                return self.head\n                \n            def insertAtTail(self, value):\n                curr = self.head\n                while curr.next!= None:\n                    curr = curr.next\n                curr.next = Node(value)\n                return self.head\n            \n            def delete(self, index):\n                if index < 0 or index >= self.length():\n                    return None\n                else:\n                    if index == 0:\n                        curr = self.head\n                        self.head = self.head.next\n                    elif index == self.length()-1:\n                        curr = self.head\n                        self.head = curr.next\n                    else:\n                        curr = self.head\n                        curr.next = curr.next.next\n                    return curr\n                \n            def length(self):\n                count = 0\n                curr = self.head\n                while curr!= None:\n                    count += 1\n                    curr = curr.next\n                return count\n            \n            def __str__(self):\n                curr = self.head\n                str1 = \"\"\n                while curr!= None:\n                    str1 += str(curr.value) + \" \"\n                    curr = curr.next\n                return str1\n            \n        length = self.length()\n        \n        def insert_pairs(arr):\n            if len(arr) == 0:\n                return 0\n            if len(arr) < 2:\n                return self.countPairs(arr)\n            \n            left = arr[0]\n            right = arr[1]\n            \n            count = 0\n            #print(left)\n            #print(right)\n            \n            if left < right:\n                count = self.countPairs(arr[1:])\n                count += self.countPairs(arr[:left])\n                return count\n            \n            if left == right:\n                count = self.countPairs(arr[1:])\n                count += self.countPairs(arr[:right])\n                return count\n            \n            return self.countPairs(arr[1:])\n            \n        \n        arr = list(map(int, arr))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "test": "assert solution(input) == \"1\"",
        "num_ids": 1866
    },
    {
        "number": 4269,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.split()\n    s = int(''.join(s))\n    if s < 100:\n        return 'Bad'\n    elif s % 100 == 0:\n        return 'Good'\n    else:\n        return 'Bad'\n",
        "test": "assert solution(\"3776\") == \"Bad\"",
        "num_ids": 340
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, v_1, v_2, v_3, v_4 = [int(i) for i in stdin.split()]\n    _v_1 = (v_1 / 2) + 1\n    _v_2 = (v_2 / 2) + 1\n    _v_3 = (v_3 / 2) + 1\n    _v_4 = (v_4 / 2) + 1\n    v_4 = v_4 * _v_1\n    v_1 = v_1 * _v_2\n    v_2 = v_2 * _v_3\n    v_3 = v_3 * _v_4\n    _v = v_4 + v_1 + v_2 + v_3\n    _v = _v // 2\n    return f\"{_v:.3f}\".replace(\".\", \",\")",
        "test": "assert solution(\"3 4 5 2 2\") == \"5.5\"",
        "num_ids": 589
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    A_1, A_2,..., A_N = map(int, stdin.strip().split())\n    B_1, B_2,..., B_N = map(int, stdin.strip().split())\n    C_1, C_2,..., C_N = map(int, stdin.strip().split())\n    ans = 0\n    for i in range(1, N+1):\n        ans += B_1 * (C_1 + B_2 * (C_1 + A_1 + A_2) / (B_1 + B_2 + C_1 + C_2 + A_1 + A_2))\n    return str(ans)",
        "test": "assert solution(\"3 4\") == \"14\"",
        "num_ids": 1157
    },
    {
        "number": 4272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    abc = []\n    for word in a:\n        if len(word) == 3:\n            abc.append(word)\n        else:\n            abc.extend(word)\n    \n    res = []\n    for word in abc:\n        a = [word] + list(map(lambda x : x[0] + x[1], enumerate(word)))\n        res.append(a)\n    \n    return str(len(set(tuple(r) for r in res)))",
        "test": "assert solution(\"YTQ\") == 1",
        "num_ids": 531
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    names = []\n    \n    for _ in range(n):\n        names.append(stdin.split()[0])\n    \n    def solution1(names):\n        for _ in range(n):\n            for name in names:\n                if name[0] == 'M' and name!= names[-1]:\n                    names.pop()\n                    break\n            names.append(name)\n        if len(names) == n:\n            return '\\n'.join(names)\n        else:\n            return '\\n'.join(names)\n    \n    def solution2(names):\n        i = 0\n        names.sort()\n        while i < len(names) - 1:\n            if names[i]!= names[i + 1]:\n                return names[i] + '\\n'\n            else:\n                i += 1\n        return ''\n    \n    def solution3(names):\n        i = 0\n        names.sort()\n        while i < len(names) - 1:\n            if names[i] == names[i + 1]:\n                i += 1\n            else:\n                return names[i] + '\\n'\n        return ''\n    \n    def solution4(names):\n        i = 0\n        names.sort()\n        while i < len(names) - 1:\n            if names[i] == names[i + 1]:\n                if i == len(names) - 2:\n                    names.pop()\n                else:\n                    i += 1\n            else:\n                return names[i] + '\\n'\n        return ''\n    \n    answer = 0\n    while True:\n        if len(names) == 3:\n            answer += 1\n            break\n        elif len(names) == 2:\n            answer += 1\n            break\n        elif len(names) == 1:\n            answer += 1\n            break\n        elif len(names) == 0:\n            return answer\n        else:\n            names = solution1(names)\n            names = solution2(names)\n            names = solution3(names)\n            names = solution4(names)\n        \n        ",
        "test": "assert solution(\"RUMOI\") == \"2\"",
        "num_ids": 848
    },
    {
        "number": 4274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''",
        "test": "assert solution(stdin) == \"Yes\"",
        "num_ids": 291
    },
    {
        "number": 4275,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    str1 = list(stdin)\n    str1.sort()\n    str1 = ''.join(str1)\n    if len(str1) == 6 and str1[2] == str1[3] == str1[4] == str1[5]:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert solution('sippuu') == 'No'",
        "num_ids": 199
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    global N, T, c_1, c_2, t_1, t_2\n    N, T, c_1, c_2, t_1, t_2 = map(int, stdin.split())\n    # solution\n    def f(routes):\n        nonlocal max_cost, min_cost\n        cost = 0\n        for route in routes:\n            cost += route[0]\n            cost += route[1]\n            # cost += route[0]*route[1]\n            # cost += route[1]*route[0]\n            if cost > max_cost:\n                max_cost = cost\n            if cost < min_cost:\n                min_cost = cost\n        return max_cost, min_cost\n    # Solution\n    def solution(routes):\n        if not routes:\n            return T\n        if not routes:\n            return T\n        if t_1 > routes[0][1]:\n            return t_1\n        if t_2 > routes[0][1]:\n            return t_2\n        r1, r2 = routes.pop(0)\n        cost1 = solution(routes)\n        cost2 = solution(routes)\n        if cost1 < cost2:\n            return min(cost1, cost2)\n        else:\n            return max(cost1, cost2)\n    answer = solution(list(zip(c_1, t_1)))\n    return answer\n",
        "test": "assert solution(",
        "num_ids": 1271
    },
    {
        "number": 4277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = [int(i) for i in stdin.split()]\n    A = N[0]\n    B = N[1]\n    print(A)\n    print(B)\n    total = (A*B)\n    return str(total)\n\ndef",
        "test": "assert solution(input() == \"8\")",
        "num_ids": 2201
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, s_1, s_2 = list(map(str, stdin.split()))\n    s_2 = sorted(s_2)\n    if len(N)!= len(s_1):\n        return '0'\n    count = 0\n    for i in range(len(s_1)):\n        for j in range(len(s_2)):\n            if s_1[i] == s_2[j]:\n                count += 1\n    return str(count)\n",
        "test": "assert solution(stdin) == 1",
        "num_ids": 2367
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    q = int(sys.stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, sys.stdin.readline().strip().split())\n        print(str(k)+\"\\n\"+str(n))\n    return \"\"\n-----End-----\n'''\n\nimport sys\ndef",
        "test": "assert solution(stdin) == \"8\"",
        "num_ids": 247
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    li = [[] for _ in range(n+1)]\n    \n    for i in range(n):\n        li[i+1].append(i+1)\n    \n    \n    # print(li)\n    \n    for i in range(1, n+1):\n        li[i] = list(set(li[i]))\n        \n        for j in range(1, n+1):\n            li[i].remove(j)\n            li[j].remove(i)\n            \n    # print(li)\n    \n    # print(li[1:])\n    \n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i in li[j]:\n                li[i].remove(j)\n                \n    # print(li)\n    \n    \n    \n    r = list(range(1, n+1))\n    \n    for i in range(1, n):\n        r.remove(k)\n        for j in range(1, n):\n            if k in li[j]:\n                r.remove(k)\n                \n    # print(r)\n    \n    \n    if len(r) == 0:\n        return \"0\"\n    \n    \n    answer = \"\"\n    \n    for i in range(len(r)-1):\n        if len(r[i]) == 1:\n            answer = answer + str(i+1)\n        else:\n            answer = answer + str(i+1) + \" \"\n            answer = answer + str(r[i][1])\n            \n    # print(answer)\n    \n    return answer\n",
        "test": "assert solution('3 3 3 3 3 3 3 3 3') == '3 2 3'",
        "num_ids": 3069
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split()]\n\n    friends = [i for i in range(1, n+1)]\n    houses = []\n    for _ in range(n):\n        houses.append(int(stdin[friends[i] - 1]))\n\n    answer = max(friends)\n\n    # print(friends, houses)\n    while friends:\n        if houses:\n            for _ in range(len(houses)):\n                for i in range(len(friends)):\n                    if friends[i] < len(houses) and houses[i] == houses[friends[i]]:\n                        continue\n                    houses[i] -= 1\n                    if houses[i] == 0:\n                        break\n                    friends[i] -= 1\n                    if friends[i] == 0:\n                        break\n                else:\n                    break\n        else:\n            break\n\n    return str(answer) + \" \" + str(answer)\n\n\n\nprint(solution(\"9 2 4 4\"))\n",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 2223
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = []\n    for i in range(n):\n        a = list(map(int, input().strip().split()))\n        p.extend(a)\n    p = list(set(p))\n    p.sort()\n    print(*p)\n\n-----Constraints-----\n1 <= n <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1M\n",
        "test": "assert solution(\"3 4 1\") == [1, 3, 4, 2, 1]",
        "num_ids": 773
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 20:\n        return 10**9\n    # print(n, len(set(stdin)))\n    # print(max(n, len(set(stdin))))\n    return max(n, len(set(stdin)))\n\ndef",
        "test": "assert solution('10') == '3'",
        "num_ids": 348
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n,k,a,b=map(int,stdin.split())\n    if n<k+a+b:\n        return '-1'\n    if n-k>=a-b and n>=a-b:\n        return str(n-k+a)\n    return str(n-k+a)\n'''\n\ndef",
        "test": "assert solution(input()) == -1",
        "num_ids": 355
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    s = s.split()\n    s.sort(key=lambda x: len(x))\n    count = 1\n    for i in range(n):\n        s[i] = s[i].replace(\"?\", \"\")\n        s[i] = s[i].replace(\"!\", \"\")\n        s[i] = s[i].replace(\"?\", \"\")\n        s[i] = s[i].replace(\"!\", \"\")\n        s[i] = s[i].replace(\"?\", \"\")\n    for j in range(n):\n        for i in range(len(s[j])):\n            if s[j][i] == \"a\":\n                count += 1\n            if s[j][i] == \"b\":\n                count += 1\n            if s[j][i] == \"c\":\n                count += 1\n            if s[j][i] == \"?\":\n                count += 1\n            if s[j][i] == \"!\":\n                count += 1\n    return count * 3\n\nTest\n5\nabc?b?c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\n",
        "test": "assert solution(stdin) == 24",
        "num_ids": 2026
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adjacency_list = [[] for _ in range(n)]\n    for i in range(m):\n        a1, a2, w = map(int, stdin.split())\n        adjacency_list[a1 - 1].append((a2 - 1, w))\n        adjacency_list[a2 - 1].append((a1 - 1, w))\n    for i in range(n):\n        for (a1, w) in adjacency_list[i]:\n            for (a2, w) in adjacency_list[a1]:\n                if w > w:\n                    continue\n                for (a3, w) in adjacency_list[a2]:\n                    if w > w:\n                        continue\n                    adjacency_list[i].remove((a1, a2))\n                    adjacency_list[i].remove((a2, a3))\n    answer = 0\n    for i in range(n):\n        answer += len(adjacency_list[i])\n    return answer\n\n\ndef",
        "test": "assert solution(input) == str(18)",
        "num_ids": 738
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    A, B, C = [int(x) for x in stdin.split()]\n    \n    total_fatigue = [A, B, C]\n    \n    all_umbrellas_true = [True, False]\n    \n    all_umbrellas = []\n    \n    for i in range(m):\n        all_umbrellas.append(list(map(int, stdin.split())))\n    \n    # Check if there is any umbrella at any given location\n    if any(all_umbrellas[i][0] > all_umbrellas[i][1] for i in range(m)):\n        return \"-1\"\n    \n    # If there is no umbrella, return the minimum total fatigue\n    if all_umbrellas[0][1] == all_umbrellas[m - 1][0] and all_umbrellas[m - 1][1] == all_umbrellas[m - 2][1]:\n        return abs(int(all_umbrellas[0][0] * p))\n    \n    # If all umbrellas are on the same side, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction but they are on the same side, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction and they are on the same side, there is no way to reach each umbrella\n    # If all umbrellas are on the same direction but they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are on the same direction but they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are on the same direction and they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction but they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction and they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction and they are both in the same direction, there is no way to reach each umbrella\n    \n    # Find the all umbrellas which are in the same direction\n    all_umbrellas_in_same_direction = [list(set(all_umbrellas[i][0] for i in range(m) if all_umbrellas[i][0] == all_umbrellas[i][1]))]\n    for i in range(m - 1):\n        if all_umbrellas[i][0]!= all_umbrellas[i + 1][0]:\n            all_umbrellas_in_same_direction.append(list(set(all_umbrellas[i][0] for i in range(m) if all_umbrellas[i][0] == all_umbrellas[i + 1][0])))\n    \n    # Find the all umbrellas which are in the same direction and in the same direction\n    all_umbrellas_in_same_direction_and_in_same_direction = [list(set(all_umbrellas[i][0] for i in range(m) if all_umbrellas[i][0] == all_umbrellas[i][1] and all_umbrellas[i][0] == all_umbrellas[i][0]))]\n    for i in range(m - 1):\n        if all_umbrellas[i][0]!= all_umbrellas[i + 1][0] and all_umbrellas[i][1]!= all_umbrellas[i + 1][1]:\n            all_umbrellas_in_same_direction_and_in_same_direction.append(list(set(all_umbrellas[i][0] for i in range(m) if all_umbrellas[i][0] == all_umbrellas[i + 1][0] and all_umbrellas[i][0] == all_umbrellas[i + 1][1])))\n    \n    # Find the all umbrellas which are in the same direction and in the same",
        "test": "assert solution(\"10 1 1\") == \"45\"",
        "num_ids": 1514
    },
    {
        "number": 4288,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = [int(x) for x in stdin.split()]\n    if A+B<C:\n        return \"No\"\n    elif A+C==B and A!=C:\n        return \"Yes\"\n    elif A+C==B and B!=C:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert solution(input) == 'No', 'Triple is not poor'",
        "num_ids": 288
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n        N = int(stdin.strip())\n        T = int(stdin.strip())\n        H_1 = int(stdin.strip())\n        H_2 = N*T\n        A = 0.01*T\n        H_index = 0\n        while H_index <= H_2:\n            H_index += 1\n            if H_index%2 == 0:\n                A *= H_1\n            else:\n                A /= H_1\n            if A >= A:\n                break\n        if A < 0:\n            A = A*(1+0.01*T)\n        print(H_index-1)\n        return str(H_index-1)\n\n\n-----Sample Output-----\nSample Input:\n2\n12 5\n1000 2000\n\nSample Output:\n1\n\nExplanation:\nWith H_1=1000, T=500, the palace should be built at Place 1.\n\n\"\"\"\n\n\ndef",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 339
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    ball_1 = [int(i) for i in stdin.split(\" \")]\n    ball_2 = [int(i) for i in stdin.split(\" \")]\n    \n    ans = 0\n    \n    # We have two balls, and only odd numbers.\n    if ball_1[0] and ball_1[1]:\n        if ball_2[0] and ball_2[1]:\n            # If we choose the ball with the ball with odd numbers\n            # sum to even numbers.\n            if ball_1[0] + ball_2[0] and ball_1[1] + ball_2[1]:\n                ans += 1\n            # If we choose the ball with the ball with even numbers\n            # sum to odd numbers.\n            elif ball_1[0] + ball_2[1] and ball_1[1] + ball_2[0]:\n                ans += 1\n            # If we choose the ball with the ball with even numbers\n            # and odd numbers sum to odd numbers.\n            else:\n                ans += 1\n                \n    # Only odd balls with odd numbers sum to even numbers.\n    else:\n        if ball_1[1] and ball_2[0]:\n            ans += 1\n        if ball_1[1] and ball_2[1]:\n            ans += 1\n    \n    # Only odd balls with odd numbers and odd numbers sum to even numbers.\n    # We can't choose odd balls with odd numbers with odd numbers sum to even numbers.\n    if ball_1[0] and ball_2[1] and ball_1[1]:\n        if ball_2[0] and ball_1[0]:\n            ans += 1\n        if ball_2[1] and ball_1[1]:\n            ans += 1\n        \n    # Only odd balls with odd numbers and odd numbers sum to odd numbers.\n    if ball_1[0] and ball_2[1] and ball_1[1]:\n        if ball_2[1] and ball_1[0]:\n            ans += 1\n        \n    return str(ans)\n",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 776
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  return str(sum([int(x) for x in stdin.split()]))\n",
        "test": "assert solution(input) == \"Q\"",
        "num_ids": 1932
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    K, p_1, p_2, p_3, p_4, p_5 = map(int, stdin.split())\n    return str(K * (p_1 + p_2 + p_3 + p_4 + p_5) - (K * (p_1 + p_2 + p_3 + p_4 + p_5) * K))",
        "test": "assert solution(stdin) == \"210\"",
        "num_ids": 488
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    # map 0: flight time\n    # map 1: direction\n    # map 2: total flight time\n    \n    # schedule array\n    schedule = [0]\n    directions = [0, 1, 2, 3]\n    \n    # find schedule\n    for i in range(4):\n        if schedule[i] == 0:\n            schedule[i] = (int(stdin[2*i]), directions[i])\n        elif schedule[i] == 1:\n            schedule[i] = (int(stdin[2*i+1]), directions[i])\n        elif schedule[i] == 2:\n            schedule[i] = (int(stdin[2*i+2]), directions[i])\n        elif schedule[i] == 3:\n            schedule[i] = (int(stdin[2*i+3]), directions[i])\n    \n    # find directions\n    direction = 0\n    for i in range(4):\n        if schedule[i] == 1:\n            direction = i\n        elif schedule[i] == 2:\n            direction = (direction - 3) % 4\n        elif schedule[i] == 3:\n            direction = (direction + 2) % 4\n        \n    # get total flight time\n    total = 0\n    for i in range(4):\n        total += schedule[i][0]\n    \n    # get flight time\n    flightTime = 0\n    for i in range(4):\n        flightTime += schedule[direction][0]\n        \n    # get direction\n    direction = 0\n    for i in range(4):\n        direction = direction + 1\n        if schedule[direction][0] <= flightTime:\n            break\n        \n    # print schedule\n    print(total - flightTime)\n    \n    return '{}'.format(total - flightTime)",
        "test": "assert solution(\"4\") == \"4\"",
        "num_ids": 1125
    },
    {
        "number": 4294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(9):\n        if len(str(i)) == 1:\n            print(i)\n            return\n    print(i)\n",
        "test": "assert solution(\"2 3\") == \"10\"",
        "num_ids": 374
    },
    {
        "number": 4295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N > 10**18 or N < 0:\n        return 'Invalid Input'\n    M = 10**18\n    res = M\n    if N == 1:\n        res = abs(N)\n        print(res)\n    else:\n        temp = abs(N)\n        for i in range(1, int(temp/2) + 1):\n            ans = abs(N) - i\n            if ans < M:\n                ans = ans + temp\n                if ans > M:\n                    res = min(ans, res)\n                else:\n                    res = ans\n    return str(res)\n\ndef",
        "test": "assert solution(\"3\") == \"3\"",
        "num_ids": 324
    },
    {
        "number": 4296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    if line[0] > int(line[1]):\n        return 'bust'\n    elif line[0] == int(line[1]):\n        return 'win'\n    else:\n        return 'lose'\n\n-----Sample Input-----\n5 7 9\n\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n'''\n\ndef",
        "test": "assert solution(4) == \"win\"",
        "num_ids": 1571
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n//2 + 1)\n    return str(n//2)\n",
        "test": "assert solution(input()) == \"6\"",
        "num_ids": 161
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    tree_map = {}\n    tree_map[1] = [3,4]\n    tree_map[2] = [4,3]\n    tree_map[3] = [1,2]\n    tree_map[4] = [2,1]\n\n    #This is used to check if two numbers are equal, it will be used to check if we have a pair of the same number.\n    #E.g. [3,3,3] == [3,3,3]\n    #if yes, we will append the smaller number to the list, if not, we will replace the smaller number with the larger number.\n    # We will iterate over the elements in the list\n    for i in range(1, n+1):\n        tree = [int(i) for i in stdin.split()]\n        if tree[0] in tree_map:\n            tree[0] = min(tree[0], tree_map[tree[0]][0])\n            tree[0] = max(tree[0], tree_map[tree[0]][1])\n        if tree[1] in tree_map:\n            tree[1] = min(tree[1], tree_map[tree[1]][0])\n            tree[1] = max(tree[1], tree_map[tree[1]][1])\n        tree_map[tree[0]] = tree\n\n    return str(tree_map[d][1])\n\n'''\ndef",
        "test": "assert solution(4, 4) == 1",
        "num_ids": 613
    },
    {
        "number": 4299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"pon\"\n\n-----Examples-----\ninput:\n4\n\noutput:\n\"pon\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nprint('pon' if N < 999 else 'pon')\n",
        "test": "assert solution(solution) == \"pon\"",
        "num_ids": 1092
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  N, *_ = list(map(int, stdin.split()))\n  d = [0] + list(map(int, stdin.split()))\n\n  ret = []\n  for _ in range(N):\n    for d1, d2 in [(d[i] - d[i - 1]) for i in range(1, N)]:\n      ret.append(sum(list(map(lambda x: x * x, d1, d2))))\n\n  return''.join(map(str, ret))",
        "test": "assert solution(inp) == \"11\"",
        "num_ids": 613
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n",
        "test": "assert solution(",
        "num_ids": 244
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    n = A + B\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = n - 1\n    if n < 0:\n        return '-1'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n\n    return str(n // 2 + 1)\n\"\"\"\nclass Solution:\n    def getMoneyAmount(self, n: int) -> str:\n        coins = [2,5,10]\n        i = 1\n        ans = []\n        #print(coins)\n        while n > i:\n            n = n // coins[i-1]\n            #print(n)\n            if n == 0:\n                ans.append('-1')\n                i = len(coins)\n            elif n < 0:\n                ans.append('-1')\n                break\n            else:\n                ans.append(str(n))\n                i += 1\n        if n == 0:\n            ans.append('-1')\n        return ans\n    \n    def solve(self, A, B):\n        A_coins = [A]\n        B_coins = [B]\n        while len(A_coins) < 3:\n            n = random.choice(B_coins)\n            B_coins.remove(n)\n            if n not in A_coins:\n                A_coins.append(n)\n        print(A_coins)\n        print(B_coins)\n        \n        solution = self.getMoneyAmount(A_coins[-1])\n        return solution",
        "test": "assert solution(\"10 2\") == \"9\"",
        "num_ids": 794
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return solution2(stdin)\n\ndef",
        "test": "assert solution('5 3') == '1'",
        "num_ids": 370
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a + b < b + b:\n        return 'NOT'\n    if a + b == b + b:\n        return 'NOT'\n    if a + b > b + b:\n        return 'NOT'\n    if b < a:\n        return 'NOT'\n    if b < a:\n        return 'NOT'\n    if a < b:\n        return 'NOT'\n    return 'NOT'\n\n    # return str(min(a,b))",
        "test": "assert solution(input()) == '2'",
        "num_ids": 427
    },
    {
        "number": 4305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    result = []\n    for _ in range(A):\n        result.append(H - max(H, A))\n        H += 1\n    return str(len(set(result)))\n",
        "test": "assert solution('2 5') == 2",
        "num_ids": 426
    },
    {
        "number": 4306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def ai_and_bob(n):\n        if n == 0:\n            return '0'\n        if n == 1:\n            return '1'\n        if n == 2:\n            return '2'\n        if n == 3:\n            return '3'\n        if n == 4:\n            return '4'\n        if n == 5:\n            return '5'\n        if n == 6:\n            return '6'\n        if n == 7:\n            return '7'\n        if n == 8:\n            return '8'\n        if n == 9:\n            return '9'\n        if n == 10:\n            return 'A'\n        if n == 11:\n            return 'B'\n        if n == 12:\n            return 'C'\n        if n == 13:\n            return 'D'\n        if n == 14:\n            return 'E'\n        if n == 15:\n            return 'F'\n        if n == 16:\n            return 'G'\n        if n == 17:\n            return 'H'\n        if n == 18:\n            return 'I'\n        if n == 19:\n            return 'J'\n        if n == 20:\n            return 'K'\n        if n == 21:\n            return 'L'\n        if n == 22:\n            return 'M'\n        if n == 23:\n            return 'N'\n        if n == 24:\n            return 'O'\n        if n == 25:\n            return 'P'\n        if n == 26:\n            return 'Q'\n        if n == 27:\n            return 'R'\n        if n == 28:\n            return 'S'\n        if n == 29:\n            return 'T'\n        if n == 30:\n            return 'U'\n        if n == 31:\n            return 'V'\n        if n == 32:\n            return 'W'\n        if n == 33:\n            return 'X'\n        if n == 34:\n            return 'Y'\n        if n == 35:\n            return 'Z'\n        if n == 36:\n            return 'A'\n        if n == 37:\n            return 'B'\n        if n == 38:\n            return 'C'\n        if n == 39:\n            return 'D'\n        if n == 40:\n            return 'E'\n        if n == 41:\n            return 'F'\n        if n == 42:\n            return 'G'\n        if n == 43:\n            return 'H'\n        if n == 44:\n            return 'I'\n        if n == 45:\n            return 'J'\n        if n == 46:\n            return 'K'\n        if n == 47:\n            return 'L'\n        if n == 48:\n            return 'M'\n        if n == 49:\n            return 'N'\n        if n == 50:\n            return 'O'\n        if n == 51:\n            return 'P'\n        if n == 52:\n            return 'Q'\n        if n == 53:\n            return 'R'\n        if n == 54:\n            return 'S'\n        if n == 55:\n            return 'T'\n        if n == 56:\n            return 'U'\n        if n == 57:\n            return 'V'\n        if n == 58:\n            return 'W'\n        if n == 59:\n            return 'X'\n        if n == 60:\n            return 'Y'\n        if n == 61:\n            return 'Z'\n    def sum_numbers(n):\n        for i in range(1, n+1):\n            n = n+i\n            print(n)\n    def create_button_sequence(length):\n        button_sequence = []\n        for i in range(length):\n            button_sequence.append(i)\n        return button_sequence\n    def run_sequence(button_sequence):\n        for i in button_sequence:\n            print(i)\n            if i == 0:\n                time = '0'\n                print(time)\n            elif i == 1:\n                time = '1'\n                print(time)\n            elif i == 2:\n                time = '2'\n                print(time)\n            elif i == 3:\n                time = '3'\n                print(time)\n            elif i == 4:\n                time = '4'\n                print(time)\n            elif i == 5:\n                time = '5'\n                print(time)\n            elif i == 6:\n                time = '6'\n                print(time)\n            elif i == 7:\n                time = '7'\n                print(time)\n            elif i == 8:\n                time = '8'\n                print(time)\n            elif i == 9:\n                time = '9'\n                print(time)\n            elif i == 10:\n                time = 'A'\n                print(time)\n            elif i == 11:\n                time = 'B'\n                print(time)\n            elif i == 12:\n                time = 'C'\n                print(time)\n            elif i == 13:\n                time = 'D'\n                print(time)\n            elif i == 14:\n                time = 'E'\n                print(time)\n            elif i == 15:\n                time = 'F'\n                print(time)\n            elif i == 16:\n                time = 'G'\n                print(time)\n            elif i == 17:\n                time = 'H'\n                print(time)\n            elif i == 18:\n                time = 'I'\n                print(time)\n            elif i == 19:\n                time = 'J'\n                print(time)\n            elif i == 20:\n                time = 'K'\n                print(time)\n            elif i == 21:\n                time = 'L'\n                print(time)\n            elif i == 22:\n                time = 'M'\n                print(time)\n            elif i == 23:\n                time = 'N'\n                print(time)\n            elif i == 24:\n                time = 'O'\n                print(time)\n            elif i == 25:\n                time = 'P'\n                print(time)\n            elif i == 26:\n                time = 'Q'\n                print(time)\n            elif i == 27:\n                time = 'R'\n                print(time)\n            elif i == 28:\n                time = 'S'\n                print(time)\n            elif i == 29:\n                time = 'T'\n                print(time)\n            elif i == 30:\n                time = 'U'\n                print(time)\n            elif i == 31:\n                time = 'V'\n                print(time)\n            elif i == 32:\n                time = 'W'\n                print(time)\n            elif i == 33:\n                time = 'X'\n                print(time)\n            elif i == 34:\n                time = 'Y'\n                print(time)\n            elif i == 35:\n                time = 'Z'\n                print(time)\n            elif i == 36:\n                time = 'A'\n                print(time)\n            elif i == 37:\n                time = 'B'\n                print(time)\n            elif i == 38:\n                time = 'C'\n                print(",
        "test": "assert solution(input) == 50",
        "num_ids": 2041
    },
    {
        "number": 4307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    numbers = []\n    for i in range(2, int(stdin) + 1):\n        if i not in numbers:\n            numbers.append(i)\n    return str(len(numbers))",
        "test": "assert solution(\"111\") == 1",
        "num_ids": 2127
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N,K = [int(i) for i in stdin.split()]\n    answer = ''\n    for i in range(1,K+1):\n        for j in range(1,i+1):\n            answer = max(answer, abs(i-j))\n    return answer\n",
        "test": "assert solution('5 1') == '2'",
        "num_ids": 523
    },
    {
        "number": 4309,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = map(int, stdin.split())\n    i = b.index(str(n)[::-1])\n    return str(n)[::-1][i]",
        "test": "assert solution(input) == \"111\"",
        "num_ids": 193
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, A_1, A_2, A_3, x, A_4 = map(int, stdin.split())\n    if n > 3:\n        x = abs(x)\n        if A_1 == 0:\n            A_1 = A_2 + A_3\n        elif A_2 == 0:\n            A_2 = A_3 + A_4\n        elif A_3 == 0:\n            A_3 = A_4 + x\n        else:\n            A_1 = A_2 + A_3\n            A_2 = A_4 + x\n            A_3 = A_1 + A_2\n        print(f'{A_1}')\n        print(f'{A_2}')\n        print(f'{A_3}')\n    else:\n        print(f'{x}')\n    return str(min(A_1, A_2, A_3, x))\n\n\n-----Sample Input-----\n1 6 3\n\n-----Sample Output-----\n5\n\nWhen the tasks are completed in the following order, the total cost will be 5, which is the minimum:\n - Complete the first task at cost 0.\n - Complete the third task at cost 2.\n - Complete the second task at cost 3.\ndef",
        "test": "assert solution(\"1 7 4\") == \"5\"",
        "num_ids": 743
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n  a_set = set(map(int,stdin.split()))\n  print(min(a_set))",
        "test": "assert solution(\"5\") == \"5\"",
        "num_ids": 343
    },
    {
        "number": 4312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = 10\n    B = 10\n    C = 10\n    D = 10\n    for _ in range(n):\n        a, b, c, d = map(int, stdin.strip().split())\n        A = min(A, a)\n        B = min(B, b)\n        C = min(C, c)\n        D = min(D, d)\n    if A >= B >= C >= D >= 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n-----Constraints-----\n - 1 \\leq A,B,C,D \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nIf Takahashi will win, print Yes; if he will lose, print No.\n\n-----Sample Input-----\n10 9 10 10\n\n-----Sample Output-----\nNo\n\nFirst, Takahashi's monster attacks Aoki's monster, whose health is now 10-9=1.\nNext, Aoki's monster attacks Takahashi's monster, whose health is now 10-10=0.\nTakahashi's monster is the first to have 0 or less health, so Takahashi loses.\ndef",
        "test": "assert solution(\"5 6 3\") == \"No\"",
        "num_ids": 2085
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, C = [int(i) for i in stdin.split()]\n    gem = [int(i) for i in stdin.split()]\n    \n    def solve(r, c, w, s, d):\n        if r < 0 or r >= N or c < 0 or c >= N or r!= r or c!= c:\n            return 0\n        \n        if w < C_min or w > C_max:\n            return 0\n        \n        if s < 0 or s > s_max or d < 0 or d > d_max or gem[r][c]!= 0:\n            return 0\n        \n        gem[r][c] = w\n        res = solve(r - 1, c, w + gem[r][c], s + gem[r][c], d)\n        gem[r][c] = 0\n        return res\n    \n    return solve(0, 0, 0, 0, 0)\n\"\"\"",
        "test": "assert solution(inp) == 5",
        "num_ids": 499
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def uniq(seq):\n        seen = set()\n        for el in seq:\n            if el not in seen:\n                seen.add(el)\n            else:\n                seen.discard(el)\n        return seen\n\n    \n    H, W = map(int, stdin.split())\n    board = [list(map(str, input())) for _ in range(H)]\n    answer = \".\"\n    \n    # Checks if a spot is white or black.\n    white = uniq([*list(map(lambda x: \"#\" if x == \"#\" else \".\", row)) for row in board])\n    black = uniq([*list(map(lambda x: \"#\" if x == \"#\" else \".\", row)) for row in board if not row])\n    \n    # Remove black spaces, the board is already unbalanced\n    white.remove(\".\")\n    black.remove(\".\")\n    \n    # Compress the board to a grid of white and black squares\n    white_rows = [white[i] for i in range(len(white))]\n    black_rows = [black[i] for i in range(len(black))]\n    \n    # Remove all white or black spaces\n    white_cols = [white[i] for i in range(len(white[0]))]\n    black_cols = [black[i] for i in range(len(black[0]))]\n    \n    # Remove white spaces from both sides\n    white_rows[0] = white_rows[0][1:]\n    black_rows[0] = black_rows[0][1:]\n    white_cols[0] = white_cols[0][1:]\n    black_cols[0] = black_cols[0][1:]\n    \n    # Remove all white spaces from the middle\n    white_rows[len(white_rows)//2] = white_rows[len(white_rows)//2][1:]\n    black_rows[len(black_rows)//2] = black_rows[len(black_rows)//2][1:]\n    white_cols[len(white_cols)//2] = white_cols[len(white_cols)//2][1:]\n    black_cols[len(black_cols)//2] = black_cols[len(black_cols)//2][1:]\n    \n    # Check if both the rows and columns are unbalanced\n    def is_unbalanced(rows, cols):\n        return (rows*2 + cols) % 2!= 0\n    \n    for r in range(H):\n        for c in range(W):\n            if board[r][c] == \".\":\n                board[r][c] = \".\"\n            elif board[r][c] == \"#\":\n                if is_unbalanced(white_rows[r], black_rows[r]):\n                    board[r][c] = \".\"\n                elif is_unbalanced(white_cols[r], black_cols[r]):\n                    board[r][c] = \".\"\n                else:\n                    board[r][c] = \"#\"\n    for c in range(W):\n        for r in range(H):\n            if board[r][c] == \".\":\n                board[r][c] = \".\"\n            elif board[r][c] == \"#\":\n                if is_unbalanced(white_rows[r], black_rows[r]):\n                    board[r][c] = \"#\"\n                elif is_unbalanced(white_cols[r], black_cols[r]):\n                    board[r][c] = \".\"\n                else:\n                    board[r][c] = \".\"\n    for r in range(H):\n        for c in range(W):\n            if board[r][c] == \"#\":\n                board[r][c] = \"#\"\n            else:\n                board[r][c] = \".\"\n    \n    return answer\n\n\nprint(solution(\"..#.###\"))\nprint(solution(\"#.#.#..#..#..#.\"))\nprint(solution(\"#.##..#..#..#.\"))\nprint(solution(\"#.#.#..#..#..#.\"))\nprint(solution(\"#.###.###.#.\"))\nprint(solution(\"..#.#..#..#..#.\"))\nprint(solution(\"#.#.##.###.##\"))\nprint(solution(\"#.#.######.###\"))\nprint(solution(\"##.####...#.\"))\nprint(solution(\"###..###..#.\"))\nprint(solution(\"#.##.#....##.\"))\nprint(solution(\"#.######.##.\"))\n",
        "test": "assert solution(input()) == '###'",
        "num_ids": 2916
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    answer = 0\n    for i in range(len(stdin)):\n        answer += math.pow(10, i) * math.pow(2, i)\n    print(answer)\n    return str(answer)\n",
        "test": "assert solution(stdin) == \"6.28318530717958623200\", \"Incorrect output\"",
        "num_ids": 672
    },
    {
        "number": 4316,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    L = list(stdin)\n    for i in range(len(L)):\n        if L.count(L[i]) == 2:\n            return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution([\"SSsss\", \"SSss\", \"SSss\", \"S\"]) == \"Yes\"",
        "num_ids": 2192
    },
    {
        "number": 4317,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    print(max(A + B, A - B, A * B))\n    return str(max(A + B, A - B, A * B))\n'''\n\ndef",
        "test": "assert solution(inp) == '-13'",
        "num_ids": 373
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    h = [0]*(n+1)\n    ans = 0\n    for i in range(1, n+1):\n        h[i] = i\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            if h[j] - h[i] < j - i:\n                h[j] = h[i]\n                ans += 1\n    return ans\n",
        "test": "assert solution(\"6 5 6 8\") == 2, \"The number of inns you can see from the west must be 2\"",
        "num_ids": 918
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a_list = stdin.split()\n    n = int(n)\n    a_list = [int(x) for x in a_list.split()]\n    a_list.sort()\n\n    answer = 0\n    \n    for a in a_list:\n        if a == 1:\n            answer += 2\n        else:\n            answer += 1\n\n    return str(answer)\n",
        "test": "assert solution(stdin) == '3'",
        "num_ids": 429
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 1 == 0:\n        return str(n // 1)\n    else:\n        return \"invalid\"\n\n\n-----My Answer-----\n\ndef",
        "test": "assert solution(7) == \"1\"",
        "num_ids": 1498
    },
    {
        "number": 4321,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin[-1])\n\n    if n == 0:\n        return 1\n\n    if k == 0:\n        return 0\n\n    if k % 10 == 0:\n        return n\n    else:\n        return solution(stdin[1:]) + solution(stdin[:1])\n",
        "test": "assert solution(stdin) == \"50\"",
        "num_ids": 361
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a = sorted(list(map(int, a)))\n    a.append(max(a))\n    a.sort()\n    \n    a_i = a[1]\n    a_k = a[-1]\n    \n    a_j = 0\n    res_k = 0\n    for i in range(1, n + 1):\n        if a_j == a_k:\n            res_k = i\n            break\n        if abs(a_j - a_k) <= 1:\n            a_j = a[i]\n        else:\n            a_k = a[i]\n    return f\"{res_k} {a_i}\"\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 639
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    #if a >= b: return -1\n    \n    count = 0\n    if b > a:\n        for i in range(a, b+1):\n            s = sum(map(int, str(i)))\n            if s <= a:\n                count += s\n    else:\n        for i in range(a, b+1):\n            s = sum(map(int, str(i)))\n            if s <= a:\n                count += s\n                \n    return count\n\nInput\n2\n\nOutput\n2\nInput\n4\n\nOutput\n-1\n\n\nInput\n1\n\nOutput\n3\n\nInput\n2\n\nOutput\n1\n'''\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 578
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def insert_str(a: str, b: int) -> int:\n        cnt = 0\n        for i in range(len(a)):\n            if a[i] == a[b] and i == b:\n                cnt += 1\n        return cnt\n\n    def extract_str(a: str, b: int, c: int) -> int:\n        lst = []\n        for i in range(b, len(a)):\n            if a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n            elif a[i] == a[b] and i == b:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n                lst.append(a[i] * c)\n            else:\n                lst.append(a[i])\n        return sum(lst)\n\n    def t_insert_str(a: str, b: int, c: int) -> int:\n        cnt = 0\n        for i in range(len(a)):\n            if a[i] == a[b] and i == b:\n                cnt += 1\n            elif a[i] == a[b] and i == b + 1:\n                cnt += 1\n            elif a[i] == a[b] and i == b + 1:\n                cnt += 1\n            elif a[i] == a[b] and i == b:\n                cnt += 1\n            else:\n                cnt += 1\n        return cnt\n\n    def t_extract_str(a: str, b: int, c: int) -> int:\n        lst = []\n        for i in range(b, len(a)):\n            if a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n            elif a[i] == a[b] and i == b:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n                lst.append(a[i] * c)\n            else:\n                lst.append(a[i])\n        return sum(lst)\n\n    def t_t_insert_str(a: str, b: int, c: int) -> int:\n        lst = []\n        for i in range(b, len(a)):\n            if a[i] == a[b] and i == b:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n            else:\n                lst.append(a[i])\n        return sum(lst)\n\n    def t_t_extract_str(a: str, b: int, c: int) -> int:\n        lst = []\n        for i in range(b, len(a)):\n            if a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n            elif a[i] == a[b] and i == b:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n                lst.append(a[i] * c)\n            else:\n                lst.append(a[i])\n        return sum(lst)\n\n    for case in stdin:\n        n = int(case)\n        lst = []\n        for i in range(n):\n            a = stdin.readline().strip()\n            b = int(stdin.readline().strip())\n            c = int(stdin.readline().strip())\n            if c == 0:\n                lst.append(a[:b])\n            elif c == 1:\n                lst.append(a[:b] + a[b + 1:])\n            else:\n                lst.append(a[:b] + a[b + 1:b + c - 1] + a[b + 1:])\n        print(t_extract_str(lst, n - 1, c))\n        print(t_insert_str(lst, n - 1, c))\n        print(t_t_insert_str(lst, n - 1, c))\n",
        "test": "assert solution(stdin) == 'tleelte', '\\n'.join(stdin.split('\\n'))",
        "num_ids": 1878
    },
    {
        "number": 4325,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, T = list(map(int, stdin.split()))\n    minutes = 0\n    for i in range(1, T+1):\n        minutes += 1\n        if minutes > N:\n            return str(minutes)\n    return str(minutes)",
        "test": "assert solution(\"2 2\") == \"2\"",
        "num_ids": 450
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_groups = 2\n\n    for i in range(N):\n        temp = list(map(int, input().split()))\n        temp.sort()\n        if len(temp) > max_groups:\n            max_groups = len(temp)\n    return max_groups\n\ndef",
        "test": "assert solution(stdin) == 2",
        "num_ids": 412
    },
    {
        "number": 4327,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    max_apple_pies = P*2 + 3\n    apple_pie = [0]*max_apple_pies\n    cubes = [0]*max_apple_pies\n    max_apple_pie = 0\n    for _ in range(P):\n        p_input = stdin.split()\n        if p_input[0] == 'a':\n            apple_pie[0] += 1\n        else:\n            apple_pie[1] += 1\n        cubes[0] = max(cubes[0], apple_pie[1]*2)\n        cubes[1] = max(cubes[1], apple_pie[0]*2)\n        if apple_pie[0] == P:\n            apple_pie[0] = 0\n        if apple_pie[1] == P:\n            apple_pie[1] = 0\n        max_apple_pie = max(max_apple_pie, cubes[0]+cubes[1])\n        if max_apple_pie > max_apple_pies:\n            max_apple_pie = max_apple_pies\n    return str(max_apple_pie)\n",
        "test": "assert solution(input().split()) == '3'",
        "num_ids": 500
    },
    {
        "number": 4328,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = a[:]\n    for i in range(len(b)):\n        if a[i] % b[i]!= 0:\n            b[i] -= a[i]\n        else:\n            b[i] = 0\n    for i in range(len(a)):\n        if b[i] % a[i]!= 0:\n            a[i] -= b[i]\n        else:\n            a[i] = 0\n    return ''.join(str(x) for x in a)\n\nprint(solution(\"4 12\"))",
        "test": "assert solution([\"1\", \"1\"]) == \"1\"",
        "num_ids": 382
    },
    {
        "number": 4329,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for _ in range(len(stdin)):\n        if stdin[-1] == 'z':\n            answer += 'Yes'\n            stdin = stdin[:-1]\n        else:\n            answer += 'No'\n    return answer\n",
        "test": "assert solution(\"chokudai\") == \"No\"",
        "num_ids": 219
    },
    {
        "number": 4330,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(input) == \"7\"",
        "num_ids": 484
    },
    {
        "number": 4331,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    answer = True\n    for i in range(1000):\n        digit = str(i)\n        if digit == '7':\n            answer = answer and True\n        else:\n            answer = answer and False\n    if answer:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('12') == 'No'",
        "num_ids": 175
    },
    {
        "number": 4332,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(stdin) == \"Yes\"",
        "num_ids": 240
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2=map(int,stdin.split())\n    result=str(x1+x2+y1-y2)\n    return result\n",
        "test": "assert solution(\"0 0 0 1 1\") == \"0 1 1 0\"",
        "num_ids": 1951
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0 or stdin[0]!= 'S':\n        return '1'\n    \n    n = int(stdin[1])\n    if n < 1 or n > 10:\n        return '1'\n\n    s = list(stdin[2:].split())\n    u = list(stdin[1:].split())\n    if n >= len(s):\n        return '2'\n    \n    if n < len(s):\n        return '0'\n    \n    if u[0]!= 'U':\n        return '0'\n    \n    if len(u) < 3:\n        return '0'\n    \n    for i in range(len(s) - 2):\n        if s[i]!= u[i+1] and s[i]!= u[i+2]:\n            return '0'\n        else:\n            continue\n    \n    return '1'\n",
        "test": "assert solution(\"red\", \"3 4\") == \"2 4\"",
        "num_ids": 518
    },
    {
        "number": 4335,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"Yes\"\n    else:\n        x = stdin[0]\n        y = stdin[1]\n        if x!= y:\n            return \"No\"\n        else:\n            return \"Yes\"\n",
        "test": "assert solution('abcabc') == 'No'",
        "num_ids": 249
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    \n    if x > y:\n        return '1'\n    \n    if x == y:\n        return '1'\n    \n    def num_cuts(x, y):\n        count = 0\n        for x1, y1 in [(x-1, y), (x, y-1), (x+1, y), (x, y+1)]:\n            count += num_cuts(x1, y1)\n        return count\n    \n    count = num_cuts(x, y)\n    if count == 0:\n        return '0'\n    \n    return '1'\n",
        "test": "assert solution(\"1 2 0\") == \"0.0011\"",
        "num_ids": 730
    },
    {
        "number": 4337,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, S = map(int, stdin.split())\n    S_n = []\n    for i in range(n):\n        S_n.append(S)\n    S_n.sort()\n    print(len(S_n))\n    \n    for i in range(len(S_n)):\n        if S_n[i] == S_n[i+1]:\n            pass\n        elif S_n[i+1] == S_n[i]:\n            S_n[i], S_n[i+1] = S_n[i+1], S_n[i]\n        else:\n            break\n    print(len(S_n))\n    if len(S_n) == 3:\n        return \"Three\"\n    elif len(S_n) == 4:\n        return \"Four\"\n    else:\n        return \"Error\"",
        "test": "assert solution(int(input())) == \"Four\"",
        "num_ids": 1801
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n, x, y = map(int, input().split())\n    \n    doors = map(int, input().split())\n    \n    if n < x:\n        \n        \n        max_num = sum(doors)\n        \n        for i in range(n-1):\n            max_num += max(doors[i], doors[i+1])\n        \n        print(max_num)\n        \n    elif x < n:\n        \n        max_num = sum(doors[:n-1])\n        \n        for i in range(n-1):\n            max_num += max(doors[i], doors[i+1])\n        \n        print(max_num)\n    else:\n        print(sum(doors[:x-1]))\n        \n                \n",
        "test": "assert solution(input) == 7",
        "num_ids": 1986
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i > j:\n                a, b = i, j\n            else:\n                a = i\n                b = j\n            a, b = sorted([a,b])\n            pairs.append([a, b])\n    return str(len(pairs))\n\nTime complexity: O(n^2)\nSpace complexity: O(n^2)\n\n1. \uadf8\ub8f9\ub0b4\uc5d0\uc11c\ub294 \ud328\ud134\ubb38\uc5d0 \ub098\uc628\ub2e4. \ub098\uc628\ub2e4\ub294 \ubb38\uc81c\uc774\ub2e4.\n2. \uadf8\ub8f9\ub0b4\uc5d0\uc11c\ub294 \uc11c\ub85c\uc18c\ub9ac\ub97c \uacbd\uae30\ud558\ub294 \ubaa8\ub4e0 \ud328\ud134\uc744 \ubcf4\ub294\ub2e4. \uadf8\ub8f9\uc758 \uae30\uc6b8\uae30\uac00 \uac19\uc740 \uac12\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uace0, \uadf8\ub8f9\uc758 \uc778\ub371\uc2a4\uc758 \uac12\uc744 \uc774\uc6a9\ud558\uc5ec \uadf8\ub8f9\uc5d0 \ub300\ud55c \uac1c\uc218\ub97c \uad6c\ud55c\ub2e4. \ud328\ud134\uc758 \ub098\uc5f4\uc744 \uc0ac\uc6a9\ud574 \uadf8\ub8f9\uacfc \uac19\uc740 \uac12\uc744 \uc138\uc5b4 \ubcf4\uba74 \ub41c\ub2e4.\n3. \ubaa8\ub4e0 \uacbd\uae30\ud558\ub294 \ubaa8\ub4e0 \ud328\ud134\uc744 \uc815\ub82c\ud55c \ub4a4\uc5d0 \ub098\uc628 \ud328\ud134\uc758 \ubc30\uc5f4\uc744 \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.\n4. \uc815\ub82c\ub41c \ud328\ud134\uc758 \ubc30\uc5f4\uc744 \uadf8\ub8f9\uc5d0 \ub2f4\uc544\ub193\uc740 \ub2e4\uc74c \ub2e8\uacc4\uc758 \ub098\uc5f4\uc744 \ud29c\ud50c\ub85c \ubc18\ud658\ud574\uc57c \ud55c\ub2e4.\n\n3-2. \uac00\uc7a5 \uae34 \ubc30\uc5f4\uc758 \ucd5c\uc19f\uac12\uc744 \uad6c\ud558\ub294 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uba74 \ub41c\ub2e4.\n5. \uac01 \uac12\uc774 \uc790\uc2e0\uc758 \uac1c\uc218\ub97c \uad6c\ud558\ub294 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uba74 \ub41c\ub2e4.\n\n-----Constraints-----\n1 <= n <= 2^10\n1 <= stdin.length <= 2^10\n1 <= a_i <= 10^9\n1 <= b_i <= 10^9\n\nExample 1:\nInput\n2\n2 2 1 3\n4\n2 1 3 2\n1 2 4 2\nOutput\n1\n\nExample 2:\nInput\n2\n2 2 1 3\n1\n1 1 4 2\n2\n2 2 1 3\n3\n\nExample 3:\nInput\n4\n1 3 2 4\n2 2 2 2\n2 2 2 2\n2 2 2 2\n3 2 3 2\nOutput\n3\n\nNote:\nn = 2^9 = 2^9 + 4^3 = 4^3 + 4^2 + 4^1 + 4^0 = 2^4 = 2^4 + 2^3 + 2^2 = 2^3 + 2^1 + 2^0 = 3^4 = 3^4 + 3^2 + 3^1 = 3^0 + 3^0 = 2^3 + 2^1 + 2^0 = 4\n\"\"\"\n\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], target: int) -> int:\n        arr.sort()\n        ans = 0\n        for i in range(1, len(arr)):\n            for j in range(i):\n                k = arr[i]-arr[j]\n                if k == target:\n                    ans += 1\n        return ans\n",
        "test": "assert solution(stdin) == 4, \"bad\"",
        "num_ids": 1609
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a = [int(i) for i in a]\n\n    for i in range(n):\n        a[i] = (a[i] * a[i]) % 10 ** 9\n\n    # \u53cc\u6307\u9488\uff0c\u53cd\u4e4b\u662f\u53cc\u6307\u9488\n    # \u53cd\u4e4b\u662f\u53cc\u6307\u9488\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u7684\u6536\u76ca\uff0c\u5982\u679c\u6709\u53ef\u80fd\u662f\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bf9\u4e8e\n    # \u95ed\u5305\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6709\u53ef\u80fd\u662f\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bf9\u4e8e\n    # \u95ed\u5305\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6709\u53ef\u80fd\u662f\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bf9\u4e8e\n    # \u4e8c\u6307\u9488\u5bf9\u4e8e\u6570\u7ec4\u7684\u6536\u76ca\uff0c\u5173\u4e8e\u5f15\u5165\u5f02\u5e38\uff0c\u5e76\u67e5\u627e\u6700\u4f18\u6536\u76ca\n    # \u518d\u5f15\u5165\u5f02\u5e38\uff0c\u6211\u4eec\u518d\u6307\u5b9a\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u4e3a\u4e86\u9632\u6b62\u5f02\u5e38\u7684\u5904\u7406\uff0c\u6211\u4eec\u8ba9\u5176\u6536\u76ca\u5927\u4e8e0\uff0c\n    # \u4f46\u662f\u5bf9\u4e8e\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u5c31\u4e0d\u4f1a\u4ea7\u751f\u5f02\u5e38\u3002\n    for i in range(n):\n        a[i] = (a[i] * a[i]) % 10 ** 9\n\n    for i in range(n):\n        a[i] = (a[i] * a[i]) % 10 ** 9\n\n    res = \"\"\n    for i in range(n):\n        res = res + str(a[i]) + \" \"\n\n    return res.rstrip()\n\n\u601d\u8def\uff1a\n\u6bcf\u6b21\u5bf9\u4e8e\u53cc\u6307\u9488\u7684\u540c\u65f6\u5bf9\u4e8e\u6bcf\u4e2a\u6570\uff0c\u505a\u4e00\u6b21\u6c42\u89e3\uff0c\u4e00\u4e2a\u53cc\u6307\u9488\u4ece\u6700\u53f3\u7aef\u5230\u6700\u5de6\u7aef\u7684\u6536\u76ca\uff0c\u6bcf\u6b21\u5206\u62c6\u3002\n\n\u601d\u8def\uff1a\n\u4e3b\u8981\u7406\u89e3\u4e3a\uff1a\n\u4e3b\u8981\u7406\u89e3\u4e3a\uff1a\n\u5bf9\u4e8e\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u5c31\u4e0d\u4f1a\u4ea7\u751f\u5f02\u5e38\u3002\n\u5bf9\u4e8e\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u5c31\u4f1a\u5c06\u7ed3\u679c\u7edf\u4e00\u8d4b\u7ed9\u5f02\u5e38\u7684\u60c5\u51b5\u3002\n\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u5c31\u6709\u53ef\u80fd\u662f\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u5c31\u4f1a\u7ee7\u7eed\u8f93\u51fa\u5f02\u5e38\u7684\u60c5\u51b5\u3002\n\n\u9700\u8981\u8bb0\u5f55\u53ef\u80fd\u7684\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u5e76\u5c06\u5f02\u5e38\u7684\u60c5\u51b5\u8bb0\u5f55\u5728\u5f02\u5e38\u8bb0\u5f55\u5217\u8868\u4e2d\u3002\n\n\u8bb0\u5f55\u6bcf\u6b21\u6c42\u503c\u7684\u7ed3\u679c\uff0c\u540c\u65f6\u66f4\u65b0\u5f02\u5e38\u7684\u60c5\u51b5\u3002\n\u6bcf\u6b21\u5bf9\u4e8e\u53cc\u6307\u9488\u7684\u540c\u65f6\u5bf9\u4e8e\u6bcf\u4e2a\u6570\uff0c\u505a\u4e00\u6b21\u6c42\u89e3\uff0c\u4e00\u4e2a\u53cc\u6307\u9488\u4ece\u6700\u53f3\u7aef\u5230\u6700\u5de6\u7aef\u7684\u6536\u76ca\uff0c\u6bcf\u6b21\u5206\u62c6\u3002\n\u5982\u679c\u4e00\u4e2a\u6570\u7684\u6536\u76ca\u5927\u4e8e0\uff0c\u5219\u8fd9\u4e2a\u6570\uff08\u4e00",
        "test": "assert solution(\"10\") == \"10\"",
        "num_ids": 2771
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n    edges.sort()\n    result = 0\n    for s, e in edges:\n        if e in edges[s+1:e+1]:\n            result += 1\n    return str(result)",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 1012
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for i in range(n):\n        edges.append(stdin[i*2].split())\n    \n    d = {'1':'0','2':'0','3':'0','4':'0','5':'0'}\n    \n    def is_nice(a,b,c):\n        # The first one is the set of red and blue vertices that are both uncolored.\n        # The second one is the set of red and blue vertices that are uncolored.\n        if a in d and b in d and c not in d:\n            return 0\n        else:\n            return 1\n\n    # There is no nice edge.\n    def check(a,b):\n        return a not in d or b not in d\n\n    ans = 0\n    def dfs(a,b):\n        if check(a,b):\n            if is_nice(a,b,d):\n                ans+=1\n        if a==b:\n            return\n        else:\n            for v in edges[a]:\n                dfs(v,b)\n        \n    dfs(0,0)\n    return ans\n",
        "test": "assert solution(\"\"\"3",
        "num_ids": 1890
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    strings = [stdin.strip() for stdin in stdin.split()]\n    sorted_strings = sorted(strings, key=len)\n    return sorted_strings[k // 2] if k % 2 == 0 else sorted_strings[k // 2][k // 2]\n",
        "test": "assert solution(\"1\\n4\\n7\\n5\\n4\\n3\\n2\") == \"3\"",
        "num_ids": 935
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    student_pool = [int(i) for i in input().split()]\n    \n    team_pool = sorted([int(i) for i in input().split()])\n    team_len = len(team_pool)\n    answer = []\n    team_answer = []\n    \n    for i in range(0,team_len):\n        if team_pool[i] in student_pool:\n            answer.append(team_pool[i])\n            team_answer.append(i)\n        else:\n            answer.append(team_pool[i])\n            team_answer.append(team_pool.index(team_pool[i]))\n    if len(answer) == 0 or len(answer) == 1:\n        return \"NO\"\n    else:\n        answer.sort()\n        answer = list(set(answer))\n        answer.sort()\n        \n        return \"YES\"\n    \n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 783
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    if a[0] > a[-1]:\n        return \"NO\"\n    for i in range(len(a)-2):\n        if a[i] + a[i+1] > m:\n            return \"NO\"\n    for i in range(len(a)-2):\n        if a[i] + a[i+2] > m:\n            return \"NO\"\n    print(a)\n    return \"YES\"\n\nfor i in range(int(input())):\n    print(solution(input()))",
        "test": "assert solution(",
        "num_ids": 714
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    l = [int(i) for i in stdin.split()]\n    \n    return str(l.count(max(l)))",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 1566
    },
    {
        "number": 4347,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(",
        "num_ids": 205
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    while len(s) > 1:\n        s.pop(0)\n        s.pop()\n    return ''.join(s)\n'''",
        "test": "assert solution(\"a\") == \"a\", \"Arbitrary character\"",
        "num_ids": 546
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, stdin.split())\n    # n_set = set()\n    # m_set = set()\n    # for n_i in range(1, n + 1):\n    #     for m_i in range(1, m + 1):\n    #         n_set.add(n_i)\n    #         m_set.add(m_i)\n    # if len(n_set & m_set) == 0:\n    #     return \"Infinity\"\n    #\n    # n_set = sorted(n_set)\n    # m_set = sorted(m_set)\n    #\n    # if len(n_set) > len(m_set):\n    #     return \"Infinity\"\n    # elif len(n_set) < len(m_set):\n    #     return str(min(n_set) - max(m_set))\n    # else:\n    #     return str(min(n_set) - max(m_set)) + \";\"\n\n    n, m = map(int, input().split())\n    n_set = set()\n    m_set = set()\n    for n_i in range(1, n + 1):\n        for m_i in range(1, m + 1):\n            n_set.add(n_i)\n            m_set.add(m_i)\n    if len(n_set & m_set) == 0:\n        return \"Infinity\"\n    n_set = sorted(n_set)\n    m_set = sorted(m_set)\n    if len(n_set) > len(m_set):\n        return \"Infinity\"\n    elif len(n_set) < len(m_set):\n        return str(min(n_set) - max(m_set))\n    else:\n        return str(min(n_set) - max(m_set)) + \";\"\n\n\nprint(solution(stdin))",
        "test": "assert solution(stdin) == '20'",
        "num_ids": 756
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.strip()) for _ in range(n)]\n    result = []\n    for x in range(n):\n        for y in range(m):\n            if x == 0 and y == 0:\n                result.append('.')\n            else:\n                if grid[x][y] == '.':\n                    continue\n                else:\n                    if grid[x][y] == '*':\n                        result.append(grid[x][y])\n                    else:\n                        result.append(grid[x][y] * (2 ** (len(result) + 1)))\n    return \"\".join(result)\n\n\n\ndef",
        "test": "assert solution(stdin) == 3",
        "num_ids": 675
    },
    {
        "number": 4351,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin)\n    if n==0 or n==1:\n        return 'No'\n    n=str(n)\n    for i in range(len(n)//2):\n        if n[i]!=n[-i-1]:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert solution(20) == 'No'",
        "num_ids": 332
    },
    {
        "number": 4352,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    a, b = map(int, stdin.split())\n    if a < b:\n        return \"Alice\"\n    if a > b:\n        return \"Bob\"\n    if a == b:\n        return \"Draw\"\n    if a > b:\n        return \"Alice\"\n    else:\n        return \"Bob\"\n\n------------------------------------------------------\nThe output of each test case will be drawn in a random order.\nThe order of the tests is not deterministic.\n\"\"\"\n\nfrom math import sqrt\nfrom random import choice\n\n\ndef",
        "test": "assert solution(stdin) == \"Alice\"",
        "num_ids": 344
    },
    {
        "number": 4353,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.split(\",\")\n  while s[0].strip()!= ';':\n    s.append(s[0].strip())\n  s[0] = s[0].replace(',','')\n  s[1] = s[1].replace(',','')\n  s[2] = s[2].replace(',','')\n  answer = ''\n  for i in s:\n    answer += i\n  return answer",
        "test": "assert solution(['Foo', 'Bar', 'Baz', 'baz', 'foo', 'bar', 'baz', 'foo']) == 'Foo Bar Baz baz foo bar baz foo bar baz foo bar foo'",
        "num_ids": 359
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_list = list(map(int, stdin.split()))\n    s_list.sort()\n    answer = []\n    for i in range(N):\n        answer.append(s_list.index(i+1)+1)\n    print(answer)\n    return str(answer).replace('[', '').replace(']', '')\nsolution(input())",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 646
    },
    {
        "number": 4355,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a ** 2 + a ** 3\n    return str(b)",
        "test": "assert solution(0) == '0'",
        "num_ids": 398
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A = [x for x in stdin.split()]\n    B = [x for x in stdin.split()]\n    N = int(A[0])\n    M = int(A[1])\n    for _ in range(2):\n        A[0] = B[0]\n        A[1] = B[1]\n    if N == M:\n        print('Yes')\n    else:\n        print('No')\n    return\n\n\"\"\"\n1. \u521d\u59cb\u5316\n2. \u6e96\u5099\n3. \u8a08\u7b97\n4. \u53cd\u61c9\n5. \u53d6\u5f97\u7b54\u6848\n\"\"\"\n",
        "test": "assert solution(string) == 'Yes', 'incorrect'",
        "num_ids": 2174
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  answer = 0\n  A, B, C = map(int, stdin.split())\n  result = C + A + B\n  while A+B+C!= 0:\n    if A+B+C > answer:\n      answer = A+B+C\n    A = A // 10\n    B = B // 10\n    C = C // 10\n  print(answer)\n  return answer\n\n-----Sample Output-----\n1\n\nExplanation\nGiven the input in the sample input, the maximum possible allowance is 3, as shown on the integer panels.\n\n-----Sample Input-----\n1 5 2\n\n-----Sample Output-----\n53\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        x = int(stdin[0])\n        y = int(stdin[1])\n        C = 0\n        i = 0\n        while i < 4:\n            C = C + (i * 10) + y\n            i = i + 1\n        if C >= x * 10:\n            C = C // 10\n        answer = C + (x * 10) + y\n        return answer",
        "test": "assert solution(input()) == '53'",
        "num_ids": 544
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, p_1, p_2, p_N = map(int, stdin.split())\n    p_1_yen = p_1 * N * (1 / 2)\n    p_2_yen = p_2 * N * (1 / 2)\n    remain_yen = p_N - (p_1 + p_2)\n    answer = (p_1 + p_2) / 2 + (remain_yen / 2)\n    return str(round(answer, 1))\n\n-----Time complexity-----\nO(N)\nO(1)\nO(N)\n\nO(N)\nO(N)\n\nO(N)\nO(1)\n\nO(N)\nO(N)\n\nO(1)\nO(1)\nO(1)\n\nO(N)\nO(N)\nO(N)\n\nO(N)\nO(N)\nO(N)\n\nO(N)\nO(N)\nO(1)\n\nO(N)\nO(N)\nO(N)\nO(N)\n\nO(N)\nO(N)\nO(N)\nO(1)\n\nO(N)\nO(N)\nO(N)\nO(N)\nO(1)\n\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\n\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\n\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\n\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N",
        "test": "assert solution(stdin) == 15950, \"The function should return a string\"",
        "num_ids": 2007
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    dishes = []\n    for dish in stdin.split('\\n'):\n        dishes.append(int(dish.split(',')[0]))\n    \n    dishes.sort()\n    answer = 0\n    for i in range(len(dishes)):\n        for j in range(i+1, len(dishes)):\n            if (dishes[i]+dishes[j])%10==0:\n                answer = max(dishes[i],answer)\n                if i<j:\n                    answer = max(answer,dishes[j]-dishes[i])\n                else:\n                    answer = max(answer,dishes[j]-dishes[i]+dishes[j])\n    return str(answer)",
        "test": "assert solution('B') == '7'",
        "num_ids": 483
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    for i in A:\n        j = i\n        if j - 1 >= 0 and A[j - 1]!= j + 1:\n            return str(j + 1)\n    return str(1)\n\ndef",
        "test": "assert solution(inp) == str(7.49999)",
        "num_ids": 376
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split()]\n    max_height = max(list(map(int, input().split())))\n    min_height = min(list(map(int, input().split())))\n    # print(N, K, max_height, min_height)\n    if max_height - min_height == max_height + min_height:\n        print(max_height - min_height)\n    else:\n        return '?'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, K = [int(i) for i in stdin.split()]\n        max_height = max(list(map(int, input().split())))\n        min_height = min(list(map(int, input().split())))\n        # print(N, K, max_height, min_height)\n        if max_height - min_height == max_height + min_height:\n            print(max_height - min_height)\n        else:\n            return '?'\n",
        "test": "assert solution(input()) == '2'",
        "num_ids": 1320
    },
    {
        "number": 4362,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(len(stdin)):\n        if stdin[i].isalpha():\n            answer = answer + stdin[i]\n        elif stdin[i].isupper():\n            answer = answer + 'A'\n        else:\n            answer = answer + 'a'\n    return answer\n\n\"\"\"\nimport re\ndef",
        "test": "assert solution(input()) == \"A\"",
        "num_ids": 2124
    },
    {
        "number": 4363,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    \n    if K < 1 or K > S:\n        return 'No'\n    \n    if S % K!= 0:\n        return 'No'\n    \n    l = [0] * (S // K)\n    for i in range(S // K):\n        l[i * K] = i\n    \n    ans = 0\n    for x in range(K):\n        if K - x in l:\n            for y in range(l[K - x]):\n                for z in range(K - (l[K - x] - y)):\n                    ans += 1\n                    \n    return str(ans)\n",
        "test": "assert solution([\"2\", \"1\", \"3\", \"4\", \"5\"]) == \"6\"",
        "num_ids": 468
    },
    {
        "number": 4364,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    month_str = {'01': 'Jan', '02': 'Feb', '03': 'Mar', '04': 'Apr', '05': 'May', '06': 'Jun', '07': 'Jul', '08': 'Aug', '09': 'Sept', '10': 'Oct', '11': 'Nov', '12': 'Dec'}\n    year_str = {'01': 'Jan', '02': 'Feb', '03': 'Mar', '04': 'Apr', '05': 'May', '06': 'Jun', '07': 'Jul', '08': 'Aug', '09': 'Sept', '10': 'Oct', '11': 'Nov', '12': 'Dec'}\n\n    start, end = 0, 4\n    month_num = {'01': 31, '02': 28, '03': 31, '04': 30, '05': 31, '06': 30, '07': 31, '08': 31, '09': 30, '10': 31, '11': 30, '12': 31}\n    year_num = {'01': 1, '02': 28, '03': 31, '04': 30, '05': 31, '06': 30, '07': 31, '08': 31, '09': 30, '10': 31, '11': 30, '12': 31}\n    \n    for line in stdin:\n        if len(line) == 1:\n            if line[0] in ['Y', 'y']:\n                start = year_str[line[0]]\n                start = start * year_num[line[0]]\n                end = start + 1\n            elif line[0] in ['M','m']:\n                start = month_str[line[0]]\n                start = start * month_num[line[0]]\n                end = start + 1\n        else:\n            if line[0] in ['Y', 'y']:\n                start = year_str[line[0]]\n                start = start * year_num[line[0]]\n                end = start + 1\n            elif line[0] in ['M','m']:\n                start = month_str[line[0]]\n                start = start * month_num[line[0]]\n                end = start + 1\n            \n            end = end * len(line[1:])\n            if end < 0:\n                end = 31\n            else:\n                end = end % 7\n\n    return \"\".join(map(str, (start, end)))\n",
        "test": "assert solution(input()) == \"MMYY\"",
        "num_ids": 1101
    },
    {
        "number": 4365,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    print(solution_a(int(stdin)))\n    return \"\"\n\ndef",
        "test": "assert solution(\"0\") == 0",
        "num_ids": 311
    },
    {
        "number": 4366,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin.split(' '))\n    hour = int(lst[0])\n    minutes = int(lst[1])\n    return str(hour + minutes / 60)\n    \n",
        "test": "assert solution(\"9:00 pm\") == \"21 o'clock\"",
        "num_ids": 281
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    contests = list(map(int, stdin.split()))\n    return str(min(sum(contests) - (R - sum(contests) * (10 - min(contests))) * 10, R))",
        "test": "assert solution(stdin) == \"3719\"",
        "num_ids": 240
    },
    {
        "number": 4368,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def digit_len(num):\n        return int(len(str(num)) - len(str(num)[::-1]))\n\n    def test_num(num):\n        num_dict = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n        num = num.replace(' ', '')\n        for i in range(len(num)):\n            num = num[:i] + num_dict[int(num[i])] + num[i + 1:]\n        return num\n\n    N, K = map(int, stdin.split())\n    base = 10\n    if K < 10:\n        N = 10 ** N\n        K = 10 ** K\n    base_K = 10 ** K\n    if N == 0:\n        print(0)\n    elif N < 0:\n        return '0'\n    elif N % base!= 0:\n        return '0'\n    else:\n        target_len = base_K ** (N // base)\n        target_len = int(target_len)\n        target_len -= 1\n        target_len -= int(test_num(str(N)))\n        return str(target_len)\n\n\nfor i in range(t):\n    N, K = map(int, input().split())\n    print(solution(str(N) + str(K)))\n",
        "test": "assert solution(\"2\") == \"4\"",
        "num_ids": 516
    },
    {
        "number": 4369,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.strip())\n  \n  if N==1:\n    print(\"1\")\n  elif N%2==1:\n    print(\"2\")\n  else:\n    print(\"3\")\n  return\n\nsolution(\"4\")",
        "test": "assert solution('1') == '1'",
        "num_ids": 227
    },
    {
        "number": 4370,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    square1001 = [i for i in range(1, 16)]\n    A, B = map(int, stdin.split())\n    if A == A and B == B:\n        return 'Yay!'\n    if A + B in square1001 or A + B in square1001[::-1]:\n        return 'Yay!'\n    return '((' + str(A) + str(B) + ')' + ')'\n\"\"\"\n\n\ndef",
        "test": "assert solution(str(s)) == 'Yay!'",
        "num_ids": 372
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    X = 0\n    for i in range(1,len(S)):\n        if S[i-1] == S[i]:\n            X = X + 2*int(S[i-1])\n        else:\n            X = X + int(S[i-1])\n    return str(X)\n",
        "test": "assert solution(input) == \"34\"",
        "num_ids": 709
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    i = 0\n    j = 0\n    k = 0\n    while True:\n        if a[i] <= a[j]:\n            i += 1\n        elif a[i] >= a[j]:\n            j += 1\n        elif a[j] >= a[i]:\n            i += 1\n            j += 1\n        else:\n            break\n    while i < n:\n        if a[i] == a[j]:\n            i += 1\n        elif a[i]!= a[j]:\n            k += 1\n            i += 1\n        elif a[i]!= a[j] and a[j] == a[k]:\n            k += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n            k += 1\n    print(k)\nsolution(stdin)\n",
        "test": "assert solution(stdin) == \"1213\"",
        "num_ids": 460
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = []\n    for i in range(n):\n        a_list.append(int(stdin.strip()))\n    a_list.sort()\n    a_dict = {}\n    cnt = 0\n    for i in a_list:\n        if i in a_dict:\n            a_dict[i] += 1\n        else:\n            a_dict[i] = 1\n    m = 0\n    for k, v in a_dict.items():\n        if v == 1:\n            cnt += 1\n            if cnt == k:\n                m += 1\n    return str(m)\n\n\n-----Basic idea-----\n\nSolution 1\n\ndef",
        "test": "assert solution(stdin) == 4",
        "num_ids": 630
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n\n    # Generate the graph\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n\n    # Print the graph\n    for u in range(1, n + 1):\n        print(u)\n        for v in graph[u]:\n            print(v, end=\" \")\n        print()\n\n    # Determine the shortest path\n    for v in range(n, 1, -1):\n        shortest = 1\n        for u in range(1, n + 1):\n            if graph[u][v]!= 0:\n                shortest = min(shortest, graph[u][v])\n        print(shortest)\n",
        "test": "assert solution(",
        "num_ids": 666
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    vertices = [int(s) for s in stdin.split()]\n    vertices.sort(key=lambda x: x * (k + 1))\n    edge_list = [list(map(int, e.split())) for e in stdin.split()]\n\n    res = 0\n    for u, v in edge_list:\n        # NOTE: u, v can be the same vertex\n        # NOTE: The whole \"tuple\" must be kept, because of the use of the sorting\n        #       on the edge_list\n        for i in range(u, v + 1):\n            res += vertices[i]\n    \n    return str(res)\n\ndef",
        "test": "assert solution(stdin), 'Wrong! '",
        "num_ids": 503
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1, a_2, b_1, b_2, b_m = map(int, stdin.strip().split())\n    return str(b_m + a_m + b_2 + a_1 + b_1)\n",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 782
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    answer = []\n    for i in range(a, a + b + c):\n        temp = str(i)\n        if temp.count(temp[0]) == 0:\n            answer.append(i)\n    return \",\".join(map(str, answer))",
        "test": "assert solution(stdin) == \"1 100 100\"",
        "num_ids": 836
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    s = list(stdin.split(' '))\n    s = sorted(s, key=lambda x: int(x))\n    c = []\n    for i in range(n):\n        if len(s[i]) == 1:\n            c.append(s[i])\n        else:\n            for j in range(len(s[i])):\n                if s[i][j]!= s[i][j+1]:\n                    break\n            if s[i][j]!= s[i][j+1]:\n                c.append(s[i][j+1])\n            else:\n                c.append(s[i][j])\n    ans = sorted(c, key=lambda x: int(x))\n    return ''.join(ans)\n\ndef",
        "test": "assert solution('G'), 2",
        "num_ids": 2364
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    numbers = list(map(int, stdin.split()))\n    start = 0\n    end = 0\n    while start < n and end < k:\n        if numbers[start] > numbers[end]:\n            numbers[start], numbers[end] = numbers[end], numbers[start]\n            end += 1\n        elif numbers[start] < numbers[end]:\n            numbers[start], numbers[end] = numbers[end], numbers[start]\n            start += 1\n        else:\n            end += 1\n    if end == k:\n        for i in range(n):\n            print(numbers[i])\n    else:\n        for i in range(start, end):\n            print(numbers[i])\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 1566
    },
    {
        "number": 4380,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % 3!= B % 3 or A % 3 == B % 3:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n'''\n",
        "test": "assert solution(input()) == 'No'",
        "num_ids": 145
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x,y = map(int, stdin.split())\n    if x+y==0:\n        return \"0\"\n    return str(x*y)\n",
        "test": "assert solution(\"2 5 1 2 3 3\") == \"3\"",
        "num_ids": 219
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(int, stdin))))\n\n---Submit: Reminder: Yes---\n",
        "test": "assert solution(\u201c1001\u201d) == 0, \u201c1001\u201d is not a valid password",
        "num_ids": 2207
    },
    {
        "number": 4383,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    \n    for i in range(n):\n        if x[i]==7 or x[i]==11:\n            x[i]==3\n        elif x[i]==4 or x[i]==10:\n            x[i]==5\n        else:\n            x[i]==7\n    if x[n-1]==5:\n        x[n-1]==4\n        x[n-2]==2\n    elif x[n-1]==7:\n        x[n-1]==10\n        x[n-2]==2\n    elif x[n-1]==4:\n        x[n-1]==6\n        x[n-2]==3\n    else:\n        x[n-1]==3\n        x[n-2]==3\n        x[n-3]==7\n    return 'YES' if sum(x)==0 else 'NO'",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 422
    },
    {
        "number": 4384,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 1999:\n        return 'ABC'\n    else:\n        return f'{N%100}'\n\ndef",
        "test": "assert solution(solution) == \"ABC\", 'incorrect solution'",
        "num_ids": 1826
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    distance = []\n    res = []\n    for line in stdin:\n        k = int(line.strip('\\n'))\n        for i in range(k, k+4):\n            distance.append(i)\n    for i in distance:\n        res.append(i)\n    return ','.join(res)\n\n2.44.2\n\n### \u8003\u8651\u62c6\u5206\n",
        "test": "assert solution([\"1\", \"2\", \"4\", \"8\", \"9\", \"15\"]) == \"Yay!\"",
        "num_ids": 970
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    if l < 10 or l > 10001:\n        return'red'\n    if stdin[l - 10:l]!= 'pink':\n        return'red'\n    if l == 10001:\n        return'red'\n    return solution(stdin[0:l - 10]) + 'pink'\n\ndef",
        "test": "assert solution(3201) == \"red\"",
        "num_ids": 260
    },
    {
        "number": 4387,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int,stdin.split()))\n    if x[0]>x[1]:\n        return 'ABC'\n    elif x[0]<x[1]:\n        return 'ARC'\n    else:\n        return 'AGC'\n",
        "test": "assert solution(6, 6) == \"ARC\"",
        "num_ids": 253
    },
    {
        "number": 4388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 9999:\n        return \"Error\"\n    a = \"9\"*(n//10)\n    b = \"1\" * (n%10)\n    a = int(a)\n    b = int(b)\n    for i in range(a, b+1):\n        print(i,end=\"\")\n    return \"\".join(map(str, list(range(a, b+1))))\n\n\ndef",
        "test": "assert solution(stdin) == '918'",
        "num_ids": 483
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    # O(t)\n    def is_valid(s):\n        for i in range(len(s)):\n            c = s[i]\n            if c.isalpha():\n                if c not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n                    return False\n        return True\n\n    # O(t)\n    def solve(string, n):\n        s = set()\n        for i in range(n):\n            s.add(string[i])\n            s.update(string[i+1:i+1+n])\n        return ''.join(s)\n\n    for t in range(int(stdin.strip())):\n        stdin = stdin.strip().split()\n        if t==0:\n            s = ''.join(stdin)\n            print(s)\n        elif t==1:\n            b = ''.join(stdin)\n            print(solve(b, len(s)))\n        else:\n            print('#%d'%t, solution(stdin[0]))\n",
        "test": "assert solution(stdin) == \"ac\"",
        "num_ids": 791
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Initialization\n    n = int(stdin)\n    numbers = [int(x) for x in stdin.split()]\n    numbers.sort()\n    move = 0\n    \n    # Test\n    for i in range(n):\n        if numbers[i] % 2!= 0:\n            move += 2\n    \n    # Return\n    return str(move)\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= a, b <= 10^9\n'''",
        "test": "assert solution(stdin) == 4",
        "num_ids": 426
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().split()[0])\n    res = float('inf')\n    seg = [0] * n\n    seg[0] = 1\n    for i in range(n-1):\n        for j in range(i+1,n):\n            seg[j] = max(seg[j], seg[i] + seg[j])\n    for i in range(k-1):\n        if res > (seg[i] * seg[i+1]):\n            res = (seg[i] * seg[i+1])\n    return str(res)\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == '2.666666666666667'",
        "num_ids": 454
    },
    {
        "number": 4392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    n,m=map(int,stdin.split())\n    for _ in range(n):\n        a.append(int(stdin.split()[_][0]))\n    a = sorted(a)\n    for i in range(m):\n        temp=a[i]+1\n        if temp<=n:\n            a[temp]=a[i]\n        else:\n            return \"NO\"\n    \n    return \"YES\"\n",
        "test": "assert solution(\"2 3\") == \"NO\"",
        "num_ids": 937
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    result = \"\"\n    for i in range(len(string)):\n        for j in range(i, len(string), 2):\n            result += string[j]\n    print(result)\nsolution(stdin)\n",
        "test": "assert solution(\"aaa\") == \"a\"",
        "num_ids": 313
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N + 1)]\n    for i in range(M):\n        u, v, w = map(int, stdin.split())\n        graph[u].append([v, w])\n    \n    s = set()\n    for i in range(N + 1):\n        s.add(i)\n        s.update(graph[i])\n    \n    d = [10 ** 9] * (N + 1)\n    d[1] = 0\n    for i in range(N + 1):\n        d[i] = abs(graph[i].index(min(graph[i])) - 1)\n        \n    d[1] = -1\n    \n    for i in range(2, N + 1):\n        d[i] = min(d[i - 1], d[i - 2]) + 1\n        \n    for i in range(1, N + 1):\n        d[i] = min(d[i], d[i - 1]) + 1\n    \n    for i in range(2, N + 1):\n        for j in range(1, N + 1):\n            if j == 1 or j == i:\n                continue\n            d[i] = min(d[i], d[j] + d[i - 1] + 1)\n    \n    return str(d[N] - 1)\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n0 <= N <= 10^5\n0 <= M <= 10^5\n0 <= u, v, w <= 1\n\n1 <= u <= N\n1 <= v <= N\n1 <= w <= 10^9\n\nExample 1:\nInput:\n2 10\n2 5\n4 2\n1 1\n\nOutput:\n3\n\nExample 2:\nInput:\n1 0\n2 1\n4 3\n4 1\n\nOutput:\n3\n\nExample 3:\nInput:\n3 2\n1 3\n1 1\n\nOutput:\n1\n\n\n-----Constraints-----\n\n1 <= N <= 10^5\n0 <= M <= 10^5\n\n0 <= u, v, w <= 1\n\n0 <= u, v, w <= N\n\n-----Tags-----\nLeetcode\n\n--------\n\n#####\n\nThe weight of an edge is $w_i$. For example, $w_i = 1$, $u_i = 2$, $v_i = 3$ and $w_i = 4$.\n\nThe graph is connected, i. e. for any pair of vertices, there is at least one path between them consisting of edges of the given graph.\n\nThere is no edge in the graph with the same u and v; there is no edge between u and v and there is no edge between u and v and there is no edge between u and v.\n\nThe graph is connected, i. e. for any pair of vertices, there is at least one path between them consisting of edges of the given graph.\n\nThe graph is unweighted (unconnected), i. e. for any vertex $u$, there is no path between $u$ and any other vertex.\n\nThe graph is weighted, i. e. for any edge $u_{i}, v_{i}$ has $u_{i} \\leq v_{i}$, and $v_{i} \\leq u_{i}.\n\nThe graph is connected, i. e. for any vertex $u$, there is at least one path between $u$ and $u$ and $v_{i} \\leq v_{i}$.\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nclass Graph():\n    def __init__(self, vertices):\n        self.vertices = vertices\n        self.graph = defaultdict(list)\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append([v, w])\n\n    def connected_vertices(self):\n        return set([u for u in self.graph.keys() if u in self.graph.values()])\n\n    def all_vertices(self):\n        return set([u for u in self.graph])\n\n    def connected_components(self):\n        visited = set([u for u in self.graph])\n        components = set([u for u in self.graph.keys()])\n        def find_components(u, visited):\n            for v in self.graph[u]:\n                if v[0] not in visited:\n                    visited.add(v[0])\n                    find_components(v[0], visited)\n            return visited\n        return list(find_components(u, visited))\n\ndef",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 1726
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = ''.join(stdin.split('\\n')[1:])\n    s = s.split(' ')\n    # print(n, s)\n    \n    \n    \n    def get_unique(d, key):\n        if key not in d:\n            d[key] = 1\n            return 1\n        return d[key]\n    \n    \n    def add_to_dict(d, key, num):\n        d[key] = num\n    \n    \n    def get_lamp(s, i):\n        if s[i] == 'R':\n            return 'r'\n        elif s[i] == 'G':\n            return 'g'\n        elif s[i] == 'B':\n            return 'b'\n        else:\n            return 'c'\n    \n    \n    \n    d = {}\n    for i in range(n):\n        d[s[i]] = 0\n    \n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num = get_unique(d, s[i])\n            num_l = get_lamp(s[j], i)\n            num_r = get_lamp(s[j], j)\n            d[s[j]] = min(num, num_l, num_r)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution(sys.stdin.readline()) == '3'",
        "num_ids": 1876
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    l = sorted([int(x) for x in stdin.split()], reverse=True)\n    \n    ans = 0\n    pre = l[0]\n    for i in range(1, n):\n        if i % l[i] == 0:\n            pre = pre*(i+1)//l[i]\n        else:\n            pre = pre*(i+1)//l[i]\n        ans = max(ans, pre)\n    \n    return str(ans)\n\"\"\"\n\ndef",
        "test": "assert solution(\"2\") == \"0.10000000\"",
        "num_ids": 2335
    },
    {
        "number": 4397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  \n  #return solution(stdin, \"2 3\")\n  \n  \ndef",
        "test": "assert solution(1) == \"2\"",
        "num_ids": 305
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    line = list(stdin.strip().split())\n    return \"\".join(line[0][line.index(line[0])+1:])",
        "test": "assert solution([\"ip\", \"cc\", \"p\"]) == \"ipcp\"",
        "num_ids": 423
    },
    {
        "number": 4399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    m = len(stdin)\n    answer = []\n\n    for i in range(m):\n        companyA, companyB = stdin[i].split(' ')\n        companies = []\n        for j in range(len(companyA)):\n            companies.append(companyA[j])\n            companies.append(companyB[j])\n        if 'A' in companies:\n            companies.remove('A')\n        if 'B' in companies:\n            companies.remove('B')\n        if 'C' in companies:\n            companies.remove('C')\n\n        companies = list(set(companies))\n\n        for k in range(len(companies)):\n            for j in range(len(companies)):\n                for z in range(len(companies)):\n                    if companies[z] == companies[j]:\n                        companies[z] = 'A' if companies[z] == 'B' else 'B'\n                        break\n        if 'A' in companies and 'B' in companies:\n            companies.remove('A')\n        if 'B' in companies and 'C' in companies:\n            companies.remove('B')\n\n        companies = list(set(companies))\n\n        for p in range(len(companies)):\n            for q in range(p + 1, len(companies)):\n                if companies[p]!= companies[q]:\n                    companies[p] = 'A' if companies[p] == 'B' else 'B'\n                    companies[q] = 'B' if companies[q] == 'A' else 'A'\n                    break\n\n        companies = list(set(companies))\n\n        for j in range(len(companies)):\n            companies[j] = companies[j].upper()\n\n        for j in range(len(companies)):\n            if companies[j] == 'A':\n                companies[j] = 'B'\n            if companies[j] == 'B':\n                companies[j] = 'A'\n\n        companies = list(set(companies))\n\n        for i in range(len(companies)):\n            if companies[i] == 'A':\n                companies[i] = 'B'\n            if companies[i] == 'B':\n                companies[i] = 'A'\n\n        for k in range(len(companies)):\n            companies[k] = companies[k].upper()\n        companies = list(set(companies))\n\n        companies = sorted(companies)\n        if len(companies) >= 2:\n            for z in range(len(companies) - 1):\n                if companies[z]!= companies[z + 1]:\n                    answer.append('No')\n                    break\n        else:\n            answer.append('Yes')\n    return ''.join(answer)\n",
        "test": "assert solution(input()) == \"No\"",
        "num_ids": 1230
    },
    {
        "number": 4400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    days_in_period = 0\n    for _ in range(len(stdin)):\n        s = stdin[_]\n        if s == 'R':\n            days += 1\n        elif s == 'S':\n            days -= 1\n        days_in_period += days\n    return str(days_in_period)\n\ndef",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 369
    },
    {
        "number": 4401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    X,Y,Z=map(int,stdin.split())\n    A=[X,Y,Z]\n    B=[X,Z,Y]\n    C=[Y,X,Z]\n    res=[]\n    for i in range(3):\n        res.append(A[i]+B[i]+C[i])\n    print(res)\n    return \"\".join(str(x) for x in res)",
        "test": "assert solution(",
        "num_ids": 286
    },
    {
        "number": 4402,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % 2!= 0 or B % 2!= 0:\n        return '0'\n    \n    c = 1\n    if A == 13:\n        c += B * 1.5\n    else:\n        c += B * 2\n    \n    if A % 4 == 0 or A % 4 == 0 and A % 100 == 0:\n        c += B * 2\n    \n    c += B * 0.5\n    \n    return str(c)\n",
        "test": "assert solution(input()) == \"100\"",
        "num_ids": 2080
    },
    {
        "number": 4403,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # initial value\n    S = 0\n    # input list\n    S_list = list(stdin)\n    for S_string in S_list:\n        # string\n        S = S_string\n        # list of symbols\n        S_list = list(S)\n        # print the list\n        print(S_list)\n        # print the string\n        print(S_string)\n        # delete the - or +\n        S_list = list(S_string)\n        for i in range(len(S_list)):\n            if S_list[i] == \"-\":\n                S_list[i] = \"+\"\n            else:\n                S_list[i] = \"- \"\n        print(S_list)\n        # and it is immutable\n        S_string = \"\".join(S_list)\n        # add the + or -\n        S_list = list(S_string)\n        for i in range(len(S_list)):\n            if S_list[i] == \"+\":\n                S_list[i] = \"-\"\n            else:\n                S_list[i] = \"+ \"\n        print(S_list)\n        # put the + to the end\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # and it is immutable\n        S_string = \"\".join(S_list)\n        # print the string\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list[-1] = S_list[-1]\n        print(S_list)\n        # and it is immutable\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # insert the + to the front\n        S_list = list(S_string)\n        S_list.insert(0, S_list[0])\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop(0)\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # insert the + to the end\n        S_list = list(S_string)\n        S_list.insert(len(S_list), S_list[0])\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # and it is immutable\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_string = \"\".join(S_list)\n        print(S_string)\n        # delete the + or -\n        S_list = list(S_string)\n        S_list.pop()\n        S_",
        "test": "assert solution('5') == 5",
        "num_ids": 3439
    },
    {
        "number": 4404,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    date = []\n    for i in stdin:\n        date.append(i)\n        \n    date.sort()\n    \n    for i in range(len(date)):\n        if date[i]!= '.' and date[i]!= '-':\n            return date[i]\n        elif date[i] == '.' or date[i] == '-':\n            continue\n        else:\n            return 'Error'",
        "test": "assert solution(\"April 30, 2019, 1/1/2017\") == \"TBD\"",
        "num_ids": 829
    },
    {
        "number": 4405,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problem = [int(s) for s in stdin.split()]\n    a = set(problem)\n    print(max(a))\n    return''.join(str(s) for s in a)\n",
        "test": "assert solution(\"14\") == \"14\"",
        "num_ids": 507
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    k = int(stdin[1])\n    lines = [int(line) for line in stdin[2].split()]\n    conversations = []\n    for line in lines:\n        if line in conversations:\n            continue\n        conversations.append(line)\n    conversations = sorted(conversations)\n    result = 0\n    while len(conversations) >= k:\n        for i in range(len(conversations) - 1):\n            if conversations[i] == conversations[i + 1]:\n                conversations.pop(i)\n                conversations.pop(i)\n                break\n    for c in conversations:\n        result += 1\n    return str(result)\n    \nInput\n10 4\n2 3 3 1 1 2 1 2 3 3\n\nOutput\n3\n3 1\n\nInput\n10 4\n2 3 3 1 1 2 1 2 3 3\n\nOutput\n3\n2 3\n\nInput\n10 4\n2 3 3 1 1 2 1 2 3 3\n\nOutput\n3\n1 3\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert solution(\"10 4\") == \"1 3 3 2\"",
        "num_ids": 1608
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    print(polycarp_coin(n, a_list, q))\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 581
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c_t = map(int, stdin.split())\n    f_t = map(int, stdin.split())\n    h_t = map(int, stdin.split())\n\n    c_t = set(c_t)\n    f_t = set(f_t)\n    h_t = set(h_t)\n\n    card_dist = {}\n    for t in range(2):\n        for j in range(k):\n            num = c_t.pop() if j % 2 == 0 else c_t.pop()\n            card_dist[num] = card_dist.get(num, 0) + 1\n\n    for t in range(2):\n        for j in range(k):\n            num = f_t.pop() if j % 2 == 0 else f_t.pop()\n            card_dist[num] = card_dist.get(num, 0) - 1\n\n    max_count = max(card_dist.values())\n\n    if max_count == 0:\n        return \"0\"\n    elif max_count == 1:\n        return \"1\"\n    else:\n        return \"1\" + str(max_count)\n\n-----Solution-----\n\ndef",
        "test": "assert solution(\"3 3\") == \"0\"",
        "num_ids": 692
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a_list = list(map(int, input().split()))\n    a_list.sort()\n    \n    min_ops = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            a_i = a_list[i]\n            a_j = a_list[j]\n            \n            i_p = a_i - j_p\n            j_p = a_j - i_p\n            \n            min_ops += 2 ** (j-i+1) * (i_p * j_p)\n            \n            if min_ops >= 10**18:\n                print(min_ops)\n                return 'No'\n    print(min_ops)\n    return 'Yes'\n\nfor _ in range(int(input())):\n    print(solution(input()))",
        "test": "assert solution == solution('3 8 10') == '2 2 1'",
        "num_ids": 781
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.strip().split())\n    l = list(map(int, stdin.strip().split()))\n    \n    def find_max_table(n: int, k: int, table: list) -> int:\n        table = [0 for i in range(n)]\n        for i in range(n):\n            if table[i] <= k:\n                table[i] += 1\n            else:\n                table[i] = 1\n        for i in range(n):\n            if table[i] <= k:\n                table[i] = 1\n        return table[k - 1]\n    \n    \n    def find_max_table2(n: int, k: int, table: list) -> int:\n        table = [0 for i in range(n)]\n        for i in range(n):\n            if table[i] <= k:\n                table[i] += 1\n            else:\n                table[i] = 1\n        return max(table[k - 1:])\n    \n    # print(l)\n    # print(n,k)\n    # print(find_max_table(n,k,l))\n    # print(find_max_table2(n,k,l))\n    return find_max_table(n,k,l)\n\nPrint(solution(stdin))",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 572
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    if len(p)!= n:\n        return 'not found'\n    p.sort()\n    answer = 0\n    # n is a set\n    intersection = set(p)\n\n    # n-1 is a list\n    for i in range(n-1):\n        if p[i] in intersection:\n            intersection.remove(p[i])\n        else:\n            answer += 1\n\n    return answer\n",
        "test": "assert solution('1 2 1 2 3 4 5 6 7 8 9') == '1 4 3 5 6'",
        "num_ids": 1968
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n\n    ans = [0 for i in range(n)]\n    ans[0] = max(a[1:] + a[:1])\n    ans[1] = max(a[2:] + a[:2])\n    ans[2] = max(a[3:] + a[:3])\n    ans[3] = max(a[4:] + a[:4])\n    for i in range(4, n):\n        ans[i] = max(ans[i-1], ans[i-3] + a[i-1])\n\n    return str(ans[n-1])\n\n-----Solution-----\nfor _ in range(int(input())):\n    n, a, b = map(int, input().split())\n    if n==b+1:\n        print(0)\n    else:\n        print(max(a[a%n]+b, b))\n        print(max(a[a%n]+b+a[a%n+1]+b, a[a%n]+b+a[a%n+2]+b, a[a%n]+b+a[a%n+3]+b))\n",
        "test": "assert solution('3 4 6') == 10",
        "num_ids": 666
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(int(stdin.rstrip()))\n    def solve(n, a):\n        if n == 0:\n            return ''.join(map(str, a))\n        if n == 1:\n            return a[0]\n        if len(a) <= 2:\n            return max(a)\n        for i in range(1, len(a)):\n            if a[i] < a[i - 1]:\n                return solve(n - 1, a[:i])\n            if a[i] >= a[i - 1]:\n                return a[i]\n    return str(solve(q, a))\n\nExample\n\nInput\n4\n5\n1 6 3\n1 2 5 99 100\n1\n8\n2 7 6\n1 6 10\n3 4 9 100\n1 2 1 99 100\n1\n1\n\nOutput\n3\n1\n4\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 739
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(c) for c in stdin.split()]\n    a = sorted(a)\n    # a = sorted(a)\n    n = min(a)\n    b = [0]*(n+1)\n    for i in range(n+1):\n        b[i] = 0\n    # b[0] = 0\n    # b[n] = 0\n    for i in range(1,n+1):\n        b[i] = b[i-1] + a[i]\n    # for i in range(n, 0, -1):\n    #     b[i] = b[i-1] + a[i]\n    print(b)\n    if k == 1:\n        return \"YES\"\n    else:\n        print(b)\n        return \"NO\"\n        \n    \n    \n",
        "test": "assert solution(1) == 'YES', \"1 is not in solution\"",
        "num_ids": 519
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    a = list(map(int, stdin.split(' ')))\n    inc_1 = sorted(a[:n])\n    dec_1 = sorted(a[n:])\n    inc_2 = sorted(a[:n])\n    dec_2 = sorted(a[n:])\n    inc_3 = sorted(a[:n])\n    dec_3 = sorted(a[n:])\n    inc_4 = sorted(a[:n])\n    dec_4 = sorted(a[n:])\n    inc_5 = sorted(a[:n])\n    dec_5 = sorted(a[n:])\n    inc_6 = sorted(a[:n])\n    dec_6 = sorted(a[n:])\n    print(\"YES\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"6\")\n    print(\"7\")\n    print(\"\")\n    print(\"0\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"6\")\n    print(\"7\")\n    print(\"\")\n    print(\"YES\")\n    print(inc_1)\n    print(\"2\")\n    print(inc_2)\n    print(\"3\")\n    print(inc_3)\n    print(\"4\")\n    print(inc_4)\n    print(\"5\")\n    print(inc_5)\n    print(\"6\")\n    print(inc_6)\n    print(\"7\")\n    print(dec_1)\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"6\")\n    print(\"7\")\n    print(\"\")\n    print(\"NO\")\n    print(\"2\")\n    print(inc_1)\n    print(inc_2)\n    print(inc_3)\n    print(inc_4)\n    print(inc_5)\n    print(inc_6)\n    print(dec_1)\n    print(\"2\")\n    print(dec_2)\n    print(dec_3)\n    print(dec_4)\n    print(dec_5)\n    print(dec_6)\n    print(\"7\")\n    print(\"\")\n    print(\"YES\")\n    print(inc_1)\n    print(inc_2)\n    print(inc_3)\n    print(inc_4)\n    print(inc_5)\n    print(inc_6)\n    print(dec_1)\n    print(dec_2)\n    print(dec_3)\n    print(dec_4)\n    print(dec_5)\n    print(dec_6)\n    print(\"7\")\n    print(\"\")\n    print(\"YES\")\n    print(inc_1)\n    print(inc_2)\n    print(inc_3)\n    print(inc_4)\n    print(inc_5)\n    print(inc_6)\n    print(dec_1)\n    print(dec_2)\n    print(dec_3)\n    print(dec_4)\n    print(dec_5)\n    print(dec_6)\n    print(\"7\")\n    print(\"\")\n    print(\"NO\")\n    print(inc_1)\n    print(inc_2)\n    print(inc_3)\n    print(inc_4)\n    print(inc_5)\n    print(inc_6)\n    print(dec_1)\n    print(dec_2)\n    print(dec_3)\n    print(dec_4)\n    print(dec_5)\n    print(dec_6)\n    print(\"7\")\n    print(\"\")\n    print(\"NO\")\n    print(inc_1)\n    print(inc_2)\n    print(inc_3)\n    print(inc_4)\n    print(inc_5)\n    print(inc_6)\n    print(dec_1)\n    print(dec_2)\n    print(dec_3)\n    print(dec_4)\n    print(dec_5)\n    print(dec_6)\n    print(\"7\")\n    print(\"\")\n    print(\"YES\")\n    print(inc_1)\n    print(inc_2)\n    print(inc_3)\n    print(inc_4)\n    print(inc_5)\n    print(inc_6)\n    print(dec_1)\n    print(dec_2)\n    print(dec_3)\n    print(dec_4)\n    print(dec_5)\n    print(dec_6)\n    print(\"7\")\n    print(\"\")\n    print(\"NO\")\n    print(inc_1)\n    print(inc_2)\n    print(inc_3)",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 1669
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def read_book_time(books):\n        books_time = []\n        for i in range(len(books)):\n            books_time.append(0)\n        for i in range(len(books)):\n            books_time[i] = int(books[i])\n        return books_time\n    \n    def get_books_time(books_time):\n        books_time.sort()\n        result = []\n        for i in range(len(books_time)):\n            result.append(books_time[i])\n        return result\n    \n    def get_books(books_time, books):\n        result = []\n        for i in range(len(books_time)):\n            result.append(books[i] + books_time[i])\n        return result\n    \n    book_time = read_book_time(stdin)\n    book_time_books = get_books_time(book_time)\n    book_time_books.sort()\n    book_time_books.append(0)\n    book_time_books = get_books_time(book_time_books)\n    book_time_books.sort()\n    book_time_books.append(0)\n    book_time_books = get_books_time(book_time_books)\n    book_time_books.sort()\n    book_time_books.append(0)\n    book_time_books = get_books_time(book_time_books)\n    book_time_books.sort()\n    book_time_books.append(0)\n    book_time_books = get_books_time(book_time_books)\n    book_time_books.sort()\n    book_time_books.append(0)\n    book_time_books = get_books_time(book_time_books)\n    book_time_books.sort()\n    book_time_books.append(0)\n    return get_books(book_time_books, book_time)\n",
        "test": "assert solution(stdin) == -1",
        "num_ids": 914
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    price_a_1 = int(stdin.split()[1])\n    price_a_2 = int(stdin.split()[2])\n    prices_a = [int(price) for price in stdin.split()[3:]]\n    prices_b = [int(price) for price in stdin.split()[4:]]\n    \n    possible_price = []\n    for price_a in prices_a:\n        if price_a_1 <= price_a and price_a_2 <= price_a:\n            possible_price.append(price_a)\n    \n    answer = -1\n    if len(possible_price) == 1:\n        answer = possible_price[0]\n    elif len(possible_price) > 2:\n        possible_price = sorted(possible_price, key = lambda x: x - min(possible_price[:-1]))\n        answer = possible_price[-2]\n    else:\n        answer = -1\n    return str(answer)\n\ndef",
        "test": "assert solution(\"4 1 1 2 3 2\") == \"2\"",
        "num_ids": 502
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    n = len(arr)\n    \n    count = 1\n    \n    while n > 1:\n        if arr[n//2] % 6!= 0:\n            count += 1\n        else:\n            if count > 0:\n                count -= 1\n                arr.pop(n//2)\n            else:\n                break\n        n -= 1\n        \n    return len(arr) - count\n    \n",
        "test": "assert solution(stdin) == 3, \"Wrong output\"",
        "num_ids": 416
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(stdin[i] + stdin[i+1] + stdin[i+2] for i in range(len(stdin)-2)))\n\nprint(solution(stdin))\n",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 516
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_sum, res = 0, 0\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    \n    for i in range(1, 2501):\n        sum = 0\n        for j in range(1, i+1):\n            sum += num_list[j]\n        if num_sum <= sum:\n            num_sum = sum\n        else:\n            num_sum = sum\n    \n    \n    \n    for i in range(1, len(stdin)):\n        \n        for j in range(1, i+1):\n            num_sum = num_sum + num_list[j]\n        \n        if num_sum > stdin[i]:\n            num_sum = stdin[i]\n        else:\n            continue\n        \n        res += num_sum\n    \n    \n    return str(res)",
        "test": "assert solution(inp) == '12339'",
        "num_ids": 613
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return max(map(lambda x: max(map(lambda y: sum(map(lambda z: z * k, y)), x)), [list(map(int, input().split())) for _ in range(n)]))\n\nprint(solution(input()))\n",
        "test": "assert solution(",
        "num_ids": 369
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    if len(input)!= 2:\n        return ''\n    if int(input[1]) <= 0 or int(input[1]) > len(input[0]):\n        return ''\n    if int(input[1]) == 1:\n        return input[0].lower() + input[2]\n    else:\n        return input[0].lower() + input[1] + input[2]\n",
        "test": "assert solution('ABC') == 'aBC', 'incorrect answer'",
        "num_ids": 458
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    n = int(stdin.strip().split()[0])\n    numbers = collections.deque()\n    for i in range(n):\n        numbers.append(int(stdin.strip().split()[i+1]))\n    result = \"\"\n    for i in range(n-1):\n        if numbers[i] > numbers[i+1]:\n            result += str(i+1) + \" \"\n            numbers.popleft()\n            numbers.append(numbers[0])\n        elif numbers[i] < numbers[i+1]:\n            result += str(numbers[0]) + \" \"\n            numbers.popleft()\n            numbers.append(numbers[0])\n    return result.strip()\n\ndef",
        "test": "assert solution(",
        "num_ids": 579
    },
    {
        "number": 4424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(3, 500) == \"Yes\"",
        "num_ids": 236
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n    n = 1\n    for _ in range(N):\n        n *= 2\n        n += 1\n    prob = ((1 / n) * (1 / n) * (1 / n)) + ((1 / n) * (1 / n) * (1 / n))\n    return str(prob)",
        "test": "assert solution('5 2') == '0.6666666666666666'",
        "num_ids": 296
    },
    {
        "number": 4426,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    day = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day.sort()\n    day = str(day[0]) + str(day[1]) + str(day[2])\n    answer = 0\n    for s in stdin:\n        if s == 'S':\n            answer += 1\n    return str(answer)",
        "test": "assert solution([\"SUN\", \"TUE\", \"WED\", \"THU\", \"SAT\", \"SUN\"]) == \"0\"",
        "num_ids": 391
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    x = sorted(x)\n    x.insert(0, 1)\n    x.append(x[-1])\n    res = []\n    for i in range(len(x) - 1):\n        if x[i] - x[i + 1] >= 2:\n            res.append(x[i] - x[i + 1])\n    return '\\n'.join(map(str, res))\n\n\nprint(solution(\"4 10 20\"))\n\ndef",
        "test": "assert solution(input()) == \"30\"",
        "num_ids": 2079
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.split('\\n')[0].split()]\n    m = max(l)\n    m_list = [list(map(int, str(l).split()))]\n    for i in range(len(l) - 1):\n        if sum(m_list[i]) > sum(m_list[i + 1]):\n            m = sum(m_list[i])\n            m_list[i] = m_list[i][:len(l) - 1]\n            m_list[i + 1] = m_list[i + 1][len(l) - 1:]\n            m_list[i + 1].append(m)\n        else:\n            m_list.append([l[i], l[i + 1]])\n    \n    for i in range(len(m_list)):\n        if sum(m_list[i]) == m:\n            if sum(m_list[i][1]) == m:\n                return '0'\n            else:\n                return '1'\n    \n    return '1'",
        "test": "assert solution(input) == \"5\"",
        "num_ids": 905
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split()[0])\n    x,y,z = map(int, stdin.strip().split())\n    a = set(map(int, stdin.strip().split()[1:]))\n    b,c = set(map(int, stdin.strip().split()[2:]))\n    if a.union(b,c):\n        return \"NO\"\n    if x in a:\n        print('YES')\n        print('max{0} {1}'.format(x,a.pop()))\n        return'max{0} {1}'.format(x,a.pop())\n    if y in a:\n        print('YES')\n        print('max{0} {1}'.format(y,a.pop()))\n        return'max{0} {1}'.format(y,a.pop())\n    if z in b:\n        print('YES')\n        print('max{0} {1}'.format(z,b.pop()))\n        return'max{0} {1}'.format(z,b.pop())\n    if x in b:\n        print('YES')\n        print('max{0} {1}'.format(x,b.pop()))\n        return'max{0} {1}'.format(x,b.pop())\n    if y in b:\n        print('YES')\n        print('max{0} {1}'.format(y,b.pop()))\n        return'max{0} {1}'.format(y,b.pop())\n    if z in c:\n        print('YES')\n        print('max{0} {1}'.format(z,c.pop()))\n        return'max{0} {1}'.format(z,c.pop())\n",
        "test": "assert solution(stdin), \"No solution\"",
        "num_ids": 800
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a = sorted(a, key=lambda x: x * (k // x))\n    if len(a) < n:\n        print(0)\n        return\n    if len(a) == n:\n        print(len(a))\n        return\n\n    count = 0\n    for i in range(1, n):\n        while count < m and a[i] * (k // a[i]) <= a[i-1]:\n            count += 1\n        if count >= m:\n            a[i] *= (k // a[i-1])\n            a[i-1] -= 1\n            count = 0\n    if len(a) >= n:\n        print(n)\n        return\n\n    a = [a[i] for i in range(n) if a[i] * (k // a[i]) <= a[i-1]]\n    a = sorted(a, key=lambda x: x * (k // x))\n    print(len(a))\n\n    return\n\n'''for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a = sorted(a, key=lambda x: x * (k // x))\n    if len(a) < n:\n        print(0)\n        continue\n    if len(a) == n:\n        print(len(a))\n        continue\n\n    count = 0\n    for i in range(1, n):\n        while count < m and a[i] * (k // a[i]) <= a[i-1]:\n            count += 1\n        if count >= m:\n            a[i] *= (k // a[i-1])\n            a[i-1] -= 1\n            count = 0\n    if len(a) >= n:\n        print(n)\n        continue\n    a = [a[i] for i in range(n) if a[i] * (k // a[i]) <= a[i-1]]\n    a = sorted(a, key=lambda x: x * (k // x))\n    print(len(a))'''",
        "test": "assert solution(input) == \"4\"",
        "num_ids": 997
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1:]\n    check = False\n    for i in range(1, len(s)+1):\n        if len(s[:i]) > k or len(s[i-1:]) > k:\n            check = True\n    if check:\n        print(len(s))\n    else:\n        print(0)\n\nsolution(stdin)\n\"\"\"",
        "test": "assert solution(stdin) == 12",
        "num_ids": 613
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    a_max = 0\n    for i in range(n):\n        a_max += a[i]\n    b_max = a_max + a_max\n    for i in range(1, n):\n        a_max += a[i]\n        a_max -= a[i - 1]\n        a_max += a[i]\n        a_max -= a[i - 1]\n        b_max += a_max\n        b_max -= a_max\n    a_max = b_max\n    answer = a_max\n    return str(answer)\n\nPrints the maximum sum of the maximum by size (length) alternating subsequence of the sequence $a$.",
        "test": "assert solution(5) == \"6\"",
        "num_ids": 585
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    \n    n -= 1\n    edges.sort()\n    for e in edges:\n        if e[0] == e[1]:\n            continue\n        if e[0] == n:\n            return \"2 1\"\n        if e[1] == n:\n            return \"3 4\"\n        if e[0] < e[1]:\n            return \"1 2\"\n        if e[1] < e[0]:\n            return \"3 2\"\n        \n",
        "test": "assert solution('1 3 2') == '1 3 2'",
        "num_ids": 451
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, input().strip().split())))\n    return str(n*(n+1)//2)\n\n-----Constraints-----\n1 <= t <= 200\n0 <= n <= 5^3\n0 <= n^2 <= 10^4\n\n-----Time Limit-----\n1 sec\n\n-----Example-----\nInput\n1\n1\n4\n5\n1\n2\n1\n\nOutput\n1\n6\n8\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == 20",
        "num_ids": 718
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        a[i] = a[i] & 1\n    for i in range(n - 1, -1, -1):\n        a[i] = a[i] & 1\n    j = 0\n    d = 0\n    for i in range(n):\n        d += a[i]\n        if d & 1:\n            j = max(j, i + 1)\n    print(j)\n    return str(j)\n\n-----Example-----\nInput\n3\n3 5 1 5 6 6 6 6 6\n5\n\nOutput\n3\n1\n\nExplanation\n3 is maximum possible jumping from position 3 and position 5.\n\n3 is maximum possible jumping from position 3 and position 5.\n5 is maximum possible jumping from position 5 and position 6.\n6 is maximum possible jumping from position 5 and position 6.\n6 is maximum possible jumping from position 6 and position 7.\n7 is maximum possible jumping from position 6 and position 7.\n6 is maximum possible jumping from position 7 and position 5.\n\nThe only one mistake is that we can not jump from position 6 and then to position 7.\nThe only two mistakes are that we can not jump from position 5 and then to position 6.\nThe only three mistakes are that we can not jump from position 5 and then to position 6.\nThe only four mistakes are that we can not jump from position 6 and then to position 7.\n\nThe only mistake is that we can not jump from position 7 and then to position 6.\n\nSo, we can not jump from position 5 and then to position 7.\n\nSo, we can not jump from position 6 and then to position 7.\n\nSo, we can not jump from position 7 and then to position 6.\n\"\"\"\n\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n        i = 0\n        j = 1\n        end = 0\n        while(i<len(nums) and j<len(nums)):\n            if end == j:\n                return 0\n            if nums[j] == nums[i]:\n                j += 1\n            if nums[i] == nums[j] == nums[end]:\n                end = j\n            else:\n                i += 1\n        return end",
        "test": "assert solution(stdin) == str(-1)",
        "num_ids": 1124
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, t, c = map(int, stdin.split())\n    # sorted() \ub294 \uc624\ub984\ucc28\uc21c \uc815\ub82c\uc774 \uc548 \ub418\uc5b4\uc57c \uae30\ubcf8\uc801\uc73c\ub85c \uc815\ub82c\uc2dc\ud0a4\uae30 \uc704\ud55c \uc54c\uace0\ub9ac\uc998\n    c = list(map(int, str(c)))\n    a, b, c = sorted(c)\n    for tt in range(t):\n        a2, b2, c2 = map(int, input().split())\n        print(solution(a, b, c, a2, b2, c2))\n    return 'NO'\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\uc120\ud0dd \uc810\uc218 \ub9cc\ub4e4\uae30 \ubb38\uc81c\n\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\nd = list(map(int, input().split()))\n\nresult = []\n\nfor i in range(n):\n    result.append(a[i] + b[i] + c[i] + d[i])\n\nprint(result)\n\nprint('YES') if sorted(result) == result else print('NO')\n\n\"\"\"\n\n\"\"\"\n\n\ucc28\ub840\ub300\ub85c \uad6c\ud558\ub294 \ubb38\uc81c\n\n\uc640 \uac19\uc774 \ub098\ub204\ub294 \uc810\uc218 \uad6c\ud558\uae30\n\n\"\"\"\n\na, b, c = map(int, input().split())\n\ndef",
        "test": "assert solution(int(input())) == 'YES'",
        "num_ids": 1298
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    string, n = input(), len(stdin)\n    a, b = n // 2, n % 2\n    answer = 0\n    for i in range(1, n + 1):\n        if string[i - 1] == string[i + b - 1]:\n            answer += 2\n        else:\n            if a!= b:\n                answer += 1\n            else:\n                answer += 2\n    return str(answer)\n",
        "test": "assert solution(",
        "num_ids": 721
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return 'The input is incorrect!'\n    n = n + 1\n    matrix = [list(map(int, stdin[i + 1:-1].split(' '))) for i in range(n)]\n    max_dist = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_dist = max(max_dist, abs(matrix[i][0] - matrix[j][0]) + abs(matrix[i][1] - matrix[j][1]))\n    return str(max_dist)\n\nThe description of the function is shown below.\n\nInput:\n2\n1 1\n2 3\n3 2\n\nOutput:\n15\n\nInput:\n1\n2\n\nOutput:\n6\n\nInput:\n1\n1 1\n2 2\n2 3\n\nOutput:\n2\n\nInput:\n2\n2 3\n1 3\n\nOutput:\n4\n\nInput:\n1 3\n1 1\n2 2\n3 2\n\nOutput:\n7\n\nInput:\n1 2\n3 2\n2 1\n\nOutput:\n3\n\nInput:\n4\n2 3\n1 3\n3 2\n\nOutput:\n3\n\nInput:\n1 2\n2 1\n1 0\n3 2\n\nOutput:\n2\n\nInput:\n1 2\n1 0\n1 3\n\nOutput:\n1\n\nExplanation\nMaksim wants to walk on the points of level 2, which he can do:   $(1, 0)$;  $(0, 1)$;  $(-1, 0)$;  $(0, -1)$\nhe can not walk any points because there is no key point that is on the line, the line is not a triangle.\n\nThe total distance he walks will be minimum possible: $|x_1 - x_2| + |y_1 - y_2|$ where $|v|$ is the absolute value of $v$.\n\nHence, for $i = 1, 2$ the total distance is: $|x_1 - x_2| + |y_1 - y_2|$ = 5\n\nHence, for $i = 1, 3$ the total distance is: $|x_1 - x_2| + |y_1 - y_2|$ = 5\n\nHence, for $i = 2, 3$ the total distance is: $|x_2 - x_1| + |y_1 - y_2|$ = 6\n\nHence, for $i = 3, 3$ the total distance is: $|x_2 - x_1| + |y_1 - y_2|$ = 6\n\nHence, for $i = 4, 3$ the total distance is: $|x_3 - x_1| + |y_1 - y_2|$ = 8\n\nHence, for $i = 5, 3$ the total distance is: $|x_3 - x_1| + |y_1 - y_2|$ = 9\n\nHence, for $i = 6, 3$ the total distance is: $|x_4 - x_1| + |y_1 - y_2|$ = 8\n\nHence, for $i = 7, 3$ the total distance is: $|x_4 - x_1| + |y_1 - y_2|$ = 9\n\nHence, for $i = 8, 3$ the total distance is: $|x_4 - x_1| + |y_1 - y_2|$ = 9\n\nHence, for $i = 9, 3$ the total distance is: $|x_4 - x_1| + |y_1 - y_2|$ = 9\n\nSo, for the total distance you should reach 10^9 if you have visited all the key points.\n\nInput:\n1 1\n2 3\n3 2\n\nOutput:\n9\n\nInput:\n3 1\n1 0\n3 2\n\nOutput:\n6\n\nInput:\n1 2\n1 1\n3 2\n\nOutput:\n2\n\nInput:\n2 2\n2 2\n2 3\n3 2\n\nOutput:\n4\n\nInput:\n1 3\n1 0\n2 3\n2 2\n\nOutput:\n1\n\nInput:\n1 1\n1 0\n2 2\n2 3\n3 2\n\nOutput:\n1\n\nInput:\n1 0\n1 0\n1 0\n1 1\n1 1\n1 1\n1 1\n1 1\n\nOutput:\n1\n\nInput:\n1 3\n1 3\n3 2\n3 2\n3 2\n\nOutput:\n2\n\nInput:\n2 2\n2 2\n2 3\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n3 2\n\nOutput:\n1\n'''\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1566
    },
    {
        "number": 4439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    i = 0\n    j = 0\n    k = 0\n    for line in stdin:\n        if i < 3 or i > 3:\n            j = 0\n        elif j < 2 or j > 2:\n            i = 0\n        elif j == 0:\n            k = 0\n        elif j == 1:\n            i = 1\n            k = 0\n        elif j == 2:\n            k = 1\n            i = 0\n        j += 1\n    if i == 3 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 3:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 2 and j == 1:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 1 and j == 3:\n        return \"2\"\n    elif i == 0 and j == 2:\n        return \"2\"\n    elif i == 0 and j == 3:\n        return \"2\"\n    elif i == 0 and j == 1:\n        return \"2\"\n    elif i == 1 and j == 0:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 1:\n        return \"2\"\n    elif i == 2 and j == 0:\n        return \"2\"\n    elif i == 2 and j == 3:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 3 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 0 and j == 1:\n        return \"2\"\n    elif i == 1 and j == 0:\n        return \"2\"\n    elif i == 2 and j == 0:\n        return \"2\"\n    elif i == 2 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 3 and j == 2:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 3:\n        return \"2\"\n    elif i == 2 and j == 1:\n        return \"2\"\n    elif i == 3 and j == 3:\n        return \"2\"\n    elif i == 0 and j == 3:\n        return \"2\"\n    elif i == 1 and j == 3:\n        return \"2\"\n    elif i == 2 and j == 3:\n        return \"2\"\n    elif i == 3 and j == 3:\n        return \"2\"\n    elif i == 0 and j == 1:\n        return \"2\"\n    elif i == 1 and j == 0:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 0:\n        return \"2\"\n    elif i == 2 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 3 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 0 and j == 2:\n        return \"2\"\n    elif i == 1 and j == 3:\n        return \"2\"\n    elif i == 2 and j == 3:\n        return \"2\"\n    elif i == 3 and j == 3:\n        return \"2\"\n    elif i == 0 and j == 3:\n        return \"2\"\n    elif i == 1 and j == 1:\n        return \"2\"\n    elif i == 2 and j == 1:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 0 and j == 0:\n        return \"2\"\n    elif i == 1 and j == 0:\n        return \"2\"\n    elif i == 2 and j == 0:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 0 and j == 2:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 2:\n        return \"2\"\n    elif i == 0 and j == 3:\n        return \"2\"\n    elif i == 1 and j == 3:\n        return \"2\"\n    elif i == 2 and j == 3:\n        return \"2\"\n    elif i == 3 and j == 3:\n        return \"2\"\n    elif i == 0 and j == 1:\n        return \"2\"\n    elif i == 1 and j == 0:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 0:\n        return \"2\"\n    elif i == 2 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 0 and j == 1:\n        return \"2\"\n    elif i == 1 and j == 1:\n        return \"2\"\n    elif i == 2 and j == 1:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 0 and j == 2:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 2:\n        return \"2\"\n    elif i == 0 and j == 3:\n        return \"2\"\n    elif i == 1 and j == 3:\n        return \"2\"\n    elif i == 2 and j == 3:\n        return \"2\"\n    elif i == 3 and j == 3:\n        return \"2\"\n    elif i == 0 and j == 1:\n        return \"2\"\n    elif i == 1 and j == 0:\n        return \"2\"\n    elif i == 1 and j == 2:\n        return \"2\"\n    elif i == 2 and j == 0:\n        return \"2\"\n    elif i == 2 and j == 2:\n        return \"2\"\n    elif i == 3 and j == 0:\n        return \"2\"\n    elif i == 3 and j == 1:\n        return \"2\"\n    elif i == 0 and j == 1:\n        return \"2\"\n    elif i == 1 and j == 1:\n        return \"",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 2134
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    input_list = list(map(int, stdin.split()))\n    for num in input_list:\n        print(max(num, num*num, num*num*num))\n\n--- Answer ---\n",
        "test": "assert solution(\"3\") == \"1.09\"",
        "num_ids": 2276
    },
    {
        "number": 4441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    int(input())\n    n = int(input())\n    a, b = map(int, input().split())\n    answer = str(a+b)\n    if n == 2:\n        answer = \"Hello World\"\n    elif n == 1:\n        answer = \"Hello World\"\n    else:\n        answer = answer + \" \" + str(a+b)\n    print(answer)\n    return answer",
        "test": "assert solution(input()) == \"A+B\"",
        "num_ids": 322
    },
    {
        "number": 4442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 10:\n        return str(n)\n    a = int(stdin.strip())\n    b = int(stdin.strip())\n    res = \"\"\n    while n:\n        temp = b % 10\n        a, b = b, a % 10\n        res = str(temp) + res\n    return res\n",
        "test": "assert solution('2') == '2'",
        "num_ids": 236
    },
    {
        "number": 4443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    while True:\n        c = stdin.pop(0)\n        if c not in alphabet:\n            return c\n",
        "test": "assert solution(\"c\") == \"d\", 'Error'",
        "num_ids": 264
    },
    {
        "number": 4444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  return stdin.strip()\n\n\"\"\"\n\ndef",
        "test": "assert solution(solution) == t, \"test case failed\"",
        "num_ids": 95
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    n = len(A)\n    if n == 0:\n        return '0'\n    k = 0\n    for i in range(n):\n        if k == 0:\n            k = A[i]\n        else:\n            if k % 2 == 0:\n                k = k - A[i]\n            else:\n                k = A[i] + A[i]\n    return str(k)\n\"\"\"\n\nclass Solution:\n    def minimumElements(self, a, n):\n        if n == 1:\n            return a[0]\n        return self.minimumElements(a[1:], n - 1) + a[0]\n\nn = int(input())\na = list(map(int, input().split()))\nprint(Solution().minimumElements(a, n))\n",
        "test": "assert solution(stdin) == 1, \"The solution is not correct\"",
        "num_ids": 347
    },
    {
        "number": 4446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    return str(min(n, (a+b+k)//2, k))\n",
        "test": "assert solution('1 1 100 99') == '1'",
        "num_ids": 880
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [0]*n\n    for i in range(m):\n        a[i] = int(stdin[i])\n    def divide(a,b):\n        c = b-a\n        if c==0:\n            return 0\n        return c%a\n    c = divide(a,n)\n    c = divide(a,c)\n    if c == 0:\n        return n\n    if c>0:\n        a[0:c] = a[c:n]\n    else:\n        a = a[1:]\n        a[0:c] = a[c:]\n    return''.join([str(i+1) for i in a])",
        "test": "assert solution(str(input())) == str(min(int(n / m) for n in range(1, int(input()) + 1) for m in range(0, int(input()) + 1)))",
        "num_ids": 496
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().split()[0])\n    j = int(stdin.strip().split()[1])\n    \n    types = [0] * (n - 1)\n    \n    for i in range(n):\n        types[i] = int(stdin.strip().split()[i + 1])\n        \n    k_i = k\n    min_day = 10 ** 9\n    \n    for i in range(n - 2):\n        type_j = types[i + 1] - types[i]\n        day_j = types[i + 2] - types[i]\n        if type_j == 0:\n            if k_i == 0:\n                if day_j > 0:\n                    k_i = k - day_j\n                    min_day = min(min_day, day_j)\n                else:\n                    k_i = k - day_j\n                    min_day = min(min_day, day_j)\n            else:\n                min_day = min(min_day, day_j)\n                k_i -= 1\n    \n    return str(min_day)",
        "test": "assert solution(",
        "num_ids": 677
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q, n = map(int, stdin.split())\n    if q == 1:\n        return str(n % 2 == 1)\n    if q == 2:\n        return \"NO\" if n % 2 == 1 else \"YES\"\n\n    a = n ** 4\n    s = set(map(int, stdin.split()))\n    for i in range(1, n + 1):\n        a -= (i * a)\n        if a <= 0:\n            return \"NO\"\n        if len(s) == a:\n            return \"YES\"\n    return \"NO\"\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 912
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arr = [[] for _ in range(n)]\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        arr[x].append((y, w))\n        arr[y].append((x, w))\n\n    for _ in range(k):\n        a, b = map(int, stdin.split())\n        if len(arr[a]) > len(arr[b]):\n            arr[b].append(a)\n        else:\n            arr[a].append(b)\n\n    ans = [len(arr[i]) for i in range(n)]\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if i!= j and ans[j] < ans[i] + 1:\n                ans[j] = ans[i] + 1\n    return '\\n'.join(str(i) for i in ans[::-1])\n\n-----Constraints-----\n1 <= k <= n <= 105\n0 <= stdin.length <= 105\n0 <= n, m, k <= 1 \\le n-1 <= 105\n\n-----EASY VERSION-----\nimport sys\n\nsys.setrecursionlimit(10**7)\n\nclass Solution:\n    def shortestPathLength(self, n: int, m: int, k: int) -> int:\n        dp = [0 for _ in range(n)]\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n):\n            dp[i] = dp[i - 2] + dp[i - 1]\n            for j in range(i - 2, -1, -1):\n                dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n - 1] % 1000000007\n\nprint(solution(6, 10, 5))\n",
        "test": "assert solution(\"5 3 9\") == 3",
        "num_ids": 860
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    res = ''\n    i = 1\n    while i <= n:\n        if a > 0:\n            k = a\n            a -= k\n        else:\n            k = a // 2\n            a -= k * 2\n        res += str(i) + str(k) + '\\n'\n        i += 1\n    return res[:-1]",
        "test": "assert solution('3 1 2 3 1 2') == '4'",
        "num_ids": 609
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    n = len(a)\n    if n < 2:\n        return \"\".join(str(n))\n    m = n - 1\n    m -= 1\n    m -= 1\n    for i in range(n - 2):\n        m -= 1\n        m -= 1\n        a[i] -= 1\n    a[m] += 1\n    answer = \"\"\n    k = 0\n    for i in range(n - 1, -1, -1):\n        if a[i]!= 0:\n            if a[i] == a[i - 1]:\n                answer += str(a[i])\n            else:\n                answer += str(a[i]) + str(a[i - 1])\n            k += 1\n    if k == 0:\n        answer += str(a[0])\n    return answer\n",
        "test": "assert solution(stdin) == (4,7,4000,4000,4000,4000)",
        "num_ids": 564
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    kid_list = []\n    kid_dict = {}\n    p_list = []\n    p_dict = {}\n    for i in range(n):\n        kid_dict[i+1] = list(map(int, stdin.split()))\n        p_dict[i+1] = [1]\n    for i in range(n-1):\n        kid_list.append(i+1)\n    for i in range(n-1):\n        p_list.append(list(map(int, stdin.split())))\n    print(kid_list, p_list)\n    for i in range(n-1):\n        for j in range(len(p_list[i])):\n            if p_list[i][j] not in kid_dict[p_list[i][j]]:\n                print(p_list[i][j], 'not in kid_dict[',p_list[i][j], ']')\n                return '0'\n    for i in range(n-1):\n        for j in range(len(p_list[i])):\n            for k in range(len(p_list[i+1])):\n                if p_list[i][j]!= p_list[i+1][k]:\n                    print(p_list[i][j], '!=', p_list[i+1][k], '!=', p_list[i+1][k], 'and', p_list[i][j], '!=', p_list[i+1][k])\n                    return '0'\n    for i in range(len(p_list[-1])):\n        print(p_list[-1][i], '=', kid_list[-1])\n    return '0'\n\nfor _ in range(int(input())):\n    p_list = []\n    n = int(input())\n    for i in range(n):\n        p_list.append(list(map(int, input().split())))\n    solution(p_list)",
        "test": "assert solution(stdin) == '1 1 1 1 1 1 1 1 1'",
        "num_ids": 858
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    for _ in range(n):\n        l.sort()\n        m = sum(l[-a:])\n        print(m)\n        if m < 0:\n            break\n        for _ in range(a):\n            if l[-1]!= l[-2]:\n                l.append(l.pop())\n                break\n    return ''.join(map(str, l))\n\nn, a = map(int, input().split())\na_list = list(map(int, input().split()))\nprint(sum(a_list[-a:]))",
        "test": "assert solution == 3",
        "num_ids": 726
    },
    {
        "number": 4455,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        lst.append(map(int, stdin.split()))\n    \n    for i in range(n-k):\n        a = list(lst[i])\n        b = list(lst[i+k])\n        a.sort()\n        b.sort()\n        if a == b:\n            return str(k)\n    return str(k)",
        "test": "assert solution(\"3 2\") == \"2\"",
        "num_ids": 436
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    \n    if sum(p)!= n or sum(q)!= k:\n        return \"NO\"\n    \n    s = [''] * n\n    \n    for i in p:\n        s[i - 1] += s[i]\n    \n    for i in q:\n        s[i - 1] += s[i]\n    \n    for i in range(n):\n        s[i] = s[i].lower()\n        \n    for i in range(n):\n        if not s[i].isalpha():\n            return \"NO\"\n    \n    print(\"YES\")\n    print(*s)\n    \n    \n    return \"YES\"\n",
        "test": "assert solution(2,1) == 'YES'",
        "num_ids": 730
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(stdin.split()[1])]\n    answer = ''\n    for i in range(n):\n        answer += str(a[i] * (i + 1) + a[i + 1])\n        a.append(a[i] * (i + 1) + a[i + 1])\n    answer += str(a[-1] * (n + 1))\n    return answer\n\n-----Constraints-----\n\n1 <= n <= 20\n1 <= a[i] <= 10^3\n\nSolution\nTime limit exceeded\n\nInput\n3\n10 20 20 20 20\n\nOutput\n43\n2 1 4 3 \n\nInput\n6\n5 4 5 4 4 5\n\nOutput\n69\n6 1 3 5 2 4 \n\nInput\n2\n1 4\n\nOutput\n3\n2 1 \n\nInput\n2\n2\n\nOutput\n1\n2\n",
        "test": "assert solution(\"5 4 5 4 4 5\") == \"64\"",
        "num_ids": 509
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int,stdin.split()[1:]))\n    p = set(p)\n    return str(sum(p))\n\ndef",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 224
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    global solution\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    for i in range(len(a)):\n        if a[i] == a[i-1] + 1:\n            a.pop(i)\n            a.insert(i, 0)\n    if len(a) == 0:\n        return \"\"\n    solution = max(a)\n    return str(solution)\n\"\"\"\nclass Solution:\n    def removeDuplicate(self, nums: List[int]) -> int:\n        \n        # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178\n        counts = defaultdict(int)\n        \n        # \u4f7f\u7528for\u5faa\u73af\u904d\u5386\u5217\u8868\n        for num in nums:\n            counts[num] += 1\n        \n        # \u6392\u5e8f\n        sort = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n        \n        # \u904d\u5386\u8ba1\u6570\uff0c\u82e5\u7b2c\u4e00\u4e2a\u503c\u4e3a0\uff0c\u5219\u5c06\u5176\u5220\u9664\n        while sort:\n            if sort[0][1] == 0:\n                sort.pop(0)\n            else:\n                break\n        \n        # \u8ba1\u6570\u548c\u6570\u7ec4\u957f\u5ea6\uff0c\u8ba1\u6570\u548c\u6570\u7ec4\u957f\u5ea6\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u503c\u4e3a0\n        return sum(sort)\n\"\"\"\n",
        "test": "assert solution(",
        "num_ids": 680
    },
    {
        "number": 4460,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n        nums=list(map(int,stdin.split(' ')))\n        nums.sort()\n        i=0\n        while(i<5):\n            if nums[i]==0:\n                print(nums[i])\n                break\n            i+=1\n        return '1'\n",
        "test": "assert solution(\"2 2 3 4 5\") == \"1\"",
        "num_ids": 272
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    H, W, S = map(int, stdin.split())\n    height, width = 0, 0\n    for _ in range(H):\n        height, width = map(int, input().split())\n    S = S // (width * height)\n    return str(S)\n\"\"\"\n\ndef",
        "test": "assert solution('6 4 5 4 5 5') == '3'",
        "num_ids": 2318
    },
    {
        "number": 4462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if Snuke(stdin[::-1]) else 'No'\n\ndef",
        "test": "assert solution(input) == \"Yes\"",
        "num_ids": 383
    },
    {
        "number": 4463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    A = []\n    B = []\n    for i in range(len(stdin)):\n        if stdin[i].isalpha():\n            A.append(stdin[i])\n        elif stdin[i].isdigit():\n            B.append(stdin[i])\n        else:\n            A.append(stdin[i].upper())\n            B.append(stdin[i].lower())\n    \n    x = set(A)\n    y = set(B)\n    \n    x = sorted(x)\n    y = sorted(y)\n    \n    if len(x) + len(y) == len(A) - len(B):\n        print('Yes')\n    else:\n        print('No')\n",
        "test": "assert solution(\"xyz\") == \"No\"",
        "num_ids": 734
    },
    {
        "number": 4464,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    if sum(nums) % B == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n----------------\nRuntime: 32 ms, faster than 91.81% of Python3 online submissions for Sum Congruent To C Modulo B.\nMemory Usage: 14.3 MB, less than 98.05% of Python3 online submissions for Sum Congruent To C Modulo B.\n\"\"\"\n\nclass Solution:\n    def sum_to_cmod_b(self, A: int, B: int, C: int) -> str:\n        if not (0 < A < B < C):\n            return 'NO'\n        if A % B!= 0 or A % C!= 0:\n            return 'NO'\n\n        return str(A % B) + str(A % C) + str(B % C)\n",
        "test": "assert solution(input()) == \"NO\"",
        "num_ids": 637
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # res = [0] * 100\n    # for line in stdin:\n    #     x, y = map(int, line.split())\n    #     res[x - 1] += y - 1\n    #     res[y - 1] -= x - 1\n    # return \"\".join(map(str, res))\n    return str(int(stdin) - 1)\n\nExplanation\n\nInput: A = 2, B = 2.\nOutput: 1\n\nInput: A = 1, B = 3.\nOutput: 1\n\nInput: A = 10, B = 100.\nOutput: 10\n\nInput: A = 3, B = 3.\nOutput: 1\n\nInput: A = 1, B = 1.\nOutput: 1\n\nInput: A = 10, B = 2.\nOutput: 2\n\nInput: A = 10, B = 1.\nOutput: 10\n\nInput: A = 10, B = 10.\nOutput: 1\n\n\"\"\"\nimport unittest\n\n\ndef",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 489
    },
    {
        "number": 4466,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2:\n        return 'We have a long seat of width X centimeters. There are many people who wants to sit here. A person sitting on the seat will always occupy an interval of length Y centimeters. We would like to sit as many people as possible, but they are all very shy, and there must be a gap of length at least Z centimeters between two people, and between the end of the seat and a person.\nThere are many people who wants to sit here. A person sitting on the seat will always occupy an interval of length Y centimeters.\n\nIf there is no gap between two people, there is no room for people.\nIf there is a gap between two people, there must be a person at the end of the seat.\nIf there is an odd number of people, there must be at least a person in the middle.\nIf there is an even number of people, there must be at least a person in the end of the seat.\n\nOutput:\nPrint the answer.\n\nExplanation:\nConstraints:\n1 <= X <= 10^5\n1 <= Y, Z <= 10^5\n\nInput:\nInput is given from Standard Input in the following format:\nX Y Z\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n1 2\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n3 4\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n9 9\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n5 7\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n1 1\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n1\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n1\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\n---Constraints---\n1 <= X <= 10^5\n1 <= Y <= 10^5\n1 <= Z <= 10^5\n\n1 <= Y+2Z <= X+2\n\nInput:\nInput is given from Standard Input in the following format:\n1\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n1\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n1\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n2\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n1\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n3\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n2\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\nInput:\nInput is given from Standard Input in the following format:\n3\n\nOutput:\nPrint the answer.\n\nExplanation:\nPrint the answer.\n\n---Constraints---\n1 <= X <= 10^5\n1 <= Y <= 10^5\n1 <= Z <= 10^5\n\n---Input---\nInput is given from standard input.\n\n\"\"\"\n",
        "test": "assert solution(\"1 3\") == \"1\"",
        "num_ids": 1282
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, K = map(int, stdin.split())\n    if len(set(map(int, stdin.split())))!= 1:\n        return -1\n    if (N-1)*(N-1) < B*D*C:\n        return -1\n    if (N-1)*(N-1) < A*B*D:\n        return -1\n    if (N-1)*(N-1) < (K-1)*(K-1):\n        return -1\n    return len(set(map(int, stdin.split())))",
        "test": "assert solution(\"3 3 0 2 3\") == 2",
        "num_ids": 501
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    t_i = 0\n    time = T\n    answer = 0\n    while time:\n        t_i += time\n        t_i %= N\n        answer += time\n        time -= t_i\n    print(answer)\n    return \"Not a lie\"\n\nprint(solution(input()))\n",
        "test": "assert solution(input) == \"7\"",
        "num_ids": 368
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # The following code snippet takes the input from the user and converts it to list\n    a, b, c = stdin.split(\"\\n\")\n    a = list(map(lambda x: int(x), a.split(\" \")))\n    b = list(map(lambda x: int(x), b.split(\" \")))\n    c = list(map(lambda x: int(x), c.split(\" \")))\n    # The following code snippet takes the input from the user and converts it to list\n    # The answer is the number of books that will be left on the shelf\n    n = list(map(lambda x: x - 1, a))\n    # The following code snippet takes the input from the user and converts it to list\n    # The answer is the minimum number of books that will be left on the shelf\n    m = list(map(lambda x: x + 1, b))\n    # The following code snippet takes the input from the user and converts it to list\n    # The answer is the minimum number of books that will be left on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books were placed on the shelf\n    # The answer is the smallest index the books",
        "test": "assert solution(stdin) == \"0\"",
        "num_ids": 2298
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    q = int(stdin.strip().split()[0])\n    for i in range(q):\n        \n        n = int(stdin.strip().split()[1])\n        \n        if n%2 == 0:\n            print(-1)\n        else:\n            print(3*(n//3)+(n//2))\n    return\n",
        "test": "assert solution(",
        "num_ids": 1873
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nExample:\n\nInput\n1\n100\n\nOutput\nNO\nYES\n\nExplanation\nThere are 4 test cases. The first test case is shown below.\n\n[Input]\n\n1\n100\n\n[Output]\n\nYES\nYES\n\n[Explain]\n\nThe last test case of the example field is shown below:\n\nExample:\n\nInput\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\nOutput\nNO\nNO\nNO\nNO\n\n'''\nimport math\n\n\ndef",
        "test": "assert solution(\"4\") == \"NO\"",
        "num_ids": 760
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(stdin.split(' '))\n    b = list(stdin.split(' '))\n    ans = 0\n    if n%2!= 0:\n        return str(n//2)+' '+solution(stdin)\n    for i in range(n//2):\n        a[i], b[i] = b[i], a[i]\n    for i in range(n//2, n):\n        a[i], b[n - i + 1] = b[n - i + 1], a[i]\n        ans += 1\n    return ans",
        "test": "assert solution('bacabaa') == '0'",
        "num_ids": 623
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    k = n // 10\n    jumps = n // 10\n    answer = []\n    \n    if n % 10 == 0:\n        answer.append(n % 10)\n        \n    for i in range(1, jumps + 1):\n        if i % 2 == 0:\n            answer.append(i)\n        else:\n            answer.append(i - 1)\n            \n    answer.append(k)\n    return str(sum(answer))\n\n-----OK",
        "test": "assert solution('4 4 3') == 6",
        "num_ids": 415
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, min(map(int, filter(lambda x: len(x) > 2, map(lambda x: list(map(int, str(x))), list(map(int, stdin.split()))))))))",
        "test": "assert solution(inp) == \"3\"",
        "num_ids": 343
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    if t < 1:\n        return \"1\"\n    elif t == 1:\n        return \"0\"\n    n = int(stdin[-1])\n    a = int(stdin[0])\n    b = int(stdin[1])\n    x = int(stdin[2])\n    y = int(stdin[3])\n    n = n * n\n    \n    prod = x * y\n    \n    if a >= x and b >= y:\n        return min(a * prod, b * prod, prod)\n    else:\n        return prod",
        "test": "assert solution(stdin) == \"77\"",
        "num_ids": 1071
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n'''\n'''\ndef",
        "test": "assert solution(stdin) == 3",
        "num_ids": 230
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - int(stdin))\n\n\n-----Constraints-----\n1 <= t <= 36\n1 <= x <= 9999\n\nclass Solution:\n    def __init__(self):\n        self.cnt = [0]\n    def __call__(self, stdin: str) -> str:\n        return str(self.cnt[int(stdin) - 1])\nSolution().solution(\"1\")",
        "test": "assert solution(test_cases) == '13'",
        "num_ids": 357
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    k = stdin.split()\n    n_1 = int(k[0])\n    n_2 = int(k[1])\n    n_k = n_1 + n_2\n    if n_1 > n_2:\n        n_1, n_2 = n_2, n_1\n    \n    pairs = []\n    \n    for i in range(n_k):\n        pairs.append([int(x) for x in stdin[2 * i:2 * i + 2]])\n        \n    print('YES' if sum(pairs) == 8 else 'NO')\n    return 'YES' if sum(pairs) == 8 else 'NO'\n'''",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 1487
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return solution2(stdin)\n\ndef",
        "test": "assert solution([\"3\",\"-1\",\"0\",\"2\"]) == \"6\"",
        "num_ids": 343
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n",
        "test": "assert solution(\"0 + 2 + 1\") == \"-6 + 6 - 7 + 9 + 1\"",
        "num_ids": 471
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    L = list(stdin.split())\n    q, v = L[:2]\n    w = L[2:]\n    print(*sorted(set([w.replace(v, '')] + [w.replace(v, '').lower() for v in set(w)])))\n    \n    \n",
        "test": "assert solution(0, '1') == '1'",
        "num_ids": 388
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * (n+1)\n    for _ in range(n):\n        a[int(stdin[_])] += 1\n    for i in range(1, n+1):\n        a[i] = (a[i-1] * (i-1)) // (a[i-1] + 1)\n    return str(a[n])\n",
        "test": "assert solution(\"-5\") == \"0\"",
        "num_ids": 362
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    while True:\n        if A + B == X:\n            break\n        A += A // B\n        B += B // A\n    return str(int(A) - int(B))",
        "test": "assert solution(input) == '84'",
        "num_ids": 218
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def convert_arr(arr):\n        for i in range(len(arr)):\n            arr[i] = int(arr[i])\n        return arr\n    \n    def is_valid(dog, monkey):\n        return (dog + monkey + 1) % 2 == 0\n    \n    def convert_sub_arr(sub_arr):\n        sub_arr = convert_arr(sub_arr)\n        count = 0\n        for i in range(len(sub_arr)):\n            if not is_valid(sub_arr[i], i):\n                count += 1\n        return count\n    \n    def check_adjacent(adj_arr):\n        return convert_sub_arr(adj_arr) == 2\n    \n    def all_adjacent(sub_arr):\n        if len(sub_arr) < 2:\n            return True\n        count = 0\n        for i in range(len(sub_arr)):\n            if check_adjacent(sub_arr[i:]):\n                count += 1\n        return count == 2\n    \n    def solution(N, M):\n        if all_adjacent(list(map(int, str(N) + str(M)))):\n            return str(N) + str(M)\n        return str(N) + str(M) + str(N) + str(M)\n    \n    return str(len(list(set(solution(N, M)))) % 10)\n\n---Time Complexity---\nTime complexity is O(N) to create array.\nTime complexity is O(N) to convert to string.\nSpace Complexity is O(N)\n\n###Extra###\n---Time Complexity---\nTime complexity is O(N) to create array.\nTime complexity is O(N) to convert to string.\nSpace Complexity is O(N)\n\n###Extra###\n\"\"\"",
        "test": "assert solution(\"BAC\") == \"3\"",
        "num_ids": 892
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    res = \"POSSIBLE\"\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        a, b = (a - 1), (b - 1)\n        if N == a or N == b:\n            res = \"IMPOSSIBLE\"\n            break\n    print(res)\n    return res\n",
        "test": "assert solution(\"1 2 4\") == \"2 3 4\"",
        "num_ids": 2257
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, c, r, b = 0, 0, 0, 0\n    for s in stdin:\n        if s.islower():\n            r = r * 10 + ord(s) - ord(\"a\")\n            c = c + 1\n            a = a * c + ord(s) - ord(\"a\")\n        else:\n            r = r * 10 + ord(s) - ord(\"A\")\n            c = c + 1\n            b = b * c + ord(s) - ord(\"A\")\n    return str(a) + str(r) + str(c) + str(b)\n",
        "test": "assert solution('abcde') == 'cabd'",
        "num_ids": 403
    },
    {
        "number": 4487,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A, B, C = map(lambda x: x.lower(), [A, B, C])\n    words = []\n    for c in C:\n        words.append(c)\n        if c == B[0]:\n            if B[-1] == A[-1]:\n                return f\"{B[0]}{B[1]}{B[2]}{B[3]}{B[4]}{B[5]}{B[6]}\"\n            else:\n                return f\"{B[0]}{B[1]}{B[2]}{B[3]}{B[4]}{B[5]}{B[6]}\"\n        elif c == B[-1]:\n            return f\"{B[0]}{B[1]}{B[2]}{B[3]}{B[4]}{B[5]}{B[6]}\"\n    return f\"{B[0]}{B[1]}{B[2]}{B[3]}{B[4]}{B[5]}{B[6]}\"\n\n>>> solution('rng')\n'r'\n\n>>> solution('gorilla apple')\n'aa'\n\n>>> solution('google gb')\n'gbb'\n\n>>> solution('c ')\n'c'\n\n>>> solution('c c c')\n'cccc'\n\n>>> solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "test": "assert solution(",
        "num_ids": 2080
    },
    {
        "number": 4488,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A>B:\n        return 'LESS'\n    elif A<B:\n        return 'GREATER'\n    else:\n        return 'EQUAL'\n\n\"\"\"",
        "test": "assert solution(\"2\") == \"2\"",
        "num_ids": 240
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, s_1, s_2, t_1, t_2, t_M = map(int, stdin.split())\n    \n    def get_char_set(s):\n        return {c for c in s if not c.isspace() and c not in '0#,/[]<>?'}\n    \n    def has_same_set(s1, s2):\n        for c in s1:\n            if c not in s2:\n                return False\n        return True\n    \n    def find_set(s):\n        # print(s)\n        return s.partition(\",\")\n    \n    # print(find_set(s_1), find_set(s_2), find_set(s_N), find_set(t_1), find_set(t_2), find_set(t_M))\n    \n    answer = 0\n    for _ in range(N):\n        answer += len([c for c in s_1 if c.isdigit() and int(c) == 1])\n        answer += len([c for c in s_2 if c.isdigit() and int(c) == 1])\n        answer += len([c for c in s_N if c.isdigit() and int(c) == 1])\n        answer += len([c for c in t_1 if c.isdigit() and int(c) == 1])\n        answer += len([c for c in t_2 if c.isdigit() and int(c) == 1])\n        answer += len([c for c in t_M if c.isdigit() and int(c) == 1])\n    return answer",
        "test": "assert solution(['bob','bob','bob','bob','bob','bob','bob','bob','bob','bob','bob']) == '3'",
        "num_ids": 3133
    },
    {
        "number": 4490,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input: str\n    #lower: str\n    lower: str\n    #upper: str\n    upper: str\n    #num_bases: int\n    num_bases: int\n\n    #if all are A\n    if all(char in 'ACGT' for char in stdin):\n        return stdin\n    \n    #if all are C\n    if all(char in 'ACGT' for char in stdin):\n        return stdin\n\n    #if all are G\n    if all(char in 'ACGT' for char in stdin):\n        return stdin\n\n    #if all are T\n    if all(char in 'ACGT' for char in stdin):\n        return stdin\n\n    #otherwise do nothing\n\n    #stringify all the letters\n    lower: str\n    upper: str\n    num_bases: int\n    for char in stdin:\n        if char.islower():\n            lower = char.upper()\n        elif char.isupper():\n            upper = char.lower()\n        else:\n            num_bases += 1\n    \n    #char_from_num_bases: str = str(num_bases)[-1:]\n    #chars_from_lower: str = list(string.ascii_lowercase)[:len(lower)]\n    #chars_from_upper: str = list(string.ascii_uppercase)[:len(upper)]\n\n    #stringify the chars_from_lower and chars_from_upper\n    #char_from_num_bases: str = list(string.ascii_lowercase)[:len(lower)]\n    #chars_from_lower: str = list(string.ascii_uppercase)[:len(upper)]\n\n    #print(stringify_all_chars(chars_from_lower))\n    #print(stringify_all_chars(chars_from_upper))\n\n    #stringify the lower and upper\n    #lower: str = list(string.ascii_lowercase)[:len(lower)]\n    #upper: str = list(string.ascii_uppercase)[:len(upper)]\n\n    #print(stringify_all_chars(lower))\n    #print(stringify_all_chars(upper))\n\n    return lower[num_bases] + upper[num_bases]",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 649
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_list = []\n    for _ in range(N):\n        A_list.append(list(map(int, input().split())))\n    max_count = 0\n    best_combination = -1\n    for i in range(N):\n        for j in range(N):\n            # print(\"i=\",i, \"j=\",j, \"A_list[i][j] =\", A_list[i][j])\n            if A_list[i][j] == max(A_list[i][:j+1]):\n                best_combination = i+1\n                # print(\"Best combination is \", best_combination)\n                max_count = max(max_count, A_list[i][j+1])\n            elif A_list[i][j] == min(A_list[i][:j+1]):\n                best_combination = i+1\n                # print(\"Best combination is \", best_combination)\n                max_count = max(max_count, A_list[i][j+1])\n            elif A_list[i][j] == A_list[i][j+1]:\n                best_combination = i+1\n                # print(\"Best combination is \", best_combination)\n                max_count = max(max_count, A_list[i][j+1])\n            else:\n                continue\n    return str(max_count)",
        "test": "assert solution(input) == \"14\"",
        "num_ids": 656
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()))\n    x = 0\n    m = 0\n    for i in range(n):\n        x += a[i]\n        m += (x + 1) // (2 ** (i + 1))\n    return str(m)\n\n'''",
        "test": "assert solution(\"1 1 1\") == \"1\"",
        "num_ids": 559
    },
    {
        "number": 4493,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a_1,a_2,a_3=map(int,stdin.split(\" \"))\n    a_1-=1\n    a_2-=1\n    a_3-=1\n    b_1,b_2,b_3=map(int,stdin.split(\" \"))\n    b_1-=1\n    b_2-=1\n    b_3-=1\n    a_1-=a_3\n    a_2-=a_3\n    a_3-=a_1\n    b_1-=b_3\n    b_2-=b_3\n    return \"Yes\" if a_1+a_2+a_3==b_1+b_2+b_3 else \"No\"",
        "test": "assert solution('1 0 1') == 'Yes'",
        "num_ids": 497
    },
    {
        "number": 4494,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    if s[0] == \"ABC\":\n        print(s[1])\n    else:\n        print(s[1])\n",
        "test": "assert solution(ARC) == \"ABC\"",
        "num_ids": 295
    },
    {
        "number": 4495,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = []\n    x = []\n    i = 0\n    for line in stdin:\n        if line[0] =='':\n            num.append(i)\n            x.append(line[1:])\n        else:\n            i += 1\n    for k in range(len(x)):\n        if x[k].isdigit():\n            num.append(int(x[k]))\n    return ','.join([str(i) for i in num])\n\n\nTests\n--------\n>>> solution(\"4 8 2\")\n'4, 6'\n>>> solution(\"4 8 2 5\")\n'3'\n>>> solution(\"1 2 4\")\n'2'\n>>> solution(\"1 2 4 2\")\n'0, 2'\n\nTest Python Code\n--------------\n>>> from collections import defaultdict\n>>> class MyClass:\n...    def __init__(self, x):\n...        self.x = x\n...    def __repr__(self):\n...        return f\"{self.x} is a key\"\n...    def __call__(self):\n...        return self.x\n...    def __eq__(self, other):\n...        return self.x == other.x\n\n>>> def solution(stdin: str) -> str:\n...    d = defaultdict(MyClass)\n...    for line in stdin:\n...        if line[0] =='':\n...            d[line[1]].x = line[2:]\n...        else:\n...            d[line[1]].x = line[2:]\n...    return ','.join([str(i) for i in sorted(d.keys())] + [str(i) for i in sorted(d.values())])\n\n>>> solution(\"4 8 2 5\")\n'4, 6'\n>>> solution(\"1 2 4\")\n'2'\n>>> solution(\"1 2 4 2\")\n'0, 2'\n>>> solution(\"1 2 4 2 4\")\n'0, 2, 4'\n>>> solution(\"1 2 4 2 4 5\")\n'0, 2, 4'\n>>> solution(\"1 2 4 2 4 5\")\n'0, 2, 4, 5'\n\n\"\"\"",
        "test": "assert solution(\"4 8 2\") == \"3\"",
        "num_ids": 699
    },
    {
        "number": 4496,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return 'Christmas'\n    elif d == 24:\n        return 'Christmas Eve'\n    elif d == 23:\n        return 'Christmas Eve Eve'\n    elif d == 22:\n        return 'Christmas Eve Eve'\n    else:\n        return 'Christmas'\n",
        "test": "assert solution(25) == \"Christmas\"",
        "num_ids": 2125
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num = []\n    for i in range(1, N+1):\n        if i % 2 == 0:\n            num.append(i)\n    for i in range(len(num)):\n        if num[i] % 2 == 0:\n            return str(num[i])\n\nprint(solution(input()))\n\n\"\"\"\ndef",
        "test": "assert solution('4'), \"4 cannot be divided by 2 zero times\"",
        "num_ids": 320
    },
    {
        "number": 4498,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return \"Yes\"\n    elif len(stdin) == 1:\n        return \"No\"\n    a, b, c, d = map(int, stdin.split())\n    if a * b < b * c and a * c < c * d:\n        return \"Yes\"\n    elif a * b >= b * c and a * c >= c * d:\n        return \"No\"\n    elif a * b >= c * d and a * c >= d * b:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert solution(stdin) == \"Yes\"",
        "num_ids": 605
    },
    {
        "number": 4499,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(set(stdin.split()[0].lower().split())))\n",
        "test": "assert solution(\"atcoder\") == \"ABC\", \"incorrect\"",
        "num_ids": 378
    },
    {
        "number": 4500,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(i) for i in stdin.split(\" \")]\n    if (A + B + C) <= 500:\n        return \"Yes\"\n    elif A + B == C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n\"\"\"\n[50, 100, 120]\n[50, 100, 120, 100, 200, 300, 400, 500]\n=> Yes\n\"\"\"\n\n\ndef",
        "test": "assert solution(inp) == \"Yes\"",
        "num_ids": 279
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, A = map(int, stdin.split())\n    x_1 = sorted(map(int, stdin.split()))[0]\n    x_2 = sorted(map(int, stdin.split()))[1]\n    x_3 = sorted(map(int, stdin.split()))[2]\n    x_4 = sorted(map(int, stdin.split()))[3]\n    \n    def select_card(x):\n        count = 0\n        temp_x = x\n        while temp_x!= x_1 and temp_x!= x_2 and temp_x!= x_3 and temp_x!= x_4:\n            temp_x = x_1\n            count += 1\n            if temp_x == x_1:\n                temp_x = x_2\n            elif temp_x == x_2:\n                temp_x = x_3\n            elif temp_x == x_3:\n                temp_x = x_4\n        return count\n    \n    def select_card_count(x):\n        count = 0\n        temp_x = x\n        while temp_x!= x_1 and temp_x!= x_2 and temp_x!= x_3 and temp_x!= x_4:\n            temp_x = x_1\n            count += 1\n        return count\n    \n    \n    answer = 0\n    for i in range(1,N+1):\n        answer = answer + select_card_count(i)\n    \n    print(answer)\n    return answer\n",
        "test": "assert solution(stdin) == str(5)",
        "num_ids": 932
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    b = []\n    b.append(a)\n    for i in range(n):\n        b.append(b.pop() + a)\n    print(b)\n    return''.join(map(str, b))\n",
        "test": "assert solution(input().replace(\" \", \"\").replace(\"-\", \"\").replace(\".\", \"\")) == \"4 2 1 3\"",
        "num_ids": 496
    },
    {
        "number": 4503,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    i = 0\n    while A[i] < H:\n        i += 1\n        if i >= N:\n            break\n        i += 1\n    if i >= N:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert solution(\"3 3\") == \"No\"",
        "num_ids": 527
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(map(len, map(lambda x: str(x), filter(lambda x: not x.isdigit(), stdin.split(\" \"))))) - 1))\n",
        "test": "assert solution(\"abaab\") == 4",
        "num_ids": 469
    },
    {
        "number": 4505,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(n: int, s: str, l: list):\n        if n == len(s):\n            return True\n        if s[n]!= s[l[n]]:\n            return False\n        return dfs(n+1, s, l) or dfs(n+1, s+s[n], l+[n])\n\n    if len(stdin) < 3:\n        return \"No\"\n    return \"Yes\" if dfs(0, \"\", []) else \"No\"\n",
        "test": "assert solution(\"abc\") == \"Yes\"",
        "num_ids": 2157
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1].split(\" \")]\n    b = [int(i) for i in stdin.split()[2].split(\" \")]\n    f = [sum(a[i:i + 2] * b[i + 1:i + 2]) for i in range(n // 2)]\n    f = list(filter(lambda x: x!= 0, f))\n    f = sorted(f)\n    if f[0] > f[-1]:\n        print(f[0])\n    elif f[0] == f[-1]:\n        print(f[0])\n    else:\n        print(f[-1])",
        "test": "assert solution(stdin) == 252074261844941726",
        "num_ids": 486
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = m\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            a[i], a[i + 1] = a[i + 1], a[i]\n        else:\n            a[i], a[i + 1] = a[i + 1], a[i]\n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            if a[i] < a[j]:\n                a[i], a[j] = a[j], a[i]\n            elif a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n    answer = 0\n    for i in range(m):\n        answer += a[i]\n    return str(answer)\n\n-----Time complexity-----\n\nn = n, m = m\n\nlog2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(n) = log2(",
        "test": "assert solution(stdin) == 17, \"incorrect solution\"",
        "num_ids": 2658
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = map(int, stdin.split())\n    \n    def min_edge(edge: tuple) -> int:\n        return abs(edge[0] - edge[1])\n    \n    visit = set()\n    \n    def dfs(vertex: int) -> bool:\n        if vertex in visit:\n            return False\n        \n        if vertex == N:\n            return True\n        \n        visit.add(vertex)\n        for next_vertex in range(N):\n            if next_vertex not in visit and min_edge(data[next_vertex]) < min_edge(data[vertex]):\n                visit.add(next_vertex)\n                dfs(next_vertex)\n        return True\n    \n    answer = N\n    \n    for vertex in range(N):\n        if not dfs(vertex):\n            answer -= 1\n    return answer",
        "test": "assert solution(\"1 3\") == \"3\"",
        "num_ids": 599
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n,k = [int(x) for x in stdin.split()]\n    def is_divisible(x):\n        return int(x) % k == 0\n    \n    def is_divisible_non_divisible(x):\n        return is_divisible(x) == True\n    \n    result = \"\"\n    for i in range(n):\n        result += f\"{k} \"\n        if is_divisible_non_divisible(k):\n            k -= 1\n        else:\n            k += 1\n    \n    return result.strip().replace(\" \", \"\")\n\ndef",
        "test": "assert solution('3' == '2' == '7') == '1'",
        "num_ids": 395
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = []\n    for _ in range(n):\n        messages.append(stdin.split())\n    conversations = []\n    for _ in range(k):\n        conversations.append(messages.pop())\n    conversations.sort(key=lambda x:x[0])\n    conversations.sort(key=lambda x:x[1])\n    result = []\n    idx = 0\n    for i in range(n):\n        if idx < len(conversations):\n            result.append(conversations[idx][0])\n            idx += 1\n        else:\n            result.append(conversations[-1][0])\n            break\n    return''.join(result)\n\ndef",
        "test": "assert solution(\"10 3\") == \"3\"",
        "num_ids": 1603
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = [i for i in range(n + 1)]\n    c = []\n    d = []\n    for _ in range(n):\n        l = [int(i) for i in stdin.split()]\n        c.append(l[0])\n        d.append(l[1])\n    c = sorted(c, reverse=True)\n    d = sorted(d, reverse=True)\n    m = c + d\n    m = sorted(m, reverse=True)\n    # print(m)\n    # print(k)\n    print(sum(k))\n    for i in m:\n        # print(c[i - 1])\n        # print(d[i - 1])\n        k[i - 1] -= 1\n        if k[i - 1] <= 0:\n            k[i - 1] = 10 ** 9\n        print(sum(k))\n    print(sum(k))",
        "test": "assert solution(1) == 10",
        "num_ids": 672
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution(stdin) == 5",
        "num_ids": 3276
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.strip())):\n        print(solution(t+1,stdin.strip()))\n        if t%1000 == 0:\n            print(t,end=\" \")\n    return ''\n\nfor t in range(int(stdin.strip())):\n    print(solution(t+1,stdin.strip()))\n",
        "test": "assert solution(stdin) == \"356864\"",
        "num_ids": 1097
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    list_q = list(map(int, stdin.split()))\n    result = [list_q.pop(0)]\n    q = list_q.copy()\n    if len(q) < 2:\n        return \"-1\"\n    else:\n        while q:\n            for _ in range(len(q)):\n                if q.pop(0)!= 0:\n                    if q.count(0) == q.count(q.pop(0)):\n                        result.append(q.pop(0))\n                    else:\n                        break\n                else:\n                    break\n            else:\n                q.extend(q.pop(0))\n    return result[::-1]\n'''\ndef",
        "test": "assert solution(input()) == '-1'",
        "num_ids": 1233
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    global N\n    n, a, b, c = map(int, stdin.split(\" \"))\n    # Number of coins to be formed by Alice and Barbara\n    # After that, number of coins to be formed by\n    # Barry and Cerene is equal to the number of coins Polycarp\n    # has, therefore:\n    # Number of coins Alice has = 0\n    # Number of coins Barbara has = 0\n    # Number of coins Cerene has = 0\n    #\n    # Number of coins Polycarp has = 0\n    #\n    # Number of coins Alice has = n\n    # Number of coins Barry has = a\n    # Number of coins Cerene has = b\n    # Number of coins Polycarp has = c\n\n    if n == 0:\n        return \"YES\"\n    if a + b + c == n:\n        return \"YES\"\n    if abs(a - b) <= n:\n        return \"YES\"\n    if abs(b - c) <= n:\n        return \"YES\"\n    if abs(c - a) <= n:\n        return \"YES\"\n    if n == a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - b + c + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + b + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + b + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + b + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + b + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + b + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + b + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + b + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + b + a + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c + a + b + c:\n        return \"YES\"\n    if n == a + b + c - a + b + c - c +",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 3320
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    return str(sum([abs(x[i] - x[i+1]) for i in range(n-1)]))\n\n'''\n",
        "test": "assert solution(input) == \"13\"",
        "num_ids": 1089
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k = map(int, stdin.split())\n    distance = [0]*(n+1)\n    for i in range(1, n+1):\n        tmp = i+1\n        for j in range(m):\n            if j == 0:\n                tmp = distance[j]\n                j += 1\n            elif j == m-1:\n                tmp = max(tmp, distance[j])\n                j += 1\n            elif j == m-1:\n                tmp = max(tmp, distance[j] + (distance[j+1] + 1))\n                j += 1\n            elif j == i:\n                tmp = max(tmp, distance[j] + (distance[j+1] + 1))\n            else:\n                tmp = max(tmp, distance[j] + (distance[j+1] + 1))\n                j += 1\n        distance[i] = tmp\n    answer = \"\"\n    for i in range(1, n+1):\n        if i == 1:\n            answer += str(distance[i])\n        elif i == n:\n            answer += str(distance[i-1]) + \" \"\n        elif i == n:\n            answer += str(distance[i-1])\n        else:\n            answer += str(distance[i]) + \" \"\n    return answer\n\nprint(solution(input()))",
        "test": "assert solution(\"[[1, 1, 2],[1, 2, 2],[1, 3, 1]]\") == \"NO\"",
        "num_ids": 708
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find(v, x):\n        for i in range(len(v)):\n            if v[i] == x:\n                return i\n        return -1\n\n    def union(v, a, b):\n        a = find(v, a)\n        b = find(v, b)\n\n        if a == b:\n            return -1\n\n        if a == -1:\n            v[b] = a + 1\n            return a\n        if b == -1:\n            v[a] = b + 1\n            return b\n\n        v[a] = b + 1\n        return b\n\n    for i in range(int(stdin.strip().split()[1]), int(stdin.strip().split()[1]) + int(stdin.strip().split()[2])):\n        a, b, dist = map(int, stdin.strip().split())\n        a = find(a, a)\n        b = find(b, b)\n        if a!= -1 and b!= -1:\n            if a == b:\n                print(0, end=\" \")\n            else:\n                print(1, end=\" \")\n        else:\n            print(1, end=\" \")\n\n        if a!= -1 and b!= -1:\n            if union(a, b, a) == a:\n                print(0, end=\" \")\n            else:\n                print(1, end=\" \")\n        else:\n            print(1, end=\" \")\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 2244
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip().split('\\n')[:-1]\n    \n    s = ''.join(s)\n    \n    result = ''\n    \n    for i in range(k):\n        \n        left = right = s[i]\n        left_index = 0\n        right_index = len(s) - 1\n        \n        for j in range(len(s)):\n            if s[j] == left:\n                if left_index!= right_index:\n                    if s[j+1] == left:\n                        right_index = j\n                        left_index = j+1\n                    else:\n                        right = s[j+1]\n                left = s[j+1]\n                if right == left:\n                    break\n                else:\n                    right = s[j+1]\n                    \n            elif s[j] == right:\n                if left_index!= right_index:\n                    if s[j-1] == left:\n                        left_index = j\n                        right_index = j-1\n                        right = s[j-1]\n                    else:\n                        left = s[j-1]\n                \n                if s[j-1] == left:\n                    left = s[j-1]\n                else:\n                    left = s[j-1]\n                \n                if right == left:\n                    break\n                else:\n                    left = s[j-1]\n                    \n            else:\n                if s[j-1] == left:\n                    left = s[j-1]\n                    right = s[j]\n                else:\n                    left = s[j]\n        \n        result += left\n        \n    return result",
        "test": "assert solution(stdin) == '0101111'",
        "num_ids": 666
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = list(map(int, stdin.split()))\n    p = []\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            p.append(stdin[i])\n        else:\n            j = p[i-1]\n            if j >= i:\n                j -= i\n                p.append(stdin[i])\n            else:\n                if i == n-1:\n                    p.append(stdin[i])\n                else:\n                    p.append(stdin[i])\n                    p.pop(i)\n                    j = p[i-1]\n                    p.append(stdin[i])\n    print(len(p))\n    print(len(set(p)))\n    return str(len(p))\n\n\ndef",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 643
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n<=0:\n        return str(0)\n    if n==1:\n        return \"0\"\n    mid = n//2\n    left, right = 0, n-1\n    while left < mid and right >= mid:\n        if stdin[left] < stdin[right]:\n            left += 1\n        else:\n            right -= 1\n    left += 1\n    if stdin[left] <= stdin[right]:\n        if left <= mid and right >= mid:\n            return str(left-mid)\n        if left > mid and right < mid:\n            return str(right+mid)\n        return str(left-mid) + \"-\" + str(right+mid)\n    else:\n        if left <= mid and right < mid:\n            return str(left-mid) + \"-\" + str(right)\n        if left > mid and right >= mid:\n            return str(left-mid) + \"-\" + str(right-mid)\n        return str(left) + \"-\" + str(right) + \"-\" + str(left-mid) + \"-\" + str(right) + \"-\" + str(left-mid) + \"-\" + str(right-mid)\n",
        "test": "assert solution(input()) == \"17\"",
        "num_ids": 2106
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        edges[u].append((v, w))\n    ans = []\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                ans.append(1)\n            else:\n                ans.append(max(ans[j], len(edges[i]) - 1))\n    return '\\n'.join(map(str, ans))\n\n\"\"\"[Edit]\n\n[Edit]\n\n\"\"\"",
        "test": "assert solution(stdin) == \"1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\"",
        "num_ids": 2051
    },
    {
        "number": 4523,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n        return 'YES'\n\n[1,2,3,4,5,5,4,5]\n[4,3,2,5,1]\n[3,5]\n[4,1,2,3,5,3,5]\n[4,3,2,5,1]\n[4,3,2,5,1]\n[4,3,2,5,1]\n[1]\n[1]\n",
        "test": "assert solution(\"1 2 3 4 5\") == \"YES\"",
        "num_ids": 352
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    n = int(stdin.strip().replace(\"_\", \" \"))\n    b = int(stdin.strip().replace(\"_\", \" \").replace(\"0\", \"1\").replace(\"1\", \"0\"))\n    # print(n, b)\n    a = []\n    # print(a)\n    # print(n-1, b-1)\n    for i in range(1, n+1):\n        a.append(str(i))\n    # print(a)\n    for i in range(1, n-1):\n        a.append(str(i))\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    # print(a)\n    ",
        "test": "assert solution(\"1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_2 = 1_",
        "num_ids": 3116
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    if n % 2!= 0: return 'NO'\n    if n == 2 or n == 4: return 'NO'\n    if n == 6 or n == 8: return 'NO'\n    sum_n = 0\n    s = []\n    for i in range(1, n+1):\n        sum_n += i\n        s.append(i)\n    sum_n /= 2\n    for i in range(2, n+1):\n        sum_n += i\n        if sum_n >= n:\n            s.append(sum_n-n)\n            s.append(sum_n-2*i)\n            s.append(sum_n-n)\n            s.append(sum_n-2*i+1)\n            s.append(sum_n-n)\n    a = []\n    for i in range(len(s)):\n        a.append(s[i])\n    return''.join(a)\n",
        "test": "assert solution(stdin) == \"NO\"",
        "num_ids": 763
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(line) for line in stdin.split()]\n    # a = [int(line) for line in input()]\n    # print(a)\n    special = 0\n    answer = 0\n    for i in range(n):\n        special_i = 0\n        for j in range(i+1):\n            if (a[i] + a[j]) == a[i] + a[j] and a[j]!= 0:\n                special_i += 1\n        if special_i == 0:\n            answer += 1\n    return str(answer)\n\n\nprint(solution(open(\"input_3.txt\").read()))\n",
        "test": "assert solution(stdin) == \"5\"",
        "num_ids": 1727
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    l = [list(map(int,input().split())) for i in range(n)]\n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            l[i][j] = l[i][j]%10\n        l[i][n-1] = l[i][n-1]%10\n        l[n-1][n-1] = l[n-1][n-1]%10\n        for k in range(n):\n            for l in range(n):\n                l[k][l] = l[k][l]%10\n    for i in l:\n        if sum(i)%10!= 0:\n            max_len = max(max_len,sum(i))\n    return str(max_len)\n\ndef",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 1751
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(\" \"))\n    answer = (h*60 + m) - (23*60 + 55)\n    return str(answer)\n",
        "test": "assert solution(stdin) == \"1439\"",
        "num_ids": 254
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = list(map(int, stdin[1].split()))\n    answer = -1\n    \n    if sum(s) >= 2 * 10 ** 5:\n        return -1\n    \n    def get(i):\n        if i == n:\n            return '-1'\n        \n        if s[i] == 'R':\n            return s[i + 1]\n        if s[i] == 'D':\n            return s[i + 1]\n        if s[i] == 'L':\n            return s[i - 1]\n        return None\n    \n    def update(i, val):\n        if i == n:\n            s[i] = val\n            return '+1'\n        \n        if s[i] == val:\n            s[i] = 'R'\n            return '+1'\n        if s[i] == 'U':\n            s[i] = 'L'\n            return '+1'\n        if s[i] == 'D':\n            s[i] = 'R'\n            return '+1'\n        if s[i] == 'L':\n            s[i] = 'D'\n            return '+1'\n        return None\n    \n    for i in range(n):\n        answer = max(answer, max(get(i), update(i, s[i])))\n        \n    if answer == -1:\n        return -1\n    \n    return answer\n\n\n    \n    \n    ",
        "test": "assert solution(\"LRUD\") == 2",
        "num_ids": 1735
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    student_list = list(map(int, stdin.split()))\n    a = []\n    for i in range(m):\n        a.append([])\n        for j in range(n):\n            a[i].append(student_list[j])\n    for i in range(m):\n        for j in range(n):\n            if a[i][j]!= 0:\n                a[i].remove(a[i][j])\n    s_max = n\n    s_min = n\n    for i in range(n):\n        if s_max > len(a[i]):\n            s_max = len(a[i])\n        if s_min < len(a[i]):\n            s_min = len(a[i])\n    if s_max!= s_min:\n        print(s_max)\n        print(s_min)\n        return\n    for i in range(m):\n        s = a[i]\n        if len(s)!= s_max:\n            s.extend(s[-s_max:])\n        if len(s)!= s_min:\n            s.extend(s[:s_min])\n        if len(s)!= n:\n            s.extend(s[:n])\n        s.sort()\n        if s[-1]!= n:\n            s.append(n)\n        if len(s) == 0:\n            s.append(n)\n        for j in range(s_min, s_max):\n            a[i].append(s[j])\n            if len(a[i]) == s_max:\n                break\n        if len(a[i]) == s_max:\n            break\n    if a[0][-1]!= 0:\n        a[0].append(a[0][-1])\n    for i in range(1, n):\n        if len(a[i]) == 0:\n            a[i].append(0)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= 0:\n                a[i].remove(a[i][j])\n    for i in range(n):\n        if len(a[i])!= 0:\n            a[i].sort()\n            if a[i][-1]!= len(a[i]) - 1:\n                a[i].append(len(a[i]) - 1)\n    for i in range(n):\n        if len(a[i])!= 0:\n            a[i].sort()\n    for i in range(n):\n        if len(a[i])!= 0:\n            if a[i][-1]!= n - 1:\n                a[i].append(n - 1)\n    print(a)\n    return \"0\"\n\"\"\"\n\nfrom collections import defaultdict\ndef",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 987
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n:\n        a, b, c = map(int, stdin.split())\n        a, b, c = min(a, b), max(a, b), min(c, n)\n        print(a+b+c)\n        n -= 1",
        "test": "assert solution(stdin) == 0, \"solution() failed\"",
        "num_ids": 364
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, x, n, k = list(map(int, stdin.split()))\n    answer = 0\n    answer += (n-1) * (x+1) * (k+1)\n    for i in range(n-2):\n        if a[i] % x == 0:\n            answer += (n-i) * (x+1) * (k+1)\n        if a[i+1] % x == 0:\n            answer += (n-i) * (x+1) * (k+1)\n    return str(answer)",
        "test": "assert solution(stdin) == \"18\"",
        "num_ids": 397
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1 2 3 4 5 6 7 8 9 10 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 197 197 198 199 200 201 202 203 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 223 224 225 226 227 228 229 230 230 231 232 233 234 235 236 237 238 239 240 241 241 242 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245",
        "num_ids": 2586
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def generate(n):\n        return [x + y for x in generate(n - 1) for y in generate(n - 1) if x + y!= n]\n    \n    def print_triangle(l):\n        for i in range(1, len(l)):\n            print(l[i - 1], end=' ')\n        print(l[-1])\n        \n    return str(generate(int(stdin)))\n\"\"\"\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> str:\n        if rowIndex == 0 or rowIndex == 1:\n            return '1'\n        \n        result = [[0] * i for i in range(1, rowIndex + 1)]\n        for i in range(2, rowIndex + 1):\n            for j in range(i):\n                result[i][j] = result[i - 1][j] + result[i - 2][j]\n        return result[rowIndex]\n",
        "test": "assert solution([\"3\", \"3\", \"1\", \"1\", \"2\", \"3\", \"2\", \"1\", \"1\"]) == \"1\"",
        "num_ids": 657
    },
    {
        "number": 4535,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    # int to binary\n    binary = bin(n).replace(\"0b\", \"\")\n    \n    # 4 digit\n    digits = list(binary)\n    \n    # is it even?\n    if len(digits) % 2 == 0:\n        digits.append(\"0\")\n        \n    # find the count of '1'\n    count = 0\n    for i in digits:\n        if i == \"1\":\n            count += 1\n    \n    # return the result\n    return str(count)\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert solution('00000000000000000000000010000000') == 1, \"5.6\"",
        "num_ids": 2186
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    \n    st = []\n    \n    for i in stdin:\n        if len(st) == 0 or st[-1]!= i:\n            st.append(i)\n        else:\n            st.append(st[-1])\n    st.append(st[-1])\n    \n    for i in range(len(st)-2, -1, -1):\n        answer += str(st[i])\n    \n    return answer\n",
        "test": "assert solution(",
        "num_ids": 276
    },
    {
        "number": 4537,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A+B, A-B, A*B))",
        "test": "assert solution('1 1') == '2'",
        "num_ids": 209
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X_1, Y_1 = map(int, stdin.split())\n    X_2, Y_2 = map(int, stdin.split())\n    X_3, Y_3 = map(int, stdin.split())\n    X_4, Y_4 = map(int, stdin.split())\n    X_5, Y_5 = map(int, stdin.split())\n    X_6, Y_6 = map(int, stdin.split())\n    X_7, Y_7 = map(int, stdin.split())\n    X_8, Y_8 = map(int, stdin.split())\n    X_9, Y_9 = map(int, stdin.split())\n    X_10, Y_10 = map(int, stdin.split())\n    X_11, Y_11 = map(int, stdin.split())\n    X_12, Y_12 = map(int, stdin.split())\n    X_13, Y_13 = map(int, stdin.split())\n    X_14, Y_14 = map(int, stdin.split())\n    X_15, Y_15 = map(int, stdin.split())\n    X_16, Y_16 = map(int, stdin.split())\n    X_17, Y_17 = map(int, stdin.split())\n    X_18, Y_18 = map(int, stdin.split())\n    X_19, Y_19 = map(int, stdin.split())\n    X_20, Y_20 = map(int, stdin.split())\n    X_21, Y_21 = map(int, stdin.split())\n    X_22, Y_22 = map(int, stdin.split())\n    X_23, Y_23 = map(int, stdin.split())\n    X_24, Y_24 = map(int, stdin.split())\n    X_25, Y_25 = map(int, stdin.split())\n    X_26, Y_26 = map(int, stdin.split())\n    X_27, Y_27 = map(int, stdin.split())\n    X_28, Y_28 = map(int, stdin.split())\n    X_29, Y_29 = map(int, stdin.split())\n    X_30, Y_30 = map(int, stdin.split())\n    X_31, Y_31 = map(int, stdin.split())\n    X_32, Y_32 = map(int, stdin.split())\n    X_33, Y_33 = map(int, stdin.split())\n    X_34, Y_34 = map(int, stdin.split())\n    X_35, Y_35 = map(int, stdin.split())\n    X_36, Y_36 = map(int, stdin.split())\n    X_37, Y_37 = map(int, stdin.split())\n    X_38, Y_38 = map(int, stdin.split())\n    X_39, Y_39 = map(int, stdin.split())\n    X_40, Y_40 = map(int, stdin.split())\n    X_41, Y_41 = map(int, stdin.split())\n    X_42, Y_42 = map(int, stdin.split())\n    X_43, Y_43 = map(int, stdin.split())\n    X_44, Y_44 = map(int, stdin.split())\n    X_45, Y_45 = map(int, stdin.split())\n    X_46, Y_46 = map(int, stdin.split())\n    X_47, Y_47 = map(int, stdin.split())\n    X_48, Y_48 = map(int, stdin.split())\n    X_49, Y_49 = map(int, stdin.split())\n    X_50, Y_50 = map(int, stdin.split())\n    X_51, Y_51 = map(int, stdin.split())\n    X_52, Y_52 = map(int, stdin.split())\n    X_53, Y_53 = map(int, stdin.split())\n    X_54, Y_54 = map(int, stdin.split())\n    X_55, Y_55 = map(int, stdin.split())\n    X_56, Y_56 = map(int, stdin.split())\n    X_57, Y_57 = map(int, stdin.split())\n    X_58, Y_58 = map(int, stdin.split())\n    X_59, Y_59 = map(int, stdin.split())\n    X_60, Y_60 = map(int, stdin.split())\n    X_61, Y_61 = map(int, stdin.split())\n    X_62, Y_62 = map(int, stdin.split())\n    X_63, Y_63 = map(int, stdin.split())\n    X_64, Y_64 = map(int, stdin.split())\n    X_65, Y_65 = map(int, stdin.split())\n    X_66, Y_66 = map(int, stdin.split())\n    X_67, Y_67 = map(int, stdin.split())\n    X_68, Y_68 = map(int, stdin.split())\n    X_69, Y_69 = map(int, stdin.split())\n    X_70, Y_70 = map(int, stdin.split())\n    X_71, Y_71 = map(int, stdin.split())\n    X_72, Y_72 = map(int, stdin.split())\n    X_73, Y_73 = map(int, stdin.split())\n    X_74, Y_74 = map(int, stdin.split())\n    X_75, Y_75 = map(int, stdin.split())\n    X_76, Y_76 = map(int, stdin.split())\n    X_77, Y_77 = map(int, stdin.split())\n    X_78, Y_78 = map(int, stdin.split())\n    X_79, Y_79 = map(int, stdin.split())\n    X_80, Y_80 = map(int, stdin.split())\n    X_81, Y_81 = map(int, stdin.split())\n    X_82, Y_82 = map(int, stdin.split())\n    X_83, Y_83 = map(int, stdin.split())\n    X_84, Y_84 = map(int, stdin.split())\n    X_85, Y_85 = map(int, stdin.split())\n    X_86, Y_86 = map(int, stdin.split())\n    X_87, Y_87 = map(int, stdin",
        "test": "assert solution(\"2 4\") == \"3\"",
        "num_ids": 2006
    },
    {
        "number": 4539,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  if N%3 == 0:\n    return \"Yes\"\n  return \"No\"\n",
        "test": "assert solution(12) == \"Yes\"",
        "num_ids": 188
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    print(solution_iter(N, A))\n    \ndef",
        "test": "assert solution(input()) == str(12)",
        "num_ids": 235
    },
    {
        "number": 4541,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"a\":\n        return \"vowel\"\n    if stdin == \"e\":\n        return \"vowel\"\n    if stdin == \"i\":\n        return \"vowel\"\n    if stdin == \"o\":\n        return \"vowel\"\n    if stdin == \"u\":\n        return \"vowel\"\n",
        "test": "assert solution(\"a\") == \"vowel\"",
        "num_ids": 167
    },
    {
        "number": 4542,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stones = list(stdin.rstrip())\n    n = len(stones)\n    if n <= 3:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if stones[i] == 'B':\n                if stones[j] == 'W':\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n                else:\n                    dp[i][j] = dp[i-1][j]\n            else:\n                if stones[j] == 'W':\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j]\n    return max(dp[-1]) % (10**9 + 7)",
        "test": "assert solution('BBBWW') == 1",
        "num_ids": 627
    },
    {
        "number": 4543,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"Yes\"\n    for i in range(1, int(len(stdin) / 2) + 1):\n        if int(stdin[:i])**2!= int(stdin[i:]):\n            answer = \"No\"\n            break\n    return answer\n",
        "test": "assert solution(\"2553\") == \"No\"",
        "num_ids": 278
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,a=[int(x) for x in stdin.split()]\n    n=n-1\n    res=[]\n    for i in range(n):\n        x=int(a[i])\n        # print(i,x)\n        if i==0:\n            res.append(x)\n        else:\n            # print(res)\n            if x-1>=0:\n                res.append(x-1)\n            if x+1<=n:\n                res.append(x+1)\n    return str(max(res))\n\nprint(solution(\"7 5 2 3 4\"))\n",
        "test": "assert solution(stdin) == 24",
        "num_ids": 454
    },
    {
        "number": 4545,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = N * N\n    numbers = []\n    for _ in range(N):\n        numbers.append(int(stdin))\n    count_white = 0\n    for i in numbers:\n        if i % A == 0:\n            count_white += 1\n    return str(count_white)",
        "test": "assert solution(\"1\"), \"1 is not a valid square.\"",
        "num_ids": 366
    },
    {
        "number": 4546,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    height, width = map(int, stdin.split())\n    poles = []\n    result = []\n    for i in range(width):\n        poles.append(list(map(int, stdin.split())))\n    \n    poles.sort()\n    for i in range(width):\n        for j in range(i + 1, width):\n            if (poles[i][0] + poles[j][0]) % 2 == (poles[i][1] + poles[j][1]) % 2:\n                if (poles[i][0] + poles[j][0] + poles[i][1] + poles[j][1]) % 2 == 0:\n                    if j + 1 < width:\n                        if (poles[i][0] + poles[j][0] + poles[i][1] + poles[j][1]) % 2 == 0:\n                            if (poles[j][0] + poles[i][0] + poles[j][1] + poles[i][1]) % 2 == 0:\n                                result.append('YES')\n                                break\n                        else:\n                            result.append('NO')\n                            break\n                    else:\n                        result.append('NO')\n                        break\n                else:\n                    result.append('NO')\n                    break\n            else:\n                result.append('NO')\n                break\n    return''.join(result)\n",
        "test": "assert solution(input()), \"The example input is incorrect or incorrect.\"",
        "num_ids": 487
    },
    {
        "number": 4547,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(29) == 'No'",
        "num_ids": 522
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split())\n    A_1, A_2, A_3, A_4, A_5 = map(int, stdin.split())\n\n    total = (N - 1) * M + (N - 1) * M + (N - 1) * M\n    cost = 1\n\n    if A_1 > A_2 and A_1 > A_3 and A_2 > A_3:\n        total -= 1\n    if A_1 > A_4 and A_1 > A_5 and A_4 > A_5:\n        total -= 1\n    if A_1 > A_4 and A_2 > A_3 and A_3 > A_4:\n        total -= 1\n    if A_1 > A_5 and A_2 > A_3 and A_3 > A_5:\n        total -= 1\n\n    if total == 0:\n        return '0'\n    \n    if total < 0:\n        return str(abs(total))\n\n    while total > 0:\n        if A_1 > A_2 and A_1 > A_3 and A_2 > A_3:\n            if total >= (N - 1) * M:\n                cost += 1\n                total -= (N - 1) * M\n        if A_1 > A_4 and A_1 > A_5 and A_4 > A_5:\n            if total >= (N - 1) * M:\n                cost += 1\n                total -= (N - 1) * M\n        if A_1 > A_5 and A_2 > A_3 and A_3 > A_4:\n            if total >= (N - 1) * M:\n                cost += 1\n                total -= (N - 1) * M\n\n    return str(cost)\n\nprint(solution(input()))",
        "test": "assert solution(stdin) == '1'",
        "num_ids": 2133
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = H*10, W*10\n    grid = []\n    for i in range(h):\n        grid.append([])\n        for j in range(w):\n            grid[i].append('#')\n    for i in range(H):\n        grid[i].append('.')\n    for j in range(W):\n        grid[h-1-i][j] = '.'\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '#':\n                count += 1\n            elif grid[i][j] == '.':\n                return 'Yes'\n    for i in range(h-1, -1, -1):\n        for j in range(w-1, -1, -1):\n            if grid[i][j] == '#':\n                count += 1\n            elif grid[i][j] == '.':\n                return 'No'\n    return 'Yes'\n\nRuntime: 40 ms, faster than 97.17% of Python3 online submissions for Design Paint.\nMemory Usage: 26.3 MB, less than 35.23% of Python3 online submissions for Design Paint.\n\"\"\"\n\nclass Solution:\n    def paintGrid(self, A: list, x: int, y: int, d: int, color: str) -> str:\n        grid = [['.' for _ in range(w)] for _ in range(h)]\n        \n        def dfs(x: int, y: int, d: int, count, color):\n            if d > d_max:\n                return \n            if x < 0 or y < 0 or x >= h or y >= w:\n                return \n            if grid[x][y]!= '.':\n                return\n            grid[x][y] = color\n            d_max = d\n            count += 1\n            for i in range(x, x+d+1):\n                for j in range(y, y+d+1):\n                    if i < 0 or i >= h or j < 0 or j >= w:\n                        continue\n                    dfs(i, j, d, count, color)\n            \n        d_max = max(d, d_max)\n        if color == '#':\n            return 'Yes'\n        else:\n            dfs(x, y, d, 0, color)\n            return 'No'",
        "test": "assert solution(\"#..#.###.###.###\") == 'No'",
        "num_ids": 2548
    },
    {
        "number": 4550,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    b = list(map(int,stdin.split()))\n    c = list(map(int,stdin.split()))\n    pack = []\n    for i in range(n):\n        pack.append([])\n        for j in range(3):\n            pack[i].append(a[i*3+j])\n            pack[i].append(b[i*3+j])\n            pack[i].append(c[i*3+j])\n    if sum(pack) == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\"\"\"\nhttps://www.youtube.com/watch?v=s3N-C9XoO0\n\"\"\"",
        "test": "assert solution(stdin), \"The function is not found\"",
        "num_ids": 792
    },
    {
        "number": 4551,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    a,b,c,d = map(int,stdin.split())\n    return [b,c,d,a]\n    \n    \n    \n",
        "test": "assert solution(8, 7, 1) == \"Left\"",
        "num_ids": 329
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, *F, *P = map(int, stdin)\n    max_profit = 0\n    for i in range(1, N+1):\n        for j in range(i):\n            k = j + (i - j) * F[j]\n            if k <= 10:\n                max_profit += P[k]\n    return str(max_profit)\n\"\"\"\n\ndef",
        "test": "assert solution(inp) == \"8\"",
        "num_ids": 580
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    print(list(map(''.join, zip(*[map(int, re.split(r'[-]', s)) for s in stdin.split()]))))\n    return 'Yes' if 'A+B+1' in stdin.split() else 'No'",
        "test": "assert solution(\\\"2649-6650\\\") ==\\\"No\\\"",
        "num_ids": 282
    },
    {
        "number": 4554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b, c = map(int, stdin.split())\n    a = a % w\n    b = b % w\n    c = c % w\n    if a > 0 and b > 0 and c > 0:\n        ans = abs(a - b) + abs(b - c) + abs(c - a)\n    else:\n        ans = abs(a - b) + abs(c - b) + abs(a - c)\n    return str(ans)\n",
        "test": "assert solution(\"1 1 1\") == 1",
        "num_ids": 536
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n  A, B, K = map(int, stdin.split())\n  for k in range(min(A,B), max(A,B)+1, K):\n    for i in range(A,B+1):\n      if K == 0:\n        print(i)\n        return\n      if K < i:\n        print(i)\n        return\n\n-----------------\nA = 3\nB = 5\nK = 4\nsolution(input())",
        "test": "assert solution(stdin) == \"7\"",
        "num_ids": 239
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().split()\n    answer = \"\"\n    for i in inp:\n        answer += \"ABC\"[inp.index(i)]\n    return answer\n\n-----Sample Input-----\nAtCoder Beginner Contest\n\n-----Sample Output-----\nABC\n\n-----Constraints-----\n1 <= len(inp) <= 100\ninp[0] is a letter in the range from A to Z.\n\n-----Input Format\nThe first line contains an integer 't', the number of test cases.\nEach test case contains one line.\n\n-----Output Format\nPrint the abbreviation of the name of the contest.\n\n-----Example Input\n2\natcoder Beginner Contest\n\n-----Example Output\nABC\n\n-----Constraints\n1 <= t <= 10\n\n-----Note:\nSample case\n1\n\nSample case\n2\n\nSample case\n3\n\nSample case\n4\n\nSample case\n5\n\nSample case\n6\n\nSample case\n7\n\nSample case\n8\n\nSample case\n9\n\nSample case\n10\n\nSample case\n11\n\nSample case\n12\n\nSample case\n13\n\nSample case\n14\n\nSample case\n15\n\nSample case\n16\n\nSample case\n17\n\nSample case\n18\n\nSample case\n19\n\nSample case\n20\n\nSample case\n21\n\nSample case\n22\n\nSample case\n23\n\nSample case\n24\n\nSample case\n25\n\nSample case\n26\n\nSample case\n27\n\nSample case\n28\n\nSample case\n29\n\nSample case\n30\n\nSample case\n31\n\nSample case\n32\n\nSample case\n33\n\nSample case\n34\n\nSample case\n35\n\nSample case\n36\n\nSample case\n37\n\nSample case\n38\n\nSample case\n39\n\nSample case\n40\n\nSample case\n41\n\nSample case\n42\n\nSample case\n43\n\nSample case\n44\n\nSample case\n45\n\nSample case\n46\n\nSample case\n47\n\nSample case\n48\n\nSample case\n49\n\nSample case\n50\n\nSample case\n51\n\nSample case\n52\n\nSample case\n53\n\nSample case\n54\n\nSample case\n55\n\nSample case\n56\n\nSample case\n57\n\nSample case\n58\n\nSample case\n59\n\nSample case\n60\n\nSample case\n61\n\nSample case\n62\n\nSample case\n63\n\nSample case\n64\n\nSample case\n65\n\nSample case\n66\n\nSample case\n67\n\nSample case\n68\n\nSample case\n69\n\nSample case\n70\n\nSample case\n71\n\nSample case\n72\n\nSample case\n73\n\nSample case\n74\n\nSample case\n75\n\nSample case\n76\n\nSample case\n77\n\nSample case\n78\n\nSample case\n79\n\nSample case\n80\n\nSample case\n81\n\nSample case\n82\n\nSample case\n83\n\nSample case\n84\n\nSample case\n85\n\nSample case\n86\n\nSample case\n87\n\nSample case\n88\n\nSample case\n89\n\nSample case\n90\n\nSample case\n91\n\nSample case\n92\n\nSample case\n93\n\nSample case\n94\n\nSample case\n95\n\nSample case\n96\n\nSample case\n97\n\nSample case\n98\n\nSample case\n99\n\nSample case\n100\n\n-----Constraints-----\n1 <= t <= 10\n\n-----Input Format\nThe first line contains an integer 't', the number of test cases.\nEach test case contains one line.\n\n-----Output Format\nPrint the abbreviation of the name of the contest.\n\n-----Example Input\n2\natcoder Beginner Contest\n\n-----Example Output\nABC\n\n-----Constraints\n1 <= t <= 10\n\n-----Note:\nSample case\n1\n\n-----Note:\nSample case\n2\n\n-----Note:\nSample case\n3\n\n-----Note:\nSample case\n4\n\n-----Note:\nSample case\n5\n\n-----Note:\nSample case\n6\n\n-----Note:\nSample case\n7\n\n-----Note:\nSample case\n8\n\n-----Note:\nSample case\n9\n\n-----Note:\nSample case\n10\n\n-----Note:\nSample case\n11\n\n-----Note:\nSample case\n12\n\n-----Note:\nSample case\n13\n\n-----Note:\nSample case\n14\n\n-----Note:\nSample case\n15\n\n-----Note:\nSample case\n16\n\n-----Note:\nSample case\n17\n\n-----Note:\nSample case\n18\n\n-----Note:\nSample case\n19\n\n-----Note:\nSample case\n20\n\n-----Note:\nSample case\n21\n\n-----Note:\nSample case\n22\n\n-----Note:\nSample case\n23\n\n-----Note:\nSample case\n24\n\n-----Note:\nSample case\n25\n\n-----Note:\nSample case\n26\n\n-----Note:\nSample case\n27\n\n-----Note:\nSample case\n28\n\n-----Note:\nSample case\n29\n\n-----Note:\nSample case\n30\n\n-----Note:\nSample case\n31\n\n-----Note:\nSample case\n32\n\n-----Note:\nSample case\n33\n\n-----Note:\nSample case\n34\n\n-----Note:\nSample case\n35\n\n-----Note:\nSample case\n36\n\n-----Note:\nSample case\n37\n\n-----Note:\nSample case\n38\n\n-----Note:\nSample case\n39\n\n-----Note:\nSample case\n40\n\n-----Note:\nSample case\n41\n\n-----Note:\nSample case\n42\n\n-----Note:\nSample case\n43\n\n-----Note:\nSample case\n44\n\n-----Note:\nSample case\n45\n\n-----Note:\nSample case\n46\n\n-----Note:\nSample case\n47\n\n-----Note:\nSample case\n48\n\n-----Note:\nSample case\n49\n\n-----Note:\nSample case\n50\n\n-----Note:\nSample case\n51\n\n-----Note:\nSample case\n52\n\n-----Note:\nSample case\n53\n\n-----Note:\nSample case\n54\n\n-----Note:\nSample case\n55\n\n-----Note:\nSample case\n56\n\n-----Note:\nSample case\n57\n\n-----Note:\nSample case\n58\n\n-----Note:\nSample case\n59\n\n-----Note:\nSample case\n60\n\n-----Note:\nSample case\n61\n\n-----Note:\nSample case\n62\n\n-----Note:\nSample case\n63\n\n-----Note:\nSample case\n64\n\n-----Note:\nSample case\n65\n\n-----Note:\nSample case\n66\n\n-----Note:\nSample case\n67\n\n-----Note:\nSample case\n68\n\n-----Note:\nSample case\n69\n\n-----Note:\nSample case\n70\n\n-----Note:\nSample case\n71\n\n-----Note:\nSample case\n72\n\n-----Note:\nSample case\n73\n\n-----Note:\nSample case\n74\n\n-----Note:\nSample case\n75\n\n-----Note:\nSample case\n76\n\n-----Note:\nSample case\n77\n\n-----Note:\nSample case\n78\n\n-----Note:\nSample case\n79\n\n-----Note:\nSample case\n80\n\n-----Note:\nSample case\n81\n\n-----Note:\nSample case\n82\n\n-----Note:\nSample case\n83\n\n-----Note:\nSample case\n84\n\n-----Note:\nSample case\n85\n\n-----Note:\nSample case\n86\n\n-----Note:\nSample case\n87\n\n-----Note:\nSample case\n88\n\n-----Note:\nSample case\n89\n\n-----Note:\nSample case\n90\n\n-----Note:\nSample case\n91\n\n-----Note:\nSample case\n92\n\n-----Note:\nSample case\n93\n\n-----Note:",
        "test": "assert solution(input) == 'ABC'",
        "num_ids": 1921
    },
    {
        "number": 4557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = list(map(int, stdin.split()))\n    if (A % X!= 0 or B % X!= 0):\n        return \"NO\"\n    for i in range(B, A + B):\n        if i % X == 0:\n            return \"YES\"\n    return \"NO\"\n'''\ndef",
        "test": "assert solution(\"1 3 3 0\") == \"YES\"",
        "num_ids": 334
    },
    {
        "number": 4558,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(sum(map(lambda x: (n//x) * (x//n), range(1, n + 1))))\n",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 363
    },
    {
        "number": 4559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n = int(stdin.strip())\n        if n < 1000000000:\n            print(n)\n        else:\n            break\n\n----- Sample Input:\n2\n1000000000 10\n\nSample Output:\n10\n\"\"\"",
        "test": "assert solution('5') == '5', \"Not a solution.\"",
        "num_ids": 251
    },
    {
        "number": 4560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef",
        "test": "assert solution(input()) == 'Yes'",
        "num_ids": 291
    },
    {
        "number": 4561,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A,B,X = map(int,stdin.split())\n    if X+A>B:\n        return'safe'\n    if A+B>X:\n        return 'dangerous'\n    if X+A>B+1:\n        return 'dangerous'\n    return'safe'",
        "test": "assert solution(\"2 1 1\") == \"safe\"",
        "num_ids": 299
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    while N > 0:\n        a = N\n        b = N\n        \n        #n <= 0 \n        if a < 0:\n            a = a * -1\n            print(a)\n        #1 <= N <= 10**9\n        if a > 10**9:\n            a = a // 10**9\n            print(a)\n        \n        #N > 0 \n        if b < 0:\n            b = b * -1\n            print(b)\n        if b > 10**9:\n            b = b // 10**9\n            print(b)\n        \n        #1 <= N <= 10**9\n        if b < 0:\n            b = b * -1\n            print(b)\n        if b > 10**9:\n            b = b // 10**9\n            print(b)\n        N = b\n    return str(a)\n    \n    \n",
        "test": "assert solution(\"5\") == \"9\"",
        "num_ids": 432
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split(\"\\n\")[0].split(\" \")[0])\n  t = int(stdin.split(\"\\n\")[0].split(\" \")[1])\n  a = int(stdin.split(\"\\n\")[0].split(\" \")[2])\n  b = int(stdin.split(\"\\n\")[0].split(\" \")[3])\n  if t > a or b > a or t > b:\n    print(0)\n    return \"\"\n  if (t + a + b) % 2 == 0:\n    print(0)\n    return \"\"\n  if t + a + b == t:\n    print(t)\n    return \"\"\n  print(min(t, a, b))\n  return \"\"\n\nSolution(\"\"\"\n3\n2 3\n1 1\n3 2\n\n3\n3\n3\n\n2 3\n1 1\n3 2\n\n3\n3\n3\n3\n\n1 1\n1 1\n1 1\n\n3\n2 3\n1 1\n1 1\n3 2\n\n3\n2 3\n1 1\n2 2\n\n5\n\"\"\")",
        "test": "assert solution(stdin) == \"3, 3, 3, 1, 1, 3, 1, 2, 2, 2, 2, 1, 2, 1, 3, 1, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "num_ids": 2111
    },
    {
        "number": 4564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(len(stdin)):\n        if stdin[i]!= stdin[i - 1]:\n            return \"no\"\n    return \"yes\"\n    \n",
        "test": "assert solution(stdin) == 'no'",
        "num_ids": 291
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = list(stdin.strip().split(' '))\n    if len(S)!= N:\n        return '0'\n    \n    def dist(x, y):\n        return abs(x - y)\n    \n    D = [0 for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if dist(S[i], S[j]) == dist(S[j], S[i]):\n                D[i] += 1\n            elif D[i] == 0:\n                D[i] = 1\n    \n    for i in range(N):\n        if D[i] == 1:\n            S[i] = 'E'\n        elif D[i] == 2:\n            S[i] = 'W'\n    \n    return ''.join(S)\n\n\nSample Input\n5\nWEEWW\n\nSample Output\n1\n\nExplanation\nThe first person from the west has to face east and has to turn around.\nThe other people do not need to change their directions, so the number of people who have to change their directions is 1 in this case.\n\"\"\"",
        "test": "assert solution(input) == '1'",
        "num_ids": 734
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n  N,M = map(int,stdin.split())\n  roads = list(map(lambda i: [int(j) for j in input().split()], range(1,M+1)))\n  total = 0\n  cur = 0\n  for i in range(N):\n    cur += roads[i][1]\n    total += cur\n  if total >= 3:\n    return str(total//3 + 1)\n  else:\n    return str(total//2 + 1)",
        "test": "assert solution(\"4 3\") == \"1\"",
        "num_ids": 553
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split(\" \")[-1])\n    s = list(map(int, stdin.split(\" \")[:-1]))\n\n    for i in range(n - 1, -1, -1):\n        if s[i] % 10 == 5:\n            s[i] += 10\n        else:\n            s[i] += 5\n\n    return str(sum(s))",
        "test": "assert solution('5 3') == '0'",
        "num_ids": 653
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N,S = map(str,stdin.split())\n    X,Y = [],[]\n    for i in range(len(N)):\n        if N[i] == 'a':\n            X.append('a')\n        elif N[i] == 'b':\n            Y.append('b')\n        elif N[i] == 'c':\n            X.append('c')\n    answer = len(X) + len(Y)\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            if X[i] == Y[j]:\n                answer = max(answer,len(X[i]) + 1)\n    return str(answer)\n\ndef",
        "test": "assert solution([\"a\",\"a\",\"b\",\"a\"]) == 1",
        "num_ids": 375
    },
    {
        "number": 4569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  s = input()\n  return s",
        "test": "assert solution('Sunny') == 'Cloudy'",
        "num_ids": 3820
    },
    {
        "number": 4570,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return f'{(A * N) + (B * N) + B}'",
        "test": "assert solution(\"2 1\") == \"59\"",
        "num_ids": 264
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    def compute(n: int, m: int) -> float:\n        if n == m:\n            return 1.0\n        else:\n            if m == 1:\n                return 1\n            elif m == n:\n                return compute(1, n - 1)\n            else:\n                return compute(n, m - 1) + compute(n - 1, m)\n    return str(int(compute(N, M)))\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n3800\n\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 3800.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n3800\n\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 3800.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n3800\n\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 3800.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n3800\n\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 3800.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n3800\n\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 3800.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n3800\n\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 3800.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n3800\n\nIn this input, there is",
        "test": "assert solution(input()) == \"3800\"",
        "num_ids": 1800
    },
    {
        "number": 4572,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return None\n",
        "test": "assert solution(['atcoderregularcontest','atcoderregularcontest']) == None",
        "num_ids": 256
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a >= b:\n        return str(a) +'' + str(b)\n    else:\n        return str(b) +'' + str(a)",
        "test": "assert solution('2 4 4 3') == '4'",
        "num_ids": 1871
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A_list = [list(map(int, input().split())) for _ in range(N)]\n    area = 0\n    for a in A_list:\n        area = area + sum(a)\n    return str(area)\n\"\"\"\n\n\ndef",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 327
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.split())\n    day = [1] * n\n    for _ in range(d):\n        day[x] = 2\n        x += 1\n        x %= n\n    answer = 0\n    for i in range(n):\n        if x == i:\n            continue\n        for j in range(1, n - i):\n            day[j] += 1\n            j += 1\n        answer += day[j]\n    return str(answer)\n",
        "test": "assert solution(input()) == \"8\"",
        "num_ids": 2256
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = 0\n    B = 0\n    C = 0\n    X = 0\n    for line in stdin:\n        A += int(line[0])\n        B += int(line[1])\n        C += int(line[2])\n        X += int(line[3])\n    if A == 500:\n        if B == 100:\n            return 2\n        if C == 50:\n            return 2\n    if A == 500 and B == 100:\n        return 2\n    if A == 500 and B == 50:\n        return 1\n    if A == 100 and B == 50:\n        return 1\n    if A == 100 and B == 100:\n        return 1\n    if A == 50 and B == 50:\n        return 1\n    if X == 0:\n        return 0\n    if X == 1:\n        return 1\n    if X == 2:\n        return 2\n    return 0\n\n\"\"\"\nfor A in range(4,101):\n    for B in range(2,51):\n        for C in range(1,51):\n            for X in range(0,20):\n                if A+B+C==X:\n                    print(A, B, C, X)\n                    print(solution(f'{A}{B}{C}'))\n                    break\n                    print(solution(f'{A}{B}{C}'))\n                    break\n                else:\n                    print(A, B, C, X)\n                    print(solution(f'{A}{B}{C}'))\n                    break\n                print(solution(f'{A}{B}{C}'))\n                break\nprint('Done')",
        "test": "assert solution(2,2,2,50) == 2",
        "num_ids": 764
    },
    {
        "number": 4577,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[-1])\n    A, B, C = map(int, stdin.split())\n    if C <= A or B <= B or C <= A+B:\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert solution(\"1 2 3\") == \"No\"",
        "num_ids": 260
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    print(n, m, x, sep='\\n')\n    cnt = 1\n    for i in range(n):\n        for j in range(i, n):\n            print(cnt, end='')\n            cnt += 1\n        print()\n    return '0'\n\"\"\"",
        "test": "assert solution(stdin) == 9, \"Should be 9\"",
        "num_ids": 304
    },
    {
        "number": 4579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(0,N):\n        s = stdin[i]\n        if s == 'A' or s == 'B' or s == 'C':\n            print(1)\n        else:\n            print(0)\n\n### Problem Statement\n",
        "test": "assert solution(4, ['apple', 'orange', 'apple', 'orange', 'apple', 'orange']) == 'four'",
        "num_ids": 311
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.strip())\n  a_list = [int(x) for x in stdin.split()]\n  a_list.sort()\n  min_color = min(a_list)\n  max_color = max(a_list)\n  for color in range(min_color, max_color+1):\n    if color in a_list:\n      a_list.remove(color)\n      a_list.append(color)\n  if len(a_list) == 1:\n    return '0'\n  return''.join([str(x) for x in a_list])",
        "test": "assert solution(inp) == \"yellow orange\"",
        "num_ids": 656
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 700 + 100 * 2)\n",
        "test": "assert solution(s) == \"900\"",
        "num_ids": 124
    },
    {
        "number": 4582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(str, stdin.split())\n    a, b = map(str, x.split())\n    if a == 'H' and b == 'D':\n        print('H')\n    elif a == 'D' and b == 'H':\n        print('D')\n    elif a == 'H' and b == 'D':\n        print('D')\n    else:\n        print('H')\n\nprint(solution('1H1D'))\nprint(solution('1H1D0'))\nprint(solution('2H1D'))\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\ndef",
        "test": "assert solution(input()) == \"H\"",
        "num_ids": 312
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"",
        "test": "assert solution(12345) == \"1+2+2+2=7\"",
        "num_ids": 2003
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A = list(map(int, A.split()))\n    A.sort()\n    a = 1\n    b = 0\n    for i in A:\n        b += a\n        a = a * i\n    b += a\n    print(b)\n    return '0'\n\n\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\n-----Input-----\nInput is from STDIN. It is guaranteed that for each element i in the array A.\nA[i] is either 2 or 3.\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates:",
        "test": "assert solution(\"\"\"6",
        "num_ids": 2038
    },
    {
        "number": 4585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        x = int(stdin)\n        if x%2 == 0:\n            x += 3\n        else:\n            x -= 3\n        print(x)",
        "test": "assert solution(['3', '2', '2', '2', '2', '2', '2', '1', '2', '3']) == '1'",
        "num_ids": 437
    },
    {
        "number": 4586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    good = False\n    if n % 4!= 0:\n        return \"No\"\n    for i in range(n // 4):\n        check = int(stdin[i * 4 : (i + 1) * 4])\n        if check >= 1000 and check < 9000:\n            good = True\n    if good:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(stdin)\n",
        "test": "assert solution(1119) == \"Yes\"",
        "num_ids": 428
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n\n    def print_altar_one(a: int, b: int, c: int) -> None:\n        if a > b:\n            print(a, end=\" \")\n        if a > c:\n            print(b, end=\" \")\n        if b > c:\n            print(c, end=\" \")\n\n    def print_altar_two(a: int, b: int, c: int) -> None:\n        if a > c:\n            print(a, end=\" \")\n        if b > a:\n            print(b, end=\" \")\n        if c > b:\n            print(c, end=\" \")\n\n    def print_altar_three(a: int, b: int, c: int) -> None:\n        if a > c:\n            print(a, end=\" \")\n        if b > c:\n            print(b, end=\" \")\n        if a > b:\n            print(c, end=\" \")\n        if c > a:\n            print(a, end=\" \")\n\n    print_altar_one(A[0], B[0], C[0])\n    print_altar_two(A[1], B[1], C[1])\n    print_altar_three(A[2], B[2], C[2])\n\n    print(len(set(A)))\n    print(len(set(B)))\n    print(len(set(C)))\n\n    return \"The number of different altars that Ringo can build is: {}\".format(len(set(A + B + C)))\n\nfor _ in range(int(input())):\n    N = int(input())\n    A_ = [int(x) for x in input().split()]\n    B_ = [int(x) for x in input().split()]\n    C_ = [int(x) for x in input().split()]\n    print(solution(N))\n",
        "test": "assert solution(stdin) == 5",
        "num_ids": 2462
    },
    {
        "number": 4588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[1])\n    s = list(map(lambda x: list(x), stdin.split(\" \")))\n    for i in range(n):\n        if s[i][0] == s[i][1]:\n            print(\"<\", end=\" \")\n        elif s[i][0] > s[i][1]:\n            print(\">\", end=\" \")\n        else:\n            print(\"=\", end=\" \")\n    return \"\".join(s)\n",
        "test": "assert solution(\"A\") == \"1\"",
        "num_ids": 394
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(H):\n        for j in range(W):\n            if stdin[i][j] == '#':\n                num = 0\n                for k in range(i-1, i+2):\n                    for l in range(j-1, j+2):\n                        if 0<=k<H and 0<=l<W and s[k][l]=='#':\n                            num += 1\n                s[i][j] = str(num)\n    return '\\n'.join([''.join(s) for s in stdin])\n\"\"\"\n\nclass Solution:\n    def change_to_integer(self, s):\n        # Fill this in.\n        '''\n        # solve this with memoization\n        memo = dict()\n        # base case\n        if len(s) == 1:\n            return s\n        # base case\n        if len(s) == 2:\n            return 1\n        for i in range(1,len(s)):\n            for j in range(1,len(s[0])):\n                if i==1 and j==1:\n                    if s[i][j] in memo:\n                        return s[i][j]\n                    else:\n                        memo[s[i][j]] = 1\n                else:\n                    if s[i][j] in memo:\n                        memo[s[i][j]] += 1\n                    else:\n                        memo[s[i][j]] = 1\n        return s[i][j]\n        '''\n        def change(s,i,j):\n            if i>=0 and i<len(s) and j>=0 and j<len(s[0]) and s[i][j]=='#':\n                return 1\n            return 0\n        \n        result = []\n        for i in range(len(s)):\n            for j in range(len(s[0])):\n                result.append(change(s,i,j))\n        return ''.join(result)\n        \n\n\nH, W = map(int, input().split())\ns = []\nfor _ in range(H):\n    s.append(input())\nprint(solution(s))",
        "test": "assert solution(\"#..\") == \"1#1#1\"",
        "num_ids": 931
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A, B = map(int, stdin.split())\n    \n    def solve(i, start):\n        if i >= N or B <= i <= M or A >= B:\n            return 0\n        \n        return solve(i + 1, start + A) + solve(i + 1, start + B)\n    \n    return str(solve(0, 0))",
        "test": "assert solution(\"60 90 120\") == 1",
        "num_ids": 1824
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n    minPrice = (A*B*C) + (X*Y)\n    return str(minPrice)",
        "test": "assert solution(\"B-pizza\") == \"Pizza At\"",
        "num_ids": 519
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = {1}\n    for i in range(2, N+1):\n        if i % 10**9+7 in d:\n            d.remove(i)\n        if sum(d) == N:\n            return str(len(d))\n        for j in range(1, i//10**9+7):\n            if j not in d:\n                d.add(j)\n    return \"0\"\n",
        "test": "assert solution(3) == 4, 'incorrect'",
        "num_ids": 296
    },
    {
        "number": 4593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    res = ''\n    for x in stdin:\n        if x.isnumeric() or x == '.':\n            res += x\n        elif int(x) >= 10:\n            res += x\n        elif int(x) % 2 == 0:\n            res += str(int(x)**2)\n        else:\n            res += str(int(x)**2-1) + '.'\n    return res\n\n1.\n2.\n3.\n4.\n5.\n6.\n7.\n8.\n9.\n",
        "test": "assert solution(5) == 5, \"solution failed\"",
        "num_ids": 2278
    },
    {
        "number": 4594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, d_1, d_N = map(int, stdin.split())\n    result = []\n    for _ in range(N):\n        d_i = int(input())\n        if d_i < d_1:\n            result.append(d_i)\n        else:\n            result.append(d_1)\n    return str(len(result) + 1)\n\nprint(solution(\"4 1 8 8\"))\n\n\"\"\"\n\ndef",
        "test": "assert solution(input) == 3",
        "num_ids": 2048
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    a = s[0]\n    b = s[7]\n    if a!= b:\n        return \"NO\"\n    l = len(s)\n    for i in range(1,l-1):\n        if s[i]!= a:\n            return \"NO\"\n    if a == b:\n        return \"YES\"\n    l = len(s)\n    for i in range(l-2,0,-1):\n        if s[i]!= a:\n            return \"NO\"\n    if a == b:\n        return \"YES\"\n    return \"YES\"\n",
        "test": "assert solution('AaAaZ') == 'Z'",
        "num_ids": 2155
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def split(num, digits):\n        return [int(num[i:i+digits]) for i in range(0, len(num), digits)]\n    N = int(input())\n    A_1, A_2, A_3, A_4, A_5 = map(int, input().split())\n    A = [split(i, 5) for i in input().split()]\n    A.sort(key=lambda x: x[0])\n    max_operations = 0\n    for i in A:\n        if len(i) % 2 == 0:\n            if i[1] >= A_1:\n                i[1] -= A_1\n            else:\n                i[1] += A_1\n            i[0] //= 2\n            max_operations += int((i[1] + i[0]) / 2)\n        else:\n            if i[1] >= A_2:\n                i[1] -= A_2\n            else:\n                i[1] += A_2\n            i[0] //= 2\n            max_operations += int((i[1] + i[0]) / 2)\n    print(max_operations)\n    return\nsolution(input())\n",
        "test": "assert solution(input) == \"2\"",
        "num_ids": 572
    },
    {
        "number": 4597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  return str(sum(map(lambda x: (x*(10**9+7)), range(1,N))))",
        "test": "assert solution(stdin) == \"6\"",
        "num_ids": 236
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)+int(stdin)+int(stdin))\n\nRuntime: 52 ms (8.22%)\nMemory Usage: 17.6 MB (5.91%)\n\n'''",
        "test": "assert solution(2) == 3",
        "num_ids": 429
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return '-'.join(map(str, map(int, stdin.split())))\n\n\"\"\"\n\nimport sys\n\ndef",
        "test": "assert solution(\"2 3 2\") == \"4\"",
        "num_ids": 439
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M, p_i = map(int, stdin.split())\n    if p_i == 1:\n        S = 'WA'\n    elif p_i == 2:\n        S = 'AC'\n    elif p_i == 3:\n        S = 'WA'\n    else:\n        S = 'AC'\n    A = 0\n    B = 0\n    for i in range(N):\n        if S == 'WA':\n            A += 1\n        elif S == 'AC':\n            B += 1\n    print(A, B)\n    return str(A) +'' + str(B)",
        "test": "assert solution(2,1,1) == 2",
        "num_ids": 755
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    H_1, H_2, H_3 = map(int, stdin.split())\n    monsters = [H_1, H_2, H_3]\n    min_attack_count = 0\n    for monster in range(0, N):\n        monsters[monster] -= 1\n        if monsters[monster] == 0:\n            min_attack_count += 1\n        if monsters[monster] >= K:\n            monsters[monster] -= K\n    return str(min_attack_count)",
        "test": "assert solution(input) == \"5\"",
        "num_ids": 614
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K, x = map(int, stdin.split())\n    Ball = {}\n    for i in range(N):\n        Ball[i] = list(map(int, stdin.split()))\n    \n    def dist(a, b):\n        return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n    \n    def process(a):\n        tmp = []\n        for b in Ball[a]:\n            if dist(a, b) not in tmp:\n                tmp.append(dist(a, b))\n        return tmp\n\n    Ball = sorted(Ball.items(), key=lambda x: x[1][0])\n    \n    ans = 0\n    \n    while len(Ball) > 0:\n        p = Ball.pop(0)\n        if (len(Ball) == 0) or (p[1][0] + p[1][1] <= K):\n            ans += p[1][0] + p[1][1]\n            Ball = sorted(Ball, key=lambda x: x[1][1])\n        else:\n            ans += K\n            Ball = sorted(Ball, key=lambda x: x[1][0])\n            Ball = Ball[:len(Ball)-1]\n    \n    print(ans)",
        "test": "assert solution(",
        "num_ids": 888
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(i) for i in stdin.split(' ')]\n    min_price = min(A, B, C, D)\n    max_price = max(A, B, C, D)\n    min_price = min(min_price, max_price)\n    if max_price % min_price == 0:\n        print(max_price)\n        return max_price\n    else:\n        min_price = min(min_price, max_price - (max_price % min_price))\n        print(min_price)\n        return min_price\n\"\"\"\n\ndef",
        "test": "assert solution(input) == \"520\"",
        "num_ids": 321
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_i(list(map(int, stdin.split()))))\n\ndef",
        "test": "assert solution(\"2 4 4 0 2\") == 4",
        "num_ids": 2006
    },
    {
        "number": 4605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    A = int(A/10)\n    B = int(B/10)\n    if A >= B:\n        A = 10**(A-B)\n        if A % 10 <= N:\n            A = A % 10\n        else:\n            A = A % 10 + 10\n    else:\n        B = 10**(B-A)\n        if B % 10 <= N:\n            B = B % 10\n        else:\n            B = B % 10 + 10\n    print(A*N+B)\n    return str(A*N+B)\n",
        "test": "assert solution(input()) == 84",
        "num_ids": 455
    },
    {
        "number": 4606,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\" + stdin[2:]\n",
        "test": "assert solution(input) == 'ABC'",
        "num_ids": 166
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('-')))\n    b = list(map(int, stdin.split('-')))\n    month = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n    day = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31}\n    month_day = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31}\n    day_day = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31}\n    if (month[a[0]] == b[0]):\n        return str(day[month[a[0]]] + day_day[month[a[0]]]) + str(day[month[b[0]]])\n    else:\n        return str(day[month[a[0]]] + day_day[month[b[0]]]) + str(day[month[b[0]]]) + str(day[month[a[0]]])\n",
        "test": "assert solution(input) == 5",
        "num_ids": 546
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    arr = [0 for _ in range(n + 1)]\n    for _ in range(n):\n        a, b = map(int, stdin.split(\":\"))\n        arr[a] = b\n    def dfs(curr, count):\n        if curr == n:\n            return count\n        if arr[curr] == 0:\n            return -1\n        count += 1\n        for i in range(1, n):\n            if arr[i] == 1 and arr[curr]!= 1:\n                return -1\n            count = dfs(i, count)\n        return count\n    return dfs(1, 0)\n\nTest Cases:\nsolution(\"1:1\")\n1:1\n1:2\n1:3\n1:4\n2:1\n2:2\n2:3\n2:4\n3:1\n3:2\n3:3\n3:4\n4:1\n4:2\n4:3\n4:4\n\nsolution(\"1:1\")\n0\n1\n1\n1\n\nTest Cases:\nsolution(\"1:1\")\n1\n1\n1\n1\n1\n0\n",
        "test": "assert solution(input) == 2",
        "num_ids": 578
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2 = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    # print(nums)\n    cnt = 0\n    for i in range(N):\n        if A_1 <= nums[i] <= A_2:\n            nums[i] = 0\n            cnt += 1\n        else:\n            nums[i] = nums[i]\n    # print(nums)\n    return str(cnt)\n\n\nimport re",
        "test": "assert solution(input()) == \"3\"",
        "num_ids": 2070
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = [int(i) for i in stdin.split()]\n    ans = 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            ans = max(ans, A[i] + A[j])\n    return str(ans)\n\n-----Sample Output-----\nExplanation\n\n2\n2\n2\n\n2\n2\n2\n2\n\nExplanation\n\nThere are 2 different integers on the 2 balls.\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\nExplanation\n\nThere are two balls that represent two different integer.\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\nExplanation\n\nThere are two balls that represent two different integer.\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\nExplanation\n\nThere are two balls that represent two different integer.\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n",
        "test": "assert solution([\"2\",\"3\",\"2\",\"3\"]) == \"1\"",
        "num_ids": 2074
    },
    {
        "number": 4611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, x_1, y_1, x_2, y_2, t_1, t_2 = map(int, stdin.split())\n    \n    if x_1 + y_1 == t_1 and x_2 + y_2 == t_2:\n        return 'Yes'\n    \n    if x_1 == x_2 and y_1 == y_2:\n        return 'No'\n    \n    \n    if t_1 >= t_2:\n        if t_1 <= t_2:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'",
        "test": "assert solution('[1,1,1,1,1]', [3,1,2,1,1]) == 'No'",
        "num_ids": 741
    },
    {
        "number": 4612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,input().split())\n    avg=round(a/b,2)\n    print(avg)\n    return str(avg)\n\n-----Sample Output-----\nEnter a: 2\nEnter b: 3\n2\nThe average of 2 and 3 is 2.0, and it will be rounded up to the nearest integer, 2.\n\n-----Sample Input-----\n3 4\n\n-----Sample Output-----\n3\n\nThe average of 3 and 4 is 3.0, and it will be rounded up to the nearest integer, 3.\n",
        "test": "assert solution(\"3 1\") == 1",
        "num_ids": 268
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n\n-----Code-----\nN,M = map(int,input().split())\ngraph = [list(map(int,input().split())) for i in range(N)]\n\ndef",
        "test": "assert solution(input) == \"4\"",
        "num_ids": 479
    },
    {
        "number": 4614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C=map(int,stdin.split())\n    if A==B and B==C:\n        return '7'\n    if A==B or B==C:\n        return A+B+C\n    return max(A,B,C)",
        "test": "assert solution([\"5\", \"7\", \"5\", \"7\", \"7\"]) == \"7\"",
        "num_ids": 325
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    if A + B < C + D < E + F:\n        print(A * (C / B) + B * (D / E) + C * (F / E) - A * (F / F) / B)\n    else:\n        print(0)\n\n-----Test Cases-----\ntest_cases = [\n    (\"1 2 10 20 15 200\",\n     110,\n     110,\n     100,\n     200,\n     10,\n     20,\n     15),\n    (\"1 2 10 20 15 200\",\n     110,\n     110,\n     100,\n     200,\n     10,\n     20,\n     15),\n    (\"1 2 10 20 15 200\",\n     110,\n     110,\n     100,\n     200,\n     10,\n     20,\n     15),\n    (\"1 2 10 20 15 200\",\n     110,\n     110,\n     100,\n     200,\n     10,\n     20,\n     15),\n    (\"1 2 10 20 15 200\",\n     110,\n     110,\n     100,\n     200,\n     10,\n     20,\n     15)\n]\nfor s, a, b, c, d, e, f in test_cases:\n    print(solution(s))",
        "test": "assert solution(input()) == \"500\"",
        "num_ids": 1750
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass",
        "test": "assert solution(input()) == 'i18n'",
        "num_ids": 208
    },
    {
        "number": 4617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    #pass\n'''\n\nclass Solution:\n    def IsSame(self, s1, s2):\n        return s1 == s2\n\nprint(Solution().IsSame('pot', 'top'))\nprint(Solution().IsSame('A', 'A'))\nprint(Solution().IsSame('A', 'a'))",
        "test": "assert solution(test_input_two) == \"YES\"",
        "num_ids": 380
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return next(\n        (\n            solution2(stdin)\n            for s in stdin\n            for solution2(s) in s\n            if s[0] < s[-1]\n        )\n    )\n\"\"\"\n\ndef",
        "test": "assert solution(input) == 'b'",
        "num_ids": 1917
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N, x_1, y_1, x_2, y_2, a_2 = list(map(int, stdin.split(' ')))\n    x_1 = x_1 * 2\n    y_1 = y_1 * 2\n    x_2 = x_2 * 3\n    y_2 = y_2 * 3\n    if a_1 == 1 and a_2 == 4:\n        return str(abs(x_1 - x_2) + abs(y_1 - y_2))\n    if a_1 == 1 or a_2 == 4:\n        return str(abs(x_1 - x_2) + abs(y_1 - y_2))\n    if a_1 == 2 or a_2 == 3:\n        return str(abs(x_1 - x_2) + abs(y_1 - y_2))\n    if a_1 == 3 or a_2 == 2:\n        return str(abs(x_1 - x_2) + abs(y_1 - y_2))\n    if a_1 == 4 or a_2 == 1:\n        return str(abs(x_1 - x_2) + abs(y_1 - y_2))\n    return 'No solution'\n\n\n-----Sample Output-----\nSample Input:\n5 4 2\n2 1 1\n3 3 4\n\nSample Output:\nNo solution\n",
        "test": "assert solution(input) == \"9\"",
        "num_ids": 918
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    C_1 = [int(x) for x in stdin.split()]\n    S_1 = C_1[1::]\n    F_1 = [int(x) for x in stdin.split()]\n    A = F_1[0]\n    B = F_1[1]\n    S_1 = [int(x) for x in S_1]\n    F_1 = [int(x) for x in F_1]\n    C_1 = C_1[::]\n    C_1.sort()\n    T = 0\n    while len(C_1)!= 0:\n        i = C_1[0]\n        train_i = S_1[i]\n        if i == 0:\n            T += F_1[i]*C_1[0]\n            i = 1\n        elif i == len(S_1)-1:\n            T += F_1[i]*C_1[len(S_1)-1]\n            i = len(S_1)-2\n        else:\n            T += F_1[i]*C_1[i]\n            i += 1\n    return str(T % A) + \" \" + str(int(T/A))\n\n-----Sample Output-----\n3\n5 1\n1 10 1\n2 15\n1 9 1\n1 10 1\n2 15\n1 9 1\n1 10 1\n\n-----Expected Output-----\n12\n11\n0\n\n3.0\n\n2.0\n\n3\n-10\n-10\n-10\n-10\n-10\n-10\n",
        "test": "assert solution(\"1 10 1\") == \"10 1\"",
        "num_ids": 1673
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return ''\n    row_column = [0]*n\n    for i in range(n):\n        row_column[i] = stdin[i]\n    print(row_column)\n    print(row_column)\n    new_row = ['.'] * (n * 2)\n    new_row[n // 2] = row_column[n // 2]\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    new_row[n // 2 - 1] = row_column[n // 2 - 1]\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    print(new_row)\n    return ''.join(new_row)\n",
        "test": "assert solution(",
        "num_ids": 551
    },
    {
        "number": 4622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split()))\n    distinct_list = [i for i in range(1, n+1)]\n    for i in range(0, n-1, 2):\n        distinct_list[i] = distinct_list[i] * 2\n    for i in range(n-1, 0, -2):\n        distinct_list[i] = distinct_list[i] * 2\n    a_list_order = sorted(distinct_list)\n    for i in range(n):\n        if a_list[i]!= a_list_order[i]:\n            return 'NO'\n    return 'YES'\n\n\"\"\"\n\nimport math\n\ndef",
        "test": "assert solution(",
        "num_ids": 765
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # brute force\n    \n    n, k = map(int, stdin.split())\n    if k == n:\n        return 'YES'\n    \n    numbers = list(map(int, stdin.split()))\n    s = sum(numbers)\n    if s == s:\n        return 'YES'\n    \n    # dp\n    dp = [0 for _ in range(s + 1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, s + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return str(dp[s])\n    \n",
        "test": "assert solution(stdin) == 3",
        "num_ids": 420
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    floor = [0 for _ in range(x)]\n    for i in range(n):\n        floor[i] = int(stdin.split()[i])\n    floor.sort()\n    return str(floor[floor.index(1)]) + str(floor.count(1))\n\nn, x = map(int, input().split())\nprint(solution(input()))\n",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 1923
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    T = int(stdin[1])\n    s = stdin[2:]\n    letters = set()\n    count = 0\n    for i in s:\n        if i in letters:\n            count += 1\n        letters.add(i)\n    # print(letters)\n    wrong_tries = [0 for i in range(26)]\n    for i in range(T):\n        for j in range(N):\n            if s[j] in letters:\n                wrong_tries[s[j]] += 1\n                if wrong_tries[s[j]] > 1:\n                    break\n        letters.clear()\n        for i in range(26):\n            if wrong_tries[i] == 0:\n                letters.add(chr(i+97))\n            if wrong_tries[i] > 1:\n                break\n    # print(wrong_tries)\n    for i in range(26):\n        if wrong_tries[i]!= 0:\n            print(i, end=' ')\n            return str(i)\n    return str(0)",
        "test": "assert solution(stdin) == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
        "num_ids": 2680
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def solve(i, k, pos):\n        if k == 1:\n            return 0\n        if k == 2:\n            return pos\n        if k > 2:\n            return float('inf')\n        \n        return pos\n    \n    def is_valid(pos, friend):\n        if pos > 0:\n            if pos - friend >= 0:\n                return True\n        return False\n    \n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    \n    pos = [[i + 1 for i in range(n)] for i in range(n)]\n    \n    ans = []\n    for i in range(q):\n        n_a, n_b, n_c = map(int, stdin.split())\n        pos_a = a[:n_a] + b[n_a:] + c[:n_b] + c[n_b:]\n        pos_b = a[n_a:n_a + n_c] + b[:n_b] + c[n_b:] + c[:n_c]\n        pos_c = a[n_a + n_c:n_a + n_c + n_c] + b[n_a:n_a + n_c] + c[:n_b] + c[n_b:] + c[:n_c]\n        \n        if not is_valid(pos_a[0], pos_b[0]):\n            ans.append(0)\n        else:\n            ans.append(solve(pos_a[0], pos_b[0], pos_c[0]))\n            \n    return '\\n'.join(map(str, ans))",
        "test": "assert solution(1, 1, 2, 1, 2, 2, 1) == 1",
        "num_ids": 1025
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n == 1:\n    return \"YES\"\n  if n == 2:\n    return \"YES\"\n  for i in range(1, n + 1):\n    if not(n % i):\n      continue\n    for j in range(1, n // i):\n      if n % i == 0:\n        break\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) % 2 == 0):\n        continue\n      if not(n % (i + j) % 2 == 1):\n        continue\n      if not(n % (i + j) == 1):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue\n      if not(n % (i + j) == 0):\n        continue",
        "test": "assert solution(",
        "num_ids": 1897
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, *ranges = map(int, stdin.split())\n    a, b = ranges\n    if a == b:\n        a, b = a, b - 1\n    if a == n - 1:\n        a, b = a, b + 1\n    return str(int(sum(map(min, rangelist[a - 1:b])) - sum(map(max, rangelist[a:b]))))\n-----Constraints-----\n0\n1\n\n------Examples-----\n\nInput 1:\n\n2\n1\n5\n2 3 2 4\n3 4 5 4\n3 2 4\n3 3 6\n3 4 5\n3 3\n3 3\n\nInput 2:\n\n5\n1\n2\n3\n4\n2 3 2 4\n1 2\n1 2\n3 3\n3 4\n3 3\n\nOutput 1:\n\n22\n\n-----Constraints-----\n\n0\n2\n\n\"\"\"\n\ndef",
        "test": "assert solution(stdin) == \"22\"",
        "num_ids": 1080
    },
    {
        "number": 4629,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))",
        "test": "assert solution(\"1 2 3\") == \"1\"",
        "num_ids": 187
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(i) for i in stdin.split()]\n    \n    def is_valid(n, p):\n        return p <= n and n % p == 0\n    \n    def get_day(n):\n        return sum(range(1, n+1))\n    \n    def check(p):\n        if p in p:\n            return p\n        return False\n    \n    day_idx = get_day(n) - 1\n    \n    p_list = [int(i) for i in stdin.split()]\n    answer = 0\n    \n    for p in p_list:\n        if not is_valid(n, p):\n            continue\n        if p == 0:\n            answer += day_idx\n            continue\n        \n        first_idx = get_day(n) - 1\n        second_idx = get_day(n - p)\n        \n        if first_idx <= second_idx:\n            answer += first_idx\n            continue\n        answer += second_idx\n        \n    return str(answer)\n",
        "test": "assert solution('3 2 1 3 4 5')) == 1",
        "num_ids": 889
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, n, m = map(int, stdin.split())\n    y1, y2 = map(int, stdin.split())\n\n    x = min(x1, x2) + 1\n    y = min(y1, y2) + 1\n    max_d = int(math.sqrt(n))\n    i = max_d\n    while i < n:\n        j = max_d\n        while j < n:\n            if (i, j) in x:\n                i += 1\n                j += 1\n            else:\n                break\n        if j < n:\n            j = n\n        while j < n:\n            if (j, i) in x:\n                j += 1\n            else:\n                break\n        if j < n:\n            j = n\n        if i >= n:\n            i = n\n        if i >= n and j >= n:\n            if i <= j:\n                i += 1\n            else:\n                j += 1\n\n    answer = min(i, y)\n    for k in range(i, n + 1):\n        if i - k >= 0 and k - i >= 0:\n            answer += min(k - i, i - k)\n    return str(answer)\n\"\"\"\n\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        self.res = []\n        self.n = n\n        self.check = [0] * (n + 1)\n        self.queens = []\n        self.res = []\n        self.solve()\n        return self.res\n    \n    def solve(self):\n        if self.check == [0] * self.n:\n            self.queens.append(self.queens[-1])\n            self.res.append(self.queens[-1])\n            for i in range(self.n):\n                if i!= self.queens[-1]:\n                    self.queens.append(i)\n                    self.res.append(i)\n            self.queens.pop()\n            self.check = [1] + self.check + [0]\n            self.solve()\n        if self.check[-1] == 1:\n            self.queens.append(self.queens[-1])\n            self.res.append(self.queens[-1])\n            for i in range(self.n):\n                if i!= self.queens[-1]:\n                    self.queens.append(i)\n                    self.res.append(i)\n            self.queens.pop()\n            self.check = [1] + self.check + [0]\n            self.solve()\n        if self.check[-1] == 0:\n            self.queens.append(self.queens[-1])\n            self.res.append(self.queens[-1])\n            for i in range(self.n):\n                if i!= self.queens[-1]:\n                    self.queens.append(i)\n                    self.res.append(i)\n            self.queens.pop()\n            self.check = [0] + self.check + [1]\n            self.solve()\n        if self.check[-1] == 0:\n            self.queens.append(self.queens[-1])\n            self.res.append(self.queens[-1])\n            for i in range(self.n):\n                if i!= self.queens[-1]:\n                    self.queens.append(i)\n                    self.res.append(i)\n            self.queens.pop()\n            self.check = [0] + self.check + [0]\n            self.solve()\n        if self.check[-1] == 0:\n            self.queens.append(self.queens[-1])\n            self.res.append(self.queens[-1])\n            for i in range(self.n):\n                if i!= self.queens[-1]:\n                    self.queens.append(i)\n                    self.res.append(i)\n            self.queens.pop()\n            self.check = [0] + self.check + [0]\n            self.solve()\n        if self.check[-1] == 0:\n            self.queens.append(self.queens[-1])\n            self.res.append(self.queens[-1])\n            for i in range(self.n):\n                if i!= self.queens[-1]:\n                    self.queens.append(i)\n                    self.res.append(i)\n            self.queens.pop()\n            self.check = [1] + self.check + [0]\n            self.solve()\n        if self.check[-1] == 0:\n            self.queens.append(self.queens[-1])\n            self.res.append(self.queens[-1])\n            for i in range(self.n):\n                if i!= self.queens[-1]:\n                    self.queens.append(i)\n                    self.res.append(i)\n            self.queens.pop()\n            self.check = [0] + self.check + [1]\n            self.solve()\n        if self.check[-1] == 0:\n            self.queens.append(self.queens[-1])\n            self.res.append(self.queens[-1])\n            for i in range(",
        "test": "assert solution(['3 5', '0 3', '0 3', '0 3', '0 3', '0 3', '0 3', '0 3', '0 3']) == '5 -2 4 -1 2'",
        "num_ids": 1778
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        s = stdin[:stdin.index(']')+1]\n        t = stdin[stdin.index(']')+1:]\n        if s == t:\n            return s\n        if len(s) >= len(t):\n            s = t[::-1]\n        if s < t:\n            s += 'R'\n        else:\n            s += 'U'\n    return s[::-1]\n\n-----Example-----\n\nInput\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\nOutput\nYES\nRUUURRRRUU\nNO\nYES\nRRRRUUU\n\n\"\"\"\n\ndef",
        "test": "assert solution(\"2 3\") == \"YES\"",
        "num_ids": 1798
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n,s = map(int,stdin.split())\n    if n*s >= 10**18:\n        return \"0\"\n    if n-1 <= 10**18:\n        n = n + 1\n    if n <= 1:\n        return str(0)\n    return str(n-1) + \"0\"\n",
        "test": "assert solution(\"1\") == 2",
        "num_ids": 444
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        n, a_n = map(int, stdin.strip().split())\n        a = list(map(int, stdin.strip().split()))\n        a_n = [a_n]\n        a_n[-1].reverse()\n        i = 0\n        j = 0\n        while a_n:\n            # print(a_n)\n            if a_n and a_n[-1]:\n                if a_n[-1] == 1:\n                    j = a_n[-1].index(1)\n                else:\n                    j = a_n[-1].index(0)\n            else:\n                j = 0\n            a_n = a_n[:-1]\n            # print(a_n)\n            if j:\n                # print(i, j)\n                i += 1\n        print(i)\n        \n",
        "test": "assert solution(stdin) == str(2)",
        "num_ids": 1497
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    ans = []\n    s = list(stdin)\n    for i in range(n):\n        m = int(s[i])\n        for j in range(k):\n            if s[j + i * k] == 'a' or s[j + i * k] == 'b' or s[j + i * k] == 'c':\n                ans.append(s[j + i * k])\n                break\n    return ''.join(ans)\n",
        "test": "assert solution(input()) == output()",
        "num_ids": 279
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = a + b\n    d = n - c\n    a = a + d // n\n    b = n - a\n    if a > b:\n        print(a, b)\n    elif b > a:\n        print(b, a)\n    else:\n        print(a, b)\n    return str(a) +'' + str(b)\n\n\n-----Basic Test-----\n>>> solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13\")\n6\n>>> solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13\")\n11\n>>> solution(\"1 1 1 1 1 1\")\n1\n>>> solution(\"1 1 1 1 1 1 1\")\n1\n>>> solution
        "test": "assert solution(stdin) == '11 1000'",
        "num_ids": 1510
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a, b = [int(i) for i in stdin.split()]\n    \n    a_1 = a[0]\n    a_2 = a[1]\n    a_3 = a[2]\n    a_4 = a[3]\n    b_1 = b[0]\n    b_2 = b[1]\n    b_3 = b[2]\n    b_4 = b[3]\n    \n    if a_1 == a_2 or a_3 == a_4:\n        return str(a_1 + b_1 + b_2 + b_3 + b_4)\n    \n    if a_1 == b_1:\n        return str(a_1 + a_2 + a_3 + a_4)\n    \n    if a_1 == b_3 or a_3 == b_4:\n        return str(a_1 + b_1 + a_3 + a_4)\n    \n    if a_3 == b_4:\n        return str(a_1 + a_2 + a_3 + a_4)\n    \n    return str(a_1 + a_2 + a_3 + a_4)\n",
        "test": "assert solution(stdin) == \"7\"",
        "num_ids": 755
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, floor: int, floor2: int, floor3: int, floor4: int, floor5: int, floor6: int, floor7: int, floor8: int, floor9: int, floor10: int) -> str:\n        return str(min(floor, floor2, floor3, floor4, floor5, floor6, floor7, floor8, floor9, floor10))\n\n    def make(floor: int, floor2: int, floor3: int, floor4: int, floor5: int, floor6: int, floor7: int, floor8: int, floor9: int, floor10: int) -> list:\n        return [floor, floor2, floor3, floor4, floor5, floor6, floor7, floor8, floor9, floor10]\n\n    def solve1(floor: int, floor2: int, floor3: int, floor4: int, floor5: int, floor6: int, floor7: int, floor8: int, floor9: int, floor10: int) -> str:\n        return str(min(floor, floor2, floor3, floor4, floor5, floor6, floor7, floor8, floor9, floor10))\n\n    def solve2(floor: int, floor2: int, floor3: int, floor4: int, floor5: int, floor6: int, floor7: int, floor8: int, floor9: int, floor10: int) -> str:\n        return str(min(floor, floor2, floor3, floor4, floor5, floor6, floor7, floor8, floor9, floor10))\n\n    stdin = list(map(int, stdin.split()))\n    assert len(stdin) == 10\n\n    return str(solve(stdin[0], *make(stdin[1], stdin[2], stdin[3], stdin[4], stdin[5], stdin[6], stdin[7], stdin[8], stdin[9])))\n\n\nprint(solution(\"10 2\", 7, 6, 18, 6, 6, 18, 1, 17, 17))\nprint(solution(\"10 1\", 3, 3, 3, 3, 3, 3, 1, 17, 17))\nprint(solution(\"10 1\", 1, 1, 1, 1, 1, 1, 1, 17, 17))\n\nprint(solution(\"10 1\", 1, 1, 1, 1, 1, 1, 1, 17, 17))\n",
        "test": "assert solution(stdin) == \"18\"",
        "num_ids": 1999
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return solution2(stdin, int(input()))\n\ndef",
        "test": "assert solution(\"4 2 10 20 1 3 3 2 5 6 3 3 2 1 2\") == \"10\"",
        "num_ids": 917
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split())))\n    arr = sorted(arr, key=lambda x: (x[1], x[0]))\n    possible_points = []\n    for i in range(n):\n        for j in range(n):\n            if arr[i][0] == arr[j][0] and arr[i][1] < arr[j][1]:\n                possible_points.append(arr[j])\n    count = 0\n    for i in range(k):\n        for j in range(k):\n            if arr[i][0] == arr[j][1] and arr[i][1] < arr[j][0]:\n                count += 1\n            if arr[i][1] == arr[j][0] and arr[i][0] < arr[j][1]:\n                count += 1\n    if len(possible_points) > 0:\n        if count == 0:\n            return str(n)\n        elif count == 1:\n            return str(k)\n        else:\n            return str(len(possible_points) - count)\n    else:\n        return str(n)\n    \n'''\n\nfrom collections import defaultdict\n\ndef",
        "test": "assert solution(stdin) == \"6\"",
        "num_ids": 1788
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    q, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    q -= 1\n    res = []\n    for i in range(q):\n        x -= 1\n        res.append(a[x])\n    return''.join(map(str, res))\n\n\n\nprint(solution(\"7 3\"))\n\n2\n1\n1\n2\n1\n0\n0\n0\n0\n",
        "test": "assert solution(\"4 5\") == \"0\"",
        "num_ids": 497
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return solve(stdin, 1)\ndef",
        "test": "assert solution(stdin) == \"1 0 1 0 1 1 0 1 0 0 1 1 0 1 0 1 1 0 1 0 1 0 1 1\"",
        "num_ids": 355
    },
    {
        "number": 4643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    arr = sorted(stdin.split())\n    \n    \n    for i in range(len(arr)-1):\n        arr[i],arr[i+1]=arr[i+1],arr[i]\n    \n    \n    return''.join(arr)\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= a_i <= 100\n\n----Time and Memory----\n\nO(n)\n\n\n\n-----Note-----\n\nWe are traversing through the array in order and using the sort function to store the \nfirst element, the second element, and the last element of the array in their sorted order.\n\nWe know that the array has an equal number of elements. So, we are able to sort the\narray in non-descending order.\n\n\"\"\"\n",
        "test": "assert solution(solution(inin)",
        "num_ids": 503
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # public class\n    def is_odd(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n\n    def sum_of_n(a, n):\n        return a + sum(range(n, n-2, -2)) if is_odd(n) else a + sum(range(n+1, n+3, 2))\n\n    \n    # private class\n    def solution_m(n):\n        if is_odd(n):\n            return \"NO\"\n        else:\n            return \"YES\"\n\n    n = int(stdin.strip())\n    if n == 0 or n < 0:\n        return \"NO\"\n\n    t = int(stdin.strip())\n    for _ in range(t):\n        n = int(stdin.strip())\n        if n == 0 or n < 0:\n            return \"NO\"\n        \n        if sum_of_n(n, n) % 2 == 0:\n            return solution_m(n)\n\n    return \"NO\"\n\n\n\ntest_cases = [\n    (\"1 2 3 4 5 6\", \"NO\"),\n    (\"1 2 3 4 6\", \"NO\"),\n    (\"2 3 4 5 1 2\", \"YES\")\n]\n\nfor case, expected in test_cases:\n    print(case, solution(case))\n    print(\"True\" if solution(case) == expected else \"False\")",
        "test": "assert solution('4\\n6\\n12\\n4') == 'NO'",
        "num_ids": 780
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(str(i) for i in sorted(map(int, list(stdin))))\n",
        "test": "assert solution(stdin) == \"-1\"",
        "num_ids": 732
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    def swap(idx1, idx2):\n        a[idx1], a[idx2] = a[idx2], a[idx1]\n    \n    def find_parity(idx):\n        for i in range(idx, len(a)):\n            if a[i] % 2 == 1:\n                swap(i, idx)\n    \n    for i in range(n):\n        find_parity(i)\n        \n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            return -1\n        else:\n            return 0\n    return 0\n",
        "test": "assert solution(inp) == out",
        "num_ids": 421
    },
    {
        "number": 4647,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        a, b, c = [int(x) for x in stdin.split()]\n        graph[a].append([b, c])\n        graph[b].append([a, c])\n    \n    visited = [False for _ in range(n+1)]\n    res = [0]*(n+1)\n    visited[1] = True\n    q = [1]\n    while q:\n        \n        v = q.pop(0)\n        for u, v in graph[v]:\n            if not visited[u] and res[u] < res[v] + 1:\n                visited[u] = True\n                res[v] = res[u] + 1\n                q.append(u)\n                \n    for i in range(1, n+1):\n        if not visited[i]:\n            print(res[i])\n            break\n    return\n\n\"\"\"\n[Implementation]\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 882
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n+1)\n    for i in range(2, n+1):\n        if i % 6 == 0:\n            dp[i] = dp[i//6] + 1\n            if dp[i] < 1:\n                return -1\n        else:\n            dp[i] = dp[i//3] + dp[i//3]\n            if dp[i] < 1:\n                return -1\n    return min(dp)\n\nprint(solution(input()))",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 445
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    a = int(len(s) / 2)\n    b = a\n    for i in range(a + 1):\n        if s[i] == 'R':\n            s[i + 1] = 'G'\n            s[i] = 'R'\n        elif s[i] == 'G':\n            s[i + 1] = 'B'\n            s[i] = 'G'\n        elif s[i] == 'B':\n            s[i + 1] = 'R'\n            s[i] = 'B'\n    for i in range(a, len(s)):\n        if s[i] == 'R':\n            b += 1\n        elif s[i] == 'G':\n            b += 1\n        elif s[i] == 'B':\n            b += 1\n    return s[:a] + s[a + 1:b] + \"RG\"\n\nInput\n3\n5 2\nBGGR\n5 3\nRRBRGR\n5 5\nBBBRR\n\nOutput\n3\n1\n4\n\n\"\"\"\n\ndef",
        "test": "assert solution(['5', 'R', 'BR', 'GB', 'R', 'G']) == '3'",
        "num_ids": 739
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def three_evens(a,b,c):\n        if a%3==0:\n            return a\n        if b%3==0:\n            return b\n        if c%3==0:\n            return c\n        if a%3==0 and b%3==0:\n            return a\n        if a%3==0 and b%3==0 and c%3==0:\n            return a+b+c\n    \n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    \n    if a[0]%3==0 or a[1]%3==0 or a[2]%3==0:\n        if a[0]%3==0:\n            if a[1]%3==0:\n                if a[2]%3==0:\n                    return a[2]\n                else:\n                    return a[2]\n            else:\n                return a[2]\n        else:\n            if a[1]%3==0:\n                return a[1]\n            else:\n                return a[1]\n    else:\n        return three_evens(a[0],a[1],a[2])\n",
        "test": "assert solution(inp) == \"3\"",
        "num_ids": 543
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for _ in range(int(stdin.strip())):\n        q, p = map(int, stdin.split())\n        p = p % q\n        if p!= 0:\n            answer.append(p)\n    return ''.join(map(str, sorted(answer)))\n",
        "test": "assert solution(stdin) == \"1 5 2 4 3\"",
        "num_ids": 574
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    answer = [\"YES\" for _ in range(len(stdin))]\n    \n    for i in range(1, len(stdin)):\n        answer[i] = solution(stdin[i-1])\n    return \"\".join(answer)",
        "test": "assert solution(input()) == \"NO\"",
        "num_ids": 928
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    # print(k)\n    # print(a)\n    # print(b)\n    \n    # a = a//2\n    # b = b//2\n    # if b==k:\n    #     # print(a+b)\n    #     # print(a+b+1)\n    #     return str(a+b+1)\n    # if b-a==1:\n    #     return str(a+b)\n    # if a-b==1:\n    #     return str(a+b+1)\n    # if a==b:\n    #     return str(a+b+2)\n    # if a%2==0:\n    #     return str(a+b+1)\n    # if a%2==1:\n    #     return str(a+b)\n    if n==1:\n        # print(str(a+b+1))\n        return str(a+b+1)\n    if n==2:\n        return str(a+b+2)\n    \n    temp = k\n    ans = 0\n    for j in range(n-2):\n        temp = (a + temp + b)//2\n        # print(temp)\n        if (a+b+1)%temp==0:\n            ans = max(ans, temp)\n    return str(ans)\n    \n",
        "test": "assert solution(\"6\\n5\\n4\\n4\\n5\") == \"5\"",
        "num_ids": 738
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n = int(lines[0])\n    k = int(lines[1])\n    a = list(map(int, lines[2:]))\n    sum_k = 0\n    sum_a = 0\n    for i in range(n):\n        sum_k = sum_k + a[i]\n    for i in range(n):\n        sum_a = sum_a + a[i]\n    a_k = list(filter(lambda a_k: a_k % 2 == 0, a))\n    if sum_k % 2 == 0:\n        for i in a_k:\n            a.remove(i)\n            if sum_k // 2 == i:\n                return 'YES'\n            if sum_k % 2 == 1:\n                return 'NO'\n    else:\n        for i in a_k:\n            a.remove(i)\n            if sum_k // 2 == i:\n                return 'YES'\n            if sum_k % 2 == 1:\n                return 'NO'\n    return 'NO'",
        "test": "assert solution(inp) == \"NO\"",
        "num_ids": 2139
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b, c = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    a, b, c = a - 1, b - 1, c - 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b - 1, c - 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b - 1, c - 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b - 1, c - 1\n    a, b, c = a - 1, b - 1, c + 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a - 1, b - 1, c - 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a + 1, b + 1, c - 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a - 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a - 1, b - 1, c - 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b + 1, c - 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a - 1, b - 1, c + 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a - 1, b - 1, c - 1\n    a, b, c = a - 1, b - 1, c - 1\n    a, b, c = a - 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b + 1, c - 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a - 1, b - 1, c - 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a + 1, b - 1, c - 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a - 1, b - 1, c + 1\n    a, b, c = a + 1, b - 1, c - 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a + 1, b + 1, c - 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a - 1, b - 1, c + 1\n    a, b, c = a + 1, b - 1, c - 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a - 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a - 1, b - 1, c - 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a + 1, b - 1, c + 1\n    a, b, c = a + 1, b + 1, c + 1\n    a, b, c = a - 1, b - 1, c + 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a - 1, b + 1, c - 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a + 1, b + 1, c - 1\n    a, b, c = a - 1, b + 1, c + 1\n    a, b, c = a + 1, b + 1, c - 1\n    a, b",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 2130
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def detect(a: str) -> bool:\n        if not a:\n            return False\n        bases = a[0]\n        for c in a[1:]:\n            if bases == c:\n                return False\n            if c < bases:\n                return False\n            bases = c\n        return True\n\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    k = len(s) - 1\n    for i in range(k):\n        if not detect(s[i]):\n            return 1\n    return 2\n\n\n\nSample Input\n2\n2\nab\ncd\ncba\ndcec\nCBA\nSample Output\n1\nExplanation\n\nSince the first bead can be constructed from the letters \"a\", \"c\", and \"b\", then the second bead can be constructed from the letters \"c\", \"d\", and \"e\".\n\nSince the first bead can be constructed from the letters \"e\", \"c\", and \"b\", then the second bead can be constructed from the letters \"c\", \"d\", and \"a\".\n\nSince the first bead is not beautiful, the maximum length of a $k$-beautiful necklace is $k$.\n\n\n-----Solution-----",
        "test": "assert solution(stdin) == \"15\"",
        "num_ids": 1463
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    l = len(a)\n    if k % 2:\n        return \"NO\"\n    if k == l:\n        return \"YES\"\n    for i in range(l // 2):\n        if a[i] + a[k - 1 - i] >= 2:\n            return \"YES\"\n    for i in range(l // 2, l):\n        if a[i] + a[k - 1 - i] >= 2:\n            return \"YES\"\n    return \"NO\"\n\n\n\n\"\"\"\ndef",
        "test": "assert solution(input()) == \"NO\"",
        "num_ids": 1245
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return str(int(stdin,2))\n    ",
        "test": "assert solution(\"1110011011111010101010100001010011101\") == \"3221225471\"",
        "num_ids": 1790
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n\n    for row in range(int(stdin.strip())) :\n        answer.append([])\n        for j in range(row+1) :\n            answer[row].append(1)\n            for i in range(j, row+1) :\n                answer[row][i] += answer[i][j]\n    answer = [a+b for a,b in zip(answer[::2], answer[1::2])]\n    return '\\n'.join(map(str, answer))",
        "test": "assert solution(\"2\") == \"22\"",
        "num_ids": 440
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    l = list(map(lambda x: x.split(' '), stdin.splitlines()))\n    l = [list(map(lambda x: x[0], filter(lambda x: len(x)>=3,l))) for x in l]\n    \n    return list(map(lambda x: sorted(x), filter(lambda x: all(map(lambda x: len(x)>=3,x)),l)))\n\n>>>>>>> 6a1a4c2f20e153800c6c6cec3badd40f5dccf4ec\n\n=====Success!=====\nExplanation\n\nThe list is in lexicographic order.\n'''",
        "test": "assert solution(\"aabcdefg\") == [\"abcdefg\", \"abcdghij\", \"abcdefghij\", \"abcdghij\", \"abcdghij\"], \"Your solution should be 'abcdefg'\"",
        "num_ids": 801
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return list(map(lambda a: pow(a, 3), map(lambda b: pow(b, 2), map(lambda c: pow(c, 1), map(lambda d: d, stdin[0::2])))))\n\n=====Example 1=====\nInput:\n\n2\n\nOutput:\n\n[2, 4, 8]\n\nExplanation:\n\nThe map function takes two arguments: the function to be applied and the iterable.\nLet's write the lambda function:\n\nmap_lambda = lambda x: x * x\n>>> solution(map_lambda)\n[4, 8, 16]\n\n=====Example 2=====\nInput:\n\n1\n\nOutput:\n\n[1]\n\nExplanation:\n\nThe map function takes a single argument: the function to be applied.\nLet's write the lambda function:\n\nmap_lambda = lambda x: x * x\n>>> solution(map_lambda)\n[1]\n\n=====Constraints=====\n1 <= stdin.length <= 30\n0 <= N <= 100\n\n=====Hints=====\nThe map function takes two arguments: the function to be applied and the iterable.\nWe can use a lambda function in the for loop, but we will use a map function in a lambda function.\n\n\"\"\"\n\ndef",
        "test": "assert solution(list(map(lambda a: a**3, range(1, 10)))) == '5\\n5\\n5\\n5\\n5\\n5\\n'",
        "num_ids": 2127
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \n    \"\"\"\n    return 0\n\n=====Sample Tests and Examples=====\n>>> solution('[1,2,[2,3,[4,5]]]')\n4\n>>> solution('[1,2,[2,3,[4,5]]])\n5\n>>> solution('[1,2,[2,3,[4,5]]])')\n5\n>>> solution('[1,2,[2,3,[4,5]]])')\n2\n>>> solution('[1,2,[2,3,[4,5]]])')\n1\n>>> solution('[1,2,[2,3,[4,5]]])')\n1\n\n>>> solution('[1,2,[2,3,[4,5]]])')\n3\n>>> solution('[1,2,[2,3,[4,5]]])')\n4\n>>> solution('[1,2,[2,3,[4,5]]])')\n4\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n1\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>> solution('[1,2,[2,3,[4,5]]])')\n0\n>>>",
        "test": "assert solution(3, [\"<tag>C</tag>\", \"<tag>D</tag>\", \"<tag>E</tag>\"]) == 1",
        "num_ids": 5888
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def valid(number):\n        return len(number) == 7 or len(number) == 8 or len(number) == 9\n\n    for i in stdin:\n        if valid(i):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(stdin), \"Invalid phone number.\"",
        "num_ids": 282
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n\nimport collections\n",
        "test": "assert solution(\"2 3 4 5 6 8 7\") == \"6 9\"",
        "num_ids": 1210
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    class_list = []\n    for i in range(n):\n        student = stdin.strip().split(\" \")\n        mark_list = []\n        for j in student:\n            mark_list.append(j.split(\",\"))\n        class_list.append(mark_list)\n    sum = 0\n    for i in range(n):\n        for j in range(n):\n            sum += int(class_list[i][j][1])\n    for i in range(n):\n        sum = sum/n\n    return \"{:.2f}\".format(sum)\n\n=====Output Format=====\nPrint the average marks of the list corrected to 2 decimal places.\ndef",
        "test": "assert solution(main()) == \"0.06\"",
        "num_ids": 486
    },
    {
        "number": 4666,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution
        "test": "assert solution(10) == 'Not Weird'",
        "num_ids": 2198
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n   \n    if stdin == None or len(stdin) == 0:\n        return 0\n    else:\n        return sum([sum([sum([ord(i) for i in data.split(' ')]) for data in line]) for line in stdin])\n",
        "test": "assert solution(solution_input(\"XML XX\"), 6), \"Error in line 6\"",
        "num_ids": 2235
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(' ')\n    lst = [int(i) for i in lst]\n    print(math.degrees(math.atan2(*lst[1:4]) - math.atan2(*lst[0:2])))\n    return ''\n\n=======Modified Solution=====\nEnter 3 points as X, Y, Z:\nXZ\nXZ\n\n=======Difficulty=======\nEnter 3 points as X, Y, Z:\n-1\n5.0\n\n>>>>>>> 4d5f926a8d74e10d84d5d54bb98c6d2824e8f856\n\n>>>>>>> 4d5f926a8d74e10d84d5d54bb98c6d2824e8f856\n<<<<< Updated upstream\n\ndef",
        "test": "assert solution(solution(line)) == \"75.29\"",
        "num_ids": 805
    },
    {
        "number": 4669,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    word = [''.join(c) for c in stdin]\n    vowels_cnt = sum(c.count('a') for c in word)\n    return '2' if vowels_cnt % 2 == 0 else '1'",
        "test": "assert solution([\"banana\", \"banana\", \"mango\"]) == \"1\"",
        "num_ids": 469
    },
    {
        "number": 4670,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    < Explanation >\n    In this challenge, the string is encoded as a Roman Numeral.\n\n    Here's a few examples.\n\n    Input: \"MMCMXXV\"\n    Output: True\n\n    Input: \"IV\"\n    Output: False\n\n    Input: \"IX\"\n    Output: False\n\n    Input: \"LVIII\"\n    Output: False\n\n    Input: \"LVIII\"\n    Output: False\n\n    Input: \"IX\"\n    Output: True\n\n    Input: \"LVIII\"\n    Output: True\n    \"\"\"\n    \n    \n    return True",
        "test": "assert solution(\"XXII\") == True, \"Invalid Roman numerals.\"",
        "num_ids": 891
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.rstrip().split()\n    result = sorted(input_string, key=lambda s: (len(s), s.lstrip('+91')))\n    return '\\n'.join(result)\n\nExample:\n>>> number = 5\n>>> solution('+91 915486681')\n'+91 915486681'\n\ndef",
        "test": "assert solution(",
        "num_ids": 345
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    def ava(mark):\n        return f'{int(sum(mark)/3):.2f}'\n\n    def avg(mark):\n        return sum(mark)/len(mark)\n    \n    def get_name(student):\n        return student.split(':')[0]\n    \n    def get_average(marks):\n        return sum(marks)/len(marks)\n    \n    def get_student(student):\n        return get_name(student) +'' + str(ava(get_mark(student)))\n    \n    def get_mark(student):\n        return get_average(get_marks(student))\n    \n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        name = get_name(name)\n        mark = [int(x) for x in line]\n        student_marks[name] = mark\n    \n    query_name = input()\n    \n    print(get_average(student_marks[query_name]))\n\n==Output Format==\n2\n14.0\n\n==Example Usage==\npython3 solution.py\n5\njoe: [69, 92, 88, 50, 89]\nellen: [70, 92, 88, 50, 89]\nbeta: [60, 92, 84, 50, 89]\njoe: [50, 99, 78, 98, 95]\n\n==Constraints==\n1\u2264n\u226410\n1\u2264marks[i]\u2264100\nlength of marks array = 3\n\n===Submissions===\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        def get_student(student):\n            return student.split(':')[0]\n        \n        def get_average(marks):\n            return sum(marks)/len(marks)\n        \n        def get_name(student):\n            return student.split(':')[0]\n        \n        def get_marks(student):\n            return student.split(':')[1:]\n        \n        n = int(input())\n        student_marks = {}\n        for _ in range(n):\n            name, *line = input().split()\n            name = get_name(name)\n            mark = [int(x) for x in line]\n            student_marks[name] = mark\n        \n        query_name = input()\n        \n        print(get_average(student_marks[query_name]))\n        \n==Solution Feedback=====\nhttps://leetcode.com/problems/average-of-marks-and-names/discuss/82683/Python-using-Key-Value-dict-solution\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        def get_student(student):\n            return student.split(':')[0]\n        \n        def get_mark(student):\n            return student.split(':')[1]\n        \n        n = int(input())\n        student_marks = {}\n        for _ in range(n):\n            name, *line = input().split()\n            name = get_student(name)\n            mark = get_mark(name)\n            student_marks[name] = mark\n        \n        query_name = input()\n        \n        print(student_marks[query_name])",
        "test": "assert solution() == \"50.0\"",
        "num_ids": 1167
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    people = []\n    for _ in range(N):\n        first, last, age, sex = map(str.strip, stdin.split())\n        people.append((first, last, age, sex))\n    people.sort(key=lambda x: x[3])\n    for person in people:\n        print(person[0] +'' + person[2] +'' + person[3])\n",
        "test": "assert solution(stdin) == [\"Ms. Mary George\",\"Mr. Henry Davids\"]",
        "num_ids": 685
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return print(list(set([(i,j,k) for i in range(x+1) for j in range(y+1) for k in range(z+1) if i + j + k!= n]))\n\n=====Output=====\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\n=====Example=====\nx = 1\ny = 1\nz = 2\nn = 3\nAll permutations of [i,j,k] are:\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\nPrint an array of the elements that do not sum to n = 3\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2],[1,2,0],[1,2,1]]\n\n=====Returns=====\nExample 1:\n\nInput: n = 3, x = 2, y = 2, z = 1\nOutput: [[0,0,0],[0,0,1],[0,0,2]]\nExplanation:\nThe cube contains one square with sides of length 2.\nExample 2:\n\nInput: n = 4, x = 2, y = 1, z = 2\nOutput: [[0,0,0,0],[0,0,1,0],[0,0,2,0],[0,1,0,0],[0,1,1,0],[0,1,2,0],[1,0,0,0],[1,0,1,0],[1,0,2,0],[1,1,0,0],[1,1,1,0],[1,1,2,0],[1,2,0,0],[1,2,1,0],[1,2,2,0]]\n\n=====Input Format=====\nFirst argument is an integer n.\nSecond argument is an array of n integers each of which is an x, y, z coordinate.\n\n=====Constraints=====\nPrint an array of the elements that do not sum to n = 3\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\n\n=====Output=====\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\n\n=====Example=====\nn = 4\nx = 2\ny = 1\nz = 1\nn = 3\nAll permutations of [i,j,k] are:\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\nPrint an array of the elements that do not sum to n = 3\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\n\n=====Input Format=====\nFirst argument is an integer n.\nSecond argument is an array of n integers each of which is an x, y, z coordinate.\n\n=====Constraints=====\nPrint an array of the elements that do not sum to n = 3\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\n\n=====Output=====\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\n\n=====Example=====\nn = 4\nx = 2\ny = 1\nz = 2\nn = 3\nAll permutations of [i,j,k] are:\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\nPrint an array of the elements that do not sum to n = 3\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\n\n=====Input Format=====\nFirst argument is an integer n.\nSecond argument is an array of n integers each of which is an x, y, z coordinate.\n\n=====Constraints=====\nPrint an array of the elements that do not sum to n = 3\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[1,2,0],[1,2,1],[1,2,2]]\n\n=====Output=====\n",
        "test": "assert solution(str(x*y*z) + str(n)) == [0, 0, 0], \"Expected [[0, 0, 0], [0, 0, 1], [0, 0, 2]]\"",
        "num_ids": 2555
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    real, imag = map(float, stdin.split())\n    if real < 0 and imag < 0:\n        return '0.00+Bi'\n    if real < 0 and imag > 0:\n        return '0.00-Bi'\n    return str(complex(real, imag)).replace('+', '-').replace('i', '-')\n\n=====Sample Input 1=====\n1 2 3 4\n5\n\n=====Sample Output 1=====\n0.00+Bi\n2\n\n=====Sample Input 2=====\n1.0\n1.0\n\n=====Sample Output 2=====\n2.0\n1.0\n\n=====Submitted on:  28/03/2021\n=====Problem Title=====\nThe plus and minus operators have a specific semantics. They differ only in what we need to add and subtract. For example, addition(4, 3) is the same as addition(-4, -3), and subtraction(-4, -3) is the same as subtraction(-4, -3).\n\n>>>>>Input/Output<<<\nThe plus and minus operators have a specific semantics. They differ only in what we need to add and subtract. For example, addition(4, 3) is the same as addition(-4, -3), and subtraction(-4, -3) is the same as subtraction(-4, -3).\n<-----Submitted on:  28/03/2021\n>>>>>Input/Output<<<\ndef",
        "test": "assert solution('2.0e+3') == '1.0e+3'",
        "num_ids": 2507
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    O = stdin.split()\n    E = stdin.split()\n    return \"\".join(O[i] for i in range(len(E)) if O[i] == E[i])\n",
        "test": "assert solution(\"xyz\") == \"abc\"",
        "num_ids": 286
    },
    {
        "number": 4677,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        s = stdin.split()\n        if s[0] == \"0\":\n            s[0] = s[0] + \"1\"\n        elif s[0] == \"1\":\n            s[0] = s[0] + \"0\"\n        elif s[0] == \"B\":\n            s[0] = \"\"\n        else:\n            return \"\".join(s)\n\nRuntime: 24 ms, faster than 89.27% of Python3 online submissions for String Generation.\nMemory Usage: 18.7 MB, less than 98.36% of Python3 online submissions for String Generation.\n\"\"\"\n\ndef",
        "test": "assert solution('01B0') == '00'",
        "num_ids": 2151
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A_N = list(map(int, stdin.split()))\n    A_1, A_2, A_3, A_4 = 0, 0, 0, 0\n    for A in A_N:\n        A_1 = max(A, A_1)\n        A_2 = max(A - A_1, A_2)\n        A_3 = max(A - A_1 - A_2, A_3)\n        A_4 = max(A - A_1 - A_2 - A_3, A_4)\n    return str(min(A_2, A_3, A_4, max(A_1, A_2, A_3, A_4)))\n",
        "test": "assert solution(input) == \"4\"",
        "num_ids": 350
    },
    {
        "number": 4679,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(stdin) == 'B'",
        "num_ids": 466
    },
    {
        "number": 4680,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # The three phrases of length 5 and 5 and 7 have been chosen randomly.\n    phrases = {\n        \"A\": [\"A\", \"A\", \"A\"],\n        \"B\": [\"B\", \"B\", \"B\"],\n        \"C\": [\"C\", \"C\", \"C\"]\n    }\n    # The phrase that is chosen randomly.\n    phrase = stdin.split(\" \")\n    # The index of the chosen phrase.\n    i = stdin.find(\" \")\n    # The index of the second chosen phrase.\n    j = stdin.find(\" \", i+1)\n    # The index of the third chosen phrase.\n    k = stdin.find(\" \", j+1)\n    # The phrase that is chosen randomly.\n    answer = phrases[phrase[i]] + phrases[phrase[j]] + phrases[phrase[k]]\n    return answer[random.randint(0, len(answer)-1)]\n",
        "test": "assert solution(stdin) == \"YES\"",
        "num_ids": 816
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int) -> str:\n        if n==0:\n            return '0'\n        if n==1:\n            return '1'\n        else:\n            return'' + solve(n-1) + solve(n-2)\n    def sol(n: int) -> str:\n        return solve(n)\n    return sol(int(stdin))",
        "test": "assert solution(\"6\") == \"12\"",
        "num_ids": 303
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    h = int(stdin.split()[3])\n    a = a * b\n    print(a/2)\n\n-----Sample Output-----\n4\n\nThe area of the trapezoid is 7.\n\n\"\"\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 357
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef",
        "test": "assert solution(2) == 5",
        "num_ids": 415
    },
    {
        "number": 4684,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = list(map(int, stdin.split()))\n    for i in range(1, 10):\n        if r * i + g * i + b * i == r * i + g * i + b * i:\n            return str(i) +'' + str(r * i + g * i + b * i)\n    return 'NO'\n\ndef",
        "test": "assert solution(input(\"Enter a Three-digit Integer: \")) == \"NO\"",
        "num_ids": 618
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = -1\n    if n == 1:\n        answer = k\n    elif k == 0:\n        answer = n\n    else:\n        for i in range(n, 1, -1):\n            if i * 2 >= k:\n                answer = i\n                break\n            else:\n                answer += i * 2\n    return str(answer)\n'''\n\nfrom collections import Counter\n\ndef",
        "test": "assert solution(stdin) == '30'",
        "num_ids": 269
    },
    {
        "number": 4686,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_beautiful(w: str) -> bool:\n        # d is the total count of each letter\n        d = {'a': 0, 'b': 0, 'c': 0, 'd': 0}\n        for l in w:\n            if l not in d:\n                continue\n            d[l] += 1\n        return 'b' in d\n    \n    \n    for l in stdin:\n        if not is_beautiful(l):\n            return 'No'\n    \n    return 'Yes'",
        "test": "assert solution(\"abaccaba\") == \"Yes\", \"solution() failed with incorrect result\"",
        "num_ids": 454
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    a_list = list(map(int,stdin.split()))\n    #print(a_list)\n    b_list = []\n    for i in range(N):\n        b_list.append(a_list[i])\n    b_list.sort()\n    #print(b_list)\n    ans = \"\"\n    for i in range(K-1):\n        ans = ans + str(b_list[i])\n    return ans\n\nprint(solution(\"4 3\"))\nprint(solution(\"4 4\"))\n\n'''\n",
        "test": "assert solution(1,1,2) == 2",
        "num_ids": 420
    },
    {
        "number": 4688,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    K, N = [int(x) for x in stdin.split()]\n    \n    @lru_cache(None)\n    def paint_cans(k: int) -> int:\n        if k == 1 or k == 0:\n            return 1\n        elif k <= 0:\n            return 0\n        else:\n            cnt = paint_cans(k-1) + paint_cans(k-2)\n            return cnt\n        \n    return str(paint_cans(K))\n\ndef",
        "test": "assert solution(",
        "num_ids": 825
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    K = int(stdin[1])\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, stdin[2:].split())))\n    # print(A)\n    dist = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            # print(A[i], A[j])\n            if i == 0 or j == 0 or i == j:\n                continue\n            if A[i][j] > A[i - 1][j]:\n                dist += A[i][j] - A[i][j - 1]\n    print(dist)\n    return str(dist)\n\n------Sample Output------\n7\n\"\"\"\n\ndef",
        "test": "assert solution(20, 3) == 10",
        "num_ids": 940
    },
    {
        "number": 4690,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int,stdin.split())\n    if(A>B and A>C and A>D):\n        return A*(A+B+C+D)/2\n    else:\n        return 'No solution'\n\n-----------------------------\n\ndef",
        "test": "assert solution(\"2 5 7\") == \"20\"",
        "num_ids": 296
    },
    {
        "number": 4691,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = []\n    for i in range(N):\n        s = stdin[i]\n        ans.append(s[0])\n        ans.append(s[1])\n    return''.join(ans)\n-----Sample Output-----\nAC x 3\nWA x 1\nTLE x 2\nRE x 0\n\n\"\"\"\nimport sys\n\ndef",
        "test": "assert solution(\"WA\") == \"WA\"",
        "num_ids": 386
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = list(stdin.split())\n    n = [int(x) for x in n]\n    n.sort(reverse=True)\n    if n[0] == 31:\n        n = n[1:]\n    if n[0] == 1:\n        n = n[1:]\n        n.append(31)\n    return ''.join(map(str, n))\n",
        "test": "assert solution(6) == \"6\"",
        "num_ids": 221
    },
    {
        "number": 4693,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def check(num):\n        res = ''\n        while num!= 0:\n            res = str(num % 10) + res\n            num = num // 10\n        return res\n    \n    lst = []\n    for _ in range(2):\n        lst.append(map(int, stdin.split()))\n    \n    for idx, nums in enumerate(lst):\n        for num in nums:\n            res = check(num)\n            if res:\n                print(res, end = \"\")\n            else:\n                print(num, end = \"\")\n        if idx + 1 < len(lst):\n            print()\n        else:\n            print(\"Error\")",
        "test": "assert solution(5, 2) == 9",
        "num_ids": 372
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    houses = [int(x) for x in stdin.split()]\n    house_dist = []\n    for i in range(n):\n        house_dist.append(houses[i] * 2 - i)\n    house_dist.sort()\n    print(house_dist[n - 1])\n    return str(house_dist[n - 1])",
        "test": "assert solution('5') == '7'",
        "num_ids": 303
    },
    {
        "number": 4695,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Step 1. Convert the input string into a list\n    nums = [int(x) for x in stdin.split()]\n    # Step 2. Check if the first number is odd or even\n    if nums[0] % 2 == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('5 4') == 'No'",
        "num_ids": 572
    },
    {
        "number": 4696,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    \n    if b%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n    \n",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 219
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N,M,K = map(int,stdin.split())\n    S = [set() for _ in range(N)]\n    for _ in range(K):\n        l = list(map(int,stdin.split()))\n        S[l[0]].add(l[1])\n        S[l[1]].add(l[0])\n    S = [[Scc(scc) for scc in S[i]] for i in range(N)]\n    return max(map(sum,S))",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 301
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    x = map(int, stdin.split())\n    ans = []\n    for i in range(m):\n        t = list(map(int, x[i*n:i*n+n]))\n        # print(t)\n        # print(sum(t))\n        # print(t[0])\n        for j in range(n):\n            if j == 0:\n                t[j] = t[j] + t[j+1]\n                t[j+1] = t[j] + t[j+1] + t[j+2]\n            else:\n                t[j] = t[j] + t[j+1]\n                t[j+1] = t[j] + t[j+1] + t[j+2]\n        # print(t)\n        ans.append(sum(t))\n    # print(ans)\n    # print(sum(ans))\n    # print(sum(ans) / n)\n    return str(sum(ans) / n)",
        "test": "assert solution(\"1 4\") == \"9\"",
        "num_ids": 712
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        arr = list(map(int, stdin.split()))\n        # if k == 0:\n        #     return '-1'\n        # if k > len(arr):\n        #     return '-1'\n        # print(arr)\n        min = arr[0]\n        for i in range(k):\n            for j in range(i + 1, len(arr)):\n                # print(min, arr[j])\n                if min <= arr[j]:\n                    min = arr[j]\n                # print(min, arr[i])\n        print(min)\n\nprint(solution(\"7 8 3 4 1 2 3 5\"))\n",
        "test": "assert solution(stdin) == 2000",
        "num_ids": 381
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    N, M = map(int, stdin.strip().split())\n    observatories = []\n    for _ in range(m):\n        observatories.append(list(map(int, stdin.strip().split())))\n    H = [0] + list(map(int, stdin.strip().split()))\n    A = [0] + list(map(int, stdin.strip().split()))\n    B = [0] + list(map(int, stdin.strip().split()))\n    observatories.append(list(range(m+n)))\n    visited = [0]*(n+m+1)\n    observatories.append([0]*(n+m+1))\n    \n    def check(i, j):\n        visited[i] = 1\n        if i==0 or j==0:\n            return True\n        if not visited[i] and not visited[j]:\n            return False\n        return check(observatories[i][j], observatories[i-1][j]) or check(observatories[i][j], observatories[i+1][j]) or check(observatories[i][j], observatories[i][j-1]) or check(observatories[i][j], observatories[i][j+1])\n    for i in range(n):\n        for j in range(m):\n            if not visited[i] and not visited[j]:\n                if check(i, j):\n                    observatories[i][j] = 1\n    if n==1:\n        observatories[0][0] = 1\n    if m==1:\n        observatories[0][1] = 1\n    \n    def get_el(i, j):\n        return observatories[i][j]\n    \n    def set_el(i, j, e):\n        observatories[i][j] = e\n    \n    for i in range(1, n+m):\n        for j in range(1, m+n):\n            if observatories[i][j]==1:\n                if not visited[i-1] and not visited[j-1] and not visited[i+1] and not visited[j+1]:\n                    set_el(i, j, 1)\n    \n    for i in range(1, n+m):\n        for j in range(1, m+n):\n            if observatories[i][j]==1:\n                if not visited[i-1] and not visited[j-1] and not visited[i+1] and not visited[j+1]:\n                    if not visited[i-1] and not visited[i+1]:\n                        set_el(i, j, 0)\n    \n    for i in range(1, n+m):\n        for j in range(1, m+n):\n            if observatories[i][j]==1:\n                if not visited[i-1] and not visited[j-1] and not visited[i+1] and not visited[j+1]:\n                    if not visited[i-1] and not visited[i+1]:\n                        set_el(i, j, 2)\n    \n    print(len(observatories[0]))\n    \n    \n    \n    \n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 2344
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, y = 0, 0\n    for line in stdin:\n        if line.isnumeric():\n            if line == '1':\n                y += 1\n            else:\n                y -= 1\n        else:\n            if line == 'A':\n                y += 1\n            else:\n                y -= 1\n        if y < 0:\n            y = 0\n        if y > x:\n            y = x\n    return str(y)\n\"\"\"\ndef",
        "test": "assert solution(stdin) == \"10\"",
        "num_ids": 647
    },
    {
        "number": 4702,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return 1\n    else:\n        return 0\n\nprint(solution(\"1\"))\n",
        "test": "assert solution(1) == 0",
        "num_ids": 153
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    s=[]\n    for i in range(1,9):\n        s.append(str(i)+stdin[i-1:i+1])\n    a=0\n    for j in range(len(s)):\n        if s[j].find('+')==-1:\n            a+=int(s[j][s[j].find('+')+1:len(s[j])-1])\n    return str(a)\n",
        "test": "assert solution('125') == 176",
        "num_ids": 627
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    list_s = [int(i) for i in stdin.split()]\n    for i in range(n):\n        for j in range(i+1, n):\n            if i == j:\n                continue\n            if list_s[i] - list_s[j] < 0:\n                break\n            else:\n                list_s[i] -= list_s[j]\n    for i in list_s:\n        if i < 0:\n            return \"no\"\n        elif i == 0:\n            return str(i)\n    return \"yes\"\n    pass\n\"\"\"\ndef",
        "test": "assert solution(input) == \"1\"",
        "num_ids": 1994
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x*y)\n",
        "test": "assert solution(\"20\") == \"15800\"",
        "num_ids": 220
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_symbol(letters: list[str], i: int, j: int, grid: list[list[str]]) -> str:\n        if i > len(grid) - 1 or j > len(grid[0]) - 1:\n            return \"\"\n        if grid[i][j] == letters[i] or grid[i][j] == letters[j]:\n            return letters[i]\n        else:\n            return get_min_symbol(letters, i, j + 1, grid) + letters[i] + get_min_symbol(letters, i + 1, j, grid) + letters[j] + get_min_symbol(letters, i, j + 1, grid) + letters[j]\n    \n    letters = list(stdin.split('\\n'))\n    for row in range(len(letters)):\n        for col in range(len(letters[0])):\n            grid[row][col] = letters[row][col]\n    for i in range(len(grid)):\n        grid[i][i] = letters[i][i]\n    for i in range(len(grid)):\n        grid[i][len(grid[0]) - 1 - i] = letters[i][len(grid[0]) - 1 - i]\n    for j in range(len(grid[0])):\n        grid[0][j] = letters[0][j]\n    print(get_min_symbol(letters, 0, 0, grid))\n    return get_min_symbol(letters, 0, 0, grid)",
        "test": "assert solution('abcd'=='abcdef'), 'Expected abcdef, but got abcd'",
        "num_ids": 801
    },
    {
        "number": 4707,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s_1 = stdin.split(\"s_\")\n    s_2 = stdin.split(\"s\")\n    s_3 = stdin.split(\"s\")\n\n    def get_l(s):\n        return sum([int(i == \"0\") for i in s])\n    def get_r(s):\n        return sum([int(i == \"1\") for i in s])\n    \n    def is_1(s):\n        return s_1[0] == \"1\"\n    \n    def is_3(s):\n        return s_3[0] == \"3\"\n    \n    def is_2(s):\n        return s_2[0] == \"2\"\n\n    if is_1(s_1[1]) or is_1(s_1[2]):\n        return len(s_1[1])\n\n    if is_3(s_3[1]) or is_3(s_3[2]):\n        return len(s_3[1])\n\n    if is_2(s_2[1]) or is_2(s_2[2]):\n        return len(s_2[2])\n\n    return 0\n\n\nTests:\n[\n  [101, 1, 3],\n  [101, 1, 2],\n  [101, 0, 2],\n  [101, 0, 3],\n  [0, 0, 0],\n  [1, 1, 1],\n  [2, 1, 3]\n]\n[\n  [101, 2, 1],\n  [101, 1, 3],\n  [101, 0, 3],\n  [101, 2, 2]\n]\n[\n  [101, 2, 0]\n]\n[\n  [0, 1, 1],\n  [2, 1, 2],\n  [2, 1, 0],\n  [0, 1, 3]\n]\n[\n  [0, 3, 2]\n]\n[\n  [1, 3, 2]\n]\n[\n  [1, 1, 1],\n  [3, 1, 2],\n  [2, 1, 0]\n]\n[\n  [2, 2, 3]\n]\n[\n  [2, 3, 1]\n]\n[\n  [3, 2, 2]\n]\n[\n  [3, 0, 2]\n]\n[\n  [2, 3, 0]\n]\n[\n  [0, 2, 2]\n]\n[\n  [0, 1, 1],\n  [0, 1, 1],\n  [0, 2, 3]\n]\n[\n  [1, 2, 2]\n]\n[\n  [2, 1, 1]\n]\n[\n  [1, 2, 1]\n]\n[\n  [1, 3, 1]\n]\n[\n  [2, 1, 0]\n]\n[\n  [1, 3, 3]\n]\n[\n  [1, 1, 1]\n]\n[\n  [3, 3, 1]\n]\n[\n  [3, 2, 2]\n]\n[\n  [3, 0, 2]\n]\n[\n  [2, 3, 0]\n]\n[\n  [3, 3, 3]\n]\n[\n  [2, 2, 3]\n]\n[\n  [3, 0, 1]\n]\n[\n  [3, 1, 1]\n]\n[\n  [1, 2, 1]\n]\n[\n  [0, 1, 1]\n]\n[\n  [0, 1, 3]\n]\n[\n  [0, 3, 1]\n]\n[\n  [1, 1, 1]\n]\n[\n  [1, 1, 3]\n]\n[\n  [1, 1, 2]\n]\n[\n  [2, 1, 2]\n]\n[\n  [2, 1, 3]\n]\n[\n  [2, 1, 1]\n]\n[\n  [2, 3, 2]\n]\n[\n  [2, 3, 1]\n]\n[\n  [3, 2, 2]\n]\n[\n  [3, 1, 1]\n]\n[\n  [3, 1, 3]\n]\n[\n  [3, 1, 2]\n]\n[\n  [3, 1, 0]\n]\n[\n  [3, 1, 1]\n]\n[\n  [3, 3, 1]\n]\n[\n  [3, 3, 2]\n]\n[\n  [2, 3, 0]\n]\n[\n  [2, 1, 0]\n]\n[\n  [2, 1, 2]\n]\n[\n  [2, 2, 1]\n]\n[\n  [1, 2, 0]\n]\n[\n  [1, 2, 2]\n]\n[\n  [1, 1, 0]\n]\n[\n  [0, 1, 0]\n]\n[\n  [0, 2, 0]\n]\n[\n  [0, 3, 0]\n]\n[\n  [1, 1, 0]\n]\n[\n  [1, 3, 1]\n]\n[\n  [2, 3, 0]\n]\n[\n  [2, 3, 2]\n]\n[\n  [2, 2, 0]\n]\n[\n  [1, 1, 0]\n]\n[\n  [1, 1, 2]\n]\n[\n  [1, 2, 1]\n]\n[\n  [1, 2, 2]\n]\n[\n  [3, 3, 1]\n]\n[\n  [3, 2, 1]\n]\n[\n  [3, 1, 1]\n]\n[\n  [3, 1, 3]\n]\n[\n  [3, 1, 2]\n]\n[\n  [2, 1, 0]\n]\n[\n  [3, 1, 2]\n]\n[\n  [3, 1, 1]\n]\n[\n  [3, 3, 1]\n]\n[\n  [2, 1, 0]\n]\n[\n  [2, 1, 2]\n]\n[\n  [2, 2, 1]\n]\n[\n  [3, 2, 1]\n]\n[\n  [2, 2, 0]\n]\n[\n  [3, 2, 2]\n]\n[\n  [3, 2, 0]\n]\n[\n  [2, 3, 0]\n]\n[\n  [2, 2, 0]\n]\n[\n  [1, 2, 0]\n]\n[\n  [2, 3, 0]\n]\n[\n  [2, 3, 1]\n]\n[\n  [1, 2, 0]\n]\n[\n  [1, 1, 0]\n]\n[\n  [3, 1, 0]\n]\n[\n  [3, 1, 2]\n]\n[\n  [3, 1, 1]\n]\n[\n  [3, 1, 3]\n]\n[\n  [3, 1, 0]\n]\n[\n  [3, 1, 2]\n]\n[\n  [3, 2, 0]\n]\n[\n  [3, 2, 1]\n]\n[\n  [3, 2, 2]\n]\n[\n  [3, 2, 0]\n]\n[\n  [3, 3, 2]\n]\n[\n  [2, 3, 1]\n]\n[\n  [2, 3, 0]\n]\n[\n  [2, 2, 1]\n]\n[\n  [2, 3, 1]\n]\n[\n  [1, 2, 0]\n]\n[\n  [3, 2, 0]\n]\n[\n  [3, 3, 2]\n]\n[\n  [2, 3, 1]\n]\n[\n  [1, 3, 1]\n]\n[\n",
        "test": "assert solution(stdin) == 2",
        "num_ids": 2281
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n    n = len(str(N))\n    k = len(str(K))\n    x = len(str(X))\n    y = len(str(Y))\n    \n    nk = n*K + k*X + k*Y\n    \n    answer = 0\n    for i in range(1,n+1):\n        answer += (n*i-nk+1)*i\n    for i in range(1,k+1):\n        answer += (nk+1)*k*i\n    \n    if nk % 10**k!= 0:\n        answer -= n*k\n    \n    if nk % 10**x!= 0:\n        answer -= n*x\n        \n    if nk % 10**y!= 0:\n        answer -= n*y\n    \n    answer = str(answer)[::-1]\n    answer = '0'*(n-len(answer)) + answer\n    \n    return answer\n\nprint(solution(input()))",
        "test": "assert solution(input) == \"48000\"",
        "num_ids": 2564
    },
    {
        "number": 4709,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_op(s):\n        for c in '+-':\n            if s.count(c) == 1:\n                return c\n    op = find_op(stdin[:1])\n    op = op if op else '+'\n    result = int(stdin[1:])\n    if op == '+':\n        result = result + int(stdin[0])\n    else:\n        result = result - int(stdin[0])\n    return str(result)",
        "test": "assert solution(\"-\") == \"2\"",
        "num_ids": 291
    },
    {
        "number": 4710,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return\n",
        "test": "assert solution(input()) == 'ABC'",
        "num_ids": 127
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    if a == b == c:\n        return str(min(a, b, c))\n    elif a == b or b == c:\n        return str(a)\n    elif a == c or b == c:\n        return str(a) + '-' + str(b) + '-' + str(c)\n    else:\n        return str(a) + '-' + str(b) + '-' + str(c) + '-' + str(a + b + c)",
        "test": "assert solution(input) == \"1300\"",
        "num_ids": 360
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        ''.join(['#' if a.islower() else '.' for a in b])\n        for b in stdin.splitlines()\n    )",
        "test": "assert solution([\"abc\",\"bcc\",\"ccc\",\"bbb\"]) == \"bbb\"",
        "num_ids": 647
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    \n    def x(x):\n        return str(x)\n\n    def is_id(x):\n        return x == 'I'\n\n    def is_idd(x):\n        return x == 'D'\n\n    if N==0:\n        return 0\n    \n    if N==1:\n        return x(S)\n\n    cnt=0\n    while S!=0:\n        if S[0]=='I':\n            S=S[1:]\n            cnt+=1\n        if S[0]=='D':\n            S=S[1:]\n            cnt-=1\n\n    return x(S)\n",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 347
    },
    {
        "number": 4714,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(int(stdin[0]), int(stdin[2])+1):\n        for j in range(int(stdin[1]), int(stdin[3])+1):\n            if len(str(i))==2:\n                if int(str(i)[:2])>=int(str(j)[:2])+1:\n                    continue\n            if len(str(i))==3:\n                if int(str(i)[:3])>=int(str(j)[:3])+1:\n                    continue\n            if len(str(i))==4:\n                if int(str(i)[:4])>=int(str(j)[:4])+1:\n                    continue\n            if len(str(i))==5:\n                if int(str(i)[:5])>=int(str(j)[:5])+1:\n                    continue\n            if len(str(i))==6:\n                if int(str(i)[:6])>=int(str(j)[:6])+1:\n                    continue\n            if len(str(i))==7:\n                if int(str(i)[:7])>=int(str(j)[:7])+1:\n                    continue\n            if len(str(i))==8:\n                if int(str(i)[:8])>=int(str(j)[:8])+1:\n                    continue\n            if len(str(i))==9:\n                if int(str(i)[:9])>=int(str(j)[:9])+1:\n                    continue\n            if len(str(i))==10:\n                if int(str(i)[:10])>=int(str(j)[:10])+1:\n                    continue\n            if len(str(i))==11:\n                if int(str(i)[:11])>=int(str(j)[:11])+1:\n                    continue\n            if len(str(i))==12:\n                if int(str(i)[:12])>=int(str(j)[:12])+1:\n                    continue\n            if len(str(i))==13:\n                if int(str(i)[:13])>=int(str(j)[:13])+1:\n                    continue\n            if len(str(i))==14:\n                if int(str(i)[:14])>=int(str(j)[:14])+1:\n                    continue\n            if len(str(i))==15:\n                if int(str(i)[:15])>=int(str(j)[:15])+1:\n                    continue\n            if len(str(i))==16:\n                if int(str(i)[:16])>=int(str(j)[:16])+1:\n                    continue\n            if len(str(i))==17:\n                if int(str(i)[:17])>=int(str(j)[:17])+1:\n                    continue\n            if len(str(i))==18:\n                if int(str(i)[:18])>=int(str(j)[:18])+1:\n                    continue\n            if len(str(i))==19:\n                if int(str(i)[:19])>=int(str(j)[:19])+1:\n                    continue\n            if len(str(i))==20:\n                if int(str(i)[:20])>=int(str(j)[:20])+1:\n                    continue\n            if len(str(i))==21:\n                if int(str(i)[:21])>=int(str(j)[:21])+1:\n                    continue\n            if len(str(i))==22:\n                if int(str(i)[:22])>=int(str(j)[:22])+1:\n                    continue\n            if len(str(i))==23:\n                if int(str(i)[:23])>=int(str(j)[:23])+1:\n                    continue\n            if len(str(i))==24:\n                if int(str(i)[:24])>=int(str(j)[:24])+1:\n                    continue\n            if len(str(i))==25:\n                if int(str(i)[:25])>=int(str(j)[:25])+1:\n                    continue\n            if len(str(i))==26:\n                if int(str(i)[:26])>=int(str(j)[:26])+1:\n                    continue\n            if len(str(i))==27:\n                if int(str(i)[:27])>=int(str(j)[:27])+1:\n                    continue\n            if len(str(i))==28:\n                if int(str(i)[:28])>=int(str(j)[:28])+1:\n                    continue\n            if len(str(i))==29:\n                if int(str(i)[:29])>=int(str(j)[:29])+1:\n                    continue\n            if len(str(i))==30:\n                if int(str(i)[:30])>=int(str(j)[:30])+1:\n                    continue\n            if len(str(i))==31:\n                if int(str(i)[:31])>=int(str(j)[:31])+1:\n                    continue\n            if len(str(i))==32:\n                if int(str(i)[:32])>=int(str(j)[:32])+1:\n                    continue\n            if len(str(i))==33:\n                if int(str(i)[:33])>=int(str(j)[:33])+1:\n                    continue\n            if len(str(i))==34:\n                if int(str(i)[:34])>=int(str(j)[:34])+1:\n                    continue\n            if len(str(i))==35:\n                if int(str(i)[:35])>=int(str(j)[:35])+1:\n                    continue\n            if len(str(i))==36:\n                if int(str(i)[:36])>=int(str(j)[:36])+1:\n                    continue\n            if len(str(i))==37:\n                if int(str(i)[:37])>=int(str(j)[:37])+1:\n                    continue\n            if len(str(i))==38:\n                if int(str(i)[:38])>=int(str(j)[:38])+1:\n                    continue\n            if len(str(i))==39:\n                if int(str(i)[:39])>=int(str(j)[:39])+1:\n                    continue\n            if len(str(i))==40:\n                if int(str(i)[:40])>=int(str(j)[:40])+1:\n                    continue\n            if len(str(i))==41:\n                if int(str(i)[:41])>=int(str(j)[:41])+1:\n                    continue\n            if len(str(i))==42:\n                if int(str(i)[:42])>=int(str(j)[:42])+1:\n                    continue\n            if len(str(i))==43:\n                if int(str(i)[:43])>=int(str(j)[:43])+1:\n                    continue\n            if len(str(i))==44:\n                if int(str(i)[:44])>=int(str(j)[:44])+1:\n                    continue\n            if len(str(i))==45:\n                if int(str(i)[:45])>=int(str(j)[:45])+1:\n                    continue\n            if len(str(i",
        "test": "assert solution(inp := '11009 11332') == '4'",
        "num_ids": 2087
    },
    {
        "number": 4715,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    ans = [str(a)]\n    while b!= 0:\n        if a >= b >= c:\n            a, b, c = a - b - c, a, c\n            ans.append(str(a))\n        else:\n            b = a + b\n            ans.append(str(b))\n    return ''.join(ans)\n",
        "test": "assert solution(stdin), \"The code does not work\"",
        "num_ids": 480
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    l_1 = list(map(int, stdin.split()))\n    l_2 = list(map(int, stdin.split()))\n    l_3 = list(map(int, stdin.split()))\n    l_4 = list(map(int, stdin.split()))\n    l_5 = list(map(int, stdin.split()))\n    \n    l_5.sort()\n    \n    l_1 = sorted(l_1)\n    l_2 = sorted(l_2)\n    l_3 = sorted(l_3)\n    l_4 = sorted(l_4)\n    \n    a = sum(l_5)\n    \n    t = a - min(l_1) - min(l_2) - min(l_3) - min(l_4)\n    \n    return str(t)\n",
        "test": "assert solution(input()) == 12",
        "num_ids": 449
    },
    {
        "number": 4717,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass\n-----Constraints-----\n - 1 \\leq x \\leq 1000\n - 1 \\leq a \\leq 1000\n - 1 \\leq b \\leq 1000\n - x, a and b are pairwise distinct.\n - The distances between Snuke's residence and stores A and B are different.\n",
        "test": "assert solution(inp) == \"A\"",
        "num_ids": 305
    },
    {
        "number": 4718,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('/', '-')[:17]\n",
        "test": "assert solution(\"2017/01/07 13:23:45\") == \"2017/01/07 13:23:45\"",
        "num_ids": 150
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    N = len(S)\n    longest = [S[0]]\n    for i in range(1,N):\n        if S[i]!= S[i-1] or S[i]!= S[i-2] or S[i]!= S[i-3]:\n            longest = max(longest, *[S[i]])\n    return longest\n\n----Expected Result----\ncbaa\n4\ncbaa\n\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n4\ncbaa\ndaacc\nacacac\n\n2\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndaacc\nacacac\n\n2\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n3\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n3\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n3\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n4\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n4\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n2\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n3\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\ncbaa\ndacac\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\ncbaa\ndaacc\nacacac\n\n4\n",
        "test": "assert solution(inp) == aac",
        "num_ids": 3479
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    def check_group(group):\n        if len(set(group)) == N:\n            return 'YES'\n        else:\n            return 'NO'\n\n    seats = list(map(int, stdin.strip().split()))\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if check_group(seats[i:j]) == 'YES':\n                seats[i:j] = list(range(j - 1, j - N, -1))\n                break\n    return ''.join(map(str, seats))\n\"\"\"\ndef",
        "test": "assert solution(5,24,30,26,27,28,29,30) == 7,'solution failed'",
        "num_ids": 815
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    s = []\n    for i in range(n):\n        for j in range(m):\n            if k[i] == 1:\n                s.append(1)\n            elif k[i] == 2:\n                s.append(2)\n            elif k[i] == 3:\n                s.append(3)\n            elif k[i] == 4:\n                s.append(4)\n            elif k[i] == 5:\n                s.append(5)\n            else:\n                s.append(6)\n    return str(len(s))\n\n\nprint(solution(\"3 4\"))\n",
        "test": "assert solution(input()) == \"6\"",
        "num_ids": 2220
    },
    {
        "number": 4722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b == 100:\n        return 'Impossible'\n    if a == b:\n        return 'Possible'\n    return 'Impossible'\n\n\n  \n",
        "test": "assert solution(stdin) == \"Possible\"",
        "num_ids": 420
    },
    {
        "number": 4723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace('?', '?')\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] == '?':\n            continue\n        else:\n            break\n    if i == 0:\n        s = 'atcoder'\n    elif s[i] == '?':\n        s = 'atcoder' + s[i + 1:]\n    else:\n        s = s[:i] + '?' + s[i + 1:]\n    return s\n'''\ndef",
        "test": "assert solution(?tc????) == 'atcoder'",
        "num_ids": 1921
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    answer = (G * (R+1)/2)\n    return str(answer)",
        "test": "assert solution(stdin) == 2032",
        "num_ids": 231
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    dic = {}\n    \n    l = 0\n    for c in stdin:\n        dic[c] = dic.get(c, 0) + 1\n        \n    for k, v in dic.items():\n        if v % 2 == 1:\n            l += v\n        else:\n            l -= v\n    return l\n",
        "test": "assert solution(stdin) == 13",
        "num_ids": 1015
    },
    {
        "number": 4726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t = map(int, stdin.split())\n    times = [0] + list(map(int, stdin.split())) + [m]\n    times.sort()\n    res = [\"TLE\"]\n    i = 0\n    while i < m:\n        left = times[i]\n        j = i + 1\n        right = times[j]\n        while j < len(times):\n            if times[j] < left:\n                break\n            if times[j] >= right:\n                break\n            j += 1\n        if j < len(times):\n            if times[j] >= right:\n                times[j] = left\n            else:\n                times[j] = right\n        elif j == len(times):\n            if times[j] >= right:\n                times[j] = left\n            else:\n                times[j] = right\n        else:\n            j += 1\n        i += 1\n        for j in times:\n            if j <= m:\n                res.append(\"AC\")\n            else:\n                res.append(\"TLE\")\n            if j == m:\n                i = j\n            else:\n                j += 1\n    return ''.join(res)\n",
        "test": "assert solution(3, 1000000) == \"TLE\"",
        "num_ids": 558
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    w = []\n    p = []\n    for i in range(4):\n        w.append([])\n        p.append([])\n    for line in stdin:\n        for i in range(4):\n            w[i].append(int(line[i]))\n    \n    for i in range(4):\n        if w[i][0] == w[i][4] == w[i][8] == w[i][2]:\n            w[i][0] = w[i][4]\n            w[i][4] = w[i][8]\n            w[i][8] = w[i][2]\n            w[i][2] = w[i][4]\n            w[i][4] = w[i][8]\n            w[i][8] = w[i][2]\n            w[i][2] = w[i][4]\n            w[i][4] = w[i][8]\n        elif w[i][0] == w[i][4] == w[i][8] == w[i][2]:\n            w[i][0] = w[i][4]\n            w[i][4] = w[i][8]\n            w[i][8] = w[i][2]\n            w[i][2] = w[i][4]\n            w[i][4] = w[i][8]\n            w[i][8] = w[i][2]\n            w[i][2] = w[i][4]\n            w[i][4] = w[i][8]\n        else:\n            w[i][0] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][8] = w[i][4] = w[i][8] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2] = w[i][4] = w[i][8] = w[i][2]",
        "test": "assert solution(stdin) == '0 0 0 4'",
        "num_ids": 3166
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    m = int(stdin.strip().split(' ')[1])\n    a = []\n    for i in range(n):\n        a.append(stdin.split(\" \")[i].strip())\n    for i in range(m):\n        a.append(stdin.split(\" \")[i].strip())\n    cnt = 1\n    for i in a:\n        for j in range(1, len(i)):\n            if j == len(i):\n                break\n            if i[j]!= i[j - 1]:\n                if i[j - 1] in ['C', 'H', 'C#', 'O']:\n                    cnt = cnt * 10 + int(i[j - 1])\n                    i[j] = i[j - 1]\n                    i[j - 1] = 'O'\n                    break\n                else:\n                    cnt = cnt * 10 + int(i[j - 1])\n                    i[j] = i[j - 1]\n                    i[j - 1] = 'C'\n                    break\n    return str(cnt)",
        "test": "assert solution(inp) == \"12\"",
        "num_ids": 643
    },
    {
        "number": 4729,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # if stdin == \"\":\n    #     return \"\"\n    # else:\n    #     return stdin.upper()\n    \n    answer = []\n    i = 0\n    while True:\n        if stdin[i].isalpha() and len(stdin) > i:\n            answer.append(stdin[i])\n        elif stdin[i] == '.':\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer.append(stdin[i])\n            answer",
        "test": "assert solution(stdin) == PASS",
        "num_ids": 1489
    },
    {
        "number": 4730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = n//2\n    answer = \"\"\n    ind = 0\n    j = 0\n    while ind < l:\n        answer += str(ind)\n        ind += 2\n    while j < l-1:\n        answer += str(j)\n        j += 2\n        ind += 2\n    return answer\n",
        "test": "assert solution(\\\"[{()]}])\") == \"ok so far\"",
        "num_ids": 366
    },
    {
        "number": 4731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *w = stdin\n    word = w[0]\n    w = list(w[1])\n    if len(word)!= len(set(word)):\n        return \"Player 1 lost\"\n    for i in range(len(word)):\n        if word[i]!= word[i-1]:\n            return \"Player 1 lost\"\n    for i in range(len(w)):\n        if word[i]!= w[i]:\n            return \"Player 1 lost\"\n    return \"Player 2 lost\"",
        "test": "assert solution(\"2 3\") == \"Player 1 lost\"",
        "num_ids": 428
    },
    {
        "number": 4732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    if n >= 100 and n <= 1000:\n        return str(n * 10 + 100)\n    else:\n        return 'Invalid input'\n",
        "test": "assert solution('1+') == '1'",
        "num_ids": 160
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"in\"\n    return \"out\"\n    ",
        "test": "assert solution('8 out') == '6', '8 should be 6'",
        "num_ids": 495
    },
    {
        "number": 4734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n    \ndef",
        "test": "assert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"",
        "num_ids": 370
    },
    {
        "number": 4735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 0\n    for i in range(n+1,1000001):\n        a,b = map(str,(i,(i*2)))\n        s = a + b + b + b + b\n        if s == a + b + b + b + b:\n            c += 1\n    return \"yes\" if c == 26 else \"no\"\n",
        "test": "assert solution(\"2019\") == \"no\"",
        "num_ids": 339
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n_, k = map(int, stdin.split())\n    cards = [map(int, list(stdin.strip())) for _ in range(n_)]\n    print(len(set(cards)) // n_)\n    return len(set(cards)) // n_\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\ncards = list(map(int, sys.stdin.readline().split()))\n\nN = cards[-1]\n\nresult = 0\nfor i in range(1, N + 1):\n    for j in range(k, 0, -1):\n        if i < 10 ** (j // 2):\n            result += 1\n\nprint(result)\n",
        "test": "assert solution(\"{\\\"\" + input() + \"\\\"}\") == \"0\"",
        "num_ids": 512
    },
    {
        "number": 4737,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    tasks = []\n    ans = []\n    for _ in range(N):\n        tasks.append(int(stdin.strip()))\n    \n    while tasks:\n        if tasks[0] == tasks[-1]:\n            tasks.pop()\n        else:\n            task = tasks[0]\n            times = []\n            while task:\n                times.append(task)\n                task = tasks[0]\n            times.append(task)\n            times.sort()\n            for i in range(len(times) - 1):\n                if times[i+1] - times[i] <= times[i+1] - times[i]:\n                    times[i+1] -= times[i]\n                    if times[i] == times[-1]:\n                        times.pop()\n                        if len(times) == 0:\n                            break\n            ans.append(len(times))\n    \n    return''.join(map(str, ans))",
        "test": "assert solution(\"1\") == \"\"",
        "num_ids": 1083
    },
    {
        "number": 4738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    s = list(stdin.strip().replace(' ', ''))\n    k = 0\n    for i in range(N):\n        if len(s[i]) % N!= 0:\n            k = k - 1\n        s[i] = ''.join(s[i][k:])\n    return ''.join(s)\n\nSample Input 3:\na\nSample Output 3:\na\n",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 1906
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n    distances = [None] + [list(map(int, stdin.split())) for _ in range(N)]\n    distances[X][Y] = 1\n    distances = sorted(distances)\n    for d in distances:\n        if d == T:\n            return str(d)\n        elif d < T:\n            distances.remove(d)\n            distances.remove(T)\n            distances.append(d)\n    return '0'\n",
        "test": "assert solution(sys.stdin.readline().rstrip()) == \"1\"",
        "num_ids": 712
    },
    {
        "number": 4740,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    import re\n    from collections import Counter\n    \n    n = int(stdin)\n    \n    pattern = re.compile(r'^(\\d{7})-(\\d{4})-(\\d{4})$')\n    match = pattern.match(stdin)\n    \n    if not match:\n        return \"0\"\n    \n    d = match.groups()\n    \n    d = list(map(int, d))\n    d.sort(reverse=True)\n    \n    cnt = Counter(d)\n    \n    if d[0] == 1 and cnt[1] >= 2 and cnt[2] >= 3:\n        return \"1\"\n    \n    if d[0] == 1 and cnt[1] >= 2 and cnt[2] < 4:\n        return \"1\"\n    \n    if d[0] == 1 and cnt[1] < 4:\n        return \"0\"\n    \n    return \"0\"\n",
        "test": "assert solution(\"555\") == \"0\", \"answer is not correct\"",
        "num_ids": 474
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a / b < 1:\n        return \"0/1\"\n    else:\n        return str(int(abs(a / b) - 1)) + \"/\" + str(int(abs(a / b) - 1))\n\nSample Input 3:\n-32/1\nSample Output 3:\n-0/1\n\"\"\"\ndef",
        "test": "assert solution(input()) == '5/9'",
        "num_ids": 397
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    melodies = [list(map(int, stdin.split())) for _ in range(2)]\n    # From index 2 to index 0, check if a number is greater than index 0\n    # Example: if index 2 is greater than index 0, the number that was in index 0 would be greater than the number in index 1\n    for i in range(len(melodies)):\n        for j in range(i, len(melodies)):\n            if max(melodies[i][:j]) > max(melodies[j][:j]):\n                melodies[i], melodies[j] = melodies[j], melodies[i]\n    if len(melodies) == 1:\n        return \"Nonsense\"\n    if len(melodies) == 2:\n        return \"Nonsense\"\n    if len(melodies) == 3:\n        return \"Nonsense\"\n    transposition = ['A', 'B']\n    if melodies[0] == melodies[1]:\n        transposition = ['C', 'D']\n    if melodies[1] == melodies[0]:\n        transposition = ['E', 'F']\n    if melodies[0] > melodies[1]:\n        transposition = ['D', 'F']\n    if melodies[0] < melodies[1]:\n        transposition = ['G', 'E']\n    if melodies[0] > melodies[1]:\n        transposition = ['A', 'G']\n    if melodies[0] < melodies[1]:\n        transposition = ['B', 'A']\n    for i in range(len(melodies)):\n        if melodies[i] not in transposition:\n            melodies[i] = transposition[melodies[i]]\n    return''.join(melodies[::-1])\n",
        "test": "assert solution(",
        "num_ids": 887
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip().split(' ')\n    word = [word[i] for i in range(len(word)) if word[i].isalpha()]\n    word = ''.join(sorted(word))\n    word = word.upper()\n    return word\n\nSample Output 3:\nCociccah gs the bestuh\ndef",
        "test": "assert solution(input3) == solution(input4)",
        "num_ids": 598
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def fancy(s: str):\n        return s.replace(\"F\", \"B\").replace(\"L\", \"R\").replace(\"B\", \"R\").replace(\"F\", \"R\").replace(\"R\", \"F\")\n    line = int(fancy(stdin))\n    if line < 50:\n        print(f\"{line}\")\n    else:\n        print(f\"{line // 50}\")\n",
        "test": "assert solution(2) == \"16\"",
        "num_ids": 602
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    n = str(n)\n    x = str(x)\n    max_sum = 0\n    for i in range(1, len(x) + 1):\n        max_sum = max(max_sum, int(x[i - 1] + x[i]) * n + int(x[i - 1] + x[i - 2] + x[i - 3] + x[i - 4]) * n)\n    return str(max_sum)\n\nprint(solution(input()))\n",
        "test": "assert solution('1 2 3 4 5') == 3",
        "num_ids": 417
    },
    {
        "number": 4746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, C, n, t, c = list(map(int, stdin.split()))\n    measurements = [[0] * C for _ in range(n)]\n    for _ in range(t):\n        idx1, idx2 = list(map(int, stdin.split()))\n        measurements[idx1 - 1][idx2 - 1] = 1\n    for _ in range(n - 1):\n        for i in range(n):\n            if c - 1 >= 0:\n                c -= 1\n                measurements[i][c] = 1\n    for _ in range(n - 1):\n        for i in range(n):\n            if c - 1 >= 0:\n                c -= 1\n                measurements[i][c] = 1\n    for i in range(n):\n        for j in range(n):\n            if measurements[i][j] == 1:\n                measurements[i][j] = '0'\n    res = ''\n    for i in range(n):\n        for j in range(n):\n            if measurements[i][j] == '1':\n                res += 'possible'\n            else:\n                res += 'impossible'\n    return res",
        "test": "assert solution(\u201c0 1 0\u201d) == \u201cimpossible\u201d, \u201cimpossible\u201d means that the string \u201c0 1 0\u201d is not the solution to this problem.",
        "num_ids": 718
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n",
        "test": "assert solution(['2','2','2','2','2','2','2','2','2','2']) == '1.375', \"Expected 1.375, got {}\".format(solution(['2','2','2','2','2','2','2','2','2','2']))",
        "num_ids": 525
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S, N, M = map(int, stdin.split())\n    if S % 2!= 0:\n        return 'NO'\n    def solution(H, N, M, S, B):\n        if N < M:\n            return 'NO'\n        if M < N:\n            return 'NO'\n        res = []\n        i = 1\n        while i <= S:\n            if H <= M:\n                res.append(2*i-B)\n                i += 1\n            else:\n                res.append(4*i-B)\n                i += 1\n        return '\\n'.join(map(str,res))\n    return '\\n'.join(map(str,solution(H, N, M, S, B)))\n\nfrom collections import defaultdict\nfrom math import gcd",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 715
    },
    {
        "number": 4749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = []\n    for i in range(n):\n        nums.append(stdin[i:i+3])\n    nums.sort(key=lambda x: (len(x),x))\n    for i in nums:\n        print(len(i),end=\" \")\n        for j in i:\n            print(j,end=\" \")\n        print()\n    return \"\"",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 441
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split(' ')[0])\n    n = int(stdin.strip().split(' ')[1])\n    segments = [[int(i) for i in input().split()] for i in range(q)]\n    l_list, r_list = [0] * n, [0] * n\n    for l_i, r_i in segments:\n        l_list[l_i] += 1\n        r_list[r_i] += 1\n    a_list, b_list = [], []\n    for l_i, r_i in segments:\n        if l_list[l_i] == r_list[r_i]:\n            a_list.append(l_i)\n            b_list.append(r_i)\n        else:\n            return 'NO'\n    return 'YES'\n\n\"\"\"\nn = int(stdin.strip().split(' ')[0])\n\nl_list = [0] * n\nr_list = [0] * n\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    l_list[i] = l\n    r_list[i] = r\n\nfor i in range(n):\n    print(l_list[i], r_list[i])\n\n\"\"\"",
        "test": "assert solution(input()) == \"3 2\"",
        "num_ids": 2556
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    head, pos = _solution_inner(stdin, 0, -1)\n    \n    if pos!= -1 and pos!= len(stdin):\n        return _is_cycle(head, pos)\n    else:\n        return _is_cycle(head, len(stdin))\n\ndef",
        "test": "assert solution('1 3 2 4 5') == '2'",
        "num_ids": 591
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_solution(arr, num):\n        for i in range(len(arr) - 1):\n            if arr[i]!= num and arr[i] + arr[i + 1] == num:\n                return True\n        return False\n\n    def find(arr, start, end):\n        if start == end:\n            if start == end:\n                return arr[start] == num\n            else:\n                return num\n        mid = start + (end - start) // 2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] > num:\n            end = mid - 1\n        else:\n            start = mid + 1\n        return find(arr, start, end)\n\n    def union(arr, start, end, num):\n        p1, p2 = start, end\n        while p1 < p2:\n            if arr[p1] < num and arr[p2] < num:\n                p1 += 1\n            elif arr[p1] < num and arr[p2] > num:\n                p2 -= 1\n            else:\n                arr[p1] += arr[p2]\n                arr[p2] = num\n                p1 += 1\n                p2 -= 1\n        return arr\n\n    def count(arr, num):\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] == num:\n                count += 1\n        return count\n\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    print(nums)\n    print(find(nums, 0, len(nums) - 1))\n    print(nums[-1] - nums[0])\n    return find(nums, 0, len(nums) - 1)\n",
        "test": "assert solution([\"11\", \"a\"]) == \"0 1\"",
        "num_ids": 1175
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"0\"\n    if N == 2:\n        return str(2)\n    # 0,0,1\n    # 0,1,1\n    # 0,1,2\n    # 0,0,3\n    result = \"\"\n    intersection = False\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if stdin[i] == stdin[j] and stdin[j] == stdin[k]:\n                    intersection = True\n                    break\n                if stdin[i] == stdin[j] or stdin[i] == stdin[k]:\n                    intersection = True\n                    break\n                if stdin[i] == stdin[k] or stdin[k] == stdin[j]:\n                    intersection = True\n                    break\n            if intersection:\n                break\n        if intersection:\n            break\n    result += str(int(intersection))\n    return result\n\n\ndef",
        "test": "assert solution(input().lstrip(\"-\")) == \"0\"",
        "num_ids": 1336
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = []\n    for i in a:\n        if i not in b:\n            b.append(i)\n    print(len(b))\n\nsolution(\"2 2 1\")\nsolution(\"1 3 7\")\nsolution(\"1 5 3 7\")",
        "test": "assert solution(\"1 1 7 7 7\") == 7",
        "num_ids": 335
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if b <= 1:\n        return str(b)\n    b = abs(b)\n    if b % 10 > b // 10:\n        if a >= 10000:\n            return str(a)\n        a += 10000\n    return str(a // b)\n\"\"\"\n\ndef",
        "test": "assert solution(",
        "num_ids": 541
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(' ')[0])\n    data = list(map(int, stdin.split(' ')))\n    return str(sum([x+y for x,y in zip(data,data[1:])]))",
        "test": "assert solution(stdin) == \"0.000000\"",
        "num_ids": 295
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, E = map(int, stdin.split())\n    band = []\n    villager = []\n    for _ in range(N):\n        band.append(int(input()))\n    for _ in range(E):\n        villager.append(list(map(int, input().split())))\n    for i in range(N):\n        for j in range(N):\n            if band[i] == band[j] and band[i] not in villager[j]:\n                villager[j].remove(band[i])\n    for i in range(N):\n        villager[i] = sorted(villager[i])\n    print(*villager)\n    \n    \n    ",
        "test": "assert solution(inp) == \"1\"",
        "num_ids": 581
    },
    {
        "number": 4758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n,m,k = map(int,stdin.split())\n    if (k>n*m):\n        return '1'\n    else:\n        return str(n*m)\n\ndef",
        "test": "assert solution(stdin) == 8",
        "num_ids": 279
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '%.2f' % (n/n/n)\n",
        "test": "assert solution(stdin) == '1.6666666666666667'",
        "num_ids": 172
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    max_num = max(nums)\n    print(max_num)\n    if len(nums) == 1:\n        return str(nums[0])\n    else:\n        for i in range(1, max_num+1):\n            if nums[-i] == i:\n                continue\n            else:\n                # we are in the range\n                while nums[i] < nums[i-1]:\n                    print(i)\n                    # only one number will cross, so we are checking if it is the right number\n                    if i == len(nums) - 1 or (i == nums[i-1] and nums[i+1]!= i+1):\n                        return str(i)\n                    i += 1\n                # it is not the right number, so we need to check if the next number is in the right range\n                # we only need to check if nums[i+1] is not the same as nums[i]\n                while nums[i] < nums[i+1]:\n                    if nums[i+1] == i+1:\n                        return str(i)\n                    i += 1\n        return str(i)\n\n-----Test-----\nTest all possible sieves\n\nimport math\n\ndef",
        "test": "assert solution( \"3\" ) == \"3\"",
        "num_ids": 573
    },
    {
        "number": 4761,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def divisors(n: int) -> list:\n        return list(filter(lambda x: x % 2 == 0, range(1, int(n**0.5)+1)))\n    def is_prime(n: int) -> bool:\n        return n > 1 and all(n%i for i in range(2, int(n**0.5)+1) if n % i == 0)\n    def check(n: int) -> bool:\n        return all(n % i for i in divisors(n))\n    nums = set(range(100))\n    return sum(1 for num in nums if check(num) if check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num) and check(num",
        "test": "assert solution(198765 198769) == 0",
        "num_ids": 2060
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            solution = stdin[i] + stdin[j]\n            count += 1\n            if solution < 10 ** 5:\n                return solution\n    return str(count/N)\n",
        "test": "assert solution(a) == '1.0'",
        "num_ids": 342
    },
    {
        "number": 4763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    stdin = re.sub('\\n', '', stdin)\n    target = int(stdin.split()[1])\n    darts = {\n        'bullseye': [1, 2, 3],\n        'double': [1, 2, 3, 4, 5],\n        'triple': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    }\n    ret = ''\n    for dart in darts:\n        ret += darts[dart] * dart\n    if target - int(ret) == 0:\n        ret = 'impossible'\n    return ret\n",
        "test": "assert solution('9') == 'triple 20'",
        "num_ids": 428
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    w, h, v = map(int, stdin.split(' '))\n    \n    area = h * w\n    \n    if area <= 0:\n        return 'Impossible'\n    \n    if area <= (v + w) ** 0.5:\n        return 'Impossible'\n    \n    if area < (v + w) ** 0.5:\n        return 'Impossible'\n    \n    return str(area // (v + w)) +'' + str(area % (v + w))",
        "test": "assert solution(stdin) == \"15.13\"",
        "num_ids": 2027
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, S, B = map(int, stdin.split())\n    t = N - B\n    \n    while t:\n        s = N - t\n        s -= S\n        t -= s\n        \n    return str(t)\n\n-----Examples-----\nTestcase 1:\nInput:\n3 10\n3 8\n5 8\nOutput:\n7\nExplanation:\nGiven we have, S=7, B=2, our disposal consists of 5 ingredients and we need to choose 3 of the ingredients to get the lowest quality.\nThe total sweetness of our disposal is 7. So we can choose a 5 of those ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 4. So we can choose 2 of the 5 of those ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 1. So we can choose 1 of the 2 of the 5 of those ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the 5 of those ingredients to get a low quality sweetness.\nWe can get the minimum difference between our disposal and our disposal. So we can say that our disposal is our disposal minus the sum of all the remaining ingredients.\nWe can get the maximum possible difference between our disposal and our disposal. So we can say that our disposal is our disposal minus the sum of all remaining ingredients.\nHere are the following testcases:\nTestcase 1:\nInput:\n3\n5 8\n3 4 5\n7\nOutput:\n5\nExplanation:\nGiven we have, S=7, B=2, our disposal consists of 5 ingredients and we need to choose 3 of the ingredients to get the lowest quality.\nThe total sweetness of our disposal is 7. So we can choose a 5 of those ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 4. So we can choose 2 of the 5 of those ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 1. So we can choose 1 of the 2 of the 5 of those ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the 5 of those ingredients to get a low quality sweetness.\nWe can get the minimum difference between our disposal and our disposal. So we can say that our disposal is our disposal minus the sum of all the remaining ingredients.\nHere are the following testcases:\nTestcase 2:\nInput:\n2\n3 8\n2 4 8\n3 4 9\n3 5\nOutput:\n2\nExplanation:\nGiven we have, S=2, B=3, our disposal consists of 2 ingredients and we need to choose 2 of the remaining ingredients to get the lowest quality.\nThe total sweetness of our disposal is 2. So we can choose 2 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 1. So we can choose 1 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nWe can get the minimum possible difference between our disposal and our disposal. So we can say that our disposal is our disposal minus the sum of all remaining ingredients.\nHere are the following testcases:\nTestcase 3:\nInput:\n3\n5 8\n3 4 8\n2 4 7\n3 5 9\n2 4 7\n3 5 8\n3 4 9\nOutput:\n2\nExplanation:\nGiven we have, S=2, B=3, our disposal consists of 5 ingredients and we need to choose 2 of the remaining ingredients to get the lowest quality.\nThe total sweetness of our disposal is 2. So we can choose 2 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 1. So we can choose 1 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nWe can get the minimum possible difference between our disposal and our disposal. So we can say that our disposal is our disposal minus the sum of all the remaining ingredients.\nHere are the following testcases:\nTestcase 4:\nInput:\n2\n3 8\n2 4 8\n3 4 9\n3 5\nOutput:\n1\nExplanation:\nGiven we have, S=1, B=1, our disposal consists of 1 ingredients and we need to choose 1 of the remaining ingredients to get the lowest quality.\nThe total sweetness of our disposal is 1. So we can choose 1 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nHere are the following testcases:\nTestcase 5:\nInput:\n3\n5 8\n2 4 7\n3 4 9\n2 4 7\n3 5 8\n3 5 9\n3 5 7\nOutput:\n0\nExplanation:\nGiven we have, S=0, B=0, our disposal consists of 1 ingredients and we need to choose 0 of the remaining ingredients to get the lowest quality.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nHere are the following testcases:\nTestcase 6:\nInput:\n1\n5\n2\n3\n4\nOutput:\n0\nExplanation:\nGiven we have, S=0, B=0, our disposal consists of 1 ingredients and we need to choose 0 of the remaining ingredients to get the lowest quality.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nHere are the following testcases:\nTestcase 7:\nInput:\n3\n5 8\n2 4 8\n3 4 7\n3 5 9\n2 4 7\n3 5 8\n3 5 9\n3 5 7\nOutput:\n2\nExplanation:\nGiven we have, S=2, B=3, our disposal consists of 5 ingredients and we need to choose 2 of the remaining ingredients to get the lowest quality.\nThe total sweetness of our disposal is 2. So we can choose 2 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 1. So we can choose 1 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nHere are the following testcases:\nTestcase 8:\nInput:\n3\n5 8\n2 4 8\n3 4 7\n2 4 7\n3 5 9\n3 5 8\n3 5 9\n3 5 7\nOutput:\n0\nExplanation:\nGiven we have, S=1, B=1, our disposal consists of 5 ingredients and we need to choose 2 of the remaining ingredients to get the lowest quality.\nThe total sweetness of our disposal is 0. So we can choose 2 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nThe total sweetness of our disposal is 0. So we can choose 0 of the remaining ingredients to get a low quality sweetness.\nHere are the following testcases:\nTestcase 9:\nInput:\n2\n3",
        "test": "assert solution(\"2 9 1 10\") == \"1\"",
        "num_ids": 2067
    },
    {
        "number": 4766,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    words = stdin.strip().split()\n    answer = ''\n    for word in words:\n        if len(word) == 0:\n            continue\n        if word[0] in ['s', 't']:\n            answer = answer + word[1:] + word[0] +''\n        else:\n            answer = answer + word +''\n    return answer",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1666
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(n)\n    mod = 10 ** 9 + 7\n    i, j = 0, 1\n    for c in str(n):\n        j = (j * 10) % mod\n        i = (i * 10) + (ord(c) - ord('0'))\n    return str(i + j)\n",
        "test": "assert solution(stdin) == '0'",
        "num_ids": 853
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().split()[-1])\n    \n    if k % 2!= 0:\n        k = k - 1\n    \n    solution = [0]*k\n    solution[0] = 1\n    \n    for i in range(1, n):\n        solution[i] = solution[i-1] + solution[i-2]\n    \n    print(sum(solution))\n    return''.join([str(x) for x in solution])",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 467
    },
    {
        "number": 4769,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\" \")\n    l = len(words)\n    for i in range(l-1):\n        for j in range(i+1, l):\n            #print(words[i], words[j])\n            root = \"\".join(sorted(words[i]+words[j]))\n            #print(root)\n            if root == words[i]+words[j]:\n                return root\n    return -1\n\n\nclass Solution:\n    def shortest_multigram(self, words: List[str]) -> str:\n        l = len(words)\n        res = []\n        for i in range(l):\n            for j in range(i+1, l):\n                root = \"\".join(sorted(words[i]+words[j]))\n                #print(root)\n                if root == words[i]+words[j]:\n                    res.append(root)\n        return res[0] if res else -1",
        "test": "assert solution(\")((\") == -1 or solution(\")((\") == -1",
        "num_ids": 455
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    num_people = N - M\n    chicken = M\n    leftover = num_people\n    if chicken > N:\n        chicken = N - leftover\n        leftover = chicken\n    if leftover > num_people:\n        leftover = leftover\n        chicken = N - leftover\n    if chicken < N:\n        chicken = N - leftover\n        leftover = chicken\n    if leftover > M:\n        leftover = leftover\n        chicken = N - leftover\n    if leftover > M:\n        leftover = leftover\n        chicken = N - leftover\n    print(str(leftover) + \" \" + str(chicken))\n    return \"Dr. Chaz will have \" + str(leftover) + \" pieces of chicken left over!\\n\" + str(chicken) + \" \" + str(leftover)",
        "test": "assert solution(\"3\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"",
        "num_ids": 594
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    \n    boxes = []\n    \n    for i in range(n):\n        boxes.append(tuple(map(int, input().split())))\n        \n    res = 1\n    \n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                v_i = v - boxes[i][k]\n                \n                if boxes[j][k] >= v_i:\n                    res = 0\n                    break\n                elif boxes[j][k] == v_i and boxes[i][k] > v_i:\n                    res = -1\n                    break\n                elif boxes[j][k] > v_i and boxes[i][k] > v_i:\n                    res = -1\n                    break\n            \n    return res",
        "test": "assert solution(stdin) == 2",
        "num_ids": 352
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin: str, i: int):\n        if i == len(stdin):\n            print(stdin)\n            return\n        if stdin[i] in \"\\\"'\":\n            stdin = stdin[:i] + stdin[i + 1:]\n        print(stdin + \" \" + solve(stdin, i + 1) + \" \" + solve(stdin, i + 2))\n    \n    stdin = stdin.split()\n    solve(stdin, 0)\n    return \"\"\n\nSample Output 2:\ndef",
        "test": "assert solution('kula') == 'kula','solution() should return kula'",
        "num_ids": 1109
    },
    {
        "number": 4773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(x):\n        return sum(sorted([int(c) for c in x], reverse=True))\n    answer = 0\n    for line in stdin.split():\n        answer = min(answer, calculate(line))\n    return answer\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= len(route) <= 100\nroute[i] is a non-empty character\n\n\"\"\"\nfrom typing import List\n\ndef",
        "test": "assert solution(stdin) == 10, \"incorrect answer\"",
        "num_ids": 277
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin.replace(\" \",\"\").replace(\"-\",\"\").replace(\"+\",\"\").replace(\"/\",\"\").replace(\"*\",\"\").replace(\"\\n\",\"\").replace(\"\\t\",\"\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\n\",\"\").replace(\" \",\"\"))",
        "test": "assert solution(",
        "num_ids": 2315
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    size = len(stdin)\n    A = stdin[:size // 2]\n    B = stdin[size // 2:]\n    \n    crossed = 0\n    # print(A, B)\n    \n    def is_crossed(a, b):\n        for i in range(len(a)):\n            if a[i]!= b[i]:\n                return False\n        return True\n        \n    def get_crossed_letter(a):\n        for i in range(len(a)):\n            if a[i] == a[i - 1]:\n                return a[i - 1]\n        return None\n            \n    def make_crossed_word(a, b):\n        A_word = [get_crossed_letter(a[i]) for i in range(len(a)) if i % 2 == 0]\n        B_word = [get_crossed_letter(b[i]) for i in range(len(b)) if i % 2 == 0]\n        \n        if len(A_word) == len(B_word):\n            for i in range(len(A_word)):\n                if A_word[i]!= B_word[i]:\n                    return False\n        else:\n            return False\n        \n        return True\n            \n    for i in range(len(A)):\n        A_word = A[i:] + A[:i]\n        B_word = B[i:] + B[:i]\n        if make_crossed_word(A_word, B_word):\n            crossed += 1\n            \n    return str(crossed)",
        "test": "assert solution(",
        "num_ids": 879
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    d = []\n    d.append(1)\n    for i in range(N):\n        line = stdin.strip()\n        line = line.split()\n        s = int(line[0])\n        t = int(line[1])\n        if len(line) > 2:\n            d.append(d[-1] + int(line[2]))\n        else:\n            d.append(d[-1] + 1)\n    return str(d[-1])",
        "test": "assert solution(stdin) == \"10\"",
        "num_ids": 604
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution(stdin) == \"0 1\"",
        "num_ids": 195
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.strip())\n    V = int(stdin.strip())\n\n    precincts = []\n    districts = {}\n    for i in range(N):\n        precincts.append(tuple(map(int, stdin.split())))\n    for i in range(len(precincts)):\n        if precincts[i][1] not in districts:\n            districts[precincts[i][1]] = []\n        if voters[i] < precincts[i][0]:\n            districts[precincts[i][1]].append(i)\n\n    def check_congestion(precinct):\n        for i in range(len(districts[precinct])):\n            if len(districts[precinct][i]) > 1:\n                return False\n        return True\n\n    def add_party_votes(votes, precinct):\n        for i in range(len(votes)):\n            if votes[i] > 0 and votes[i] not in votes[precinct]:\n                votes[i] += precincts[precinct][0]\n            elif votes[i] > 0 and votes[i] in precincts[precinct]:\n                votes[i] -= precincts[precinct][0]\n        return votes\n\n    def find_winner(party):\n        if len(party) == 1:\n            return party[0]\n        # print(party)\n        # print(party.index(party[0]))\n        for i in range(1, len(party)):\n            if party[0]!= party[i]:\n                party[0] = party[i]\n                party[i] = party[0]\n                # print(party)\n                # print(party.index(party[0]))\n                break\n        party.pop(0)\n        party.append(party.pop(0))\n        return party[0]\n\n    def calc_wastes(votes, party):\n        wastes = []\n        for i in range(len(votes)):\n            if votes[i] > 0:\n                wastes.append(votes[i])\n            elif votes[i] == 0:\n                wastes.append(0)\n            else:\n                wastes.append(1e6)\n        return wastes\n\n    def calc_wastes2(votes, party):\n        wastes = []\n        for i in range(len(votes)):\n            if votes[i] > 0:\n                wastes.append(votes[i] * 2)\n            elif votes[i] == 0:\n                wastes.append(0)\n            else:\n                wastes.append(1e6)\n        return wastes\n\n    def calc_wastes3(votes, party):\n        wastes = []\n        for i in range(len(votes)):\n            if votes[i] > 0:\n                wastes.append((votes[i] * 2) + 1e6)\n            elif votes[i] == 0:\n                wastes.append(0)\n            else:\n                wastes.append(1e6)\n        return wastes\n\n    votes = []\n    for i in range(N):\n        votes.append(0)\n        for j in range(len(precincts)):\n            votes[i] += voters[j]\n            if precincts[j][1] in districts[i]:\n                if check_congestion(precincts[j]):\n                    votes[i] += 1\n\n    # votes = add_party_votes(votes, 1)\n    # votes = add_party_votes(votes, 2)\n    # votes = add_party_votes(votes, 3)\n    # votes = add_party_votes(votes, 4)\n    # votes = add_party_votes(votes, 5)\n    # print(votes)\n    # print(len(votes))\n    waste = 0\n    while waste!= 0:\n        party = []\n        party.append(0)\n        # print(party)\n        party.append",
        "test": "assert solution
        "num_ids": 3281
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            a[i] = a[i] ** 2 + a[j]\n            if a[i] == a[j]:\n                return str(a[i])\n    return str(0)\n",
        "test": "assert solution(\\\"1,2,3\\\") == \\\".\\\"",
        "num_ids": 489
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    places = []\n    for _ in range(n):\n        places.append(input().upper())\n    \n    result = []\n    for _ in range(t):\n        result.append(places.pop(0))\n        \n    result.reverse()\n    return \"\".join(result)",
        "test": "assert solution(stdin) == \"ABCD\"",
        "num_ids": 1954
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    N = int(stdin.strip())\n    time_passed = [int(i) for i in stdin.strip().split()]\n    result = []\n    for t in time_passed:\n        result.append((t % K) // 10)\n    ans = ''.join(map(str, result))\n    return ans\n",
        "test": "assert solution(stdin) == '5'",
        "num_ids": 362
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(' ')\n    n = int(stdin[0])\n    m = int(stdin[1])\n    print(m)\n    print(n)\n    return str(m*(n-1)//2)",
        "test": "assert solution(input()) == '22'",
        "num_ids": 335
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    for line in stdin.splitlines():\n        for i in range(len(line)):\n            if (line[i] ==''):\n                if (i == 0):\n                    continue\n                else:\n                    line[i] = line[i-1]\n                    line[i-1] =''\n            \n            elif (line[i] == '+'):\n                line[i] =''\n                line[i] =''\n            elif (line[i] == '+'):\n                line[i] =''\n                line[i] =''\n            elif (line[i] == '+'):\n                line[i] =''\n                line[i] =''\n            elif (line[i] == '+'):\n                line[i] =''\n                line[i] =''\n            elif (line[i] == '+'):\n                line[i] =''\n                line[i] =''\n            \n    for line in stdin.splitlines():\n        if (line[-1] ==''):\n            line[-1] = line[-1]\n            line.pop(-1)\n        \n    answer = ''\n    for line in stdin.splitlines():\n        for i in range(len(line)):\n            if (line[i] ==''):\n                answer +=''\n            else:\n                answer += '+'\n        \n    return answer",
        "test": "assert solution(stdin) == 0",
        "num_ids": 832
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    sum = 0\n    for i in range(1, len(l)):\n        sum = sum + l[i]\n    return str(sum)",
        "test": "assert solution(stdin) == \"28\"",
        "num_ids": 351
    },
    {
        "number": 4785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L = list(stdin)\n    for i in range(len(L)):\n        if L[i] =='s':\n            if L[i-1] == 'p' or L[i-1] == 'P':\n                if L[i-2] == 'e' or L[i-2] == 'E':\n                    L[i-1] = 'o'\n                else:\n                    L[i-1] ='s'\n        elif L[i] == 'p':\n            if L[i-1] == 'e' or L[i-1] == 'E':\n                if L[i-2] == 'l' or L[i-2] == 'L':\n                    L[i-1] = 'o'\n                else:\n                    L[i-1] ='s'\n        elif L[i] =='s':\n            if L[i-1] == 'l' or L[i-1] == 'L':\n                L[i-1] = 'o'\n            else:\n                L[i-1] ='s'\n    return \"\".join(L)\n\nExample 1:\nInput:\namiss\nOutput:\nhiss\n\nExplanation:\namiss and mississippi are so alike.\n\nExample 2:\nInput:\noctopuses\nOutput:\nno hiss\ndef",
        "test": "assert solution(\"octopuses\") == \"no hiss\"",
        "num_ids": 677
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 40000 + 1):\n        k = input()\n        if len(k) < 32 or k[0]!= \"-\":\n            continue\n        if k.endswith(\"-\"):\n            k = k[:-1]\n        if k.startswith(\" \") or k.startswith(\"-\"):\n            continue\n        if k.find(\",\")!= -1:\n            k = k.split(\",\")\n            print(len(set(k)))\n        else:\n            print(len(set(k)))\n    return \"1\"\n\n-----Examples-----\nSample Input:\n5\n\"blockchain\"\n\"Artificial intelligence\"\n\"Machine-Learning\"\n\"Linux\"\n\"Sample Output:\n2\nExplanation:\nSample Input:\n5\n\"c#\"\n\"c++\"\n\"c#++\"\n\"c++++\"\n\"c++++\"\n\"c#++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n\"c++++\"\n",
        "test": "assert solution(5) == 3",
        "num_ids": 2974
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    num = 0\n    for i in stdin:\n        if i in 'TGC':\n            num += int(i)**2\n        elif i in 'CGC':\n            num += int(i)**3\n        elif i in 'GGG':\n            num += int(i)**4\n    return str(num)\n",
        "test": "assert solution(stdin) == '9', \"incorrect answer\"",
        "num_ids": 276
    },
    {
        "number": 4788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2 = [int(i) for i in stdin.split()]\n    answer = 0\n    direction = 0\n    for i in range(360):\n        direction = (direction + (i + n_1) % 360) % 360\n        answer = max(answer, abs(direction - n_2))\n    return str(answer)\n",
        "test": "assert solution(\"-45\") == \"180\"",
        "num_ids": 298
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(len(set(map(int, stdin.split()))))\n",
        "test": "assert solution(stdin) == \"3\"",
        "num_ids": 640
    },
    {
        "number": 4790,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    white = {}\n    black = {}\n    m = 1\n    for i in range(1,len(stdin)):\n        if stdin[i-1] == 'B':\n            if white.get(i) == None:\n                white[i] = m\n            else:\n                white[i] += m\n        else:\n            if black.get(i) == None:\n                black[i] = m\n            else:\n                black[i] += m\n    for i in range(len(stdin)):\n        if white.get(i) == None and black.get(i) == None:\n            return '0'\n        if white.get(i) == None:\n            return '1'\n        if black.get(i) == None:\n            return '0'\n        m = min(white[i],black[i])\n    return '1'\n",
        "test": "assert solution([\"WWWWWWW\",\"WBBWBBWB\",\"WBWBWBWB\",\"WBBWBWBWW\",\"WBWBWBWBW\",\"WBBWBWBWX\"]) == \"0\"",
        "num_ids": 889
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    st = list(map(int, stdin.strip().split()))\n    d = []\n    for i in range(n):\n        d.append(sum(st[i:i+4]))\n    st.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if st[i]*st[j]>=st[i]*st[j+1]:\n                continue\n            else:\n                break\n        if d[i]>=d[j]:\n            ans+=d[j]\n    return str(ans)\n\"\"\"\n\ndef",
        "test": "assert solution(\"3 3 3 3\") == \"3.299038105676658\"",
        "num_ids": 398
    },
    {
        "number": 4792,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    nums = {}\n    ans = ''\n    for i in range(n):\n        curr = stdin[i]\n        if curr not in nums:\n            nums[curr] = 1\n        else:\n            nums[curr] += 1\n        if len(curr) == 1:\n            ans = ans + curr\n        elif len(curr) > 1:\n            ans = ans + ''.join(sorted(curr))\n    return ans\n",
        "test": "assert solution(\"Hello World\") == \"Hello World\", \"The function doesn't work as expected\"",
        "num_ids": 526
    },
    {
        "number": 4793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2 = map(int, stdin.split())\n    if abs(v1 - v2) <= 1:\n        return str(abs(v1 - v2))\n    else:\n        return \"Impossible\"\n\nSample Input 3:\n2 9\n2 2\nSample Output 3:\n2\n\nExample 2:\n\nInput:\n3 8\n1 4\n3 2\n3 8\n\nOutput:\n1\n\nExplanation:\nIn this case,\n\np = 1, q = 2, r = 8, s = 1.\n\nBecause\nq = 8\nr = 3\ns = 1\n\nIn the example,\n\np = 1, q = 2, r = 8, s = 2.\n\nThe answer is 1 because the number of bottles in the set is 1, so it does not satisfy the requirement.\n\"\"\"\n\nfrom functools import lru_cache\nfrom sys import stdin\n\n\n@lru_cache(None)\ndef",
        "test": "assert solution(stdin) == 'Impossible'",
        "num_ids": 2094
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    matrix = [list(stdin.split()) for _ in range(R)]\n    answer = 0\n    d = {}\n    for r in range(R):\n        for c in range(C):\n            if matrix[r][c] == '#':\n                answer += 1\n                d[(r, c)] = answer\n    ans = 0\n    for r in range(R):\n        for c in range(C):\n            if matrix[r][c] == 'X':\n                answer += d[(r, c)]\n                answer -= 1\n                ans += answer\n            elif matrix[r][c] == '.':\n                ans += 1\n                d[(r, c)] = ans\n    return str(ans)\n",
        "test": "assert solution(input) == 37, \"Failed\"",
        "num_ids": 532
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # nums = input().split()\n    # nums = list(map(int, input().split()))\n    nums = [int(i) for i in stdin.split()]\n    # nums = list(map(int, input().split()))\n    sum_x = 0\n    for num in nums:\n        sum_x += num\n    answer = str(sum_x)\n    return answer\n",
        "test": "assert solution(stdin) == '1953566', 'incorrect value'",
        "num_ids": 250
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    apple = int(stdin[0])\n    apple_l = int(stdin[1])\n    apple_r = int(stdin[2])\n    pineapple = int(stdin[3])\n    pineapple_l = int(stdin[4])\n    pineapple_r = int(stdin[5])\n    orangen = apple + apple_l + apple_r + pineapple + pineapple_l + pineapple_r + apple_r * 1.1\n    return str(round(orangen - pineapple, 2))\n    # return \"%.2f\" %(orangen-pineapple)\n    # return str(round(orangen - pineapple, 2))\n",
        "test": "assert solution(input()) == '3.000000 3.000000 6.000000'",
        "num_ids": 491
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.rstrip()\n",
        "test": "assert solution('foss<<rritun') == 'forritun'",
        "num_ids": 246
    },
    {
        "number": 4798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    dic = dict()\n    for s in stdin:\n        if s in dic:\n            dic[s] += 1\n        else:\n            dic[s] = 1\n    return''.join(sorted(list(dic.keys()), key=lambda x: (x[1:], x[0])))\n",
        "test": "assert solution(\"Mirko-Slavko\") == \"MS\"",
        "num_ids": 419
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = list(map(int, stdin.split()))\n    victory_cards, treasure_cards = [], []\n    for i in range(G):\n        victory_cards.append(i + 1)\n        treasure_cards.append(i + 1)\n    j = 1\n    while j < G:\n        if G - j <= 5:\n            victory_cards.append(G - j)\n            treasure_cards.append(G - j)\n        else:\n            victory_cards.append(j + 1)\n            treasure_cards.append(j + 1)\n        j += 1\n    if C >= 1:\n        treasure_cards.append(C)\n    return 'Province' if Victory_cards.index(max(victory_cards)) == 0 else 'Estate' if \\\n           (max(victory_cards) == 0 and max(treasure_cards) == 1) else \\\n           'Gold' if max(victory_cards) == 1 else 'Silver'\n",
        "test": "assert solution(1) == \"Duchy\"",
        "num_ids": 560
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    d = 0\n    s = 0\n    for i in range(0,n+1):\n        d += i\n    for i in range(0,k+1):\n        s += i\n    if d!= 0:\n        s /= d\n        s = round(s, 10)\n    else:\n        s = round(s, 10)\n    return str(s)\nprint(solution(\"10 3\"))\nprint(solution(\"80 90\"))\n\"\"\"",
        "test": "assert solution(\"4 2\") == \"75.71428571\"",
        "num_ids": 435
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    gis = []\n    for i in range(n):\n        gis.append(a[i] + max(a[(i+1) % n] - 1, a[(i-1) % n]))\n    print(len(set(gis)))\n    return''.join(map(str, gis))",
        "test": "assert solution(stdin) == \"5\"",
        "num_ids": 392
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n    for _ in range(T):\n        h, m = list(map(int, input().strip().split(' ')))\n        print(h*60 + m)\n",
        "test": "assert solution(stdin), \"The solution to the problem is not valid\"",
        "num_ids": 218
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(float, stdin.split()))\n    for i in range(len(l)):\n        l[i] = abs(l[i])\n    for i in range(len(l)):\n        l[i] = abs(l[i])\n    for i in range(len(l)):\n        l[i] = abs(l[i])\n    for i in range(len(l)):\n        l[i] = abs(l[i])\n    l.sort()\n    for i in range(len(l)):\n        l[i] = abs(l[i])\n    for i in range(len(l)):\n        l[i] = abs(l[i])\n    for i in range(len(l)):\n        l[i] = abs(l[i])\n    return str(max(l))\n\n-----Example-----\n\n>>> from fractions import Fraction\n>>> solution(\"1.99999999999999999\")\n'1.99999999999999999'\n\n>>> solution(\"2.0\")\n'2.0'\n\n>>> solution(\"3.3333333333333333\")\n'3.3333333333333333'\n\n>>> solution(\"1.5\")\n'1.5'\n\n>>> solution(\"2.5\")\n'1.5'\n\n>>> solution(\"3.3333333333333333\")\n'1.3333333333333333'\n\n>>> solution(\"3.0\")\n'3.0'\n\n>>> solution(\"1.1\")\n'1.1'\n\n>>> solution(\"0.33333\")\n'0.33333'\n\n>>> solution(\"0.10000\")\n'0.10000'\n\n\"\"\"",
        "test": "assert solution(\"\"\"-0.6\"\"\") == \"1.414214\"",
        "num_ids": 616
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_rows, num_cols = map(int, stdin.split())\n    flag_patterns = []\n    for row_idx in range(1, num_rows + 1):\n        row = [0] * num_cols\n        for col_idx in range(1, num_cols + 1):\n            if row_idx == num_rows:\n                row[col_idx] = 1\n            elif col_idx == num_cols:\n                row[col_idx - 1] = 1\n            else:\n                if row_idx - 1 == num_rows:\n                    row[col_idx - 1] = 1\n                if col_idx - 1 == num_cols:\n                    row[col_idx - 1] = 1\n                else:\n                    row[col_idx - 1] = row[col_idx]\n        flag_patterns.append(''.join(map(str, row)))\n    return '\\n'.join(flag_patterns)\n",
        "test": "assert solution(input) == \"2,2\"",
        "num_ids": 782
    },
    {
        "number": 4805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        for j in range(i+1, len(stdin)):\n            for k in range(j+1, len(stdin)):\n                if stdin[i] == stdin[j] and stdin[i] == stdin[j]:\n                    if stdin[k] == stdin[i]:\n                        return \"no\"\n    return \"yes\"\n",
        "test": "assert solution(\"IN THE RAIN AND THE SNOW\") == \"yes\"",
        "num_ids": 390
    },
    {
        "number": 4806,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(['L' if s.startswith('R') else 'H' for s in stdin.split()])",
        "test": "assert solution(\"RRBBBLLR\"), \"R BRR\"",
        "num_ids": 422
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    string = list(stdin.strip().split())\n    n = int(string[0])\n    k = int(string[1])\n    m = int(string[2])\n    string = list(map(str, range(1,n+1)))\n    result = []\n    for i in range(1, m+1):\n        if i % k == 0 and i % n!= 0:\n            result.append(\"FizzBuzz\")\n        elif i % k == 0:\n            result.append(\"Fizz\")\n        elif i % n == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n    return \" \".join(result)\n",
        "test": "assert solution(input()) == \\",
        "num_ids": 2028
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    d_m = int(stdin[1])\n    d_m = min(d_m, 100)\n    k = 100\n    while d_m > 0:\n        if d_m % k == 0:\n            break\n        else:\n            d_m = d_m // k\n            k = k * 10\n    if n % d_m!= 0:\n        print('It had never snowed this early!')\n    else:\n        print('It hadn\\'t snowed this early!')\n    return \"\"\n\nSample Input 3:\n10\n3 2\nSample Output 3:\nIt hadn't snowed this early!\n\nSample Input 4:\n2 20\n4 100\nSample Output 4:\nIt hadn\\'t snowed this early!\ndef",
        "test": "assert solution(stdin) == 'It hadn\\'t snowed this early!', 'incorrect result'",
        "num_ids": 503
    },
    {
        "number": 4809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, n2 = list(map(int, stdin.split()))\n    #n2/2: Number of alternating pairs\n    #stdin: $s$ ($0 < s \\le 100$) and $n$ ($2 \\le n \\le 100$)\n    if n2 % 2 == 0:\n        p = n2//2\n        if n2//2 > 0:\n            for i in range(1, p+1):\n                for j in range(i, p, -1):\n                    if n == j:\n                        return i\n    else:\n        p = n2//2\n        if n2//2 > 0:\n            for i in range(1, p+1):\n                for j in range(i, p, -1):\n                    if n == j:\n                        return i\n    return 0\n\ndef",
        "test": "assert solution(10,10) == 2",
        "num_ids": 1734
    },
    {
        "number": 4810,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 100:\n        return \"\"\n    result = \"\"\n    for i in range(n):\n        matrix = list(map(str, input().strip().upper()))\n        for j in range(len(matrix)):\n            if matrix[j] == '$':\n                result += '$'\n            elif matrix[j] == '\\t':\n                result += '\\t'\n            else:\n                result += matrix[j]\n        result += '\\n'\n    return result\n\nprint(solution(\"bok\"))\n\"\"\"",
        "test": "assert solution('koaski') == 'kakosi'",
        "num_ids": 522
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    if N <= 2:\n        return K\n    a, b = map(int, stdin.split())\n    if a <= b:\n        return b-a\n    return -1\n",
        "test": "assert solution(stdin) == 8",
        "num_ids": 243
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    w = stdin.split()\n    \n    common = ''\n    \n    for i in range(0,len(w)):\n        \n        if w[i].isalpha():\n            common += w[i]\n        \n    if len(common) < 20:\n        return \"NO\"\n    \n    for i in range(0,len(w)):\n        \n        if w[i]!= common[i] and w[i]!= common[-i-1]:\n            \n            if w[i+1] == common[-1]:\n                for i in range(i,len(w)):\n                    if w[i]!= common[i] and w[i]!= common[i-1]:\n                        \n                        break\n                    else:\n                        \n                        common = common[:i] + common[i:]\n                        \n                        break\n                    \n            else:\n                for i in range(i,len(w)):\n                    if w[i]!= common[i] and w[i]!= common[i-1]:\n                        \n                        break\n                    else:\n                        \n                        common = common[:i] + common[i:]\n                        \n                        break\n        \n    if len(common) < 20:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert solution('S D R E A T A H L I A T E S') == 'YES'",
        "num_ids": 984
    },
    {
        "number": 4813,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    word_letters = list(map(str, list(word)))\n    word_letters = list(map(str, list(word)))\n    if len(word_letters) < 16:\n        return \"LOSE\"\n    else:\n        permutation = list(str(word_letters))\n        for i in range(26):\n            permutation.append(str(i + ord('A')))\n        permutation = list(permutation)\n    permutation = ''.join(permutation)\n    word_letters = ''.join(word_letters)\n    letters_not_used = list(word_letters)\n    letter_not_used = list(permutation)\n    letters_used = list(permutation)\n    letter_used = letters_not_used + letter_not_used\n    letters_used_in_word = list(map(str, letters_used))\n    letters_not_used_in_word = list(letters_not_used)\n    letters_used_in_word = list(letters_used)\n    letters_not_used_in_word = list(letters_not_used_in_word)\n    letters_used_in_word = list(map(str, letters_used_in_word))\n    letters_used_in_word = list(letters_used_in_word)\n    for i in letters_not_used_in_word:\n        letters_used.remove(i)\n    for i in letters_used_in_word:\n        letters_not_used.remove(i)\n    for i in letters_used_in_word:\n        if letters_not_used_in_word.index(i) < len(letters_not_used_in_word):\n            letters_not_used.append(letters_not_used_in_word[letters_not_used_in_word.index(i)])\n        else:\n            letters_not_used.remove(letters_not_used_in_word[letters_not_used_in_word.index(i)])\n    letters_used = list(letters_used)\n    letters_not_used = list(letters_not_used)\n    letters_used = list(map(str, letters_used))\n    letters_not_used = list(letters_not_used)\n    letters_used_in_word = list(map(str, letters_used_in_word))\n    letters_used_in_word = list(letters_used_in_word)\n    for i in letters_used:\n        letters_not_used.remove(i)\n    for i in letters_used:\n        if letters_not_used.index(i) < len(letters_not_used):\n            letters_not_used.append(letters_not_used[letters_not_used.index(i)])\n        else:\n            letters_not_used.remove(letters_not_used[letters_not_used.index(i)])\n    letters_used = ''.join(letters_used)\n    letters_not_used = ''.join(letters_not_used)\n    if letters_used_in_word.index(letters_used_in_word[letters_used_in_word.index(letters_not_used)]) > letters_used_in_word.index(letters_used_in_word[letters_not_used]):\n        letter_used = letters_used_in_word[letters_used_in_word.index(letters_not_used)]\n        letters_used_in_word.remove(letter_used)\n    else:\n        letter_used = letters_used_in_word[letters_used_in_word.index(letters_not_used)]\n        letters_not_used_in_word.remove(letter_used)\n    if len(letters_not_used_in_word) < len(letters_not_used):\n        letter_not_used = ''.join(letters_not_used_in_word)\n    else:\n        letter_not_used = ''.join(letters_not_used_in_word)\n    if letter_not_used.isalpha() and letter_used.isalpha() and len(letter_not_used) == len(letter_used):\n        return letter_used + letter_not_used\n    else:\n        return \"LOSE\"",
        "test": "assert solution(\"BANANA\") == \"LOSE\"",
        "num_ids": 1347
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"NEITHER\"\n    prefix = stdin[:N//2]\n    if stdin[N//2:]:\n        suffix = stdin[N//2:]\n        prefix, suffix = sorted(prefix, key=lambda x: x*-1), sorted(suffix, key=lambda x: x*-1)\n        return \"\".join(prefix) + \"\".join(suffix) + \"\".join(sorted(prefix[::-1] + suffix[::-1]))\n    return prefix[::-1] + suffix[::-1]\n\n--------------------------------------------------\n\nSample Input:\n5\nJOE\nBOB\nANDY\nAL\nADAM\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\nSample Output:\nDecREASING\n\nSample Input:\n11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\nSample Output:\nNEITHER\n\n'''",
        "test": "assert solution(\\\"\\\"\\\"\\\"\\\")\\\")\\\"\\\"\\\"\\\"\\\")\\\")\"\"\")",
        "num_ids": 505
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    names = []\n    lines = []\n    \n    for _ in range(int(stdin)):\n        line = stdin.split(' ')\n        names.append(line[0])\n        if len(line) > 1:\n            lines.append(line[1])\n        else:\n            lines.append('')\n    \n    for i in range(len(lines)):\n        if lines[i] == '<':\n            lines[i] = ''\n            names[i] = names[i].replace('<', '')\n        \n    for i in range(len(names)):\n        names[i] = names[i].replace(' ', '')\n        \n    ans = ''\n    \n    for i in range(len(names)):\n        for j in range(len(names)):\n            if names[i] == names[j]:\n                ans += names[j]\n                names[j] = ''\n                if j == len(names) - 1:\n                    ans +=''\n            else:\n                ans +=''\n                names[j] = ''\n        ans += names[i]\n    \n    if ans[0] =='':\n        ans = ans[1:]\n    \n    if ans[-1] =='':\n        ans = ans[:-1]\n    \n    if ans[-1]!='':\n        ans +=''\n    \n    print(ans)\n    \n    return ans",
        "test": "assert solution(",
        "num_ids": 821
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(s) for s in stdin.split()]\n    lst.sort()\n    \n    if len(lst) <= 1:\n        return '0.0'\n    \n    def check(lst):\n        for i in range(len(lst)-1):\n            if lst[i] + 1 == lst[i+1]:\n                continue\n            else:\n                return False\n        return True\n    \n    def dfs(lst):\n        for i in range(len(lst)):\n            if lst[i] + 1 > lst[i+1]:\n                return True\n        return False\n    \n    for i in range(len(lst)-2):\n        if dfs(lst[i:i+3]) or dfs(lst[i+3:]):\n            return str(lst[i+3]-lst[i])\n    return '0.0'\n",
        "test": "assert solution(stdin), \"False\"",
        "num_ids": 613
    },
    {
        "number": 4817,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return '0'\n    a = str(n)\n    while len(a) < 8:\n        a = '0' + a\n    index = 0\n    num_list = []\n    for i in range(len(a)):\n        if a[i]!= '0':\n            num_list.append(a[i])\n        else:\n            num_list.append(a[index])\n            index += 1\n    if len(num_list)!= 9:\n        return '0'\n    for i in range(len(num_list)):\n        if num_list[i] == '0':\n            num_list[i] = str(len(num_list) - i - 1)\n    return ''.join(num_list)\n",
        "test": "assert solution(\"255\") == \"0\"",
        "num_ids": 433
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    n, m = tasks[0], tasks[1]\n    tasks = tasks[2:]\n    \n    if n >= m:\n        tasks = [n] * m + tasks\n    else:\n        tasks = [n] * m + [m + 1] * n + tasks\n    \n    # print(tasks)\n    \n    # print(tasks.index(m))\n    # print(tasks[tasks.index(m):])\n    # print(tasks[:tasks.index(m)])\n    \n    out = len(tasks)\n    \n    # print(tasks)\n    # print(n)\n    # print(m)\n    \n    while True:\n        print(out)\n        \n        # print(tasks[tasks.index(m):])\n        # print(tasks[:tasks.index(m)])\n        \n        if tasks[tasks.index(m)] <= tasks[tasks.index(m-1)]:\n            out += 1\n            tasks[tasks.index(m-1)] = 0\n            tasks[tasks.index(m)] = 0\n            # print(tasks)\n            # print(tasks.index(m))\n            # print(tasks[tasks.index(m):])\n            # print(tasks[:tasks.index(m)])\n            \n        elif tasks[tasks.index(m)] >= tasks[tasks.index(m-1)]:\n            tasks[tasks.index(m)] = 0\n            tasks[tasks.index(m-1)] = 0\n            # print(tasks)\n            # print(tasks.index(m))\n            # print(tasks[tasks.index(m):])\n            # print(tasks[:tasks.index(m)])\n            \n        else:\n            break\n    \n    print(out)\n    return str(out)\n\nsolution(\"3 4\")\nsolution(\"5 5\")\nsolution(\"1 1\")\nsolution(\"1 4 5\")\nsolution(\"1 1 2\")\nsolution(\"1 3 4\")\nsolution(\"5 3\")\nsolution(\"1 1 1\")\nsolution(\"5 5 5\")\nsolution(\"1 1 1 1\")\nsolution(\"1 3 3 3\")\nsolution(\"1 1 1 1 1\")\nsolution(\"1 3 3 3 3\")\nsolution(\"5 3\")\nsolution(\"1 1 1 1 1 1\")\nsolution(\"1 3 3 3 3 3\")\nsolution(\"1 1 1 1 1 1 1\")\nsolution(\"1 3 3 3 3 3 3\")\nsolution(\"1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "test": "assert solution([\"3\", \"5\"]) == \"3\"",
        "num_ids": 2416
    },
    {
        "number": 4819,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) % int(stdin[1]))\n\n-----Examples-----\nIn [1]: solution('2 3 4')\nOut[1]: '5'\n\nIn [2]: solution('12')\nOut[2]: '0'\n\nIn [3]: solution('42')\nOut[3]: '1'\n\nIn [4]: solution('42 1')\nOut[4]: '1'\n\nIn [5]: solution('42 8')\nOut[5]: '2'\n",
        "test": "assert solution('42') == '10'",
        "num_ids": 283
    },
    {
        "number": 4820,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    temp = 0\n    for i in stdin:\n        temp = pow(2, len(i))\n        cnt += temp\n        if cnt == 1000:\n            print(\"yes\")\n            return \"yes\"\n        if cnt > pow(2, len(i)):\n            print(\"no\")\n            return \"no\"\n    print(\"no\")\n    return \"yes\"\n\n\nInput:\n3 12\n1 1\n2 1\n3 2\n\nOutput:\nyes\n\nExplanation:\nThe files in the collection are: 1 1, 2 2, 3 3.\nThere are not enough space in the input to satisfy the maximum number of bits the compressed files can have. So it is impossible to compress all of them.\n\"\"\"\nclass Solution:\n    def compression(self, N, b):\n        for i in range(N):\n            for j in range(b):\n                if len(str(i)) - j == b-1:\n                    return \"yes\"\n                else:\n                    return \"no\"\n        return \"no\"\n        \n        \n    def solution(self, N, b):\n        count = 0\n        temp = 0\n        for i in range(1,N+1):\n            temp += pow(2,len(str(i)))\n            if temp <= b:\n                count += 1\n        if count == N:\n            print(\"yes\")\n            return \"yes\"\n        else:\n            print(\"no\")\n            return \"no\"\n            \n",
        "test": "assert solution(\"10000000\") == \"yes\"",
        "num_ids": 811
    },
    {
        "number": 4821,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s == \"\": return \"0\"\n    l = s.split(\" \")\n    if len(l)!= 4: return \"GRESKA\"\n    answer = \"\"\n    for i in l:\n        if i == \"P\":\n            answer += \"P\"\n        elif i == \"K\":\n            answer += \"K\"\n        elif i == \"H\":\n            answer += \"H\"\n        elif i == \"T\":\n            answer += \"T\"\n    return answer\n",
        "test": "assert solution('JQI') == 'GRESKA'",
        "num_ids": 410
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.split()[0])\n    S = int(stdin.split()[1])\n    K = int(stdin.split()[2])\n    D = int(stdin.split()[3])\n    M = int(stdin.split()[4])\n    \n    R = (S//2)**D\n    if S%2 == 0:\n        S += 1\n    if D > 0:\n        D -= 1\n        \n    for i in range(M):\n        print('-'.join([str(i) for i in range(R)] + ['|' for _ in range(S)]))\n    for i in range(S):\n        print('*'.join([str(i) for i in range(R)] + ['|' for _ in range(S)]))\n    \n    # print(*range(R), sep = '\\n')\n    # print(*range(S), sep = '\\n')\n    # print(*range(K), sep = '\\n')\n    # print(*range(D), sep = '\\n')\n    # print(*range(M), sep = '\\n')\n    # print(*range(S-R+1, S), sep = '\\n')\n    # print(*range(S-R+1, S-K+1), sep = '\\n')\n    # print(*range(K-S-1, K+1), sep = '\\n')\n    \n    return '1'\n",
        "test": "assert solution(input()) == '2'",
        "num_ids": 802
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a=list(map(int,stdin.split()))\n    a.sort()\n    sum=0\n    for i in a:\n        sum+=i**2\n    return str(sum)\n\n-----Expected Output-----\nOutput:\n4\n-----Constraints-----\n1 <= n <= 100\n\n1 <= k <= 7\n\"\"\"\n\nclass Solution:\n    def strength(self,hand,k):\n        s=0\n        for i in hand:\n            if i[0]==k:\n                s+=i[1]\n        return s\n",
        "test": "assert solution([\"AD\", \"2D\", \"2H\", \"AC\", \"AD\", \"AS\", \"AS\", \"KS\", \"2C\", \"4D\", \"4H\", \"2D\", \"2H\"]) == \"4D\"",
        "num_ids": 885
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def next_squares(n):\n        if n == len(stdin):\n            return str(0)\n        elif n >= len(stdin) // 4:\n            return str(1)\n        else:\n            return str(1) + '0' + '0' + next_squares(n+1)\n    \n    def rotate(n):\n        if n == len(stdin):\n            return str(0)\n        else:\n            return str(1) + '0' + '0' + rotate(n+1)\n    \n    def get_all_squares(n):\n        squares = ''.join(rotate(n))\n        squares = squares[:-1] + '0' + squares[-1]\n        return squares\n    \n    def get_valid_moves(n):\n        squares = get_all_squares(n)\n        if squares == str(0):\n            return 0\n        else:\n            squares = squares[1:len(squares) - 1] + '0' + squares[-1]\n            return squares\n    \n    return ''.join(get_valid_moves(len(stdin)))\n",
        "test": "assert solution(stdin) == '7'",
        "num_ids": 2068
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    pass\n",
        "test": "assert solution(input()) == input(), \"Your solution does not match the expected output\"",
        "num_ids": 1417
    },
    {
        "number": 4826,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = ''\n    # print(N)\n    if N%2 == 0:\n        ans = 'Alice'\n    else:\n        ans = 'Bob'\n    # print(ans)\n    return ans",
        "test": "assert solution('4') == 'Alice'",
        "num_ids": 358
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin.split(\" \")[:1])\n\n-----Examples-----\nInput:\n1\nthis is\nsentence\nthat\nhas\n$\nletters\nOutput:\nthis\nsentence\nthat\nhas\n$\nletters\nExplanation:\n$: The '$' character itself.\n(All the characters except $ are in the middle of the sentence to the left of the dollar sign.)\nSolution 1:\nThere\u2019s just a single $ character: the only error we can get if we are reading the input \u201cthis is\nthirty\u201d.\n\nSolution 2:\nThere\u2019s more than a single $ character: there\u2019s a problem of the input. Because the input is too short, we need to fix it.\n\"\"\"",
        "test": "assert solution(input()) == \"this sentence has thirtyone letters\"",
        "num_ids": 788
    },
    {
        "number": 4828,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)) - 2)\n",
        "test": "assert solution('B') == 'b'",
        "num_ids": 244
    },
    {
        "number": 4829,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = ''\n    for i in range(n):\n        tmp = k\n        answer += str(tmp)\n        k -= 1\n    print(answer)\n    return answer\n\nSample Input 3:\n10 10\n10 10 10 10\nSample Output 3:\n10\ndef",
        "test": "assert solution(stdin) == \"Odd 6\"",
        "num_ids": 308
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import string\n    solution = 0\n    for i in stdin:\n        if i in string.ascii_lowercase:\n            solution += (string.ascii_lowercase.index(i) + 1) * (len(string.ascii_lowercase) - string.ascii_lowercase.index(i))\n        if i in string.ascii_uppercase:\n            solution += (string.ascii_uppercase.index(i) + 1) * (len(string.ascii_uppercase) - string.ascii_uppercase.index(i))\n        if i in string.digits:\n            solution += (string.digits.index(i) + 1) * (len(string.digits) - string.digits.index(i))\n    return str(solution)\n\ndef",
        "test": "assert solution(stdin) == \"2\"",
        "num_ids": 3226
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    res = \"\"\n    a, b = 0, 0\n    for i in stdin:\n        if i == \"A\":\n            a = 5 - a\n        elif i == \"B\":\n            b = 5 - b\n        elif i == \"C\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"D\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"E\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"F\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"G\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"H\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"I\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"J\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"K\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"L\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"M\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"N\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"O\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"P\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"Q\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"R\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"S\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"T\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"U\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"V\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"W\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"X\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"Y\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:\n                res += \"....#\"\n        elif i == \"Z\":\n            if a!= 5:\n                a -= 1\n                res += \"..#..\"\n            if b!= 5:\n                b -= 1\n                res += \"....#\"\n            if a == 0 and b == 0:",
        "test": "assert solution(stdin), \"The solution should be DOG.\"",
        "num_ids": 3556
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    t = []\n    for i in range(3, 11):\n        t.append(int(stdin[i]))\n    n = len(t)\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            t[j] += t[i]\n    for j in range(n-1, 0, -1):\n        t[j] /= 2\n    for i in range(0, n-1):\n        t[i] += t[i+1]\n    print(t[n-1])\n    return str(abs(t[n-1]))\n\n-----Examples-----\nTest Input\nSample Input 1:\n\n1\nSample Output 1:\n3.141593\n2.000000\n\nSample Input 2:\n\n21\nSample Output 2:\n1385.442360\n882.000000\ndef",
        "test": "assert solution(stdin) == \"882.000000\"",
        "num_ids": 870
    },
    {
        "number": 4833,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = b - a\n    n = b - a + 1\n    ans = (k - 1) * n\n    \n    return str(ans)\n\ndef",
        "test": "assert solution('1 2 3 5') == 2 + 5",
        "num_ids": 392
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    n_list = list(map(int, stdin.split()))\n    sorted_list = sorted(n_list, reverse=True)\n\n    if c == 0:\n        return '1000'\n\n    for i in range(len(n_list) - 1):\n        for j in range(i + 1, len(n_list)):\n            if n_list[i] + n_list[j] < sorted_list[j]:\n                n_list[j], n_list[i] = n_list[i], n_list[j]\n\n    for i in range(len(sorted_list)):\n        if n_list[i] == sorted_list[i]:\n            continue\n        return '1000'\n",
        "test": "assert solution(",
        "num_ids": 3437
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    t, n, m = map(int, stdin.split())\n    wall_maria = []\n    for i in range(n):\n        wall_maria.append(stdin.split()[i])\n    zones = 0\n    positions = []\n    directions = ['R', 'U', 'D', 'L']\n    for i in range(n):\n        for j in range(m):\n            if wall_maria[i][j] == 'S':\n                positions.append((i, j))\n            elif wall_maria[i][j] == 'U' and directions.index('U') < directions.index(positions[len(positions) - 1][0]):\n                positions.append((i, j))\n            elif wall_maria[i][j] == 'D' and directions.index('D') < directions.index(positions[len(positions) - 1][0]):\n                positions.append((i, j))\n            elif wall_maria[i][j] == 'L' and directions.index('L') < directions.index(positions[len(positions) - 1][0]):\n                positions.append((i, j))\n            elif wall_maria[i][j] == 'R' and directions.index('R') < directions.index(positions[len(positions) - 1][0]):\n                positions.append((i, j))\n            else:\n                positions.pop(-1)\n    for i in range(n):\n        if positions[i][0] + 1 < n and positions[i][1] < m:\n            zones += 1\n    return str(zones)\n\nsolution(\"\"\"1 1\n1111\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR R R\nR",
        "test": "assert solution([\"2\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\"]) == \"0U11\"",
        "num_ids": 2085
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, c = map(int, stdin.split())\n    tree = []\n    for i in range(n):\n        tree.append(list(map(int, stdin.split())))\n    answer = -1\n    def helper(y):\n        if len(tree[y]) == 0:\n            return 0\n        result = 0\n        for i in range(len(tree[y])):\n            result += tree[y][i] * helper(i)\n        return result\n    answer = max(answer, helper(0))\n    for i in range(1, n):\n        result = max(answer, helper(i))\n        answer = max(result, answer)\n    return answer",
        "test": "assert solution(input()) == \"4\"",
        "num_ids": 1015
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, r, s = map(int, stdin.split())\n    symbols = 'SR' * (r * 2) + 'PP' * (r * 2) + 'RS' * (r * 2) + 'SP' * (r * 2)\n    win = symbols.count('R') + symbols.count('P')\n    return f'{win}'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nN = int(input().strip())\nR, P, S = map(str, input().strip().split())\n\nwin = symbols.count('R') + symbols.count('P')\nwin = symbols.count('R') + symbols.count('P') + symbols.count('S')",
        "test": "assert solution(stdin) == \"15\"",
        "num_ids": 1857
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def time(s):\n        return int(s[:2])*60+int(s[3:5])\n    \n    N, t = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    \n    res = \"\"\n    \n    # print(t)\n    \n    for i in range(N-1):\n        curr = s[i]\n        next = s[i+1]\n        \n        # print(curr, next)\n        \n        if curr!=next:\n            curr = time(curr)\n            next = time(next)\n            \n            # print(curr, next)\n            \n            if curr<next:\n                res += \"0\"\n            else:\n                res += \"1\"\n        else:\n            res += \"1\"\n            \n    return res\n",
        "test": "assert solution(3) == \"5 seconds\"",
        "num_ids": 478
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    gas = list(map(int, stdin.split()))\n    k = max(gas)\n    i = 1\n    while k > 0:\n        if k // gas[i] < gas[i + 1] // gas[i]:\n            k -= gas[i + 1] // gas[i]\n            i += 1\n        elif k // gas[i] > gas[i + 1] // gas[i]:\n            k -= gas[i] // gas[i + 1]\n            i += 1\n        else:\n            i += 1\n    f = 1\n    for i in range(1, i+1):\n        if gas[i]!= 0:\n            f *= 1 - (gas[i] / gas[i-1])\n    print(f)\n    return str(f)\n\nSample Input 3:\n1\n5\nSample Output 3:\n0\nExplanation:\nThe maximum fraction $f$ is obtained by taking the maximum possible fraction of helium inside a ball. The maximum fraction $f$ is obtained by taking the smallest possible fraction of helium inside a ball.\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= c_1, \\ldots, c_n <= 10^5\n1 <= c_i \\le n\n\n-----Time Limit: 1 min\n\n-----Submissions: 13,754\n\n-----Dynamic Programming Algorithm\n\"\"\"\ndef",
        "test": "assert solution(stdin) == 0.6",
        "num_ids": 784
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2 = map(int, stdin.split())\n    a_1, a_2 = a1, a2\n    a = sorted([a_1, a_2])\n    b = sorted([a_2, a_1])\n    if a_1 > b_1 or a_2 > b_2:\n        return 'Tie'\n    if a_1 == b_1 and a_2 == b_2:\n        return 'Tie'\n    elif a_1 > b_2 or a_2 > b_1:\n        return 'Emma'\n    else:\n        return 'Gunnar'\n",
        "test": "assert solution(stdin), \"Test failed!\"",
        "num_ids": 1971
    },
    {
        "number": 4841,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # ===Modify here===\n    pass\n\ndef",
        "test": "assert solution(stdin) == \"something is fishy\"",
        "num_ids": 388
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def norm(st):\n        v = 0\n        for i in range(len(st)):\n            v += st[i]**len(st)\n        return v\n    def verif(st):\n        if len(st) > 2:\n            st = st[1:]\n            st += st[0]\n        return norm(st)**2\n    n,v = map(int,stdin.split())\n    d = n\n    p = []\n    for i in range(n+1):\n        p.append(verif(str(i)))\n    p.sort(reverse=True)\n    for i in range(n):\n        if i < n-1:\n            if p[i] == p[i+1]:\n                p[i] *= -1\n            elif p[i] == p[i+1] + p[i+2]:\n                p[i] *= -2\n            else:\n                p[i] *= -3\n    return''.join(map(str,p))\n\nprint(solution(\"5 3 6 9 12 15\"))\nprint(solution(\"4 9 25 49 81\"))\n\"\"\"\n",
        "test": "assert solution(stdin) == '1 18'",
        "num_ids": 1943
    },
    {
        "number": 4843,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 0 or n >= 4:\n        return \"INCORRECT\"\n    _queens = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        _queens.append((x, y))\n    solution = []\n    \n    def check(x, y, q, _):\n        if _ == n:\n            return True\n        if not 0 <= x < n or not 0 <= y < n or _ == q:\n            return False\n        return check(x+1, y, q*n+1, _+1) and check(x-1, y, q*n+1, _+1) and check(x, y+1, q*n+1, _+1) and check(x, y-1, q*n+1, _+1)\n    for _ in range(n):\n        if not check(_queens[0][0], _queens[0][1], _queens[0][2], _queens[0][3]):\n            return \"INCORRECT\"\n    for _ in range(n):\n        for j in range(n):\n            if not check(_queens[_j][0], _queens[_j][1], _queens[_j][2], _queens[_j][3]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\"\"\"\ndef",
        "test": "assert solution(\"4 1\") == \"CORRECT\"",
        "num_ids": 771
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    N=int(stdin)\n    num_list=list(map(int,stdin.split()))\n    \n    left=[]\n    right=[]\n    \n    for i in range(N):\n        if num_list[i]<0:\n            left.append(num_list[i])\n        else:\n            right.append(num_list[i])\n    \n    for i in range(N):\n        if num_list[i]!=0:\n            left.append(num_list[i])\n        else:\n            right.append(num_list[i])\n    \n    for i in range(N):\n        num_list[i]=left[i]+right[i]\n    return str(num_list)\n",
        "test": "assert solution(stdin) == '1 2 3 11'",
        "num_ids": 2060
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = []\n    for i in range(len(stdin)):\n        days.append(int(stdin[i])-1)\n    days.sort()\n    if days[0] == days[1] or days[-1] == days[-2]:\n        return 'Sunday'\n    for i in range(1, len(days)):\n        if days[i] == days[i-1]+1:\n            return 'Sunday'\n        elif days[i] == days[i-1]-1:\n            return 'Sunday'\n        else:\n            return 'Monday'\n'''\nimport time\ndef",
        "test": "assert solution(stdin) == \"Saturday\"",
        "num_ids": 377
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = map(int, stdin.split())\n    if D < L:\n        return str(L) +'' + str(D) +'' + str(X)\n    \n    if D < L < D * D:\n        return str(D) +'' + str(L) +'' + str(X)\n    if L % D == 0:\n        return str(L) +'' + str(D) +'' + str(X) +'' + str(L % D)\n    if L % D % D == 0:\n        return str(L) +'' + str(D) +'' + str(X) +'' + str(L % D % D)\n    if L % D % D % D == 0:\n        return str(L) +'' + str(D) +'' + str(X) +'' + str(L % D % D % D)\n    return str(L) +'' + str(D) +'' + str(X) +'' + str(L % D % D % D % D)\n",
        "test": "assert solution(stdin) == '129'",
        "num_ids": 516
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    trees = int(stdin)\n    answer = []\n    for _ in range(trees):\n        trees_count = int(stdin[:3])\n        answer.append(trees_count//2)\n        trees_count = trees_count%2\n        if trees_count == 0:\n            answer.pop()\n        else:\n            answer.append(trees_count//2)\n    return \"\".join(str(e) for e in answer)\n",
        "test": "assert solution(stdin), '3 is incorrect'",
        "num_ids": 396
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num = 0\n    for n in range(int(stdin[0]),int(stdin[1])+1):\n        if n<=0:\n            return \"N\"\n        else:\n            n1 = n**2\n            if n1<=30:\n                num+=1\n            else:\n                if num%2==0:\n                    num+=1\n                    return \"N\"\n    return \"N\"\n\n-----Examples-----\nThe sample inputs are shown below.\n\nSample Input 1:\n4\nSample Output 1:\n3\n\nSample Input 2:\n1\nSample Output 2:\n1\n\nSample Input 3:\n1\nSample Output 3:\n1\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        n = int(stdin[0])\n        m = int(stdin[1])\n        if (n%m)==0:\n            return (n*m)//2\n        else:\n            return (n*m)//2\n\ndef",
        "test": "assert solution(0) == 1",
        "num_ids": 394
    },
    {
        "number": 4849,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    registrations = []\n\n    for i in stdin.split():\n        if i.isdigit():\n            registrations.append(int(i))\n        else:\n            if registrations:\n                registrations.append(registrations.pop(0))\n    registrations.sort()\n    for r in registrations:\n        result.append(r+' ')\n    \n    return '\\n'.join(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1993
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    triangles = [list(map(int, list(stdin.strip()))) for _ in range(N)]\n    return min([len(a) + len(b) for a, b in itertools.combinations(triangles, 2)])\n    \n    \ndef",
        "test": "assert solution(\"2 4 3\") == \"6.843530573929037\"",
        "num_ids": 2808
    },
    {
        "number": 4851,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(i) for i in stdin.split() if i.isdigit()))\n",
        "test": "assert solution(\"24\") == \"24\"",
        "num_ids": 290
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pairs = {}\n    targets = {}\n    for c in stdin:\n        if c not in targets:\n            targets[c] = 0\n        targets[c] += 1\n    for c in stdin:\n        if c in pairs:\n            pairs[c] += 1\n        else:\n            pairs[c] = 1\n    for c in pairs:\n        if pairs[c]!= 1:\n            return c\n    return \"NaN\"\n\nSample Input 3:\n1+2+3+4+5\nSample Output 3:\nNaN\n\nSample Input 4:\n1+2+3+4+5+6+7+8+9+10\nSample Output 4:\n188\n'''\nclass Solution:\n    def plusOne(self, digits: str) -> str:\n        if digits[0] == '0':\n            digits = digits[1:]\n            digits = digits[::-1]\n        else:\n            digits = digits[::-1]\n        \n        i = len(digits) - 1\n        carry = 1\n        \n        for c in digits:\n            digit = int(c) + carry\n            if c == '1':\n                carry = 1\n            else:\n                carry = 0\n                \n            if carry == 0:\n                digit = 0\n            else:\n                digit = 1\n            \n            digit = str(digit)\n            \n            #print(digit)\n            digits = digits[:i] + digit + digits[i + 1:]\n            #print(digits)\n            #print(i)\n        \n        if carry == 1:\n            digits = digits + '1'\n        \n        #print(digits)\n        return digits",
        "test": "assert solution(stdin) == 188, \"incorrect output\"",
        "num_ids": 756
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    C = []\n    for i in range(1, n+1):\n        C.append(int(stdin.strip()[i-1]))\n    return''.join(map(str, C))\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n2\nSample Output 4:\n2\n\nSample Input 5:\n2 3 4 5\nSample Output 5:\n3 4 5\ndef",
        "test": "assert solution(\"1 2 3 4\") == \"1 2 3 4\"",
        "num_ids": 1747
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    A,B,C = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    for i in range(len(D)):\n        D[i] -= 1\n        if D[i] <= 0:\n            D[i] = 0\n    A,B = sorted(A,reverse=True),sorted(B,reverse=True)\n    \n    solution = []\n    for i in range(C):\n        solution.append(A.index(D[i]))\n    \n    return''.join(str(i) for i in solution)\n",
        "test": "assert solution(",
        "num_ids": 944
    },
    {
        "number": 4855,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, A, I = map(int, stdin.split())\n    return str(A/I + (A-n) / (I-1))\nprint(solution(input()))",
        "test": "assert solution(\u201cJournal for ore research and time wasting\u201d) == 123",
        "num_ids": 217
    },
    {
        "number": 4856,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    num1 = int(stdin[0])\n    num2 = int(stdin[1])\n    plus, minus, mult, div = 0, 0, 0, 1\n    \n    for i in range(len(stdin)-1):\n        \n        if num1 % 10!= stdin[i+1]:\n            num1 += int(stdin[i+1])\n            continue\n        elif num2 % 10!= stdin[i+1]:\n            num2 += int(stdin[i+1])\n            continue\n        else:\n            if num1 % 10 == stdin[i+1]:\n                num1 += int(stdin[i+1])\n            if num2 % 10 == stdin[i+1]:\n                num2 += int(stdin[i+1])\n                continue\n            elif num1 % 10 == stdin[i+1]:\n                plus += int(stdin[i+1])\n            elif num2 % 10 == stdin[i+1]:\n                minus += int(stdin[i+1])\n            elif num1 % 10 == stdin[i+1]:\n                mult += int(stdin[i+1])\n            elif num2 % 10 == stdin[i+1]:\n                div += int(stdin[i+1])\n    if plus > minus:\n        return str(plus) + \" \" + str(minus) + \" \" + str(mult) + \" \" + str(div)\n    elif minus > plus:\n        return str(plus) + \" \" + str(minus) + \" \" + str(div) + \" \" + str(mult)\n    elif plus == minus:\n        return str(plus) + \" \" + str(minus)\n    elif plus == div:\n        return str(plus) + \" \" + str(div)\n    else:\n        return str(plus) + \" \" + str(div) + \" \" + str(mult)\n",
        "test": "assert solution(",
        "num_ids": 662
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    weights = list(map(int, stdin.split()))\n    for w in weights:\n        answer += chr(ord('a') + w)\n    return answer\n\nSample Input 3:\n6 96 1\nSample Output 3:\ncontest\ninvalid\n'''",
        "test": "assert solution(stdin), \"Programming error!\"",
        "num_ids": 272
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    count = 0\n    n = len(string)\n    i = 0\n    while i < n:\n        a = 0\n        b = 0\n        c = 0\n        while i + a < n:\n            if string[i + a] == string[i]:\n                c += 1\n            else:\n                break\n        while i + b < n:\n            if string[i + b] == string[i]:\n                a += 1\n            else:\n                break\n        while i + c < n:\n            if string[i + c] == string[i]:\n                b += 1\n            else:\n                break\n        i = i + 1\n        count += c\n        i = i + 1\n    return count\n",
        "test": "assert solution(stdin) == 'A'",
        "num_ids": 1269
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    return str(l) + str(d) + str(c)\n",
        "test": "assert solution(input()) == \"1 3\"",
        "num_ids": 1828
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = ''\n    a = list(map(int, stdin.split()))\n    while len(a) < n:\n        a.insert(0, 0)\n    a.sort()\n    for i in a:\n        if i == 0:\n            break\n        result += str(i) +''\n    return result[:-1]",
        "test": "assert solution(\"1 6 10\") == \"2\"",
        "num_ids": 290
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n    n, p, s, v = n + 1, p + 1, s * 10 ** 9, v * 10 ** 6\n    return str(int(np.exp(p * s * v / (n * s))))",
        "test": "assert solution(\"1\") == \"2\"",
        "num_ids": 1495
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split('\\n')[0])\n    characters = [0] * N\n    for i in range(N):\n        temp = list(stdin.strip().split('\\n'))\n        for j in range(len(temp) - 1):\n            if temp[j][0] == temp[j + 1][0]:\n                characters[i] += 1\n    return str(len(characters))\n\n\nSample Output:\nSample Input:\n1\n2\n3\n4\n5\nSample Output:\n4\nExplanation:\n1, 2, 3, 4, 5, have relationships between each of them, so we need to expand the set to 5 which we can access as 1, 2, 3, 4, 5.\n1, 2, 3, 4, 5, have 1, 3, 4, 5, and we need to expand the set to 4 which we can access as 3, 4, 5.\n4, 5, have 1, 2, 3, 4, and we need to expand the set to 2 which we can access as 1, 3.\n5, have 1, 2, 3, 4 and we need to expand the set to 1 which we can access as 1.\n\n\"\"\"\n\nclass Solution:\n    def countRelationship(self, N: int) -> str:\n        characters = [0] * N\n        for i in range(N):\n            temp = list(str(N - 1 + i))\n            for j in range(len(temp) - 1):\n                if temp[j][0] == temp[j + 1][0]:\n                    characters[i] += 1\n        return str(len(characters))\n\n\nprint(Solution().countRelationship(1))\n",
        "test": "assert solution(\"2\") == 1",
        "num_ids": 2284
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    score = 0\n    count = 0\n    n = int(stdin.strip())\n    for i in range(n):\n        a,b = map(str, input().split())\n        if a == b:\n            count += 1\n            score += 3\n        else:\n            score += 1\n    return score // count\n\nSample Output:\n3\n\"\"\"\n\nn = int(input())\narr = input().split()\nfor i in range(n):\n    for j in range(i,n):\n        if arr[i] == arr[j]:\n            print(2,end='')\n            break\n    else:\n        print(1,end='')\n    \n",
        "test": "assert solution(\"6\") == \"A\", \"Sample Test Failed\"",
        "num_ids": 567
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    result = \"\"\n    for line in stdin:\n        for char in line:\n            if char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                a += 1\n            elif char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                b += 1\n            elif char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                c += 1\n            elif char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                d += 1\n            elif char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                e += 1\n            elif char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                f += 1\n            elif char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                g += 1\n            elif char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                h += 1\n            elif char == '.':\n                result += '.'\n            elif char == 'x':\n                result += 'x'\n                i += 1\n    return result\n\n-----Sample Output-----\nExplanation:\n.x.\n.x.\n.x.\n\nExplanation:\n2\n6\n.x.\n.x.\n.x.\n\n-----Constraints-----\n1 <= R <= 50\n1 <= C <= 50\n1 <= Z_ R<=Z_ C\n\"\"\"\nimport math",
        "test": "assert solution(stdin) == '.xx.x.xx.xx'",
        "num_ids": 2707
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    while days!= 0:\n        hour = int(stdin[0:2])\n        minutes = int(stdin[3:5])\n        seconds = int(stdin[6:])\n        days = days - 1\n        hours = hour\n        minutes = minutes\n        if hours!= 0:\n            hours += 1\n        elif hours == 0:\n            hours = 24\n        if minutes!= 0:\n            minutes += 1\n        elif minutes == 0:\n            minutes = 59\n        if hours < 24:\n            hours = hours\n        else:\n            hours = 0\n        if minutes < 60:\n            minutes = minutes\n        else:\n            minutes = 0\n        if seconds < 60:\n            seconds = seconds\n        else:\n            seconds = 0\n        if seconds < 60:\n            seconds = seconds\n        else:\n            seconds = 0\n        print(str(hours) + \":\" + str(minutes) + \":\" + str(seconds))\n        days = days - 1\n    return \"0\"\n\n    pass\n\ndef",
        "test": "assert solution(\"F 61 12 20\") == \"10 20\"",
        "num_ids": 816
    },
    {
        "number": 4866,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    days_set = set()\n    for line in stdin:\n        if line[-1] == '9':\n            days += 1\n        elif line[-1] == '5':\n            days -= 5\n        elif line[-1] == '1':\n            days -= 1\n        else:\n            days_set.add(line)\n    if days == 0:\n        return \"yup\"\n    if days_set == days_set:\n        return \"nope\"\n    else:\n        return \"nope\"\n",
        "test": "assert solution(\"Oct 25\") == \"nope\"",
        "num_ids": 685
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    M, N = list(map(int, stdin.split()))\n    U = list(map(int, stdin.split()))\n    L = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n    D = list(map(int, stdin.split()))\n    \n    grid = []\n    for i in range(M):\n        grid.append(list(map(int, stdin.split())))\n        \n    def solve(i, j):\n        if i < 0 or i >= M or j < 0 or j >= N or grid[i][j]!= '#':\n            return False\n        \n        if grid[i][j] == 'h':\n            grid[i][j] = '#'\n            solve(i+1, j)\n            solve(i-1, j)\n            solve(i, j+1)\n            solve(i, j-1)\n        elif grid[i][j] == '.':\n            grid[i][j] = 'L'\n            solve(i+1, j+1)\n            solve(i-1, j+1)\n            solve(i+1, j-1)\n            solve(i-1, j-1)\n        elif grid[i][j] == '#':\n            grid[i][j] = '#'\n            solve(i+1, j+1)\n            solve(i-1, j+1)\n            solve(i+1, j-1)\n            solve(i-1, j-1)\n    \n    solve(0, 0)\n    \n    result = ''.join(grid[0])\n    \n    return result\n",
        "test": "assert solution(stdin) == \"##.##.\"",
        "num_ids": 2576
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, _ = map(int, stdin.split())\n    K = N % 2\n    a = N // 2\n    b = N // 2\n    p = []\n    for _ in range(N):\n        p.append(a + b)\n        b += 1\n    p.sort()\n    d = []\n    for px in p:\n        d.append(px % 2)\n        px //= 2\n    answer = ''\n    for i in range(len(d)):\n        if d[i] == K:\n            answer += 'r'\n            break\n        else:\n            answer += 'w'\n    return answer\n",
        "test": "assert solution(\"Ke2\") == \"Ke1\"",
        "num_ids": 3148
    },
    {
        "number": 4869,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(' ')\n    if A[0]!= \"0\":\n        A = \"0\" + A[1:]\n    n, M = A\n    if n < int(n):\n        return \"Need more materials!\"\n    if int(M) > int(n):\n        return \"Need more materials!\"\n    if int(A) == int(n):\n        return \"Need more materials!\"\n    if int(A) > int(n):\n        return \"Need more materials!\"\n    if int(A) < int(n):\n        return \"Need more materials!\"\n    if int(M) > int(n):\n        return \"Need more materials!\"\n    if int(A) < int(n):\n        return \"Need more materials!\"\n    if int(A) < int(n):\n        return \"Need more materials!\"\n\n-----Challenge-----\nMake sure you can solve all of the test cases, but if you can't, you can't put your answer in a row!\nThe input needs to be the next command and the output is the next command.\n\"\"\"\n\nimport math\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        A = stdin.split(' ')\n        if A[0]!= \"0\":\n            A = \"0\" + A[1:]\n        n, M = A\n        if n < int(n):\n            return \"Need more materials!\"\n        if int(M) > int(n):\n            return \"Need more materials!\"\n        if int(A) == int(n):\n            return \"Need more materials!\"\n        if int(A) > int(n):\n            return \"Need more materials!\"\n        if int(A) < int(n):\n            return \"Need more materials!\"\n        if int(M) > int(n):\n            return \"Need more materials!\"\n        if int(A) < int(n):\n            return \"Need more materials!\"\n        if int(A) < int(n):\n            return \"Need more materials!\"\n        if int(A) < int(n):\n            return \"Need more materials!\"\n        if int(M) > int(n):\n            return \"Need more materials!\"\n        if int(A) < int(n):\n            return \"Need more materials!\"\n        if int(A) < int(n):\n            return \"Need more materials!\"\n        if int(A) < int(n):\n            return \"Need more materials!\"\n\n\ndef",
        "test": "assert solution(\"0.001\") == \"Need more materials!\"",
        "num_ids": 1014
    },
    {
        "number": 4870,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    print(stdin)\n    f, s, g, u, d = map(int, stdin.split(' '))\n    print(f, s, g, u, d)\n    pass",
        "test": "assert solution('3') == '1'",
        "num_ids": 536
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    group_score = []\n    for n in range(2, int(s[1]) + 1):\n        group_score.append(int(s[0] * (n ** 0.5)))\n    return str(int(sum(group_score)/len(group_score)))\n\n------------------\nSample Input:\n4\n22\n32\n54\n67\n70\nSample Output:\n3\n3.444444444444444\ndef",
        "test": "assert solution(input()) == '89.06666666666666'",
        "num_ids": 587
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ans = 0\n    for i in range(n):\n        days = int(stdin.strip().split()[1])\n        ans += days\n        for j in range(i+1, n):\n            days = int(stdin.strip().split()[1])\n            days += days % 365\n            ans += days\n    return str(ans)\n\nprint(solution(stdin))",
        "test": "assert solution(\"6 1 2 7 8 3\") == \"3\"",
        "num_ids": 1721
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    W,H = map(int, stdin.split())\n    map = [['P' for _ in range(W)] for _ in range(H)]\n    for line in stdin.split():\n        x,y = map[int(line)-1]\n        map[x][y] = 'T'\n    return ''.join(''.join(map[i]) for i in range(H))\n'''\n\nimport re\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        W,H = map(int,stdin.split())\n        map = [['.' for _ in range(W)] for _ in range(H)]\n        for line in stdin.split():\n            x,y = map[int(line)-1]\n            map[x][y] = line\n        return ''.join(''.join(map[i]) for i in range(H))\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        W,H = map(int,stdin.split())\n        map = [['.' for _ in range(W)] for _ in range(H)]\n        for line in stdin.split():\n            x,y = map[int(line)-1]\n            map[x][y] = line\n        return ''.join(''.join(map[i]) for i in range(H))\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        W,H = map(int,stdin.split())\n        map = [['.' for _ in range(W)] for _ in range(H)]\n        for line in stdin.split():\n            x,y = map[int(line)-1]\n            map[x][y] = line\n        return ''.join(''.join(map[i]) for i in range(H))\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        W,H = map(int,stdin.split())\n        map = [['.' for _ in range(W)] for _ in range(H)]\n        for line in stdin.split():\n            x,y = map[int(line)-1]\n            map[x][y] = line\n        return ''.join(''.join(map[i]) for i in range(H))",
        "test": "assert solution([\"P.G.GTG#\",\".\", \".\", \".\", \".\", \"T.GG#\", \".\", \".\", \".\", \".\"]) == \"1\"",
        "num_ids": 1220
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    p1, p2 = [int(x) for x in stdin.split()]\n    p1 -= 1\n    p2 -= 1\n    if p1 < 0:\n        p1 = p2 + 1\n    if p2 < 0:\n        p2 = p1 + 1\n    if p1 > p2:\n        p1, p2 = p2, p1\n    result = ''\n    for i in range(p1, p2):\n        result += '_'\n    return result\n\nExplanation:\nInput:\n3 10\n$$_____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$____$___$__$____$_$____$____$___$___$___\n__$_____$___$___$___$____$____$____$_____$_____\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n_____$_$_________$_____$________$_$________$_____\n_____$__$____$__$_____$_$_________$_$________$_$____\n_____$__$____$__$_____$_$________$____$__$____$__\n__$_____$___$__$_____$_$_________$_$_____$_$_____\n__$_____$___$__$_____$_$________$____$_____$__$____\n__$_____$___$__$_____$_$_________$_$_____$_$_____\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\n$$_____$$$_$$_____$$$______$$$____$$_____$_$_____\n$$_____$_$$_____$_$________$$_$____$$_____$_$_____\n$$_____$_$$_____$_$_________$$____$$_____$_$_____\n$$_____$_$$_____$_$_________$$____$$_____$_$_____\n$$_____$$$_$$_____$_$_________$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$_$____$$_____$_$_____\n$$_____$_$$_____$_$________$$_$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n$$_____$$$_$$_____$_$________$$$____$$_____$_$_____\n",
        "test": "assert solution(stdin) == '5'",
        "num_ids": 2820
    },
    {
        "number": 4875,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] =='':\n            stdin = stdin[:i] + stdin[i].upper() + stdin[i + 1:]\n            stdin = stdin.replace(' ', 'ay')\n            break\n    return stdin\n        \n        \n",
        "test": "assert solution(\"kabloom\"), \"Invalid Word\"",
        "num_ids": 470
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    menu = list(map(str, stdin.split()))\n    menu.sort()\n    if len(menu) < 2 or len(menu) > 3:\n        return 'Anywhere is fine I guess'\n    for i in range(len(menu) - 2):\n        if menu[i] == menu[i + 1]:\n            menu.pop(i + 1)\n            menu.pop(i)\n    return ''.join(menu)\n",
        "test": "assert solution(stdin) == \"Pancakes\"",
        "num_ids": 492
    },
    {
        "number": 4877,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(solution(stdin)) + 1)\n\n\nSample Input:\n10 10 10 10 0 0 0 0 0 0\nSample Output:\n10\ndef",
        "test": "assert solution(\"10 3 100\") == \"3\"",
        "num_ids": 595
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Fill in this method\n    pass",
        "test": "assert solution(stdin) == '19'",
        "num_ids": 2157
    },
    {
        "number": 4879,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x=str(stdin.split())\n    # print(x)\n    c1, c2, c3 = x[0][::-1], x[1], x[2]\n    ans = \"Yes\" if c1 == c2 else \"No\"\n    return ans\n    pass\n",
        "test": "assert solution(\"West North East\") == \"No\"",
        "num_ids": 379
    },
    {
        "number": 4880,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"marywasnosyagain\"",
        "test": "assert solution(\"1 1 1\") == \"marywasnosyagain\"",
        "num_ids": 879
    },
    {
        "number": 4881,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    \n    if num % 2 == 0:\n        return 'Even'\n    elif num % 2 == 1:\n        return 'Odd'\n    else:\n        return 'Odd'\n\"\"\"\n\n\nclass Solution:\n    def evenOdd(self, num: int) -> str:\n        num = num % 10\n        even = num % 2 == 0\n        odd = num % 2!= 0\n        return even if even else odd\n",
        "test": "assert solution(\"20\") == \"Odd\"",
        "num_ids": 283
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    answer = ''\n    while N > 0:\n        answer += str(10 ** (N % 10))\n        N //= 10\n    return answer\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, *payload = map(int, stdin.strip().split())\n        answer = ''\n        for p in payload:\n            answer += str(10 ** p)\n        return answer\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin.strip().split()[0])\n        answer = ''\n        for p in range(1, N + 1):\n            answer += str(10 ** p)\n        return answer\n",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 330
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    word_pairs = []\n    for line in stdin.split():\n        word, a, b = line.split()\n        a = int(a)\n        b = int(b)\n        word_pairs.append((a, b, word))\n    word_pairs = sorted(word_pairs)\n    for word_pair in word_pairs:\n        cnt = 0\n        for a, b, word in word_pair:\n            if a!= b:\n                cnt += 1\n        if cnt == m:\n            return word\n    return 'no'\n\n\n'''\n",
        "test": "assert solution(\"i r\"), \"i r\"",
        "num_ids": 471
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[1])+int(stdin[3])+int(stdin[5]))\n\ndef",
        "test": "assert solution(\"2 1\") == \"2\"",
        "num_ids": 1935
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    P = {\n        'K': 'K',\n        'Q': 'Q',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'p': 'p',\n        'p': 'p',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'p',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n",
        "test": "assert solution('+---+---+---+---+---+---+---+---+') == 'White: K8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,g7,h7,h6'",
        "num_ids": 3370
    },
    {
        "number": 4886,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    def guess(N, K):\n        if N == K:\n            return 'true'\n        elif K >= N:\n            return 'true'\n        else:\n            return 'false'\n    answer = guess(N, K)\n    return answer\n\nSample Output:\nExample 1:\n\nInput:\nN = 8\nK = 3\nOutput:\nYour wish is granted!\ndef",
        "test": "assert solution('3 4') == 'false'",
        "num_ids": 649
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    fence = ['e' if i%2 == 0 else 'o' for i in range(l, r+1)]\n    return ''.join(fence)",
        "test": "assert solution(input) == '100'",
        "num_ids": 362
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    d = [0] * (T + 1)\n    for i in range(n):\n        d[i + 1] = d[i] + i + 1\n    for i in range(T):\n        d[i + 1] = d[i] + d[i + 1]\n    return str(d[T])\n    \ndef",
        "test": "assert solution(\"200 1\") == 4, \"Problem statement failed\"",
        "num_ids": 506
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l_ = list(map(int, stdin.split()))\n    jumbo_javelin = len(l_)\n    i = 0\n    while True:\n        try:\n            if l_[i] > 1:\n                l_[i] -= 1\n                jumbo_javelin -= 1\n                i += 1\n            else:\n                l_[i] += 1\n                jumbo_javelin += 1\n                i += 1\n        except IndexError:\n            break\n    return f'{jumbo_javelin}'",
        "test": "assert solution(",
        "num_ids": 432
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    s = int(stdin[2])\n    d = int(stdin[3])\n    if d == 0:\n        return \"possible\"\n    elif d > 0:\n        return str(s - n * d)\n    elif d < 0:\n        return str(s + n * d)\n    else:\n        return str(s - n * d)\n\nSample Output:\npossible\nExplanation:\n1 3 1 1 0 0\nSample Input:\n10 4 1 2 1\n10 3 2 0 2\n3 0 0 0 0\nSample Output:\n1 3 0\nExplanation:\nThere are only $10$ students in the fridge, $3$ new sodas, and $0$ free slots.\nTo get the refill schedule for the new soda bottles, all the students will get a cold one.\n\"\"\"",
        "test": "assert solution(stdin) == \"2 3 0\"",
        "num_ids": 773
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().split(' ')[0])\n    s = int(stdin.strip().split(' ')[1])\n    n = int(stdin.strip().split(' ')[2])\n    m = int(stdin.strip().split(' ')[3])\n    a = []\n    for i in range(n):\n        a.append(str(i+1))\n    for i in range(s):\n        a.append(str(i+1))\n    for i in range(m):\n        a.append(str(i+1))\n    for i in range(k):\n        a.append(str(i+1))\n    for i in range(n):\n        a.append(str(i+1))\n    for i in range(s):\n        a.append(str(i+1))\n    for i in range(m):\n        a.append(str(i+1))\n    a = list(map(int, a))\n    for i in range(s):\n        a.append(str(i+1))\n    a = list(map(int, a))\n    for i in range(m):\n        a.append(str(i+1))\n    a = list(map(int, a))\n    for i in range(k):\n        a.append(str(i+1))\n    for i in range(n):\n        a.append(str(i+1))\n    a = list(map(int, a))\n    a = [str(i+1) for i in range(m)]\n    a = ''.join(a)\n    print(a)\n    return a\n\ndef",
        "test": "assert solution('1 0 0 0 0 0') == '0 0 0 0 0 1'",
        "num_ids": 2832
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    password = [line.split() for line in stdin.splitlines()]\n    n = len(password)\n    probabilities = [int(p) for p in password[0]]\n    n_correct_prob = sum(probabilities)\n    n_correct_prob = n_correct_prob * (1/n)\n    total = 0\n    for p in probabilities:\n        total += p\n    return round(total*(1/n_correct_prob),4)\n\"\"\"\n\nimport math\n\ndef",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 395
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    t = int(stdin)\n    p = 10**7\n    distances = []\n    for _ in range(t):\n        distances.append(int(stdin.split()[-1]))\n    d = 0\n    for i in range(t):\n        for j in range(i+1,t):\n            d += int(stdin.split()[-1])\n            if d <= distances[j]:\n                d = distances[j]\n    d = d - distances[0]\n    if d == 0:\n        return \"Invalid Input\"\n    return str(d)\n\nprint(solution(\"1 2 3 4\"))",
        "test": "assert solution(\"4 1\") == \"2\"",
        "num_ids": 423
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Read lines, once for each line\n    # * Each line should be in format:\n    #   <staff name> <staff duration> <staff notes> <staff notes> <staff notes>\n    # * Each staff should be followed by the staff notes\n    # * The staff notes are separated by a single space\n    # * For example, we have a name of the treble clef and a duration of 2 beats\n    # * Note notes should be separated by a single space\n    \n    # Each staff should have 1 to five notes\n    # Each staff should be sorted alphabetically\n    # Notes should be separated by a single space\n    \n    # Eventually, we will have to sort staff notes for each staff, such that the\n    # notes go in ascending order\n    \n    # For example, if we have a staff called the treble clef, we should have a notes\n    # separated by two spaces\n    # The notes should be in ascending order.\n    \n    # Note that we still need to sort staff notes for each staff, so we need to know\n    # which staff is the correct.\n    \n    # Now we have a staff in the first line of the song.\n    # For each staff, we want to find all the notes in the staff\n    # For each note in the staff, find the index of the note\n    # For each note in the staff, we need to check if we are in a certain position\n    # (i.e. at index 0, 1, 2, etc.)\n    \n    # Now we want to find all the notes in the staff, and we want to sort them\n    # from smallest to largest.\n    \n    # Then we need to get a sorted list of notes from the staff\n    \n    # If we are here, then the staff is the right one\n    # So the staff notes are already sorted by note position\n    \n    # Now that we have our notes sorted, we need to find the index of the notes\n    # in the staff in a way that we can sort them.\n    \n    # Lastly, the staff notes are now in the correct order.\n    # Now we need to get the notes from the staff in order of note position.\n    \n    # Finally we need to sort the staff notes in reverse order.\n    \n    # Then we need to find the position of the staff note, and we need to move it\n    # forward.\n    \n    # We have a staff of length $1$, $2$... $n$, and each staff note is separated by a single space\n    # Then we need to get the notes from the staff in the correct order\n    # So we need to check the index of the note in the staff, so we can move it forward\n    # If the index is out of range, we can't go anywhere there.\n    \n    # We can do this by first checking the index of the note in the staff,\n    # and if it is out of range, then we need to move it forward\n    # If it is out of range, then we need to go to the next staff note\n    # Else, we need to move it forward\n    # Lastly, we need to sort the staff notes by index position\n    \n    # Now we have the staff notes in the correct order, so we can sort them.\n    \n    # Now we need to find the position of the staff note in the correct order\n    \n    # Now we need to get the notes from the staff in order of note position.\n    \n    # Finally we need to sort the staff notes by index position\n\nExample:\n\nInput:\nstaff = \"treble clef\"\nduration = 2\nnotes = \"C C D E C E D2 C C D E F E D C B g A B C2 C2\"\nOutput:\nG:                                                                                                                                                                                         \nF:                                                                                                                                                                                                                            \nE:                                                                                                                                                                                                                                                                \nD:                                                                                                                                                                                                                                                                 \nC:                                                                                                                                                                                                                                                                                                     \nB:                                                                                                                                                                                                                                                                                                     \nA:                                                                                                                                                                                                                                                                                                                                         \ng:                                                                                                                                                                                                                                                                                                                                         \nf:                                                                                                                                                                                                                                                                                                                                                                             \ne:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \nd
        "test": "assert solution('2732') == 'G F E D E C D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'",
        "num_ids": 2830
    },
    {
        "number": 4895,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lengths = [int(x) for x in stdin.split()]\n    stack = []\n    \n    for i in range(len(lengths)):\n        while stack and stack[-1] <= lengths[i]:\n            stack.pop()\n            \n        if not stack:\n            stack.append(lengths[i])\n        else:\n            stack.append(max(stack[-1], lengths[i]))\n        \n    while stack:\n        stack.pop()\n    \n    return 'possible' if sum(stack) == 1 else 'impossible'",
        "test": "assert solution(\"1 2 3 2 1\"), \"possible\"",
        "num_ids": 2035
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    brick_width = [list(map(int, stdin.split())) for i in range(int(stdin.split()[0]))]\n    \n    # base case\n    if len(brick_width) == 1:\n        return '0'\n\n    # a built tower can be either width > 1 or width = 1\n    if brick_width[-1][0] > 1 or brick_width[-1][1] > 1:\n        brick_width = brick_width[:-1]\n        \n    # make the first tower the base\n    temp = brick_width[-1]\n    brick_width[-1] = [temp[0] + 1]\n    \n    # put the first tower to the right\n    brick_width[-1].append(temp[1])\n    \n    # iterate through the rest of the bricks\n    # each tower has a width > 1 and width <= 2\n    for brick in brick_width[:-1]:\n        for width in brick:\n            if brick[0] > width:\n                brick_width[-1].append(brick[0] + 1)\n                brick_width[-1].append(brick[1])\n                brick_width[-1].append(brick[2])\n                break\n            elif brick[0] == width:\n                brick_width[-1].append(brick[0] + 1)\n                brick_width[-1].append(brick[1])\n                brick_width[-1].append(brick[2])\n                break\n            elif brick[1] > width:\n                brick_width[-1].append(brick[1] + 1)\n                brick_width[-1].append(brick[0])\n                brick_width[-1].append(brick[2])\n                break\n            elif brick[1] == width:\n                brick_width[-1].append(brick[1] + 1)\n                brick_width[-1].append(brick[0])\n                brick_width[-1].append(brick[2])\n                break\n            elif brick[2] > width:\n                brick_width[-1].append(brick[2] + 1)\n                brick_width[-1].append(brick[0])\n                brick_width[-1].append(brick[1])\n                break\n            elif brick[2] == width:\n                brick_width[-1].append(brick[2] + 1)\n                brick_width[-1].append(brick[0])\n                brick_width[-1].append(brick[1])\n                break\n        else:\n            brick_width.append(brick + [brick[0] + 1] if len(brick) > 0 else [brick + [0]])\n\n    # last tower can be width = 1 or width = 2\n    if brick_width[-1][0] > 1 or brick_width[-1][1] > 1:\n        brick_width = brick_width[:-1]\n        \n    # if the first tower is width = 1, we fill the tower with 1\n    if brick_width[-1][0] == 1:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(1)\n        \n    # if the first tower is width = 2, we fill the tower with 1\n    if brick_width[-1][0] == 2:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(1)\n        brick_width[-1].append(1)\n    \n    # we now have the tower with the width = 2 and width >= 1\n    if brick_width[-1][1] == 1:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(2)\n        \n    # we now have the tower with the width = 2 and width < 1\n    if brick_width[-1][1] < 1:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(2)\n        brick_width[-1].append(2)\n    \n    # now we fill the tower with the widths 2 and 2 < 1\n    if brick_width[-1][1] == 2:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(2)\n        brick_width[-1].append(2)\n    \n    # now we have the tower with the widths 2 and 2 >= 1\n    if brick_width[-1][1] > 2:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(2)\n        brick_width[-1].append(2)\n        brick_width[-1].append(2)\n    \n    # last tower can be width > 1 or width = 1\n    if brick_width[-1][0] > 1 or brick_width[-1][1] > 1:\n        brick_width = brick_width[:-1]\n        \n    # if the first tower is width > 1, we fill the tower with 1\n    if brick_width[-1][0] > 1:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(1)\n        \n    # if the first tower is width = 1, we fill the tower with 1\n    if brick_width[-1][0] == 1:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(1)\n    \n    # if the first tower is width = 2, we fill the tower with 1\n    if brick_width[-1][0] == 2:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(1)\n    \n    # we now have the tower with the width = 2 and width <= 1\n    if brick_width[-1][1] <= 1:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(2)\n        brick_width[-1].append(2)\n    \n    # we now have the tower with the width = 2 and width > 1\n    if brick_width[-1][1] > 2:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(2)\n        brick_width[-1].append(2)\n    \n    # last tower can be width = 1 or width = 2\n    if brick_width[-1][0] > 1 or brick_width[-1][1] > 2:\n        brick_width = brick_width[:-1]\n        \n    # if the first tower is width > 1, we fill the tower with 1\n    if brick_width[-1][0] > 1:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(1)\n        \n    # if the first tower is width = 2, we fill the tower with 1\n    if brick_width[-1][0] == 2:\n        brick_width = brick_width[:-1]\n        brick_width[-1].append(1)\n    \n    # we now have the tower with the width = 2 and width <= 1\n    if brick_width[-1][1] <= 2:\n        brick_width = brick",
        "test": "assert solution([\"1\", \"1\", \"2\"]) == \"2\"",
        "num_ids": 2123
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    numbers = stdin.split(' ')\n    winner_team = []\n    team = []\n    for i in range(n):\n        team.append(list(map(int, numbers[i].split(','))))\n    \n    team.sort()\n    \n    winner_team.append(team[0][0])\n    winner_team.append(team[1][0])\n    winner_team.append(team[2][0])\n    winner_team.append(team[3][0])\n    \n    if len(team) == 4:\n        team.append(team[-1][1])\n        team.append(team[-2][1])\n        team.append(team[-3][1])\n        team.append(team[-4][1])\n    \n    for i in range(n):\n        if team[i][1] > team[i][0]:\n            winner_team.append(team[i][1])\n            team[i][0] = team[i][0] - team[i][1]\n            if team[i][0] < 0:\n                team[i][0] = 0\n    \n    for i in range(n):\n        if team[i][0] > 0:\n            team[i][0] = team[i][0] / team[i][1]\n            if team[i][0] > 0:\n                team[i][0] = 1\n    \n    for i in range(n):\n        if team[i][1] > team[i][0]:\n            team[i][1] = team[i][1] - team[i][0]\n            if team[i][1] < 0:\n                team[i][1] = 0\n    \n    for i in range(n):\n        if team[i][0] > 0:\n            team[i][0] = team[i][0] / team[i][1]\n            if team[i][0] < 0:\n                team[i][0] = 0\n    \n    for i in range(n):\n        if team[i][1] > team[i][0]:\n            team[i][1] = team[i][1] - team[i][0]\n            if team[i][1] < 0:\n                team[i][1] = 0\n    \n    for i in range(n):\n        if team[i][0] > 0:\n            team[i][0] = team[i][0] / team[i][1]\n            if team[i][0] < 0:\n                team[i][0] = 0\n    \n    for i in range(n):\n        if team[i][1] < 0:\n            team[i][1] = 0\n    \n    for i in range(n):\n        winner_team.append(team[i][1])\n    \n    return ','.join(str(x) for x in winner_team)\n\n'''\n",
        "test": "assert solution('ABSOLUTIY') == 'ABSOLUTIY'",
        "num_ids": 2402
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_val = n\n    min_val = n\n    \n    # get the preferences for every minion\n    preferences = []\n    for _ in range(n):\n        preferences.append([int(x) for x in stdin.strip().split()])\n    \n    # sort the preferences according to the preference\n    preferences.sort(key=lambda x: (x[1],x[0]))\n    \n    # count the number of intervals in each room\n    intervals = [0] * (n+1)\n    for i in range(n):\n        # check if the current interval is within the room\n        if preferences[i][1] > preferences[i+1][0]:\n            intervals[i+1] += 1\n        else:\n            intervals[i+1] = 0\n        \n    # get the amount of intervals in the room\n    for i in range(1, len(preferences)):\n        intervals[i] += intervals[i-1]\n    \n    # get the minimum number of rooms\n    min_rooms = 0\n    for i in range(1, n):\n        min_rooms += intervals[i] - intervals[i-1]\n        \n    # get the maximum amount of rooms\n    max_rooms = 0\n    for i in range(1, n):\n        max_rooms += intervals[i] - intervals[i-1]\n    \n    # return the maximum amount of rooms\n    return max_rooms-min_rooms\n\ndef",
        "test": "assert solution(stdin) == '2'",
        "num_ids": 884
    },
    {
        "number": 4899,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + \"e\" * len(stdin) + stdin[2:]\n\nHint: If you have an e in a string, you can only use one e. If you have e in a string, you have to create a new string.\n\n--------Time and Space---\nYes, you have to use two String Manipulation Lumps (Lm) to define strings, but you can\u2019t create one directly.\n\n---",
        "test": "assert solution(",
        "num_ids": 214
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Inputs from stdin\n    n = int(stdin)\n    \n    # Outputs from stdin\n    table = {}\n    villages = []\n    for i in range(n):\n        row = list(map(int,stdin.split()))\n        villages.append(row[0])\n        table[row[0]] = row[1:]\n    \n    # Calculating distances for each village in the table\n    for i in range(1,n):\n        table[villages[i-1]].append(i)\n    \n    # Creating a set with all pairs of villages\n    village_set = set()\n    for i in range(n):\n        for j in range(i+1,n):\n            village_set.add((i,j))\n            village_set.add((j,i))\n    \n    # Calculating distances between two villages\n    dist = {}\n    for i in range(n):\n        for j in range(i+1,n):\n            if (i,j) in village_set:\n                dist[(i,j)] = abs(villages[i]-villages[j])\n            else:\n                dist[(i,j)] = float('inf')\n    \n    # Printing the best solution\n    best_solution = None\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (i,j) in village_set and dist[(i,j)] < dist[(j,i)]:\n                dist[(i,j)] = dist[(j,i)]\n                best_solution = (i,j)\n    \n    # Printing the solution\n    if best_solution == None:\n        return 'NO SOLUTION'\n    \n    # For each pair of villages, print the corresponding distance\n    best_village = []\n    for i in range(n):\n        best_village.append(dist[(i,best_solution[0])])\n        best_village.append(dist[(best_solution[1],i)])\n        \n    # Print the best solution\n    if len(best_village) == 1:\n        print('YES')\n        return best_village[0]\n    else:\n        print('NO')\n        return 'NO SOLUTION'",
        "test": "assert solution(",
        "num_ids": 865
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    len_message = len(stdin)\n    if len_message % 2!= 0:\n        return stdin\n    p = len_message // 2\n    if len_message % 2!= 0:\n        rotate_and_merge_str = ''.join([stdin[i] for i in range(0, p, 2)])\n        rotate_and_merge_str += ''.join([stdin[i] for i in range(p + 1, len_message, 2)])\n        return rotate_and_merge_str\n    else:\n        rotate_and_merge_str = ''.join([stdin[i] for i in range(0, p, 2)])\n        rotate_and_merge_str += ''.join([stdin[i] for i in range(p + 1, len_message, 2)])\n        return rotate_and_merge_str[::-1]\n\nInput:\nAJRB\nOutput:\nABCD\nA\n\nInput:\nAJRB\nOutput:\nABCD\nAJRB\nA\n\nInput:\nAJRB\nOutput:\nABCD\nA\n\n-----Examples-----\n3\nABCD\nABC\nC\nA\n\n\"\"\"\ndef",
        "test": "assert solution(\"AJRB\") == \"BCD\"",
        "num_ids": 783
    },
    {
        "number": 4902,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    m = [1 for _ in range(26)]\n    for c in stdin:\n        i = ord(c) - ord('a')\n        if m[i]:\n            m[i] = 0\n        else:\n            m[i] = 1\n    n = len(stdin)\n    return str(sum(m))\n",
        "test": "assert solution(\"aabbccdefghijklmno\"), \"abcdefghijklmnopqrstuvwxyz\"",
        "num_ids": 311
    },
    {
        "number": 4903,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return 'go' if float(stdin) <= float(max(stdin.split())) else 'no'\n",
        "test": "assert solution(\"aaaaah\") == \"go\"",
        "num_ids": 555
    },
    {
        "number": 4904,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution from the question\n    \"\"\"\n    h = list(map(str, stdin.split()))\n    h = list(map(lambda x: list(x)[:3], h))\n    h.sort()\n    print(*h)\n\ndef",
        "test": "assert solution(",
        "num_ids": 404
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    inter_dict = dict()\n    answer = ''\n    for i in stdin:\n        inter, st = i.split()\n        inter_dict[inter] = st\n    \n    for i in inter_dict:\n        if i in inter_dict:\n            answer += str(inter_dict[i] - (i in inter_dict))\n        else:\n            answer += str(inter_dict[i])\n    return answer",
        "test": "assert solution(",
        "num_ids": 841
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def encode(msg):\n        run_length = 0\n        for c in msg:\n            run_length += 1\n            if c == \"$\" or c == \" \" or c == \",\" or c == \".\" or c == \"!\" or c == \"?\", c == \":\":\n                continue\n            if run_length > 9:\n                return msg\n        return msg + \"1\"\n    def decode(msg):\n        run_length = 0\n        for c in msg:\n            run_length += 1\n            if c == \"$\" or c == \" \" or c == \",\" or c == \".\" or c == \"!\" or c == \"?\", c == \":\":\n                continue\n            if run_length > 9:\n                return msg\n        return msg[:-1]\n\n    for line in stdin:\n        msg = line.split(\"$\")[0].upper()\n        for char in msg:\n            if char == \"$\" or char == \" \" or char == \",\" or char == \".\" or char == \"!\":\n                continue\n            if char == \" \":\n                continue\n            msg = msg + char\n        msg = encode(msg)\n        print(msg)\n        print(decode(msg))\n        return msg\n",
        "test": "assert solution(input()) == \"H3e2l3o1Wooorrrrlld\"",
        "num_ids": 1630
    },
    {
        "number": 4907,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return 'Alice'",
        "test": "assert solution(\"3\") == \"Alice\"",
        "num_ids": 174
    },
    {
        "number": 4908,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(int(i)+int(j)) for i, j in zip(input(), input()))\n    \n",
        "test": "assert solution(3, 6) == \"5+6=8\"",
        "num_ids": 380
    },
    {
        "number": 4909,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4: return 'NO'\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for j in range(1, n+1):\n        for i in range(1, n+1):\n            if i!= j:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j-1]\n    for j in range(1, n+1):\n        print(dp[j][j])",
        "test": "assert solution(\"2\") == \"NO\"",
        "num_ids": 552
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    categories = stdin.splitlines()\n    max_chance = -1\n    for i in range(len(categories)):\n        if categories[i].isalpha():\n            if categories[i].isupper():\n                max_chance = max(max_chance, len(categories[i]))\n            else:\n                max_chance = max(max_chance, int(categories[i]))\n    return categories[max_chance]\n\n\n\"\"\"\n===== Questions =====\n\n## Question:\n\n> Input\n\n> 1\n> a b c d e f",
        "test": "assert solution('mummy') =='mummy'",
        "num_ids": 488
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    names, lengths, commands = stdin.split()\n    result = ''\n    for line in names.split():\n        result += line +''\n    sortedList = sorted(list(map(int, lengths.split())))\n    commandList = []\n    for command in commands:\n        command = command.split()\n        commandList.append(command[0])\n    for command in commandList:\n        if command in ['start','restart', 'play','stop', 'pause', 'next', 'prev']:\n            result += command +''\n        else:\n            if command not in sorted(sortedList):\n                result += '-1 '\n            else:\n                result += command +''\n    result = result.strip()\n    return result\n\nprint(solution(\"Artist Album Song_Title Length_seconds\"))\n",
        "test": "assert solution(stdin) == '1.Album\\t2.Song\\t3.Artist\\t4.Length\\t5.Song_Title\\t6.Length_seconds\\t7.Song_Title\\t8.Length_seconds\\t9.Song_Title\\t10.Length_seconds'",
        "num_ids": 2122
    },
    {
        "number": 4912,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        if 0 <= x < w and 0 <= y < h:\n            print('YES')\n            return 'YES'\n    print('NO')\n\nprint(solution(\"\"\"\n2 10 7\n5 5 5 5 5 5 5\nSample Output:\nNO\n\"\"\"))",
        "test": "assert solution(\"1 10\") == \"YES\"",
        "num_ids": 871
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    team = {}\n    for _ in range(n):\n        str1 = stdin.split(\" \")\n        stdin = str(str1[0]) + \" \" + str(str1[1])\n    answer = \"\"\n    for i in range(n):\n        answer += str(int(team[i]) + 1)\n        if team[i]!= 0:\n            answer += \"Y\"\n        else:\n            answer += \"N\"\n    return answer\n",
        "test": "assert solution(\"NYYN\") == \"50.000000\"",
        "num_ids": 1243
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    exam = [list(stdin.split(\" \")) for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        answer += exam[i][exam[i].index(max(exam[i]))]\n    return answer\n\n>>> import collections\n>>> solution('AAAA')\n3\n>>> solution('AAAB')\n'A'\n>>> solution('BBBC')\n'B'\n>>> solution('CCCC')\n'C'\n>>> solution('ABC')\n'A'\n>>> solution('ABCC')\n'B'\n>>> solution('ABCD')\n'C'\n>>> solution('BDD')\n'B'\n>>> solution('ADC')\n'A'\n>>> solution('ABCD')\n'C'\n>>> solution('ABCDCC')\n'A'\n>>> solution('ABCDBCC')\n'B'\n>>> solution('ABCBBCC')\n'B'\n>>> solution('ABCCDBCC')\n'C'\n>>> solution('ABCBBC')\n'B'\n>>> solution('BBBCDBC')\n'C'\n>>> solution('ABCBBA')\n'B'\n>>> solution('ABCBBABC')\n'B'\n>>> solution('ABCBBABCD')\n'B'\n>>> solution('ABCBBABCDDD')\n'B'\n>>> solution('ABCBBABCDD')\n'B'\n>>> solution('ABCBBABCDDD')\n'B'\n>>> solution('ABCBBABCDDDAC')\n'B'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('ABCBBABCDDDAC')\n'A'\n>>> solution('",
        "test": "assert solution(B) == \"B\", \"B\"",
        "num_ids": 2936
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    log = []\n    for i in range(n):\n        entry = stdin.split(' ')\n        entry[1] = entry[1].upper()\n        log.append(entry)\n    \n    rank = 0\n    for i in range(n):\n        rank += len(log[i][2:])\n    rank += sum([len(log[i][2:]) for i in range(n)])\n    \n    return str(rank)\n\nSample Input:\n1 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D wrong\n-1\nSample Output:\n1\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\n\"\"\"\n\uacc4\uc0b0 \ud568\uc218\uc5d0 \ub300\ud55c \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9\ud574\uc11c \ub0b4\uac00 \ucc3e\uc740 \uac83\uc744 \uc801\uc6a9\ud574\uc11c \uac01 \uc0ac\ub78c\uc758 \ud68c\uc6d0\uc774 \uc815\ubcf4\ub97c \ubc1b\uc544\uc62c \uc218 \uc788\ub294 \uac00\uaca9\uc744 \uc800\uc7a5\ud558\ub294 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud55c\uba85\uc774\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \ucc3e\uc544\uc11c \uac00\uaca9\uc744 \ub0b4\uac00 \uc788\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4e0\ub2e4.\n\n\"\"\"\nfrom itertools import combinations\n\ndef",
        "test": "assert solution([\"3 E right\", \"10 A wrong\", \"30 C wrong\", \"50 B wrong\", \"100 A wrong\", \"200 A right\", \"250 C wrong\", \"300 D right\", \"1 E wrong\"]) == \"3 543\"",
        "num_ids": 718
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    d = [[0] * k for _ in range(n)]\n    start = 0\n    end = k - 1\n    print(end, start, sep='\\n')\n    dfs(matrix, start, end, d)\n    return str(d[end][end])\ndef",
        "test": "assert solution(stdin) == 5",
        "num_ids": 711
    },
    {
        "number": 4917,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    result = []\n    for i in range(1, lst[0] + 1):\n        result.append(lst[i] - i)\n    result.sort()\n    for i in result:\n        if i in result[:lst[0]]:\n            return 'gunilla has a point'\n    return 'gunilla is right'\nSample Input:\n2\n5\n2 2\nSample Output:\ngunilla has a point\ndef",
        "test": "assert solution('2 4') == 'gunilla has a point'",
        "num_ids": 341
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, q = map(int, stdin.split())\n    A = [int(elem) for elem in stdin.split()]\n    A = [x for x in A if x!= 0]\n    A = set(A)\n    answer = []\n    def check(l, r):\n        return r - l > 1\n    for i in range(q):\n        A = set(map(int, input().split()))\n        if (len(A) == 1):\n            answer.append(1)\n            continue\n        elif (check(A.pop(), A.pop())):\n            answer.append(1)\n        else:\n            answer.append(2)\n    return \" \".join([str(elem) for elem in answer])\n",
        "test": "assert solution(\"t 1 2\") == \"2\"",
        "num_ids": 800
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for line in stdin:\n        if line.startswith('<'):\n            count += 1\n            print(count)\n        else:\n            print(count)\n            count = 0\n    print(count)\n\ndef",
        "test": "assert solution(",
        "num_ids": 544
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    event_list = []\n    for _ in range(2):\n        event = stdin.split()\n        event_list.append(event)\n    event_list = sorted(event_list, key=lambda x: (x[0], x[1]))\n    times = sorted(set(event_list[0]))\n    for i in range(1, len(times)):\n        times[i] += times[i-1]\n    print(times[-1])\n    return times[-1]\n-----Submissions-----\nEnter the time in minutes: 30\n10\nEnter the time in minutes: 50\n10\nEnter the time in minutes: 100\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 30\n0\nOutput:\n0\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0 + 0 = 1\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 0.\n\nEnter the time in minutes: 100\n10\nEnter the time in minutes: 30\n10\nEnter the time in minutes: 50\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n10\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 100\n10\nEnter the time in minutes: 100\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n5\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n10\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n5\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n1\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 100\n10\nEnter the time in minutes: 100\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 100\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n1\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n5\nEnter the time in minutes: 0\n10\nEnter the time in minutes: 0\n1\nExplanation:\nThe sum of all good itineraries for the given summer season is:\n0\nThere are no good itineraries possible for the given summer season, so the number of good itineraries is 1.\n\nEnter the time in",
        "test": "assert solution(\"a\") == 0",
        "num_ids": 2117
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # for i in range(len(stdin)):\n    #     print(stdin[i])\n    words = stdin.split()\n    for i in range(len(words)):\n        if words[i] == \"\".join(set(words[i])):\n            print(words[i])\n        else:\n            print(\"*\")\n    return \"*\"\n",
        "test": "assert solution(\"Inefficiency is a blind on the world and its humanity\") == \"Inefficiency is a blind on.. and its humanity\"",
        "num_ids": 680
    },
    {
        "number": 4922,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, *clauses = list(map(int, stdin.split()))\n    var = [False] * (n + 1)\n    \n    def find_unsatisfiable(c: int) -> bool:\n        for i in range(n):\n            if var[i] == True and (i > 0 and var[i - 1] == False) or (i < n and var[i + 1] == False):\n                return False\n        \n        return True\n    \n    def solve(c: int) -> bool:\n        for i in range(n):\n            if var[i] == True and (i > 0 and var[i - 1] == False) or (i < n and var[i + 1] == False):\n                var[i] = True\n                var[i - 1] = False\n                if solve(c + 1):\n                    return True\n                var[i] = False\n                var[i - 1] = True\n        return False\n    \n    if solve(0) is True:\n        return'satisfactory'\n    else:\n        return 'unsatisfactory'\n",
        "test": "assert solution(\"-1 2 3\") == \"unsatisfactory\"",
        "num_ids": 1644
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rolls = [int(stdin.strip()) for _ in range(n)]\n    rolls.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        if rolls[i] == 1:\n            ans = i + 1\n    return str(ans)\n-----Examples-----\nIn [1]: import sys\nIn [2]: ''.join(sys.stdin.readlines())\nOut[1]: '1 5 3 4 6 6'\nIn [3]: solution('')\nOut[3]: 'none'\n\"\"\"\n\ndef",
        "test": "assert solution([\"1 1 1 5 3 4 6 6\", \"1 2 1 3 4 5 6\", \"1 1 1 3 5 6\", \"1 1 1 3\"]) == \"none\"",
        "num_ids": 2241
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    import math\n    \n    seconds = [ int(x) for x in stdin.split(':')]\n    \n    hours = seconds[0]\n    minutes = seconds[1]\n    seconds = seconds[2]\n    \n    if hours == 12:\n        hours = 1\n        minutes -= math.floor(minutes/60)\n    \n    total_seconds = (24*hours + minutes/60 + seconds/60)\n    \n    return str(total_seconds)\n",
        "test": "assert solution(\"04:00:00\") == \"08:00:00\"",
        "num_ids": 449
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    stdin = list(map(int, stdin.split()))\n    stdin.sort()\n    result = 0\n    for i in range(1, e+1):\n        if stdin[-1] - stdin[-2] == i:\n            result += 1\n        else:\n            result = 0\n    return str(result)\n\ndef",
        "test": "assert solution('5 7 5') == 5",
        "num_ids": 382
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = \"\"\n    for i in range(n+1):\n        answer += str(i) + \"e\" + str(n) + \"+\"\n    return answer[:-3]\n",
        "test": "assert solution(stdin) == '2.6666666666666665'",
        "num_ids": 1789
    },
    {
        "number": 4927,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1: standard input\n    n, p, q = map(int, stdin.split())\n    return 'paul' if n == p or p == q else 'opponent'\n    # Solution 2: a recursive approach\n    # print(\"paul\" if n == p or n == q else \"opponent\")\n    # return \"paul\" if n == p or p == q else \"opponent\"\n",
        "test": "assert solution(\"0 1 10\") == \"opponent\"",
        "num_ids": 291
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    return '0'\n-----Explanation-----\nMirko got 7 pieces of the pieces from a row of pieces of length 10. She has 7 pieces of the pieces from a row of pieces of length 20. She has no valid pieces. She could win the game with 1 piece of length 20.\n\nSample Input:\n2\nSample Output:\n0\ndef",
        "test": "assert solution(",
        "num_ids": 296
    },
    {
        "number": 4929,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"a3p\"), \"No\"",
        "num_ids": 666
    },
    {
        "number": 4930,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    ans = []\n    vowels = \"aeiou\"\n    for w in word:\n        ans.append(w)\n        if w in vowels:\n            ans.append(w)\n            ans.append(w)\n            ans.append(w)\n            ans.append(w)\n    return \" \".join(ans)",
        "test": "assert solution('') == ''",
        "num_ids": 786
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[1])\n    Y = int(stdin.split()[2])\n    if X < 0 or Y < 0 or X >= 100 or Y >= 100:\n        return \"IMPOSSIBLE\"\n    return str(round(abs(X-Y),5))\n\nSample Input:\n16 1\nSample Output:\n5\ndef",
        "test": "assert solution(",
        "num_ids": 2199
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    postman = [i for i in range(A, A+B+C+D)]\n    global_result = ''\n    for i in range(A, A+B+C+D):\n        global_result += str(postman.count(i))\n        postman.remove(i)\n    return global_result\n",
        "test": "assert solution(stdin) == \"one\"",
        "num_ids": 502
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    s=list(map(int,stdin.split()))\n    l=len(s)\n    # print(s)\n    # print(s[l-1:])\n    # print(s[0:3])\n    # print(s[3:l-2])\n    # print(s[3:l-1])\n    # print(s[l-1:l-2])\n    # print(s[l-3:l-1])\n    i=1\n    j=3\n    while j<l:\n        # print(s[i-1:j],s[j-1:l])\n        if s[i-1]<s[j-1]:\n            j=j+1\n            # print(s[i-1:j])\n        else:\n            i=i+1\n            # print(s[i-1:j])\n    return str(s[i-1])\n\n\nprint(solution(stdin))\n",
        "test": "assert solution(\"4 7 6\") == \"7\"",
        "num_ids": 3985
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    h, v = list(map(int, stdin.split()))\n    if h >= 10000:\n        print(min(abs(v-100), abs(v-90), abs(v-50)))\n        return\n    if abs(v-100) >= v-90:\n        return '0'\n    if abs(v-90) >= v-50:\n        return '0'\n    return '0'\n    ",
        "test": "assert solution(\"7 4 5\") == \"5\"",
        "num_ids": 400
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin[0])) * int(stdin[1]) * int(stdin[2]))\n\nSample Input:\n3 2\n100 60\n60 60\nSample Output:\n15.0\n15.0\ndef",
        "test": "assert solution(stdin) == '30.0'",
        "num_ids": 581
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.split()))\n    max_t = max(list(map(lambda x: int(x.split(':')[0]), filter(lambda x: len(x)!= 0, stdin.split('\\n')[1:]))))\n    min_t = min(list(map(lambda x: int(x.split(':')[1]), filter(lambda x: len(x)!= 0, stdin.split('\\n')[1:]))))\n    t = max_t - min_t\n    while t >= d:\n        t //= 2\n    return str(d) + ':' + str(t)\n\ndef",
        "test": "assert solution(23) == 27",
        "num_ids": 2129
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, e = [int(x) for x in stdin.split()]\n    ships = []\n    for _ in range(n):\n        ships.append(int(input()))\n    \n    n = len(ships)\n    if e % n == 0:\n        return max(ships)\n    \n    i = n // 2\n    for j in range(i, n):\n        # i = j + 1\n        # j = j - i + 1\n        if i < j:\n            break\n        if e - i == 1:\n            break\n        for k in range(i, j):\n            if ships[i] + ships[j] + ships[k] == e:\n                return k\n    return -1\n",
        "test": "assert solution(stdin) == 2",
        "num_ids": 507
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split('W')[1].split(')')[0])\n    m = int(stdin.split('M')[1].split(')')[0])\n    q = list(map(int, stdin.split('W')[0].split(',')))\n    \n    def solve(c):\n        if c == 'W':\n            return q.pop(0)\n        \n        elif c == 'M':\n            return q.pop(0)\n        \n    for _ in range(n):\n        q.append(solve(q.pop(0)))\n        \n    return str(q.pop(0))\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        return str(max(q.pop(0), q.pop(0)))\n",
        "test": "assert solution(stdin) == str(9)",
        "num_ids": 580
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n_list = []\n    m_list = []\n    for _ in range(n):\n        n_list.append(int(input()))\n    for _ in range(m):\n        m_list.append(input())\n    # print(n_list)\n    # print(m_list)\n    # print(n_list[-1])\n    # print(m_list[-1])\n    \n    start = 0\n    stop = n_list[-1]\n    while start <= stop:\n        mid = (start + stop) // 2\n        \n        if m_list[mid] == 'undo':\n            start = mid + 1\n        elif m_list[mid] == 'undo':\n            stop = mid - 1\n        elif m_list[mid] == 'undo':\n            stop = mid - 1\n        else:\n            print(mid)\n            start = mid + 1\n    print(stop + 1)\n    return str(stop + 1)\n",
        "test": "assert solution([\"5\",\"4\",\"1\",\"2\"]) == \"3\"",
        "num_ids": 2163
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    labels = list(map(int, stdin.split()))\n    swathers = [0] + [i + 1 for i in range(N)]\n    answer = []\n    for j in range(1, N):\n        for i in range(len(swathers)):\n            swathers[i] = swathers[i] + labels[i]\n        if swathers[j] >= M:\n            answer.append(swathers[j])\n    return''.join(str(i) for i in sorted(answer))",
        "test": "assert solution('2 3\\n2 3\\n3 3\\n3 3\\n') == '1 1\\n1 2\\n2 3\\n3 3\\n3 3\\n'",
        "num_ids": 445
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    d = dict()\n    e = dict()\n    for i in stdin:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in stdin:\n        if i in e:\n            e[i] += 1\n        else:\n            e[i] = 1\n    c = 0\n    for i in e.keys():\n        if e[i] == d[i] and d[i] == 1:\n            c += 1\n    return str(c)",
        "test": "assert solution([\"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"correct\", \"Incorrect\"",
        "num_ids": 1902
    },
    {
        "number": 4942,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n\nn = int(input())\nt = list(map(int, input().split()))\n\nfor i in range(1, n+1):\n    t[i] = min(t[i-1], t[i-2]) + 1\n\nprint(min(t))",
        "test": "assert solution([\"3\", \"5\"]) == \"7\"",
        "num_ids": 490
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return solution_main(stdin)\n\ndef",
        "test": "assert solution(",
        "num_ids": 556
    },
    {
        "number": 4944,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin.strip())\n    a=[]\n    if n<10:\n        print(n)\n        return n\n    for i in range(0,n):\n        a.append(i+1)\n    a=sorted(a)\n    if n%2==0:\n        print(n//2)\n    else:\n        print(n//2+1)\n\nInput\nn = 1\nOutput\n1\nExplanation\nPrints the smallest number of statues which are available for use the next day.\n\nInput\nn = 2\nOutput\n1\nExplanation\nPrints the smallest number of statues which are available for use the next day.\n\nInput\nn = 3\nOutput\n2\nExplanation\nPrints the smallest number of statues which are available for use the next day.\n\nInput\nn = 4\nOutput\n3\nExplanation\nPrints the smallest number of statues which are available for use the next day.\n\nInput\nn = 5\nOutput\n2\nExplanation\nPrints the smallest number of statues which are available for use the next day.\n\nInput\nn = 6\nOutput\n4\nExplanation\nPrints the smallest number of statues which are available for use the next day.\n\nInput\nn = 7\nOutput\n4\nExplanation\nPrints the smallest number of statues which are available for use the next day.\n\n-----Constraints-----\n1 <= n <= 104\n\n----Time Limit: O(n)----\n----Space Limit: O(1)----\n\n'''\n\nclass Solution:\n    def minDays(self, n: int) -> int:\n        if n < 10:\n            return n\n        a = []\n        for i in range(0,n):\n            a.append(i+1)\n        a=sorted(a)\n        if n%2==0:\n            print(n//2)\n            return n//2\n        else:\n            print(n//2+1)\n            return n//2+1\n    \n    \n",
        "test": "assert solution(",
        "num_ids": 2449
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def f(a, b, m):\n        return (a * m) + (b * m)\n\n    def bf(a, b, m):\n        return (a * m) + (b * m)\n\n    def fb(a, b, m):\n        return (b * m)\n\n    s = stdin.split()\n    a = int(s[0])\n    b = int(s[1])\n    m = int(s[2])\n    return str(max(map(f, a, b, m)))\n\nSample Input:\n3 1\n6 17\nSample Output:\n5\nThe maximum value of $R$ is 3, which is 7.67.\n",
        "test": "assert solution([\"1\", \"2\", \"2\", \"2\", \"3\", \"2\", \"2\", \"0\", \"3\", \"3\"]) == \"34\"",
        "num_ids": 722
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nSample Explanation:\nInput:\n2\n1 2 3 1\n\nOutput:\n2\n\nConstraints:\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^9\n\n@lc main=lucas12121.py\nsolution()\n",
        "test": "assert solution(\"de\") == \"3\"",
        "num_ids": 1806
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(float, stdin.split())\n    return round(y / (1000 * x), 1)\n\n\nExplanation:\n\nSample case 1: The number is $1,000,000. The number of Roman paces is approximately $10.\n\nSample case 2: The number is $1,000,000. The number of Roman paces is approximately $10.\n\nSample case 3: The number is $1,000,000. The number of Roman paces is approximately $10.\n",
        "test": "assert solution(\"1,5,000,000,000,000\") == \"1\"",
        "num_ids": 437
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    line = [int(x) for x in stdin.split()]\n    assert(len(line) == 3)\n    assert(sum(line) == 10000)\n    r, x, y, z = line\n    # print(r, x, y, z)\n    return \"%.6f\" % ((x - z) / r)\n\nSample Input:\n3 4\nSample Output:\n1.000000000\n2.000000000\n2.000000000\ndef",
        "test": "assert solution([\"5 3 1 0\"]) == \"50.000000000\"",
        "num_ids": 463
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, W, H = map(int, stdin.split())\n    m = []\n    for i in range(N):\n        tmp = stdin.split()\n        m.append([int(tmp[0]), int(tmp[1]), int(tmp[2])])\n    if m[0][0] < W:\n        m[0][0] = m[0][0] + W\n    elif m[N-1][0] > W:\n        m[N-1][0] = m[N-1][0] - W\n    if m[N-1][1] < H:\n        m[N-1][1] = m[N-1][1] + H\n    elif m[N-1][1] > H:\n        m[N-1][1] = m[N-1][1] - H\n    for i in range(N):\n        if m[i][2] < m[i][1]:\n            m[i][2] = m[i][2] + m[i][1]\n        elif m[i][2] > m[i][1]:\n            m[i][2] = m[i][2] - m[i][1]\n    for j in range(N):\n        if m[N-j-1][2] < m[N-j-1][1]:\n            m[N-j-1][2] = m[N-j-1][2] + m[N-j-1][1]\n        elif m[N-j-1][2] > m[N-j-1][1]:\n            m[N-j-1][2] = m[N-j-1][2] - m[N-j-1][1]\n    for i in range(N):\n        if m[i][2] < m[i][1]:\n            m[i][2] = m[i][2] + m[i][1]\n        elif m[i][2] > m[i][1]:\n            m[i][2] = m[i][2] - m[i][1]\n    for i in range(N):\n        if m[N-i-1][2] < m[N-i-1][1]:\n            m[N-i-1][2] = m[N-i-1][2] + m[N-i-1][1]\n        elif m[N-i-1][2] > m[N-i-1][1]:\n            m[N-i-1][2] = m[N-i-1][2] - m[N-i-1][1]\n    for i in range(N):\n        if m[i][2] < m[i][1]:\n            m[i][2] = m[i][2] + m[i][1]\n        elif m[i][2] > m[i][1]:\n            m[i][2] = m[i][2] - m[i][1]\n    for i in range(N):\n        if m[i][2] < m[i][1]:\n            m[i][2] = m[i][2] + m[i][1]\n        elif m[i][2] > m[i][1]:\n            m[i][2] = m[i][2] - m[i][1]\n    for i in range(N):\n        if m[N-i-1][2] < m[N-i-1][1]:\n            m[N-i-1][2] = m[N-i-1][2] + m[N-i-1][1]\n        elif m[N-i-1][2] > m[N-i-1][1]:\n            m[N-i-1][2] = m[N-i-1][2] - m[N-i-1][1]\n    for i in range(N):\n        if m[i][2] < m[i][1]:\n            m[i][2] = m[i][2] + m[i][1]\n        elif m[i][2] > m[i][1]:\n            m[i][2] = m[i][2] - m[i][1]\n    for i in range(N):\n        if m[N-i-1][2] < m[N-i-1][1]:\n            m[N-i-1][2] = m[N-i-1][2] + m[N-i-1][1]\n        elif m[N-i-1][2] > m[N-i-1][1]:\n            m[N-i-1][2] = m[N-i-1][2] - m[N-i-1][1]\n    m.sort(key=lambda x: (x[1], x[2]))\n    for i in range(N):\n        if m[i][1] > m[i][2]:\n            m[i][1] = m[i][2]\n            m[i][2] = m[i][1]\n        elif m[i][1] < m[i][2]:\n            m[i][1] = m[i][1] - m[i][2]\n            m[i][2] = m[i][1]\n    m.sort(key=lambda x: (x[1], x[2]))\n    for i in range(N):\n        if m[N-i-1][1] > m[N-i-1][2]:\n            m[N-i-1][1] = m[N-i-1][2]\n            m[N-i-1][2] = m[N-i-1][1]\n        elif m[N-i-1][1] < m[N-i-1][2]:\n            m[N-i-1][1] = m[N-i-1][1] - m[N-i-1][2]\n            m[N-i-1][2] = m[N-i-1][1]\n    m.sort(key=lambda x: (x[2], x[1]))\n    for i in range(N):\n        if m[i][2] > m[i][1]:\n            m[i][2] = m[i][1]\n            m[i][1] = m[i][2]\n        elif m[i][2] < m[i][1]:\n            m[i][2] = m[i][2] - m[i][1]\n            m[i][1] = m[i][2]\n    m.sort(key=lambda x: (x[2], x[1]))\n    for i in range(N):\n        if m[N-i-1][1] > m[N-i-1][2]:\n            m[N-i-1][1] = m[N-i-1][2]\n            m[N-i-1][2] = m[N-i-1][1]\n        elif m[N-i-1][1] < m[N-i-1][2]:\n            m[N-",
        "test": "assert solution('1 2 3') == 'NE'",
        "num_ids": 2122
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: int(x), stdin.split())))\n\nSample Input:\n3\n0 0\n1 10\n2 4\n3 8\nSample Output:\n7\ndef",
        "test": "assert solution(\"7 42\") == \"6\"",
        "num_ids": 452
    },
    {
        "number": 4951,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    for i in range(len(a)):\n        a[i] = a[i].upper()\n    \n    x = 0\n    for i in range(len(a)):\n        if a[i] == '->':\n            x += 1\n        else:\n            break\n    print(x)\n    return 'correct'\n",
        "test": "assert solution(\"0->1->2\") == \"correct\"",
        "num_ids": 406
    },
    {
        "number": 4952,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    candidates = []\n    for i in a:\n        candidates.append(i)\n    if candidates[0][0].isupper() == True:\n        candidates.pop(0)\n        candidates.append(candidates[0].capitalize())\n    votes = dict()\n    for i in candidates:\n        votes[i] = 0\n    for i in candidates:\n        if votes[i] < 2:\n            votes[i] = 0\n        elif votes[i] == 2:\n            votes[i] = 1\n    solution = ''.join(candidates)\n    if solution == 'Runoff':\n        return 'Runoff'\n    else:\n        return solution",
        "test": "assert solution('penny_franz'), 'penny_franz is not a valid candidate'",
        "num_ids": 2088
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, answer = [], []\n    for i in stdin:\n        n.append(i.split())\n    for j in range(len(n)):\n        for k in range(j+1, len(n)):\n            if not n[j][0] == n[k][0] and not n[j][1] == n[k][1]:\n                answer.append(len(n[j][0]))\n    answer.sort()\n    for i in answer:\n        print(i)\n    return answer[0]\n    pass\n-----Examples-----\nSample Input:\n4\nJean Jabba - the Hutt\nJabba Jean - the Huttese\nBib Fortuna - hutt\nSam Shiorghian - huttese\nGrakchawwaa - the Hutt\nGrakchawwaa - the Huttese\nSample Output:\n2\nExplanation:\nJabba and Jabba = Huttese, which is the smallest possible size.\nBib Fortuna and Huttese = huttese, which is the smallest possible size.\nSam Shiorghian and the huttese = huttese, which is the smallest possible size.\nGrakchawwaa and the huttese = the huttese, which is the smallest possible size.\nGrakchawwaa and Huttese = the huttese, which is the smallest possible size.\nGrakchawwaa and Shiorghian = the huttese, which is the smallest possible size.\n\n\"\"\"",
        "test": "assert solution(\"1 3 9\") == \"2\"",
        "num_ids": 2241
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,budget,h=map(int,stdin.split())\n    people = list(map(int,stdin.split()))\n    people.sort(reverse=True)\n    print(people[0])\n    count=0\n    for i in range(h):\n        if count+people[i]<=budget:\n            count+=people[i]\n        else:\n            count=people[i]\n    if count>=budget:\n        return'stay home'\n    else:\n        return'stay home'\n",
        "test": "assert solution(input()) == \"stay home\"",
        "num_ids": 460
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_num(s):\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False\n    \n    def is_symbol(s):\n        return s in [\"*\", \",\", \"!\", \"?\"]\n    \n    def is_bad_symbol(s):\n        return s in [\"+\", \"-\", \"(\"]\n    \n    def get_scale(s):\n        if len(s) == 1:\n            return s\n        elif is_num(s) == True:\n            return s\n        elif is_symbol(s) == True:\n            return s\n        else:\n            return \"\"\n    \n    def get_scale_names():\n        return [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"A#\", \"B#\", \"C#\", \"D#\", \"E#\", \"F#\", \"G#\"]\n    \n    scales = []\n    scale_count = 1\n    for line in stdin.split():\n        if len(line)!= 1:\n            s = get_scale(line)\n            if s!= \"\":\n                scales.append(s)\n        else:\n            scales.append(scale_count)\n            scale_count += 1\n    scales.sort()\n    for i in range(len(scales) - 1, 0, -1):\n        if scales[i]!= scales[i-1] + 1:\n            return \"None\"\n    return \" \".join(scales)",
        "test": "assert solution('A B C D F F D F F C') == 'A# C# F'",
        "num_ids": 2224
    },
    {
        "number": 4956,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass",
        "test": "assert solution([\"dae ae ju traeligt\", \"vide\", \"vu\", \"traeligt\", \"va\", \"ra\"]) == \"haer talar vi rikssvenska\"",
        "num_ids": 502
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(map(str, input())) for _ in range(n)]\n    water = []\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == \"#\":\n                water.append((row, col))\n            elif grid[row][col] == \"E\":\n                grid[row][col] = \"E\"\n    for _ in range(n):\n        grid.pop()\n    ans = \"\"\n    for row in grid:\n        for char in row:\n            if char == \"E\":\n                ans += \"E\"\n            elif char == \"#\":\n                water.remove((row.index(char), row.index(char)))\n                if len(water) == 1:\n                    ans += \"E\"\n            else:\n                ans += char\n    return ans\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        n, m = map(int, stdin.split())\n        grid = [list(map(str, input())) for _ in range(n)]\n        water = []\n        for row in range(n):\n            for col in range(m):\n                if grid[row][col] == \"E\":\n                    water.append((row, col))\n                elif grid[row][col] == \"#\":\n                    grid[row][col] = \"E\"\n        for _ in range(n):\n            grid.pop()\n        ans = \"\"\n        for row in range(n):\n            for col in range(m):\n                if grid[row][col] == \"E\":\n                    ans += \"E\"\n                elif grid[row][col] == \".\":\n                    grid[row][col] = \"E\"\n        for row in range(n):\n            grid.pop()\n        for col in range(m):\n            if grid[row][col] == \"#\":\n                water.remove((row, col))\n        for row in range(n):\n            for col in range(m):\n                if grid[row][col] == \"#\":\n                    grid[row][col] = \"E\"\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"E\":\n                    grid[i][j] = \"E\"\n        return ans",
        "test": "assert solution([\"..##.\", \"#   \", \"###     \", \"     \", \"    #    \", \"   #     \", \"  #      \", \"   #     \", \"  #      \"]) == \"E..E#.\\n..#E...\\nE.#.#...\\nE.#.#...\\nE...#...\\nE...#...\\nE....#..\\nE....#..\\nE....#..\\nE....##.\"",
        "num_ids": 1165
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n = int(stdin[0])\n    k = int(stdin[1])\n    t = k * (k + 1) // 2\n    heights = []\n    heights.append(t)\n    heights.append(k)\n    for i in range(2, t + 1):\n        heights.append(i)\n    heights.sort()\n    temp = ''\n    for i in range(k, n + 1):\n        temp += f'{heights[i - k]:2} '\n    return temp\n",
        "test": "assert solution(",
        "num_ids": 413
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n,e,f,c=map(int,input().split())\n    \n    if e>1000:\n        print(len(str(e//1000)))\n    elif f>1000:\n        print(len(str(f//1000)))\n    elif c>2000:\n        print(len(str(c//2000)))\n    else:\n        print(1)\n\nprint(solution(input()))",
        "test": "assert solution([\"9\",\"3\",\"0\"]) == \"4\"",
        "num_ids": 555
    },
    {
        "number": 4960,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    print(solution_main(stdin))\n    return ''\n\ndef",
        "test": "assert solution(stdin) == \"1\"",
        "num_ids": 2283
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_people, num_batten = stdin.split('.')\n    num_people = int(num_people)\n    num_batten = int(num_batten)\n    batten = [set(i.split(':')) for i in stdin.split('.')]\n    for i in range(num_people):\n        for j in range(num_batten):\n            if i+1 in range(num_people):\n                if j+1 in range(num_batten):\n                    if len(set(batten[i] & set(batten[i+1]))) == 1:\n                        batten[i].add(batten[i+1][0])\n                else:\n                    if len(set(batten[i] & set(batten[i+1]))) == 1:\n                        batten[i].add(batten[i+1][-1])\n            else:\n                if len(set(batten[i] & set(batten[i+1]))) == 1:\n                    batten[i].add(batten[i+1][-1])\n    return '.'.join(batten[-1])\n\nSolution Example:\nInput:\n2 3\n.o\no..\nSample Output:\n.o\ndef",
        "test": "assert solution(stdin) == \"1\", \"solution failed\"",
        "num_ids": 813
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    stdin = [int(x) for x in stdin.split()]\n    D = list()\n    for i in range(n):\n        D.append(stdin[i+1] - stdin[i])\n    D.sort(reverse=True)\n    R = []\n    for i in range(len(D)):\n        R.append(i+1)\n    for i in range(n):\n        if D[i]!= 0:\n            for j in range(i+1, n):\n                if D[j]!= 0:\n                    if D[i] < D[j]:\n                        R[i], R[j] = R[j], R[i]\n                        break\n        if i+1 == n:\n            return 'SMECE'\n    for i in range(len(D)-1):\n        if D[i] == 0:\n            R[i] = R[i+1]\n    for i in range(n-2, -1, -1):\n        if R[i]!= 0:\n            return 'SMECE'\n    return 'LADICA'\n\nSample Output:\nSMECE\nSMECE\nSample Input:\n1 3\n1 2\n2 2\n3 1\n3 2\nSample Output:\nSMECE\nSMECE\nExplanation:\nLADICA\nSMECE\nExplanation:\nFirst, the smallest drawer contains two items: $1$, $2$. And $3$.\n\nSecond, the smallest drawer contains two items: $1$, $2$, $3$. And $4$.\n\nThird, the smallest drawer contains two items: $1$, $2$, $3$, $4$. And $5$.\n\nFourth, the smallest drawer contains two items: $1$, $2$, $3$, $4$, $5$. And $6$.\n\nFifth, the smallest drawer contains two items: $1$, $2$, $3$, $4$, $5$, $6$. And $7$.\n\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nLADICA\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMECE\nSMECE\nLADICA\nSMEC",
        "test": "assert solution('1 2') == 'SMECE'",
        "num_ids": 2486
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    data = [list(map(int, stdin.split())) for _ in range(int(stdin.strip()))]\n    people = sorted(list(set([i[0] for i in data])))\n    for p in people:\n        idx = data.index((p,))\n        for i in range(idx, idx+2):\n            data[i] = (data[i][0], p)\n    return''.join(map(str, data))",
        "test": "assert solution(\"1 2 2 1 2\") == \"1 2 2\"",
        "num_ids": 346
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    m = m[1:]\n    m.sort()\n    return m[0]\n\ndef",
        "test": "assert solution(input().upper()) == \"1\"",
        "num_ids": 534
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    pools = [int(line) for line in stdin.split()]\n    sorted_pools = sorted(pools)\n\n    for i in range(len(sorted_pools)):\n        pools[i] += sorted_pools[i]\n\n    for i in range(M):\n        sorted_pools[i] += sorted_pools[i+1]\n    \n    for i in range(M):\n        if sorted_pools[i] == 0:\n            del sorted_pools[i]\n\n    for i in range(len(sorted_pools)):\n        if sorted_pools[i]!= 0:\n            sorted_pools[i] -= 1\n\n    return \"\".join(map(str, sorted_pools))\n\n\nSample Output:\nSample Input:\n2\n5 3\n2 1 4\nSample Output:\n4 3 2 1\ndef",
        "test": "assert solution(input()) == \"1 2 1\"",
        "num_ids": 530
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    \n    segments = [int(i) for i in stdin.split()]\n    segments.sort()\n    segments = segments[1:]\n    \n    t = segments[0]\n    \n    if t == 1:\n        p = k\n        q = 100000000\n    else:\n        p = k // t\n        q = 1000000 * (p + (k % t) // 10)\n    \n    t = q // 100000\n    \n    if t == 1:\n        p = k\n        q = 100000000\n    else:\n        p = k // t\n        q = 1000000 * (p + (k % t) // 10)\n        \n    t = q // 100000\n    \n    if t == 1:\n        p = k\n        q = 100000000\n    else:\n        p = k // t\n        q = 1000000 * (p + (k % t) // 10)\n    \n    if q == 100000000:\n        return \"ERROR\"\n    \n    return abs(p - q) // t * 100000\n",
        "test": "assert solution(input) == \"18.400\"",
        "num_ids": 615
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(map(str,input())) for i in range(n)]\n    # print(grid)\n    # print(grid[0][0])\n    # print(grid[n-1][m-1])\n    # print(grid[n-1][m-1][0])\n    # print(grid[n-1][m-1][1])\n    # print(grid[n-1][m-1][2])\n    # print(grid[n-1][m-1][3])\n    # print(grid[n-1][m-1][4])\n    # print(grid[n-1][m-1][5])\n    # print(grid[n-1][m-1][6])\n    # print(grid[n-1][m-1][7])\n    # print(grid[n-1][m-1][8])\n    # print(grid[n-1][m-1][9])\n    # print(grid[n-1][m-1][10])\n    # print(grid[n-1][m-1][11])\n    # print(grid[n-1][m-1][12])\n    # print(grid[n-1][m-1][13])\n    # print(grid[n-1][m-1][14])\n    # print(grid[n-1][m-1][15])\n    # print(grid[n-1][m-1][16])\n    # print(grid[n-1][m-1][17])\n    # print(grid[n-1][m-1][18])\n    # print(grid[n-1][m-1][19])\n    # print(grid[n-1][m-1][20])\n    # print(grid[n-1][m-1][21])\n    # print(grid[n-1][m-1][22])\n    # print(grid[n-1][m-1][23])\n    # print(grid[n-1][m-1][24])\n    # print(grid[n-1][m-1][25])\n    # print(grid[n-1][m-1][26])\n    # print(grid[n-1][m-1][27])\n    # print(grid[n-1][m-1][28])\n    # print(grid[n-1][m-1][29])\n    # print(grid[n-1][m-1][30])\n    # print(grid[n-1][m-1][31])\n    # print(grid[n-1][m-1][32])\n    # print(grid[n-1][m-1][33])\n    # print(grid[n-1][m-1][34])\n    # print(grid[n-1][m-1][35])\n    # print(grid[n-1][m-1][36])\n    # print(grid[n-1][m-1][37])\n    # print(grid[n-1][m-1][38])\n    # print(grid[n-1][m-1][39])\n    # print(grid[n-1][m-1][40])\n    # print(grid[n-1][m-1][41])\n    # print(grid[n-1][m-1][42])\n    # print(grid[n-1][m-1][43])\n    # print(grid[n-1][m-1][44])\n    # print(grid[n-1][m-1][45])\n    # print(grid[n-1][m-1][46])\n    # print(grid[n-1][m-1][47])\n    # print(grid[n-1][m-1][48])\n    # print(grid[n-1][m-1][49])\n    # print(grid[n-1][m-1][50])\n    # print(grid[n-1][m-1][51])\n    # print(grid[n-1][m-1][52])\n    # print(grid[n-1][m-1][53])\n    # print(grid[n-1][m-1][54])\n    # print(grid[n-1][m-1][55])\n    # print(grid[n-1][m-1][56])\n    # print(grid[n-1][m-1][57])\n    # print(grid[n-1][m-1][58])\n    # print(grid[n-1][m-1][59])\n    # print(grid[n-1][m-1][60])\n    # print(grid[n-1][m-1][61])\n    # print(grid[n-1][m-1][62])\n    # print(grid[n-1][m-1][63])\n    # print(grid[n-1][m-1][64])\n    # print(grid[n-1][m-1][65])\n    # print(grid[n-1][m-1][66])\n    # print(grid[n-1][m-1][67])\n    # print(grid[n-1][m-1][68])\n    # print(grid[n-1][m-1][69])\n    # print(grid[n-1][m-1][70])\n    # print(grid[n-1][m-1][71])\n    # print(grid[n-1][m-1][72])\n    # print(grid[n-1][m-1][73])\n    # print(grid[n-1][m-1][74])\n    # print(grid[n-1][m-1][75])\n    # print(grid[n-1][m-1][76])\n    # print(grid[n-1][m-1][77])\n    # print(grid[n-1][m-1][78])\n    # print(grid[n-1][m-1][79])\n    # print(grid[n-1][m-1][80])\n    # print(grid[n-1][m-1][81])\n    # print(grid[n-1][m-1][82])\n    # print(grid[n-1][m-1][83])\n    # print(grid[n-1][m-1][84])\n    # print(grid[n-1][m-1][85])\n    # print(grid[n-1][m-1][86])\n    # print(grid[n-1][m-1][87])\n    # print(grid[n-1][m-1][88])\n    # print(grid[n-1][m-1][89])\n    # print(grid[n-1][m-1][90])\n    # print(grid[n-1][m-1][91])\n",
        "test": "assert solution(stdin) == '10'",
        "num_ids": 2489
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    if len(stdin) == 0 or len(stdin) == 1:\n        return 1\n    \n    res = []\n    d = dict()\n    for i in range(int(stdin[0])):\n        d[i + 1] = d.get(i, 0) + 1\n    for i in range(int(stdin[1]), int(stdin[2])):\n        if d.get(i) > 0:\n            d[i] -= 1\n            res.append(i + 1)\n    return min(res) + 1\n    \n    \n",
        "test": "assert solution(\"5 2\") == 1",
        "num_ids": 473
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    answer = (R * C) / 100\n    return str(round(answer, 6)) + \" \"\nSample Input:\n2 2\n2\nSample Output:\n1.5\n",
        "test": "assert solution([\"1\",\"2\",\"3\",\"4\"]) == \"0.70000000000000004\"",
        "num_ids": 377
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n, p = map(int, stdin.split())\n    course = [i for i in range(1, n+1)]\n    course.sort()\n    while p:\n        if p & 1:\n            # odd number, skip\n            p -= 1\n            continue\n        # even number, take it\n        p >>= 1\n        # if there is a pair with both the first and last course, take the first\n        for i in range(len(course)):\n            # if the first course is less than the second, skip\n            if course[i] < course[i-1]:\n                continue\n            # if the first and last course are equal, skip\n            if course[i] == course[i-1]:\n                continue\n            # if both are equal, take the first\n            if course[i] == course[i-1] + course[i]:\n                continue\n            # otherwise, skip\n            break\n        answer += 1\n        course.pop()\n        p >>= 1\n    return str(answer)\n",
        "test": "assert solution(stdin) == \"31\"",
        "num_ids": 2231
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \n    def count_s(c, S):\n        return count_s(c + S, S)\n        \n    def is_int_pos(c, cnt):\n        return c == cnt or c == '-';\n        \n    def is_int_pos_prime(c):\n        return c == cnt or c == '-';\n        \n    def is_int_pos_prime_prime(c):\n        return c == cnt or c == '-';\n        \n    def is_int_pos_prime_prime_prime(c):\n        return c == cnt or c == '-';\n        \n    def is_int_pos_prime_prime_prime_prime(c):\n        return c == cnt or c == '-';\n    \n    def is_prime(c):\n        return c % 2 == 0\n    \n    n = int(stdin)\n    \n    S = 0;\n    \n    for c in range(n + 1):\n        if is_int_pos_prime(c):\n            S += int(count_s(c, S))\n        elif is_int_pos_prime_prime(c):\n            S += int(count_s(c, S))\n        elif is_int_pos_prime_prime_prime(c):\n            S += int(count_s(c, S))\n        elif is_int_pos_prime_prime_prime_prime(c):\n            S += int(count_s(c, S))\n        elif is_int_pos_prime_prime_prime_prime_prime(c):\n            S += int(count_s(c, S))\n        elif is_int_pos_prime_prime_prime_prime_prime(c):\n            S += int(count_s(c, S))\n            \n    if S > n:\n        return None\n    else:\n        return S\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert solution(\"5\") == \"5\"",
        "num_ids": 1928
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    if sys.version_info[0] >= 3:\n        input = sys.stdin.buffer.read()\n    else:\n        input = sys.stdin\n    n, k = map(int, input.split())\n    if n == 1:\n        print(0)\n    elif n == 0:\n        print(1)\n    else:\n        print(0)\n        pass\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        import sys\n        if sys.version_info[0] >= 3:\n            input = sys.stdin.buffer.read()\n        else:\n            input = sys.stdin\n        n, k = map(int, input.split())\n        if n == 1:\n            print(0)\n        elif n == 0:\n            print(1)\n        else:\n            print(0)\n            pass\n        pass\n",
        "test": "assert solution(\"65536\") == \"16\"",
        "num_ids": 343
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [list(map(int,input().strip().split())) for _ in range(n)]\n    steps = 0\n    for i in range(n-1):\n        for j in range(n-1):\n            for k in range(4):\n                if s[i][j] == 1:\n                    if s[i+1][j] == 1:\n                        if s[i][j+1] == 1:\n                            steps += 1\n                            break\n                    elif s[i][j+1] == 1:\n                        steps += 1\n                        break\n    return str(steps)\n    \nprint(solution(input()))\n\"\"\"\ndef",
        "test": "assert solution(2) == '2'",
        "num_ids": 1345
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)-1):\n        temp_num = int(stdin[i+1])\n        if temp_num < 10:\n            count += temp_num\n        else:\n            count += (temp_num - 9) * 100 + temp_num\n    return str(count)",
        "test": "assert solution(input()) == \"too late\"",
        "num_ids": 361
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    key = stdin.readline().strip()\n    plaintext = stdin.readline().strip()\n    n = len(plaintext)\n    table = dict()\n    for i in range(n):\n        if plaintext[i] in table.keys():\n            table[plaintext[i]].append(plaintext[i])\n        else:\n            table[plaintext[i]] = [plaintext[i]]\n    plaintext = []\n    for i in range(n):\n        plaintext.append(table[plaintext[i]])\n    plaintext = list(map(lambda x: ''.join(x), plaintext))\n    plaintext = list(map(lambda x: ''.join(x), plaintext))\n    table = dict()\n    for i in range(n):\n        if plaintext[i] in table.keys():\n            plaintext[i] = table[plaintext[i]]\n        else:\n            plaintext[i] = 'X'\n    plaintext = ''.join(plaintext)\n    plaintext = plaintext.replace(' ','')\n    plaintext = plaintext.lower()\n    plaintext = plaintext.split(' ')\n    plaintext = list(map(lambda x: ''.join(x), plaintext))\n    plaintext = list(map(lambda x: x.replace(' ',''), plaintext))\n    plaintext = ''.join(plaintext)\n    plaintext = plaintext.replace('X','*')\n    plaintext = plaintext.replace('Y','+')\n    plaintext = plaintext.replace('Z','0')\n    plaintext = plaintext.replace('q','!')\n    plaintext = plaintext.replace('B','@')\n    plaintext = plaintext.replace('A','$')\n    plaintext = plaintext.replace('E','$')\n    plaintext = plaintext.replace('V','$')\n    plaintext = plaintext.replace('R','$')\n    plaintext = plaintext.replace('L','$')\n    plaintext = plaintext.replace('K','$')\n    plaintext = plaintext.replace('M','$')\n    plaintext = plaintext.replace('J','$')\n    plaintext = plaintext.replace('N','$')\n    plaintext = plaintext.replace('W','$')\n    plaintext = plaintext.replace('T','$')\n    plaintext = plaintext.replace('U','$')\n    plaintext = plaintext.replace('X','$')\n    plaintext = plaintext.replace('B','X')\n    plaintext = plaintext.replace('V','X')\n    plaintext = plaintext.replace('R','X')\n    plaintext = plaintext.replace('L','X')\n    plaintext = plaintext.replace('K','X')\n    plaintext = plaintext.replace('M','X')\n    plaintext = plaintext.replace('J','X')\n    plaintext = plaintext.replace('N','X')\n    plaintext = plaintext.replace('W','X')\n    plaintext = plaintext.replace('T','X')\n    plaintext = plaintext.replace('U','X')\n    plaintext = plaintext.replace('E','X')\n    plaintext = plaintext.replace('C','X')\n    plaintext = plaintext.replace('G','X')\n    plaintext = plaintext.replace('I','X')\n    plaintext = plaintext.replace('H','X')\n    plaintext = plaintext.replace('M','X')\n    plaintext = plaintext.replace('Q','X')\n    plaintext = plaintext.replace('A','M')\n    plaintext = plaintext.replace('A','M')\n    plaintext = plaintext.replace('B','M')\n    plaintext = plaintext.replace('Z','M')\n    plaintext = plaintext.replace('E','M')\n    plaintext = plaintext.replace('B','M')\n    plaintext = plaintext.replace('I','M')\n    plaintext = plaintext.replace('J','M')\n    plaintext = plaintext.replace('Q','M')\n    plaintext = plaintext.replace('X','M')\n    plaintext = plaintext.replace('I','M')\n    plaintext = plaintext.replace('G','M')\n    plaintext = plaintext.replace('H','M')\n    plaintext = plaintext.replace('K','M')\n    plaintext = plaintext.replace('N','M')\n    plaintext = plaintext.replace('W','M')\n    plaintext = plaintext.replace('X','M')\n    plaintext = plaintext.replace('Z','M')\n    plaintext = plaintext.replace('Y','M')\n    plaintext = plaintext.replace('R','M')\n    plaintext = plaintext.replace('L','M')\n    plaintext = plaintext.replace('W','M')\n    plaintext = plaintext.replace('T','M')\n    plaintext = plaintext.replace('S','M')\n    plaintext = plaintext.replace('E','X')\n    plaintext = plain",
        "test": "assert solution(\"hide the gold in the tree stump\") == \"ZVUZYPLDNVBNRXSBIZCJZ\"",
        "num_ids": 1936
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y = map(int, stdin.split())\n    if (X * N) + (Y * N)!= (X * (N - 1) + Y * (N - 1)):\n        return \"The gopher cannot escape\"\n    else:\n        return \"The gopher can escape\"\n",
        "test": "assert solution(\"2.500 2.500\") == \"The gopher cannot escape.\"",
        "num_ids": 722
    },
    {
        "number": 4977,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,t = map(int,stdin.split())\n    if c == 0:\n        if b == 0 and c == 0:\n            return \"Y\"\n        if b == 0:\n            return \"N\"\n        return \"Y\"\n    if c == 0:\n        if t == 0 and a == 0:\n            return \"N\"\n        if t == 0 and a == 0:\n            return \"Y\"\n        return \"N\"\n    if a == 0 and c == 0 and b == 0:\n        return \"N\"\n    if a == 0:\n        return \"N\"\n    if c == 0:\n        return \"N\"\n    if b == 0:\n        return \"N\"\n    if t == 0:\n        return \"Y\"\n    return \"N\"\n\nSample Input:\n1 1 1 1\nSample Output:\n1\n\nExplanation:\nThe starting and ending point of the intersection are 1, 1.\n\nExplanation:\nYour battery has 0 units of electrical charge.\n\nExplanation:\nYour car starts off as stationary, and starts moving north.\n\nExplanation:\nYour battery has two units of electrical charge.\n\nThe final intersection is the intersection with the same charge.\n\nThe final unit of electrical charge is 0, which is sufficient because the starting and destination are the same.\n\n-----\n\"\"\"\n\ndef",
        "test": "assert solution(\"1 4\") == \"N\"",
        "num_ids": 559
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    grid = [list(stdin) for _ in range(N)]\n    answer = ''\n    for i in range(N-2):\n        for j in range(M):\n            if grid[i][j] == '.':\n                continue\n            elif grid[i+1][j] == '#':\n                continue\n            elif grid[i][j+1] == '#':\n                continue\n            elif grid[i+1][j+1] == '#':\n                continue\n            else:\n                answer += grid[i][j]\n    print(answer)\n",
        "test": "assert solution(\"V\"), \"V\"",
        "num_ids": 1332
    },
    {
        "number": 4979,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin)\n    if n<0:\n        return \"Error\"\n    m=len(str(n))\n    n_to_reverse=str(n)[::-1]\n    if n_to_reverse.startswith(\"0\") or n_to_reverse.startswith(\"1\"):\n        return str(int(n_to_reverse))\n    elif n_to_reverse.startswith(\"1\") and m==1:\n        return int(n_to_reverse[::-1])\n    else:\n        return \"Error\"\n\n-----Examples-----\nInput:\n4\n01\nOutput:\n11\n------Solution 1------\nInput:\n5\n0001\n1\n1\n0\n0\n1\nOutput:\n11\n------Solution 1------\nInput:\n3\n000111\n0110011\n11\n11\nOutput:\n11\n------Solution 1------\nInput:\n4\n0011\n01101\n11\nOutput:\n11\n------Solution 1------\nInput:\n4\n00011\n0110011\n11\n11\nOutput:\n11\n------Solution 1------\nInput:\n4\n000010\n011011\n11\nOutput:\n11\n------Solution 1------\nInput:\n6\n0000101\n1011\n10100\n10101\n101001\nOutput:\n11\n------Solution 1------\nInput:\n6\n101000\n0110100\n0110101\n01101001\n01101101\n011011101\n0110111\n01101110101\n0110111010101\n01101110101010101\n
        "test": "assert solution(12) == 11",
        "num_ids": 2027
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n",
        "test": "assert solution(\"TequilaSunrose\"), \"Cannot find TequilaSunrose to Teach\"",
        "num_ids": 554
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    s, c = map(str, stdin.split())\n    if len(s) > len(c):\n        s, c = c, s\n    s_list = list(s)\n    idx = 1\n    while idx < len(s):\n        while idx < len(s) and s_list[idx] == 'A':\n            idx += 1\n        while idx < len(s) and s_list[idx] == 'B':\n            idx += 1\n        while idx < len(s) and s_list[idx] == 'C':\n            idx += 1\n        if idx == len(s):\n            break\n        idx += 1\n    if idx == len(s):\n        return s\n    answer = ''\n    while idx < len(s):\n        answer += c[idx - 1] + s_list[idx]\n        idx += 1\n    return answer[::-1]\n\ndef",
        "test": "assert solution([\"A\", \"B\", \"C\", \"D\"]) == \"DCD\"",
        "num_ids": 516
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if m == n:\n        if n == m:\n            return str(sum(1 for _ in range(n)) + 1)\n        else:\n            return str(sum(1 for _ in range(n)))\n    else:\n        return str(sum(1 for _ in range(m - n + 1)))\n\nSample Input:\nbuy 1 15\nsplit 3\ndie 2\nSample Output:\n15\ndef",
        "test": "assert solution(\\\"\\\"\\\"",
        "num_ids": 1249
    },
    {
        "number": 4983,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = str(int(stdin))\n    digit = 0\n    answer = 0\n    for i in x:\n        digit += int(i)\n        if(i!= \"0\"):\n            answer = answer * 10 + int(i)\n    if(answer == 0):\n        return \"0\"\n    return str(answer % 10)\n\nsolution(\"808\")",
        "test": "assert solution(\"1\") == \"1\", \"1\"",
        "num_ids": 359
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    answer = -1\n    for i in range(int(stdin[0])):\n        for j in range(int(stdin[1])):\n            if(stdin[j+2] == \"L\"):\n                if(i+j == 4):\n                    answer = 1\n                else:\n                    answer += 2\n            elif(stdin[j+2] == \"W\"):\n                if(i+j == 4):\n                    answer = 2\n                else:\n                    answer += 3\n    return answer\n\nclass Solution:\n    def solve(self, N, R, C):\n        grid = [['.'] * C for _ in range(R)]\n        \n        for i in range(N):\n            for j in range(C):\n                grid[i][j] = 'L' if(grid[i][j] == 'C') else 'C' if(grid[i][j] == 'L') else 'W'\n        \n        visited = [set() for _ in range(N)]\n        visited[0].add('L')\n        queue = collections.deque([(0,0)])\n        \n        while queue:\n            r, c = queue.popleft()\n            \n            if(grid[r][c] == 'C'):\n                break\n            \n            if(grid[r][c] == 'L'):\n                for i in range(4):\n                    nr, nc = r + (i * 1), c + (i * 1)\n                    if(0 <= nr < N and 0 <= nc < C):\n                        if(not visited[nr][nc] and grid[nr][nc] == 'C'):\n                            visited[nr][nc] = True\n                            queue.append((nr, nc))\n            elif(grid[r][c] == 'W'):\n                for i in range(4):\n                    nr, nc = r + (i * 1), c + (i * 1)\n                    if(0 <= nr < N and 0 <= nc < C):\n                        if(not visited[nr][nc] and grid[nr][nc] == 'L'):\n                            visited[nr][nc] = True\n                            queue.append((nr, nc))\n            elif(grid[r][c] == 'C'):\n                for i in range(4):\n                    nr, nc = r + (i * 1), c + (i * 1)\n                    if(0 <= nr < N and 0 <= nc < C):\n                        if(not visited[nr][nc] and grid[nr][nc] == 'L'):\n                            visited[nr][nc] = True\n                            queue.append((nr, nc))\n                            break\n        \n        return len(visited)",
        "test": "assert solution(\"1 1 0 0 0\") == \"3\"",
        "num_ids": 1745
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, s, d = map(int, stdin.split())\n    points = sum(sorted(list(map(int, stdin.split()))))\n    print(points)\n    if points >= n * 0.5:\n        return 'Z'\n    if points >= n * 0.2:\n        return 'F'\n    if points >= n * 0.05:\n        return 'D'\n    if points >= n * 0.01:\n        return 'G'\n    return 'B'\n    \"\"\"\n    pass\n",
        "test": "assert solution(",
        "num_ids": 564
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[2:]\n    t = stdin[:2]\n    key_str = \"\"\n    key_list = []\n    for s_char in s:\n        if s_char in \"aeiouAEIOU\":\n            if not key_str:\n                key_str += s_char\n            else:\n                if s_char!= key_str:\n                    key_list.append(key_str)\n                    key_str = s_char\n        else:\n            key_str += s_char\n    if key_str:\n        key_list.append(key_str)\n    for t_char in t:\n        if t_char in \"aeiouAEIOU\":\n            if not key_str:\n                key_str += t_char\n            else:\n                if t_char!= key_str:\n                    key_list.append(key_str)\n                    key_str = t_char\n        else:\n            key_str += t_char\n    key_list.sort()\n    for key in key_list:\n        print(key)\n\nSample Output:\nse\ndef",
        "test": "assert solution(\"thiss is very annoying\") == \"def\"",
        "num_ids": 700
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    X = list(map(int, stdin.split()))\n    d = X[0]\n    c = X[1]\n    K = X[2]\n    machines = list(range(1, int(c*10**5) + 1))\n    print(len(machines))\n    for i in range(len(machines)):\n        if machines[i] > d:\n            machines[i] -= d\n        elif machines[i] < d:\n            machines[i] += d\n    for i in machines:\n        if machines[i]!= 0:\n            print(machines[i])\n            return machines[i]\n    return 0\n\n\n    pass\n\nfrom math import log10\nfrom sys import stdin\n\n\ndef",
        "test": "assert solution(input()) == '1'",
        "num_ids": 440
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) * int(stdin[1]) * int(stdin[2]))\n\ndef",
        "test": "assert solution(2) == 1",
        "num_ids": 227
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a + b\n\"\"\"\nclass Solution:\n    def solution(self, stdin):\n        return str(int(''.join(stdin.split()[1::2]))) +'' + str(int(''.join(stdin.split()[::2])))\n",
        "test": "assert solution(stdin) == \"4 2\"",
        "num_ids": 2202
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    if b > 100 or k > 100 or g > 100:\n        return '0'\n    if (b % 100 == 0) and (k % 100 == 0) and (g % 100 == 0):\n        return '0'\n    return '1'\n\n\nSample Output:\n5\n2\nExplanation:\nIn a 2 days group of knights, the drone climbed the ladder to the side of the tallest bridge, and the troll left the original space in the tallest bridge.\nThe guard is on the top of the bridge. The guard dropped at the top of the bridge, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to the side, the troll and the hall that has been behind the guard.\nThe guard is dragged to the side, it was still moving at light speed. The guard dropped the ladder to",
        "test": "assert solution(10, 2, 1) == 5, \"incorrect return value\"",
        "num_ids": 3341
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + int(stdin) - 1)\n\nSample Input:\n5\nSample Output:\n288\ndef",
        "test": "assert solution(9) == \"49\"",
        "num_ids": 295
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    student_scores = []\n    rooms = [int(i) for i in input().strip().split(' ')]\n    for i in range(n):\n        student_scores.append(int(input()))\n    student_scores.sort()\n    rooms.sort(reverse=True)\n    room_cnt = 0\n    room_prev = 0\n    result = ''\n    while room_prev < n:\n        for i in range(room_cnt, n):\n            if room_prev == i:\n                continue\n            student_scores.append(student_scores[i])\n            room_prev = i\n            if room_prev == n-1:\n                if room_cnt == 0:\n                    result = str(student_scores[-1]) +'' + result\n                elif room_cnt!= n-1:\n                    result =''*(room_cnt-1) +'' + str(student_scores[-1]) +'' + result\n                else:\n                    result =''*(n-1) +'' + str(student_scores[-1])\n            else:\n                result =''*(n-1) +'' + result\n        room_cnt += 1\n    print(result)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"4 2 3 1\") == \"2 3 4 1\"",
        "num_ids": 924
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split()))\n    seq = [[[] for i in range(w+1)] for j in range(n+1)]\n    for i in range(n+1):\n        for j in range(w+1):\n            if j < w:\n                seq[i][j] = [j]\n            elif j == w:\n                seq[i][j] = [1]\n    for i in range(2, n+1):\n        for j in range(1, w+1):\n            if j < w:\n                seq[i][j] = [j] + [seq[i-1][j-1]]\n            else:\n                seq[i][j] = [1] + [seq[i-1][j-1]]\n    answer = \"\"\n    for i in range(n):\n        for j in range(w):\n            if seq[i][j]!= [1]:\n                answer += seq[i][j][0]\n    return answer\n\n-----Sample Input:\n3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\nSample Output:\nhull\nright_oar\n\"\"\"\ndef",
        "test": "assert solution(input()) == \"arrow_bridge\"",
        "num_ids": 2066
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3 = map(int, stdin.split())\n    x4, y4 = map(int, stdin.split())\n    \n    def direction(x, y):\n        if x > 0:\n            if y > 0:\n                return 1\n            elif y < 0:\n                return 2\n            elif x > 0 and y > 0:\n                return 3\n            elif x < 0 and y < 0:\n                return 4\n            else:\n                return -1\n        else:\n            if y > 0:\n                return 3\n            elif y < 0:\n                return 4\n            elif x < 0 and y < 0:\n                return 5\n            elif x > 0 and y > 0:\n                return 6\n            else:\n                return -1\n        \n    def find_intersections(a, b, c, d, e, f, g, h):\n        return [\n            (d + e - g + h) // 2,\n            (b + g - c + h) // 2,\n            (a + h - f + e) // 2\n        ]\n        \n    def find_sides(a, b, c, d, e, f, g, h):\n        sides = [\n            find_intersections(a, b, c, d, e, f, g, h),\n            find_intersections(c, a, b, d, e, f, g, h),\n            find_intersections(a, c, b, d, e, f, g, h)\n        ]\n        \n        return sides\n        \n    def find_sides_d(a, b, c, d, e, f, g, h):\n        sides = [\n            find_intersections(a, b, c, d, e, f, g, h)\n        ]\n        \n        return sides\n        \n    def find_sides_f(a, b, c, d, e, f, g, h):\n        sides = [\n            find_intersections(a, b, c, d, e, f, g, h),\n            find_intersections(b, c, a, d, e, f, g, h)\n        ]\n        \n        return sides\n        \n    def find_sides_g(a, b, c, d, e, f, g, h):\n        sides = [\n            find_intersections(a, b, c, d, e, f, g, h),\n            find_intersections(c, b, a, d, e, f, g, h)\n        ]\n        \n        return sides\n        \n    def find_sides_h(a, b, c, d, e, f, g, h):\n        sides = [\n            find_intersections(a, b, c, d, e, f, g, h),\n            find_intersections(b, c, a, d, e, f, g, h)\n        ]\n        \n        return sides\n        \n    side_a = find_sides(x1, y1, x2, y2, x3, y3, x4, y4)\n    side_b = find_sides_d(x1, y1, x2, y2, x3, y3, x4, y4)\n    side_c = find_sides_f(x1, y1, x2, y2, x3, y3, x4, y4)\n    side_d = find_sides_g(x1, y1, x2, y2, x3, y3, x4, y4)\n    side_e = find_sides_h(x1, y1, x2, y2, x3, y3, x4, y4)\n    \n    return side_a + side_b + side_c + side_d + side_e\n    \n    \n",
        "test": "assert solution(input()) == \"7 7\"",
        "num_ids": 2976
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = list(map(int, stdin.strip().split()))\n    sum = 0\n    for i in t:\n        sum += i\n    sum /= 60\n    return str(sum)",
        "test": "assert solution(",
        "num_ids": 197
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    dic = {'$':0, 'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    L = list(stdin.upper())\n    for i in range(len(L)):\n        L[i] = dic[L[i]]\n    print(''.join(L))\n    return ''.join(L)\nprint(solution('$CPMCRYY'))",
        "test": "assert solution(stdin) == \"def\"",
        "num_ids": 444
    },
    {
        "number": 4997,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # print('input:', stdin)\n    # print('output:', solution(stdin))\n    \n    return '3'\n\nSample Input:\nCDDD\nSample Output:\n2\ndef",
        "test": "assert solution(\"AB\" + \"AC\"), \"Invalid input\"",
        "num_ids": 688
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin.split(\" \")[0])*int(stdin.split(\" \")[1]),\n                int(stdin.split(\" \")[0])*int(stdin.split(\" \")[2]),\n                int(stdin.split(\" \")[0])*int(stdin.split(\" \")[3])))\n",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 444
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1,int(stdin)+1):\n        a,b = map(int,str(i).split())\n        if a % 2 == 0:\n            a = a*2\n        else:\n            a = a+1\n        if b % 2 == 0:\n            b = b*2\n        else:\n            b = b+1\n        if a > b:\n            a,b = b,a\n    return str(a)\n\n--------Sample Input:\n3\n1 10\n1 2\n1 3\n2 4\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n6 8\n7 8\n7 9\n8 9\n-----Sample Output-----\n3\n2\n1\n2\n4\n6\n7\n-----Examples-----\nInput\n3\n1 10\n1 2\n1 3\n2 4\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n6 8\n7 8\n8 9\n9 9\nOutput\n2\n7\n3\nInput\n3\n1 10\n1 2\n1 3\n2 4\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n6 8\n7 8\n8 9\n9 9\nOutput\n4\nInput\n3\n1 10\n1 2\n1 3\n2 4\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n6 8\n7 8\n8 9\n9 9\nOutput\n5\n\nExplanation\nLet the system have a sequence: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.\nTo transform a value $a$ into $b$, the minimum sequence of operations required to transform $a$ is:\n1 1 2 2 3 3 3 3 4 4 4 4 5 5 6 6 7 7 8 8 9 9 10 10\n1 2 1 2 3 3 3 3 4 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245",
        "test": "assert solution(\"2 2\") == 2",
        "num_ids": 2121
    }
]